<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>[Solved]: non-default argument follows default argument</title>
      <author>Rajesh Joshi</author>
      <pubDate>Wed, 29 Sep 2021 03:59:09 +0000</pubDate>
      <link>https://dev.to/rajeshj3/solved-non-default-argument-follows-default-argument-400d</link>
      <guid>https://dev.to/rajeshj3/solved-non-default-argument-follows-default-argument-400d</guid>
      <description>&lt;p&gt;Once in your life, you must have faced this error in &lt;code&gt;Python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;non-default argument follows default argument&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;In Python, normally you can't define &lt;code&gt;non-default&lt;/code&gt; arguments after &lt;code&gt;default&lt;/code&gt; arguments in a function, method or class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;non-default arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;default arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, a combination of both of these looks something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is 100% correct. It works great.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Executing this code will log, &lt;strong&gt;non-default argument follows default argument&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution?
&lt;/h2&gt;

&lt;p&gt;The solution is very simple, just use &lt;code&gt;*&lt;/code&gt; at 0th index in the definition.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was introduced in &lt;code&gt;Python 3.4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Don;t forget to pass required keyword arguments while calling the function, method or class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'School'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;Rajesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;School&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you&lt;br&gt;
Cheers&lt;/p&gt;

</description>
      <category>python</category>
      <category>help</category>
      <category>errors</category>
      <category>solved</category>
    </item>
    <item>
      <title>[free template] App UI package for Food ordering</title>
      <author>Adamo Digital</author>
      <pubDate>Wed, 29 Sep 2021 03:44:40 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/free-template-app-ui-package-for-food-ordering-7mh</link>
      <guid>https://dev.to/adamodigitalco/free-template-app-ui-package-for-food-ordering-7mh</guid>
      <description>&lt;p&gt;As social distancing spread globally, we saw a surge of demand in developing food ordering websites and apps. Unfortunately, there have some ambiguities in concept and features deterring companies from defining what they really want.&lt;/p&gt;

&lt;p&gt;Accordingly, today we give you a small step of what a realistic app should be? Despite spending money buying UI design in ThemeForest or other design marketplaces, we give you FREE.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bf8gbbcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enr35kn3bi69ex71zoek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bf8gbbcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enr35kn3bi69ex71zoek.png" alt="On demand food delivery UI set"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readytoused-template-for-everyone"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;Ready-to-used template&lt;/a&gt; for everyone
&lt;/h2&gt;

&lt;p&gt;We offer a full set of 15 app screens of featured delivery app, specialize in user apps. It contains interfaces for user login, placing orders, and tracking orders.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Screens&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Log-in/sign-up screen&lt;/td&gt;
&lt;td&gt;For users access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Profile management screen&lt;/td&gt;
&lt;td&gt;Payment, notification, languages, and more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Home Screen&lt;/td&gt;
&lt;td&gt;Dishes and drinks exploring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store screen&lt;/td&gt;
&lt;td&gt;Menus and information display&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Order and Payment&lt;/td&gt;
&lt;td&gt;Order review and placing payment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#get-it-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;GET IT NOW&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#completed-ui-design-for-ordering-app"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;Completed UI design&lt;/a&gt; for ordering app
&lt;/h2&gt;

&lt;p&gt;As developers, you intend to explore the fundamental feature set to be applied in an app development project. In fact, each project has its own architecture and UI depending on the unique requirement of product owners. However, in terms of &lt;a href="https://adamodigital.com/on-demand-food-ordering-app"&gt;Food ordering apps&lt;/a&gt;, some common authorism could be shared.&lt;/p&gt;

&lt;p&gt;As a UX/UI designer, it is a rare opportunity for you to capture a completed package UI for FREE. Our latest UI template comes from experienced designers who contributed to many real projects. As &lt;a href="https://adamodigital.com/"&gt;software outsourcing companies&lt;/a&gt;, we have a chance to execute several projects related to &lt;a href="https://adamodigital.com/on-demand-food-ordering-app"&gt;on-demand Food ordering&lt;/a&gt; and &lt;a href="https://adamodigital.com/on-demand-food-delivery-app"&gt;on-demand food delivery&lt;/a&gt;, which turned into a valued experience.&lt;/p&gt;

&lt;p&gt;As a client planning a new project regarding food orders to your business, our template would give you the initial concept before talking further.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fUuAln2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uicybnmz6s3zsak5bvot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fUuAln2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uicybnmz6s3zsak5bvot.png" alt="UI template screen reveal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-here"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;DOWNLOAD HERE&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>design</category>
      <category>template</category>
      <category>uiset</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 65</title>
      <author>Christopher Glikpo</author>
      <pubDate>Wed, 29 Sep 2021 03:40:43 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-65-4fg5</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-65-4fg5</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be Creating the video progress timer&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FvbGFqo37UI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS Elastic Beanstalk - Hands On</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 29 Sep 2021 03:18:30 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-elastic-beanstalk-hands-on-1gji</link>
      <guid>https://dev.to/this-is-learning/aws-elastic-beanstalk-hands-on-1gji</guid>
      <description>&lt;p&gt;To create a stack on AWS bean stalk follow the steps below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search for beanstalk in the Search bar after logging in &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1ffTUkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaam95jxtyo4nvrp8e1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1ffTUkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaam95jxtyo4nvrp8e1o.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on create application on the homepage&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkTXmXM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xcuclrlfimfnopukxs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkTXmXM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xcuclrlfimfnopukxs8.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select an application name I selected &lt;code&gt;test-beanstalk-app&lt;/code&gt; and tags you want to attach to this app&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8iJ5tGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8yf42k7utp2qt4xhsyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8iJ5tGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8yf42k7utp2qt4xhsyl.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that on platform select &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Platform- Language with which you want to deploy your app &lt;/li&gt;
&lt;li&gt;Select version of node.js I selected the automatically selected one&lt;/li&gt;
&lt;li&gt;Platform version- Version of AWS platform that you want to select as different versions support deifferent node.js engines&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SzHV5Y3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fduethjv4k96nc0emif3.png" alt="alt text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In application code select sample application for a test app. If you want to upload your own code select upload your code &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpy7l_7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8l6rtiihzdhsus8x9zv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpy7l_7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8l6rtiihzdhsus8x9zv.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on create application and wait for a few minutes after a few logs you will see the following screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7t9Sa_KB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um317go8q6u4rpjt5nkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7t9Sa_KB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um317go8q6u4rpjt5nkm.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the app link highlighted in the previous image to have a look at your demo app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUmfJPK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0pzek97i9dj9epo50qc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUmfJPK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0pzek97i9dj9epo50qc.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that in configuration you can check all the things that were setup by AWS beanstalk&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDmxjLdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fixajx8n2xaj38qjmuvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDmxjLdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fixajx8n2xaj38qjmuvt.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create various environments in the environments like creating develop, production etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KG2z3ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dp0f36utk7sux6tum2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KG2z3ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dp0f36utk7sux6tum2.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally delete your app using the applications tab and select application and after that click on actions and click delete application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a4ukKRy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xesnl92a4mi0adklhmqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a4ukKRy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xesnl92a4mi0adklhmqr.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done with creating a platform in Beanstalk next will study how to create your own pipelines in AWS&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Estruturas de dados como Hooks, um guia: Linked List</title>
      <author>Charles Assunção</author>
      <pubDate>Wed, 29 Sep 2021 02:39:31 +0000</pubDate>
      <link>https://dev.to/assuncaocharles/estruturas-de-dados-como-hooks-um-guia-linked-list-1c7d</link>
      <guid>https://dev.to/assuncaocharles/estruturas-de-dados-como-hooks-um-guia-linked-list-1c7d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“Programadores medianos se preocupam meramente com o código. Programadores excelentes se preocupam com estruturas de dados e suas relações.” — Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu amo algoritmos e estruturas de dados, quando estava na faculdade eu fui monitor de estruturas de dados ( basicamente ajudava alunos novos a entender o assunto e o professor a corrigir exercícios ). Se quiser saber mais sobre minha história você pode conferir meu &lt;a href="https://dev.to/assuncaocharles/um-review-de-quase-10-anos-como-dev-48fc"&gt;post fazendo um review dos últimos anos&lt;/a&gt;. Eu também costumo passar algumas horas do meu tempo livre brincando com os amigos no &lt;a href="https://www.codingame.com/blog/clash-of-code-time-has-come-for-clash/"&gt;clash of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É, eu sei, bem nerd 🤓. Então como uma forma de ressuscitar esse meu antigo prazer, eu decidi criar uma série de posts implementando estruturas de dados em javascript e para fazer isso ficar mais divertido e no hype vamos fazer isso tudo como &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;react hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos ver várias estruturas de dados aqui, mas quis começar com uma das mais simples e comuns &lt;code&gt;Linked List&lt;/code&gt; ( lista encadeada ).&lt;/p&gt;

&lt;p&gt;Para quem ainda não sabe muito bem como funciona a lista encadeada confere aqui o que o &lt;a href="https://en.wikipedia.org/wiki/List_(abstract_data_type)"&gt;Wikipedia&lt;/a&gt; diz sobre:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Em ciência da computação, a lista ou sequência é uma abstração de tipo de dado que representa um número mensurável de valores ordenados.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se isso não ajudou muito, você pode apenas imaginar uma sequência de dados onde um dado está conectado com o próximo, pro exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considerando uma lista como essa, podemos chamar cada número de &lt;code&gt;node&lt;/code&gt; ( nó ) e dar um nome especial para o primeiro e último, respectivamente &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; ( cabeça e cauda ). &lt;/p&gt;

&lt;p&gt;Todo o código que vamos ver aqui está disponível &lt;a href="https://codesandbox.io/s/uselinkedlist-940id?file=/src/App.js"&gt;nesse CodeSandbox&lt;/a&gt;. Junto com uma pequena aplicação para visualizar nosso trabalho. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjMSJebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://g.recordit.co/x2q0CNDONl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjMSJebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://g.recordit.co/x2q0CNDONl.gif" alt="Linked List Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chega de teoria, vamos botar a mão na massa... &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER: O objetivo aqui é ser o mais didático possível para iniciantes, então estou bem ciente que o código aqui pode não ser padrão de qualidade de produção. Também estou tentando evitar algumas mágicas do JS e coisas mais complexas como recursão para manter o mais simples possível. ;)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h2&gt;

&lt;p&gt;No final, o que queremos é atingir um contrato ( API ) parecido com o código a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;removeAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;dataAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nossa lista é apenas uma sequência de &lt;code&gt;nodes&lt;/code&gt; então precisamos representar isso. Vamos dizer que queremos poder usar um &lt;code&gt;node&lt;/code&gt; da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1 ou qualquer outro tipo de data que você queira manter na sua lista&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#partes-fundamentais"&gt;
  &lt;/a&gt;
  Partes fundamentais
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#node"&gt;
  &lt;/a&gt;
  Node
&lt;/h3&gt;

&lt;p&gt;Nossa lista vai ser construída com &lt;code&gt;nodes&lt;/code&gt; e nos vamos fazer operar funções nos &lt;code&gt;nodes&lt;/code&gt; então faz todo sentido que criar nossa representação de &lt;code&gt;Node&lt;/code&gt; seja a primeira coisa a se fazer...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 1,2,3 Testando...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { data: 1, next: null } &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Ações
&lt;/h3&gt;

&lt;p&gt;Vamos usar um &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;reducer simples&lt;/a&gt; nativo do &lt;code&gt;React&lt;/code&gt; para manipular nossa &lt;code&gt;list&lt;/code&gt; e para isso funcionar precisamos ter uma ideia clara do que pode ser executado, então vamos definir as possíveis ações que podem acontecer na nossa &lt;code&gt;list&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[LIST] - ADD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;REMOVE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[LIST] - REMOVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;REMOVE_AT_INDEX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[LIST] - REMOVE_AT_INDEX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;REVERT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[LIST] - REVERT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#o-hook"&gt;
  &lt;/a&gt;
  O hook
&lt;/h3&gt;

&lt;p&gt;Nosso hook é uma função bem simples que apenas mantem o estado usando &lt;a href="https://reactjs.org/docs/hooks-reference.html#useReducer"&gt;useState&lt;/a&gt; e expõem algumas funções para permitir manipular o estado, então a gente vai começar com algo parecido com o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reducer"&gt;
  &lt;/a&gt;
  Reducer
&lt;/h3&gt;

&lt;p&gt;Precisamos definir nosso reducer, o que vai ser bem simples, basicamente contendo manipulação do estado baseado nas ações que definimos anteriormente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#m%C3%A9todos-base"&gt;
  &lt;/a&gt;
  Métodos base
&lt;/h3&gt;

&lt;p&gt;Precisaremos de algumas funções para poder executar algumas operaçÕes na &lt;code&gt;list&lt;/code&gt;, então vamos começar construindo-as:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-add-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;add&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Temos que poder adicionar novos &lt;code&gt;nodes&lt;/code&gt; na &lt;code&gt;list&lt;/code&gt; e, como disse anteriormente, manter a referência da &lt;code&gt;tail&lt;/code&gt; para que nossa operação de &lt;code&gt;add&lt;/code&gt; seja &lt;strong&gt;O(1)&lt;/strong&gt; 🤟🏻. Nossa função vai receber o dado para ser adicionado, a &lt;code&gt;list&lt;/code&gt; atual e nossa &lt;code&gt;tail&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos conferir se já existe o primeiro &lt;code&gt;node&lt;/code&gt; na nossa &lt;code&gt;list&lt;/code&gt; ou se vamos ter que criar o primeiro. Se é o primeiro elemento da &lt;code&gt;list&lt;/code&gt; apenas vamos criar um &lt;code&gt;Node&lt;/code&gt; e fazer com que nossa &lt;code&gt;list&lt;/code&gt; seja aquele &lt;code&gt;node&lt;/code&gt;. Nossa condição vai ser algo semelhante à:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newTail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTail&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se já tivermos algo na &lt;code&gt;list&lt;/code&gt;, significa apenas que devemos adicionar algo depois da &lt;code&gt;tail&lt;/code&gt; ( que é sempre nosso último elemento ) e então fazer com que o próximo elemento depois da nossa &lt;code&gt;tail&lt;/code&gt; atual passe a ser a nova &lt;code&gt;tail&lt;/code&gt;. Colocando tudo isso em código vai ficar mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newTail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E agora a gente tem que adicionar o que fizemos no reducer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-remove-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;remove&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Esse vai parecer um pouco mais complicado, mas não se preocupe, é apenas umas linhas a mais de código e a gente vai dar conta 😉. &lt;/p&gt;

&lt;p&gt;A gente só pode remover um &lt;code&gt;node&lt;/code&gt; se a nossa &lt;code&gt;list&lt;/code&gt; não está vazia, então vamos colocar todo nosso código dentro dessa condição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;....&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se estamos tentando remover o primeiro &lt;code&gt;node&lt;/code&gt; tudo que precisamos fazer é com que o começo da nossa &lt;code&gt;list&lt;/code&gt; passe a ser o atual segundo elemento e se o próximo item não existia vamos ter que "limpar" nossa &lt;code&gt;tail&lt;/code&gt; também.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se esse não era o caso, vamos ter que "andar" na nossa lista até encontrarmos o &lt;code&gt;node&lt;/code&gt; que queremos remover. Vamos dizer que queremos remover o &lt;code&gt;node&lt;/code&gt; &lt;strong&gt;X&lt;/strong&gt;, começamos olhando o início da lista pulando para o próximo até chegar em &lt;strong&gt;X&lt;/strong&gt; e quando isso acontecer fazemos com que o &lt;code&gt;node&lt;/code&gt; anterior de &lt;strong&gt;X&lt;/strong&gt; agora aponte para o &lt;code&gt;node&lt;/code&gt; depois de &lt;strong&gt;X&lt;/strong&gt; o que seria &lt;code&gt;X.next&lt;/code&gt; e assim cortando o &lt;strong&gt;X&lt;/strong&gt; da &lt;code&gt;list&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Vamos usar esse para percorrer na list &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Vamos sempre manter uma referência do no anterior&lt;/span&gt;
    &lt;span class="c1"&gt;// Para que possamos mudar para onde ele vai apontar&lt;/span&gt;
    &lt;span class="c1"&gt;// Quando encontrarmos o node que queremos remover.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// vamos caminhar na lista até encontrar o que queremos&lt;/span&gt;
    &lt;span class="c1"&gt;// ou até chegarmos no fim&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Se o node atual é o node que queremos remover...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Vamos primeiro verificar se estamos tentando &lt;/span&gt;
        &lt;span class="c1"&gt;// remover nossa tail atual e se sim nossa tail&lt;/span&gt;
        &lt;span class="c1"&gt;// vai se tornar no node anterior&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="c1"&gt;// Se não, apenas fazemos nosso node anterior&lt;/span&gt;
            &lt;span class="c1"&gt;// apontar para o próximo&lt;/span&gt;
            &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No final, nosso método &lt;code&gt;remove&lt;/code&gt; vai ficar assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;É um pouco mais complicado porque estamos mantendo referência da &lt;code&gt;tail&lt;/code&gt; mas é um preço que vale a pena pagar. No pior cenário esse método vai passar por todos os possíveis &lt;code&gt;nodes&lt;/code&gt; da nossa &lt;code&gt;list&lt;/code&gt; então podemos dizer que ele é &lt;strong&gt;O(N)&lt;/strong&gt; 🤷🏻‍♂️.&lt;/p&gt;

&lt;p&gt;Agora vamos apenas adicionar nosso método no nosso reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REMOVE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-indexof-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;indexOf&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Algumas vezes vamos querer saber em qual posição específica um dado se encontra, para isso vamos utilizar o método &lt;code&gt;indexOf&lt;/code&gt;. Nossa &lt;code&gt;list&lt;/code&gt; vai ser baseada em index 0, basicamente como um array. O que precisamos fazer é percorrer a &lt;code&gt;list&lt;/code&gt; até encontrarmos nosso dado procurado e se chegarmos ao final e não encontrarmos vamos retornar &lt;code&gt;-1&lt;/code&gt;. O método vai ser bem simples de entender e não precisamos adicionar ele no reducer já que ele não vai alterar nosso estado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indexOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Começamos sempre do index 0&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Enquanto existir um node para percorrer e&lt;/span&gt;
        &lt;span class="c1"&gt;// ainda não encontramos nosso dado&lt;/span&gt;
        &lt;span class="c1"&gt;// vamos aumentar nosso currentIndex e ir para o&lt;/span&gt;
        &lt;span class="c1"&gt;// próximo node&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Encontramos o dado? Se sim, retorne o index&lt;/span&gt;
        &lt;span class="c1"&gt;// se não, retorne `-1`&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apenas um detalhe final sobre esse método: para podermos encontrar um dado é possível que tenhamos que olhar todos os nodes até o final o que faz o &lt;code&gt;indexOf&lt;/code&gt; ser &lt;strong&gt;O(N)&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-revert-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;revert&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Esse é bem comum de ser perguntando em uma entrevista de emprego. É bem legal de resolver usando recursão, mas vamos manter o simples e fazer iterativo. Vamos ter que passar por cada &lt;code&gt;node&lt;/code&gt; e mudar seu próximo, isso faz do nosso método &lt;strong&gt;O(N)&lt;/strong&gt;. O objetivo aqui é se tivermos uma &lt;code&gt;list&lt;/code&gt; como:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois de usar o &lt;code&gt;revert&lt;/code&gt; esperamos ter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Então a primeira coisa como no método anterior é conferir se a &lt;code&gt;list&lt;/code&gt; não está vazia e se não estiver vamos manter referência para o &lt;code&gt;node&lt;/code&gt; atual e o anterior. Enquanto existir &lt;code&gt;nodes&lt;/code&gt; para percorrer vamos trocar o anterior com o atual, parece confuso? Vamos ver o código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;revertList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Vamos lembrar que temos que prestar atenção &lt;/span&gt;
        &lt;span class="c1"&gt;// com a tail&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Salve o restante da list por enquanto&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;restList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// faça o node atual apontar para o anterior&lt;/span&gt;
            &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// substitua o anterior pelo atual&lt;/span&gt;
            &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// e se o nosso anterior agora aponta&lt;/span&gt;
            &lt;span class="c1"&gt;// para o fim ( null ) &lt;/span&gt;
            &lt;span class="c1"&gt;// significa que ele é nossa nova tail &lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// pegue o resto da list e continue fazendo &lt;/span&gt;
            &lt;span class="c1"&gt;// o mesmo processo&lt;/span&gt;
            &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;restList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos apenas adicionar o método no nosso reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REVERT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;revertList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-stringify-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;stringify&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;E por último, temos que ter alguma forma de visualizar nossa &lt;code&gt;list&lt;/code&gt; não é? Vamos criar um método bem simples que vai percorrer a lista e combinar o poder dos arrays para não ter que ficar conferindo se temos um próximo elemento ou não.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listDataArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;listDataArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;listDataArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Isso é tudo pessoal, com certeza podemos nos divertir um pouco mais com a estrutura de dados &lt;code&gt;list&lt;/code&gt; e implementar outros métodos ( eu até implementei alguns outros no CodeSandbox ) mas esse tutorial ficou grande de mais já e imagino que agora você já tem uma ideia básica de como a &lt;code&gt;Linked List&lt;/code&gt; funciona correto?&lt;/p&gt;

&lt;p&gt;Se curtiu, ficou com qualquer dúvida ou quer dar uma sugestão de qual pode ser nossa próxima estrutura de dado pode ficar a vontade para falar comigo no meu &lt;a href="https://www.instagram.com/charlesassuncaooficial/"&gt;instagram&lt;/a&gt; onde eu também compartilho mais dicas de programação.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Spark as function - Containerize PySpark code for AWS Lambda and Amazon Kubernetes</title>
      <author>prasanth mathesh</author>
      <pubDate>Wed, 29 Sep 2021 02:32:19 +0000</pubDate>
      <link>https://dev.to/aws-builders/spark-as-function-containerize-pyspark-code-for-aws-lambda-and-amazon-kubernetes-1bka</link>
      <guid>https://dev.to/aws-builders/spark-as-function-containerize-pyspark-code-for-aws-lambda-and-amazon-kubernetes-1bka</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqPw5_TZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pm8mgd3ypmtjz4r4pao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqPw5_TZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pm8mgd3ypmtjz4r4pao.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;The python, java etc applications can be containerized as a docker image for deployment in AWS Lambda and AWS EKS using the AWS ECR as container registry. The spark framework commonly used for distributed big data processing applications supports various deployment modes like local, cluster, yarn, etc. I have discussed serverless data processing architecture patterns in my other articles and in this, we will see how one can build and run a Spark data processing application using AWS EKS and also serverless  lambda runtime. The working version code used for this article is kept in &lt;strong&gt;&lt;a href="https://github.com/prasanth-m/AWS/tree/master/Spark-Docker"&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h1&gt;

&lt;p&gt;The following are the set of client tools that should be already installed in the working dev environment.&lt;br&gt;
AWS CLI, Kubectl, Eksctl, Docker&lt;br&gt;
One should ensure the right version for each set of tools including the spark, AWS SDK and delta.io dependencies.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#kubernetes-deployment"&gt;
  &lt;/a&gt;
  Kubernetes Deployment
&lt;/h1&gt;

&lt;p&gt;AWS EKS anywhere which was launched recently can enable organizations to create and operate Kubernetes clusters on customer-managed infrastructure. This new service by AWS is going to change the way of scalability, disaster plan and recovery option that are being followed for Kubernetes currently.&lt;/p&gt;

&lt;p&gt;The following are the few native Kubernetes deployments since containerized applications will run in the same manner in different hosts.&lt;br&gt;
1.Build and test application on-premise and deploy on the cloud for availability and scalability&lt;br&gt;
2.Build, test and run applications on-premise and use the cloud environment for disaster recovery&lt;br&gt;
3.Build, test and run application on-premise, burst salves on the cloud for on-demand scaling&lt;br&gt;
4.Build and test application on-premise and deploy master on a primary cloud and create slaves on secondary cloud&lt;/p&gt;

&lt;p&gt;For ever-growing,data-intensive applications that process and store terabytes of data, RPO is critical and its better to use on-premise dev and cloud for PROD&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#spark-on%C2%A0server"&gt;
  &lt;/a&gt;
  Spark on Server
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Local&lt;/strong&gt;&lt;br&gt;
First, let's containerize the application and test it in the local environment.&lt;/p&gt;

&lt;p&gt;The pyspark &lt;strong&gt;&lt;a href="https://github.com/prasanth-m/AWS/blob/master/Spark-Docker/cda-spark-kubernetes/cda_spark_kubernetes.py"&gt;code&lt;/a&gt;&lt;/strong&gt; used in this article reads a S3 csv file and writes it into a delta table in append mode. After the write operation is complete, spark code displays the delta table records.&lt;/p&gt;

&lt;p&gt;Build the image with dependencies and push the docker image to AWS ECR using the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./build_and_push.sh cda-spark-kubernetes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TXZEVc30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfdrm4gt2nbah9pyjqsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TXZEVc30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfdrm4gt2nbah9pyjqsu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the build, the docker image is available in the local dev host too which can be tested locally using docker CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run cda-spark-kubernetes driver local:///opt/application/cda_spark_kubernetes.py {args}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XafbFnB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npjreouseys105wfeixs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XafbFnB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npjreouseys105wfeixs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above image shows the output of the delta read operation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS EKS&lt;/strong&gt;&lt;br&gt;
Build AWS EKS cluster using eksctl.yaml and apply RBAC role for spark user using below cli.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eksctl create cluster -f ./eksctl.yaml
kubectl apply -f ./spark-rbac.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the cluster is cluster is created, verify nodes and cluster IP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-8pFSj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxecdwov0yqcwjtfdgiy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-8pFSj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxecdwov0yqcwjtfdgiy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above is a plain cluster that is ready without any application and its dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install spark-operator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spark Operator is an open-source Kubernetes Operator to deploy Spark applications. Helm is similar to yum, apt for K8s and using helm, spark operator can be installed.&lt;/p&gt;

&lt;p&gt;Install spark-operator using below helm CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add spark-operator https://googlecloudplatform.github.io/spark-on-k8s-operator
helm install spark-operator spark-operator/spark-operator --set webhook.enable=true
kubectl get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOLHRRxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d48q63uf9tlmd38zksh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOLHRRxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d48q63uf9tlmd38zksh7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The containerized spark code can be submitted from a client in cluster mode using spark operator and its status can be checked using kubectl cli.&lt;/p&gt;

&lt;p&gt;Run the spark-job.yaml that contains config parameters required for the spark operator in the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f ./spark-job.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cli to get application is given below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get sparkapplication
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8UIIyHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph7h8ee74yp4zy66w6mx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8UIIyHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph7h8ee74yp4zy66w6mx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cli to get logs of the spark driver at the client side is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl logs spark-job-driver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The delta operation has done the append to the delta table and it's displayed on driver logs as given below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmuWWhP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxz2spf6bot3kjqjxsfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmuWWhP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxz2spf6bot3kjqjxsfn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, the driver Spark-UI can be forwarded to the localhost port too. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTht-v0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7698q5pk9uagomlkxka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTht-v0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7698q5pk9uagomlkxka.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Kubernetes deployment requests driver and executor pods on demand and shuts them down once processing is complete. This pod level resource sharing and isolation is a key difference between spark on yarn and kubernetes&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spark-on-serverless"&gt;
  &lt;/a&gt;
  Spark on Serverless
&lt;/h1&gt;

&lt;p&gt;Spark is a distributed data processing framework that thrives on RAM and CPU. Spark on AWS lambda function is suitable for all kinds of workload that can complete within 15 mins.&lt;/p&gt;

&lt;p&gt;For the workloads that take more than 15 mins, by leveraging continuous/event-driven pipelines with proper CDC, partition and storage techniques, the same code can be run in parallel to achieve the latency of the data pipeline.&lt;/p&gt;

&lt;p&gt;The base spark image used for AWS EKS deployment is taken from the docker hub and  it is pre-built with AWS SDK and delta.io dependencies.&lt;/p&gt;

&lt;p&gt;For AWS Lambda deployment, AWS supported python base image is used to build code along with its dependencies using the &lt;strong&gt;&lt;a href="https://github.com/prasanth-m/AWS/blob/master/Spark-Docker/cda-spark-lambda/Dockerfile"&gt;Dockerfile&lt;/a&gt;&lt;/strong&gt; and then it is pushed to the AWS ECR.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM public.ecr.aws/lambda/python:3.8

ARG HADOOP_VERSION=3.2.0
ARG AWS_SDK_VERSION=1.11.375

RUN yum -y install java-1.8.0-openjdk

RUN pip install pyspark

ENV SPARK_HOME="/var/lang/lib/python3.8/site-packages/pyspark"
ENV PATH=$PATH:$SPARK_HOME/bin
ENV PATH=$PATH:$SPARK_HOME/sbin
ENV PYTHONPATH=$SPARK_HOME/python:$SPARK_HOME/python/lib/py4j-0.10.9-src.zip:$PYTHONPATH
ENV PATH=$SPARK_HOME/python:$PATH

RUN mkdir $SPARK_HOME/conf

RUN echo "SPARK_LOCAL_IP=127.0.0.1" &amp;gt; $SPARK_HOME/conf/spark-env.sh

#ENV PYSPARK_SUBMIT_ARGS="--master local pyspark-shell"
ENV JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.amzn2.0.1.x86_64/jre"
ENV PATH=${PATH}:${JAVA_HOME}/bin

# Set up the ENV vars for code
ENV AWS_ACCESS_KEY_ID=""
ENV AWS_SECRET_ACCESS_KEY=""
ENV AWS_REGION=""
ENV AWS_SESSION_TOKEN=""
ENV s3_bucket=""
ENV inp_prefix=""
ENV out_prefix=""

RUN yum install wget
# copy hadoop-aws and aws-sdk
RUN wget https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/${HADOOP_VERSION}/hadoop-aws-${HADOOP_VERSION}.jar -P ${SPARK_HOME}/jars/ &amp;amp;&amp;amp; \ 
    wget https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/${AWS_SDK_VERSION}/aws-java-sdk-bundle-${AWS_SDK_VERSION}.jar -P ${SPARK_HOME}jars/

COPY spark-class $SPARK_HOME/bin/
COPY delta-core_2.12-0.8.0.jar ${SPARK_HOME}/jars/
COPY cda_spark_lambda.py ${LAMBDA_TASK_ROOT}

CMD [ "cda_spark_lambda.lambda_handler" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcYJtCGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/923lcrqenghm6mp7nb93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcYJtCGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/923lcrqenghm6mp7nb93.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local&lt;/strong&gt;&lt;br&gt;
Test the code using a local machine using docker CLI as given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -e s3_bucket=referencedata01 -e inp_prefix=delta/input/students.csv -e out_prefix=/delta/output/students_table -e AWS_REGION=ap-south-1 -e AWS_ACCESS_KEY_ID=$(aws configure get default.aws_access_key_id) -e AWS_SECRET_ACCESS_KEY=$(aws configure get default.aws_secret_access_key) -e AWS_SESSION_TOKEN=$(aws configure get default.aws_session_token) -p 9000:8080 kite-collect-data-hist:latest cda-spark-lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The local mode testing will require an event to be triggered and AWS lambda will be in wait mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0xB5Hoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16gejydizn8m1eqjcwl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0xB5Hoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16gejydizn8m1eqjcwl4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trigger an event for lambda function using below cli in another terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once AWS lambda is completed, we can see the output as given below in the local machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_aQ7m3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxon7bd59h33wlw0iouv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_aQ7m3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxon7bd59h33wlw0iouv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt;&lt;br&gt;
Deploy a lambda function using the ECR image and set necessary ENV variables for the lambda handler. Once lambda is triggered and completed successfully we can see the logs in cloud watch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MCxOVIxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsc8k2s1e1q5x1kfzgr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCxOVIxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsc8k2s1e1q5x1kfzgr7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda currently supports 6 vCPU cores and 10 gb memory and it is billed for the elapsed run time and memory consumption as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EG2e8Qnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j34juhcp8f95qj6ijr4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EG2e8Qnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j34juhcp8f95qj6ijr4k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS Pricing is based on the number of requests and GB-Sec.&lt;br&gt;
 &lt;br&gt;
The same code is run for various configurations and it is evident from the below table that even if memory is overprovisioned, AWS lambda pricing methodology saves the cost.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aIoxXHa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m65xowku8vajxj2cdej6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aIoxXHa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m65xowku8vajxj2cdej6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Going forward, wider adoption to use containerized data pipelines for spark will be the need of the hour since sources like web apps, SaaS products that are built on top of Kubernetes generates a lot of data in a continuous manner  for the big data platforms.&lt;/p&gt;

&lt;p&gt;The most common operations like data extraction and ingestion in the S3 data lake, loading processed data into the data stores and pushing down SQL workloads on AWS Redshift can be done easily using AWS lambda Spark.&lt;/p&gt;

&lt;p&gt;Thus by leveraging AWS Lambda along with Kubernetes, one can bring down TCO along with  build planet-scale data pipelines.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>serverless</category>
      <category>docker</category>
    </item>
    <item>
      <title>ngrok: Expose a local web server to the internet</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Wed, 29 Sep 2021 00:26:01 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/ngrok-expose-a-local-web-server-to-the-internet-4m67</link>
      <guid>https://dev.to/drsimplegraffiti/ngrok-expose-a-local-web-server-to-the-internet-4m67</guid>
      <description>&lt;p&gt;Hello devs, I got introduced to a tool that allows you to expose a web server running on your local machine to the internet. Its ngrok&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hbD2g-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/wDGCA2dv9VJxC/giphy.gif%3Fcid%3Decf05e47p6d7ak5bsa9bvswppv0yweaggihnvbvx7dai0yco%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hbD2g-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/wDGCA2dv9VJxC/giphy.gif%3Fcid%3Decf05e47p6d7ak5bsa9bvswppv0yweaggihnvbvx7dai0yco%26rid%3Dgiphy.gif%26ct%3Dg" alt="exposed secret"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://ngrok.com/download"&gt;Ngrok Link&lt;/a&gt; to signup and download the ngrok for your operating system&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaNNRLFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pmv5rvhlwuqdyasg0dl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaNNRLFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pmv5rvhlwuqdyasg0dl.PNG" alt="ngrok1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLZqN1Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pkdlungu324v3vdsv27.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLZqN1Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pkdlungu324v3vdsv27.PNG" alt="ngrok 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say for example you are working on a node app running on &lt;code&gt;http://localhost:3000&lt;/code&gt; and you want to expose/share your server to a colleague without using ipconfig.&lt;/p&gt;

&lt;p&gt;🎯 Launch the ngrok&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ijFXQ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6xnpxp18tuooo2f2hyh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ijFXQ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6xnpxp18tuooo2f2hyh.PNG" alt="ngrok2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then type the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngrok&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In my case &lt;code&gt;ngrok http 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should get something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZ7CBaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xnh4bas5gfrrmii0qy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZ7CBaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xnh4bas5gfrrmii0qy.PNG" alt="ngrok4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎯 Copy the forwarding link highlighted in red and test on any browser. (Okay, the moment of truth, what did you get? 😁)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rkc9xYtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkkpsoa3qk1rzqakeer.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rkc9xYtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkkpsoa3qk1rzqakeer.PNG" alt="ngrok 4"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#password-protect-your-tunnel"&gt;
  &lt;/a&gt;
  Password protect your tunnel
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngrok&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username:password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In my case, it will be &lt;br&gt;
&lt;code&gt;ngrok http -auth="drsimple:ngrokpassword" 3000&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9Rt-yi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9bwt30zpfnwcp3azcnm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9Rt-yi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9bwt30zpfnwcp3azcnm.PNG" alt="ngrok 6"&gt;&lt;/a&gt;&lt;br&gt;
Open the ngrok terminal and paste the above command.&lt;br&gt;
copy the forwarding link and paste it into your browser.&lt;/p&gt;

&lt;p&gt;This time you get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yy4TlZ8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxd4s1widbubad2fn04x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yy4TlZ8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxd4s1widbubad2fn04x.PNG" alt="ngrok 7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎯 Lastly, let us look at how we can run ngrok in our command prompt in few steps&lt;br&gt;
Copy the path where you downloaded ngrok&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aCZtW-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hklgoe5anc2f9e4gasvh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aCZtW-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hklgoe5anc2f9e4gasvh.PNG" alt="ngrok 8"&gt;&lt;/a&gt;&lt;br&gt;
🎯 Go to the environment variable&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-HiMULw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n83n2uffnoidkkbfiejc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-HiMULw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n83n2uffnoidkkbfiejc.PNG" alt="ngrok 9"&gt;&lt;/a&gt;&lt;br&gt;
 Click on the path, Click Edit, New, and Paste the path copied earlier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JBwY-MTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmas7vnply8v3j1l8vea.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JBwY-MTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmas7vnply8v3j1l8vea.PNG" alt="ngrok 11"&gt;&lt;/a&gt;&lt;br&gt;
Repeat the above step for the system variable.&lt;/p&gt;

&lt;p&gt;🎯 Your command prompt should be able to run ngrok successfully. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ny3eHyEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ijg6qnibbf329zck9qe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ny3eHyEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ijg6qnibbf329zck9qe.PNG" alt="ngrok 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨🏽‍🏫 For further customization check the recommended video and the ngrok docs.&lt;/p&gt;

&lt;p&gt;I hope this was helpful. Thanks 🙌🏽  for reading.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt; / &lt;a href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Config files for my GitHub profile.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/drsimplegraffiti/drsimplegraffiti/blob/main/my%20banner1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEimLKUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/drsimplegraffiti/drsimplegraffiti/raw/main/my%2520banner1.png" alt="Calm Developer"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Hi 👋, I'm Abayomi&lt;/h1&gt;
&lt;h3&gt;
A passionate Web developer from Nigeria&lt;/h3&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://github.com/ryo-ma/github-profile-trophy"&gt;&lt;img src="https://camo.githubusercontent.com/5b0425119d718a2d7a29a18c91a874bf87d18b05bf7565b62eb133731bffe04d/68747470733a2f2f6769746875622d70726f66696c652d74726f7068792e76657263656c2e6170702f3f757365726e616d653d647273696d706c656772616666697469" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d465f23af0c86fcbd93694bafaed3eb69691738e2fbdcfaa4aa0dbe1d559962/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f647273696d706c65677261666669313f6c6f676f3d74776974746572267374796c653d666f722d7468652d6261646765" alt="drsimplegraffi1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🌱 I’m currently learning &lt;strong&gt;Backend Node Js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;📝 I regularly write articles on &lt;a href="https://dev.to/drsimplegraffiti" rel="nofollow"&gt;https://dev.to/drsimplegraffiti&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📝 My Portfolio &lt;a href="http://abportfolio.vercel.app/" rel="nofollow"&gt;Click Here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📫 How to reach me &lt;strong&gt;&lt;a href="https://github.com/drsimplegraffiti/drsimplegraffitimailto:abayomiogunnusi@gmail.com"&gt;abayomiogunnusi@gmail.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📄 Know about my experiences &lt;a href="https://www.linkedin.com/in/abayomi-ogunnusi-974826141/" rel="nofollow"&gt;https://www.linkedin.com/in/abayomi-ogunnusi-974826141/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⚡ Fun fact &lt;strong&gt;I'm an alien&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Connect with me:&lt;/h3&gt;
&lt;p&gt;
&lt;a href="https://codepen.io/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzM7H5iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/codepen.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWv4sl3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/twitter.svg" alt="drsimplegraffi1" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://stackoverflow.com/users/15661401" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0U8MM-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/stack-overflow.svg" alt="15661401" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://instagram.com/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---za7rTXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/instagram.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://medium.com/@drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxX0CMZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/medium.svg" alt="@drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Languages and Tools:&lt;/h3&gt;
&lt;p&gt; &lt;a href="https://getbootstrap.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38b8DYFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg" alt="bootstrap" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3schools.com/css/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHD1LdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg" alt="css3" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://expressjs.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Np3l8NWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/express/express-original-wordmark.svg" alt="express" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://git-scm.com/" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/fbfcb9e3dc648adc93bef37c718db16c52f617ad055a26de6dc3c21865c3321d/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6769742d73636d2f6769742d73636d2d69636f6e2e737667" alt="git" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://heroku.com" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/df12cb598044a3f38efc1f45e3580558c324cf8789b79487125044eeebcc4dee/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6865726f6b752f6865726f6b752d69636f6e2e737667" alt="heroku" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3.org/html/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXRvq6Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg" alt="html5" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/in/products/illustrator.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/9e245893108b5ca27e7ac3d4a802d513f657b32aa7b5765bd92df7fb55d0ed54/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f61646f62655f696c6c7573747261746f722f61646f62655f696c6c7573747261746f722d69636f6e2e737667" alt="illustrator" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_b2spU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg" alt="javascript" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.mongodb.com/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-ExagyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg" alt="mongodb" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://nodejs.org" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zw8Pc0Q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original-wordmark.svg" alt="nodejs" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.photoshop.com/en" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sf0HeNaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg" alt="photoshop" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://postman.com" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/93b32389bf746009ca2370de7fe06c3b5146f4c99d99df65994f9ced0ba41685/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676574706f73746d616e2f676574706f73746d616e2d69636f6e2e737667" alt="postman" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://reactjs.org/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7e3Gep6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg" alt="react" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://sass-lang.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZefvAmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/sass/sass-original.svg" alt="sass" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/products/xd.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c205ecbe12500177d102169d97bc1c17c545155fdf5ec78c08d54ac53e5b38c1/68747470733a2f2f63646e2e776f726c64766563746f726c6f676f2e636f6d2f6c6f676f732f61646f62652d78642e737667" alt="xd" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://materializecss.com/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZQdJCco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/prplx/svg-logos/5585531d45d294869c4eaab4d7cf2e9c167710a9/svg/materialize.svg" alt="materialize" width="40" height="40"&gt; &lt;/a&gt;&lt;a href="https://mochajs.org" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/4253eb6921d60a216772940978dea3a0cf2113f2f29b5545720d3b5b6960e467/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6d6f6368616a732f6d6f6368616a732d69636f6e2e737667" alt="mocha" width="40" height="40"&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Support:&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/drsimplegraffiti" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/28aae05a0fba45679e8e27d90609601e249b64a5fe30dfef05495de4f4e318d4/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f76322f64656661756c742d79656c6c6f772e706e67" height="50" width="210" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374"&gt;&lt;img src="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e"&gt;&lt;img src="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926"&gt;&lt;img src="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Dev.to Post&lt;/h2&gt;
&lt;p&gt;🔗 &lt;a href="https://dev.to/drsimplegraffiti/improve-your-github-page-5hhc" rel="nofollow"&gt;Improve your Github Profile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://dev.to/drsimplegraffiti/generate-invoice-pdf-dmd" rel="nofollow"&gt;Download Browser Page as PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://dev.to/drsimplegraffiti/send-mails-using-nodejs-42ag" rel="nofollow"&gt;Send mails using NodeJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://dev.to/drsimplegraffiti/chat-app-using-socket-io-1hp0" rel="nofollow"&gt;Chat App using Socket.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ngrok.com/docs"&gt;ngrok docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/XhRmn9Y8Agk"&gt;Reference Video&lt;/a&gt; by CyberRyker&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>codepen</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Code Golf: Conditionally Add To An Array</title>
      <author>Kevin Murphy</author>
      <pubDate>Tue, 28 Sep 2021 23:22:26 +0000</pubDate>
      <link>https://dev.to/thegnarco/code-golf-conditionally-add-to-an-array-5291</link>
      <guid>https://dev.to/thegnarco/code-golf-conditionally-add-to-an-array-5291</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-grass-is-always-greener"&gt;
  &lt;/a&gt;
  The Grass Is Always Greener
&lt;/h2&gt;

&lt;p&gt;We're building a system to track a golfer's statuses during a tournament. This is a competitive tournament with people who are much better than I will ever be, so if a golfer is currently scoring under &lt;a href="https://en.wikipedia.org/wiki/Par_(score)"&gt;par&lt;/a&gt;, they're in contention to win. On this 18 hole course, if they've played the first nine holes, they've made the &lt;a href="https://www.golfcompendium.com/2020/07/the-turn-definition-golf-course.html"&gt;turn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's explore a number of ways we can build up an array that keeps track of which, if any, of these statuses a particular golfer qualifies for. Not content to settle for one that works, we'll dig into a variety of options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teeing-up-an-option"&gt;
  &lt;/a&gt;
  Teeing Up An Option
&lt;/h2&gt;

&lt;p&gt;We can start with an empty array, and explicitly add in any of the statuses that the golfer meets the conditions for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_statuses&lt;/span&gt;
  &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;under_par?&lt;/span&gt;
    &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"in_contention"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;back_nine?&lt;/span&gt;
    &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"past_the_turn"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;statuses&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's nothing tremendously exciting here, and that's not a bad thing! It's reasonably clear what this is doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tapping-it-in"&gt;
  &lt;/a&gt;
  Tapping It In
&lt;/h2&gt;

&lt;p&gt;We can make the prior suggestion a little more terse by using &lt;a href="https://docs.ruby-lang.org/en/master/Kernel.html#method-i-tap"&gt;tap&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_statuses&lt;/span&gt;
  &lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nf"&gt;tap&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;statuses&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;under_par?&lt;/span&gt;
      &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"in_contention"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;back_nine?&lt;/span&gt;
      &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"past_the_turn"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This eliminates the need for the &lt;code&gt;statuses&lt;/code&gt; temporary array from the prior section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-a-compact-swing"&gt;
  &lt;/a&gt;
  Taking a Compact Swing
&lt;/h2&gt;

&lt;p&gt;We can also build our array to have an entry for each of the conditionals we have, and removing the ones that aren't relevant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_statuses&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;under_par?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;"in_contention"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;back_nine?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;"past_the_turn"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using &lt;a href="https://ruby-doc.org/core-3.0.1/Array.html#method-i-compact"&gt;compact&lt;/a&gt;, we'll remove any &lt;code&gt;nil&lt;/code&gt; values - and we'll take advantage of that functionality by explicitly adding &lt;code&gt;nil&lt;/code&gt; if the golfer doesn't meet that condition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-your-backswing-takeaway"&gt;
  &lt;/a&gt;
  Working On Your Backswing Takeaway
&lt;/h2&gt;

&lt;p&gt;Speaking of taking things away, we can also do the opposite of the first approach. We'll start by having each status, and then &lt;em&gt;removing&lt;/em&gt; the ones that do &lt;strong&gt;not&lt;/strong&gt; meet the necessary condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_statuses&lt;/span&gt;
  &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"in_contention"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"past_the_turn"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;under_par?&lt;/span&gt;
    &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"in_contention"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;back_nine?&lt;/span&gt;
    &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"past_the_turn"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;statuses&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may be more helpful in situations where there are a lot more statuses, and only a few of them may need to be removed for certain reasons. It may also help when the full list of statuses persists on its own elsewhere, but then you also need a subset of them in a particular case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selecting-the-right-club"&gt;
  &lt;/a&gt;
  Selecting The Right Club
&lt;/h2&gt;

&lt;p&gt;Lastly, we'll put together a hash keyed on the statuses where the value is the result of the conditions. We can then flex some familiarity with Ruby's &lt;a href="https://ruby-doc.org/core-3.0.1/Enumerable.html"&gt;Enumerable module&lt;/a&gt; to pick out the applicable sections of the hash, returning only the statuses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_statuses&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"in_contention"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;under_par?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"past_the_turn"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;back_nine?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the prior suggestion, this may be helpful when you want to have the full list of statuses and their associated conditions all compiled in one place, but then want to peel off which are relevant for a particular golfer at this time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asking-help-from-the-caddie"&gt;
  &lt;/a&gt;
  Asking Help From The Caddie
&lt;/h2&gt;

&lt;p&gt;Here are some of the ways that we might solve this problem. What other ways could we build this functionality? &lt;a href="https://twitter.com/kevin_j_m"&gt;Let me know&lt;/a&gt; what other approaches you would take.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href="https://blog.thegnar.co/code-golf-conditionally-add-to-array"&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>Organize React Components Better with Barrel Exports</title>
      <author>Joe Ziemba</author>
      <pubDate>Tue, 28 Sep 2021 22:45:13 +0000</pubDate>
      <link>https://dev.to/justmyrealname/organize-react-components-better-with-barrel-exports-4fno</link>
      <guid>https://dev.to/justmyrealname/organize-react-components-better-with-barrel-exports-4fno</guid>
      <description>&lt;p&gt;We all know that React imports can get a little... verbose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recompose/compose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dispatch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;generateMetaInfo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shared/generate-meta-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SegmentedControl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/segmentedControl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ChannelProfileCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/entities&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommunityAvatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/avatar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MembersList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/MembersList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PostFeed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/PostsFeed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommunitySidebar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/communitySidebar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeedsContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InfoContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../community/style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FullScreenRedirectView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../views/viewHelpers/fullScreenRedirect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// and this isn't even that long...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The node module imports are unavoidable, but we &lt;em&gt;can&lt;/em&gt; clean up our local imports&lt;br&gt;
with a pattern called &lt;strong&gt;barrel exporting&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-barrel-export"&gt;
  &lt;/a&gt;
  The Barrel Export
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ChannelProfileCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CommunityAvatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CommunitySidebar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FeedsContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FullScreenRedirectView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InfoContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MembersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;PostFeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SegmentedControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SidebarSection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A lot easier on the eyes, eh?&lt;/p&gt;

&lt;p&gt;Barrel is about more than the aesthetic though. We get better Intellisense and auto-importing for components in editors like VSCode thanks to the named exports, along with more flexibility in organizing our filesystem. We can nest folders as deep as it makes sense without worrying about ballooning import statements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-set-up-barrel-exports"&gt;
  &lt;/a&gt;
  How to set up Barrel Exports
&lt;/h2&gt;

&lt;p&gt;A traditional &lt;code&gt;export&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; setup for React looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/SidebarSection/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* implementation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/Homepage/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/blocks/Row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable the Barrel pattern, all we need to do 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change from a default to named exports.&lt;/li&gt;
&lt;li&gt;Add an &lt;code&gt;index.js&lt;/code&gt; in whatever directory you want to be "the Barrel." From this file, we'll re-export all our components in that branch of the filesystem.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/Layout/SidebarSection/index.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* implementation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/index.js&lt;/span&gt;

&lt;span class="c1"&gt;// This is the Barrel!&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Layout/blocks/Row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/Homepage/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h3&gt;

&lt;p&gt;In future posts we'll look at even more improvements we can make to our React code with patterns like dot notation and removing the need to relative imports. Follow me on Twitter &lt;a href="https://twitter.come/justmyrealname"&gt;@justmyrealname&lt;/a&gt; to hear when new articles drop!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Baseline Mac Setup</title>
      <author>Daniel Starner</author>
      <pubDate>Tue, 28 Sep 2021 22:42:52 +0000</pubDate>
      <link>https://dev.to/dstarner/my-baseline-mac-setup-21fb</link>
      <guid>https://dev.to/dstarner/my-baseline-mac-setup-21fb</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; is full of &lt;a href="https://dev.to/search?q=my%20mac%20setup"&gt;"&lt;em&gt;Check Out My Setup&lt;/em&gt;"&lt;/a&gt; and &lt;a href="https://dev.to/search?q=%20my%20terminal%20setup"&gt;"&lt;em&gt;Configure Your Terminal&lt;/em&gt;"&lt;/a&gt; posts, for better or worse...&lt;/p&gt;

&lt;p&gt;Well, it's time to be corny and add my own article to that list! Please don't judge this too harshly. Most of this is a public &amp;amp; refactored version of a GitHub gist that I walk through whenever I get a new Macbook, whether it be for work or for personal use. I will try to dive into the tooling and functionality a bit more so that you understand why I choose it as my baseline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-things-first-iterm"&gt;
  &lt;/a&gt;
  First Things First; iTerm
&lt;/h2&gt;

&lt;p&gt;Gosh, I don't know if I could live without &lt;a href="https://iterm2.com/"&gt;iTerm2&lt;/a&gt;, because it's window and session management is leagues above the normal OSX Terminal. This is always the first thing that I install on any Macbook that I know I'll be using, because I just like the feel, customization, and mobility that iTerm provides over native Terminal. Check out their &lt;a href="https://iterm2.com/features.html"&gt;Features page&lt;/a&gt; to see what the fuss is about, but the nice multi-pane/multi-tab controls are enough to justify it's usage to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JUsT lEArn &lt;code&gt;tmux&lt;/code&gt; InsTEad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, I understand tmux provides multi-session control and that's 90% of what I use iTerm2 for...but I'm a bad developer who never took the time to learn tmux, and its worked just fine for me so far.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>¿Cómo consigo llamar la atención de mis clientes web?</title>
      <author>Horacio Herrera</author>
      <pubDate>Tue, 28 Sep 2021 22:14:03 +0000</pubDate>
      <link>https://dev.to/horacioh/como-consigo-llamar-la-atencion-de-mis-clientes-web-2fd5</link>
      <guid>https://dev.to/horacioh/como-consigo-llamar-la-atencion-de-mis-clientes-web-2fd5</guid>
      <description>&lt;p&gt;(Imagen principal por &lt;a href="https://unsplash.com/@samsonyyc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Samson&lt;/a&gt; via &lt;a href="https://unsplash.com/s/photos/deal?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Tanto si lo que quieres es preparar una propuesta para un cliente actual, como para llamar la atención de posibles futuros clientes, estos pequeños pasos te pueden ayudar a consolidar y darle el mayor beneficio a tus clientes:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#busca-que-tipo-de-clientes-te-interesa-tener"&gt;
  &lt;/a&gt;
  Busca que tipo de clientes te interesa tener
&lt;/h2&gt;

&lt;p&gt;En esta fase de búsqueda de clientes, tienes el privilegio de poder escoger que tipo de empresa o clientes quieres mostrar en tu portfolio. La manera en la que busco estos potenciales clientes es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Productos o servicios que uso actualmente&lt;/li&gt;
&lt;li&gt;Empresas amigas o medianas&lt;/li&gt;
&lt;li&gt;Marcas reconocidas en mi ciudad.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Te recomiendo que la empresa sea suficientemente grande para asumir un proyecto web nuevo pero lo suficientemente pequeña como para aceptar una propuesta tuya o de una empresa pequeña. Algo que te puede dar pistas es buscando los tipo d e proveedores que tienen actualmente, tanto a nivel tecnológico como en cualquier otro sector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an%C3%A1lisis-tecnol%C3%B3gico-de-su-web-actual"&gt;
  &lt;/a&gt;
  Análisis tecnológico de su web actual
&lt;/h2&gt;

&lt;p&gt;Aquí es donde viene la parte “divertida”. La suerte que tenemos es la variedad de herramientas que tenemos disponibles para hacer un análisis lo bastante convincente como para tener una idea clara de la experiencia de lo que los clientes de tu futuro cliente. Las herramientas que te recomiendo son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lighthouse&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.speedcurve.com/"&gt;Speedcurve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wpostats.com/"&gt;WPO Stats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una diferencia entre ambas, es que Lighthouse se va a ejecutar localmente, en cambio Speedcurve puedes no solamente cambiar el país o region en la que se va a ejecutar el test, sino que puedes programar la ejecución periódicamente. Así puedes sacar una media de todos los resultados y obtener información más fiable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#b%C3%BAsqueda-de-problemas"&gt;
  &lt;/a&gt;
  Búsqueda de problemas
&lt;/h2&gt;

&lt;p&gt;Las razones principales por las que nos tomamos el tiempo de rellenar una reseña sobre un producto o servicio regularmente son por experiencias en los extremos, o muy buenas o muy malas. Tu objetivo es encontrar las muy malas que estén relacionadas con la web de tu posible cliente. Te pueden dar pistas de qué cosas deben mejorar para que sus clientes estén más felices!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparaci%C3%B3n-con-otro-o-otros-competidores"&gt;
  &lt;/a&gt;
  Comparación con otro (o otros) competidores
&lt;/h2&gt;

&lt;p&gt;Seguramente tengas buenos datos sobre el análisis técnico, pero seguro pueden tener mucho más impacto si los comparas con alguno de sus competidores. Quizás lo mejor seria compararlos con algún competidor o empresa del sector que sea de talla mundial, para que la comparación no sea tan violenta :)  Otra ventaja de que la comparación sea con algún competidor grande, es que ellos seguramente estén usando alguna de estas tecnologías y puedan ver el resultado de su uso. Aquí es donde WPOStats es útil!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an%C3%A1lisis-de-producto-opcional"&gt;
  &lt;/a&gt;
  Análisis de producto (opcional)
&lt;/h2&gt;

&lt;p&gt;No estaría de mas hacer un poquito mas de búsqueda y entender bien como la web puede ayudarles a hacer felices a sus clientes y conseguir más.   Generalmente una página web debe responder claramente a estas tres preguntas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;¿Quiénes son?&lt;/li&gt;
&lt;li&gt;¿Qué hacen?&lt;/li&gt;
&lt;li&gt;¿Cómo los puedo contactar?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Si la respuesta a estas preguntas no es clara y directa, quizás estén perdiendo clientes por el camino.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primer-email-de-contacto"&gt;
  &lt;/a&gt;
  Primer email de contacto
&lt;/h2&gt;

&lt;p&gt;Una vez tengas toda esta información, estas listo para buscar como contactar a la persona adecuando dentro de la empresa e informarle. Este es tu primer contacto con ellos, así que no puede ser tan hostil como mandarle todo tu análisis en PDF adjunto con todas las recomendaciones!, tenemos que hacerlo por partes.&lt;/p&gt;

&lt;p&gt;Te recomiendo que de todos los puntos de mejora que hayas encontrado, encuentres el que requiera en menor esfuerzo de parte de ellos, pero que tenga el mayor beneficio o retorno de inversión. Llamémosle “Quick Win”. Algunos ejemplos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimizar el tamaño de las imágenes que usan en la web&lt;/li&gt;
&lt;li&gt;Forzar HTTPS en la navegación de su web&lt;/li&gt;
&lt;li&gt;Resaltar el “call to action” principal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;en cuanto a la redacción del email, puedes seguir esta guía:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tu presentación: muy corta&lt;/li&gt;
&lt;li&gt;Algo que te gusta de la empresa (es fácil encontrarlo si es un producto o servicio que usas)&lt;/li&gt;
&lt;li&gt;Comentas el análisis: Mencionas que has hecho un análisis de su presencia online y que has encontrado unos puntos de mejora clave para que sus clientes tengan una mejor experiencia (el enfoque desde el punto de vista de SUS CLIENTES es importante)&lt;/li&gt;
&lt;li&gt;Presentas el “Quick Win”&lt;/li&gt;
&lt;li&gt;Despedida: “Espero que esto les sea de gran ayuda y si necesitan alguna ayuda mas, no duden en contactarme”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ya está 🎉. No tiene que ser demasiado largo, Es importante respetar el tiempo de los demás también. Recuerda redactar el email de la manera mas positiva posible, y no recalcando las cosas “que están haciendo mal”. Una forma que uso para plantear algo malo de manera positiva es reformularlo en pregunta.&lt;/p&gt;

&lt;p&gt;Yo ya no me dedico a freelance, por eso me pareció interesante compartir mi estrategia cuando buscaba clientes web! :)  Si tienes alguna pregunta o algo no quedó muy claro, no dudes en contactarme por DMs o email!&lt;/p&gt;

&lt;p&gt;P.D.: Si entiendes inglés, aquí tienes &lt;a href="https://youtu.be/Kun6S53T0Uw"&gt;una charla&lt;/a&gt; que hice hace unos años para Gatsby Days donde comentó un poco más en detalle estas técnicas!&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>nextjs</category>
      <category>freelance</category>
      <category>clientes</category>
    </item>
    <item>
      <title>Nuxt 3 is Coming! Here's What You Need to Know</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Tue, 28 Sep 2021 21:43:40 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/nuxt-3-is-coming-here-s-what-you-need-to-know-21bm</link>
      <guid>https://dev.to/asayerio_techblog/nuxt-3-is-coming-here-s-what-you-need-to-know-21bm</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/arek-nawo"&gt;Arek Nawo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;Vue 3&lt;/strong&gt;’s &lt;a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0"&gt;stable release late last year&lt;/a&gt; and migration of all first-party tools and libraries, we now see more and more open-source libraries and tools moving from Vue 2 to Vue 3.&lt;/p&gt;

&lt;p&gt;That’s why it’s just about time for the most popular Vue framework to make the jump too. Naturally, I’m talking about &lt;strong&gt;Nuxt.js&lt;/strong&gt;, which will officially enter public beta in a few days from the release of this post.&lt;/p&gt;

&lt;p&gt;So let’s talk about what you can expect from &lt;strong&gt;Nuxt 3&lt;/strong&gt;, what improvements it will bring, and whether or not you should transition to it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nuxt-3-current-status"&gt;
  &lt;/a&gt;
  Nuxt 3 current status
&lt;/h1&gt;

&lt;p&gt;Before we dive into the features, let’s take a quick look at the Nuxt 3 current status.&lt;/p&gt;

&lt;p&gt;After many delays, it seems like we’ll finally get to see Nuxt 3 in all its glory on &lt;strong&gt;October 12, 2021&lt;/strong&gt;. How certain is this date, considering the previous &lt;a href="https://github.com/nuxt/nuxt.js/discussions/9398"&gt;delays&lt;/a&gt;? Well, with an official announcement at &lt;a href="https://nuxtnation.com/"&gt;Nuxt Nation&lt;/a&gt; and a &lt;a href="https://nuxtjs.org/v3"&gt;dedicated landing page&lt;/a&gt; with a countdown - it’s undoubtedly more credible than ever.&lt;/p&gt;

&lt;p&gt;Apart from the date, there are other details further confirming the upcoming release date. Nuxt 3 is now in private beta, with access given to the Vue core development team and close partners.&lt;/p&gt;

&lt;p&gt;Also worth mentioning is Nuxt new branding identity and &lt;a href="https://nuxtjs.org/"&gt;website redesign&lt;/a&gt;. While it’s up right now and includes Nuxt 2 documentation, it’s surely a sign of the upcoming v3. Also, the website itself is built with &lt;a href="https://docus.com/"&gt;Docus&lt;/a&gt; - &lt;em&gt;“Document-Driven Web Apps Platform”&lt;/em&gt; - which will be based on and open-sourced alongside Nuxt 3.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h1&gt;

&lt;p&gt;With the Nuxt 3 release date out of the way - let’s talk about the good stuff! Of course, I mean all the new features and improvements that are coming in Nuxt 3.&lt;/p&gt;

&lt;p&gt;Now, with a single landing page, a few discussions, and talks - there’s not much detail available on Nuxt 3. Still, we’ll try to piece together some helpful info so that you’ll have a general picture of what to expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-optimizations"&gt;
  &lt;/a&gt;
  General optimizations
&lt;/h2&gt;

&lt;p&gt;Nuxt 3 brings many general optimizations and improvements. The result is a smaller bundle size (&lt;strong&gt;20% lighter&lt;/strong&gt; core when compared to Nuxt 2) and improved performance.&lt;/p&gt;

&lt;p&gt;Developers can expect better performance in development thanks to the new &lt;strong&gt;Nitro server engine&lt;/strong&gt; with optimized cold starts and dynamic code-splitting.&lt;/p&gt;

&lt;p&gt;On top of that, other parts of tooling have also been upgraded - there’s now &lt;strong&gt;Webpack 5&lt;/strong&gt;, &lt;strong&gt;PostCSS 8&lt;/strong&gt;, &lt;strong&gt;ESBuild&lt;/strong&gt;, and &lt;strong&gt;Vite&lt;/strong&gt; support - making both development and production builds extremely fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vue-3"&gt;
  &lt;/a&gt;
  Vue 3
&lt;/h2&gt;

&lt;p&gt;To no one’s surprise, Nuxt 3 will be based on &lt;strong&gt;Vue 3&lt;/strong&gt; and provide an experience tailored to the latest version of the Vue framework. This means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New, modular utilities for the &lt;strong&gt;Composition API&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Improved routing with &lt;strong&gt;Vue Router 4&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Revised data fetching and &lt;strong&gt;Suspense&lt;/strong&gt; integration.
## TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of Vue 3 migration, Nuxt 3 adopts &lt;strong&gt;ES Modules&lt;/strong&gt; (ESM) and &lt;strong&gt;TypeScript&lt;/strong&gt; as first-class citizens for improved development experience. This move aligns with what Vue 3 has done and where the whole Vue ecosystem is now going.&lt;/p&gt;

&lt;p&gt;Tight TypeScript integration will provide type-checking for the whole Nuxt 3 codebase, as well as better autocompletion and error detection.&lt;/p&gt;

&lt;p&gt;If you don’t like TypeScript, you’ll still be able to use Nuxt without any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-development-experience"&gt;
  &lt;/a&gt;
  Better development experience
&lt;/h2&gt;

&lt;p&gt;Beyond TypeScript, Vue 3, and performance improvements, Nuxt 3 comes with even more improvements to the development experience, which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New &lt;strong&gt;Nuxt CLI&lt;/strong&gt; for easy project scaffolding and module integration;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuxt Devtools&lt;/strong&gt; for faster and more comfortable debugging right in the browser;&lt;/li&gt;
&lt;li&gt;Modern utility modules toolkit called &lt;strong&gt;Nuxt Kit&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Auto-import for global utilities and composable functions.
## Hybrid rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, Nuxt 3 introduces hybrid rendering or so-called &lt;em&gt;“incremental static generation”&lt;/em&gt;. This feature, in broad terms, will allow you to decide whether and how long you want to have your pages rendered statically or dynamically. More details on this feature will come alongside the beta release.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nitro-engine"&gt;
  &lt;/a&gt;
  Nitro engine
&lt;/h1&gt;

&lt;p&gt;Now, one of the headline features of Nuxt 3 is its new server engine - &lt;strong&gt;Nitro&lt;/strong&gt;. This engine is what drives many performance improvements and new features of Nuxt 3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-routes"&gt;
  &lt;/a&gt;
  API routes
&lt;/h2&gt;

&lt;p&gt;Thanks to Nitro, you’ll now be able to create and run &lt;strong&gt;server API code&lt;/strong&gt; easily, just like it’s currently possible in many other full-stack frameworks. The new &lt;code&gt;server/api/&lt;/code&gt; directory will be the place for your server API, while functions will find their home in &lt;code&gt;server/functions/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The new API routes, coupled with a new isomorphic fetching mechanism and improved serverless support, mark a step in the right direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimized-output"&gt;
  &lt;/a&gt;
  Optimized output
&lt;/h2&gt;

&lt;p&gt;Another advantage of Nitro is its highly optimized, universal output to the new &lt;code&gt;.output&lt;/code&gt; directory. The core server bundle will now be &lt;strong&gt;less than 1 MB&lt;/strong&gt; and will see a notable performance increase. For example, cold starts will be faster by &lt;strong&gt;75-100&lt;/strong&gt; times! This will prove very beneficial for environments like &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These improvements will be achieved by better dependency tracking using &lt;strong&gt;Node File Trace&lt;/strong&gt; from Vercel (&lt;a href="https://github.com/vercel/nft"&gt;@vercel/nft&lt;/a&gt;). This will ensure that only the necessary dependencies are included in the final bundle.&lt;/p&gt;

&lt;p&gt;Further bundle size reductions will be accomplished with a revised &lt;strong&gt;code-splitting&lt;/strong&gt; mechanism.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crossplatform-support"&gt;
  &lt;/a&gt;
  Cross-platform support
&lt;/h2&gt;

&lt;p&gt;With the rapid evolution of JavaScript over the last few years, multiple JS-powered platforms have emerged - and Nuxt 3 is ready for all of them.&lt;/p&gt;

&lt;p&gt;Thanks to the previously-mentioned, improved dependency tracking and new lightweight polyfills coupled with platform auto-detection, Nuxt 3 will run seamlessly in pretty much all JS environments. This includes &lt;strong&gt;Node.js&lt;/strong&gt;, &lt;strong&gt;Deno&lt;/strong&gt;, &lt;strong&gt;Cloudflare Workers&lt;/strong&gt;, and even browser &lt;strong&gt;Service Workers&lt;/strong&gt; (though that’s experimental right now).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nuxt-bridge"&gt;
  &lt;/a&gt;
  Nuxt Bridge
&lt;/h1&gt;

&lt;p&gt;While Nuxt 3 looks like a great upgrade, there’s a big problem we haven’t discussed - &lt;strong&gt;compatibility&lt;/strong&gt;. Vue 3 itself, with its breaking changes, already made many libraries and tools from Vue 2’s ecosystem &lt;em&gt;“obsolete”&lt;/em&gt; and at a need for an upgrade. So, how hard will it be to upgrade to Nuxt 3? Thanks to &lt;strong&gt;Nuxt Bridge&lt;/strong&gt; - not that hard!&lt;/p&gt;

&lt;p&gt;Nuxt Bridge is a project meant to bring Nuxt 3 features to Nuxt 2. This is intended to make future migration smoother while also providing many Nuxt 3 improvements to Nuxt 2 users that don’t plan to upgrade immediately.&lt;/p&gt;

&lt;p&gt;The planned set of back-ported features includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nitro engine;&lt;/li&gt;
&lt;li&gt;ESM and built-in TypeScript support;&lt;/li&gt;
&lt;li&gt;Composition API with Nuxt 3 composables and auto-imports;&lt;/li&gt;
&lt;li&gt;Nuxt CLI and Devtools;&lt;/li&gt;
&lt;li&gt;Vite integration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nuxt Bridge also simplifies upgrades for the whole Nuxt ecosystem. Legacy plugins and modules will keep working, the config file from Nuxt 2 will be compatible with Nuxt 3, and several Nuxt 3 APIs will remain unchanged to allow for a progressive upgrade.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h1&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue.&lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h1&gt;

&lt;p&gt;Overall, I personally can’t wait for Nuxt 3. Like many other Vue developers, I’ve been on the lookout for it for the past few months, and I’m thrilled it’s finally coming out to the public.&lt;/p&gt;

&lt;p&gt;While performance improvements are impressive, as a TypeScript user, I’m most interested in the TS rewrite, as well as Vue 3 and Vite integration. These recently became my go-to technologies for personal projects, and it’d be great to see them integrated into a single framework.&lt;/p&gt;

&lt;p&gt;Nuxt 3 will be a stepping stone in migrating the Vue ecosystem to Vue 3, encouraging other developers to upgrade or create new tools to enrich the new ecosystem. The community will undoubtedly benefit from the transition to TypeScript, adoption of Composition API, and performance improvements to both user-facing apps and the development environment itself, thanks to Vite.&lt;/p&gt;

&lt;p&gt;So, there you have it! Those are many but certainly not all of the features you should expect to see in the Nuxt 3. Depending on when you read it, I hope you’re as eager to experience Nuxt 3 as I am, or maybe you’re already playing with it. Either way - have fun!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>news</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
