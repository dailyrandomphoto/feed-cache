<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Strapi Relations 101</title>
      <author>Shada </author>
      <pubDate>Tue, 09 Nov 2021 15:02:25 +0000</pubDate>
      <link>https://dev.to/strapi/strapi-relations-101-332</link>
      <guid>https://dev.to/strapi/strapi-relations-101-332</guid>
      <description>&lt;h2&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intro (why you should keep reading)&lt;/li&gt;
&lt;li&gt;Relations in Strapi (short Intro)&lt;/li&gt;
&lt;li&gt;Key concepts (definition + diagram + examples (basic + practical))

&lt;ul&gt;
&lt;li&gt;Cardinality&lt;/li&gt;
&lt;li&gt;Directionality&lt;/li&gt;
&lt;li&gt;Association types&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Conclusion (recap + next step)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9-u3hOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj54jw2590yj0s8sbe71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9-u3hOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj54jw2590yj0s8sbe71.png" alt="Image description" width="620" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Relationships are complicated. That's true in real life. And that's truer when managing content.&lt;/p&gt;

&lt;p&gt;How many times weren't you sure how to connect 2 pieces of content? To then realize too late that it wasn't probably the best choice.&lt;/p&gt;

&lt;p&gt;This post will give you key insights to make better decisions for your content modeling in Strapi.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relations-in-strapi"&gt;
  &lt;/a&gt;
  Relations in Strapi
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmq62anh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgwef1lanh27ywdtuoxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmq62anh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgwef1lanh27ywdtuoxu.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Strapi, relations are a convenient way to connect different entities with each other. For reference, an entity is an instance of a content-type. So "My first post" is an entity of the Post collection type.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 An &lt;strong&gt;entity&lt;/strong&gt; is an instance of a content-type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can connect content types using the relations field in the Content-Type Builder.&lt;/p&gt;

&lt;p&gt;With flexibility in mind, Strapi offers an extensive set of options to build the best relationships for your content. However, this freedom comes with a price: a bit of confusion and doubts about what you should do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-concepts"&gt;
  &lt;/a&gt;
  Key Concepts
&lt;/h3&gt;

&lt;p&gt;To better understand how relations work let's get first familiar with a few scary (read 'technical') words:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cardinality"&gt;
  &lt;/a&gt;
  Cardinality
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGS19jed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jb9nmaofac8repbwjvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGS19jed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jb9nmaofac8repbwjvl.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another way to look at it is by asking yourself: "How many entities do you need to connect together?"&lt;/p&gt;

&lt;p&gt;Strapi allows you all the possible combinations you can think of. Here they are with examples to illustrate them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One-to-one&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example: a person has a unique id card.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One-to-many&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example: a post has several authors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Many-to-many&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example: A student can follow many courses. And a course is followed by many students.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#directionality"&gt;
  &lt;/a&gt;
  Directionality
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Z8G5ol1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hig13hkfj2b7kfubr5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Z8G5ol1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hig13hkfj2b7kfubr5n.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think of it as the flow of data: "Is it going one-way or both?"&lt;/p&gt;

&lt;p&gt;You may be wondering why do we need to make a distinction. Both ways seem better right? In theory, yes. In practice, bidirectional relationships come with a significant performance cost for the database and hence the user experience. So you have to see where they make sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unidirectional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you need to map thousands of cities for a country, the workload would be huge to retrieve all the cities when you are viewing a country's details. In this case, you usually just need to connect a new city to an existing country. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bidirectional&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A better use case for this type of directionality is being able to link a post to an author and vice versa. Since you probably won't have thousands of entities for each content-type. If you end up in this situation, first of all, good for you! You have some prolific writers 🙂 But joke aside you might need to rethink your relations if you start to see some performances decrease.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#association-types"&gt;
  &lt;/a&gt;
  Association Types
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OLXIXsRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iorp2pywgb8225kkkfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OLXIXsRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iorp2pywgb8225kkkfg.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This concept refers directly to the collection types you are using. Do you allow more than one to be connected?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#single"&gt;
  &lt;/a&gt;
  Single
&lt;/h4&gt;

&lt;p&gt;This is the simplest case, you just want to connect 2 content-types, such as Authors to Posts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#polymorphic"&gt;
  &lt;/a&gt;
  Polymorphic
&lt;/h4&gt;

&lt;p&gt;This type is more complicated to handle on the database side. This is why it's usually hard to pull off in a CMS.&lt;/p&gt;

&lt;p&gt;A nice way to illustrate this one is to use images as the collection type you want to connect to multiple content-types, such as authors, posts, and more.&lt;/p&gt;

&lt;p&gt;You are officially a pro in relations. You know understand all the subtitles dealing with relations and you can now pick the best configurations knowing all the tradeoffs to take into account.&lt;/p&gt;

&lt;p&gt;Feel ready to dig deeper into the topic? Give a read to &lt;a href="https://strapi.io/developer-docs/latest/development/backend-customization/models.html#relations"&gt;our documentation&lt;/a&gt; to see how you can apply your new learnings in Strapi today.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;p&gt;Status update: in (a) relationship(s)&lt;/p&gt;

</description>
      <category>relations</category>
      <category>strapi</category>
      <category>cms</category>
    </item>
    <item>
      <title>Learning &gt; Freelancing</title>
      <author>Saifullah Usmani</author>
      <pubDate>Tue, 09 Nov 2021 14:51:36 +0000</pubDate>
      <link>https://dev.to/saifullahusmani/learning-freelancing-17jm</link>
      <guid>https://dev.to/saifullahusmani/learning-freelancing-17jm</guid>
      <description>&lt;p&gt;Hi, my name is Saifullah Usmani. I am a Programmer and a Graphic Designer. I have been programming for almost 5 years now. And I have worked with several freelance clients.&lt;/p&gt;

&lt;p&gt;If it sounds like a thing that will add value in your life then consider following my page because I keep creating quality content for you.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is gonna be a topic which you can disagree. It is just my personal opinion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-not-start-freelancing-until-your-education-period-ends"&gt;
  &lt;/a&gt;
  Do not start freelancing until your education period ends:
&lt;/h3&gt;

&lt;p&gt;Well so many of you may be freelancing and I also have a series on how to be good in freelancing as a developer which got attention and also got featured in the top week's post  but this topic is based on my personal opinion.&lt;/p&gt;

&lt;p&gt;The reason I am saying this is because this takes your freedom of experimenting and learning new things. Your time becomes limited and you have a responsibility and then people also starts to depend on you.&lt;br&gt;
This is the worst condition when you cannot do what you love to do with code. I love to code all day on my stupid ideas, create simulations games websites work with physics automation ML AI etc. &lt;br&gt;
I want to learn all that fun stuff in much more detail.&lt;br&gt;
But now I really don't have time to spend on them. Even if I do, it feels like I am wasting the time. &lt;br&gt;
I can only do freelance work all day. Which is getting boring. Making only websites that my clients want. Making what they like.&lt;br&gt;
So I am feeling not good about freelancing in general and this is the moment I started writing this post. I may be lacking motivation. But the thing is I don't need motivation to code I love to code. It is just the restriction that I don't want at this moment. So I am going to do something about it and I believe I will come up with a better solution to buy some time. I know time cannot be bought. It is just a metaphor but I want to turn it into reality.&lt;/p&gt;

&lt;p&gt;I think this is the time to experiment and learn. Learn as much as you like and learn anything you like. Freelance is like a job and it restricts you. So don't go for money when it is time to learn. I am gonna give freelancing a pause and do the fun stuff I like. When I complete education I will start it again properly but till then I will only do it when I need extra money for something.&lt;br&gt;
If you have any advice for me please write them in the comments. Do you think that my point is correct of using the education period to learn and not earn?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 CSS shortcuts</title>
      <author>Ryland @ Stackbit</author>
      <pubDate>Tue, 09 Nov 2021 14:47:55 +0000</pubDate>
      <link>https://dev.to/stackbit/5-css-shortcuts-1lj0</link>
      <guid>https://dev.to/stackbit/5-css-shortcuts-1lj0</guid>
      <description>&lt;p&gt;It's amazing how long I didn't know about these. They make my style sheets much more clean. &lt;/p&gt;

&lt;p&gt;I hope they do the same for yours. :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-list-properties-made-simpler"&gt;
  &lt;/a&gt;
  1/ List properties, made simpler:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OS26jtei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3teomvz9himdjgazyl3o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OS26jtei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3teomvz9himdjgazyl3o.png" alt="css-list-properties-short-cut" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-background-property-made-easier"&gt;
  &lt;/a&gt;
  2/ The background property, made easier:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pAYd6x9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/depn1pjac476j47o34d4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAYd6x9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/depn1pjac476j47o34d4.png" alt="css-background-property-short-cut" width="880" height="494"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-font-and-lineheight-properties-made-like-a-pro"&gt;
  &lt;/a&gt;
  3/ Font and line-height properties, made like a pro:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0G6m66eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7r5vb3ysezrqwiih3qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0G6m66eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7r5vb3ysezrqwiih3qd.png" alt="css-font-line-height-properties-short-cut" width="880" height="494"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-margin-and-padding-properties-made-how-they-should-be"&gt;
  &lt;/a&gt;
  4/ Margin and padding properties, made how they should be:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pVOEVUos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9zloe4z7g315ygnoqjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pVOEVUos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9zloe4z7g315ygnoqjn.png" alt="css-margin-padding-properties-short-cut" width="880" height="494"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-border-property-made-with-love"&gt;
  &lt;/a&gt;
  5/ Border property, made with love:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8w9h3ASZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5flfy8rcwe5d8u4q17u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8w9h3ASZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5flfy8rcwe5d8u4q17u.png" alt="css-border-property-short-cut" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploy, release the kraken!</title>
      <author>Pedro Kiefer</author>
      <pubDate>Tue, 09 Nov 2021 14:33:48 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/deploy-release-the-kraken-1ae9</link>
      <guid>https://dev.to/pedrokiefer/deploy-release-the-kraken-1ae9</guid>
      <description>&lt;p&gt;Chegou a hora de mandar para produção o trabalho dos últimos dias ou do dia! É só jogar para cima do time de operações e deu, né? Claro que não, é hora de vermos e ajustarmos uma esteira de entrega que atenda os requisitos do produto. É um trabalho em conjunto entre operação e desenvolvimento, ambos precisam conhecer sobre o sistema, a infraestrutura, a escalabilidade, o código. Essa troca de informações é essencial para um crescimento escalável do sistema.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RIoydpjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh69i2gdz7kkoncd2qsl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RIoydpjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh69i2gdz7kkoncd2qsl.gif" alt="Deploy!" width="498" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hoje em dia as opções de deploy são praticamente infinitas: kubernetes, diferentes PaaS, máquinas virtuais, docker, infraestrutura serverless, etc. Escolha a que tem melhor custo-benefício para o produto. Evite fazer escolhas da moda ou só por quê você quer aprender algo. Entenda os pontos de falha da infra escolhida – é impossível entender todos, mas saiba que eles existem e que vão eventualmente acontecer. Redes vão se particionar, pacotes vão se perder, DNS vai demorar para atualizar, VMs vão morrer, armazenamento será corrompido, configurações ficarão fora de sincronismo. O software e a esteira de entrega devem levar todos esses pontos em consideração.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Não faça deploys manualmente.&lt;/strong&gt; Entenda manualmente como qualquer prática que dependa do ambiente local de desenvolvimento ou conhecimento que só existe na cabeça do desenvolvedor. Garanta uma esteira de entrega completa que permita reprodutibilidade do build e testes do sistema. Queremos evitar o clássico problema "funciona na minha máquina" então reprodutibilidade é uma peça chave de qualquer esteira de entrega.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#estrat%C3%A9gias"&gt;
  &lt;/a&gt;
  Estratégias
&lt;/h2&gt;

&lt;p&gt;Discuta e planeje estratégias de entrega do software, levando em conta pelo menos os seguintes pontos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Os modelos de dados são compatíveis?&lt;/li&gt;
&lt;li&gt;Como iremos atuar em caso de problemas?&lt;/li&gt;
&lt;li&gt;É simples voltar para a versão anterior?&lt;/li&gt;
&lt;li&gt;Temos uma linha base das métricas pra conseguir detectar anomalias?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Durante o desenvolvimento, pense nas alterações nos modelos de dados e modificações nas assinaturas de funções. A maioria dos sistemas atualmente são distribuídos e na maioria das estratégias de deploy as instâncias novas começam a trabalhar antes de desligarmos todas as antigas. Será que remover um atributo vai quebrar as units antigas? Se quebrar, como iremos voltar para a versão anterior em caso de falha? Tente manter a retrocompatibilidade dos modelos de dados. No caso de APIs que são consumidas por outros sistemas, não quebre o modelo até que todos consigam atualizar. Dê preferência para criar novas rotas com os modelos novos se a atualização for totalmente incompatível — isso acontece, é normal.&lt;/p&gt;

&lt;p&gt;Defina um plano de ação simples, que todos no time saibam executar, para quando tivermos problemas não gastarmos tempo tentando lembrar aquele comando mágico ou a sequência correta de passos. Se possível, tenha um ambiente que permita exercitar essas ações. Um plano de ação simples é voltar para a versão anterior, basta garantir retrocompatibilidade nas alterações que fizermos ao sistema.&lt;/p&gt;

&lt;p&gt;As métricas do sistema vão definir uma linha base do seu comportamento ao longo do tempo. Se familiarize com isso para entender melhor quando algo foge do padrão. As métricas vão fugir do padrão quando temos algum evento especial, por exemplo Black Friday ou a final de um campeonato. Elas também podem fugir da linha base quando subirmos uma alteração com problema, e às vezes só conseguimos ver um problema quando está em produção com uma carga bem mais alta do que no sistema de teste.&lt;/p&gt;

&lt;p&gt;Existem diversas estratégias que ajudam nos pontos citados: blue-green, canary deployment, feature flags, rolling update, etc. Estude com o time qual faz mais sentido para o sistema. Particularmente, gosto muito de canários e feature flags. Abaixo irei exemplificar algumas dessas estratégias, são apenas esboços sem detalhes de implementação.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bluegreen"&gt;
  &lt;/a&gt;
  Blue-Green
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTdE5E1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2oeb8dteunex9hbnybh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTdE5E1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2oeb8dteunex9hbnybh.png" alt="Blue-Green" width="613" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma estratégia simples de deploy é usar Blue-Green, onde criamos em paralelo uma nova infraestrutura completa com a nova versão do sistema. Na figura acima estamos apontando os acessos para o lado green. No próximo deploy iremos recriar o lado blue, daí podemos testar a aplicação utilizando o endereço interno antes de trocarmos o apontamento do endereço principal. Caso tenhamos algum problema, basta voltar o apontamento para o lado green.&lt;/p&gt;

&lt;p&gt;Normalmente as bases de dados são as mesmas para ambos os lados, então tome cuidado com migrações nos modelos de dados.&lt;/p&gt;

&lt;p&gt;Prós:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facilidade de voltar a aplicação&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custo de manter duas infraestruturas em paralelo por um tempo. Em ambientes não cloud isso pode ter um custo considerável.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rolling-update"&gt;
  &lt;/a&gt;
  Rolling Update
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb9ZLBzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1u4h5e999khobmvymbei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb9ZLBzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1u4h5e999khobmvymbei.png" alt="Rolling Update" width="421" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As instâncias da aplicação vão sendo substituídas aos poucos, em um número fixo de instâncias por vez. Somente depois que as novas instâncias estão respondendo corretamente é feita a remoção das instâncias antigas. Na figura temos a instância A como sendo a nova, e a instância 1 marcada para remoção. É a estratégia padrão do &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prós:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resiliente caso a aplicação falhe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pode ser demorado para fazer um rollback&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#canary-deployment"&gt;
  &lt;/a&gt;
  Canary Deployment
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlM8NoT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arflzfr27m5fiw9a94oa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlM8NoT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arflzfr27m5fiw9a94oa.png" alt="Canary Deployment" width="680" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ideia por trás de canários é subir uma aplicação que possa ser sacrificada caso tenha problemas. O nome vem justamente dos canários que os mineiros utilizavam no passado para indicar a qualidade do ar. Quando o canário para de cantar é porque o ar não está respirável e os mineiros devem sair daquele túnel. Aqui é a mesma coisa, colocamos uma pequena carga na nova versão da aplicação e olhamos o seu comportamento. Conforme temos confiança que o comportamento está dentro do esperado vamos aumentando a quantidade de instâncias e o volume servido. Em caso de problemas, basta tirar a nova versão do ar. Minimizamos qualquer tempo de indisponibilidade e sensação de problemas por parte dos usuários. Existem ferramentas que automatizam esse processo de deployment. O livro &lt;a href="https://sre.google/workbook/table-of-contents/"&gt;The Site Reliability Workbook&lt;/a&gt; tem um &lt;a href="https://sre.google/workbook/canarying-releases/"&gt;capítulo inteiro&lt;/a&gt; dedicado sobre a prática.&lt;/p&gt;

&lt;p&gt;Para aplicações que processam dados, deve-se usar &lt;a href="https://sre.google/workbook/data-processing/#canarying"&gt;outras formas&lt;/a&gt;, mas o princípio é sempre o mesmo: olhar o comportamento das métricas e os resultados gerados e ir trocando de forma incremental as instâncias.&lt;/p&gt;

&lt;p&gt;Um amigo gosta de dizer que a única forma de deploy deveria ser canários. A grande maioria dos problemas em sistemas poderiam ser evitados se canários fossem utilizados.&lt;/p&gt;

&lt;p&gt;Prós:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fácil de detectar problemas&lt;/li&gt;
&lt;li&gt;Minimiza o impacto com os usuários&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complexidade para criar o ambiente de deploy
### Feature Flags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TmJQ5DYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22p9ayj2y2x76dde94xx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TmJQ5DYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22p9ayj2y2x76dde94xx.png" alt="Feature Flags" width="620" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O princípio por trás de feature flags é permitir ligar ou desligar comportamentos do sistema de forma dinâmica. Podemos utilizar alguma das outras estratégias descritas para atualizar as instâncias, e depois controlamos quando vamos habilitar a funcionalidade. O controle pode ser só ligado ou desligado, ou ser probabilístico — 5% das execuções chamam a funcionalidade nova. Normalmente temos métricas associadas à flag para podermos acompanhar o comportamento novo. Também podemos usar esse sistema para controles dinâmicos, por exemplo: desligar um subsistema durante um momento de pico de acessos.&lt;/p&gt;

&lt;p&gt;Prós:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facilidade de uso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requer um sistema para gerenciar as flags&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>architecture</category>
    </item>
    <item>
      <title>CSS basic 8 - :hover, :active, :focus</title>
      <author>Dahye Ji</author>
      <pubDate>Tue, 09 Nov 2021 14:29:47 +0000</pubDate>
      <link>https://dev.to/daaahailey/css-basic-8-hover-active-focus-4d78</link>
      <guid>https://dev.to/daaahailey/css-basic-8-hover-active-focus-4d78</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hover"&gt;
  &lt;/a&gt;
  :hover
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;:hover&lt;/strong&gt;&lt;/code&gt; is CSS pseudo-class and it matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over(mouse over) an element with cursor.&lt;br&gt;
But you cannot detect when you hover something on mobile devices or devices with touch screen, hover is being used less and less now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* selects any &amp;lt;a&amp;gt; element when "hovered" */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#active"&gt;
  &lt;/a&gt;
  :active
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;:active&lt;/strong&gt;&lt;/code&gt;is used to select and style the active link or button is being clicked. When using a mouse, "activation" typically starts when the user presses down the primary mouse button.(A link become active when you click it)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* selects any &amp;lt;a&amp;gt; that is being activated */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;:active pseudo-class is commonly used on &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;br&gt;
 and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements. But :active selector can be used on all element not only links. Other common targets of this pseudo-class include elements that contain an activated element, and form elements that are being activated through their associated .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"my-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My button: &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"my-button"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Try Clicking Me or My Label!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#focus"&gt;
  &lt;/a&gt;
  :focus
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;:focus&lt;/strong&gt;&lt;/code&gt; is ues to select the element that has focus. It generally triggered when the user clicks or taps on an elements or selects it with the keyboard's &lt;code&gt;tab&lt;/code&gt; key.(:focus selector is allowed on elements that accept keyboard events or other user input)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* selects any &amp;lt;input&amp;gt; when focused */&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Practice&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ko"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;hover, active, focus&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;.one&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blueviolet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.one&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;palevioletred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;palevioletred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"cilck here!"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me!!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*Use the :link selector to style links to unvisited pages, :visited selector to style links to visited pages.&lt;/p&gt;

</description>
      <category>css</category>
      <category>hover</category>
      <category>active</category>
      <category>focus</category>
    </item>
    <item>
      <title>App/ Future </title>
      <author>yuellian</author>
      <pubDate>Tue, 09 Nov 2021 14:20:15 +0000</pubDate>
      <link>https://dev.to/yuellian/app-future-5g2f</link>
      <guid>https://dev.to/yuellian/app-future-5g2f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#app"&gt;
  &lt;/a&gt;
  App
&lt;/h2&gt;

&lt;p&gt;If I could build an app, it would be a carpooling app. This app is similar to Uber. It would be as widespread as any major social media application and would be integrated into people's daily lives. Essentially, if a user with a vehicle has space in their car they will go on the app and alert people near their vicinity that they will be going to a specific place and that they have space in their car to pick up people. There will be a window for how long the user waits for people to request to join their ride. They can choose to not pick up anyone, but if the people are enroute to their location, then they will pick them up. This app is extremely convenient, saves time, saves money, and decreases overall traffic. This app is for people with a car who want to help others and for people who need a ride. &lt;/p&gt;

&lt;p&gt;The major constraint for this app and the reason why this app would never work is that our society is too dangerous. This app can only work if we trust that nothing will happen in the car once the driver picks up the rider. We have to trust that the driver is actually going to the location they specified, that the rider is safe, and that they both don't mean any harm. We can't guarantee anything so this app might create more danger than assistance. I wished society didn't have any ill intentions and would solely use this app to help people and provide overall convenience. If there was a way we can assure people would use the app for its sole purpose, then I would love to create this app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h2&gt;

&lt;p&gt;If income did not matter, if time did not matter, if all careers were all valued the same, then I would want to be a student and teacher for the rest of my life. I love learning new things. If I had the time I would like to take one class per semester so I will always be learning something. &lt;/p&gt;

&lt;p&gt;Growing up, I always admired my teachers. I was especially appreciative when I noticed how happy they are when they saw their students understanding and learning the material. I also had a couple of experiences being a tutor and I was extremely content when the material finally clicked with the student. I wished teachers were paid more especially due to how integral to the advancement of society they are, however, this career is undervalued and would take too long/ longer for me to reach my personal goals.  &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Easiest way to deploy to Azure by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Tue, 09 Nov 2021 13:55:23 +0000</pubDate>
      <link>https://dev.to/silvenleaf/easiest-way-to-deploy-to-azure-by-silvenleaf-1dkp</link>
      <guid>https://dev.to/silvenleaf/easiest-way-to-deploy-to-azure-by-silvenleaf-1dkp</guid>
      <description>&lt;p&gt;Ahoy there! Another step onto the DevOps World! Let's deploy our App to cloud. We'll be using azure here! Really excited to learn about Azure VM and deployment!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-create-a-vm"&gt;
  &lt;/a&gt;
  Step 0: Create a VM
&lt;/h3&gt;

&lt;p&gt;To deploy to azure, first create a free azure account if you don't have one! You'll see something like this when you log in:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKXs_Pxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpsjpx0bhx3hcq2gz763.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKXs_Pxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpsjpx0bhx3hcq2gz763.png" alt="Azure Dashboard" width="880" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;"Virtual machines"&lt;/strong&gt;. If you don't see it listed there, search it on the search bar (situated on top).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0lNNvQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sic9489gpi1oygh4depp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0lNNvQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sic9489gpi1oygh4depp.png" alt="Search Virtual machines" width="880" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's the top result here. Once you click it, you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZ-9jNNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozovv3q8tirthc7izf28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZ-9jNNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozovv3q8tirthc7izf28.png" alt="Virtual machines page" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;create&lt;/strong&gt; button and you'll see 2 options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dI2Hj3DO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p53xg5w8pfnxnweps34x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dI2Hj3DO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p53xg5w8pfnxnweps34x.png" alt="Click create" width="619" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;"Virtual machine"&lt;/strong&gt; and you'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biDgFBje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsv9hok1752hjswvyqpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biDgFBje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsv9hok1752hjswvyqpd.png" alt="Create VM 1" width="880" height="782"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your subscription. Now, here we are only interested in these fields&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Virtual machine name&lt;/li&gt;
&lt;li&gt;Image &lt;/li&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Authentication type&lt;/li&gt;
&lt;li&gt;Username&lt;/li&gt;
&lt;li&gt;SSH public key source&lt;/li&gt;
&lt;li&gt;Key pair name&lt;/li&gt;
&lt;li&gt;Select inbound ports&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll keep everything else default.&lt;/p&gt;

&lt;p&gt;Anyway, let's go one by one. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#substep-1-subscription"&gt;
  &lt;/a&gt;
  Sub-Step 1: Subscription
&lt;/h5&gt;

&lt;p&gt;Choose your subscription from the dropdown. For &lt;strong&gt;"Resource Group"&lt;/strong&gt;, keep it default. One thing to note is that, since we didn't choose any Resource Group, it's going to create one for us (in this case named "DemoVM_group". This name was given automatically). &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#substep-2-virtual-machine-name"&gt;
  &lt;/a&gt;
  Sub-Step 2: Virtual machine name
&lt;/h5&gt;

&lt;p&gt;Give a name of your Virtual machine. I gave &lt;strong&gt;"DemoVM"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Choose a different region if you wish to. We're gonna leave everything default.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#substep-3-image"&gt;
  &lt;/a&gt;
  Sub-Step 3: Image
&lt;/h5&gt;

&lt;p&gt;For &lt;strong&gt;"image"&lt;/strong&gt;, We are choosing &lt;strong&gt;"Ubuntu"&lt;/strong&gt;. It's already chosen by default so you don't have to do anything. Just note that it'll be the OS of the VM. You can choose Debian, Red hat, Windows or whatever you want. I prefer &lt;strong&gt;"Ubuntu"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfD-Vc6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te56gcewxz8lywltl5cp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfD-Vc6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te56gcewxz8lywltl5cp.png" alt="Create VM 2" width="880" height="781"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#substep-4-size"&gt;
  &lt;/a&gt;
  Sub-Step 4: Size
&lt;/h5&gt;

&lt;p&gt;Now the &lt;strong&gt;MOST Dangerous part&lt;/strong&gt;!! Be VERY CAREFUL HERE!! Choose the &lt;strong&gt;size&lt;/strong&gt; as cheap as possible. Because we are using it only for learning purposes and we don't have to buy an expensive one. Click the dropdown and it'll open up something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--on3jLk3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kju1ql9hr2swc37dtqab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--on3jLk3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kju1ql9hr2swc37dtqab.png" alt="Create VM 3" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;"see all sizes"&lt;/strong&gt; and you'll see this page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1hOtmrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwi8s9hha6gnky5k6ovv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1hOtmrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwi8s9hha6gnky5k6ovv.png" alt="Create VM 4" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;"Cost/month"&lt;/strong&gt; tab to sort them based on cost. Select the cheapest one and click &lt;strong&gt;"Select"&lt;/strong&gt;. (I selected the &lt;strong&gt;"$4.82"&lt;/strong&gt; option)&lt;/p&gt;

&lt;p&gt;The only important part is that you don't accidentally select a costly one. As long as you are careful here, it's ok.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#substep-5-authentication-type"&gt;
  &lt;/a&gt;
  Sub-Step 5: Authentication type
&lt;/h5&gt;

&lt;p&gt;There are 2 types of authentication that you can choose. We are going to choose &lt;strong&gt;"SSH public key"&lt;/strong&gt;. See that the azure will automatically create the SSH Key pair for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ucwIvCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9agc9mrn34jkwqd38ds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ucwIvCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9agc9mrn34jkwqd38ds.png" alt="Create VM 5" width="880" height="751"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now give a username on the &lt;strong&gt;"Username"&lt;/strong&gt; field. &lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;"SSH public key source"&lt;/strong&gt; field, we'll use the default &lt;strong&gt;"Generate new key pair"&lt;/strong&gt; option. But if you want to use an existing one, you can select that from this dropdown. But for now, we are gonna select this so that Azure creates a new pair for us.&lt;/p&gt;

&lt;p&gt;Now, give a key pair name for your SSH key on the &lt;strong&gt;"Key pair name"&lt;/strong&gt; field. (I gave "DemoVM_key")&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;"Select inbound ports"&lt;/strong&gt; field, make sure that it's chosen &lt;strong&gt;"SSH (22)"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once all that done, click the &lt;strong&gt;"NEXT: something"&lt;/strong&gt; button. You'll see another page, keep clicking &lt;strong&gt;"NEXT:something"&lt;/strong&gt; button until you reach the review page. We don't have to change anything else. Let's keep everything as default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sn96btLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1selhijsll5uxkixwi5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sn96btLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1selhijsll5uxkixwi5w.png" alt="Create VM 6" width="783" height="826"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you reach the Review Page, make sure everything you chose are ok. Then click the &lt;strong&gt;"Create"&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;You'll be prompted with this. Click on the &lt;strong&gt;"Download private key and create resource"&lt;/strong&gt; to dowload the key that azure generated for you and create the resource. Wait a while and it'll download that ssh file and also create the VM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77heviKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mom8lmlcce8f4et11xt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77heviKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mom8lmlcce8f4et11xt.png" alt="Create VM 7" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-log-into-the-vm"&gt;
  &lt;/a&gt;
  Step 2: Log into the VM
&lt;/h3&gt;

&lt;p&gt;Once the previous step is done, open your terminal in the folder where the SSH secret key is.&lt;/p&gt;

&lt;p&gt;NOTE: After downloading that SSH secret file, it was inside the "downloads" folder. I moved it into the "Blogs" folder and opened my terminal there (git bash in this case, you can use any terminal)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvMW7cFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8r4gzxqvmhhyc644inh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvMW7cFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8r4gzxqvmhhyc644inh.png" alt="File manager" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type &lt;strong&gt;"ls"&lt;/strong&gt; command in your terminal to make sure you have the file there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0p37TVlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd2hgrkipywzacc71pe8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0p37TVlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd2hgrkipywzacc71pe8.png" alt="Terminal" width="561" height="219"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now let's go back to the VM in the Azure Portal. In the last step, after clicking that button, it'll start creating and deploying that VM. Once done, you'll see this page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M53nvTx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbxjtu5ewxnvc7jj9ols.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M53nvTx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbxjtu5ewxnvc7jj9ols.png" alt="Open VM 0" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;"Go to resources"&lt;/strong&gt; button and you'll come here &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoN3aP-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wt3hw1tlnst9yfqq1os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoN3aP-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wt3hw1tlnst9yfqq1os.png" alt="Open VM 1" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;"Connect"&lt;/strong&gt; button on top left and choose SSH&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlwMAgX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a31eh279yop34zy5yntz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlwMAgX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a31eh279yop34zy5yntz.png" alt="Open VM 2" width="529" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you'll see this page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IB7hQSba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gynyarp4qet6dsh1r5e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IB7hQSba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gynyarp4qet6dsh1r5e7.png" alt="Open VM 3" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the command on 4th section. This one I meant&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; &amp;lt;private key path&amp;gt; azureuser@23.97.60.68
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;strong&gt;"azureuser"&lt;/strong&gt; is our username and the last part is the IP address of the VM.&lt;/p&gt;

&lt;p&gt;Now remember we opened our terminal where the SSH Key was. Go to that terminal and paste this command. Replace the &lt;strong&gt;"&amp;lt;private key path&amp;gt;"&lt;/strong&gt; with the SSH private key name there. It'll look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; DemoVM_key.pem azureuser@23.97.60.68
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type it and hit enter. You'll be asked this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Are you sure you want to continue connecting (yes/no/[fingerprint])?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eECFx4db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd6fcbbs793sgqieyamd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eECFx4db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd6fcbbs793sgqieyamd.png" alt="Terminal VM 1" width="855" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type yes and hit enter. You'll get inside the VM. It'll look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dg4ftEOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32bs69kdhcwa8jwbxjem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dg4ftEOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32bs69kdhcwa8jwbxjem.png" alt="Terminal VM 2" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yippie!! We are inside the VM. Now let's host our web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-host-our-app"&gt;
  &lt;/a&gt;
  Step 3: Host our APP
&lt;/h3&gt;

&lt;p&gt;You must have a project repo to host I suppose. Clone the repo inside the VM. (Same as how you clone it in your computer). Note, the VM is just a computer but hosted somewhere else and you can access it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/SilvenLEAF/demoVM.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: This repo doesn't exist anymore. So, Use your own Project repo.&lt;/p&gt;

&lt;p&gt;once done, type &lt;strong&gt;"ls"&lt;/strong&gt; to see your repo there, and &lt;strong&gt;"cd"&lt;/strong&gt; into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll show that my demoVM repo is there. Now let's go inside it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;demoVM
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Type &lt;strong&gt;"ls"&lt;/strong&gt; again to see its content. See, all your source code is there.&lt;/p&gt;

&lt;p&gt;Now, note, I cloned my JavaScript project (It can be NodeJS or React or TypeScript or anything). So to run a nodejs project what do we type? We first install the packages with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right? But just like my Laptop, this VM computer doesn't come with NodeJS installed. So let's install it. &lt;/p&gt;

&lt;p&gt;Checkout this link to learn more about how to install nodejs into the VM. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nodesource/distributions/blob/master/README.md"&gt;https://github.com/nodesource/distributions/blob/master/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGO3wFMh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhweb9g69r2p31uynabb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGO3wFMh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhweb9g69r2p31uynabb.png" alt="Install NodeJS in Ubuntu" width="880" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are using &lt;strong&gt;"Ubuntu"&lt;/strong&gt; in our VM, we'll use the command for &lt;strong&gt;"Ubuntu"&lt;/strong&gt;. (See that above link). Let's download Node.js v17.x. Type this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://deb.nodesource.com/setup_17.x | &lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; bash -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sweet! It'll install NodeJS and with NodeJS we get npm for free. Now let's run our app.&lt;/p&gt;

&lt;p&gt;Assuming in you &lt;strong&gt;"package.json"&lt;/strong&gt; file you have these scripts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"YOUR_START_SCRIPT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"YOUR_BUILD_SCRIPT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="err"&gt;...other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: You start your app the same way you start it in your computer. The VM is just a computer that you can access.&lt;/p&gt;

&lt;p&gt;So, inside our project repo, type this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then type this build command, only if your project has this commmand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then start your app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: If you are using python or anything else, then you might have your own command to start the app, like &lt;strong&gt;"python app.py"&lt;/strong&gt; or something. So simply start your app the way you start it on your computer.&lt;/p&gt;

&lt;p&gt;Great!! Our app is running in that VM, just like how we ran in our computer (localhost). But great part, this computer (VM) can be accessed by anyone in the world and we can see it live!! Great!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqNK_FEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrgei4qrbieodsxwbsod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqNK_FEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrgei4qrbieodsxwbsod.png" alt="App running on VM" width="459" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-access-our-app-from-anywhere"&gt;
  &lt;/a&gt;
  Step 4: Access our App from anywhere
&lt;/h3&gt;

&lt;p&gt;Well, we started our Server there. But how to access it from anywhere? Currently our app is running on port 5000 and it is not open for the world. So, let's open it up for the world!! &lt;/p&gt;

&lt;p&gt;Go to your VM on Azure Portal and click on the &lt;strong&gt;"netoworking"&lt;/strong&gt; tab on the left. And then click on &lt;strong&gt;"Add inbound port rule"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FsxYNcYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jsyg1okoagm53us70tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsxYNcYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jsyg1okoagm53us70tj.png" alt="VM Network Tab" width="880" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8bdBWpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcla84uy9u3m8uc76tcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8bdBWpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcla84uy9u3m8uc76tcu.png" alt="Add inbound rule 1" width="669" height="802"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide your port, I gave &lt;strong&gt;"5000"&lt;/strong&gt; because that is where our app is running. Then give it a name. I gave &lt;strong&gt;"Port_5000_For_The_World"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcdFUNAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weglch5dxbv4fghvfp17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcdFUNAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weglch5dxbv4fghvfp17.png" alt="Add inbound rule 2" width="663" height="808"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now save it. Great!! Now let's access our app. Do you remember how we access the app in our computer? We go to &lt;strong&gt;"localhost:PORT"&lt;/strong&gt;, right? If it was on our computer, we would have gone here &lt;strong&gt;"localhost:5000"&lt;/strong&gt;. Where &lt;strong&gt;localhost&lt;/strong&gt; is our computer's IP address (which is infact 127.0.0.1.). So let's replace this localhost with our VM computer's IP address. What was it do you remember? It was also mentioned in that ssh command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; DemoVM_key.pem azureuser@23.97.60.68
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The part after @ is the IP address of the VM. So after replacing the localhost we get&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;23.97.60.68:5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great!! Open your browser and go here. What do you see?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VXnErHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uastrx6sdb26qz3ah436.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VXnErHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uastrx6sdb26qz3ah436.png" alt="Live Website" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay!! Our LIVE website!! Now, share this address with anyone in the world, and they can access it.&lt;/p&gt;

&lt;p&gt;NOTE: When you buy a Domain name, let's assume it's &lt;strong&gt;"DemoVm.com"&lt;/strong&gt;, and map it to this IP address, then anyone can access it with this &lt;strong&gt;DemoVM.com&lt;/strong&gt; URL.&lt;/p&gt;

&lt;p&gt;Well anyway, now let's close up everything. Let's close the VM terminal where this app is running. Now try accessing it again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0SlkSbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wl542zx60j45gg8nv48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0SlkSbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wl542zx60j45gg8nv48.png" alt="Site can't be reached" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What? So, whenever you close that terminal, everything that was running on it stops as well. So how to fix it? Because we can't keep our PC running for the rest of our life right? &lt;/p&gt;

&lt;p&gt;Easy Peasy!! Prefix your command with &lt;strong&gt;"nohup"&lt;/strong&gt; and end it with &lt;strong&gt;"&amp;amp;"&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;nohup &lt;/span&gt;npm start &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now even if you close your terminal or cancel out this command, it'll still be running on the background. So now shut down your own computer and you'll still see your app running live!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-step"&gt;
  &lt;/a&gt;
  Bonus Step
&lt;/h3&gt;

&lt;p&gt;Now what if you want to track all the logs (useful for storing error logs)? I mean save all your console.log() output in a file (or print() in other languages)? Easy as a cake! Yummy!! I just got hungry!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;nohup &lt;/span&gt;COMMAND &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; FILE &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR, in other words&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;nohup &lt;/span&gt;npm start &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; log.txt &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great!! Now what if you want to see the log file? Easy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; log.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, after using that &lt;strong&gt;"nohup npm start &amp;amp;"&lt;/strong&gt;, our app was running on the background, and even if we closed the terminal or exited out of the process it was still running. What if you wanted to stop it from running?&lt;/p&gt;

&lt;p&gt;Type this command to get the list of all processes that are running on a particular PORT on the background. I gave 5000 because that's our PORT. You can replace 5000 with any port number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo lsof -iTCP:5000 -sTCP:LISTEN
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll show you something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3XG_PCGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gewm05danfqlcmvd34tq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3XG_PCGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gewm05danfqlcmvd34tq.png" alt="Get running process" width="804" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then type this following command to kill it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;kill &lt;/span&gt;YOUR_PID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our case, the PID is 15134, so the command will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;kill &lt;/span&gt;15134
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after killing it, try visiting your app again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0SlkSbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wl542zx60j45gg8nv48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0SlkSbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wl542zx60j45gg8nv48.png" alt="Site can't be reached" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila!! It was successfully killed!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-clean-up"&gt;
  &lt;/a&gt;
  Step 5: Clean up
&lt;/h3&gt;

&lt;p&gt;Now that we learnt how to deploy to azure! Let's delete everything and clean up so that we don't get charged for anything haha!!&lt;/p&gt;

&lt;p&gt;Close your terminal and go to your VM on Azure portal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoN3aP-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wt3hw1tlnst9yfqq1os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoN3aP-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wt3hw1tlnst9yfqq1os.png" alt="Open VM 1" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;"Overview"&lt;/strong&gt; tab, and click on the &lt;strong&gt;"Delete"&lt;/strong&gt; Button. It'll prompt you to confirm. Click &lt;strong&gt;"Ok"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now click on the very top left &lt;strong&gt;"Microsoft Azure"&lt;/strong&gt; Button. You'll come here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TfFwCvhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iq86yyrsyl110e3scsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfFwCvhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iq86yyrsyl110e3scsr.png" alt="Azure Homepage" width="880" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on our resource group that was created for our VM (In our case it is &lt;strong&gt;"DemoVM_group"&lt;/strong&gt;)!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFPcxPLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h86z7mlcrglcdvzmw4ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFPcxPLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h86z7mlcrglcdvzmw4ff.png" alt="Resource Group" width="880" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click &lt;strong&gt;"Delete resource group"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGg3wYxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yy7y4c53u2x1n266mewu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGg3wYxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yy7y4c53u2x1n266mewu.png" alt="Confirm Delete resource group" width="673" height="802"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll be prompted to type the resource group name to confirm the deletion. Type it and click &lt;strong&gt;"Delete"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It'll take a while and then delete everything!! Yay, now everything is cleaned and we got nothing to pay for anymore!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Even if you did not delete that VM, you only have to delete this Resource group. And it'll delete everything that we created, including the VM.&lt;/p&gt;

&lt;p&gt;Oh boy that was exciting, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming by November 13th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  1. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-more-on-devops"&gt;
  &lt;/a&gt;
  2. More on DevOps
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What is SVG?</title>
      <author>Dahye Ji</author>
      <pubDate>Tue, 09 Nov 2021 13:49:59 +0000</pubDate>
      <link>https://dev.to/daaahailey/what-is-svg-4791</link>
      <guid>https://dev.to/daaahailey/what-is-svg-4791</guid>
      <description>&lt;p&gt;Is SVG image? Nope. It's a document. SVG is &lt;strong&gt;&lt;em&gt;Scalable Vector Graphics&lt;/em&gt;&lt;/strong&gt;. It defines the graphics in XML format and can be used to draw vector graphics. Every element and every attribute in SVG files can be animated. It can be used to create an image either by specifying all the lines and shapes necessary, by modifying already existing raster images, or by a combination of both. The image an it's components can also be transformed, composited together, or filtered t change their appearance.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pros-using-svg"&gt;
  &lt;/a&gt;
  Pros using SVG.
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Scalability: Vector images are resolution-independent and can scale to any dimension without losing quality.&lt;/li&gt;
&lt;li&gt;Compact file-size: Pixel-based images are saved at a large size from the start because you can only retain the quality when you make the image smaller, but not when you make it larger. This can impact a site’s download speed. Since SVGs are scalable, they can be saved at a minimal file size.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cons-using-svg"&gt;
  &lt;/a&gt;
  Cons using SVG.
&lt;/h1&gt;

&lt;p&gt;The file size is growing very fast, if the object consists of a large number of small elements. It's &lt;strong&gt;&lt;em&gt;used a lot when implementing simple icon, logo or diagrams&lt;/em&gt;&lt;/strong&gt; but not for complicated image.&lt;/p&gt;

&lt;p&gt;You can convert png file to SVG file &lt;a href="https://convertio.co/kr/png-svg/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-load-use-svg-in-html"&gt;
  &lt;/a&gt;
  How to load / use SVG in HTML
&lt;/h1&gt;

&lt;p&gt;1.Use &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"puppy.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Use css background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.cont-svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(puppy.svg)&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Use the SVG code in html. &lt;br&gt;
&lt;strong&gt;This is what SVG look like.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
 &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"219.000000pt"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"230.000000pt"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 219.000000 230.000000"&lt;/span&gt;
 &lt;span class="na"&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class="s"&gt;"xMidYMid meet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"translate(0.000000,230.000000) scale(0.100000,-0.100000)"&lt;/span&gt;
&lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M890 2175 c-210 -47 -389 -145 -533 -291 -408 -413 -404 -1067 9
-1478 126 -125 288 -217 472 -269 66 -18 103 -21 262 -21 173 0 191 2 274 28
300 91 525 280 656 551 138 284 142 609 9 893 -130 280 -362 478 -664 568 -78
23 -111 27 -255 30 -118 3 -183 -1 -230 -11z m-63 -177 c17 -17 41 -55 52 -87
12 -31 30 -66 40 -78 27 -33 117 -46 214 -32 43 6 96 9 117 6 47 -6 57 1 156
103 71 74 101 89 139 72 45 -21 78 -190 56 -291 -10 -49 -9 -57 23 -135 25
-59 37 -107 42 -162 3 -44 15 -104 26 -134 23 -65 50 -163 77 -275 26 -105 47
-511 28 -533 -25 -32 -160 -133 -222 -168 -87 -48 -232 -99 -328 -114 -102
-17 -299 -8 -392 18 -159 43 -314 127 -423 228 l-54 49 21 49 c19 44 28 94 35
211 1 22 8 60 15 84 11 40 11 48 -13 100 -35 79 -45 132 -46 237 0 63 6 112
19 155 11 35 29 106 41 157 15 61 32 108 53 139 36 53 88 93 123 93 33 0 82
46 94 88 6 20 13 80 17 132 9 139 21 152 90 88z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1380 1776 c0 -21 -6 -36 -15 -40 -8 -3 -15 -12 -15 -21 0 -8 7 -15
15 -15 11 0 15 -11 15 -40 l0 -40 43 1 c70 2 91 11 111 53 16 32 17 44 7 77
-14 48 -34 59 -105 59 l-56 0 0 -34z m94 -6 c22 -8 26 -16 26 -48 0 -45 -14
-62 -52 -62 -21 0 -28 5 -28 19 0 10 9 21 20 24 11 3 20 10 20 17 0 7 -9 14
-20 17 -23 6 -28 43 -6 43 8 0 26 -4 40 -10z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M646 1524 c-33 -32 -32 -96 1 -108 21 -8 77 25 81 48 2 10 -2 23 -10
28 -10 8 -10 11 0 15 10 4 10 8 1 19 -15 19 -54 18 -73 -2z m39 -13 c3 -5 0
-13 -5 -16 -6 -4 -16 -19 -22 -33 l-10 -27 -11 23 c-8 17 -6 26 8 42 20 22 31
25 40 11z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1001 1435 c-48 -55 -40 -86 25 -98 46 -9 99 9 128 44 30 36 28 42
-24 69 -59 30 -92 26 -129 -15z m89 15 c0 -5 -11 -17 -25 -26 -30 -20 -31 -28
-6 -53 16 -16 17 -20 5 -25 -8 -3 -25 -1 -39 4 -29 11 -33 44 -10 77 13 19 24
24 68 32 4 0 7 -3 7 -9z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M580 1299 c-33 -13 -40 -26 -40 -74 0 -35 6 -47 39 -79 l40 -39 61
53 c33 29 65 60 70 70 13 25 -7 47 -59 65 -49 17 -75 18 -111 4z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M561 1061 c-12 -8 -10 -11 10 -15 255 -59 294 -64 352 -46 58 17 39
22 -40 10 -67 -11 -73 -10 -144 19 -85 33 -157 46 -178 32z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this inline in HTML.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optimising-svg"&gt;
  &lt;/a&gt;
  Optimising svg
&lt;/h1&gt;

&lt;p&gt;By compressing the code, you can make the file smaller. &lt;a href="https://jakearchibald.github.io/svgomg/"&gt;SVG Compressor&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#playing-with-svg"&gt;
  &lt;/a&gt;
  Playing with SVG
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1OxOpaas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxz7frrqg6r7y28mo0bf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OxOpaas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxz7frrqg6r7y28mo0bf.gif" alt="Image description" width="404" height="428"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ko"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Work+Sans:wght@800&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nc"&gt;.eye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;moveEye&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;animation-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;moveEye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.99&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;change-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff2d2d&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dd8500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffcd07&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;textMove&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.89&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;change-background&lt;/span&gt; &lt;span class="m"&gt;3s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.nose&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.blush-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;26px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;139px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.blush-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;26deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;129px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.d&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff5d00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.text2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;textMove&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;animation-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;214px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Work Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff2d2d&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.text2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;210px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;44px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Work Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"219.000000pt"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"230.000000pt"&lt;/span&gt;
        &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 219.000000 230.000000"&lt;/span&gt; &lt;span class="na"&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class="s"&gt;"xMidYMid meet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"translate(0.000000,230.000000) scale(0.100000,-0.100000)"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;
            &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M890 2175 c-210 -47 -389 -145 -533 -291 -408 -413 -404 -1067 9
-1478 126 -125 288 -217 472 -269 66 -18 103 -21 262 -21 173 0 191 2 274 28
300 91 525 280 656 551 138 284 142 609 9 893 -130 280 -362 478 -664 568 -78
23 -111 27 -255 30 -118 3 -183 -1 -230 -11z m-63 -177 c17 -17 41 -55 52 -87
12 -31 30 -66 40 -78 27 -33 117 -46 214 -32 43 6 96 9 117 6 47 -6 57 1 156
103 71 74 101 89 139 72 45 -21 78 -190 56 -291 -10 -49 -9 -57 23 -135 25
-59 37 -107 42 -162 3 -44 15 -104 26 -134 23 -65 50 -163 77 -275 26 -105 47
-511 28 -533 -25 -32 -160 -133 -222 -168 -87 -48 -232 -99 -328 -114 -102
-17 -299 -8 -392 18 -159 43 -314 127 -423 228 l-54 49 21 49 c19 44 28 94 35
211 1 22 8 60 15 84 11 40 11 48 -13 100 -35 79 -45 132 -46 237 0 63 6 112
19 155 11 35 29 106 41 157 15 61 32 108 53 139 36 53 88 93 123 93 33 0 82
46 94 88 6 20 13 80 17 132 9 139 21 152 90 88z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1380 1776 c0 -21 -6 -36 -15 -40 -8 -3 -15 -12 -15 -21 0 -8 7 -15
15 -15 11 0 15 -11 15 -40 l0 -40 43 1 c70 2 91 11 111 53 16 32 17 44 7 77
-14 48 -34 59 -105 59 l-56 0 0 -34z m94 -6 c22 -8 26 -16 26 -48 0 -45 -14
-62 -52 -62 -21 0 -28 5 -28 19 0 10 9 21 20 24 11 3 20 10 20 17 0 7 -9 14
-20 17 -23 6 -28 43 -6 43 8 0 26 -4 40 -10z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eye"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M646 1524 c-33 -32 -32 -96 1 -108 21 -8 77 25 81 48 2 10 -2 23 -10
28 -10 8 -10 11 0 15 10 4 10 8 1 19 -15 19 -54 18 -73 -2z m39 -13 c3 -5 0
-13 -5 -16 -6 -4 -16 -19 -22 -33 l-10 -27 -11 23 c-8 17 -6 26 8 42 20 22 31
25 40 11z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eye"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1001 1435 c-48 -55 -40 -86 25 -98 46 -9 99 9 128 44 30 36 28 42
-24 69 -59 30 -92 26 -129 -15z m89 15 c0 -5 -11 -17 -25 -26 -30 -20 -31 -28
-6 -53 16 -16 17 -20 5 -25 -8 -3 -25 -1 -39 4 -29 11 -33 44 -10 77 13 19 24
24 68 32 4 0 7 -3 7 -9z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nose"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M580 1299 c-33 -13 -40 -26 -40 -74 0 -35 6 -47 39 -79 l40 -39 61
53 c33 29 65 60 70 70 13 25 -7 47 -59 65 -49 17 -75 18 -111 4z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blush-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blush-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M561 1061 c-12 -8 -10 -11 10 -15 255 -59 294 -64 352 -46 58 17 39
22 -40 10 -67 -11 -73 -10 -144 19 -85 33 -157 46 -178 32z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;TO THE MOON&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;TO THE MOON&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>svg</category>
      <category>scalablevectorgraphics</category>
    </item>
    <item>
      <title>Error recording - How to record errors in your application to debug later</title>
      <author>Spyros Argalias</author>
      <pubDate>Tue, 09 Nov 2021 13:48:53 +0000</pubDate>
      <link>https://dev.to/sargalias/error-recording-how-to-record-errors-in-your-application-to-debug-later-24i9</link>
      <guid>https://dev.to/sargalias/error-recording-how-to-record-errors-in-your-application-to-debug-later-24i9</guid>
      <description>&lt;p&gt;Recording errors is an important part of &lt;a href="https://programmingduck.com/articles/errors"&gt;error handling&lt;/a&gt;. In short, when certain errors occur in programs, you want to know about it. This is particularly important with bugs.&lt;/p&gt;

&lt;p&gt;You need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;know that they occurred&lt;/li&gt;
&lt;li&gt;have useful information about them so you can debug them later&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One way to do this is to use an error monitoring or logging service. Some examples are &lt;a href="https://newrelic.com/"&gt;New Relic&lt;/a&gt; and &lt;a href="https://www.splunk.com/"&gt;Splunk&lt;/a&gt;. These will automatically record any program errors and such.&lt;/p&gt;

&lt;p&gt;In particular, logging is very useful. It records a lot of information about what's happening in your program. This can help a lot with debugging.&lt;/p&gt;

&lt;p&gt;Alternatively, you can manually record information about errors.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JoOw23mbXcs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-manually-record-errors"&gt;
  &lt;/a&gt;
  How to manually record errors
&lt;/h2&gt;

&lt;p&gt;The goal is to be able to view errors later. You can achieve that in any number of ways.&lt;/p&gt;

&lt;p&gt;One way is to manually record errors in a database.&lt;/p&gt;

&lt;p&gt;To do this, you can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;prepare your database for recording errors&lt;/li&gt;
&lt;li&gt;set up some code to record errors to the database&lt;/li&gt;
&lt;li&gt;set up a global error handler to catch errors. (This error handler would call the code from step 2)&lt;/li&gt;
&lt;li&gt;set up an endpoint in the back end so the front end can record errors too. (This endpoint would call the code from step 2)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, you might use a &lt;a href="https://www.mongodb.com/"&gt;MongoDB database&lt;/a&gt; with a collection for errors. Every time an error occurs in your application, add information about it to the collection. You can organise the information in any way you like. For example, you could organise by the type of error or exception, by the error message, or by the last code in the call stack for the error.&lt;/p&gt;

&lt;p&gt;After setting that up, you could set up a global error handler. This error handler would be called on errors that occur in your application. In the handler, record the error in your database.&lt;/p&gt;

&lt;p&gt;Different frameworks and "environments" provide different ways to set up global error handlers. For example, in the Unity game engine, you can use &lt;code&gt;Application.logMessageReceived += Handler;&lt;/code&gt;. On the front end of a website, you can use &lt;code&gt;window.addEventListener('error', handler);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you can set up an endpoint so that the front end can record errors too. Then, the front end can make a network request with information about the error it encountered.&lt;/p&gt;

&lt;p&gt;Here's an example call you could make from the front end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;errorEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;handleError&lt;/code&gt; above is executed any time an error occurs. It creates an object with useful information about the error. Then, it sends a network request to the back end. The back end will then record the information about the error so it can be viewed later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-information-to-record"&gt;
  &lt;/a&gt;
  What information to record
&lt;/h2&gt;

&lt;p&gt;You want as much useful information about the error as possible. This will help you debug it later.&lt;/p&gt;

&lt;p&gt;The article &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions"&gt;.NET best practices on exceptions&lt;/a&gt; has some guidelines for this. Adapted for both error values and exceptions, they are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use the predefined error types in your programming language if they're relevant. Only create custom types if the predefined ones don't apply.&lt;/li&gt;
&lt;li&gt;if you create custom error types:

&lt;ul&gt;
&lt;li&gt;they should usually be subclasses of the main error types (if you use an OOP language)&lt;/li&gt;
&lt;li&gt;they can optionally have custom properties (if they would be useful)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;use grammatically correct error messages. For example 'The file "foo.txt" could not be found.'.&lt;/li&gt;
&lt;li&gt;include a localised string message in every error (if your application is localised)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;So that's it for this article. I hope that you found it useful.&lt;/p&gt;

&lt;p&gt;As always, if any points were missed, or if you disagree with anything, or have any comments or feedback then please leave a comment below.&lt;/p&gt;

&lt;p&gt;For the next steps, I recommend looking at the other articles in the &lt;a href="https://programmingduck.com/articles/errors"&gt;error handling series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alright, thanks and see you next time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Recording photo - Photo by Krists Luhaers on Unsplash&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Twitter Polling </title>
      <author>Prakhar Doneria</author>
      <pubDate>Tue, 09 Nov 2021 13:21:52 +0000</pubDate>
      <link>https://dev.to/prakhardoneria/twitter-polling-3ae9</link>
      <guid>https://dev.to/prakhardoneria/twitter-polling-3ae9</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/PrakharDoneria/embed/oNeyzBx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>twitter</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create your own React State Management</title>
      <author>Nirmal Thomas Mathew</author>
      <pubDate>Tue, 09 Nov 2021 13:20:15 +0000</pubDate>
      <link>https://dev.to/nirmal15mathew/create-your-own-react-state-management-26k7</link>
      <guid>https://dev.to/nirmal15mathew/create-your-own-react-state-management-26k7</guid>
      <description>&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#level-intermediate-scroll-to-bottom-for-full-code"&gt;
  &lt;/a&gt;
  Level: Intermediate⚛️; Scroll to bottom for full code⬇️
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pen-and-paper"&gt;
  &lt;/a&gt;
  Pen and Paper
&lt;/h3&gt;

&lt;p&gt;The implementation is simple, I think many blogs have been written about the same method; I think this needed to be written. We will be using react context for universal state management. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a wrapper component&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;React.createContext&lt;/code&gt; to create state context&lt;/li&gt;
&lt;li&gt;create new app state using &lt;code&gt;useReducer()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;create a method in reducer function to add / update state&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Create wrapper&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;

    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating context&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating state in wrapper&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// store context&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// creating state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implementing reducer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to be noted is that, the payload given must be an object containing app data&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StateManager&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./StateManager.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StateManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComp&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StateManager&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComp&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// work with app state&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;How to use useReducer ? &lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org/docs/context.html#gatsby-focus-wrapper"&gt;How to use react context ? &lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#whole-code"&gt;
  &lt;/a&gt;
  Whole Code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// StateManager.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// reducer function &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// store context&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StateManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// creating state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>Building a list group component with Tailwind CSS</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Tue, 09 Nov 2021 13:17:18 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-list-group-component-with-tailwind-css-3kjf</link>
      <guid>https://dev.to/themesberg/building-a-list-group-component-with-tailwind-css-3kjf</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS for quite a while now and although I love working with the utility classes directly in my HTML, one disadvantage that I've encountered is the lack of components such as buttons, dropdowns, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Hqn3YKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h4vz1hxl9fo7m4j3ls9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Hqn3YKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h4vz1hxl9fo7m4j3ls9.png" alt="Tailwind CSS list group" width="880" height="719"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why I have started a series of articles here on the DEV community showing you how you can build some of the most commonly used web components using the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-tailwind-css-toggleswitch-component-4pc3"&gt;Tailwind CSS toggle component&lt;/a&gt; and today I'd like to teach you how to build a list group element.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-list-group"&gt;
  &lt;/a&gt;
  Tailwind CSS list group
&lt;/h2&gt;

&lt;p&gt;As always, the first step is to build up the HTML semantic code. We should build a &lt;code&gt;ul&lt;/code&gt; element with list items inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Profile&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Settings&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Messages&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Download&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty basic, but it's a good starting point. Let's style the main &lt;code&gt;ul&lt;/code&gt; element now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul class="bg-white rounded-lg border border-gray-200 w-48 text-gray-900 text-sm font-medium"&amp;gt;
    &amp;lt;li&amp;gt;Profile&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Settings&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Messages&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Download&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking a little better. Now let's add some styles to each &lt;code&gt;li&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;ul class="bg-white rounded-lg border border-gray-200 w-48 text-gray-900 text-sm font-medium"&amp;gt;
    &amp;lt;li class="px-4 py-2 border-b border-gray-200 w-full rounded-t-lg"&amp;gt;Profile&amp;lt;/li&amp;gt;
    &amp;lt;li class="px-4 py-2 border-b border-gray-200 w-full"&amp;gt;Settings&amp;lt;/li&amp;gt;
    &amp;lt;li class="px-4 py-2 border-b border-gray-200 w-full"&amp;gt;Messages&amp;lt;/li&amp;gt;
    &amp;lt;li class="px-4 py-2 w-full rounded-b-lg"&amp;gt;Download&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! The result should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYVNfp4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d2vd1te1x0b67s2oaeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYVNfp4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d2vd1te1x0b67s2oaeh.png" alt="Tailwind CSS list group" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-list-group-with-links"&gt;
  &lt;/a&gt;
  Tailwind CSS list group with links
&lt;/h2&gt;

&lt;p&gt;Perhaps you would like to add links for the items. I recommend you use the following markup to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;div class="bg-white rounded-lg border border-gray-200 w-48 text-gray-900 text-sm font-medium"&amp;gt;
    &amp;lt;a href="#" aria-current="true" class="block px-4 py-2 border-b border-gray-200 w-full rounded-t-lg bg-blue-700 text-white cursor-pointer"&amp;gt;
        Profile
    &amp;lt;/a&amp;gt;
    &amp;lt;a href="#" class="block px-4 py-2 border-b border-gray-200 w-full hover:bg-gray-100 hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-700 focus:text-blue-700 cursor-pointer"&amp;gt;
        Settings
    &amp;lt;/a&amp;gt;
    &amp;lt;a href="#" class="block px-4 py-2 border-b border-gray-200 w-full hover:bg-gray-100 hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-700 focus:text-blue-700 cursor-pointer"&amp;gt;
        Messages
    &amp;lt;/a&amp;gt;
    &amp;lt;a href="#" class="block px-4 py-2 border-b border-gray-200 w-full rounded-b-lg hover:bg-gray-100 hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-700 focus:text-blue-700 cursor-pointer"&amp;gt;
        Download
    &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first element for this component also has an active style.&lt;/p&gt;

&lt;p&gt;I hope that this short tutorial has further helped you with your journey with Tailwind CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/list-group/"&gt;Tailwind CSS list group&lt;/a&gt; element is part of a larger open source component library built with the utility classes from Tailwind CSS called &lt;a href="https://flowbite.com"&gt;Flowbite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WYDWR01S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guqq5pia9elm6ib3w15r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WYDWR01S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guqq5pia9elm6ib3w15r.png" alt="Flowbite - Tailwind CSS components" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can quickly get started by downloading it via NPM and requiring it as a plugin in your existing Tailwind CSS project and be able to start using interactive elements such as dropdowns, modals, datepickers, and more.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
