<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🔥🔥How to make this amazing  text animation.</title>
      <author>Techy Programmers</author>
      <pubDate>Wed, 09 Jun 2021 11:46:38 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-this-amazing-text-animation-2k46</link>
      <guid>https://dev.to/kunaal438/how-to-make-this-amazing-text-animation-2k46</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to make an awesome text animation which you have never seen before. You can see demo below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kunaal_kumar/embed/LYWBgxZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial-"&gt;
  &lt;/a&gt;
  Video Tutorial -
&lt;/h1&gt;

&lt;p&gt;For better explanation. You can watch video tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dlaY3g-5hzg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the video tutorial. Please consider subscribing my youtube channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Inside HTML file under &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/glitched-writer/lib/index.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Dosis:wght@700&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'dosis'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-text-stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GlitchedWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;phrases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;welcome to my channel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;techy programmers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;today we will make this effect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;with glitch writer JS library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;so without wating time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;let's get started&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;phrases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/glitched-writer-js-demo"&gt;Source Code&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rails CD with Docker, Github Actions and VPS</title>
      <author>Marek Stocki</author>
      <pubDate>Wed, 09 Jun 2021 11:46:19 +0000</pubDate>
      <link>https://dev.to/2nit/rails-cd-with-docker-github-actions-and-vps-4hi4</link>
      <guid>https://dev.to/2nit/rails-cd-with-docker-github-actions-and-vps-4hi4</guid>
      <description>&lt;p&gt;I want to show you how to deploy your app to production with minimal cost and make the deployment process fully automated. If you have never done it before, this post will show you how to achieve it step by step. Maybe you have already deployed some apps, then you know that there are always some problems, especially when the server is used by multiple applications. This approach isn’t something innovative, there are many blog posts where you can learn how to dockerize apps, how to use GitHub Actions, and how to deploy code to VPS, but this tutorial brings it all together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;The whole idea is based on Docker's image. So the first thing to do is Docker installation. You can skip that part if you have already installed it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-docker"&gt;
  &lt;/a&gt;
  Install Docker
&lt;/h3&gt;

&lt;p&gt;For more details check &lt;a href="https://docs.docker.com/engine/install/"&gt;the official site&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Update the apt package index and install packages to allow apt to use a repository over HTTPS:
$ sudo apt-get update &amp;amp;&amp;amp; apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

# Add Docker’s official GPG key
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# Update the apt package index and install the latest version of Docker Engine and Containerd
$ sudo apt-get update &amp;amp;&amp;amp; apt-get install docker-ce docker-ce-cli containerd.io

# Verify that Docker Engine is installed correctly by running the hello-world image
$ sudo docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#manage-docker-as-a-nonroot-user"&gt;
  &lt;/a&gt;
  Manage Docker as a non-root user
&lt;/h3&gt;

&lt;p&gt;For more details check &lt;a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user"&gt;official site&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create the docker group
$ sudo groupadd docker

# Add your user to the docker group
$ sudo usermod -aG docker $USER

# Activate the changes to groups (only Linux)
$ newgrp docker

# Verify that you can run docker commands without sudo
$ docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h3&gt;

&lt;p&gt;Docker is creating images using Dockerfile - it's a file with all commands that are executed during the build. I will show you the simplest version that will work. Later I will improve it and shorten the build time. Create a file &lt;code&gt;Dockerfile&lt;/code&gt; in the main app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;#1 This is the official Ruby image (https://hub.docker.com/_/ruby) - a complete Linux system with Ruby installed&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1&lt;/span&gt;

&lt;span class="c"&gt;#2 Install applications needed for building Rails app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt; build-essential libpq-dev nodejs zlib1g-dev liblzma-dev

&lt;span class="c"&gt;#3 The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD&lt;/span&gt;
&lt;span class="c"&gt;# If a directory doesn’t exist, it will be created&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;#4 Copy files from current location to image WORKDIR&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . . &lt;/span&gt;

&lt;span class="c"&gt;#5 Install gems in the image&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;#6 Command that will be executed when you run the image&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; bundle exec rails s -p 3000 -b '0.0.0.0'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s test it and create an image with the name &lt;em&gt;rails_app&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; rails_app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;Sending build context to Docker daemon  86.65MB
Step 1/6 : FROM ruby:3.0.1
3.0.1: Pulling from library/ruby
d960726af2be: Pull complete 
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="c"&gt;# part ommited&lt;/span&gt;
&lt;span class="go"&gt;Status: Downloaded newer image for ruby:3.0.1
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;9cba361e78fe
&lt;span class="go"&gt;Step 2/6 : RUN apt-get update &amp;amp;&amp;amp; apt-get install -y  build-essential libpq-dev nodejs zlib1g-dev liblzma-dev
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Running &lt;span class="k"&gt;in &lt;/span&gt;fa0bce0b6b81
&lt;span class="go"&gt;Get:1 http://deb.debian.org/debian buster InRelease [121 kB]
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="c"&gt;# part ommited&lt;/span&gt;
&lt;span class="go"&gt;Removing intermediate container 40b752bd0ef3
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;7d09aa5c9ced
&lt;span class="go"&gt;Step 3/6 : WORKDIR /app
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Running &lt;span class="k"&gt;in &lt;/span&gt;427dea58acb0
&lt;span class="go"&gt;Removing intermediate container 427dea58acb0
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;8ed87d4b0643
&lt;span class="go"&gt;Step 4/6 : COPY . .
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;0b3a695a0987
&lt;span class="go"&gt;Step 5/6 : RUN bundle install
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Running &lt;span class="k"&gt;in &lt;/span&gt;65a2592eca90
&lt;span class="go"&gt;Fetching gem metadata from https://rubygems.org/............
Fetching rake 13.0.3
Installing rake 13.0.3
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="c"&gt;# part ommited&lt;/span&gt;
&lt;span class="go"&gt;Removing intermediate container 65a2592eca90
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;55d9368c4b98
&lt;span class="go"&gt;Step 6/6 : CMD bundle exec rails s -p 3000 -b '0.0.0.0'
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Running &lt;span class="k"&gt;in &lt;/span&gt;795356f8553e
&lt;span class="go"&gt;Removing intermediate container 795356f8553e
&lt;/span&gt;&lt;span class="gp"&gt; ---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;2466c41ac676
&lt;span class="go"&gt;Successfully built 2466c41ac676
Successfully tagged rails_app:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The image is successfully built, to check available images you can use this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to run the container with the application and check if it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#-p parm allows to map ports with scheme EXPOSED_PORT:IMAGE_INTERNAL_PORT&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 3001:3000 rails_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the browser and go to &lt;a href="http://localhost:3001/"&gt;http://localhost:3001/&lt;/a&gt; - there is a little success, Rails application is working partially:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zM4edxFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2n.pl/system/photos/imgs/000/000/001/original/Screenshot_from_2021-05-26_22-58-35.png%3F1622062736" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zM4edxFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2n.pl/system/photos/imgs/000/000/001/original/Screenshot_from_2021-05-26_22-58-35.png%3F1622062736" alt="image with database error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an error from Rails, so Rails is working. Still, there is a problem with the database. There must be another container with the Postgres application and connection between these containers. To achieve it I will use Docker Compose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h2&gt;

&lt;p&gt;This is a tool that allows to run multiple containers and create a network between them. The configuration file is stored as YAML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-docker-compose"&gt;
  &lt;/a&gt;
  Install Docker Compose
&lt;/h3&gt;

&lt;p&gt;For more details check &lt;a href="https://docs.docker.com/compose/install/"&gt;official site&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download the current stable release of Docker Compose&lt;/span&gt;
&lt;span class="c"&gt;# To install a different version of Compose, substitute 1.29.2 with the version of Compose you want to use.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose

&lt;span class="c"&gt;# Apply executable permissions to the binary&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/docker-compose

&lt;span class="c"&gt;# Test the installation&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compose-config-file"&gt;
  &lt;/a&gt;
  Compose config file
&lt;/h3&gt;

&lt;p&gt;Create a file &lt;code&gt;docker-compose.yaml&lt;/code&gt; in the main app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Official postgres image available in https://hub.docker.com/&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="c1"&gt;# There are many types of volumes, this is a named volume, which will store database in docker directory&lt;/span&gt;
    &lt;span class="c1"&gt;# Named volumes must be listed under the top-level volumes key, as shown at bottom of the file&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db_data:/var/lib/postgresql/data&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails_app&lt;/span&gt;
    &lt;span class="c1"&gt;# Command will replace CMD from Dockerfile&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c "rm -f tmp/pids/server.pid &amp;amp;&amp;amp; bundle exec rails s -p 3000 -b '0.0.0.0'"&lt;/span&gt;
    &lt;span class="c1"&gt;# Path on the host, relative to the Compose file. 'app' is a WORKDIR name from Dockerfile&lt;/span&gt;
    &lt;span class="c1"&gt;# This volume will allow you to run the Rails app with Docker Compose&lt;/span&gt;
    &lt;span class="c1"&gt;# and made live changes without rebuilding the image&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3001:3000"&lt;/span&gt;
    &lt;span class="c1"&gt;# 'database' is Postgres service name from the top of the file - it will allow communication between containers&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;database&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USERNAME=postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_HOST=database&lt;/span&gt;  &lt;span class="c1"&gt;# it's Postgres service name from the top of the file&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to run Rails application and Postgres database with Docker Compose, but before you must update Rails database config file, create a database, and run migrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#config/database.yaml&lt;/span&gt;

&lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgresql&lt;/span&gt;
  &lt;span class="na"&gt;encoding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unicode&lt;/span&gt;
  &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV['POSTGRES_USERNAME'] %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV['POSTGRES_PASSWORD'] %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV['POSTGRES_HOST'] %&amp;gt;&lt;/span&gt;

&lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*default&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails_app_development&lt;/span&gt;

&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*default&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails_app_test&lt;/span&gt;

&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*default&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails_app_production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After updating the database file Docker image needs to be rebuild.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; rails_app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first 3 steps are cached, but changes in the application directory cause gems installation. I will show you later how to avoid it and use cache.&lt;/p&gt;

&lt;p&gt;Now start containers and in another terminal window run a command to create a database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Run command and leave it running&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;span class="c"&gt;# From another terminal window&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run web rake db:create db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the browser and go to &lt;a href="http://localhost:3001/"&gt;http://localhost:3001/&lt;/a&gt; and... You just run the Rails app with Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l986lde4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2n.pl/system/photos/imgs/000/000/002/original/Screenshot_from_2021-05-27_00-08-38.png%3F1622066948" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l986lde4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2n.pl/system/photos/imgs/000/000/002/original/Screenshot_from_2021-05-27_00-08-38.png%3F1622066948" alt="rails app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vps"&gt;
  &lt;/a&gt;
  VPS
&lt;/h2&gt;

&lt;p&gt;The next piece of the puzzle is VPS - a place where you deploy application. You can find many companies that provide cloud services and it's your decision which one you choose. I wanna show you an example based on a server with Ubuntu. Like on your localhost, firstly you install Docker and Docker Compose on VPS. Use steps from the beginning of this post. You will need two additional non-root users: &lt;strong&gt;nginx_proxy&lt;/strong&gt; and &lt;strong&gt;rails_app&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;adduser nginx_proxy
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;adduser rails_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-server"&gt;
  &lt;/a&gt;
  HTTP server
&lt;/h3&gt;

&lt;p&gt;For HTTP server I will use NGINX with this awesome application &lt;a href="https://github.com/nginx-proxy/nginx-proxy"&gt;nginx-proxy&lt;/a&gt; and &lt;a href="https://github.com/nginx-proxy/acme-companion"&gt;acme-companion&lt;/a&gt; for automatic SSL certificate generation. Connect to the server as &lt;strong&gt;nginx_proxy&lt;/strong&gt; user and create two files &lt;code&gt;docker-compose.yaml&lt;/code&gt; and &lt;code&gt;nginx_custom.conf&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;docker-compose.yaml nginx_custom.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will show you the basic configuration of these two applications. For more details check the app's documentation from the links above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yaml&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.9'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx-proxy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginxproxy/nginx-proxy&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-proxy&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;443:443&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;conf:/etc/nginx/conf.d&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;vhost:/etc/nginx/vhost.d&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;html:/usr/share/nginx/html&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dhparam:/etc/nginx/dhparam&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;certs:/etc/nginx/certs:ro&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/var/run/docker.sock:/tmp/docker.sock:ro&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./nginx_custom.conf:/etc/nginx/conf.d/nginx_custom.conf&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;nginx-proxy-network&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;letsencrypt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginxproxy/acme-companion&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-proxy-acme&lt;/span&gt;
    &lt;span class="na"&gt;volumes_from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;nginx-proxy&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;certs:/etc/nginx/certs:rw&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;acme:/etc/acme.sh&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/var/run/docker.sock:/var/run/docker.sock:ro&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;nginx-proxy-network&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;conf&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vhost&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;dhparam&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;certs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;acme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx-proxy-network&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;nginx-proxy-network"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# nginx_custom.conf
# here you can customize NGINX
server_tokens off;
client_max_body_size 100m;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When these two files are created and filled with content, let's run the NGINX server with deamon (&lt;strong&gt;-d&lt;/strong&gt; param)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all you need to do with the HTML server - this app will handle all new Rails applications on your server with few ENV variables that you will add to the Rails app docker-compose files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rails-app-production-docker-compose-file"&gt;
  &lt;/a&gt;
  Rails app - Production Docker Compose file
&lt;/h3&gt;

&lt;p&gt;Let's connect to the server as  &lt;strong&gt;rails_app&lt;/strong&gt; user. You must create two files &lt;code&gt;docker-compose.yaml&lt;/code&gt; and &lt;code&gt;.env&lt;/code&gt; on the server and copy the below content to these files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;docker-compose.yaml .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the production version you must pass more ENV variables, so let's create a file to store these variables separately. Also, you must remember that every file created in the Docker image during the app life cycle will be deleted with the new app version release. So e.g. files from ActiveStorage or logs need to be stored outside of the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# restart docker container when there will be a crash&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db_data:/var/lib/postgresql/data&lt;/span&gt;
    &lt;span class="c1"&gt;# instead of environment let's use the env file&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails_app&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c "rm -f tmp/pids/server.pid &amp;amp;&amp;amp; bundle exec rails s -p 3000 -b '0.0.0.0'"&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./storage:/app/storage&lt;/span&gt; &lt;span class="c1"&gt;# store ActiveStorage files in `storage` directory&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./log:/app/log&lt;/span&gt; &lt;span class="c1"&gt;# store logs in `log` directory&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3001:3000&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;database&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example env file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# VIRTUAL_HOST variable will allow nginx-proxy to redirect HTTP request to your Rails app&lt;/span&gt;
&lt;span class="c1"&gt;# LETSENCRYPT variables are used by acme-companion and it will create SSL certificate for those params&lt;/span&gt;
&lt;span class="no"&gt;VIRTUAL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;your_dns_for_rails_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;com&lt;/span&gt;
&lt;span class="no"&gt;LETSENCRYPT_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;your_dns_for_rails_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;com&lt;/span&gt;
&lt;span class="no"&gt;LETSENCRYPT_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;some_user&lt;/span&gt;&lt;span class="vi"&gt;@your_dns_for_rails_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;com&lt;/span&gt;
&lt;span class="no"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;
&lt;span class="no"&gt;POSTGRES_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;
&lt;span class="no"&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;
&lt;span class="no"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;
&lt;span class="no"&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;some_secret_key&lt;/span&gt;
&lt;span class="no"&gt;RAILS_LOG_TO_STDOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="no"&gt;RAILS_SERVE_STATIC_FILES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rails-app-production-dockerfile"&gt;
  &lt;/a&gt;
  Rails app - Production Dockerfile
&lt;/h3&gt;

&lt;p&gt;The main difference is a need to precompile assets to run the production environment. To do it with Rails and Webpacker, then also Yarn is needed. Let’s update Dockerfile to handle it and fix gems caching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1&lt;/span&gt;
&lt;span class="c"&gt;# add yarn to apt list&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://dl.yarnpkg.com/debian/ stable main"&lt;/span&gt; | &lt;span class="nb"&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/yarn.list
&lt;span class="c"&gt;# add yarn to installed apps&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt; build-essential libpq-dev nodejs zlib1g-dev liblzma-dev yarn
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# copy Gemfile and Gemfile.lock and install gems before copying rest of the application&lt;/span&gt;
&lt;span class="c"&gt;# so the steps will be cached until there won't be any changes in Gemfile&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; Gemfile* ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# precompile assets with temporary secret key base&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"assets_compile"&lt;/span&gt; &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake assets:precompile
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; bundle exec rails s -p 3000 -b '0.0.0.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;When the production Rails app on Docker image is fully working and VPS is ready, it's time to create an image with &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; and store it in &lt;a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"&gt;GitHub Container Registry&lt;/a&gt;. Before I show you the config file, there are few things to do in GitHub. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Container Registry (GHCR) is in an experimental state, so you must enable that feature with this &lt;a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/enabling-improved-container-support-with-the-container-registry"&gt;tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Second thing needed is token, which allow to login to GHCR - &lt;a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;tutorial&lt;/a&gt; (select two scopes: &lt;strong&gt;write:packages&lt;/strong&gt; and &lt;strong&gt;delete:packages&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Create repository secrets. Go to your repository -&amp;gt; Settings -&amp;gt; Secrets and add &lt;em&gt;New repository secret&lt;/em&gt; and create two secrets: &lt;code&gt;CR_PAT&lt;/code&gt; with GHCR token and &lt;code&gt;VPS_PASSWORD&lt;/code&gt; - its password for user &lt;strong&gt;rails_app&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then log in to your server with &lt;strong&gt;rails_app&lt;/strong&gt; user and edit &lt;code&gt;bashrc&lt;/code&gt; file. Add a line at the end of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CR_PAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your GHCR token&amp;gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your project create a file in that path &lt;code&gt;/.github/workflows/deploy.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Run deploy job on every push to the master branch&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to GitHub Container Registry&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u &amp;lt;YOUR GITHUB LOGIN&amp;gt; --password-stdin&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pull image to use as a cache&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker pull ghcr.io/2n-it/2n_website:latest || exit &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Docker image&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker build . --cache-from ghcr.io/&amp;lt;YOUR GITHUB LOGIN&amp;gt;/rails_app:latest --tag ghcr.io/&amp;lt;YOUR GITHUB LOGIN&amp;gt;/rails_app:latest&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push the image to GitHub Container Registry&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker push ghcr.io/&amp;lt;YOUR GITHUB LOGIN&amp;gt;/rails_app:latest&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;VPS - pull image and run app containters&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appleboy/ssh-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;your-server-ip&amp;gt;&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rails_app&lt;/span&gt; 
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.VPS_PASSWORD }}&lt;/span&gt;
          &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;echo $CR_PAT | docker login ghcr.io -u marekls --password-stdin&lt;/span&gt;
            &lt;span class="s"&gt;docker-compose pull app&lt;/span&gt;
            &lt;span class="s"&gt;docker-compose up -d --no-deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After first successful deploy, login to your server as &lt;strong&gt;rails_app&lt;/strong&gt; and create database with command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run web rake db:create db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-last-improvement"&gt;
  &lt;/a&gt;
  The last improvement
&lt;/h2&gt;

&lt;p&gt;The final touch to make deployment fully automated is the migration script. Create a file &lt;code&gt;docker-entrypoint.sh&lt;/code&gt; in your project main directory and paste the below content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; tmp/pids/server.pid &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;tmp/pids/server.pid
&lt;span class="k"&gt;fi

&lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails db:migrate 2&amp;gt;/dev/null
&lt;span class="nb"&gt;exec &lt;/span&gt;bundle &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then few changes are needed in &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://dl.yarnpkg.com/debian/ stable main"&lt;/span&gt; | &lt;span class="nb"&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/yarn.list
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt; build-essential libpq-dev nodejs zlib1g-dev liblzma-dev yarn
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; Gemfile* ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"assets_compile"&lt;/span&gt; &lt;span class="nv"&gt;RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake assets:precompile
&lt;span class="c"&gt;# Add entrypoint script to handle migrations&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; [ "./docker-entrypoint.sh" ]&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["rails", "server", "-b", "0.0.0.0"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just created a fully working continuous deployment. You don't have to worry about errors on your local machine or some problems with the internet connection anymore. Just write your code and simply push commit and the rest is magic. Below some useful commands that may help you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# view logs from Postgres&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose logs database &lt;span class="nt"&gt;-f&lt;/span&gt;

&lt;span class="c"&gt;# view logs from Rails&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose logs app &lt;span class="nt"&gt;-f&lt;/span&gt;

&lt;span class="c"&gt;# run Rails console inside Docker container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run app rails c

&lt;span class="c"&gt;# list available images&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker images

&lt;span class="c"&gt;# list running containers&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps

&lt;span class="c"&gt;# stop containers&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose down

&lt;span class="c"&gt;# remove old images/containers&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker system prune
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>github</category>
      <category>vps</category>
      <category>webdev</category>
    </item>
    <item>
      <title>INSTANTLY PARSE JSON</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Wed, 09 Jun 2021 11:33:38 +0000</pubDate>
      <link>https://dev.to/amritanshu/instantly-parse-json-4pn0</link>
      <guid>https://dev.to/amritanshu/instantly-parse-json-4pn0</guid>
      <description>&lt;p&gt;How To Parse JSON Instantly?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get your JSON&lt;/li&gt;
&lt;li&gt;Copy all of that&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SiHGxjON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj0348z83ge1xpf8onrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SiHGxjON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj0348z83ge1xpf8onrb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now, Go to &lt;a href="https://app.quicktype.io/"&gt;Secret Place&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Myzw4CCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbjostls7wun6oz8l5yt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Myzw4CCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbjostls7wun6oz8l5yt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paste the copied JSON to the black box (&amp;lt;- see left)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_XIOs1iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4267ak7bhuuxjiqbie0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_XIOs1iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4267ak7bhuuxjiqbie0f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From Right side choose your language (see right -&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aURdaqlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqz1o5xv2c28h0wbd7tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aURdaqlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqz1o5xv2c28h0wbd7tj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will generate the file according to the selected language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHn-XtJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw1vnrq2nivg8k6tlma1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHn-XtJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw1vnrq2nivg8k6tlma1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on Copy code and do whatever you want , just don't hack NASA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bu1wXRRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c00l2m5e3wmx5s7ms4s7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bu1wXRRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c00l2m5e3wmx5s7ms4s7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Youtube tutorial
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ME4DBgRWTZo"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>java</category>
    </item>
    <item>
      <title>Give your terminal a makeover</title>
      <author>Rob OLeary</author>
      <pubDate>Wed, 09 Jun 2021 10:48:28 +0000</pubDate>
      <link>https://dev.to/robole/give-your-terminal-a-makeover-55c3</link>
      <guid>https://dev.to/robole/give-your-terminal-a-makeover-55c3</guid>
      <description>&lt;p&gt;I decided to give my laptop a virtual makeover recently. One thing that stuck out was the terminal. &lt;/p&gt;

&lt;p&gt;A terminal is a dark rectangle with text. It's utilitarian. There isn't a wide array of options for personalization. &lt;/p&gt;

&lt;p&gt;The 3 major things you can do is: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;u&gt;Change the colour scheme&lt;/u&gt;: I made my own colour scheme. If you are searching, &lt;a href="https://github.com/mbadolato/iTerm2-Color-Schemes"&gt;this repo&lt;/a&gt; is a great source for colour schemes for many different terminal apps.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Pick a font&lt;/u&gt;: I installed a &lt;a href="https://www.nerdfonts.com/"&gt;nerd font&lt;/a&gt;. Nerd fonts add icons to popular monospace fonts. These icons can be used in your text prompt and are used by some command-line applications to give more of modern UI-feel. &lt;a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip"&gt;JetBrainsMono Nerd Font&lt;/a&gt; is my favourite.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;Modify the prompt text&lt;/u&gt;: I installed &lt;a href="https://starship.rs/"&gt;Starship&lt;/a&gt; to make a custom prompt that works in a few different shells. It's got it's own config with a wide array of options to customize the text in every conceivable way. I use it to add git info, low battery indication, and package and versioning info for some languages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I guess these 3 things are what most people do in some shape or form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8z72JqaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jka4qknxyb9k3xbvmk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8z72JqaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jka4qknxyb9k3xbvmk6.png" alt="custom terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is how my terminal looks! Simple and minimal is my preference.&lt;/p&gt;

&lt;p&gt;Beyond that, you can make tweaks to use colours in more places. You can makes aliases which have the &lt;code&gt;--colors=auto&lt;/code&gt; option included. These are the most common ones:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ls --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'dir --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias vdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'vdir --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias grep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'grep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;fgrep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'fgrep --color=auto'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;egrep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'egrep --color=auto'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can install command-line applications if you want to augment the appearance of some standard applications. You can use &lt;a href="https://github.com/Peltoche/lsd"&gt;&lt;code&gt;lsd&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://the.exa.website/"&gt;&lt;code&gt;exa&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;ls&lt;/code&gt;. You can use &lt;a href="https://github.com/sharkdp/bat"&gt;&lt;code&gt;bat&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;cat&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You can see that &lt;code&gt;lsd&lt;/code&gt; uses a folder icon from the nerd font for folders, and breaks the list into columns. These applications offer some visual tweaks, but vary on the amount of styling you can do. I chose &lt;code&gt;lsd&lt;/code&gt; because it offers a bit more control over appearance than &lt;code&gt;exa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFSyYJPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2rayfhgqqhkrp7c00bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFSyYJPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2rayfhgqqhkrp7c00bm.png" alt="lsd output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall, this feels more personal as it is closer to my taste, but it lacks personality. What can I do to add more personality? &lt;/p&gt;

&lt;p&gt;Some people like to make the terminal slightly transparent and show their desktop wallpaper. I don't! I love photography but I find it distracting! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qlkYm1gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bejuxio7jtp6nj6867ud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qlkYm1gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bejuxio7jtp6nj6867ud.png" alt="transparent terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I noticed that some people use &lt;a href="https://github.com/dylanaraps/neofetch"&gt;neofetch&lt;/a&gt; to flash their specs when they open a terminal. It's kind of badge of honour for some Linux enthusiasts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lASyK8hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmyi15llp9j313gwowau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lASyK8hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmyi15llp9j313gwowau.png" alt="neofetch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing specs as kind of a greeting when I open a terminal is not my thing. But the ASCII art for the logo got me thinking. Some of the logos included in neofetch are quite stylish and colourful. And there is a palette to play with (them colorful boxes in the bottom right).&lt;/p&gt;

&lt;p&gt;Could I create something like the logo but with a more polished appearance? Why do people say ASCII art? Don't we have unicode almost everywhere now? So, shouldn't there be more symbols to choose from now to make "better" text art?&lt;/p&gt;

&lt;p&gt;The net result of my experimentation is &lt;strong&gt;&lt;a href="https://github.com/robole/fetching"&gt;fetching&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EEesSBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v950l80w5wyml37k3q2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EEesSBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v950l80w5wyml37k3q2.png" alt="fetching logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use it to fetch random unicode art. I wanted it to be a bit playful. I want to remind myself that this computer stuff is fun, and to enjoy myself while I'm doing it! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQRKPw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5go4hffbjvwedjeknih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqQRKPw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5go4hffbjvwedjeknih.png" alt="fetching mario example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The art is &lt;strong&gt;colored based on your terminal color scheme&lt;/strong&gt;. Here are some examples side-by-side using different themes: the top-left theme is &lt;a href="https://draculatheme.com/"&gt;Dracula&lt;/a&gt;, the top-right is &lt;a href="https://ethanschoonover.com/solarized/"&gt;Solarized&lt;/a&gt;, the other two are just me playing around with colors - maybe I'm the first one to make an ultra high contrast Mario! 🤣I think the output has a different personality depending on your color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--us5mwet3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z27aji2yq59y211ha7wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--us5mwet3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z27aji2yq59y211ha7wo.png" alt="mario theme examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I noticed that neofetch squashes the output if your terminal window is a bit narrow. I was able to make my scripts &lt;strong&gt;responsive to the terminal window&lt;/strong&gt;. ✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBlqJepA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f10rn5z7kl5uzuwnl4oz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBlqJepA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f10rn5z7kl5uzuwnl4oz.png" alt="garbled output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The included image scripts were mostly inspired by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;abstract art, particularly the &lt;a href="https://en.wikipedia.org/wiki/De_Stijl"&gt;De Stijl movement&lt;/a&gt; with its simplified form and limited palette&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pBWWzYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26nsxuwljegu1kr4tm98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pBWWzYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26nsxuwljegu1kr4tm98.png" alt="mondrian"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;computer games, particularly from the 1980's and 1990's&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kH3JlAqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udwrhwckuvbqz4va6miq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kH3JlAqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udwrhwckuvbqz4va6miq.png" alt="space invaders"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;street art&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNO3IcRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0m1byi21xljdp1xuaxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNO3IcRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0m1byi21xljdp1xuaxb.png" alt="obey"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;star wars&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_0i6jLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aoyg9rsebj1dm7rwfl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_0i6jLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aoyg9rsebj1dm7rwfl6.png" alt="groku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I add the command &lt;code&gt;fetching -r&lt;/code&gt; to my &lt;code&gt;.zshrc&lt;/code&gt; to show a random image every time I open a terminal.&lt;/p&gt;

&lt;p&gt;You can run it as a slideshow too if you want with &lt;code&gt;fetching -s 2&lt;/code&gt; , which shows a new image every 2 seconds!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZRRSvJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltu14t1m9w3ey3cfl63.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZRRSvJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltu14t1m9w3ey3cfl63.gif" alt="slideshow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I have just scratched the surface. Unicode has approxmiately 143,859 unicode characters. These different forms and shapes have the potential for creating very different things. &lt;/p&gt;

&lt;p&gt;I mostly used the &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;Block Elements character set&lt;/a&gt; (as below). It facilitates creating blocky compositions with a smooth texture.  As I practice and try out more characters, I think the output will be better and more variable.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;█ ▉ ▊ ▋ ▌ ▍ ▎ ▏▐ ▕ ▇ ▆ ▅ ▄ ▃ ▂ ▁  ■ ▄ ▀  ▬ ▓ ▒ ░ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check out the repo for more in-depth info. You need to have the Bash shell on your system installed to use it. There is an installation script to make it quick and easy to try it out. So, try it out!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/robole"&gt;
        robole
      &lt;/a&gt; / &lt;a href="https://github.com/robole/fetching"&gt;
        fetching
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of *fetching* unicode art for the terminal.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
  &lt;br&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/title/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Cn6v18---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/title/logo.png" width="301" alt="Fetching"&gt;&lt;/a&gt;
  &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A collection of &lt;i&gt;fetching&lt;/i&gt; unicode art for the terminal.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to be in a state of play to design. If you're not in a state of play, you can't make anything.&lt;/p&gt;
&lt;p&gt;- Paula Scher&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The goal is to add a touch of beauty to your terminal, and trigger a sense of play.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/mario-mytheme.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2ley_Et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/mario-mytheme.png" alt="mario example"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The art is &lt;strong&gt;colored according to your terminal color scheme&lt;/strong&gt;. Here are some examples side-by-side using different themes: uglythe top-left theme is &lt;a href="https://draculatheme.com/" rel="nofollow"&gt;Dracula&lt;/a&gt;,the top-right is &lt;a href="https://ethanschoonover.com/solarized/" rel="nofollow"&gt;Solarized&lt;/a&gt;, the other two are just me playing around with colors! The output can have a different personality depending on your color scheme.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/mario-colors.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zgs_RYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/mario-colors.png" alt="mario colored"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The included scripts are &lt;strong&gt;responsive to the terminal window&lt;/strong&gt;. This prevents distorted output in the random and slideshow modes. 🕶️&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/garbled.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyHKRno_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/garbled.png" alt="garbled output"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The included scripts are inspired by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;abstract art, particularly the &lt;a href="https://en.wikipedia.org/wiki/De_Stijl" rel="nofollow"&gt;De Stijl movement&lt;/a&gt; with its simplified forms and limited palette&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/robole/fetching/main/img/mondrian.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMMuxBxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/robole/fetching/main/img/mondrian.png" alt="mondrian"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;computer games, particularly from the…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/robole/fetching"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is info on making your own images in there. I outline my "process". I don't know how sane or repeatable it is really! I enjoy this type of thing, it may be drudgery to you!&lt;/p&gt;

&lt;p&gt;Let me know what you think. 🙂 &lt;/p&gt;

&lt;p&gt;Got any style tips? &lt;/p&gt;

&lt;p&gt;If you have customized your terminal, share a screenshot as a comment!📸&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You can subscribe to my &lt;a href="https://roboleary.net/feed.xml"&gt;RSS feed&lt;/a&gt; to get my latest posts.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Saving a missing referral</title>
      <author>Caio Jhonny</author>
      <pubDate>Wed, 09 Jun 2021 10:29:26 +0000</pubDate>
      <link>https://dev.to/caiojhonny/saving-a-missing-referral-4n56</link>
      <guid>https://dev.to/caiojhonny/saving-a-missing-referral-4n56</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;After the &lt;a href="https://gdpr.eu/"&gt;GDPR&lt;/a&gt;, we can no longer enable cookies without user consent. This means that we can no longer save the user's session on their first visit, losing your reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VikGWjrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfrd9o8racioe8xw1h7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VikGWjrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfrd9o8racioe8xw1h7y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-save-the-referral"&gt;
  &lt;/a&gt;
  How can I save the referral?
&lt;/h3&gt;

&lt;p&gt;We can save the referral using the localStorage property at the first access.&lt;/p&gt;

&lt;p&gt;Before saving, we need to check if there is a referral to be saved and if the referral is different from our document.location.origin to avoid saving your website as a referral (This also prevents cases where the user goes to another page of your website).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;referral&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;referrer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we can retrieve our referral when it's necessary to call our cookie function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get the referral saved on localStorage&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;referral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;referral&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Verify if exists&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;referral&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;referral&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Define your saved referral into document.referrer&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;referrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;get&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;referral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// After that you can call your cookies function, analytics,  facebook pixel, etc...&lt;/span&gt;
&lt;span class="nx"&gt;callCookies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope it's helpful some of you 🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>analytics</category>
      <category>referral</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to make your open source project contributor friendly 🤗</title>
      <author>Hendrik</author>
      <pubDate>Wed, 09 Jun 2021 10:19:35 +0000</pubDate>
      <link>https://dev.to/hendr_ik/how-to-make-your-open-source-project-contributor-friendly-4fp7</link>
      <guid>https://dev.to/hendr_ik/how-to-make-your-open-source-project-contributor-friendly-4fp7</guid>
      <description>&lt;p&gt;There are many reasons that may lead you to the decision to run a project in an open source fashion. You might want to make your application code available to public to increase trust, or make it especially easy to distribute your library to increase usage. Another common motivation is to establish &lt;strong&gt;a healthy community of contributors around your project&lt;/strong&gt;, allowing you to solicit feedback, make your project more diverse and maybe also distribute the burden of maintenance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions-are-not-only-about-writing-code"&gt;
  &lt;/a&gt;
  Contributions are not only about writing code
&lt;/h2&gt;

&lt;p&gt;Before we talk about how to be friendly to contributors, let’s take a quick detour to define what a contribution to an open source project actually is in the first place. Oftentimes, contributing to an open source project seems to be synonym with opening a Pull Request that fixes a bug or adds a feature. To us, it means a lot more than that. Opening an issue about how something does not work for you is a meaningful contribution as well. Proofreading documentation is just as important as writing code. Offering help to localize the project in a different language is a major contribution. Leaving product feedback, both praise and criticism contribute to moving a project forward. &lt;strong&gt;So when we talk about a contributor friendly project, we talk about all of these means of contributing, not only about writing code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-we-try-to-do-in-raw-offenoffen-endraw-"&gt;
  &lt;/a&gt;
  Things we try to do in &lt;code&gt;offen/offen&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.offen.dev/?utm_source=socialmedia&amp;amp;utm_campaign=0185"&gt;Offen&lt;/a&gt; is a fair and lightweight alternative to common web analytics tools. It’s self hosted software and all code is available at the &lt;a href="https://github.com/offen/offen"&gt;offen/offen repository on GitHub&lt;/a&gt;. In this constellation, feedback and participation is especially important for us. In this article we’d like to share &lt;strong&gt;what we do to make our repo friendly and welcoming towards any kind of contribution&lt;/strong&gt; from the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head-first-in-the-readme-indepth-docs-for-later"&gt;
  &lt;/a&gt;
  Head first in the README, in-depth docs for later
&lt;/h3&gt;

&lt;p&gt;Striking the right balance between a brief introduction and an in-depth introduction is tough. If you have an idea and just want to get started, you don’t want to be bothered to read through detailed setup instructions. But if you have everything up and running, you probably would like to understand the how and the why of the project’s setup at some point.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;offen/offen&lt;/code&gt; we are catering both of those needs in different places. For people who just want to get things running as quickly as possible, we have &lt;a href="https://github.com/offen/offen#feedback-and-contributions-welcome"&gt;a short intro in our README&lt;/a&gt;. More in-depth explanations on the development setup and the application architecture have been collected in a dedicated &lt;a href="https://docs.offen.dev/developing-offen/?utm_source=socialmedia&amp;amp;utm_campaign=0185"&gt;documentation site for developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This setup is also interesting because it will force you, the project maintainer, to answer two important questions: &lt;strong&gt;Can you get external contributors to get up and running with your setup in a few paragraphs? Can you also explain the setup and the architecture in-depth to outsiders in a way that it makes sense?&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contribution-guidelines-that-are-helpful-and-friendly"&gt;
  &lt;/a&gt;
  Contribution guidelines that are helpful and friendly
&lt;/h3&gt;

&lt;p&gt;An established and recommended practice is to have a &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file at the root level of your repository that has details about how to contribute to a project. This might seem like a trivial thing to write, but we found in reality it’s a tricky task to come up with something that is both inviting and helpful for potential contributors.&lt;/p&gt;

&lt;p&gt;Often times, documents like this focus on what potential contributors should not do: Don’t open a PR without an issue, don’t open an issue without having searched the existing ones. Those are valid points from a project management perspective and also help the contributors themselves manage the repository. However, &lt;strong&gt;phrasing all of this as a list of "donts" and "only ifs" exclusively will subconsciously deter people from contributing&lt;/strong&gt;. What would you prefer: a duplicate issue from time to time, or no issues at all being raised because users are too scared of doing the wrong thing? Also: do not forget to invite people to making non-code contributions as well.&lt;/p&gt;

&lt;p&gt;Check our &lt;a href="https://github.com/offen/offen/blob/development/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; for an idea of how we approach this. We also have a &lt;a href="https://github.com/offen/offen/blob/development/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; that defines the way we'd like to interact with people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boring-tech-is-accessible"&gt;
  &lt;/a&gt;
  “Boring tech” is accessible
&lt;/h3&gt;

&lt;p&gt;If you want people to contribute code to your project, the choice of the tech you use is a major factor. Trying to make tech choices boring will help contributors to get started quickly, just because it’s already known to work, and also known how to work with.&lt;/p&gt;

&lt;p&gt;In our example, Offen is built as a server side application with a relatively complex frontend running in the browser. On the server we chose Go as a language and the Gin framework. Those might not be most exciting choices in tech, but they are optimized for easy setup, robustness and plenty of good documentation. As a contributor, this means that when I run into issues setting up the project, I will likely find answers online soon instead of having to wrangle some custom framework the maintainers came up with themselves.&lt;/p&gt;

&lt;p&gt;In our client side application we started out using the great, but slightly esoteric Choo framework, but soon migrated to Preact, just because the React ecosystem (Preact is a lightweight "clone" of React) is so ubiquitous and well-understood by a lot of people. We also do not use any fancy language features, but try to keep things simple so that you don't need to learn about brand new syntax constructs before you can contribute code. Think twice before you add something like TypeScript to a project you want to be accessible. Every additional layer - no matter how great or helpful they are for you who already knows how to use them - will make it harder for others to get started.&lt;/p&gt;

&lt;p&gt;This topic also extends to your project's local development setup. &lt;strong&gt;The more extra tools you need the less likely it is someone will try to get started setting up your project on their machine&lt;/strong&gt;. The setup should also work on all major OSes. A lot of people use Windows, some use Linux, many use a Mac, none of them should be left out. For Offen, we decided to use a &lt;code&gt;docker-compose&lt;/code&gt; based setup, which gives us a reproducible cross-OS setup without people having to install anything other than Docker. You can check the &lt;a href="https://github.com/offen/offen/blob/7e5a8b751db8aff0c347f3134fb586d26d60329d/docker-compose.yml"&gt;compose file&lt;/a&gt; in our repository to see how that looks like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#labels-make-issues-discoverable"&gt;
  &lt;/a&gt;
  Labels make issues discoverable
&lt;/h3&gt;

&lt;p&gt;In case you host your project on a platform like GitHub or GitLab, the repository’s issue tracker will likely be one of the most important ways of interacting with contributors. Writing clear and concise issues that do not require much insider knowledge is one thing, but &lt;strong&gt;how do you make these issues discoverable for anyone who wants to contribute to your project&lt;/strong&gt;? A common approach is to use labels for your issues.&lt;/p&gt;

&lt;p&gt;One aspect of labeling issues is conveying information that is specific to your project. What language would you need to be proficient with to work on the issue? Is the issue not related to code, but an ongoing discussion people could participate in?&lt;/p&gt;

&lt;p&gt;The other aspect of labeling is the external ecosystem that has evolved around GitHub issues. For example, sites like &lt;a href="https://up-for-grabs.net/#/"&gt;Up For Grabs&lt;/a&gt; allow anyone to search for issues labeled &lt;code&gt;help-wanted&lt;/code&gt; across all public repositories on GitHub. &lt;a href="https://goodfirstissue.dev/"&gt;Good first issue&lt;/a&gt; lets you find issues labeled &lt;code&gt;good first issue&lt;/code&gt; that are well suited for beginners. Applying such labels will connect you with others that otherwise wouldn’t know about your project in the first place.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://github.com/offen/offen/issues"&gt;issue tracker&lt;/a&gt; of &lt;code&gt;offen/offen&lt;/code&gt; to see how we label our issues here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-means-of-getting-in-touch"&gt;
  &lt;/a&gt;
  Alternative means of getting in touch
&lt;/h3&gt;

&lt;p&gt;We use GitHub for hosting our repository, and while this makes both code and issues publicly visible for anyone, &lt;strong&gt;having a GitHub account should not be a requirement for contributing to the project&lt;/strong&gt;. Whenever we solicit feedback or contributions, we try to make it clear that people can also &lt;a href="//mailto:hioffen@posteo.de"&gt;email us&lt;/a&gt; (bonus points for providing a PGP key for those who prefer to use one), &lt;a href="https://twitter.com/hioffen"&gt;tweet at us&lt;/a&gt; or use &lt;a href="https://fosstodon.org/@offen"&gt;Mastodon&lt;/a&gt; to get in touch. Just because a service like GitHub or GitLab is free, it does not mean anyone can or wants to create an account with it. Having multiple feedback channels lowers the barrier of entry for anyone who wants to contribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-do-to-make-your-project-contributor-friendly"&gt;
  &lt;/a&gt;
  What do you do to make your project contributor friendly?
&lt;/h2&gt;

&lt;p&gt;Do you run an open source project that is geared towards creating a community of contributors? What do you do to make it easy for anyone to make meaningful contributions?&lt;/p&gt;

&lt;p&gt;Let us know what you do, and also do not hesitate to start contributing your ideas and feedback about &lt;a href="https://www.offen.dev/?utm_source=socialmedia&amp;amp;utm_campaign=0185"&gt;Offen&lt;/a&gt;. We’d be happy to have you on board.&lt;/p&gt;

&lt;p&gt;Written by Frederik Ring&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>feedback</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Why so00 DYNAMIC?</title>
      <author>Shakya Peiris</author>
      <pubDate>Wed, 09 Jun 2021 09:35:24 +0000</pubDate>
      <link>https://dev.to/shakyapeiris/why-so-dynamic-181p</link>
      <guid>https://dev.to/shakyapeiris/why-so-dynamic-181p</guid>
      <description>&lt;p&gt;Hello everyone! Hope you are reacting well. So, this is my first post in dev.to and I thought to start with a Next.Js blog. So today let's discuss how to work in dynamic pages using getStaticProps and getStaticPath.&lt;/p&gt;

&lt;p&gt;In Next.Js not like in react, they provide us file based routing and you can see those pages under pages folder. In there you can create new files with .js extension and make sure you have named it with the route you needed. (eg : if you want to have an about page you have to name that page as about.js and for '/' path you must name it as index.js). Also you can define dynamic URLs with as follows and make sure you have defined the parameter inside square brackets.&lt;/p&gt;

&lt;p&gt;eg : [blogId].js&lt;/p&gt;

&lt;p&gt;To access that parameter inside the dynamic URL, we can use useRouter hook which is imported from next/router. Then you can grab the parameter values as follows. But this is not the way we are going to follow today.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to data fetching, if we do data fetching in Next.Js as we do in react components with useEffect, that fetched content do not affect SEO because the page is hydrated from data after it pre-renders and therefor server won't be able to see that fetched data. There for we can use built in functions called as getStaticProps and getServerSideProps to fix that issue. Today I'm going to focus on getStaticProps function which is the most preferred way to do this task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above getStatic Props async function after the data is fetched we have to return that data inside an object with the key props so that page component will be able to access that data via props.&lt;/p&gt;

&lt;p&gt;Also, in the above page it show only data fetched for the first time to the server. There for even if changd the data in our backend API data in the component does not change. Therefor to fix that issue we can put a revalidate time out inside the returned object with revalidate key as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then how can we access the url parameters? That's simple. You can pass an argument to the function called as context. Context is a nested object. From that, you can access url parameters as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the dev server with npm run dev with above setup you will get an array saying about getStaticPath. Now let's see how we can fix that issue.&lt;/p&gt;

&lt;p&gt;So to fix that issue you have to call a built in next.js function called getStaticPath inside your page and return an object with two keys, fallback (boolean) and paths (array) as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPath&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in the above paths array you can define all the possible parameter values so that if user enters a different value than those defined ones, he/she will be redirected to a 404 page. Also, you can set fallback to false when you are in develop server and make sure you have set it true or "blocking" when you deploy your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in [blogId].js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPath&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;blogId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}}})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="cm"&gt;/*blogId is the name of 
    parameter*/&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;blogId&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;
        &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this revalidates in every second&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refer the above code snippet for the complete process.&lt;br&gt;
Github Link for a same sort of project : &lt;a href="https://github.com/shakyapeiris/meetup_web.git"&gt;https://github.com/shakyapeiris/meetup_web.git&lt;/a&gt;&lt;br&gt;
So that's it! Thanks You!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create an efficient Modal component in React using Hooks and Portals</title>
      <author>CodeBucks</author>
      <pubDate>Wed, 09 Jun 2021 09:33:29 +0000</pubDate>
      <link>https://dev.to/codebucks/how-to-create-an-efficient-modal-component-in-react-using-hooks-and-portals-360p</link>
      <guid>https://dev.to/codebucks/how-to-create-an-efficient-modal-component-in-react-using-hooks-and-portals-360p</guid>
      <description>&lt;p&gt;Modal is a common UX element. A modal is a dialog box/popup window that is displayed on top of the current page. You must have used pop-ups and notifications for your website. For some people pop-ups are really annoying😫 if it doesn't behave as it should. It must have good UI/UX.&lt;/p&gt;

&lt;p&gt;In this article we're going to create an efficient &lt;strong&gt;Modal component&lt;/strong&gt;🤩 from scratch without using any library.&lt;/p&gt;

&lt;p&gt;Demo Link🖤: &lt;a href="https://react-reusable-components.vercel.app/"&gt;https://react-reusable-components.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our main goal is to create an efficient modal which,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has a good layout&lt;/li&gt;
&lt;li&gt;Doesn't break ui when we use overflow in parent component&lt;/li&gt;
&lt;li&gt;Can render content Dynamically&lt;/li&gt;
&lt;li&gt;Clean and Elegant animation &lt;/li&gt;
&lt;li&gt;Looks good (good UI)&lt;/li&gt;
&lt;li&gt;Have more control for User (like clicking outside can close modal) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;p&gt;If you prefer video format then you can watch this video 📽👇&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5aG8peJsBVg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Create your react-app using,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app react-modal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial i'm going to use &lt;strong&gt;Sass&lt;/strong&gt; so make sure you have installed node-sass package. To install it do,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install node-sass&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-create-basic-modal-component"&gt;
  &lt;/a&gt;
  Let's create Basic Modal component
&lt;/h3&gt;

&lt;p&gt;open App.js file.&lt;/p&gt;

&lt;p&gt;clean🧹 unnecessary code.&lt;/p&gt;

&lt;p&gt;Now create one button in the App.js file to open and close modal just like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="App"&amp;gt;
      &amp;lt;button&amp;gt;
        Modal
      &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create one state to open and close modal.&lt;/p&gt;

&lt;p&gt;Write below 👇 code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 6:&lt;/strong&gt; Contains modal state which is false initially.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 7:&lt;/strong&gt; A Toggle method to toggle modal state from false to &lt;br&gt;
            true and vice-versa. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11:&lt;/strong&gt; Make sure to connect &lt;code&gt;Toggle()&lt;/code&gt; method to onClick of&lt;br&gt;&lt;br&gt;
             the button.&lt;/p&gt;

&lt;p&gt;Next create &lt;code&gt;Modal.js&lt;/code&gt; file and Write below 👇 code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Modal = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      Modal
    &amp;lt;/div&amp;gt;
  );
};

export default Modal;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now import it in the Modal in &lt;code&gt;App.js&lt;/code&gt; file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 17:&lt;/strong&gt; Here we have imported &lt;code&gt;Modal&lt;/code&gt; component. And passed &lt;br&gt;
             modal state as show in the props.&lt;/p&gt;

&lt;p&gt;Now open &lt;code&gt;Modal.js&lt;/code&gt; and write below code 👇&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Line 3:&lt;/strong&gt; Deconstruct Show from the props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 7:&lt;/strong&gt; We will display modal only when show state is true.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 9 to 30:&lt;/strong&gt; This is the whole &lt;strong&gt;Modal layout&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ModalContainer div contains the modal&lt;/li&gt;
&lt;li&gt;In the modal div, There is one header which contains &lt;em&gt;modal title&lt;/em&gt; and &lt;em&gt;close&lt;/em&gt; Button (You can use any icon for close button).&lt;/li&gt;
&lt;li&gt;Main tag contains &lt;em&gt;content&lt;/em&gt; of the modal.&lt;/li&gt;
&lt;li&gt;Footer has 2 buttons one is &lt;em&gt;submit&lt;/em&gt; and another is &lt;em&gt;cancel&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when you press a button modal will show and on pressing again it will close the modal.&lt;/p&gt;

&lt;p&gt;First Let's add some styling to our modal.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;Modal.scss&lt;/code&gt; file and import it in the &lt;code&gt;Modal.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Copy and paste this styling in the &lt;code&gt;Modal.scss&lt;/code&gt; file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This will give your modal a better look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 21:&lt;/strong&gt; By applying this &lt;code&gt;backdrop-filter&lt;/code&gt; you can make it &lt;br&gt;
             look like frost-glass.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-add-close-event-in-modal"&gt;
  &lt;/a&gt;
  Let's add Close event in modal
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;App.js&lt;/code&gt; file pass toggle method as a props in the modal just like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Modal show={modal} title="My Modal" close={Toggle}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;open &lt;code&gt;Modal.js&lt;/code&gt; file and deconstruct close from the props.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 3:&lt;/strong&gt; Deconstruct Close from the props.&lt;/p&gt;

&lt;p&gt;We have added close method in 3 places:&lt;br&gt;
&lt;strong&gt;Line 16&lt;/strong&gt;: At the close button.&lt;br&gt;
&lt;strong&gt;Line 22&lt;/strong&gt;: At the cancel button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11&lt;/strong&gt;: We have also added close method here too. Why? because whenever user clicks outside it should close the modal. So here, when user clicks on the modalContainer it closes the modal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 13&lt;/strong&gt;: here we have to stop this click events in the modal else it will close it so for that we have used e.stopPropagation().&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;hint:&lt;/strong&gt; You can also add event Listener and add functionality &lt;br&gt;
            in which when user clicks esc key, It closes the &lt;br&gt;
            modal. (It is good for user experience)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#lets-use-portals-to-render-modal-component"&gt;
  &lt;/a&gt;
  Let's use Portals to render Modal component
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What🧐 is &lt;a href="https://reactjs.org/docs/portals.html"&gt;portals&lt;/a&gt; ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Why🤔 should we use portals?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes when we use &lt;code&gt;overflow&lt;/code&gt; or &lt;code&gt;z-index&lt;/code&gt; properties in the parent component then we need child component (like modal or dialogues) to break container visually, and portals can be very handy to do that because it renders children outside of DOM hierarchy. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax✍ for to create portal👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ReactDOM.createPortal&lt;br&gt;
( &lt;br&gt;
element, &lt;br&gt;
DOM node where you want to render this element &lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;So let's implement portals in our Modal component.&lt;/p&gt;

&lt;p&gt;To use portal we have to create one more element in the dom.&lt;br&gt;
Generally our whole App renders in the div with the id root.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt; file.&lt;br&gt;
and above the root div create one more div with the id &lt;em&gt;modal&lt;/em&gt;.&lt;br&gt;
Just like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="modal" /&amp;gt;
&amp;lt;div id="root" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;Modal.js&lt;/code&gt; file and edit it just like this,&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 1&lt;/strong&gt;: Import ReactDom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: After return create portal using &lt;code&gt;ReactDom.createPortal&lt;/code&gt;, As it's first argument we have passed whole modal component and for the second argument we have passed the dom node where we want to render it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 34&lt;/strong&gt;: We want to render our component in the div with id modal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-make-modal-content-dynamic"&gt;
  &lt;/a&gt;
  Let's make Modal content Dynamic:
&lt;/h3&gt;

&lt;p&gt;open &lt;code&gt;App.js&lt;/code&gt; file and pass title as a props and content inside the component as shown below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Modal show={modal} title="My Modal" close={Toggle}&amp;gt;
        This is Modal content
&amp;lt;/Modal&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we have passed title as props and modal content as the children.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;Modal.js&lt;/code&gt; and write,&lt;/p&gt;

&lt;p&gt;(Final Modal.js code)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line 5&lt;/strong&gt;: Deconstruct &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt; from the props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 17&lt;/strong&gt;: Insert title in the curly braces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 22&lt;/strong&gt;: Render children using the curly braces.&lt;/p&gt;

&lt;p&gt;Now if you want to add a little animation in the modal you can watch the video or you can go to the git repository and read📚 code.&lt;/p&gt;

&lt;p&gt;If you have any question just ask in the comments😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my youtube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCeYt6blRBKuNrEg_-282fSA"&gt;@CodeBucks&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Plasma Donation Website using MERN stack</title>
      <author>Neha Soni</author>
      <pubDate>Wed, 09 Jun 2021 09:10:13 +0000</pubDate>
      <link>https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5</link>
      <guid>https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5</guid>
      <description>&lt;p&gt;Hello amazing people 👋,&lt;/p&gt;

&lt;p&gt;Welcome to &lt;strong&gt;Plasma Donation&lt;/strong&gt; Website. As we all know, the world is suffering from the COVID-19 crisis. Our government and health care professionals are trying their best to help the patients suffering from COVID-19. Scientists are trying to discover a vaccine to cure people affected with coronavirus. There is a scientific way from which we can help to lower the death ratio or help the COVID 19 affected person. Plasma therapy is an experimental approach to treat COVID-positive patients and help them recover faster. But, in this situation, it is difficult for a patient to find a plasma donor as everybody can’t donate plasma.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-project-goal"&gt;
  &lt;/a&gt;
  Our project goal
&lt;/h2&gt;

&lt;p&gt;The main goal of our project is to make it easier for the COVID-19 patients to get a plasma donor easily as well as donate plasma if they have recovered. The system targets two types of users: the people who want to donate plasma and the people who need plasma. The user can also view the total active cases, nearby vaccine centers, hospitals address. The main objective of developing the website is to make it easier for the COVID-19 patients to get a plasma donor easily and as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-of-the-project"&gt;
  &lt;/a&gt;
  Workflow of the project
&lt;/h2&gt;

&lt;p&gt;The person who wants to donate his/her plasma needs to register in our application providing required information which are name, age, blood group, phone number, and location, etc.&lt;br&gt;
Patients who need plasma can also fill the form to request the plasma. Patients can directly call the donor by taking his/her contact number from the application.&lt;br&gt;
The user can also view the total active cases, recovered cases, vaccine centers in their area, hospital location, and helpline number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uml-diagram"&gt;
  &lt;/a&gt;
  UML diagram
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--etnhm3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622813954455/DyyGeHtSM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--etnhm3AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622813954455/DyyGeHtSM.png" alt="Screenshot (330).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-used"&gt;
  &lt;/a&gt;
  Technology Used
&lt;/h2&gt;

&lt;p&gt;In this project, we have used the following technologies :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;b&gt;Frontend&lt;/b&gt; : HTML, CSS, React.JS&lt;/li&gt;
&lt;li&gt; &lt;b&gt;Backend&lt;/b&gt; : NodeJs, Express.Js&lt;/li&gt;
&lt;li&gt; &lt;b&gt;Database&lt;/b&gt; : MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Speed&lt;/b&gt; : This website is fast and offers great accuracy as compared to manual registered keeping.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Maintenance&lt;/b&gt; : Less maintenance is required&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;User Friendly&lt;/b&gt; : It is very easy to use and understand. It is easily workable and accessible for everyone.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Fast Results&lt;/b&gt; :  It would help you to provide plasma donors easily depending
upon the availability of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Internet&lt;/b&gt; : It would require an internet connection for the working of the 
website.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Auto- Verification&lt;/b&gt; : It cannot automatically verify the genuine users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshots-amp-gif"&gt;
  &lt;/a&gt;
  Screenshots &amp;amp; Gif
&lt;/h2&gt;

&lt;h3&gt; 1.) Home Page&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vM_0iTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814397676/44XLJhPJ4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vM_0iTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814397676/44XLJhPJ4.png" alt="HomePage.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 2.) Nearby Vaccine Centres&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZzU26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814430478/IOGF4WnKe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZzU26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814430478/IOGF4WnKe.png" alt="VaccineCentres.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 3.) Hospitals List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lyxVOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814466628/eDYQSt4IG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lyxVOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814466628/eDYQSt4IG.png" alt="HospitalsList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 4.) Plasma Info&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/d73f39328f32563667a6c5812c0c6d7c5fbe204d9923cc96659ffe22ef85abe4/68747470733a2f2f696d372e657a6769662e636f6d2f746d702f657a6769662d372d3530373333326162666539392e676966" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/d73f39328f32563667a6c5812c0c6d7c5fbe204d9923cc96659ffe22ef85abe4/68747470733a2f2f696d372e657a6769662e636f6d2f746d702f657a6769662d372d3530373333326162666539392e676966" alt="PlasmaInfo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 5.) Donor Form&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZpNH4EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814570484/3Z2QmJ42WT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZpNH4EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814570484/3Z2QmJ42WT.png" alt="DonorForm.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 6.)  Donors List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ5sZTaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814623017/VTHDJiNOM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ5sZTaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814623017/VTHDJiNOM.png" alt="DonorList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 7.) Request Form&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qn8IQQAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814665967/gjGTfr5ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qn8IQQAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814665967/gjGTfr5ua.png" alt="RequestPlasmaForm.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; 8.) Requests List&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YU-VRPdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814711149/VzF_l5WHw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YU-VRPdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622814711149/VzF_l5WHw.png" alt="PlasmaRequestList.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future Work:-
&lt;/h2&gt;

&lt;p&gt;1.) In future, we will try to verify the genuine users.&lt;br&gt;&lt;br&gt;
2.) For now, we have just listed the hospitals in Delhi, but in the future, we will try to add hospitals of each state of India.&lt;/p&gt;

&lt;h3&gt; ✨Team&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href="https://github.com/nehasoni05"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZUFhxoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nehasoni05.png%3Fsize%3D100"&gt;
        Neha Soni
      &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;a href="https://github.com/AbhishekJaswal2001"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgLaYtdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AbhishekJaswal2001.png%3Fsize%3D100"&gt;
        Abhishek Jaswal
      &lt;/a&gt;
    &lt;/td&gt;
     &lt;td&gt;
     &lt;a href="https://github.com/kritikakaura1518"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_An2Fyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kritikakaura1518.png%3Fsize%3D100"&gt;
       Kritika Kaura
    &lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;
     &lt;a href="https://github.com/ridhisood04"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J43KWW6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ridhisood04.png%3Fsize%3D100"&gt;
       Ridhi Sood
    &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;'' YOUR CONTRIBUTION MATTERS ''&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As I am a student so I am not able to add too much functionality to this project. So, if you find any problem, bug (🐞), want to add more features to this website, or want to share any kind of suggestions to improve our work please let us know by creating an  &lt;a href="https://github.com/nehasoni05/Plasma_Donation_Website/issues"&gt;issue here&lt;/a&gt;. I will also try to work more on this project so I will host it somewhere and people find it useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;1.) ReactJS documentation:-  &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt; &lt;br&gt;&lt;br&gt;
2.)  NodeJS documentation:-  &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/"&gt;https://nodejs.org/dist/latest-v14.x/docs/api/&lt;/a&gt; &lt;br&gt;&lt;br&gt;
3.) ExpressJS documentation:- &lt;a href="https://expressjs.com/en/starter/installing.html"&gt;https://expressjs.com/en/starter/installing.html&lt;/a&gt; &lt;br&gt;&lt;br&gt;
4.) MongoDB :-  &lt;a href="https://docs.mongodb.com/manual/tutorial/getting-started/"&gt;https://docs.mongodb.com/manual/tutorial/getting-started/&lt;/a&gt; &lt;br&gt;&lt;br&gt;
5.) Git and Github:-  &lt;a href="https://gist.github.com/hofmannsven/6814451"&gt;https://gist.github.com/hofmannsven/6814451&lt;/a&gt; &lt;br&gt;&lt;br&gt;
6.) W3 School &lt;br&gt;&lt;br&gt;
7.) YouTube &lt;br&gt;&lt;br&gt;
8.) Stack Overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code:-&lt;/strong&gt;  &lt;a href="https://github.com/nehasoni05/Plasma_Donation_Website"&gt;Plasma Donation Website&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Working Project Video:-&lt;/strong&gt; &lt;a href="https://drive.google.com/file/d/1EFCLIF-TqjJvc2h8EJK2Guxsn3IIA-px/view?usp=sharing"&gt;Plasma Donation Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked this project, share it with others! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 🤝🤝
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/introduction-to-javascript-basics"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/playing-with-javascript-objects-1"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://nehasoni.hashnode.dev/7-javascript-data-structures-you-must-know"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/digital-clock-using-javascript"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://nehasoni.hashnode.dev/25-javascript-project-with-source-code-to-build-your-skills"&gt;25+ JavaScript Project With Source Code to Build your Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/git-and-github-all-you-need-to-know"&gt;Git &amp;amp; Github: All you need to know&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://nehasoni.hashnode.dev/introduction-to-reactjs"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Online HTML Editor</title>
      <author>Ibrahim Mohamed</author>
      <pubDate>Wed, 09 Jun 2021 09:07:34 +0000</pubDate>
      <link>https://dev.to/tdimmax/online-html-editor-20p6</link>
      <guid>https://dev.to/tdimmax/online-html-editor-20p6</guid>
      <description>&lt;p&gt;here my online web editor hosted with github pages ;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tdimmax.github.io/Editor"&gt;https://tdimmax.github.io/Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you can edit HTML CSS and Javascript with live preview ,&lt;br&gt;
also you can find web tools in; like color picker, gradient bg generator, base64 encryptor and more check it yourself,&lt;br&gt;
soon i will add a sandbox linux terminal with root Permissions put separated from the editor,and add project management mode to add file or remove, and more coming soon !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;screenshot:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cK_I9kMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmidmy1qdwtgj3thv58m.png" alt="tdim editor"&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I make you an esolang</title>
      <author>JavaCode7</author>
      <pubDate>Wed, 09 Jun 2021 08:47:29 +0000</pubDate>
      <link>https://dev.to/javacode7/i-make-you-an-esolang-43de</link>
      <guid>https://dev.to/javacode7/i-make-you-an-esolang-43de</guid>
      <description>&lt;p&gt;Recently, I have taken a break from writing about esolangs and I have to say, those 4 articles have really been successes 😊. I have now decided to find a balance between writing about languages (which you all seem to like 🤔) and writing about esolangs.&lt;/p&gt;

&lt;p&gt;I will make you an esolang &lt;em&gt;unconditionally&lt;/em&gt; (because I'm nice 😂) but within reason.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I will make it in either Python, JavaScript, TypeScript or Lua (you choose)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It cannot be too complex (I will reply to the comment stating if it is)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow up to 3 days 📅 for the creation of the esolang.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I have made about 3, I will write another article showcasing them and providing the code.&lt;/p&gt;

&lt;p&gt;Comment down below!!&lt;/p&gt;

</description>
      <category>esolang</category>
      <category>esoteric</category>
      <category>watercooler</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Memorable Hex codes</title>
      <author>Siddharth</author>
      <pubDate>Wed, 09 Jun 2021 08:38:20 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/memorable-hex-codes-37fg</link>
      <guid>https://dev.to/siddharthshyniben/memorable-hex-codes-37fg</guid>
      <description>&lt;p&gt;Hopefully this will save you a trip to the color picker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;#b00b00 (deep red)&lt;/strong&gt;        - Good for errors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#de1e7e (pink)&lt;/strong&gt;            - Delete&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#2fa (green)&lt;/strong&gt;              - Looks like tha 2FA was successful&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#ac1d1c (red, obviously)&lt;/strong&gt;  - Warning! Extremely corrosive&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#facade (pink)&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#goodn8 (almost sky blue)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#c0ffee (teal)&lt;/strong&gt;            - Yeah teal coffee&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a lot more &lt;a href="https://nedbatchelder.com/text/hexcolors.html"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
