<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Improve Your SEO Ranking</title>
      <author>Jemima Abu</author>
      <pubDate>Fri, 07 May 2021 08:19:10 +0000</pubDate>
      <link>https://dev.to/jemimaabu/how-to-improve-your-seo-ranking-1d7j</link>
      <guid>https://dev.to/jemimaabu/how-to-improve-your-seo-ranking-1d7j</guid>
      <description>&lt;p&gt;Fun fact: if you Google "&lt;a href="https://www.google.com/search?q=front+end+developer+nigeria"&gt;front end developer Nigeria&lt;/a&gt;", my portfolio website shows up on the first page. Why? SEO.&lt;/p&gt;

&lt;p&gt;Search Engine Optimization (SEO) is how you make sure your website shows up in relevant search results. Ranking refers to a website's position in those search results.&lt;/p&gt;

&lt;p&gt;In this article, we'll be discussing how to optimize your website or brand to help you get a high ranking on Google and other search engines. We'll also discuss how to improve the online presence for yourself or your brand.&lt;/p&gt;

&lt;p&gt;I'd like to preface this by saying that I'm not an SEO expert so I'll just be sharing the tips that worked for me.&lt;/p&gt;

&lt;p&gt;Here's what we'll be covering in this article:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#what-is-seo"&gt;What is SEO?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#importance-of-seo"&gt;Why is SEO important?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-improving-seo"&gt;How do I improve my website's SEO ranking?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-creating-an-online-presence"&gt;How do I improve my personal/my brand's online presence?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-for-seo"&gt;How do I test the SEO of my websites?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Search engine optimization is the process of improving the quality and quantity of website traffic to a website or a web page from search engines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply put, SEO is ensuring that your website receives relevant and continuous traffic through organic search results. Organic search results refer to results that show up in search terms due to relevancy as opposed to paid search results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cD9chlpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620314285788/UJLW7bGn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cD9chlpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620314285788/UJLW7bGn5.png" alt="organic versus paid search results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Studies have shown that people &lt;a href="https://www.oakcitytechnology.com/websites/do-people-actually-click-on-paid-ads-in-google/#:~:text=However%2C%20to%20answer%20this%20directly,organic%20results%20over%20paid%20ads."&gt;tend to click more on organic search results than ads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SEO doesn't just affect your websites; it affects the visibility of anything you post online such as articles, products or videos. &lt;/p&gt;

&lt;p&gt;The world of Search Engine Optimization is so vast and complex that companies have dedicated &lt;a href="https://digitalmarketinginstitute.com/blog/what-does-an-seo-manager-do"&gt;SEO managers&lt;/a&gt;  just to ensure the visibility of their brand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-seo"&gt;
  &lt;/a&gt;
  Importance of SEO
&lt;/h2&gt;

&lt;p&gt;The major importance of SEO is to increase the traffic and visibility of your website and content. High rankings are the best way to generate traffic to your site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzSaj5oQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306812288/1Ien9sL8G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzSaj5oQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306812288/1Ien9sL8G.png" alt="organic traffic.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above image is a screenshot of the traffic for &lt;a href="https://jemimaabu.medium.com/how-to-write-a-cv-in-nigeria-d05d8981dbda"&gt;an article I wrote in 2017&lt;/a&gt;. The article has had over 32,000 views since then and over 50% of that traffic was from organic search results on Google. &lt;/p&gt;

&lt;p&gt;Having a high ranking means that you no longer have to constantly market your products and content and instead you attract your target audience naturally.&lt;/p&gt;

&lt;p&gt;Think of it this way: when was the last time you went to the second page of Google? The higher your search engine ranking, the more visible your site is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-improving-seo"&gt;
  &lt;/a&gt;
  Tips for Improving SEO
&lt;/h2&gt;

&lt;p&gt;There are &lt;a href="https://backlinko.com/google-ranking-factors"&gt;multiple ranking factors&lt;/a&gt; that can affect the SEO of your site but I'll be focusing on the factors I prioritized in order to optimize my website: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Metadata&lt;/li&gt;
&lt;li&gt;Relevant content and links&lt;/li&gt;
&lt;li&gt;Performance and page speed&lt;/li&gt;
&lt;li&gt;Traffic and backlinks&lt;/li&gt;
&lt;li&gt;Domain name and extensions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;Accessibility means creating websites that can be used by everyone. Ideally, you should build your websites to be as accessible as possible. Not only is it considered best practice but it also &lt;a href="https://www.dbswebsite.com/blog/accessibility-seo-a-perfect-fit/"&gt;directly affects your site SEO&lt;/a&gt;. &lt;br&gt;
Accessibility also improves user experience which is another important contributor to SEO.&lt;/p&gt;

&lt;p&gt;Here are some quick tips to focus on to ensure your personal website meets base accessibility needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use the lang attribute in your HTML tag.&lt;/strong&gt; The lang attribute is what allows browsers to translate websites from one language to another so be sure to write your HTML tags appropriately e.g. &lt;code&gt;&amp;lt;html lang="en"&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use alt tags for images that require description.&lt;/strong&gt; Alt tags describe the content of an image for screen readers and should be included as attributes in image tags &lt;code&gt;&amp;lt;img alt="" src="" /&amp;gt;&lt;/code&gt;. Alt tags are also &lt;a href="https://www.bigcommerce.com/ecommerce-answers/what-is-an-alt-tag-and-how-does-it-impact-seo/"&gt;used by search engines&lt;/a&gt; to return relevant image results.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use &lt;a href="https://www.w3schools.com/html/html5_semantic_elements.asp#:~:text=What%20are%20Semantic%20Elements%3F,%3E%20%2D%20Clearly%20defines%20its%20content."&gt;semantic elements&lt;/a&gt; for creating layouts in HTML.&lt;/strong&gt; Semantic elements such as &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt; and &lt;code&gt;header&lt;/code&gt; provide a description of the content to screenreaders.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use heading tags in the appropriate order.&lt;/strong&gt; The rule of thumb is to have only one H1 tag on a page, serving as the title and let the headings follow in sequential order i.e. a &lt;code&gt;h4&lt;/code&gt; tag shouldn't appear before a &lt;code&gt;h2&lt;/code&gt; tag in the same section.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ensure that the colors on your site have adequate contrast.&lt;/strong&gt; Adequate contrast between the colors of the text and the background allows for easily readable content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use descriptive links.&lt;/strong&gt; Links on your website should describe the page they lead to e.g. &lt;code&gt;Read More About Me&lt;/code&gt; rather than generic statements like &lt;code&gt;Click Here&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view my slides on &lt;a href="https://www.jemimaabu.com/talks/web-accessibility.html"&gt;Getting Started With Web Accessibility&lt;/a&gt;, watch my video on &lt;a href="https://www.youtube.com/watch?v=QSXdTuD9Rak"&gt;Understanding Accessibility as A Concept&lt;/a&gt; or check out the &lt;a href="https://romeo.elsevier.com/accessibility_checklist/downloads/developer_designer_checklist.pdf"&gt;Accessibility Checklist by Jay Nemchik&lt;/a&gt;  for more information and resources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata"&gt;
  &lt;/a&gt;
  Metadata
&lt;/h3&gt;

&lt;p&gt;Metadata is what provides information about your website to search engines.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eikCZVaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620319671614/QoI5VUTaZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eikCZVaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620319671614/QoI5VUTaZ.png" alt="metadata of jemimaabu.com"&gt;&lt;/a&gt;&lt;br&gt;
The two major tags for SEO are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Title.&lt;/strong&gt; The &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag is included in HTML and it contains the name of your webpage. It's a good idea to include your main keyword in your title tag.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Jemima Abu: Front End Developer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The title tag should be changed on each page to describe the content of the new page e.g. &lt;code&gt;&amp;lt;title&amp;gt;About Me | Jemima Abu&amp;lt;/title&amp;gt;&lt;/code&gt;. A descriptive title also improves the ranking for articles and videos. Your title should be between 50 to 60 characters to avoid search engines &lt;a href="https://unamo.com/blog/seo/title-tags-best-practices#:~:text=Length,cut%20off%20in%20the%20middle."&gt;truncating or ignoring it&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Description.&lt;/strong&gt; The description tag describes the content of your webpage and it's also placed in the  tag of your HTML page. It should explain the main goal of your webpage and use more keywords related to the message you're trying to pass along.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Jemima Abu is a self-taught 
    Front End Developer and school-taught Systems Engineer 
    from Lagos, Nigeria."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another tag to mention is the &lt;strong&gt;keywords&lt;/strong&gt; tag. It was previously used by search engines to match relevant keywords but most search engines have announced that &lt;a href="https://www.reliablesoft.net/meta-keywords/#relevancy"&gt;they no longer consider the meta keyword tag&lt;/a&gt; in a site's ranking. Using too many keywords can also have a negative impact on your site's SEO as this could be seen as spam by some search engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relevant-content-and-links"&gt;
  &lt;/a&gt;
  Relevant content and links
&lt;/h3&gt;

&lt;p&gt;Providing relevant content on your website increases your website's SEO ranking. Here are some tips on increasing the relevancy of content for articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use action words in your title&lt;/strong&gt; and words related to search terms. An article with a title like "Introduction to Web Accessibility" or "How to Make Your Website Accessible" would be placed higher than an article simply titled "Web Accessibility".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use proper formatting&lt;/strong&gt; by separating sections with titles and emphasizing important content using bold text or italics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Include links to related resources&lt;/strong&gt; in your article. &lt;a href="https://blog.alexa.com/outbound-links-content-marketing/#:~:text=Linking%20to%20high%2Dquality%20external,SEO%20health%20of%20a%20page."&gt;Using outbound links&lt;/a&gt;  can lend to the credibility of your content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid plagiarism.&lt;/strong&gt; If Google detects the same content in two search results, they'll remove whichever they consider least relevant. If you're trying to upload your content to multiple sites, be sure to include a [canonical link](&lt;a href="https://moz.com/learn/seo/canonicalization#:%7E:text=A%20canonical%20tag%20(aka%20%22rel,content%20appearing%20on%20multiple%20URLs.)"&gt;https://moz.com/learn/seo/canonicalization#:~:text=A%20canonical%20tag%20(aka%20%22rel,content%20appearing%20on%20multiple%20URLs.)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Provide a summary&lt;/strong&gt; of your content in list tags. Google tends to place summarized content at the top of search results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70SijFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620328037087/JvnUEnn4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70SijFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620328037087/JvnUEnn4b.png" alt="list-content.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using relevant keywords in the link of your article also helps with ranking. If I write an article titled "How To Make Your Website Accessible", a good link would be &lt;code&gt;myblog/make-your-website-accessible&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-and-page-speed"&gt;
  &lt;/a&gt;
  Performance and Page Speed
&lt;/h3&gt;

&lt;p&gt;Performance and page speed are factors used by Google to determine a website's ranking. If your page loads slowly or has poor performance, it &lt;a href="https://moz.com/learn/seo/page-speed"&gt;directly affects your SEO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are some tips on improving how fast your page loads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reduce images to the maximum rendered size.&lt;/strong&gt; If an image on a page only gets rendered at a maximum width of 450px then the width of the actual image shouldn't be more than 450px. You can also &lt;a href="https://kinsta.com/blog/optimize-images-for-web/"&gt;optimize your images&lt;/a&gt;  to reduce their data size.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid using embeds.&lt;/strong&gt; When using embeds, the time it takes them to load is also calculated with your page speed. I was able to increase my page speed score from 63 to 91 by getting rid of the YouTube embeds on my landing page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce loading animation.&lt;/strong&gt; Google measures how long it takes for content to appear on your page so if you're animating content into the page, the time for animation might affect your score. Try to keep all loading animation under 1s.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Minify your files&lt;/strong&gt; You can reduce the size of your CSS and JavaScript files by minifying them. This means removing all spaces, new lines and other unnecessary characters. You can use the &lt;a href="https://www.minifier.org/"&gt;Minifier tool&lt;/a&gt; to do this manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Page Speed Insights&lt;/a&gt; on your website to get more information on how to improve the performance and decrease loading time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDEvYNrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620368314251/S_FwG6bF38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDEvYNrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620368314251/S_FwG6bF38.png" alt="page-speed.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traffic-and-backlinks"&gt;
  &lt;/a&gt;
  Traffic and backlinks
&lt;/h3&gt;

&lt;p&gt;If your site gets a lot of traffic from other sources, it increases its ranking as it seems more relevant. A good way of generating traffic and improving your SEO is using backlinks.&lt;/p&gt;

&lt;p&gt;Backlinks are the inbound links for your site. They're created when other websites link to your site. Backlinks are basically votes from other sites vouching for the credibility of your site. A backlink from a highly ranked site also boosts your ranking.&lt;/p&gt;

&lt;p&gt;Google uses backlinks as one of their &lt;a href="https://searchengineland.com/now-know-googles-top-three-search-ranking-factors-245882"&gt;top three ranking factors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create backlinks by including a link to your site whenever you appear online. If you publish an article for an online magazine or you appear in an interview, including a link to your website on those sources create more backlinks for your site.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://backlinko.com/hub/seo/backlinks"&gt;read this article&lt;/a&gt; to learn more about backlinks.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;a href="https://www.freecodecamp.org/news/how-and-why-to-get-started-with-google-analytics-153dc35b7812/"&gt;Google Analytics tool&lt;/a&gt; to detect how much traffic your website generates and which sources you acquire traffic from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf_0JU2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620374277843/VWKfy8lOZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf_0JU2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620374277843/VWKfy8lOZ.png" alt="traffic analytics of jemimaabu.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-name-and-extensions"&gt;
  &lt;/a&gt;
  Domain name and extensions
&lt;/h3&gt;

&lt;p&gt;Having a domain name tailored to your website is a good way of increasing traffic to your site as it lends credibility. Your domain name should perfectly represent your website e.g. use your full name for a personal site or the main keyword for a business site. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8wz_aZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620327165313/GWQpXgKCi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8wz_aZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620327165313/GWQpXgKCi.png" alt="domain-ranking.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The domain extension also matters. &lt;code&gt;.com&lt;/code&gt; domains are the most popular domain extension and &lt;a href="https://novanym.com/pages/why-com-is-the-best-domain-extension-for-seo#:~:text=with%20suffixes%20like%20.-,net%20and%20.,they%20have%20become%20more%20popular."&gt;tend to have higher rankings&lt;/a&gt;. For location-targeted rankings, you can use country code domains e.g. &lt;code&gt;.co.uk&lt;/code&gt; or &lt;code&gt;.eu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://shrsl.com/2vhty"&gt;buy a domain name on Namecheap&lt;/a&gt; (this is an affiliate link so I get a commission if you decide to buy with this link).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-creating-an-online-presence"&gt;
  &lt;/a&gt;
  Tips for creating an online presence
&lt;/h2&gt;

&lt;p&gt;Having an online presence refers to having all results related to you or your brand show up when you Google yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T_78NX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620304200851/G4fCWnvPi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_78NX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620304200851/G4fCWnvPi.png" alt="Search results for jemima abu on google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While all the tips for improving SEO can also be applied to increasing your search results, here are some specific actions you can take to ensure a solid online presence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Have a personal website.&lt;/strong&gt; If you're trying to secure your brand's online presence, invest in a &lt;a href="https://shrsl.com/2vhty"&gt;&lt;code&gt;.com&lt;/code&gt;  domain name&lt;/a&gt; and make sure all your other online accounts (Twitter, Instagram, LinkedIn) point to that site. 
You can read my article &lt;a href="https://www.freecodecamp.org/news/beginners-guide-to-creating-a-portfolio-website/"&gt;How To Create a Portfolio Website&lt;/a&gt;  for a step-by-step guide to creating your personal website.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Direct traffic to your site.&lt;/strong&gt; Aside from organic traffic, you can also take advantage of your social media presence to direct traffic to your personal site. If you have a viral tweet or video, be sure to include a link to your site somewhere.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create accounts on larger platforms.&lt;/strong&gt; If you're going to create a personal blog, you might generate more traffic by creating it on a site like Hashnode, Medium or Dev.to than a lesser-known platform.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use the same username across all accounts and URLs.&lt;/strong&gt; If you have a name you want to be known by online, make sure that's the name that you use for every account and in the same format.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use common keywords on all your accounts.&lt;/strong&gt;
I use pretty much the same tagline for all my accounts (&lt;em&gt;"Self-taught Front End Developer, School Taught Systems Engineer"&lt;/em&gt;) so this helps link them together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#testing-for-seo"&gt;
  &lt;/a&gt;
  Testing for SEO
&lt;/h2&gt;

&lt;p&gt;You can test your website's SEO by running the &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse audit tool&lt;/a&gt; in Google Chrome. The audit returns a score based on how optimized your site is for search engines. The passed audits section contains the features of your website that improves SEO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjhSw9oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620332180712/5h46gp8Hj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjhSw9oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620332180712/5h46gp8Hj.png" alt="seo-audit.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use an &lt;a href="https://www.seobility.net/en/seocheck/?px=2&amp;amp;a_aid=6094eba07a470"&gt;online SEO checker&lt;/a&gt; to get a more detailed report on the SEO of your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that's how you can get your website to the first page of search results for relevant keywords.&lt;/p&gt;

&lt;p&gt;If you're interested in more in-depth research on the workings of SEO, you can check out these articles and tutorials:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://searchengineland.com/guide/what-is-seo"&gt;What is Search Engine Optimization?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://optinmonster.com/seo-ranking-factors/"&gt;10 Crucial SEO Ranking Factors You Need To Know&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://click.linksynergy.com/deeplink?id=i1rVYzXnF5I&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fseo"&gt;SEO Specialization&lt;/a&gt;  - University of California, Coursera&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also read my article on &lt;a href="https://blog.jemimaabu.com/how-i-built-my-perfect-score-portfolio-website"&gt;How I Built My Perfect Portfolio Website&lt;/a&gt; for more insight into the process of creating my website.&lt;/p&gt;

&lt;p&gt;If you found this article useful and you'd like to contribute to my content creation, feel free to &lt;a href="https://www.buymeacoffee.com/jemimaabu"&gt;buy me a coffee&lt;/a&gt; 😊&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, leave a message below or reach out on &lt;a href="https://twitter.com/jemimaabu"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>seo</category>
      <category>portfolio</category>
      <category>beginners</category>
      <category>marketing</category>
    </item>
    <item>
      <title>Switching up your Spotify experience with microfrontends and Blazor</title>
      <author>Dante De Ruwe</author>
      <pubDate>Fri, 07 May 2021 08:03:26 +0000</pubDate>
      <link>https://dev.to/dantederuwe/switching-up-your-spotify-experience-with-microfrontends-and-blazor-4k72</link>
      <guid>https://dev.to/dantederuwe/switching-up-your-spotify-experience-with-microfrontends-and-blazor-4k72</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46"&gt;&lt;strong&gt;my previous article&lt;/strong&gt;&lt;/a&gt;, I talked about creating a Netflix clone using &lt;a href="https://piral.io"&gt;Piral&lt;/a&gt;: an open-source framework for creating modular applications. I highly recommend giving that article a quick read first, if you are not yet familiar with microfrontends and/or Piral. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dantederuwe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUiMywyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j9RDcHkJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/521522/c2a86a2a-eeb6-4b72-a173-082a84abb6c9.jpeg" alt="dantederuwe image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My experiences creating a Netflix clone using microfrontends&lt;/h2&gt;
      &lt;h3&gt;Dante De Ruwe ・ Mar 18 ・ 23 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#piral&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Since then, I've been making contributions on GitHub and working closely together with the maintainers of Piral, to provide a helping hand to improve their framework in any way I could. &lt;br&gt;
The main bulk of the improvements was made in their converter for &lt;strong&gt;Blazor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I will share my experiences creating a microfrontend web app with Blazor and Piral. I'll also give a little &lt;em&gt;behind-the-scenes&lt;/em&gt; look at how this was made possible, highlight some of the quirks of using Blazor in a microfrontend solution, and explain how the combination of Piral and Blazor has improved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spiralfy.party"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9C5eq9Fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/website%3Fcolor%3D1ed45f%26style%3Dflat-square%26up_message%3Dspiralfy.party%26url%3Dhttps%253A%252F%252Fspiralfy.party" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#spiralfy-a-modular-web-application"&gt;Spiralfy: a modular web application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-spiralfy-appshell"&gt;The Spiralfy appshell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-player-a-simple-pilet"&gt;The player: a simple pilet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-controls-a-blazor-pilet"&gt;The controls: a Blazor pilet!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#dev-story-making-blazor-work-with-microfrontends"&gt;Dev story: making Blazor work with microfrontends&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#looking-back"&gt;Looking back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-needed-improvement-and-why"&gt;What needed improvement, and why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-has-changed-and-improved"&gt;What has changed and improved?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-thoughts"&gt;Final thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#spiralfy-a-modular-web-application"&gt;
  &lt;/a&gt;
  Spiralfy: a modular web application
&lt;/h1&gt;


&lt;center&gt;
&lt;a href="https://spiralfy.party"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouAnly6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/GM0W1xr.gif"&gt;
&lt;/a&gt;
&lt;/center&gt;




&lt;p&gt;First of all, let's discuss the demo application that I created to showcase the use of Blazor with Piral: Spiralfy. A clever – or some would say &lt;em&gt;cheesy&lt;/em&gt; – play on words between Spotify and Piral, of course. But what does it do?&lt;/p&gt;

&lt;p&gt;Log in with your Spotify premium account, and access a way to switch up your Spotify experience!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;For a long time now, I wanted a way to shuffle play my playlists. I'm not talking about shuffling the songs within one playlist, that's something you can obviously already do. The feature I wanted could be described as "swiping through playlists": Spiralfy picks one playlist at random, shuffle playing its songs, and whenever you feel like you want a different &lt;em&gt;vibe&lt;/em&gt;, you let Spiralfy pick a new playlist to listen to.&lt;/p&gt;

&lt;p&gt;(I got inspired in part by &lt;a href="https://lofi.cafe"&gt;lofi.cafe&lt;/a&gt;, where you can switch through curated lofi playlists like they were radio stations. But I wanted the user to be able to use their own Spotify playlists instead.)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"Talk is cheap. Show me the code" ~ Linus Thorvalds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spiralfy is a modular distributed web application, also known as a microfrontend application. In my previous microfrontend project I decided to make separate GitHub repositories for each and every module; to really demonstrate that these are highly decoupled and autonomous. This time, I chose to bundle all parts into one repository (a &lt;em&gt;monorepo&lt;/em&gt;), just because it would be easier to discover and browse all the code at once. You can find the code on &lt;a href="https://git.io/spiralfy"&gt;git.io/spiralfy&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/spiralfy"&gt;
        spiralfy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A different way of using Spotify! Built using a microfrontend approach with Piral, Blazor and React.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/064ab3fe9191738fac91a81f4f9caec30ad490bb930da4b2619ca47cd62c241c/68747470733a2f2f692e696d6775722e636f6d2f6c6647574450712e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/064ab3fe9191738fac91a81f4f9caec30ad490bb930da4b2619ca47cd62c241c/68747470733a2f2f692e696d6775722e636f6d2f6c6647574450712e706e67" height="80px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;switching up your Spotify experience with microfrontends and Blazor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href="https://app.netlify.com/sites/spiralfy/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fd27c8b72e73baadd367d61031a0aaa91ff3dbced512b28dc8d41bd166a36132/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f32626466363065662d323364342d346665342d393836382d3338313938643261653538322f6465706c6f792d737461747573" alt="Netlify Status"&gt;&lt;/a&gt;
&lt;a href="https://spiralfy.party" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/60921779dfaa149ef7ba5faed8ee131e4b732c5d349a547b242d2a5ee5f49a7c/68747470733a2f2f696d672e736869656c64732e696f2f776562736974653f636f6c6f723d316564343566267374796c653d666c61742d7371756172652675705f6d6573736167653d73706972616c66792e70617274792675726c3d687474707325334125324625324673706972616c66792e7061727479" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;span&gt;Made with&lt;/span&gt;
&lt;span&gt;
  &lt;a href="https://reactjs.org" rel="nofollow"&gt;
    &lt;img id="user-content-react-logo" src="https://camo.githubusercontent.com/e351498609920befd443e505f5f02e45fd630f79aaedc92d75a58c3b05af3511/68747470733a2f2f692e696d6775722e636f6d2f674e7877776e312e706e67" height="10"&gt;
    React
  &lt;/a&gt;
&lt;/span&gt;
&lt;span&gt;,&lt;/span&gt;
&lt;span&gt;
  &lt;a href="https://blazor.net" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/a20213aa89674c1ffe88dc60ac74aa1e791d726eab0e99c07056fa4234cfbdea/68747470733a2f2f646576626c6f67732e6d6963726f736f66742e636f6d2f6173706e65742f77702d636f6e74656e742f75706c6f6164732f73697465732f31362f323031392f30342f4272616e64426c617a6f725f6e6f68616c6f5f31303030782e706e67" height="10"&gt;
    Blazor
  &lt;/a&gt;
&lt;/span&gt;
&lt;span&gt;and&lt;/span&gt;
&lt;span&gt;
  &lt;a href="https://piral.io" rel="nofollow"&gt;
    &lt;img id="user-content-piral-logo" src="https://camo.githubusercontent.com/b5540ddc9078660b30b82bc28c2bd28063391778969021e3763ab39bf96a0f35/68747470733a2f2f706972616c2e696f2f6c6f676f2d73696d706c652e66383636373038342e706e67" height="10"&gt;
    Piral
  &lt;/a&gt;
&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spiralfy.party" rel="nofollow"&gt;&lt;br&gt;
&lt;img src="https://camo.githubusercontent.com/8568a96a97a3e8777b62eee10aa2e0d1db443f04bbd5ccdd11e7f1d32c8e54d1/68747470733a2f2f692e696d6775722e636f6d2f474d30573178722e676966"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;First of all, let's discuss the demo application that I created to showcase the use of Blazor with Piral: Spiralfy. A clever – or some would say &lt;em&gt;cheesy&lt;/em&gt; – play on words between Spotify and Piral, of course. But what does it do?&lt;/p&gt;
&lt;p&gt;Log in with your Spotify premium account, and access a way to switch up your Spotify experience!&lt;/p&gt;
&lt;p&gt;For a long time now, I wanted a way to shuffle play my playlists. I'm not talking about shuffling the songs within one playlist, that's something you can obviously already do. The feature I wanted could be described as "swiping through playlists": Spiralfy picks one playlist at random, shuffle playing its songs, and whenever you feel like you want a different &lt;em&gt;vibe&lt;/em&gt;, you let Spiralfy pick a new playlist to listen to.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/DanteDeRuwe/spiralfy"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;For now, Spiralfy exists in 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Piral instance: &lt;code&gt;spiralfy-appshell&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;player&lt;/code&gt; pilet&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;controls&lt;/code&gt; pilet&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What are these words?&lt;/em&gt;&lt;br&gt;
In case you did not read my previous article: a quick summary here. In the Piral framework, pilets are the individual feature modules, also known as microfrontends. Pilets are usually published to a feed service. The Piral instance (aka app shell) will pull all registered pilets from the feed service, and put them where they need to go as defined by the pilets themselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#the-spiralfy-appshell"&gt;
  &lt;/a&gt;
  The Spiralfy appshell
&lt;/h2&gt;

&lt;p&gt;For the Spiralfy app shell, I decided to go with &lt;code&gt;piral-core&lt;/code&gt; instead of the full &lt;code&gt;piral&lt;/code&gt; framework.&lt;/p&gt;

&lt;p&gt;I actually started with the full version of Piral, but after realizing that I will not be using any dashboards, translation, notifications... and other fancy features (bundled in a collection called &lt;code&gt;piral-ext&lt;/code&gt;) I migrated to &lt;code&gt;piral-core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.piral.io/guidelines/tutorials/22-core-and-base"&gt;Piral docs page on &lt;code&gt;piral-core&lt;/code&gt;&lt;/a&gt; actually describes this scenario pretty well: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quite often the scenario is that somebody starts with &lt;code&gt;piral&lt;/code&gt; but then realized that one or the other plugin should not be included. (...) In any of these cases a migration from &lt;code&gt;piral&lt;/code&gt; to &lt;code&gt;piral-core&lt;/code&gt; makes sense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There were only 2 plugins that I actually wanted: &lt;a href="https://npmjs.com/piral-menu"&gt;&lt;code&gt;piral-menu&lt;/code&gt;&lt;/a&gt;, in case I would want to add items to the navigation menu in an easy way; and &lt;a href="https://npmjs.com/piral-blazor"&gt;&lt;code&gt;piral-blazor&lt;/code&gt;&lt;/a&gt;, for reasons explained below.&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;index.tsx&lt;/code&gt; file looks a little bit like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createBlazorApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral-blazor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Piral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SetErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SetLayout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral-core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMenuApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral-menu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feedUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://feed.piral.cloud/api/v1/pilet/spiralfy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInstance&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;createBlazorApi&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;//this is where the magic is included ✨&lt;/span&gt;
    &lt;span class="nx"&gt;createMenuApi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;requestPilets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;feedUrl&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;piral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Piral&lt;/span&gt; &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SetLayout&lt;/span&gt; &lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SetErrors&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Piral&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;piral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Things to notice about this setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the plugins each come from their respective packages, not from &lt;code&gt;piral&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in the full Piral framework, we would use &lt;code&gt;renderInstance&lt;/code&gt;. Piral-core however, does not come with react bundled. It means we should use the standard &lt;code&gt;render&lt;/code&gt; method from &lt;code&gt;react-dom&lt;/code&gt; to render our Piral instance. (read more &lt;a href="https://docs.piral.io/guidelines/tutorials/22-core-and-base"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-piralblazor-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.com/piral-blazor"&gt;&lt;code&gt;piral-blazor&lt;/code&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Although I called &lt;code&gt;piral-blazor&lt;/code&gt; a plugin, it is actually considered a &lt;strong&gt;converter&lt;/strong&gt;: a package that brings support to use a different UI framework. Piral supports around 15 different UI frameworks, other than React. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you would like more information on how &lt;code&gt;piral-blazor&lt;/code&gt; works, I would suggest you read the second part of this article, too!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I included the Blazor converter in the app shell, because I already knew I was going to add a Blazor pilet. It's also possible to load &lt;code&gt;piral-blazor&lt;/code&gt; from a pilet. This is for example useful if the app shell already existed and you don't want to change it. This is beyond the scope of this article.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-player-a-simple-pilet"&gt;
  &lt;/a&gt;
  The player: a simple pilet
&lt;/h2&gt;

&lt;p&gt;The player pilet is rather barebones. It uses the following npm package, which is neat wrapper around the &lt;a href="https://developer.spotify.com/documentation/web-playback-sdk/"&gt;Spotify web playback SDK&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gilbarbara"&gt;
        gilbarbara
      &lt;/a&gt; / &lt;a href="https://github.com/gilbarbara/react-spotify-web-playback"&gt;
        react-spotify-web-playback
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple player for Spotify's web playback
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows us to have Spotify playback from the browser. If we only used the Spotify API, we could control the playback, but we would have to have an active device it is playing on. This eliminates that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since I wanted to make my own layout for a player in Blazor, I'm setting this one to &lt;code&gt;display:none&lt;/code&gt;. This way it's loaded, but it's also hidden from view. &lt;em&gt;Yes I am aware that this is hacky, stop bullying me! :/&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the pilet is simple, this is however demonstrating a niche problem that is pretty well solved by the fact that Piral (and microfrontends in general) can be very &lt;strong&gt;technology-independent&lt;/strong&gt;. If you want to write an app in Blazor, but a certain feature has a pretty nice Javascript library already: You can most of the time just use it from a different microfrontend. This way, there's way less need in having to struggle with any JS interop.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://i.imgur.com/DpDlQP9.jpg"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--er7k1nvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DpDlQP9l.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h2&gt;
  &lt;a href="#the-controls-a-blazor-pilet"&gt;
  &lt;/a&gt;
  The controls: a Blazor pilet!
&lt;/h2&gt;

&lt;p&gt;Now for the interesting bit: the Blazor pilet! &lt;/p&gt;

&lt;p&gt;To create the Blazor pilet, I followed the documentation for &lt;code&gt;Piral.Blazor&lt;/code&gt;, from their &lt;a href="https://github.com/smapiot/Piral.Blazor#readme"&gt;README&lt;/a&gt; on GitHub. &lt;code&gt;Piral.Blazor&lt;/code&gt; is a set of NuGet packages that will make Piral work from the .NET side. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/smapiot"&gt;
        smapiot
      &lt;/a&gt; / &lt;a href="https://github.com/smapiot/Piral.Blazor"&gt;
        Piral.Blazor
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      All .NET things to make Blazor work seamlessly in microfrontends using Piral. 🧩
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The process boils down to installing a template. If you want to transform an existing Blazor app however, all you have to do is defining the app shell name, installing the &lt;a href="https://nuget.org/packages/Piral.Blazor.Tools"&gt;&lt;code&gt;Piral.Blazor.Tools&lt;/code&gt;&lt;/a&gt; package that will create the right files for your pilet, and installing &lt;a href="https://nuget.org/packages/Piral.Blazor.Utils"&gt;&lt;code&gt;Piral.Blazor.Utils&lt;/code&gt;&lt;/a&gt; to be able to use custom Piral attributes in your code.&lt;/p&gt;

&lt;p&gt;To make the interaction with the Spotify API a lot easier I used the following great NuGet package, which provides fully typed responses and requests.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JohnnyCrazy"&gt;
        JohnnyCrazy
      &lt;/a&gt; / &lt;a href="https://github.com/JohnnyCrazy/SpotifyAPI-NET"&gt;
        SpotifyAPI-NET
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🔉 A Client for the Spotify Web API, written in C#/.NET
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Alright, after this round of &lt;em&gt;NuGet installing&lt;/em&gt;, we can talk about the components. &lt;/p&gt;

&lt;p&gt;A standard &lt;strong&gt;page&lt;/strong&gt; in Blazor, using the &lt;code&gt;@page&lt;/code&gt; directive, will work as expected, and will be automatically registered on the pilet API. This is what I used to register the player on the homepage.&lt;/p&gt;

&lt;p&gt;For an &lt;strong&gt;extension&lt;/strong&gt;, like a login button that should end up in the app shell header, we can use the &lt;code&gt;PiralExtension&lt;/code&gt; attribute, specifying the name of the extension slot you want to render into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@attribute [PiralExtension("header-items")]

@if(_username is null){
    &amp;lt;a href="@_authUri"&amp;gt;Login via Spotify&amp;lt;/a&amp;gt;
}
else
{
    &amp;lt;p&amp;gt;Welcome @_username&amp;lt;/p&amp;gt;
}

@code {
   //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And... I would say... That's almost the entire story. Because Piral.Blazor does some pretty neat stuff under the hood, the developer experience of creating a Blazor pilet is really similar to creating a regular Blazor WASM application!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-run-it"&gt;
  &lt;/a&gt;
  Let's run it!
&lt;/h3&gt;

&lt;p&gt;Because we are using Piral, running the Blazor pilet does include an extra step. We need to use the Piral CLI to do its magic! Again, the &lt;code&gt;Piral.Blazor&lt;/code&gt; docs to the rescue!&lt;/p&gt;

&lt;p&gt;From your Blazor project folder, run your pilet via the Piral CLI 🚀&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx pilet debug &lt;span class="nt"&gt;--base&lt;/span&gt; ../piral~/&amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;(You could also add a &lt;code&gt;--feed&lt;/code&gt; argument, as outlined &lt;a href="https://dev.to/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46#%E2%96%B8-debugging-one-pilet-and-seeing-the-interaction-with-the-other-pilets-too"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In addition to this, if you want to debug your Blazor pilet using for example Visual Studio, you can just run the pilet with IISExpress. (if you want to use Blazor 3.2, there are extra things to consider. You can read about them &lt;a href="https://github.com/smapiot/Piral.Blazor/tree/blazor-3.2#readme"&gt;here&lt;/a&gt;. &lt;em&gt;The cool kids use Blazor 5 anyway&lt;/em&gt; ⌐■_■ )&lt;/p&gt;

&lt;p&gt;This way, you can really use the entire Blazor debugging experience: hitting breakpoints, stepping through your code, and so on.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#dev-story-making-blazor-work-with-microfrontends"&gt;
  &lt;/a&gt;
  Dev story: making Blazor work with microfrontends
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Achievement unlocked: you have reached part 2 of the story.&lt;/em&gt; In this part, I wanted to take the opportunity to tell you about how the combination of Piral and Blazor has matured over the period that I was actively contributing to its codebase; working closely together with the maintainers of Piral. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#looking-back"&gt;
  &lt;/a&gt;
  Looking back
&lt;/h2&gt;

&lt;p&gt;Now, how was Piral with Blazor organized some 2 or 3 months ago?&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://i.imgur.com/kBlzCzA.png"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cAr24LH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kBlzCzA.png"&gt;The Piral Blazor ecosystem in March, 2021

&lt;/a&gt;
&lt;/center&gt;


&lt;p&gt;This does not look too complicated. Let's break it down.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;Piral instance&lt;/strong&gt;, we rely of course on the Piral framework (although, as said before, this could also be piral-core). Next to that, we also need &lt;code&gt;piral-blazor&lt;/code&gt; as a converter. &lt;/p&gt;

&lt;p&gt;Under the hood, &lt;code&gt;piral-blazor&lt;/code&gt; would actually download the &lt;a href="https://www.nuget.org/packages/Piral.Blazor.Core"&gt;&lt;code&gt;Piral.Blazor.Core&lt;/code&gt;&lt;/a&gt; NuGet package, which would contain &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blazor framework files:  dlls, boot files, metadata, etc.&lt;/li&gt;
&lt;li&gt;custom code that would 

&lt;ul&gt;
&lt;li&gt;expose some methods that can be invoked from the JS side to register, load and unload components&lt;/li&gt;
&lt;li&gt;make sure activated components get rendered in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a specific id&lt;/li&gt;
&lt;li&gt;provide a way to register dependencies from the pilets in the DI container &lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;piral-blazor&lt;/code&gt; would include these files in the Piral instance, and could call the exposed methodes using JS interop. This then would allow exposing some functions in the pilet API to allow pilets to activate components from their &lt;code&gt;setup&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;pilets&lt;/strong&gt; would be created using the official template. The template created files that can be divided into 2 categories: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Blazor files&lt;/li&gt;
&lt;li&gt;other files, mainly TS, codegen and JSON files, where the registration with the pilet API was handled (&lt;code&gt;setup&lt;/code&gt; function etc...)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Blazor files can be considered to be the heart of the pilet, while the other files were just there to be the proverbial "glue" that would make everything integrate into the Piral framework.&lt;/p&gt;

&lt;p&gt;Still confused? Below I give an example on how this all worked.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's say you know how to create the most beautiful counter component in Blazor. You want to use this counter as a microfrontend in your React application, and give it a dedicated page. Maybe you would also want to render it as an extension on another part of your web app.&lt;/p&gt;

&lt;p&gt;Of course, you are already using Piral. You would add the &lt;code&gt;piral-blazor&lt;/code&gt; converter to the plugins of your Piral instance.&lt;/p&gt;

&lt;p&gt;Then, you would then set up a pilet using &lt;code&gt;Piral.Blazor.Template&lt;/code&gt;, and add your counter component. To expose this component to be able to get picked up by Piral you would add an &lt;code&gt;ExposePilet&lt;/code&gt; attribute. This would look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@attribute [ExposePilet("my-awesome-counter")]     //!

&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Current count: @count&amp;lt;/p&amp;gt;
    &amp;lt;button @onclick="Increment"&amp;gt;Increment&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

@code {
    int count = 0;

    void Increment()
    {
        count++;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then you would edit the created &lt;code&gt;index.tsx&lt;/code&gt; file to something like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;name-of-piral-instance&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineBlazorReferences&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./My.Dependency.dll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./My.Components.dll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromBlazor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//page&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-slot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromBlazor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//extension&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;These last lines would register the counter component as a page and an extension via the pilet API. &lt;code&gt;piral-blazor&lt;/code&gt; would then via Piral.Blazor.Core lookup the component in the defined references, activate it using JS invokable methods, and integrate it somewhere in the webpage. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-needed-improvement-and-why"&gt;
  &lt;/a&gt;
  What needed improvement, and why?
&lt;/h2&gt;

&lt;p&gt;There are several aspects where the aforementioned ecosystem could improve. Below I outline some of the goals that were set to make this better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user should be able to select the &lt;strong&gt;version of Blazor&lt;/strong&gt; they want, independently of the &lt;code&gt;piral-blazor&lt;/code&gt; version (because the latter is tied to the Piral version).&lt;/li&gt;
&lt;li&gt;There should be a way to &lt;strong&gt;transform an existing Blazor application&lt;/strong&gt; into a Blazor pilet with minimal effort.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Registering Blazor dependencies&lt;/strong&gt; is cumbersome and error-prone: they need to be manually entered, and if they are not in the right order they will not load correctly. Ideally, we would have an automatic solution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Registering pages and extensions&lt;/strong&gt; onto the pilet API should be possible purely from Blazor, without having to do any TypeScript configuration (in the setup function). Additionally, to define pages we should not use a custom attribute, but use the built-in &lt;code&gt;@page&lt;/code&gt; directive from Blazor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Debugging&lt;/strong&gt; a Blazor pilet from for example Visual Studio should be possible: triggering breakpoints, stepping through the code, ...&lt;/li&gt;
&lt;li&gt;Various improvements to single-page navigation, static files, scoped razor styles, ...&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#what-has-changed-and-improved"&gt;
  &lt;/a&gt;
  What has changed and improved?
&lt;/h2&gt;

&lt;p&gt;Let's dive right in by providing an updated diagram of the Piral Blazor ecosystem:&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://i.imgur.com/7KWReas.png"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drQ3W4RZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7KWReas.png"&gt;The Piral Blazor ecosystem in May, 2021

&lt;/a&gt;
&lt;/center&gt;


&lt;p&gt;Let's go over the improvement goals and see how this new architecture fulfills them: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. The user should be able to select the &lt;strong&gt;version of Blazor&lt;/strong&gt; they want, independently of the &lt;code&gt;piral-blazor&lt;/code&gt; version (because the latter is tied to the Piral version).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This first goal was made possible by extracting the responsibility of dealing with Blazor files into a new npm package called &lt;code&gt;blazor&lt;/code&gt;, and including it as a peer dependency of &lt;code&gt;piral-blazor&lt;/code&gt;. This way, the user can install a &lt;code&gt;piral-blazor&lt;/code&gt; version that corresponds to their Piral version, and choose any version of the &lt;code&gt;blazor&lt;/code&gt; package to include any version of Blazor (e.g. &lt;code&gt;blazor@3.2.x&lt;/code&gt; will resolve to the .NET Blazor 3.2 release train).&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;2. There should be a way to &lt;strong&gt;transform an existing Blazor application&lt;/strong&gt; into a Blazor pilet with minimal effort.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this goal, we created &lt;a href="https://nuget.org/packages/Piral.Blazor.Tools"&gt;&lt;code&gt;Piral.Blazor.Tools&lt;/code&gt;&lt;/a&gt;. The workflow for transforming a Blazor project into a pilet now looks something like this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a &lt;code&gt;PiralInstance&lt;/code&gt; property to your &lt;code&gt;.csproj&lt;/code&gt; file with the name of your Piral instance. &lt;/li&gt;
&lt;li&gt;Install the &lt;code&gt;Piral.Blazor.Tools&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Build the project. The first time you do this, this can take some time as it will fully scaffold the pilet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;(stuff omitted for brevity. Read the complete description &lt;a href="https://github.com/smapiot/Piral.Blazor#2-transforming-an-existing-blazor-application-into-a-pilet"&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the reason the template is now grayed out on the diagram: you don't &lt;em&gt;need&lt;/em&gt; it anymore (but it's still nice to get a quick start)!&lt;/p&gt;

&lt;p&gt;Template or not, the tools package will do all the heavy lifting and create all files needed for integration with the final framework. But this time, they will not be mixed in with the Blazor files: the user should not see these at all! We decided to put them all in a &lt;code&gt;piral~&lt;/code&gt; folder. This final tilde makes it so that this folder will by default not be checked in, thanks to the default .NET &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;3. &lt;strong&gt;Registering Blazor dependencies&lt;/strong&gt; is cumbersome and error-prone: they need to be manually entered, and if they are not in the right order they will not load correctly. Ideally, we would have an automatic solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tools package allows us to scaffold the pilet, and also copy over any files that we like to the user's pilet. We used this to fix this problem, by letting the tools copy over a &lt;code&gt;blazor.codegen&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;If you are unfamiliar with codegen files, no worries, I was too! They are basically ways to generate code at build-time. Here you can learn more about one of the loaders that Piral can use (this is one for Parcel):&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FlorianRappl"&gt;
        FlorianRappl
      &lt;/a&gt; / &lt;a href="https://github.com/FlorianRappl/parcel-plugin-codegen"&gt;
        parcel-plugin-codegen
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Parcel plugin for bundle-time code generation. Simple, powerful, and flexible. 📦
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;blazor.codegen&lt;/code&gt; looks for a JSON file called &lt;code&gt;project.assets.json&lt;/code&gt; to build up a dependency graph for the Blazor project, and then traverses/flattens this graph in the right order: dlls without dependencies (=&lt;em&gt;leaves&lt;/em&gt; in the graph) should be loaded first, then their parents, and so on.  &lt;em&gt;(For you algorithm nerds: this is depth-first post-order traversal 🤓 )&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It will then use this ordered list of dependencies to generate the pilet API integration code for us at build-time! (How this works will become clearer together with the next goal)&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;4. &lt;strong&gt;Registering pages and extensions&lt;/strong&gt; onto the pilet API should be possible purely from Blazor, without having to do any TypeScript configuration (in the setup function). Additionally, to define pages we should not use a custom attribute, but use the built-in &lt;code&gt;@page&lt;/code&gt; directive from Blazor. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was an interesting challenge. What has to happen for this to work is that we should have a list of all components that are defined as pages or extensions. And as an additional challenge: we need this list before the components are even loaded, so we cannot simply get them at runtime.&lt;/p&gt;

&lt;p&gt;Luckily, when Blazor gets compiled, this &lt;code&gt;@page&lt;/code&gt; directive just gets converted into a &lt;code&gt;[RouteAttribute]&lt;/code&gt;, and we also have the &lt;code&gt;[PiralExtension]&lt;/code&gt; attribute, so it's all attributes and we can treat these almost in the same way!&lt;/p&gt;

&lt;p&gt;What we came up with, is the &lt;code&gt;Piral.Blazor.Analyzer&lt;/code&gt;: a command line tool that will use reflection on the Blazor project dll to extract all components that have certain attributes. The codegen then calls &lt;code&gt;dotnet Piral.Blazor.Analyzer &amp;lt;args&amp;gt;&lt;/code&gt;; the output of which gives us something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"routes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/counter"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"My.Components.Counter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"my-awesome-counter"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The codegen then has all the required information to create code for functions that the setup function needs. The &lt;code&gt;index.tsx&lt;/code&gt; file then will use these generated functions from the codegen, and becomes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;name-of-piral-instance&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Blazor&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./blazor.codegen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Blazor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerDependencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Blazor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Blazor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerExtensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;blockquote&gt;
&lt;p&gt;5. &lt;strong&gt;Debugging&lt;/strong&gt; a Blazor pilet from for example Visual Studio should be possible: triggering  breakpoints, stepping through the code, ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was an interesting challenge. The first step for me was learning how the debugger actually works. I stumbled upon an excellent blog post by Safia Abdalla. She's a software engineer at Microsoft on the .NET team.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__37984"&gt;
  
    .ltag__user__id__37984 .follow-action-button {
      background-color: #3498DB !important;
      color: #FFFFFF !important;
      border-color: #3498DB !important;
    }
  
    &lt;a href="/captainsafia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SdWxbhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZuYLEVYS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37984/46b8bf0f-9fb1-4e3b-bd68-3590ea5737b4.jpeg" alt="captainsafia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/captainsafia"&gt;Safia Abdalla&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/captainsafia"&gt;I make open source at @nteractio, make software at 
@Microsoft, and write books and blogs. Dream big and follow through even bigger.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The blogpost can be found on her personal blog: &lt;a href="https://safia.rocks/blog/blazor-wasm-debugging/"&gt;&lt;em&gt;Under the hood with debugging in Blazor WebAssembly&lt;/em&gt;&lt;/a&gt;. There, she explains the concept of the debugging proxy.&lt;/p&gt;

&lt;p&gt;After some experiments and proof-of-concept work, we found out that in Blazor 3.2, we could not load the dlls and pdbs (symbol files) dynamically. They had to be included in the &lt;code&gt;blazor.boot.json&lt;/code&gt; file for them to get picked up by the debugger. &lt;br&gt;
We solved this by configuring the Piral CLI using a kras script injector. I won't go into too much detail here, so I'm oversimplifying massively: &lt;a href="https://github.com/florianrappl/kras"&gt;kras&lt;/a&gt; is a proxy/mock server for your frontend. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FlorianRappl"&gt;
        FlorianRappl
      &lt;/a&gt; / &lt;a href="https://github.com/FlorianRappl/kras"&gt;
        kras
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Efficient server proxying and mocking in Node.js. 💪
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;While it is most commonly used to mock a backend, we can use it as a proxy too! You can configure kras with js files included in a &lt;code&gt;mocks&lt;/code&gt; folder. Let's take a look at a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* mocks/debug.js */&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;uniqueAssemblyNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;uniquePdbNames&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldBeProxied&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/_framework/_bin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldBeProxied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;iisUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blazor.boot.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;returnWithTweakedBBJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This last part is what we mentioned before: when we debug we want to modify the &lt;code&gt;blazor.boot.json&lt;/code&gt; file to include our pilet dlls and pdbs, so they get loaded when the debug starts.&lt;/p&gt;

&lt;p&gt;As we see on line 5, a request should be proxied if the url points to one of our unique dlls or pdbs. This means the shared dlls from the appshell will just be loaded as normal, but the dlls the Pilet brings will be proxied. On line 9 we can see where to: the requests for the pilet dlls will be proxied to the url where IISExpress is running (we can get this from the &lt;code&gt;launchSettings.json&lt;/code&gt; file by the way).&lt;/p&gt;

&lt;p&gt;Because of this &lt;em&gt;hack&lt;/em&gt;, we can now trigger breakpoints in Visual Studio, step through the code, inspect variables, etc.! &lt;/p&gt;

&lt;p&gt;Oh, by the way, .NET 5 made stuff a lot easier with the inclusion of lazy loading! I won't give a full explanation, but it boils down to: we can now just load the pilet dlls and pdbs lazily, and everything just works! Proxying and tweaking the boot file isn't necessary!&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;6. Various improvements to single-page navigation, static files, scoped razor styles, ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I won't go into details about these. There are always things to improve about code, and these were some major ones :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;We take the same scenario as before: the counter. With the new setup, if we want a page, there is nothing at all to do that is special. We just need a regular Blazor page. If we also want to expose an extension, we can use the new &lt;code&gt;[PiralExtension]&lt;/code&gt; attribute from &lt;a href="https://nuget.org/packages/Piral.Blazor.Utils"&gt;&lt;code&gt;Piral.Blazor.Utils&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@page "/counter"
@attribute [PiralExtension("my-awesome-counter")] 

&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Current count: @count&amp;lt;/p&amp;gt;
    &amp;lt;button @onclick="Increment"&amp;gt;Increment&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

@code {
    int count = 0;

    void Increment()
    {
        count++;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tooling will do all the rest! &lt;strong&gt;No more screwing around in TypeScript&lt;/strong&gt; for a setup function to manually create and keep updated! Isn't that convenient?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(For more advanced uses you can still define an optional &lt;code&gt;setup.tsx&lt;/code&gt; file. Refer to the &lt;a href="https://github.com/smapiot/Piral.Blazor#readme"&gt;README&lt;/a&gt; to see how that works.)&lt;/em&gt;&lt;/p&gt;








&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;My first thought after writing this article would be &lt;em&gt;"damn, I wrote quite a long article again"&lt;/em&gt;, immediately followed by &lt;em&gt;"are people actually going to read this one?"&lt;/em&gt;. My last post was received very well, and I thank each and everyone that reacted to it! Feel free to let me know in the comments if this article was in any way interesting, helpful or cool! &lt;/p&gt;

&lt;p&gt;I enjoyed contributing to Piral a lot. I've always wanted to dive into the open-source community, and because of the guidance given by the Piral maintainers, I feel like I could make a difference in this project (Piral is also pretty damn cool if you ask me). &lt;/p&gt;

&lt;p&gt;Looking back on it, in my opinion, using Piral and Blazor has become better in both functionality and developer experience, and I'm really proud of that (&lt;em&gt;"hey, a Belgian guy that says he is proud of something, that's quite rare!"&lt;/em&gt;). If you want to see my contributions first-hand; or just criticize my code, &lt;a href="https://github.com/smapiot/piral/pulls?q=is%3Apr+author%3ADanteDeRuwe"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/smapiot/Piral.Blazor/pulls?q=is%3Apr+author%3ADanteDeRuwe"&gt;here&lt;/a&gt; are lists of the PRs I made. &lt;/p&gt;

&lt;p&gt;Then I want to address Blazor. While I can definitely see the appeal of it, and it's a cool technology: it was pretty hard to get a grasp on the technical side of it. Lots of the stuff that's going on is quite &lt;em&gt;magical&lt;/em&gt; at first. I'm glad the entire thing is open-source, because finding solutions often meant peeking behind the curtain and reading the source files on the &lt;a href="https://github.com/dotnet/aspnetcore"&gt;dotnet/aspnetcore&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Because of this however, I've learned an awful lot about how Blazor WebAssembly works; what the limitations and weird quirks are, etc. It also just broadened my knowledge of the .NET ecosystem as a whole.&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>piral</category>
      <category>microfrontends</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Binary Search Solution is better than yours </title>
      <author>Dimer BWimBA</author>
      <pubDate>Fri, 07 May 2021 07:57:26 +0000</pubDate>
      <link>https://dev.to/dimer191996/my-binary-search-solution-is-better-than-yours-2k21</link>
      <guid>https://dev.to/dimer191996/my-binary-search-solution-is-better-than-yours-2k21</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const binary = (val, arr) =&amp;gt; {
  let lower = 0;
  let upper = arr.length - 1;
  while (lower &amp;lt;= upper) {
    console.log("ols");
    const middle = lower + Math.floor((upper - lower) / 2);
    if (val === arr[middle]) {
      return middle;
    }
    if (val &amp;lt; arr[middle]) {
      console.log("right");
      upper = middle - 1;
    } else {
      console.log("left");
      lower = middle + 1;
    }
  }
  return -1;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>simplecode</category>
    </item>
    <item>
      <title> Rock Paper Scissors Spock Lizard game in JavaScript</title>
      <author>matvii</author>
      <pubDate>Fri, 07 May 2021 07:50:07 +0000</pubDate>
      <link>https://dev.to/hodovani/rock-paper-scissors-spock-lizard-game-in-javascript-55np</link>
      <guid>https://dev.to/hodovani/rock-paper-scissors-spock-lizard-game-in-javascript-55np</guid>
      <description>&lt;p&gt;Welcome to my tutorial!&lt;/p&gt;

&lt;p&gt;In this tutorial, we're gonna build a really simple game of Rock Paper Scissors Spock Lizard.&lt;/p&gt;

&lt;p&gt;Please check my GitHub account for the complete source code.&lt;br&gt;
&lt;a href="https://github.com/hodovani/rock-paper-scissors-Spock-lizard"&gt;https://github.com/hodovani/rock-paper-scissors-Spock-lizard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are gonna use vanilla JavaScript, HTML, CSS for this game.&lt;/p&gt;

&lt;p&gt;YouTube video&lt;br&gt;
&lt;a href="https://youtu.be/pJw39quoajE"&gt;https://youtu.be/pJw39quoajE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How much time do you spend writing tests?</title>
      <author>Madza</author>
      <pubDate>Fri, 07 May 2021 07:46:16 +0000</pubDate>
      <link>https://dev.to/madza/how-much-time-do-you-spend-writing-tests-2oc7</link>
      <guid>https://dev.to/madza/how-much-time-do-you-spend-writing-tests-2oc7</guid>
      <description>&lt;p&gt;It’s a decades-old debate of whether developers should write tests or not. While some think it’s important, others believe that it may be too much to ask from developers.&lt;/p&gt;

&lt;p&gt;How much time do you spend writing tests?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>How do you create your invoices?</title>
      <author>Madza</author>
      <pubDate>Fri, 07 May 2021 07:30:28 +0000</pubDate>
      <link>https://dev.to/madza/what-invoice-app-do-you-use-5aaj</link>
      <guid>https://dev.to/madza/what-invoice-app-do-you-use-5aaj</guid>
      <description>&lt;p&gt;With a proper invoice app all your billable hours, products, and taxes are all added up in a snazzy invoice. This is especially useful for smaller business owners or freelancers.&lt;/p&gt;

&lt;p&gt;My favorite is a free, open-source project &lt;a href="https://github.com/hql287/Manta"&gt;Manta&lt;/a&gt; - a desktop application for creating invoices with beautiful and customizable templates.&lt;/p&gt;

&lt;p&gt;What tools do you use to create invoices?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>startup</category>
      <category>finances</category>
    </item>
    <item>
      <title>Testing serverless apps has never been easier!</title>
      <author>Pawel Zubkiewicz</author>
      <pubDate>Fri, 07 May 2021 07:25:12 +0000</pubDate>
      <link>https://dev.to/pzubkiewicz/testing-serverless-apps-has-never-been-easier-442m</link>
      <guid>https://dev.to/pzubkiewicz/testing-serverless-apps-has-never-been-easier-442m</guid>
      <description>&lt;p&gt;Find out how I used popular open-source tools to build a &lt;strong&gt;serverless microservice template, which significantly streamlines testing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using practical examples, &lt;strong&gt;learn&lt;/strong&gt; how to apply &lt;strong&gt;hexagonal architecture principles to increase the testability and maturity of the code&lt;/strong&gt;. See how you can utilize design patterns and other techniques that you've been using for years. You don't need to forget about them when switching to serverless! &lt;/p&gt;

&lt;p&gt;On the contrary, based on my experience, they still have a place in modern solutions as they increase readability, maintainability, and testability of the source code.&lt;/p&gt;

&lt;p&gt;If you think they are better ways to program than &lt;strong&gt;&lt;em&gt;hackish&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;all-in-one-single-file-lambda-functions&lt;/em&gt; then you will love ❤️ what I've prepared for you. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sounds too good to be true?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wait, there is more! 😎 &lt;/p&gt;

&lt;p&gt;Automated &lt;em&gt;integration&lt;/em&gt; and &lt;em&gt;end-to-end&lt;/em&gt; (e2e) &lt;strong&gt;tests significantly streamline developer's workflow&lt;/strong&gt;. Finally, you can break out from: &lt;em&gt;code -&amp;gt; deploy -&amp;gt; manually invoke Lambda -&amp;gt; check logs -&amp;gt; fix bugs -&amp;gt; repeat&lt;/em&gt; cycle!&lt;/p&gt;

&lt;p&gt;But that's not all! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THE BEST PART: this template is available on GitHub for free&lt;/strong&gt; 😃&lt;br&gt;
You can use it right now!&lt;/p&gt;

&lt;p&gt;Before I'll explain the solution, allow me to summarize common problems that lead me to the creation of this template.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fallacious-simplicity-of-the-lambda-function"&gt;
  &lt;/a&gt;
  Fallacious simplicity of the Lambda function
&lt;/h2&gt;

&lt;p&gt;Every developer taking his first steps in serverless already has a lot of experience gained on previous projects. Most often this means that he created monolithic applications in heavy languages (such as Java or C#). Of course, some people already have a lot of experience in microservices, but these are still bigger components than Lambda functions. &lt;/p&gt;

&lt;p&gt;When switching to serverless and scripting languages such as JavaScript or Python people tend to explore the freedom offered by these technologies. There is nothing wrong with experimenting and playing around. Alas, all too often I speak with people who have used the &lt;strong&gt;&lt;em&gt;hackish&lt;/em&gt;&lt;/strong&gt; (all code in single file Lambda) approach on production services, and now they suffer from &lt;strong&gt;poor maintainability and lack of tests&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is very tempting to implement the Lambda function in just several lines. Unfortunately, in a long run, it doesn't pay off.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lack-of-tests"&gt;
  &lt;/a&gt;
  Lack of tests
&lt;/h2&gt;

&lt;p&gt;The direct effect of &lt;em&gt;hackish&lt;/em&gt; implementation is poor testability. Monolithic code is really hard to test, so people don't write any tests. Simple as that. The &lt;strong&gt;repercussions of not having tests are rather obvious&lt;/strong&gt; for seasoned developers, so I will not explore that topic here.&lt;/p&gt;

&lt;p&gt;However, some people do test their serverless applications. They write automated &lt;em&gt;unit&lt;/em&gt; tests for business logic or boilerplate parts that operate on AWS services using mocks.&lt;/p&gt;

&lt;p&gt;While mocks are not bad (I use them myself) you need to know when you should apply that technique. And more importantly, when not 😉&lt;/p&gt;

&lt;p&gt;Mocking all AWS services is not going to give you any warranties that your code will work when deployed into the cloud. &lt;strong&gt;Mocks give you a false sense of trust&lt;/strong&gt;. That also applies to the &lt;em&gt;localstack&lt;/em&gt; and similar tools that emulate AWS in Docker.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#think-about-why-we-test"&gt;
  &lt;/a&gt;
  Think about why we test?
&lt;/h2&gt;

&lt;p&gt;In my opinion because of two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to have a trust that our code behaves as we think it does&lt;/li&gt;
&lt;li&gt;to protect ourselves from regression bugs after new changes are introduced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An automated test suite will give us immediate feedback that something is wrong with our code.&lt;/p&gt;

&lt;p&gt;Lack of it will force us to do &lt;em&gt;manual testing&lt;/em&gt; after every change, or you can be brave and just deploy it to the &lt;code&gt;prod&lt;/code&gt;. I was just kidding, please don't do it 🤣&lt;/p&gt;

&lt;p&gt;I don't have anything against &lt;strong&gt;&lt;em&gt;manual testing&lt;/em&gt;&lt;/strong&gt;, but it &lt;strong&gt;doesn't scale&lt;/strong&gt;, &lt;strong&gt;requires knowledge of the system&lt;/strong&gt; (ie. new joiner will not know how/what to test), and &lt;strong&gt;is slow&lt;/strong&gt;. Also, &lt;strong&gt;you can't enforce it&lt;/strong&gt;. I mean you cannot run manual tests in CI/CD pipeline. &lt;/p&gt;

&lt;p&gt;There is also one more annoying thing. All too often in projects without tests or with bad tests, I hear my colleagues say "...but it worked locally on my machine". &lt;em&gt;I really don't care!&lt;/em&gt; 😤&lt;/p&gt;

&lt;p&gt;As a programmer and a person who takes responsibility for providing a working solution, which is free of bugs, I need to write code easy to test and maintain. And to have certainty that it works on the &lt;code&gt;prod&lt;/code&gt; in the cloud, not on someone's else laptop.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#solution-how-to-test-serverless"&gt;
  &lt;/a&gt;
  Solution: How to test serverless?
&lt;/h1&gt;

&lt;p&gt;To address the problems stated above I have prepared a &lt;em&gt;highly opinionated&lt;/em&gt; &lt;strong&gt;project template for Serverless Framework&lt;/strong&gt; that applies &lt;strong&gt;hexagonal architecture&lt;/strong&gt; principles to the serverless world.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;template project&lt;/em&gt; was created with &lt;strong&gt;two goals&lt;/strong&gt; in mind: &lt;strong&gt;streamlined developer's workflow&lt;/strong&gt; and &lt;strong&gt;easy testing&lt;/strong&gt; because, sadly, both are not common in serverless development yet.&lt;/p&gt;

&lt;p&gt;The template is available on GitHub under &lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template"&gt;serverless-hexagonal-template&lt;/a&gt; name.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h3&gt;

&lt;p&gt;To start using it, you need to create your new project from that template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sls create --template-url https://github.com/serverlesspolska/serverless-hexagonal-template --name &amp;lt;your-project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create your new project. Given that you have Serverless Framework, if not install it: &lt;code&gt;npm i -g serverless&lt;/code&gt;. More information in docs on GitHub.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing-approach"&gt;
  &lt;/a&gt;
  Testing approach
&lt;/h1&gt;

&lt;p&gt;All boilerplate configuration of the &lt;code&gt;jest&lt;/code&gt; testing framework, plugins and other open-source tools is included. New project if fully configured and ready to be deployed.&lt;/p&gt;

&lt;p&gt;The template contains two sample Lambda functions and a set of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests&lt;/li&gt;
&lt;li&gt;integration tests&lt;/li&gt;
&lt;li&gt;end-to-end (e2e) tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This division was introduced because different types of tests fulfill different needs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htHrnKMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kdwq3gwjgdsyq7omwoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htHrnKMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kdwq3gwjgdsyq7omwoq.png" alt="Different types of tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unit tests&lt;/em&gt; are executed locally (on the developer's computer or CI/CD server) and don't require access to any resources in the AWS cloud or on the Internet.&lt;/p&gt;

&lt;p&gt;However, &lt;em&gt;integration&lt;/em&gt; and &lt;em&gt;e2e&lt;/em&gt; tests require real AWS services deployed in the cloud. Therefore, before starting those you need to deploy the project by executing &lt;code&gt;sls deploy&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-tests"&gt;
  &lt;/a&gt;
  Integration tests
&lt;/h2&gt;

&lt;p&gt;Afterward, when triggering &lt;code&gt;npm run integration&lt;/code&gt; to start &lt;em&gt;integration tests&lt;/em&gt; special Serverless Framework plugin (&lt;a href="https://github.com/arabold/serverless-export-env"&gt;serverless-export-env&lt;/a&gt;) is connecting to the AWS account and saves locally in &lt;code&gt;.awsenv&lt;/code&gt; file all Lambda's environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stage=dev
region=eu-central-1
service=serverless-hexagonal-template
httpApiGatewayEndpointId=qjc1234u19
tableName=serverless-hexagonal-template-dev
message=Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sample contents of &lt;code&gt;.awsenv&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next, values from that file are injected into &lt;code&gt;jest&lt;/code&gt; test context. That means that whenever your code refers to, let's say, &lt;code&gt;process.env.MY_ENV_VAR&lt;/code&gt; during tests it will be resolved with the same value as it was running inside the Lambda function in the cloud. &lt;/p&gt;

&lt;p&gt;In this way, the code of the application (microservice) can be tested locally while using real resources in the cloud. The best thing is that when writing &lt;em&gt;clean code&lt;/em&gt; in accordance with a hexagonal architecture, &lt;strong&gt;the implementation code is not aware of the test context&lt;/strong&gt;. You don't have to add any special things to it to make it testable (&lt;em&gt;That would be ugly, wouldn't it?&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Automated &lt;code&gt;jest&lt;/code&gt; test suites are executed locally. They test your local files against resources in the cloud. For example, in &lt;strong&gt;serverless-hexagonal-template&lt;/strong&gt;, I implemented tests that use the DynamoDB table. Source code available &lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template/blob/main/__tests__/common/adapters/DynamodbAdapter.int.js"&gt;here&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template/blob/main/__tests__/common/services/MyEntityService.int.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1rFUYpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrah4k35pf8xs4qjaqj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1rFUYpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrah4k35pf8xs4qjaqj6.png" alt="Integration tests"&gt;&lt;/a&gt;&lt;br&gt;
The other test (&lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template/blob/main/__tests__/createItem/function.int.js"&gt;source code&lt;/a&gt;) focuses on AWS API Gateway and Lambda function integration. This is a huge deal, as serverless solutions heavily depend on multiple resources in the cloud. Many errors origins from the wrong configuration. Having such integration tests allows us to test this area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpApiGatewayEndpointId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.execute-api.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.amazonaws.com`&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createItem function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should respond with statusCode 200 to correct request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// GIVEN&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// WHEN&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// THEN&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Snippet of an integration test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integration-and-service-configuration-problems-are-the-main-drivers-behind-changes-regarding-how-the-industry-looks-at-testing-practices"&gt;
  &lt;/a&gt;
  Integration and service configuration problems are the main drivers behind changes regarding how the industry looks at testing practices.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlngbieX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3awbyzqeliwvwya0rq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlngbieX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3awbyzqeliwvwya0rq2.png" alt="Testing theory"&gt;&lt;/a&gt;&lt;br&gt;
On the left classic test pyramid. On the right honeycomb &lt;a href="https://engineering.atspotify.com/2018/01/11/testing-of-microservices/"&gt;proposed by Spotify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I put so much emphasis on integration testing as it is simply more important in serverless applications.&lt;/p&gt;

&lt;p&gt;To be honest, it's not just serverless. &lt;strong&gt;In every distributed system, unit testing is just not enough.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#endtoend-tests-e2e"&gt;
  &lt;/a&gt;
  End-to-end tests (e2e)
&lt;/h2&gt;

&lt;p&gt;Sometimes integration tests are not enough, as we need to test the whole chain of communication between a set of components.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wkir3Y6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fli7qd39th68r1ywadm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wkir3Y6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fli7qd39th68r1ywadm7.png" alt="e2e test"&gt;&lt;/a&gt;&lt;br&gt;
An example of such a test would be a &lt;code&gt;POST&lt;/code&gt; request sent to API Gateway &lt;code&gt;/item&lt;/code&gt; endpoint and a check if &lt;code&gt;processItem&lt;/code&gt; Lambda function was triggered by DynamoDB Streams as a result of saving new item by &lt;code&gt;createItem&lt;/code&gt; Lambda function invoked by the request. Such an approach tests the &lt;em&gt;chain of events&lt;/em&gt; that happen in the cloud and &lt;strong&gt;gives confidence&lt;/strong&gt; that integration between multiple services is well configured.&lt;/p&gt;

&lt;p&gt;These &lt;em&gt;chains of events&lt;/em&gt; are of course nothing more than &lt;em&gt;Event Driven Architecture&lt;/em&gt; in practice. These are what make the &lt;em&gt;cloud-native&lt;/em&gt; approach powerful. This also explains why use of &lt;em&gt;localstack&lt;/em&gt; and similar solutions it risky. There is no guarantee that these integrations work locally as they do in AWS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By the way, e2e tests work great when you want to test code that connects to RDS databases that cannot be accessed from outside of the VPC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hexagonal-architecture"&gt;
  &lt;/a&gt;
  Hexagonal architecture
&lt;/h2&gt;

&lt;p&gt;It naturally introduces order into our code, as the division into independent modules becomes intuitive. It allows for better separation of problems and makes it easier to write code compliant with the Single Responsibility Principle (SRP). These are key features of an architecture that is easy to maintain, extend and test.&lt;/p&gt;

&lt;p&gt;The selection of this particular architecture style is coupled with the proposed project directory structure and naming conventions. You can read more on those in the &lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template#standardized-structure"&gt;documentation&lt;/a&gt;.&lt;br&gt;
Suffice to say, it defines &lt;em&gt;where what&lt;/em&gt; should be placed (i.e. source code in &lt;code&gt;src/&lt;/code&gt; folder, tests in &lt;code&gt;__tests__/&lt;/code&gt; etc.) so &lt;strong&gt;you don't need to waste time thinking about it every time you start a new project&lt;/strong&gt; and creates a common language for your team members. Thus, decreasing &lt;em&gt;cognitive overload&lt;/em&gt; when switching between projects started from this template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-create-the-template"&gt;
  &lt;/a&gt;
  How did I create the template?
&lt;/h2&gt;

&lt;p&gt;The template has been worked out as a result of years of development in the Lambda environment using Serverless Framework. It also takes from the collective experience of the community (to whom I am grateful) embodied in books, talks, videos, and articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I was fed up with the poor developer's workflow in serverless&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;write code &lt;/li&gt;
&lt;li&gt;deploy&lt;/li&gt;
&lt;li&gt;manually invoke Lambda&lt;/li&gt;
&lt;li&gt;check logs&lt;/li&gt;
&lt;li&gt;fix bugs&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's very unproductive!&lt;/p&gt;

&lt;p&gt;I decided that I want to fix this problem. I focused on testing because I knew that solving it, will allow me to work in a much more mature way. Many years ago I was a Java developer and I knew that a developer's flow can be much better.&lt;/p&gt;

&lt;p&gt;I spent many evenings reading about testing serverless and experimenting. Fortunately, I was using &lt;em&gt;hexagonal architecture&lt;/em&gt; for a while now, so it was easy for me to think about testing in the context of singular code components, and not whole Lambda functions. Eventually, I found some articles about the &lt;em&gt;serverless-export-env&lt;/em&gt; plugin which was the &lt;em&gt;missing link&lt;/em&gt; that allowed me to tight everything together in an easy, automated way. That was of paramount importance for me. I knew that process must be simple and fully generic, so I could use it on any project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When I started using this approach I immediately noticed how much my development workflow was improved&lt;/strong&gt;. Finally, I could make changes on the fly!&lt;/p&gt;

&lt;p&gt;I was able to write 70 to 90 percent of a code without constant re-deployments. That was a HUGE improvement! In some cases, I used TDD (Test Driven Development) which is simple to do in this setup. &lt;/p&gt;

&lt;p&gt;After implementing several microservices using this approach, I was confident that this method worked. &lt;strong&gt;I decided that I want to share this approach with the community&lt;/strong&gt;. I love to help people around the world build and ship projects using awesome serverless technology and help them learn and become better developers. It was a logical thing to do. 😎&lt;/p&gt;

&lt;p&gt;However, instead of writing a plain article, I decided to create a Serverless Framework template that embodied all the things and practices that I knew, so everyone could start using it immediately and gain all described benefits without the hassle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-use-it"&gt;
  &lt;/a&gt;
  Why should you use it?
&lt;/h2&gt;

&lt;p&gt;In a nutshell, using &lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template"&gt;serverless-hexagonal-template&lt;/a&gt; will give you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Production-ready scaffolding of a serverless microservice&lt;/li&gt;
&lt;li&gt;Greater confidence in your solution (tests!)&lt;/li&gt;
&lt;li&gt;Efficient and repeatable developer's workflow &lt;/li&gt;
&lt;li&gt;Well-thought-out project structure&lt;/li&gt;
&lt;li&gt;Increased code reusability&lt;/li&gt;
&lt;li&gt;Clean code and mature design - use of patterns and good practices that you learned over the years&lt;/li&gt;
&lt;li&gt;Possibility to run tests in CI/CD pipelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No more constant re-deployments to test code&lt;/li&gt;
&lt;li&gt;No more manual testing&lt;/li&gt;
&lt;li&gt;No more &lt;em&gt;hackish&lt;/em&gt; single-file implementations&lt;/li&gt;
&lt;li&gt;No more regression bugs&lt;/li&gt;
&lt;li&gt;No more &lt;em&gt;it worked on my computer&lt;/em&gt; excuses 😉&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-experienced-this-firsthand"&gt;
  &lt;/a&gt;
  I experienced this firsthand
&lt;/h2&gt;

&lt;p&gt;My journey with serverless has been going on since 2016. Before I started using this approach I had many projects with unit tests or without tests at all. It was hard to add new functionalities to them without breaking existing things or at least being afraid of such eventuality. Unit tests simply were not enough. Every change had to be deployed and manually tested.&lt;/p&gt;

&lt;p&gt;Nowadays, implementing and modifying projects is a completely different story. The addition of &lt;em&gt;integration&lt;/em&gt; and &lt;em&gt;e2e&lt;/em&gt; tests allowed me to gain confidence whenever I introduce changes. My workflow is not interrupted anymore by project deployments to the cloud. Of course, they are still needed but almost everything can be tested as soon as you provision resources for the first time and define environment variables.&lt;/p&gt;

&lt;p&gt;In summary, this saves a lot of time and makes the developer's life easier. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out!
&lt;/h2&gt;

&lt;p&gt;So, if you want to have an &lt;em&gt;awesome developer's flow&lt;/em&gt; and well-tested solution give it a try. It will take you no more than 5 minutes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create your project from a template &lt;code&gt;sls create --template-url https://github.com/serverlesspolska/serverless-hexagonal-template --name &amp;lt;your-project-name&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install dependencies &lt;code&gt;npm i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Unit test &lt;code&gt;npm run test&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Deploy to the cloud &lt;code&gt;sls deploy&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run integration tests &lt;code&gt;npm run integration&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run end-to-end tests &lt;code&gt;npm run e2e&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then analyze my code and learn how to test serverless applications. Start using this template in your projects, and give me a star ⭐️ on GitHub: &lt;a href="https://github.com/serverlesspolska/serverless-hexagonal-template"&gt;serverless-hexagonal-template&lt;/a&gt;. Good luck and happy testing! &lt;/p&gt;

</description>
      <category>serverless</category>
      <category>testing</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Django - A python framework | 6 hours Course</title>
      <author>𝒮𝒶𝓇𝓉𝒽𝒶𝓀 📨</author>
      <pubDate>Fri, 07 May 2021 06:33:24 +0000</pubDate>
      <link>https://dev.to/sarthaksavvy/django-a-python-framework-6-hours-course-pej</link>
      <guid>https://dev.to/sarthaksavvy/django-a-python-framework-6-hours-course-pej</guid>
      <description>&lt;p&gt;Django is the most famous Python web framework for perfectionists with deadlines.&lt;br&gt;
Let's learn Django by creating a Bookstore app with user authentication, file uploading, reviews on books and many more features&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aY43fUGlB7E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;🌟Django has many features 🌟&lt;/p&gt;

&lt;p&gt;Ridiculously fast.&lt;br&gt;
Fully loaded.&lt;br&gt;
Reassuringly secure.&lt;br&gt;
Exceedingly scalable.&lt;br&gt;
Incredibly versatile.&lt;br&gt;
Source code - &lt;a href="https://github.com/bitfumes/django-course"&gt;https://github.com/bitfumes/django-course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟 Course Contents 🌟&lt;br&gt;
⏳ (00:00:00) Intro and What we will Learn&lt;br&gt;
⏳ (00:05:15) Install and Setup&lt;br&gt;
⏳ (00:11:52) Start New Project&lt;br&gt;
⏳ (00:18:42) File Structure&lt;br&gt;
⏳ (00:25:52) Start New App&lt;br&gt;
⏳ (00:33:10) Register App &amp;amp; URL&lt;br&gt;
⏳ (00:44:47) Using Template&lt;br&gt;
⏳ (00:51:49) Load Data from JSON file&lt;br&gt;
⏳ (00:58:37) Design using Tailwindcss&lt;br&gt;
⏳ (01:02:40) Dynamic Routing&lt;br&gt;
⏳ (01:09:34) Template Filter and Tags&lt;br&gt;
⏳ (01:16:19) Database Migration &amp;amp; Model&lt;br&gt;
⏳ (01:26:56) Migration Update&lt;br&gt;
⏳ (01:31:17) Query Filter &amp;amp; Create&lt;br&gt;
⏳ (01:39:43) Show Data from Database&lt;br&gt;
⏳ (01:44:39) Intro to Django Admin&lt;br&gt;
⏳ (01:50:37) Django Admin CRUD&lt;br&gt;
⏳ (01:58:42) Handle Not Found 404&lt;br&gt;
⏳ (02:05:47) Form CSRF Token&lt;br&gt;
⏳ (02:12:08) Store New Review&lt;br&gt;
⏳ (02:23:37) Order by Review &amp;amp; Link Book&lt;br&gt;
⏳ (02:31:21) Generic List View&lt;br&gt;
⏳ (02:41:11) Generic Detail View&lt;br&gt;
⏳ (02:46:41) Relationship in Django&lt;br&gt;
⏳ (02:58:02) Template Inheritance&lt;br&gt;
⏳ (03:05:56) Many to Many Relationship&lt;br&gt;
⏳ (03:19:07) Query Many to Many Relationship&lt;br&gt;
⏳ (03:26:29) Authentication Intro&lt;br&gt;
⏳ (03:33:42) Login and Redirect User&lt;br&gt;
⏳ (03:41:23) Using Middleware&lt;br&gt;
⏳ (03:49:02) Logout a User&lt;br&gt;
⏳ (03:58:50) Restrict user on template&lt;br&gt;
⏳ (04:04:38) Connect user with Review&lt;br&gt;
⏳ (04:14:02) Reset Password&lt;br&gt;
⏳ (04:24:16) Email SMTP settings&lt;br&gt;
⏳ (04:37:33) Image upload for Book&lt;br&gt;
⏳ (04:48:21) Store image for Review&lt;br&gt;
⏳ (04:55:54) Working with Django Forms&lt;br&gt;
⏳ (05:05:55) Upload File with model form&lt;br&gt;
⏳ (05:17:35) Prepare Django for deployment&lt;br&gt;
⏳ (05:30:53) Deploy Django to Heroku&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
    </item>
    <item>
      <title>Sphere.js creating http servers for beginners</title>
      <author>Jahongir Sobirov</author>
      <pubDate>Fri, 07 May 2021 06:28:10 +0000</pubDate>
      <link>https://dev.to/jahongir2007/sphere-js-creating-http-servers-for-beginners-550a</link>
      <guid>https://dev.to/jahongir2007/sphere-js-creating-http-servers-for-beginners-550a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-spherejs"&gt;
  &lt;/a&gt;
  What is Sphere.js?
&lt;/h2&gt;

&lt;p&gt;Sphere.js is designed to create these simple http servers. So what is an http server? An HTTP server is a small and simple server that can be created in node.js. In Node.js, you can do this mainly through http, express.js and socket.io. It takes a lot of time to learn these. However, sphere.js is not like that. This framework is mainly recommended for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-spherejs"&gt;
  &lt;/a&gt;
  Using sphere.js
&lt;/h2&gt;

&lt;p&gt;Let’s download this framework first and we will do this using github cli: &lt;code&gt;gh repo clone Jahongir2007/sphere.js&lt;/code&gt;&lt;br&gt;
Creating simple http server in Sphere.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphere&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sphere&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// importing sphere.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sphere&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// creating sphere application&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="c1"&gt;// creating http server&lt;/span&gt;
   &lt;span class="na"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// server head&lt;/span&gt;
   &lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// getting text for http server&lt;/span&gt;
   &lt;span class="na"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="c1"&gt;// listening http server&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9boAixk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sb2ms0de8phgw3w5yms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9boAixk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sb2ms0de8phgw3w5yms.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>http</category>
    </item>
    <item>
      <title>Embedded service</title>
      <author>Emanuel Allely</author>
      <pubDate>Fri, 07 May 2021 06:19:21 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/embedded-service-2hmn</link>
      <guid>https://dev.to/emanuel_allely/embedded-service-2hmn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#embedded-services"&gt;
  &lt;/a&gt;
  Embedded Services
&lt;/h1&gt;

&lt;p&gt;A family photo shared on a social network. An interesting news article. A funny video of a cat. It all starts with a website. A website needs a few things, notably a database. You ask for the website for your link, and the website gets data from different services, formats it into something pretty, and then returns that to you. The World Wide Web is literally that, a web of services. Websites fetching data from other websites, from databases, from authentification services, from data storage servers... And you don't need to know where those services are. They might be located on the same server, or they might be in the same building, or they might even be on the other side of the planet. Everything just works.&lt;/p&gt;

&lt;p&gt;Developing for such a scenario was difficult, but the world of web development changed everything. Web services today are separated into different code blocks, making things easier to develop and maintain. You literally do not need to know anything about how the database server works, so long as you use the services described in the documentation, you can store and retrieve data. If you need more storage or more space, then moving a database to a different server is now trivial. When you call a number to get information on your electricity bill, do you know where the call center is? Is it in your city? Is it even in your country? You don't know, so long as you know how to contact the service, you are good to go. You don't need to know where something is physically, you only need to know where something is logically.&lt;/p&gt;

&lt;p&gt;Embedded systems haven't yet caught up, but we're getting there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSMSWIpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwgd8y54kfnh66ed2uvw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSMSWIpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwgd8y54kfnh66ed2uvw.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simple-ideas-complicated-solutions"&gt;
  &lt;/a&gt;
  Simple ideas, complicated solutions
&lt;/h1&gt;

&lt;p&gt;Let’s take the example of an industrial system. If the temperature goes above a certain point (T1), we need to turn on a fan to cool down the system. This fan is noisy, so we won’t keep it running all the time, only when needed. If the temperature still goes higher, past another point called T2, we will shut down the system to avoid damage. If the temperature goes below a certain point, called T0, we need to turn some heating elements on.&lt;/p&gt;

&lt;p&gt;The program used to control this situation is pretty simple: program the primary microcontroller to check values from time to time to see what the temperature is and then act on that information. Lower than T0, then we turn the heating element on. Higher than T1, turn the fan on. Higher than T2, then turn the entire system off. But wait a minute, we made a mistake. If the temperature goes above T0, we need to turn the heating element off; otherwise, we are overheating a system we are trying to keep cool. No problem, we can easily catch errors like this when the code is small.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#splitting-up-code"&gt;
  &lt;/a&gt;
  Splitting up code
&lt;/h1&gt;

&lt;p&gt;Your hugely complex machine will be running much more code than just a temperature sensor. It might be an industrial 3D printer, or maybe even something to help send the next space probe to Mars. However, deep inside this code, there will still be the temperature sensor routine, something that electronically checks the temperature component to get that information. Since one microcontroller will be busy with other important tasks, maybe this task can be offloaded to another microcontroller? There is an advantage; the code on this microcontroller is nice and lightweight. Disadvantage? Now you have to write code to communicate (remember that the "main" microcontroller is also going to need the temperature to display on that fancy LCD screen so that the operator knows what is going on).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPC8Md3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br1we4ok8jms06rsi77j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPC8Md3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br1we4ok8jms06rsi77j.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simplifying-code"&gt;
  &lt;/a&gt;
  Simplifying code
&lt;/h1&gt;

&lt;p&gt;So what is the best thing to do? Who gets the temperature sensor? Even worse, is it actually easier from a development point of view to add two temperature sensors? One for each microcontroller, and each reading the same temperature at the same location? This has actually happened in the past.&lt;/p&gt;

&lt;p&gt;By creating one single program that controls not only the fans and heater, but also the laser engraver, hydraulic press, or some other complex system, we make the code more and more complex. The more code becomes complex, the more errors can hide inside, and the bigger the board. When does complex become too complex? By separating the code, we make it easier to maintain, but we also need to add in communication code to be able to communicate with other boards. Win some, lose some.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7sTQfxWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezi6x3ul3j2v9t81lpml.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sTQfxWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezi6x3ul3j2v9t81lpml.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boxes-of-code"&gt;
  &lt;/a&gt;
  Boxes of code
&lt;/h1&gt;

&lt;p&gt;Reading the temperature is a service, or at least it should be. It doesn't really matter who needs the temperature; each program running on this network should be able to send a request to get the temperature, no matter where they are, no matter where the sensor is on the network. Not only the temperature sensor but also the alarm in case something goes wrong, the keypad to know what the user wants, the distance sensor to know if the object you're working on is correctly placed, and so on.&lt;/p&gt;

&lt;p&gt;If the temperature does go above the limit, you need to send an alarm. What kind of alarm? It doesn't matter. Maybe in one factory with lots of workers, a flashing red and orange light is enough. However, in another factory with fewer people, they would want a siren to alert someone close by.&lt;/p&gt;

&lt;p&gt;Added advantage, you can replace the alarm with some other hardware, with a completely different electronic interface, and you won’t have to rewrite any code since it offers equivalent services; it is transparent. Serial, I2C, SPI, or even just standard GPIO, just connect to the service and tell it that you want to activate the alarm; it's as simple as that.&lt;/p&gt;

&lt;p&gt;Embedded services have a lot of advantages over traditional code. You can write reusable code for different devices. You can deploy to one or multiple microcontrollers. You don’t have to spend extra development time handling communications. All in all, it makes your code easier to read, therefore easier to maintain, and less likely to have bugs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-can-we-help"&gt;
  &lt;/a&gt;
  How can we help?
&lt;/h1&gt;

&lt;p&gt;At Luos, we have designed a library that is easy to integrate into an existing project, that helps you separate your code into services, and that handles all of the communications for you. Have a look at our &lt;a href="https://docs.luos.io"&gt;documentation&lt;/a&gt; pages or &lt;a href="https://calendly.com/nicolas-rabault/quick-meetin-after-aa"&gt;schedule a meeting with our team&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>microservices</category>
      <category>opensource</category>
      <category>embeddedsystems</category>
    </item>
    <item>
      <title>INTERNET OF THINGS (IoT)</title>
      <author>221910301038</author>
      <pubDate>Fri, 07 May 2021 06:00:55 +0000</pubDate>
      <link>https://dev.to/221910301038/internet-of-things-iot-58m3</link>
      <guid>https://dev.to/221910301038/internet-of-things-iot-58m3</guid>
      <description>&lt;p&gt;The Internet of things (IoT) describes the network of physical objects or “things” that are embedded with sensors, software, electronics, and other technologies to connect and exchange data with other devices and systems over the Internet.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24wIpKQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr5ewzars5eger8l08wl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24wIpKQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr5ewzars5eger8l08wl.jpeg" alt="WhatsApp Image 2021-05-07 at 11.26.01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-flavour-of-the-internet-of-things"&gt;
  &lt;/a&gt;
  THE FLAVOUR OF THE INTERNET OF THINGS
&lt;/h1&gt;

&lt;p&gt;The alarm rings. As you open your eyes blearily, you see that it's five minutes later than your usual wake-up time. The clock has checked the train times online, and your train must be delayed, so it lets you sleep in a little longer.&lt;/p&gt;

&lt;p&gt;In your kitchen, a blinking light reminds you it's time to take your tablets. If you forget, the medicine bottle cap goes online and emails your doctor to let her know.&lt;/p&gt;

&lt;p&gt;On your way out of the house, you catch a glow in the corner of your eye. Your umbrella handle is lit up, which means that it has checked the BBC weather reports and predicts rain. You sigh and pick it up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-structure-of-iot"&gt;
  &lt;/a&gt;
  THE STRUCTURE OF IOT
&lt;/h1&gt;

&lt;p&gt;The IoT can be viewed as a gigantic network consisting of networks of devices and computers connected through a series of intermediate technologies where numerous technologies like wireless connections may act as enablers of this connectivity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-mean-to-connect-an-object-to-the-internet-sensors-and-actuators"&gt;
  &lt;/a&gt;
  What does it mean to "connect an object to the Internet"? "sensors" and "actuators"
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ7C_XLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y9rlbcfg4r25laf96ds.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ7C_XLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y9rlbcfg4r25laf96ds.jpeg" alt="WhatsApp Image 2021-05-07 at 11.40.22"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGD2mGFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l60y0hj814es68zirkpa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGD2mGFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l60y0hj814es68zirkpa.jpeg" alt="WhatsApp Image 2021-05-07 at 11.42.44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#an-equation-for-the-internet-of-things-"&gt;
  &lt;/a&gt;
  AN EQUATION FOR THE INTERNET OF THINGS :
&lt;/h1&gt;

&lt;p&gt;Physical Object + Controller, Sensors, and Actuators +Internet = Internet of Things(IoT) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enchanted-objects"&gt;
  &lt;/a&gt;
  ENCHANTED OBJECTS
&lt;/h2&gt;

&lt;p&gt;. The best known of Arthur C. Clarke's "three laws of prediction" states "Any sufficiently advanced technology is indistinguishable from magic".&lt;/p&gt;

&lt;p&gt;• Enchanted objects are everyday things that talk to us or each other, and in some ways make our lives better, delight us, and give an emotional connection.&lt;/p&gt;

&lt;p&gt;Enchanted Objects are ordinary things, made extraordinary.&lt;/p&gt;

&lt;p&gt;• Enchanted Objects are ordinary things, augmented, connected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#according-to-david-rose-"&gt;
  &lt;/a&gt;
  ACCORDING TO DAVID ROSE :
&lt;/h1&gt;

&lt;p&gt;"Enchanted objects start as ordinary things- a pen, a shoe, a table, a wallet, a light bulb, etc., The ordinary things are then augmented and enhanced through the use of emerging technologies such as sensors, actuators, wireless connection, and embedded processing - so that it becomes extraordinary".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrAGlIiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc2vxunsm8n6vqdt76nc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrAGlIiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc2vxunsm8n6vqdt76nc.jpeg" alt="WhatsApp Image 2021-05-07 at 11.53.48"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iot</category>
    </item>
    <item>
      <title>EVOLUTION OF PLANES</title>
      <author>dheeraj</author>
      <pubDate>Fri, 07 May 2021 05:59:30 +0000</pubDate>
      <link>https://dev.to/dheeraj06/evolution-of-planes-inb</link>
      <guid>https://dev.to/dheeraj06/evolution-of-planes-inb</guid>
      <description>&lt;p&gt;According to AulusGellius,archytas, the ancient Greek philosopher, mathematician, astronomer, statesman and strategist, was reputed to have designed and built ,around 400BC, the first Artificial , self propelled flying device, a bird shaped model propelled by a jet of what was probably steam ,said to have actually flown some 200meters. this machine ,which its inventor called the pigeon , may have been suspended on a wire or pivot for its flight.&lt;br&gt;
the 9th century Muslim Berber inventor, Abbas ibn Firas's glider is considered by john Harding to be the first attempt at heavier than air.&lt;br&gt;
First real flying is heavier than air powered flight , accomplished by an unmanned free flight steam powered monoplane of   foot(3.0m)wingspan , was realized by john string fellow in 1848 in england.in 1868 in he flew a powered monoplane model a few dozen feet , at an exhibition at the crystal place in London.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
