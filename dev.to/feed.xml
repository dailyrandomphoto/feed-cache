<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Software Design: Deep Modules</title>
      <author>Federico Ramirez</author>
      <pubDate>Fri, 02 Jul 2021 00:24:55 +0000</pubDate>
      <link>https://dev.to/gosukiwi/software-design-deep-modules-2on9</link>
      <guid>https://dev.to/gosukiwi/software-design-deep-modules-2on9</guid>
      <description>&lt;p&gt;I'm reading &lt;a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201"&gt;A Philosophy of Software Design&lt;/a&gt;, by John K. Ousterhout, a professor of computer science at Stanford University and the creator of the &lt;a href="https://www.tcl.tk/about/"&gt;Tcl&lt;/a&gt; programming language. &lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://johz.bearblog.dev/book-review-philosophy-software-design/"&gt;this other review&lt;/a&gt; he has almost two decades of real world software experience, so he seems to know a thing or two about software design.&lt;/p&gt;

&lt;p&gt;I love software design, and I love reading different takes on it. I admit I haven't finished the book yet, but so far I love his simple yet complete approach.&lt;/p&gt;

&lt;p&gt;So far, I'd recommend it, even though I both agree and disagree on what he calls &lt;em&gt;Classitis&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classitis"&gt;
  &lt;/a&gt;
  Classitis
&lt;/h2&gt;

&lt;p&gt;I don't want to spoil or copy too much from his book but to make things short, let's say classes are a type of module, and he encourages modules to be deep, instead of shallow.&lt;/p&gt;

&lt;p&gt;A shallow module is module is one with a big public interface, compared to it's implementation. A deep module, is one with a small public interface, compared to it's implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   DEEP MODULE
  ┌────────────┐
  │            ├─────► Interface
  ├────────────┤
  │            │
  │            │
  │            ├─────► Implementation
  │            │
  │            │
  │            │
  └────────────┘

  SHALLOW MODULE
  ┌────────────┐
  │            ├─────► Interface
  │            │
  │            │
  │            │
  ├────────────┤
  │            │
  │            ├─────► Implementation
  │            │
  └────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;His argument is that shallow modules don't help to manage complexity, because the benefit they provide (hiding implementation) is dwarfed by the cost of having to learn a big, complicated public interface. Thus, they must be avoided when possible.&lt;/p&gt;

&lt;p&gt;I think he makes a great point. The example he gives (a perfect one, I must add) is the Java File API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;FileInputStream&lt;/span&gt; &lt;span class="n"&gt;fileStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;bufferedStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferedStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complexity of the &lt;code&gt;ObjectInputStream&lt;/code&gt; interface is huge. You need to know a lot of things in order to use that class. And that unknown, is complexity.&lt;/p&gt;

&lt;p&gt;Sure, the class is very flexible, but the API is not great. He calls having several small classes like this &lt;strong&gt;Classitis&lt;/strong&gt;, and says it must be avoided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-small-classes-are-good-right"&gt;
  &lt;/a&gt;
  But... Small classes are good, right?
&lt;/h2&gt;

&lt;p&gt;Small classes are a staple of OOP languages like Smalltalk, and to some extent, Ruby inherited that.&lt;/p&gt;

&lt;p&gt;Authors like &lt;a href="https://sandimetz.com/"&gt;Sandi Metz&lt;/a&gt;, a Ruby consultant with 30+ years of experience, and a Smalltalk background, strongly &lt;a href="https://thoughtbot.com/blog/sandi-metz-rules-for-developers"&gt;advises for small classes and small methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Small objects seem to make following the &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;Object Oriented Design Principles&lt;/a&gt; easier.&lt;/p&gt;

&lt;p&gt;So, how can two well-respected authors have polar opposite opinions? Well, for one, because software is hard, but also, because writing good, maintainable software is more an art than a mathematical formula you can blindly apply.&lt;/p&gt;

&lt;p&gt;Different people with different backgrounds and different experience reach the goal in different ways. Shocker right? 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-case-for-small-objects"&gt;
  &lt;/a&gt;
  A case for small objects
&lt;/h2&gt;

&lt;p&gt;I am biased. Being a Ruby developer, and sharing Sandi's philosophy, I love small objects with tiny interfaces. But I know sometimes, they can make things more complex.&lt;/p&gt;

&lt;p&gt;Something Sandi and John have in common is that they both care a lot about abstractions. Abstractions are very important, and they require constant refactor, in order to accommodate them to the software we are writing.&lt;/p&gt;

&lt;p&gt;Sandi says "it's better to have duplication, than the wrong abstraction". And in this sense, we can see that it's not enough to blindly follow some rules. And &lt;strong&gt;that&lt;/strong&gt; is the trick to it.&lt;/p&gt;

&lt;p&gt;Whether you approach it from the right or from the left, whether you prefer small objects or deep modules, you need a critical eye, and always be watching the design of your software.&lt;/p&gt;

&lt;p&gt;Take time to refactor, accommodate the abstractions, think about different solutions, and sometimes, recognize that you just can't come up with a good solution, in which case, it's better to leave it as it is for now, until you have more code. The more repetition you have, the easier it is to notice the pattern, and abstract it away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-the-java-example"&gt;
  &lt;/a&gt;
  Back to the Java example
&lt;/h2&gt;

&lt;p&gt;Remember this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;FileInputStream&lt;/span&gt; &lt;span class="n"&gt;fileStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;bufferedStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferedStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ugly right? One could look at it and blame the small classes. But you could also look at it, and realize you are looking at an implementation, not an interface.&lt;/p&gt;

&lt;p&gt;What if you used a &lt;a href="https://en.wikipedia.org/wiki/Builder_pattern"&gt;builder object&lt;/a&gt; to abstract it away? I don't know much about the Java API, but in Ruby-land, it could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;StreamBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;buffered: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing the name of the classes and what it takes to instantiate them is a dependency. You can abstract those away, think of them as implementation details. The consumers of &lt;code&gt;StreamBuilder&lt;/code&gt; don't even need to know they exist.&lt;/p&gt;

&lt;p&gt;We now exposed a small interface -- only a constructor -- and hide the implementation details, which is the name of classes and how to arrange them all together.&lt;/p&gt;

&lt;p&gt;You will still need to know the name of the builder class, and what it expects in the constructor, but that can be easily documented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h2&gt;

&lt;p&gt;It is true small classes have issues. A class will always be more complex than just a function, and debugging OOP code can feel like following Alice through the rabbit hole. You look at one object which uses another which uses another.&lt;/p&gt;

&lt;p&gt;But they also have advantages. For example, you don't have to hold several objects in your head at once, but you might need to hold a lot of state if you are debugging one big method.&lt;/p&gt;

&lt;p&gt;Also, small classes force you to separate the algorithm into smaller parts. A fundamental part of your problem could easily be intermingled and hidden away, you might not even know it exist, if it was just one big method or massive class.&lt;/p&gt;

&lt;p&gt;Yet another advantage is that the average complexity of your code will be smaller. It might not be perfect, but it will be &lt;strong&gt;consistent&lt;/strong&gt;. It will allow your software to not be consumed by it's own inevitable complexity.&lt;/p&gt;

&lt;p&gt;There's a great talk by Sandi called &lt;a href="https://www.youtube.com/watch?v=8bZh5LMaSmE"&gt;All the Little Things&lt;/a&gt; which explains this in detail.&lt;/p&gt;

&lt;p&gt;So, what's better? It depends. We know that both extremes are wrong, so it's up to you to come with a happy middle! What do &lt;strong&gt;you&lt;/strong&gt; prefer?&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>oop</category>
      <category>ruby</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Migrating HLS videos to Mp4 format in Rails.</title>
      <author>Konnor Rogers</author>
      <pubDate>Fri, 02 Jul 2021 00:13:36 +0000</pubDate>
      <link>https://dev.to/paramagicdev/migrating-hls-videos-to-mp4-format-in-rails-2nj5</link>
      <guid>https://dev.to/paramagicdev/migrating-hls-videos-to-mp4-format-in-rails-2nj5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;Recently, I was tasked with migrating our HLS videos over to mp4 format and store it on S3 for a variety of reasons. I wanted to document the magic incantations I followed to make this happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ffmpeg-command"&gt;
  &lt;/a&gt;
  The FFMPEG command.
&lt;/h2&gt;

&lt;p&gt;The first step is how do you convert HLS to mp4. Well, theres a number of ways. FFMPEG is my go to solution because its widely available and generally on most servers.&lt;/p&gt;

&lt;p&gt;To begin, I googled around and found this was the secret sauce to be able to convert HLS video into mp4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ffmpeg &lt;span class="nt"&gt;-i&lt;/span&gt; &amp;lt;input&amp;gt; &lt;span class="nt"&gt;-acodec&lt;/span&gt; copy &lt;span class="nt"&gt;-bsf&lt;/span&gt;:a aac_adtstoasc &lt;span class="nt"&gt;-vcodec&lt;/span&gt; copy &amp;lt;output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whats super cool to note is &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; can actually be a fully qualified &lt;code&gt;https://provider/video.m3u8&lt;/code&gt; url so the HLS manifest doesn't have to be available locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-it-to-rails"&gt;
  &lt;/a&gt;
  Moving it to Rails
&lt;/h2&gt;

&lt;p&gt;Okay, but how do we do that in Rails?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice I didn't make this one big string. Instead the first argument is the command, and everything else afterwards are flags. The reason for this is to help prevent command injection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  Whats next
&lt;/h2&gt;

&lt;p&gt;Alright, now that we have the command to convert the video, now we have to clean up some loose ends including generating a temporary file for storage, and then shoving the file contents into S3 via ActiveStorage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#housekeeping"&gt;
  &lt;/a&gt;
  Housekeeping
&lt;/h3&gt;

&lt;p&gt;Since I know this method is going to do a couple things, lets call it &lt;code&gt;migrate_to_mp4&lt;/code&gt;. This method will also exist on the &lt;code&gt;Video&lt;/code&gt; model and the &lt;code&gt;Video&lt;/code&gt; will have one attached mp4 video like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Video&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_one_attached&lt;/span&gt; &lt;span class="ss"&gt;:mp4_video&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generating-a-temporary-file"&gt;
  &lt;/a&gt;
  Generating a temporary file
&lt;/h3&gt;

&lt;p&gt;Now that we have some structure in place, lets work on expanding this method to actually work!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".mp4"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unlink&lt;/span&gt;

    &lt;span class="c1"&gt;# hls_url is a db column on the video record.&lt;/span&gt;
    &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we create a &lt;code&gt;Tempfile&lt;/code&gt; which has a number of semantics that make it great for creating...you guessed it, temporary files.&lt;/p&gt;

&lt;p&gt;By passing &lt;code&gt;::Tempfile.new&lt;/code&gt; an array we say: "Generate a temporary file with a random name prefixed with 'video' and ending with '.mp4'"&lt;/p&gt;

&lt;p&gt;Next we save its path since its going to be unique. Then we close it and unlink it so it gets deleted immediately. We do this because if the file exists, FFMPEG will give us a warning and we have to manually address it which we dont want to have to do.&lt;/p&gt;

&lt;p&gt;Finally, we pass the path along to the ffmpeg command and we're nearly done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-activestorage"&gt;
  &lt;/a&gt;
  Writing to ActiveStorage
&lt;/h3&gt;

&lt;p&gt;The next step is to write this newly created file to ActiveStorage. To do so, we call the &lt;code&gt;#attach&lt;/code&gt; method on &lt;code&gt;mp4_video&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;mp4_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"video-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mp4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h3&gt;

&lt;p&gt;Okay we did it! Its done! Not quite, theres still a couple other loose ends to tie up. First, since we actually wrote this file onto disk, we should delete it. We should also wrap FFMPEG in a &lt;code&gt;begin/ensure&lt;/code&gt; clause to ensure we delete the file regardless of whether or not it succeeds.&lt;/p&gt;

&lt;p&gt;Heres what our final method looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

    &lt;span class="n"&gt;tempfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;".mp4"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;

    &lt;span class="c1"&gt;# We dont actually want the tempfile, just its path.&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
    &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unlink&lt;/span&gt;

    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hls_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-acodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-bsf:a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"aac_adtstoasc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"-vcodec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;mp4_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"video-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mp4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;ensure&lt;/span&gt;
      &lt;span class="c1"&gt;# always cleanup our mess.&lt;/span&gt;
      &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright thats the final method I ended up with!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;There are a couple extra steps as part of the migration process that I'll add here. I also had to do the following:&lt;/p&gt;

&lt;p&gt;1.) Find all videos not migrated&lt;br&gt;
2.) If they're not migrated, migrate them.&lt;/p&gt;

&lt;p&gt;So this is easily broken up into 2 parts. The first part is writing the query to find all non-migrated videos. Heres what my query looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:not_migrated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;left_joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="ss"&gt;:mp4_video_attachment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;active_storage_attachments: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, that takes care of &lt;em&gt;HOW&lt;/em&gt; to find not migrated videos. The next step is to do something about it.&lt;/p&gt;

&lt;p&gt;When I find I need to do imperative items like this, I like to reach for &lt;code&gt;ActiveJob&lt;/code&gt;. We also use Sidekiq so its worth noting to make sure to use JSON serializable parameters with Sidekiq.&lt;/p&gt;

&lt;p&gt;Heres what my job to migrate looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MigrateVideoStorageJob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationJob&lt;/span&gt;
  &lt;span class="n"&gt;queue_as&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;
      &lt;span class="n"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;not_migrated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ids&lt;/span&gt;

      &lt;span class="n"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;MigrateVideoStorageJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mp4_video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt;

    &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;migrate_to_mp4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So then, in a console you can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails console
MigrateVideoStorageJob.perform_later
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now there are some issues with this job. &lt;/p&gt;

&lt;p&gt;The first issue is that it goes 1 by 1 which means for every video we're going to incur a full DB query. &lt;/p&gt;

&lt;p&gt;Its not great, but there was only roughly 100 videos to migrate so I didn't think it was worth batching and worrying about performance. &lt;/p&gt;

&lt;p&gt;"Real artists ship".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yes-were-done"&gt;
  &lt;/a&gt;
  Yes. We're done.
&lt;/h2&gt;

&lt;p&gt;Anyways, this was my foray into migrating HLS videos over to MP4 videos. Thanks for coming along for the ride!&lt;/p&gt;

</description>
      <category>hls</category>
      <category>video</category>
      <category>rails</category>
      <category>activestorage</category>
    </item>
    <item>
      <title>Guia intergalático do artigo técnico</title>
      <author>Letícia Silva</author>
      <pubDate>Thu, 01 Jul 2021 23:51:47 +0000</pubDate>
      <link>https://dev.to/dii_lua/guia-intergalatico-do-artigo-tecnico-1g3f</link>
      <guid>https://dev.to/dii_lua/guia-intergalatico-do-artigo-tecnico-1g3f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tudo-o-que-voc%C3%AA-precisa-saber-para-fazer-o-seu-primeiro-texto-sair-do-papel"&gt;
  &lt;/a&gt;
  Tudo o que você precisa saber para fazer o seu primeiro texto sair do papel!
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Uma das premissas mais verdadeiras na vida para mim é aquela que diz que "Todo mundo tem algo a aprender e a ensinar". E é baseado nisso que eu sempre incentivei as pessoas a compartilharem seus conhecimentos, seja através de palestras, tutoriais, artigos, posts ou vídeos. Independente da forma, quando você decide compartilhar algo que já sabe, está passando por um processo nada trivial e muito importante, onde precisa explicar um conteúdo que já aprendeu para uma pessoa que possa (ou não) ter conhecimento no assunto. E sendo sincera, a segunda opção é bem mais comum e difícil de se colocar em prática. Por isso mesmo, decidi vir aqui compartilhar um pouco da minha experiência sobre a tarefa - NADA fácil - de escrever artigos técnicos acessíveis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-lel%C3%AA-por-que-acess%C3%ADvel"&gt;
  &lt;/a&gt;
  Mas Lelê, por que "acessível"?
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/S5Jpp1srTJayEJZKvU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/S5Jpp1srTJayEJZKvU/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Meme com mulher perguntando "por que?"&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;E eu te explico: materiais técnicos, como artigos, possuem uma fama de serem "difíceis de entender". E óbvio que essa constatação não é 100% verdadeira, mas ela se torna real a partir do momento em que houve apenas uma preocupação na criação do material em questão: a sua existência. Uma propriedade muito importante e lembrada com pouca frequência é a tal de legibilidade, que torna as coisas mais fáceis de se ler, ou entendíveis. E há muitas maneiras de colocar essa engrenagem para girar, mas a principal é: ter empatia com quem está lendo. Você pode não saber quem é ou não ter conhecimento do background da pessoa leitora, mas deve ter como parâmetro que a sua avó (ou qualquer outra pessoa que não tenha muito conhecimento no assunto) consiga compreender o que está escrito.&lt;/p&gt;

&lt;p&gt;Partindo desse ponto, vamos para um dos tópicos que eu mais amo no mundo: &lt;strong&gt;analogias&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-arte-de-explicar-utilizando-exemplos-simples"&gt;
  &lt;/a&gt;
  A arte de explicar utilizando exemplos simples
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/l44QiZECjPEjLAwzm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l44QiZECjPEjLAwzm/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Mulher jogando papéis picados para alto&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Quando penso em analogia, sempre me vem a cabeça atividades comuns do dia a dia: andar, escovar os dentes, cozinhar, fazer compras, assistir série. Esse termo faz referência a um processo que passa a ser explicado de uma maneira descomplicada, e normalmente utiliza coisas que façam parte da realidade da maioria das pessoas. Por exemplo, minha avó não entende o que é um algoritmo, mas sabe o que é uma receita de bolo. Então, se eu disser para ela que um algoritmo funciona como uma série de passos, assim como uma receita de bolo, provavelmente ela entenderá o conceito (mesmo sem saber programação) e conseguirá construir uma ponte entre os dois assuntos.&lt;/p&gt;

&lt;p&gt;Mas vamos a outro exemplo. Imagine que você está tentando explicar a alguém sobre o conceito de Github, mas não consegue encontrar um conceito do dia a dia para utilizar na explicação. E eis que você pensa numa geladeira! O Github é um site que funciona como uma "rede social das pessoas programadoras", onde se armazena código e projetos em repositórios. Uma geladeira é um local cheio de prateleiras e compartimentos, onde se guardam alimentos e pratos prontos. Então, se pensarmos no Github como uma geladeira que não guarda comida, mas principalmente código, e possui divisões de acordo com o tipo / categoria / área em que o código está sendo utilizado, as coisas ficam muito mais legíveis e visuais.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#uma-imagem-vale-mais-que-mil-palavras-ou-quase-isso"&gt;
  &lt;/a&gt;
  "Uma imagem vale mais que mil palavras", ou quase isso
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/2XskdWTCW96qaKAJncA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2XskdWTCW96qaKAJncA/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Gif com as obras do pintor Van Gogh&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Que um exemplo pode ficar bem mais explícito como uma imagem não se discute. Mas, no momento em que se deseja ilustrar algo com uma figura, deve pensar-se também em alguns outros pontos, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na resolução dessa imagem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não é porque "&lt;em&gt;no meu computador funciona&lt;/em&gt;" que no computador de outras pessoas vai funcionar, não é mesmo? O que você consegue visualizar bem no seu monitor de 29' full HD pode não ser o ideal para quem está lendo do celular. Por esse motivo, sempre prefira figuras com alta resolução ou envie seu artigo para outras pessoas verificarem se as fotografias não estão distorcidas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nas cores dessa imagem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O que funciona para um pode não funcionar para os outros. Você pode conseguir identificar todas as cores presentes em uma imagem, mas há pessoas que não e tá tudo bem. Lembre-se sempre disso quando for descrever a imagem, pois citar uma determinada parte da figura através de sua cor pode não ser acessível.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se a figura contém texto, e se ele está legível&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sempre tome o cuidado de descrever as imagens, para que pessoas cegas, com baixa visão ou com alguma dificuldade na vista não sejam prejudicadas por não conseguirem visualizar a foto em questão.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na explicação dessa imagem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagens devem ser usadas quando necessárias, mas isso não significa soltar elas aleatoriamente ao longo do texto. Sempre tente manter a coerência entre o que está escrito e ilustrado.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nos direitos autorais da figura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagens, se não criadas pela própria pessoa autora do texto, foram retiradas de algum lugar. É super importante passar dentro do artigo de onde a figura foi extraída, e tentar ao máximo utilizar imagens que possuam licença de direitos autorais livre. Nesses sites você pode encontrar figuras nessa categoria:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#foque-na-comunica%C3%A7%C3%A3o-n%C3%A3o-no-tecniqu%C3%AAs"&gt;
  &lt;/a&gt;
  Foque na comunicação, não no &lt;em&gt;tecniquês&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/RdtcEbPrajYcmM8oH0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RdtcEbPrajYcmM8oH0/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Homem se comunicando enquanto faz gestos com as mãos&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Mas eu entendo o que eu escrevo"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bem, bom pra você né, anjo. Utilizar muitos termos técnicos, além de dificultar a leitura do conteúdo que você dedicou seu tempo e preprou com carinho, faz com que uma gama de pessoas não sintam-se capazes de consumir o seu conteúdo por ele ser difícíl de interpretar. Nas minhas aulas de Storytelling, sempre enfatizava esse fato para a turma, pois é crucial para que as pessoas sintam-se confortáveis o suficiente com o enredo que você montou e se identifiquem com a história.  &lt;/p&gt;

&lt;p&gt;Lembre-se: não usar o tecniquês não significa escrever algo ruim, mas sim fazer com que mais pessoas entendam o conteúdo que você está publicando e ajudar o conhecimento a ser disseminado.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entenda quem você quer atingir&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não adianta produzir um artigo com conteúdo extremamente avançados, se o seu desejo é alcançar as pessoas que possuem mais senioridade, e vice versa. Se você quer ter um público mais geral e menos específico, pense em estratégias e conteúdos que possam ajudar nisso, e que atinjam essas pessoas.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#comunique"&gt;
  &lt;/a&gt;
  C-O-M-U-N-I-Q-U-E
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/jV4wbvtJxdjnMriYmY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jV4wbvtJxdjnMriYmY/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Meme do Bob Esponja apresentando a comunicação&lt;/center&gt;  

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Hoje em dia muito se fala sobre &lt;strong&gt;comunicação neutra&lt;/strong&gt; e afins. Você sabe realmente o que isso significa e sua importância?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pessoas são pessoas, e apenas isso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse termo surgiu com o intuito de fazer com que &lt;strong&gt;TODAS&lt;/strong&gt; as pessoas, independente de gênero ou opção sexual, sintam-se representadas. Isso significa que, referir-se a alguém como "desenvolvedor", "o programador", "o cara", é algo excludente e que deve ficar no passado. Além de ignorar a existência de mulheres em uma determinada área ou assunto (isso é muito comum em tecnologia, principalmente em vagas), você pode acabar excluindo pessoas não binárias ou que se identifiquem com um pronome que você não esteja utilizando.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O temido "&lt;em&gt;x&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu já vi muita gente criticando e muita gente usando termos terminados com "x" no final, como "desenvolvedorxs", "cientistx", "alunxs", etc. Acontece que, esse &lt;strong&gt;x&lt;/strong&gt; que as pessoas cismam em colocar para deixar as coisas "&lt;em&gt;inclusivas&lt;/em&gt;" acaba tornando o processo mais doloroso para pessoas deficientes visuais que precisam utilizar leitores de tela. Isso porque leitores de tela não conseguem reproduzir o som representado por esses termos, exatamente por esse &lt;strong&gt;x&lt;/strong&gt; não estar configurado nos equipamentos. Por esse motivo, NÃO UTILIZE X nos termos para tentar ser uma pessoa inclusiva. O efeito rebote é real.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tira o "&lt;em&gt;x&lt;/em&gt;", mas coloca o "&lt;em&gt;e&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como solução para não usar o &lt;strong&gt;x&lt;/strong&gt;, as pessoas começaram a colocar o &lt;strong&gt;e&lt;/strong&gt; no final, como forma de tornar acessível e diverso o texto escrito. Acontece que, de acordo com as normas da língua portuguesa, isso é uma prática errada. Eu não estou aqui para defender um lado ou outro, mas para dizer que: há uma saída que não exclua absolutamente ninguém - seja por exclusão de minorias, seja por ilegibilidade - e que torna a leitura mais fluida, acessível e inclusiva. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O inclusivo - e mais esquecido - substantivo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Composto, primitivo, derivado, próprio: calma, isso não é aula de português, mas também é importante! Um dos tipos de substantivos menos citados e mais importante é o coletivo, que engloba um grupo de itens do mesmo tipo, e é extremamente útil para se referir a um grupo de pessoas, sem necessariamente utilizar um pronome que defina gênero. &lt;em&gt;Grupo&lt;/em&gt;, &lt;em&gt;comunidade&lt;/em&gt;, &lt;em&gt;pessoas&lt;/em&gt;, &lt;em&gt;turma&lt;/em&gt;, &lt;em&gt;estudantes&lt;/em&gt; são ótimos exemplos para fazer isso.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#seja-confiante"&gt;
  &lt;/a&gt;
  Seja confiante!
&lt;/h2&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/loSQ6ueH5uC8CQsYXp/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/loSQ6ueH5uC8CQsYXp/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Personagem da série Lucifer emanando confiança&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Quando perguntei no &lt;a href="https://twitter.com/dii_lua/status/1396587542674350083"&gt;Twitter&lt;/a&gt; quais as maiores dúvidas da galera a respeito de artigo técnico, recebi diversas respostas, e vou tentar respondê-las agora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Será que vai ser útil pra alguém?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Será que vai ser realmente útil?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu tenho uma tese (vulgo mantra) de que todo mundo há algo para compartilhar e algo para aprender. Isso serve para eu que estou escrevendo desse lado, para você que está lendo do outro, para a pessoa idosa que está caminhando na rua e para a criança brincando de futebol no andar de cima. Independente de quem seja, as pessoas têm muito a agregar. E por isso mesmo isso não deveria ser uma pergunta, mas uma AFIRMAÇÃO de que sim, o seu conteúdo tem muita utilidade para alguém.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Será que o que vou dizer está certo? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Olha, eu não conheço alguém que saiba de absolutamente tudo. Mesmo quem seja visto como uma referência de uma determinada área, essa pessoa pode não saber tudo dela. E tá tudon bem! Precisamos normalizar que as pessoas, ainda mais as desenvolvedoras, não precisam ser gênias das tecnologias que trabalham para poder falar sobre elas :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Será que alguém consegue explicar melhor que eu?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talvez. Não posso te afirmar nem negar, exatamente pelo fato do mundo ter quase 8 bilhões de pessoas. Mas isso não significa que, só porque há a possibilidade de alguém explicar melhor, você não deva se permitir explicar sobre um tópico. &lt;/p&gt;

&lt;p&gt;Vou te dar um exemplo pessoal: eu tenho uma palestra, que fiz lá em 2018, e dou ela até hoje. Seu nome é "Data Science: É de comer?", e eu já palestrei em eventos nacionais, internacionais e locais usando ela, dezenas de vezes. Ela inspirou artigos, palestras e podcasts, e muita gente fala bem quando levo ela para os eventos. Mesmo te contando tudo isso, não significa que seja a melhor palestra do mundo. A única certeza que ela me traz é: toda vez que vou ministrá-la em algum lugar, eu aprendo mais sobre o assunto. E consigo aprimorar minhas falas, slides e ganchos, simplesmente porque estou praticando isso. Então, antes de se comparar com alguém ou considerar que uma determinada pessoa consegue explicar melhor que você, faça! Apenas faça e se aprimore nisso, porque essa é a única maneira de voce ganhar experiência: praticando. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Como se limitar a pesquisa para não se perder em tantas possibilidade?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Definindo seus objetivos e metas a serem atingidas com um determinado conteúdo. Quando você decide falar a respeito de um assunto, deve pensar no que pretende focar e como deseja abordar o tópico em questão, pois esses pilares te nortearão no desenvolvimento da sua pesquisa, e fará com que você estabeleça os principais pontos que deseja destacar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;De que forma devo escrever? O mais formal possível? Menos formal?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depende muito de que está escrevendo. Eu, por exemplo, não uso uma linguagem extremamente formal, porque gosto que as pessoas se identifiquem com o que estou abordando. Isso também não significa que eu use apenas termos que estão &lt;em&gt;hypados&lt;/em&gt; (famosos) na área, apenas porque eles ganharam visibilidade no momento, ou não respeite as normas do português. Escrita pra mim, independente do gênero ou objetivo, é uma forma de se expressar. E gosto que as pessoas e enxerguem no que eu produzo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Será que não estou passando alguma informação errada ou não tão certa?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Olha, eu sempre pesquiso muito antes de passar uma determinada informação, e recomendo que as pessoas também façam isso. Porém, há dois fatos bem interessantes sobre esse ponto, que são: não precisamos saber tudo, e errar é humano. Engana-se quem pensa que artigos técnicos são carregados de informações 100% verídicas na maior parte do tempo, porque não são. Já encontrei diversas vezes erros e afirmações gritantes que, claramente, mostravam que não havia sido feito uma pesquisa ou a pessoa que produziu tinha embasamento. Por isso mesmo, a recomendação é: pesquise, e se não souber, pergunte. Não custa nada, inclusive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Me embasar em artigos de diferentes pessoas sobre o assunto ou buscar afunilar mais minha base de busca?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu adoro me embasar em artigos de diferentes pessoas, e também amo fazer pesquisas para tornar a definição do que pretendo escrever mais clara. Uma coisa não impede a outra, mas acho que há alguns pontos importantes nisso:&lt;/p&gt;

&lt;p&gt;-&amp;gt; Se embasar é diferente de fazer cópia. Diversas vezes, artigos e conteúdos de outras pessoas me deram ideias, mas plágio é crime e sou totalmente contra a isso;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Sempre que citar a fala / pesquisa / conteúdo de alguém, dê os créditos e de preferência, coloque o link para o material;&lt;/p&gt;

&lt;p&gt;-&amp;gt; Quando for pesquisar para afunilar mais a sua base de buscqa, tome cuidado para não acabar se encantando com outras temáticas e esquecendo a sua original. Não há problema algum em escrever sobre tópicos relacionados, mas deixar o assunto que você queria tratar porque encontrou outro pode gerar frustração (já aconteceu comigo). Nesse caso, recomendo optar por escrever dois textos, cada um tratando de uma temática específica, ou caso deseje, englobando um assunto no outro. Reflita se faz sentido.      &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quais os passos para produzir desde o início até sua publicação?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bem, há muitas formas de se fazer isso, incluindo rascunhar em um papel qual é a estrutura que você quer obter e as metas a serem atingidas com o seu artigo, mas acredito que um esqueleto sempre pode ajudar!&lt;/p&gt;

&lt;p&gt;Pensando nisso, decidi montar um esqueleto baseado no que faço, e deixei disponível para você baixar e modificar como quiser! O template está bem simples, e você pode encontrá-lo &lt;a href="https://drive.google.com/file/d/1H0gANJP8i70QJDfcFOSxwo8iMxpVT2OO/view?usp=sharing"&gt;aqui&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Caso haja interesse, posso organizar uma live ou workshop para que possamos construir juntos! &lt;/p&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/KZAMZlHBmqZ6Zu0HBO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KZAMZlHBmqZ6Zu0HBO/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;center&gt;Gif de um boneco mandando corações&lt;/center&gt;

&lt;p&gt;ㅤ&lt;/p&gt;

&lt;p&gt;Você também pode conferir mais artigos meus e como organizo as ideias nos meus perfis do &lt;a href="https://dev.to/dii_lua"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://medium.com/@dii_lua"&gt;Medium&lt;/a&gt; e &lt;a href="https://www.therelicans.com/dii_lua"&gt;The Relicans&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Se quiser trocar uma ideia, me dá um alô no &lt;a href="https://twitter.com/dii_lua"&gt;Twitter&lt;/a&gt; que a gente conversa!&lt;/p&gt;

&lt;p&gt;Beijinhos científicos, &lt;/p&gt;

&lt;p&gt;Lelê &amp;lt;3&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rotation in AVL tree</title>
      <author>Aya Bouchiha</author>
      <pubDate>Thu, 01 Jul 2021 23:13:04 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/rotation-in-avl-tree-376o</link>
      <guid>https://dev.to/ayabouchiha/rotation-in-avl-tree-376o</guid>
      <description>&lt;p&gt;Hi, on this amazing day we're going to discuss rotation in the AVL tree! if you're not familiar with AVL trees check this &lt;a href="https://dev.to/ayabouchiha/introduction-to-avl-tree-fbk"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-of-rotation"&gt;
  &lt;/a&gt;
  Type of Rotation
&lt;/h2&gt;

&lt;p&gt;before starting, I want to remention that the BalanceFactor &lt;code&gt;BalanceFactor = height(left sub-tree) - height(right sub-tree)&lt;/code&gt; should be -1, 0 or 1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#right-rotation"&gt;
  &lt;/a&gt;
  Right rotation
&lt;/h3&gt;

&lt;p&gt;We use this rotation when the tree is a left unbalanced tree like this example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     15 (bf:2) 
    /
  11 (bf:1)      left unbalanced tree
 /
9 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this case, the tree needs a right rotation (&lt;em&gt;RR&lt;/em&gt;), so the unbalanced node(&lt;em&gt;15&lt;/em&gt;) becomes a right child of its left child (&lt;em&gt;11&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           11  (bf:0)
         /    \
(bf:0)  9     15 (bf:-0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#left-rotation"&gt;
  &lt;/a&gt;
  Left rotation
&lt;/h3&gt;

&lt;p&gt;We use this rotation when the tree is a right unbalanced tree like this example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 15 (bf:-2) 
  \
   17 (bf:-1)   right unbalanced tree
     \
      19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this case, the tree needs a left rotation (&lt;em&gt;LL&lt;/em&gt;), so the unbalanced node(&lt;em&gt;15&lt;/em&gt;) becomes a left child of its right child (&lt;em&gt;17&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           17  (bf:0)
         /    \
(bf:0)  15     19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rightleft-rotation"&gt;
  &lt;/a&gt;
  Right-Left rotation
&lt;/h3&gt;

&lt;p&gt;The Right Left Rotation is a combination of right rotation followed by a left rotation. Let's see this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;15 (bf:-2)
  \ 
   19 (bf:1)
  / 
16 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;firstly, we'll perform a right rotation so this tree we'll be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     15 (bf:-2)
      \
       16 (bf:-1)
        \
         19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we'll perform a left rotation because the tree becomes a right unbalanced tree. That's why (&lt;em&gt;15&lt;/em&gt;) will become the left child of its right child (&lt;em&gt;16&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         16 (bf:0)
        /  \
(bf:0)15    19 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#leftright-rotation"&gt;
  &lt;/a&gt;
  Left-Right rotation
&lt;/h3&gt;

&lt;p&gt;The Left-Right Rotation is a combination of left rotation followed by a right rotation. Let's see this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    15  (bf:2)
   /  
 11 (bf:-1)
   \
    13 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;firstly, we'll perform a left rotation of the tree we'll be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     15 (bf:2)
    /
   13  (bf:1)
  /
11 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we'll perform a right rotation because the tree becomes a left unbalanced tree. That's why (&lt;em&gt;15&lt;/em&gt;) will become the right child of its left child (&lt;em&gt;13&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          13 (bf:0)
         /  \
(bf:0) 11    15 (bf:0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tomorrow, I'll cover the implementation of insertion using &lt;strong&gt;python&lt;/strong&gt;!&lt;br&gt;
Thank you for your time and happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.educative.io/edpresso/common-avl-rotation-techniques"&gt;https://www.educative.io/edpresso/common-avl-rotation-techniques&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/avl-tree-insertion-rotation-and-balance-factor/"&gt;https://www.freecodecamp.org/news/avl-tree-insertion-rotation-and-balance-factor/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/avl_tree_algorithm.htm"&gt;https://www.tutorialspoint.com/data_structures_algorithms/avl_tree_algorithm.htm&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Tree_rotation"&gt;https://en.wikipedia.org/wiki/Tree_rotation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_8qqlVH5NC0"&gt;https://www.youtube.com/watch?v=_8qqlVH5NC0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=YWqla0UX-38"&gt;https://www.youtube.com/watch?v=YWqla0UX-38&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The NEW Manual Validation Task for Azure DevOps YAML Pipelines Demystified</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 01 Jul 2021 23:04:13 +0000</pubDate>
      <link>https://dev.to/n3wt0n/the-new-manual-validation-task-for-azure-devops-yaml-pipelines-demystified-385c</link>
      <guid>https://dev.to/n3wt0n/the-new-manual-validation-task-for-azure-devops-yaml-pipelines-demystified-385c</guid>
      <description>&lt;p&gt;With the newly released Manual Validation task you can pause a YAML pipeline mid-stage. This allows you to perform manual or offline activities and then resume (or reject) the run. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As I've mentioned, you can use this new task in a YAML pipeline to pause a run within a stage, typically to perform some manual actions or validations, and then resume/reject the run.&lt;/p&gt;

&lt;p&gt;This is especially useful in scenarios where you want to pause a pipeline and validate configuration settings, build package, etc. before moving on to a long-running, compute-intensive job.&lt;/p&gt;

&lt;p&gt;When the Manual validation task is activated during a pipeline, it displays a message bar containing a link that opens the Manual validation dialog containing the instructions. After carrying out the manual steps, the administrator or user can choose to resume the run or reject it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Let's see this in action. We will cover how to configure Azure Pipelines to use it and how to use it.&lt;/p&gt;

&lt;p&gt;Here you have &lt;strong&gt;the video with the whole demo and explanation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sfb3d100JPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/sfb3d100JPo"&gt;Link to the video: https://youtu.be/sfb3d100JPo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;Remember that, as I've mentioned in the video, you can use this new approach only in an agentless job of a YAML pipeline. If like in my example you have other jobs already, you would need to add a job with pool: server to make this work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;I wanna know what you think about this feature, so let me know in the comment section below.&lt;/p&gt;

&lt;p&gt;Also, check &lt;a href="https://youtu.be/3cGtA__dKUc"&gt;this video over here&lt;/a&gt;, where I talk about the differences between Classic and YAML pipelines for both Build and Release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sfb3d100JPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>pipelines</category>
      <category>cicd</category>
      <category>yaml</category>
    </item>
    <item>
      <title>Top 5 DEV Comments from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 01 Jul 2021 22:58:09 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-568n</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-568n</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;Starting off Top Comments with a movie quote on this post about &lt;a href="https://dev.to/knajjars/learnings-after-5-years-of-being-a-hipster-in-tech-1b0n"&gt;being a hipster in tech&lt;/a&gt; is exactly what we needed this week, thanks &lt;a class="mentioned-user" href="https://dev.to/booyouon"&gt;@booyouon&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/booyouon"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPmDOheO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--90K7P0N6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644362/a837d826-1fa2-41ff-8900-41a34b21cad0.jpg" alt="booyouon profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/booyouon"&gt;
        &lt;span class="comment-username"&gt;Vince Abuyuan&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/booyouon/comment/1fmb7" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 27
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This reminds me of a quote from the dead poet society “ medicine, law, business, engineering, these are noble pursuits and necessary to sustain life. But poetry, beauty, romance, love, these are what we stay alive for. ” :) &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://dev.to/devteam/what-was-your-win-this-week-10c6"&gt;Weekly Wins&lt;/a&gt; keep us going. Congrats, &lt;a class="mentioned-user" href="https://dev.to/cenacr007_harsh"&gt;@cenacr007_harsh&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/cenacr007_harsh"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwqQPxuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--IaELHd5L--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/d1caf43e-4478-42c3-8ac3-f3b2980d031b.png" alt="cenacr007_harsh profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/cenacr007_harsh"&gt;
        &lt;span class="comment-username"&gt;KUMAR HARSH&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/cenacr007_harsh/comment/1fl62" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 25
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;My last post on Dev crossed 10k views for the first time 🤗&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes we all need to be explained things &lt;a href="https://dev.to/peter/explain-a-memory-leak-like-i-m-five-2664"&gt;like we're five&lt;/a&gt;. Thanks for the great walkthrough, &lt;a class="mentioned-user" href="https://dev.to/glsolaria"&gt;@glsolaria&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/glsolaria"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5tRa3AK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0V-Bp95C--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/229706/ea693a42-a672-4081-8f6e-135b9069fd24.jpg" alt="glsolaria profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/glsolaria"&gt;
        &lt;span class="comment-username"&gt;G.L Solaria&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/glsolaria/comment/1fkk7" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 25
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;To extend the lego block analogy and make the explanation unnecessarily more complicated for applications running with managed memory models (e.g. C# and Java)...&lt;/p&gt;

&lt;p&gt;Imagine there is an invisible robot vacuum cleaner (i.e. the garbage collector) that runs around automatically picking up lego blocks. &lt;/p&gt;

&lt;p&gt;Nobody is really sure when the robot will run and what it will pick up.  &lt;/p&gt;

&lt;p&gt;Sometimes it will not pick up some of the blocks even when you know it has run (e.g. when memory is pinned) and sometimes the block could be collected but the robot just doesn't feel like picking it up on that run. &lt;/p&gt;

&lt;p&gt;To frustrate you further, when you go looking for leaked blocks, sometimes they are chained together and the root block actually stopping a bunch of other blocks from being collected is a block you least suspect.&lt;/p&gt;

&lt;p&gt;I forgot to mention that it is also a Heisenberg robot so when you go looking for leaked blocks, the robot starts behaving differently.&lt;/p&gt;

&lt;p&gt;So in conclusion, not only do you trip over the blocks in the dark but you might get super lucky and trip over the invisible robot vacuum too! &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://dev.to/chetan_atrawalkar/how-to-avoid-stress-during-coding-56f1"&gt;Stress during coding&lt;/a&gt; can be a huge roadblock to a successful launch, day, or project. Meditiation really is a great way to help relieve the pain - good tip, &lt;a class="mentioned-user" href="https://dev.to/qwby"&gt;@qwby&lt;/a&gt;
 !&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/qwby"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_DBZ8krk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B-LSnX65--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620049/734f4236-9fae-478f-a02f-e11c20742830.png" alt="qwby profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/qwby"&gt;
        &lt;span class="comment-username"&gt;Dominik Halfkann&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/qwby/comment/1fn2p" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 28
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I would add to that: Meditation.&lt;br&gt;
It helps relief stress and anxiety, can make you more focused, you’ll have more patience and experience a whole lot of other positive effects.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jonsilver"&gt;@jonsilver&lt;/a&gt;
 really adds to this post on &lt;a href="https://dev.to/mayank0508/things-you-should-master-before-you-jump-on-react-js-4d1a"&gt;things to master before working with React.js&lt;/a&gt;! Thanks for the comment!&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/jonsilver"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oyv9GU68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ti3GWHZB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174828/bb99344d-0862-4126-a7da-814f99808368.jpg" alt="jonsilver profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/jonsilver"&gt;
        &lt;span class="comment-username"&gt;Jon Silver&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/jonsilver/comment/1fm8b" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jun 27
  &lt;/time&gt;

    • Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Jun 27&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I'd go a lot further than a basic knowledge of Javascript. You need to intimately understand Javascript fundamentals like lexical scopes and closures, and referential equality vs value equality, so you can understand why function-based components and hooks work the way they do. Most Javascript developers have no idea about these concepts until they're forced to relearn by diving into React, which can be a much more painful introduction to the craft than learning Javascript properly beforehand.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ✌&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Data Structures in TypeScript - Graph</title>
      <author>Ricardo Borges</author>
      <pubDate>Thu, 01 Jul 2021 22:32:34 +0000</pubDate>
      <link>https://dev.to/ricardo93borges/data-structures-in-typescript-graph-551i</link>
      <guid>https://dev.to/ricardo93borges/data-structures-in-typescript-graph-551i</guid>
      <description>&lt;p&gt;The graph is a data structure that consists of vertices (or nodes) that can be connected to other vertices by edges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dE12vwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623451532/data%2520structures/graph_1_w9efdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dE12vwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623451532/data%2520structures/graph_1_w9efdw.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;degree&lt;/strong&gt; is the number of edges that are connected to a vertex, for example, the vertex &lt;strong&gt;A&lt;/strong&gt; has a degree of &lt;strong&gt;1&lt;/strong&gt; and the vertex &lt;strong&gt;C&lt;/strong&gt; has a degree of 2.&lt;/p&gt;

&lt;p&gt;Graphs can be either directed or undirected, directed graphs are like a one-way street, undirected is like a two-way street.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4zxawzYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_2_tzprzz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4zxawzYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_2_tzprzz.png" alt="directed and undirected graphs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphs can also have cycles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dx7adKeO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_3_v0zmhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dx7adKeO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_3_v0zmhu.png" alt="cyclic and acyclic graphs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphs might be a disconnected one, that means it consists of isolated subgraphs, or a connected one, in which all every pair of nodes are connected by an edge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2kY9F_hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_4_eujwdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2kY9F_hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_4_eujwdh.png" alt="connected and disconnected graphs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphs can be used to represent networks, websites structure, also used in path optimization algorithms, there are applications in other fields, such as linguistics, physics, chemistry, biology, mathematics, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#representation"&gt;
  &lt;/a&gt;
  Representation
&lt;/h3&gt;

&lt;p&gt;Graphs can be represented with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adjacency list&lt;/strong&gt; - Every node stores a list of adjacent vertices, for example, an array or that contains all vertices and each vertex contains another array with adjacent vertices, other data structures can be used instead of an array, like a hash table and a linked list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adjacency matrix&lt;/strong&gt; - An NxN boolean matrix (where N is the number of vertices), if the matrix[i][j] stores the value true, there is a connection between the vertices i and j. In an undirected graph matrix[j][i] also will store the value true. You can use other types instead of boolean, for example, numbers to represent weight.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHhDIYKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_5_qpznlu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHhDIYKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623367833/data%2520structures/graph_5_qpznlu.png" alt="adjacency list and matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graph-search"&gt;
  &lt;/a&gt;
  Graph Search
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#depthfirst-search"&gt;
  &lt;/a&gt;
  Depth-first search
&lt;/h4&gt;

&lt;p&gt;Depth-first search is a way to navigate a graph, it starts from a given vertex and visits each branch completely before moving to another branch. DFS is often used when we need to visit every node in the graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgNkw-C8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623451532/data%2520structures/graph_6_pr8wqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgNkw-C8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623451532/data%2520structures/graph_6_pr8wqq.png" alt="graph depth-first search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using DPS on the graph above the nodes will be visited in the following order: A, B, D, C, E, F.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#breadthfirst-search"&gt;
  &lt;/a&gt;
  Breadth-first search
&lt;/h4&gt;

&lt;p&gt;This is another way to navigate a graph, it starts from a given vertex and visits all adjacent vertices before go to any of their children. BFS is useful to find a path between two nodes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgNkw-C8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623451532/data%2520structures/graph_6_pr8wqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgNkw-C8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623451532/data%2520structures/graph_6_pr8wqq.png" alt="graph breadth-first search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using DPS on the graph above the nodes will be visited in the following order: A, B, E, F, D, C.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bidirectional-search"&gt;
  &lt;/a&gt;
  Bidirectional search
&lt;/h4&gt;

&lt;p&gt;Consists of running two breadth-first searches simultaneously, each one starts from a different vertex and runs until they collide. This is useful to find the shortest path between two vertices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wnBTbQKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623452079/data%2520structures/graph_7_yzwhhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnBTbQKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1623452079/data%2520structures/graph_7_yzwhhf.png" alt="Bidirectional search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Heres an implementation of a directed graph using a adjacency list, because it will perform better in almost all operations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addAdjacent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;removeAdjacent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nl"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Add a new node if it was not added before
   *
   * @param {T} data
   * @returns {Node&amp;lt;T&amp;gt;}
   */&lt;/span&gt;
  &lt;span class="nx"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Remove a node, also remove it from other nodes adjacency list
   *
   * @param {T} data
   * @returns {Node&amp;lt;T&amp;gt; | null}
   */&lt;/span&gt;
  &lt;span class="nx"&gt;removeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodeToRemove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nodeToRemove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAdjacent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodeToRemove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodeToRemove&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Create an edge between two nodes
   *
   * @param {T} source
   * @param {T} destination
   */&lt;/span&gt;
  &lt;span class="nx"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourceNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;destinationNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;sourceNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAdjacent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destinationNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Remove an edge between two nodes
   *
   * @param {T} source
   * @param {T} destination
   */&lt;/span&gt;
  &lt;span class="nx"&gt;removeEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourceNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;destinationNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourceNode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;destinationNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sourceNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAdjacent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Depth-first search
   *
   * @param {T} data
   * @param {Map&amp;lt;T, boolean&amp;gt;} visited
   * @returns
   */&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;depthFirstSearchAux&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;depthFirstSearchAux&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;depthFirstSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;depthFirstSearchAux&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Breadth-first search
   *
   * @param {T} data
   * @returns
   */&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;breadthFirstSearchAux&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;breadthFirstSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breadthFirstSearchAux&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>datastructures</category>
      <category>typescript</category>
      <category>graph</category>
    </item>
    <item>
      <title>A light introduction to the Android intent system</title>
      <author>Tristan Elliott</author>
      <pubDate>Thu, 01 Jul 2021 22:06:20 +0000</pubDate>
      <link>https://dev.to/theplebdev/a-light-introduction-to-the-android-intent-system-2fep</link>
      <guid>https://dev.to/theplebdev/a-light-introduction-to-the-android-intent-system-2fep</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This series is going to be dedicated to the basic of Android development. Join me and let us try to build and understand some cool stuff. All the resources I used to create this post can be found on ticketnote or &lt;a href="https://ticketnote.dev/ticket/B6qTDIVtQgsIgB0FGrAD"&gt;HERE&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#goals-of-this-post"&gt;
  &lt;/a&gt;
  Goals of this post
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By the end of this post I want both you and I to be able to  this statment:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Intent intent = new Intent(getActivity(), MainActivity.class);
        startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-an-intent-in-android"&gt;
  &lt;/a&gt;
  What is an Intent in Android?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Well as the documentation states, &lt;code&gt;An intent is an abstract description of an operation to be performed&lt;/code&gt;. This simply means that anytime you hear or read the word &lt;code&gt;intent&lt;/code&gt; you should automatically think to yourself, ok, some sort of work is about to be done. An intent can also be thought of as the glue between activities, as it is often used to share information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-intents"&gt;
  &lt;/a&gt;
  Types of Intents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Before we go any further we should clarify the types of intents and what those intents are used for. In Android there are two types of intents:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) Explicit Intents&lt;/strong&gt; : this is the kind of intent that has a specified component(class) to be run, often explicit intents will not include any other information. They are a way for an application to launch various internal activities as the user navigates through the app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The intent that we created is actually a explicit intent:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     new Intent(getActivity(), MainActivity.class)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2) Implicit Intents&lt;/strong&gt; : no component(class) is specified, instead we must provide additional information for the system to determine which of the available components is best to run for that intent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-an-intent"&gt;
  &lt;/a&gt;
  Building an Intent
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When building an Intent object we provide it with information and that information usually falls into 1 of 4 categories:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) The component name&lt;/strong&gt; : this is literally the name of the component that we want the intent to run. For us it the the &lt;code&gt;MainActivity.class&lt;/code&gt;. While the component name is optional, it is a very important piece of information to provide, especially when defining an explicit intent. No component name, no explicit intent. Without a component name the intent becomes &lt;code&gt;implicit&lt;/code&gt; and the Android system must use other information(action, data and category) to determine what component is the appropriate one to call.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now I am only talking about the &lt;code&gt;component name&lt;/code&gt; because in our example that is only what we use. If you wish to learn more about the intent information then you should read the documentation &lt;a href="https://developer.android.com/guide/components/intents-filters"&gt;HERE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#explaining-our-example"&gt;
  &lt;/a&gt;
  Explaining our Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Intent intent = new Intent(getActivity(), MainActivity.class);
        startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;I want to specify that when creating a new Intent, we are using the constructor that requires the current context. By calling getActivity() we get the current activity's context. The MainActivity.class is used to reference the instance of MainActivity that Java stores in memory and we are using it for the &lt;code&gt;component name&lt;/code&gt; and making this intent an explicit intent. Lastly we call &lt;code&gt;startActivity(intent)&lt;/code&gt;, which will use the information stored inside of the intent object to open the correct activity. With that being said we now have a light understanding on what an intent is and what it does.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of your day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/TristAndroidDev"&gt;Twitter&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>android</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MongoDB with Docker: Get started in 5 minutes</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 01 Jul 2021 22:01:30 +0000</pubDate>
      <link>https://dev.to/educative/mongodb-with-docker-get-started-in-5-minutes-4epn</link>
      <guid>https://dev.to/educative/mongodb-with-docker-get-started-in-5-minutes-4epn</guid>
      <description>&lt;p&gt;MongoDB is a popular &lt;strong&gt;NoSQL database that uses documents for data storage&lt;/strong&gt;. MongoDB is considered &lt;em&gt;schema-less&lt;/em&gt;, which means that it doesn't require a defined database schema. It's a great tool if you want to scale and evolve quickly, as it supports rapid iterative development and allows multiple team members to collaborate.    &lt;/p&gt;

&lt;p&gt;Docker is a tool that you can use to &lt;strong&gt;build applications that run on your host operating system&lt;/strong&gt;. It runs natively on Linux. Docker &lt;strong&gt;uses containers&lt;/strong&gt; and allows you to combine your application with all its dependencies into a single unit. With Docker, it's easy to create a container and start working with different technologies. &lt;/p&gt;

&lt;p&gt;In this tutorial, we'll create a MongoDB container using Docker. &lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#whyuse"&gt;Why use MongoDB with Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gettingstarted"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#settingup"&gt;Setting up a MongoDB container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interacting"&gt;Interacting with a MongoDB container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-mongodb-with-docker"&gt;
  &lt;/a&gt;
  Why use MongoDB with Docker?
&lt;/h2&gt;

&lt;p&gt;MongoDB enables &lt;strong&gt;high availability and scalability&lt;/strong&gt;. It works well in distributed environments like Docker containers. &lt;strong&gt;Using MongoDB with Docker allows us to have a portable database&lt;/strong&gt; that can be run on any server platform without having to worry about its configuration. We can use Docker with a MongoDB container image to make the database deployment process more efficient and straightforward.&lt;/p&gt;

&lt;p&gt;Containerizing a database provides &lt;strong&gt;consistency across different environments and enables a faster development setup&lt;/strong&gt;. &lt;a href="https://www.educative.io/blog/beginners-guide-to-docker"&gt;Docker containers&lt;/a&gt; are extremely portable, meaning that you can use containers wherever you want to operate. They run easily on the cloud and work with multiple cloud platforms. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;It's time to create our Mongo container! Before we can begin, let's make sure we have Docker installed onto our device. Once we have Docker installed, we're ready to get started. &lt;/p&gt;

&lt;p&gt;We'll begin by &lt;strong&gt;downloading the latest MongoDB Docker image from Docker Hub&lt;/strong&gt;. A Docker image is a file that allows us to execute code in a Docker container. This file holds instructions for creating containers that run on Docker.&lt;br&gt;
There are different versions of MongoDB images. Each Mongo image serves a different purpose. &lt;/p&gt;

&lt;p&gt;We'll use the standard Mongo image and use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker pull mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to download a specific version of MongoDB, we can use the same command and append the version tag. It would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker pull mongo:4.0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Check out the Docker Hub to find which tag will work for you.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-mongodb-container"&gt;
  &lt;/a&gt;
  Setting up a MongoDB container
&lt;/h2&gt;

&lt;p&gt;Now that we’ve created our Mongo image, we’re ready to set up our MongoDB container. We’ll &lt;strong&gt;use a Docker run command&lt;/strong&gt; to deploy a MongoDB instance and also give it a container name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --name tutorial mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we downloaded the 4.0.4 version of Mongo, we’d append the version tag to the end like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --name tutorial mongo:4.0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;tutorial&lt;/code&gt; is what we named our MongoDB container.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-a-mongodb-container"&gt;
  &lt;/a&gt;
  Interacting with a MongoDB container
&lt;/h2&gt;

&lt;p&gt;We created our container! We’re going to &lt;strong&gt;interact with the database through the bash shell client&lt;/strong&gt;. We’ll use the &lt;code&gt;docker exec&lt;/code&gt; command in the interactive terminal to connect to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it tutorial bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will connect to our deployment named &lt;code&gt;tutorial&lt;/code&gt; using the interactive terminal. It’ll also start the bash shell. Now, we’re ready to start using MongoDB. We can use the following command to launch the MongoDB shell client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s create a new database and name it “educativeblog”. We can do it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use educativeblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can’t use our database until we add data to it. We’re going to create three documents in a &lt;code&gt;dogs&lt;/code&gt; collection that will exist in our &lt;code&gt;educativeblog&lt;/code&gt; database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.dogs.save({ name: “Spot” })
db.dogs.save({ name: “Lucky” })
db.dogs.save({ name: “Mochi” })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to query for our MongoDB data, we can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.dogs.find({ name: “Spot” })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first steps with MongoDB and Docker! Running containers with Docker is very efficient. Creating a MongoDB container allows us to work with a portable and extensible NoSQL database without worrying about the underlying configuration of the devices we want to run it on. MongoDB is the most popular NoSQL database system, and it can be used for many things. There's still so much more to learn about MongoDB. &lt;br&gt;
Some recommended topics to cover next include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using MongoDB with Node.js&lt;/li&gt;
&lt;li&gt;MongoDB server&lt;/li&gt;
&lt;li&gt;MongoDB API and JSON entities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and more, check out Educative's course &lt;a href="https://www.educative.io/courses/definitive-guide-to-mongodb"&gt;&lt;strong&gt;The Definitive Guide to MongoDB&lt;/strong&gt;&lt;/a&gt;. In this interactive course, you'll get to see for yourself why there's so much hype around MongoDB. You'll learn basic Mongo command operations, using MongoDB in C# and .NET Core, and much more. Throughout the way, you'll use MongoDB to build projects as you learn. By the end, you'll know all about how to use MongoDB databases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-learning-about-mongodb-and-docker"&gt;
  &lt;/a&gt;
  Continue learning about MongoDB and Docker
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-kubernetes-beginners-guide"&gt;Getting Started with Docker and Kubernetes: a beginners guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-compose-tutorial"&gt;Docker Compose Tutorial: advanced Docker made simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/mongodb-versus-postgresql-databases"&gt;MongoDB vs PostgreSQL: what to consider when choosing a database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>mongodb</category>
      <category>docker</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Lightning fast &amp; simple Typescript Serverless builds</title>
      <author>Sebastian Bille</author>
      <pubDate>Thu, 01 Jul 2021 21:42:03 +0000</pubDate>
      <link>https://dev.to/aws-builders/lightning-fast-simple-typescript-serverless-builds-33ed</link>
      <guid>https://dev.to/aws-builders/lightning-fast-simple-typescript-serverless-builds-33ed</guid>
      <description>&lt;p&gt;Slow builds tend to cost more than just the time they waste. More than a few seconds and you're off checking Slack and all of a sudden it's been a few minutes. Any longer and all of a sudden you've been on Reddit for 20 minutes. Having a fast build means you've got a faster feedback loop and less risk of having to context switch due to getting distracted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; is "&lt;em&gt;An extremely fast JavaScript bundler&lt;/em&gt;" and in this tutorial, I'm going to show you how we can accomplish blazingly fast builds for Typescript &lt;a href="https://github.com/serverless/serverless"&gt;Serverless Framework&lt;/a&gt; projects, all while drastically reducing the configuration complexity compared with the alternatives. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i81-f_gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nb9r9rga7piv72rngih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i81-f_gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nb9r9rga7piv72rngih.png" alt="esbuild performance comparison"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo-project"&gt;
  &lt;/a&gt;
  Demo Project
&lt;/h2&gt;

&lt;p&gt;Let's start in an empty folder by running &lt;code&gt;npm init -y&lt;/code&gt; to initialize a new project. Next, we create a function that will act as our Lambda handler, in &lt;code&gt;src/function.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/function.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now since we'll be using Serverless and esbuild to package and deploy our app, we'll need to install Serverless and the Serverless &lt;a href="https://www.npmjs.com/package/serverless-esbuild"&gt;esbuild plugin&lt;/a&gt;: &lt;code&gt;npm install serverless serverless-esbuild --save-dev&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Finally, to deploy our app all we need to do is create a &lt;code&gt;serverless.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;esbuild-demo&lt;/span&gt;

&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;serverless-esbuild&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/function.handler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now we can run &lt;code&gt;npx serverless deploy&lt;/code&gt; to get our app up and running in AWS - transpiled, three shaken &amp;amp; ready to rock. No additional configuration is necessary but you can of course choose to &lt;a href="https://www.serverless.com/plugins/serverless-esbuild/"&gt;configure esbuilds behavior&lt;/a&gt; if needed. The transpile target is chosen automatically from the Lambda runtime from the Serverless provider setting, but  it will also automatically discover and respect &lt;code&gt;tsconfig.json&lt;/code&gt;  if you have it.&lt;/p&gt;

&lt;p&gt;Setting up unit testing with Jest is &lt;em&gt;almost&lt;/em&gt; just as simple. First, we need to add Jest, Jest types, and the Jest esbuild transformer: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install jest esbuild-jest @types/jest --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and then configure Jest to use the esbuild transformer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;jest.config.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"transform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"^.+\\.(j|t)sx?$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbuild-jest"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now also write Typescript unit tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tests/function.test.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[function]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return status 200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run them with &lt;code&gt;npx jest&lt;/code&gt;! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxYYK6nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vipp0tru84lxxdow2i9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxYYK6nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vipp0tru84lxxdow2i9e.png" alt="printscreen of running jest"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Having migrated a few more or less complicated projects from Webpack setups, esbuild tend to "just work" every time as a drop-in replacement. It provides significantly faster builds all while requiring a fraction of the config! 🚀&lt;/p&gt;

&lt;p&gt;You can find the complete demo project &lt;a href="https://github.com/TastefulElk/serverless-ts-esbuild-demo"&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/tastefulelk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>aws</category>
    </item>
    <item>
      <title>Combine an Array into a String Using the join Method</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 01 Jul 2021 21:32:09 +0000</pubDate>
      <link>https://dev.to/rthefounding/combine-an-array-into-a-string-using-the-join-method-2od4</link>
      <guid>https://dev.to/rthefounding/combine-an-array-into-a-string-using-the-join-method-2od4</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr = ["Playstation", "Rules"];
let str = arr.join(" ");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;str&lt;/code&gt; would have a value of the string &lt;code&gt;Playstation Rules&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's use the &lt;code&gt;join&lt;/code&gt; method (among others) inside the &lt;code&gt;sentensify&lt;/code&gt; function to make a sentence from the words in the string &lt;code&gt;str&lt;/code&gt;. The function should return a string. For example, &lt;code&gt;I-like-Star-Wars&lt;/code&gt; would be converted to &lt;code&gt;I like Star Wars&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sentensify(str) {
  // Only change code below this line


  // Only change code above this line
}
sentensify("May-the-force-be-with-you");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sentensify(str) {
return str.split(/\W/).join(" ")

}
console.log(sentensify("May-the-force-be-with-you")); will return May the force be with you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Larson, Quincy, editor. “Combine an Array into a String Using the join Method.” &lt;a href="Https://Www.freecodecamp.org/"&gt;Https://Www.freecodecamp.org/&lt;/a&gt;, Class Central, 2014, twitter.com/ossia. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I designed an offline-first app. An outline.</title>
      <author>Ash G</author>
      <pubDate>Thu, 01 Jul 2021 21:24:27 +0000</pubDate>
      <link>https://dev.to/ash_grover/how-i-designed-an-offline-first-app-an-outline-45c</link>
      <guid>https://dev.to/ash_grover/how-i-designed-an-offline-first-app-an-outline-45c</guid>
      <description>&lt;p&gt;Last week I wrote a &lt;a href="https://dev.to/ash_grover/i-built-my-app-in-react-react-native-and-nextjs-lessons-learned-3f38"&gt;blog post&lt;/a&gt; on how I built my &lt;a href="https://brisqi.com"&gt;app&lt;/a&gt; in React, React Native and NextJS. This blog post gives an insight on how I made it into an offline-first app. There are many ways to build an offline-first app so this is a general outline of how I built it and not a &lt;strong&gt;one-way-of-doing-things&lt;/strong&gt; guide. I use NoSQL database so I use the word 'documents' throughout the blog post, but you can think of them as a record of a table in a SQL database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#offlinefirst-what-does-that-even-mean"&gt;
  &lt;/a&gt;
  Offline-first? What does that even mean?
&lt;/h2&gt;

&lt;p&gt;I had to understand what offline-first apps really meant. I found different definitions of it around the internet. Partial offline functionality, partial offline data etc. but I wasn't satisfied with any of those, so I settled with the following definition:&lt;/p&gt;

&lt;p&gt;Offline-first apps are apps which can run and function completely offline or without needing the internet for an &lt;strong&gt;indefinite amount&lt;/strong&gt; of time. To offline-first apps, providing all functionality offline is the &lt;strong&gt;primary objective&lt;/strong&gt; and any online functionality such as syncing to cloud is secondary.&lt;/p&gt;

&lt;p&gt;There's also another category - &lt;strong&gt;offline-tolerant&lt;/strong&gt;. Offline-tolerant apps provide functionality offline for a limited amount of time or provide partial functionality and sooner or later they would require the user to sync data to the cloud. The amount of time is dependent on the type of functionality of the app and how the data is stored. Offline-tolerant apps mostly store partial data in a temporary cache, whereas offline-first apps store all it's data in a dedicated local database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-things-simple"&gt;
  &lt;/a&gt;
  Keep. Things. Simple.
&lt;/h2&gt;

&lt;p&gt;Offline-first architecture can get overwhelming, so I made sure to keep things as simple or primitive as possible when I started out. I didn't get into conflict resolution strategies or tried to handle poor network connection immediately. I worried about that stuff later.&lt;/p&gt;

&lt;p&gt;I worked with happy path and assumed that there were only two things I need to take care of - &lt;strong&gt;online and offline&lt;/strong&gt;. When the app is offline, &lt;strong&gt;I track actions performed by the user&lt;/strong&gt;. When the app is online - &lt;strong&gt;I replay those actions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This might seem a bit different compared to conventional way of doing things which is to track "changes" instead of actions. Tracking actions was so much easier than tracking changes. I don't have to keep a record of hundreds of changes a user might have made to a document in the database. I only track actions and replay them. That's it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-look-at-the-following-scenarios"&gt;
  &lt;/a&gt;
  Let's look at the following scenarios
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#when-the-app-is-online"&gt;
  &lt;/a&gt;
  When the app is online
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;User performs an action (add, modify, delete etc.).&lt;/li&gt;
&lt;li&gt;Store changes in local database.&lt;/li&gt;
&lt;li&gt;Push changes to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is straightforward. When the app is online, I just push out changes to both local database and server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-the-app-is-offline"&gt;
  &lt;/a&gt;
  When the app is offline
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;User performs an action.&lt;/li&gt;
&lt;li&gt;Store changes in local database.&lt;/li&gt;
&lt;li&gt;Track actions in a queue and also store them in the local database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the app is offline, I track what action(add, modify, delete etc.) was performed and the unique Id of the document so I can retrieve it later from the local database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-the-app-is-back-online-again"&gt;
  &lt;/a&gt;
  When the app is back online again
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get tracked actions.&lt;/li&gt;
&lt;li&gt;Replay those actions one by one skipping local database and push them out to server.&lt;/li&gt;
&lt;li&gt;Retrieve data from the server and merge the data. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I get the actions either from the local database or from the queue if still in memory and call the functions corresponding to those actions one by one. Each of those functions now also know to skip the local database and to call the server API directly. Finally, I retrieve the data from the server and merge it back into the local database (more on this later).&lt;/p&gt;

&lt;p&gt;It all seems doable right? Keeping things simple was key here.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#how-should-i-detect-if-something-changed"&gt;
  &lt;/a&gt;
  How should I detect if something changed?
&lt;/h2&gt;

&lt;p&gt;I needed to figure out how to track which document changed. I tried following techniques: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storing timestamps when the document changed and then comparing timestamps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I didn't go with this one because there were lot issues with this technique. What if a document was changed at the same time from two different devices. It could happen when there are multiple users modifying data or if the date and time of the devices are out of sync(its rare but it can happen).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Versioning documents.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every time a change is made, a new version is created and the latest document along with version history is pushed out. I didn't go with this either as this would've made things too complicated, again I wanted to keep things simple. Git and PouchDB/CouchDB do this and they both do it in a really efficient manner, but I was using Firebase not CouchDB for reasons which are out of scope for this blog post. I needed a new strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generating a new changeset ID each time a document is changed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Changeset ID is just an ID which changes whenever anything changes in that document. If changeset ID is different, that means something has changed so the document should be updated. This technique was simple enough for me to experiment with and implement so I went ahead with this approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conflict-resolution-strategy"&gt;
  &lt;/a&gt;
  Conflict resolution strategy
&lt;/h2&gt;

&lt;p&gt;Now, I needed a strategy to handle conflicts. There were two I could think of - either I merge all the changes coming in, or I take last write wins(LRW). I went ahead with last write wins. The strategy you pick is dependent on the type and importance of data you're merging. If you are building a note taking app then merging text data would make sense.&lt;/p&gt;

&lt;p&gt;In my case, I was developing a &lt;strong&gt;personal&lt;/strong&gt; Kanban app and only a single user would be syncing data to other devices. Last write wins made sense in this situation. If something got overwritten, its expected that the user knowingly made the change and would fix the changes if necessary. Its far easier to deal with LRW strategy when syncing data both ways. Keeping things simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syncing-and-merging-documents-from-the-cloud"&gt;
  &lt;/a&gt;
  Syncing and merging documents from the cloud
&lt;/h2&gt;

&lt;p&gt;With everything I now had, i.e. unique reference Id for each document, changeset Id to detect a change in the document and LRW strategy, syncing documents with the local database became straightforward. Since I was using Firestore, Firestore query listeners gets called when something changes on the cloud. Think of them as an event listener which are called when Firestore SDK detects a change. If I wasn't using Firestore, I would build some kind of polling mechanism to detect any changes on the server side.&lt;/p&gt;

&lt;p&gt;To sync data, I do two things - &lt;strong&gt;Push first, then pull&lt;/strong&gt;. Push the pending actions in queue to the cloud if there are any, then pull the data from the server. Pushing and then pulling makes things simple as this way the user's data is always up-to-date. The recent changes made by the user don't get overwritten by the changes on the server. This also aligns with my LRW conflict resolution strategy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushing-data-to-the-server"&gt;
  &lt;/a&gt;
  Pushing data to the server
&lt;/h3&gt;

&lt;p&gt;I've already talked about pushing the actions before. You just call the corresponding server API functions and push the changes while skipping local database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pulling-data-from-the-server"&gt;
  &lt;/a&gt;
  Pulling data from the server
&lt;/h3&gt;

&lt;p&gt;To pull the data I employed two methods here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Getting all the user's documents from the cloud and comparing them with local database to identify which one got added, modified and deleted, and then updating the local database accordingly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a very broad technique, I made it more efficient by limiting the number of documents I get based on a subset of data, you'd have to figure out based on your needs how you can limit the amount of data. In my case, I was working with Firestore query listeners, each collection would have different query listeners and I wanted to work with minimum amount of listeners as possible so this technique works for me. I use this technique for my desktop app as I want "all user's data" to stay up-to-date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Only getting added, modified and deleted documents for a collection/table.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This strategy worked when getting all of the user data wasn't necessary. Especially in mobile app, to conserve user's bandwidth, the app would only retrieve data which the user wanted instead of fetching everything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#merging-documents"&gt;
  &lt;/a&gt;
  Merging documents
&lt;/h3&gt;

&lt;p&gt;Merging documents from the cloud to the local database involves adding new documents, updating modified documents or deleting "deleted" documents. Remember, I had unique reference ids and changeset Ids for each document? I would iterate through the both local data and retrieved data(from the cloud) and compare the changeset Ids, and then update the corresponding document in the local database if need be. It was time consuming to write the logic but it wasn't that bad.&lt;/p&gt;

&lt;p&gt;Here's what I did for each case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Detecting new documents&lt;/strong&gt;: If a new document is on the cloud, iterate through local collection, check if reference id exists, if it doesn't, its probably a new document so add it to the local database.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Detecting modified documents:&lt;/strong&gt; Compare the changeset Ids, if changeset Id is different, update the document in the database.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deleting "deleted" documents:&lt;/strong&gt; By "deleted" documents I mean documents which don't exist on the cloud anymore. To delete those documents, for each local document iterate through cloud's data and find out if it doesn't exist, then delete it in the local database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-for-now"&gt;
  &lt;/a&gt;
  That's all for now
&lt;/h2&gt;

&lt;p&gt;That's it for an outline. Using changeset Ids to detect changes made my life a lot easier. I also use them in the mobile app for comparing and updating data on the global state which improved overall performance of the app. There are so many things I didn't mention here as it would make the post too long. Besides if you don't do some research on your own, you won't learn ;)&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/ash_grover"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; for behind the scenes of the &lt;a href="https://brisqi.com"&gt;app&lt;/a&gt; I'm building. I love connecting with new people and learning something new.&lt;/p&gt;

&lt;p&gt;All the best!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
