<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to mess up your JavaScript code like a boss</title>
      <author>Jan K√ºster</author>
      <pubDate>Tue, 27 Jul 2021 08:53:31 +0000</pubDate>
      <link>https://dev.to/jankapunkt/how-to-mess-up-your-javascript-code-like-a-boss-pa9</link>
      <guid>https://dev.to/jankapunkt/how-to-mess-up-your-javascript-code-like-a-boss-pa9</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@officestock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sebastian Herrmann&lt;/a&gt; on &lt;a href="https://unsplash.com/@officestock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
  &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Good Bye, reliable code! Leverage these concepts and language features, deploy your app and then... watch everything burn üî• &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#quick-access"&gt;
  &lt;/a&gt;
  Quick access
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#typeof-checks"&gt;1. Relying on &lt;code&gt;typeof&lt;/code&gt; checks&lt;/a&gt;&lt;br&gt;
&lt;a href="#instanceof-checks"&gt;2. Relying on &lt;code&gt;instanceof&lt;/code&gt; checks&lt;/a&gt;&lt;br&gt;
&lt;a href="#in-checks"&gt;3. Mixing up direct with inherited properties&lt;/a&gt;&lt;br&gt;
&lt;a href="#tostring-checks"&gt;4. Relying on &lt;code&gt;toString&lt;/code&gt; output&lt;/a&gt;&lt;br&gt;
&lt;a href="#type-conversion"&gt;5. Using &lt;code&gt;parseInt&lt;/code&gt; without radix&lt;/a&gt;&lt;br&gt;
&lt;a href="#type-coercion"&gt;6. Introduce type coercion&lt;/a&gt;&lt;br&gt;
&lt;a href="#truthy-falsy"&gt;7. Using truthy / falsy in branch evaluations&lt;/a&gt;&lt;br&gt;
&lt;a href="#bracket-notation"&gt;8. Using object bracket notation with user input&lt;/a&gt;&lt;br&gt;
&lt;a href="#half-way-numbers"&gt;9. Validate numbers only half-way&lt;/a&gt;&lt;br&gt;
&lt;a href="#rely-on-number"&gt;10. Rely on Number arithmetic for floats&lt;/a&gt;&lt;br&gt;
&lt;a href="#conditional-return"&gt;11. Use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; in conditional returns&lt;/a&gt;&lt;br&gt;
&lt;a href="#pseudo-private"&gt;12. Rely on pseudo-private properties&lt;/a&gt;&lt;br&gt;
&lt;a href="#other"&gt;13. Other problematic stuff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I actually felt that way from time to time when I just ran into some of these things the first time. It was like all my hard work had just been nullified by a simple misunderstanding or naive implementation. üò¢&lt;/p&gt;

&lt;p&gt;This article is therefore my personal "best-of" collection of problems that came up due to my very naive usage of JavaScript. Some of them actually caused severe issues in my early days apps and brought me countless hours of debugging, reading, finding and fixing. üò†&lt;/p&gt;

&lt;p&gt;However, this process made me a better developer and engineer and I hope they will also serve for you and your projects well. Knowing them and finding alternatives at the design phase will improve your apps robustness and maintainability. At least I think so. Leave a comment, if think otherwise. ‚ù§Ô∏è&lt;/p&gt;





&lt;h2&gt;
  &lt;a href="#1-fire-relying-on-raw-typeof-endraw-checks"&gt;
  &lt;/a&gt;
  1. üî• Relying on &lt;code&gt;typeof&lt;/code&gt; checks&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In JavaScript you are actually pretty lost, when you rely on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"&gt;checking the given type of a variable&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// expected&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mf"&gt;135.791113&lt;/span&gt; &lt;span class="c1"&gt;// "number"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// "string"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// "object"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "symbol"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mi"&gt;1357911&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="c1"&gt;// "bigint"&lt;/span&gt;

&lt;span class="c1"&gt;// somewhat unexpected for beginners&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// "object", expected something like "array"&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// "function", expected "async function"&lt;/span&gt;

&lt;span class="c1"&gt;// totally not as expected&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="c1"&gt;// "number", what!? Not a number is a number!?&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// "object", how can nothing be an object!?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Relying on &lt;code&gt;typeof&lt;/code&gt; can therefore not be considered as safe, at least not without detailed additional checks. Relying on it in sensitive contexts can have severe consequences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Runtime errors&lt;/li&gt;
&lt;li&gt;Injection of unwanted code into functions can become possible&lt;/li&gt;
&lt;li&gt;Breaking the applications or server process becomes possible&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use a validation library (there are some, do your research)&lt;/li&gt;
&lt;li&gt;Define "interfaces" (easy in TypeScript, though) that check for primitive (own) properties of an input&lt;/li&gt;
&lt;li&gt;Extend your checks with additional checks (for example check if &lt;code&gt;n&lt;/code&gt; is of type &lt;code&gt;number&lt;/code&gt; and is not equal &lt;code&gt;NaN&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add a lot more edge test-cases, use &lt;a href="https://owasp.org/www-community/Fuzzing"&gt;fuzzing techniques&lt;/a&gt; to make sure you cover as many non-trivial inputs as possible&lt;/li&gt;
&lt;li&gt;Use TypeScript to have built-in type-checking at "compile time" (it's not a silver-bullet though)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#2-fire-relying-on-raw-instanceof-endraw-checks"&gt;
  &lt;/a&gt;
  2. üî• Relying on &lt;code&gt;instanceof&lt;/code&gt; checks &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is not only a problem from an OOP perspective (implement against interfaces, not classes!) but also does not work out quite well all the time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Proxy simply comes from another dimension....&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: 'prototype' property of Proxy is not an object&lt;/span&gt;


&lt;span class="c1"&gt;// descendants of Object are still Objects&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// primitives disguising as Object&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.357911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Object disguising as non-Object&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All of the former mentioned issues plus&lt;/li&gt;
&lt;li&gt;Tight coupling is introduced easily&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All of the former mentioned fixes plus&lt;/li&gt;
&lt;li&gt;Check for properties and their types instead of specific inheritance&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#3-fire-mixing-up-direct-with-inherited-properties"&gt;
  &lt;/a&gt;
  3. üî• Mixing up direct with inherited properties &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The prototypical inheritance of JavaScript brings further complexity when it comes to detecting an Object's properties. Some have been inherited from the prototype, others are the object's own properties. Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expires&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addDay&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hasExpired&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Apple&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3 days&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sphere&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-in-endraw-operator"&gt;
  &lt;/a&gt;
  The &lt;code&gt;in&lt;/code&gt; operator
&lt;/h3&gt;

&lt;p&gt;Now let's create a new &lt;code&gt;Apple&lt;/code&gt; instance and see which of the properties are available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Apple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// let's add this method just to this one apple instance&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addDay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hasExpired&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;isFresh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here we simply get &lt;code&gt;true&lt;/code&gt; for every &lt;code&gt;in&lt;/code&gt; check, because&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The in operator returns true if the specified property is in the specified object or its prototype chain.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in"&gt;MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-forin-endraw-statement"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for...in&lt;/code&gt; statement
&lt;/h3&gt;

&lt;p&gt;Beware of confusing the &lt;code&gt;in&lt;/code&gt; operator with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;&lt;code&gt;for..in&lt;/code&gt; statement&lt;/a&gt;. It gives you a totally different result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// output&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;days&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isFresh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;for..in&lt;/code&gt; loops only through the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties"&gt;enumerable properties&lt;/a&gt; and omits all the methods, &lt;strong&gt;which are assigned to the prototype&lt;/strong&gt; but it still lists the directly assigned properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-hasownproperty-endraw-method"&gt;
  &lt;/a&gt;
  The &lt;code&gt;hasOwnProperty&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;So it seems to be safe to always use &lt;code&gt;for..in&lt;/code&gt;? Let's take a look at a slightly different approach to our food-chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// assigned, right!?&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sphere&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// also assigned&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// output&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expires&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;apple&lt;/code&gt; is now created with &lt;code&gt;Food&lt;/code&gt; as it's prototype, which itself has &lt;code&gt;Object&lt;/code&gt; as it's prototype.&lt;/p&gt;

&lt;p&gt;As you can see the &lt;code&gt;expires&lt;/code&gt; property hasn't been passed down the prototype chain as it happened with the ES6 classes example above. However, the property is considered as "enumerable", which is why it's listed in the &lt;code&gt;for..in&lt;/code&gt; statement's output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Validations can fail, creating false-positives or false-negatives&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make it clear, whether validations will check for direct properties or have look at the full prototype-chain&lt;/li&gt;
&lt;li&gt;Avoid inheritance where possible and use composition in favor&lt;/li&gt;
&lt;li&gt;Otherwise try to stick with ES6 classes as they solve many fiddling with the prototype chain for you&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#4-fire-relying-on-raw-tostring-endraw-output"&gt;
  &lt;/a&gt;
  4. üî• Relying on &lt;code&gt;toString&lt;/code&gt; output &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;toString&lt;/code&gt; method is a builtin that descends from &lt;code&gt;Object&lt;/code&gt; and returns a String-representation of it. Descendants can override it to create a custom output that suits it's internal structure.&lt;/p&gt;

&lt;p&gt;However, you can't simply rely on it without knowing each specific implementation. Here is one example, where you might think you are clever by using the &lt;code&gt;toString&lt;/code&gt; method to fast-compare two Arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// true, should be false&lt;/span&gt;

&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// false, should be true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note, that someone can easily override global toString implementations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[I, am,compliant, to, your, checks]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// "[I, am,compliant, to, your, checks]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved Issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Runtime errors, due to wrong comparisons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toString&lt;/code&gt; spoofing / overriding can break these checks and is considered a vulnerability&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;JSON.stringify&lt;/code&gt; + sorting on arrays&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;JSON.stringify&lt;/code&gt; alone isn't enough, you may need to write a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter"&gt;custom replacer function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;toLocaleString()&lt;/code&gt; or &lt;code&gt;toISOString()&lt;/code&gt; on Date objects but note they are also easily overridden&lt;/li&gt;
&lt;li&gt;Use an alternative Date library with better comparison options&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#5-fire-using-raw-parseint-endraw-without-radix"&gt;
  &lt;/a&gt;
  5. üî• Using &lt;code&gt;parseInt&lt;/code&gt; without radix &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are builtin Methods, that help to parse a variable into a different type. Consider &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#description"&gt;&lt;code&gt;Number.parseInt&lt;/code&gt;&lt;/a&gt; which allows to parse a (decimal) Number to an integer (still Number).&lt;/p&gt;

&lt;p&gt;However, this can easily get out of hand if you don't determine the &lt;code&gt;radix&lt;/code&gt; parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// expected&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.357911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.357911&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x14b857&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mb"&gt;0b101001011100001010111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;

&lt;span class="c1"&gt;// boom&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hexStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1357911&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "14b857"&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 14&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;binStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1357911&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "101001011100001010111"&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 101001011100001010111&lt;/span&gt;

&lt;span class="c1"&gt;// fixes&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hexStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1357911&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Calculations will end up wrong&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always use the &lt;code&gt;radix&lt;/code&gt; parameter&lt;/li&gt;
&lt;li&gt;Only allow numbers as input, note that &lt;code&gt;0x14b857&lt;/code&gt; and &lt;code&gt;0b101001011100001010111&lt;/code&gt; are of type &lt;code&gt;number&lt;/code&gt; and due to the &lt;code&gt;0x&lt;/code&gt; and the &lt;code&gt;0b&lt;/code&gt; prefixes the &lt;code&gt;parseInt&lt;/code&gt; method will automatically detect their radix (but not for other systems like octal or other bases)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#6-fire-introduce-type-coercion"&gt;
  &lt;/a&gt;
  6. üî• Introduce type coercion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can easily write code that may bring up unexpected results if you don't care about potential type coercion.&lt;/p&gt;

&lt;p&gt;To understand the difference to type conversion (which we discussion by one example in the previous section), check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion"&gt;definition from MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Type coercion is the automatic or implicit conversion of values from one data type to another (such as strings to numbers). Type conversion is similar to type coercion because they both convert values from one data type to another with one key difference ‚Äî type coercion is implicit whereas type conversion can be either implicit or explicit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The easiest example is a naive add-Function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// '10'&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// '01'&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN, because Number + undefined  = NaN&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, just don't think about why...&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// "1", just don't think about why...&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// "1", just don't think about why...&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// "1() =&amp;gt; {}", I'll stop here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Totally uncontrollable results will happen&lt;/li&gt;
&lt;li&gt;Can break your application or server process&lt;/li&gt;
&lt;li&gt;Debugging back from errors to the function where the coercion happened will be lots of fun... üî•&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;validate input parameters
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// unfortunately NaN is of type number &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected a and b to be a Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3, yeay!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;explicit conversion before coercion can happen
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// preventing NaN by using parameter defaults&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// a1, b1 could be NaN so check them&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expected input to be number-alike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// throws&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3, yeay!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-note-on-typescript"&gt;
  &lt;/a&gt;
  A note on TypeScript
&lt;/h3&gt;

&lt;p&gt;Simply using typescript won't fix the issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will therefore end up with one of the above strategies. Let me know if you came up with another strategy.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#7-fire-using-truthy-falsy-in-branch-evaluations"&gt;
  &lt;/a&gt;
  7. üî• Using truthy / falsy in branch evaluations &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false, should be true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false, should be true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Runtime errors&lt;/li&gt;
&lt;li&gt;Undefined application state&lt;/li&gt;
&lt;li&gt;Potential security risk if user input is involved&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avoid truthy/falsy evaluations and evaluate strict&lt;/li&gt;
&lt;li&gt;Additionally: have high test coverage; use fuzzing; test for edge cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true &amp;lt;-- uh oh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Finally:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't want to use the &lt;code&gt;typeof&lt;/code&gt; check here, you can alternatively use &lt;code&gt;x !== (void 0)&lt;/code&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#8-fire-using-object-bracket-notation-with-user-input"&gt;
  &lt;/a&gt;
  8. üî• Using object bracket notation with user input &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A very underrated issues arises, when &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors"&gt;accessing properties via Object-Bracket notation&lt;/a&gt; by user input.&lt;/p&gt;

&lt;p&gt;This is, because bracket-notation allows us even to override properties of the prototype-chain like &lt;code&gt;__proto__&lt;/code&gt; or &lt;code&gt;prototype&lt;/code&gt; and thus potentially affecting all Objects in the current scope.&lt;/p&gt;

&lt;p&gt;With prototype pollution an attacker is able to manipulate properties in the prototype chain and exploit this fact to gain privileged access.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jane Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// good use&lt;/span&gt;
&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de-DE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// bad use&lt;/span&gt;
&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exploit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;All your base are belong to us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// consequence of this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;newObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exploit&lt;/span&gt; &lt;span class="c1"&gt;// "All your base are belong to us"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I admin this example is inherently dangerous as it contains so many problems but I tried to break it down to give you the idea how easily a prototype pollution can occur with bracket notation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#involved-issues"&gt;
  &lt;/a&gt;
  Involved issues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Exploitable vulnerability&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;use explicit variable names
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt; to check
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exploit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;All your base are belong to us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;newObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exploit&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;use a &lt;code&gt;Proxy&lt;/code&gt; Object
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forbidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prototype&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;constructor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jane Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;forbidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// log this incident&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ... otherwise do processing&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de-DE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exploit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;All your base are belong to us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: &lt;a href="https://github.com/Kirill89/prototype-pollution-exploits"&gt;libraries are not a silver-bullet&lt;/a&gt; here!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#9-fire-validate-numbers-only-halfway"&gt;
  &lt;/a&gt;
  9. üî• Validate numbers only half-way &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We already covered the problems with &lt;code&gt;'number'&lt;/code&gt; types in previous sections:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIN_VALUE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, there is much more to validating numerical input. Consider a few potential cases here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;value is expected to be integer but is a float&lt;/li&gt;
&lt;li&gt;value is not a "safe" integer (max./min. supported Int value)&lt;/li&gt;
&lt;li&gt;value is +/-Infinity but expected to be finite&lt;/li&gt;
&lt;li&gt;value is beyond Number.MIN_VALUE&lt;/li&gt;
&lt;li&gt;value is beyond Number.MAX_VALUE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The potential issues should be clear by now (unless you skipped the first couple of sections) so let's find a modular way to handle as many of these cases as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-check-for-value-to-be-a-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Base check for value to be a &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; NaN&lt;/span&gt;
&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false, as expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply don't want "not a number" to be interpreted as a number, that's just insane.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-for-value-to-be-a-safe-integer-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Check for value to be a safe integer &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isValidNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSafeInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;({}))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.357911&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isValidInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the edge case of &lt;code&gt;1.0&lt;/code&gt; which is internally in JS treated as integer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-for-value-to-be-a-safe-computable-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Check for value to be a safe (computable) &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isValidNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MIN_VALUE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;

&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// check for MAX_VALUE&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// check for MIN_VALUE&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the value is in between the usable range. Everything beyond that should be handled using &lt;code&gt;BigInt&lt;/code&gt; or a specialized library for large Numbers.&lt;/p&gt;

&lt;p&gt;Also note, that allthough these values are considered valid floats, you may still find odd interpretations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;almostZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;almostZero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;almostZero&lt;/span&gt; &lt;span class="c1"&gt;// 1e-323&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-is-value-is-a-valid-float-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Check is value is a valid float &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValidNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// this is debatable&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isInFloatBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This section already reveals the next one: simply avoid any serious floating point computations with &lt;code&gt;Number&lt;/code&gt; in JavaScript!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#10-fire-rely-on-number-arithmetic-for-floats"&gt;
  &lt;/a&gt;
  10. üî• Rely on Number arithmetic for floats&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In order to understand this section, let's read on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"&gt;JavaScript Number implementation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The JavaScript Number type is a double-precision 64-bit binary format IEEE 754 value, like double in Java or C#. This means it can represent fractional values, but there are some limits to what it can store. A Number only keeps about 17 decimal places of precision; arithmetic is subject to rounding. The largest value a Number can hold is about 1.8E308. Numbers beyond that are replaced with the special Number constant Infinity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some examples, where this can become problematic:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rounding-issues"&gt;
  &lt;/a&gt;
  Rounding issues
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="c1"&gt;// 0.30000000000000004&lt;/span&gt;
&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Think of systems, where currencies are involved or calculation results are used for life-affecting decisions. Even the smallest rounding errors can lead to catastrophic consequences. üî•&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conversion-between-number-systems"&gt;
  &lt;/a&gt;
  Conversion between number systems
&lt;/h3&gt;

&lt;p&gt;Try to convert float to hex or to bin and back to float is not possible out-of-the box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.357911&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1.5ba00e27e0efa&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1.010110111010000000001110001001111110000011101111101&lt;/span&gt;

&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1.5&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1.01011011101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#working-with-large-numbers-is-easily-broken-when-using-raw-number-endraw-"&gt;
  &lt;/a&gt;
  Working with large numbers is easily broken when using &lt;code&gt;Number&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// integers&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_SAFE_INTEGER&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt;       &lt;span class="c1"&gt;// 9007199254740991&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;// 9007199254741092, should be 9007199254741091&lt;/span&gt;

&lt;span class="c1"&gt;// floats&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt;           &lt;span class="c1"&gt;// 1.7976931348623157e+308&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.00001&lt;/span&gt; &lt;span class="c1"&gt;// Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#potential-solutions"&gt;
  &lt;/a&gt;
  Potential solutions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"&gt;BigInt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround"&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use a library for precise arithmetic&lt;/li&gt;
&lt;li&gt;Use typed arrays to precisely convert between numerical systems&lt;/li&gt;
&lt;li&gt;Write your code in a way, that you can easily replace plain Number arithmetic with one of the above solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: I am not digging deeper into this as my best advice is to &lt;a href="https://github.com/MikeMcl"&gt;use a library that handles arithmetic precision&lt;/a&gt; for you. Doing your own implementations will easily still result in errors.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#11-fire-use-raw-ampamp-endraw-or-raw-endraw-in-conditional-returns"&gt;
  &lt;/a&gt;
  11. üî• Use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; in conditional returns &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one is not definitive good or bad and rather depends on the situation. If you are certain, that the involved evaluations will always result in a boolean value then it it's safe to use them.&lt;/p&gt;

&lt;p&gt;As example you can review the extended Number checks above. However, consider the following example: You want to write a function, that checks, whether a given array is filled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the function has not a well-defined return type. It should return either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; but never &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In these case you should write your code more verbose and explicit in order to make sure, that functions really return only valid values:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Possible solution&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Better&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This solution is just a half-baked one, better is to throw an error to ensure the function had the proper input to reason about - fail early, fail often to make your application more robust:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected arr to be an Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;isFilled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// throws Uncaught TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Related issues&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ambiguous return values, leading to potential branching issues and runtime errors&lt;/li&gt;
&lt;li&gt;Checks may fail&lt;/li&gt;
&lt;li&gt;Business/application logic becomes unreliable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Potential fixes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use ternary operator&lt;/li&gt;
&lt;li&gt;return explicit&lt;/li&gt;
&lt;li&gt;use TypeScript&lt;/li&gt;
&lt;li&gt;Write extensive unit tests to ensure only valid return values are involved&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#12-fire-rely-on-pseudoprivate-properties"&gt;
  &lt;/a&gt;
  12. üî• Rely on pseudo-private properties &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you work a bit longer in the JavaScript realm you may still remember these "psuedo"-private members: if they begin with an underscore they are intended (by convention) to be private and not used directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#problems-involved"&gt;
  &lt;/a&gt;
  Problems involved:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;These properties are enumerable by default&lt;/li&gt;
&lt;li&gt;They can be manipulated without any restrictions&lt;/li&gt;
&lt;li&gt;By exploiting a prototype-pollution vulnerability they can theoretically be accessed by users; on the client they can be accessed anyway if the containing Object is accessible to the user&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#potential-fixes"&gt;
  &lt;/a&gt;
  Potential fixes:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use closures with real private variables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;&lt;code&gt;Proxy&lt;/code&gt; Object&lt;/a&gt; to have fine grained control about any member access&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields"&gt;classes with private features&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use my &lt;a href="https://github.com/jankapunkt/js-class-privacy"&gt;&lt;code&gt;class-privacy&lt;/code&gt;&lt;/a&gt; if you can't support private members yet&lt;/li&gt;
&lt;/ul&gt;





&lt;h2&gt;
  &lt;a href="#13-fire-other-problematic-stuff"&gt;
  &lt;/a&gt;
  13. üî• Other problematic stuff &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; without exactly knowing what you're doing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#passing_string_literals"&gt;Passing String literals to &lt;code&gt;setTimeout&lt;/code&gt; (or &lt;code&gt;setInterval&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rely on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;encodeURIComponent&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Next.js Authentication with Netlify Identity</title>
      <author>Pratik Bhagat</author>
      <pubDate>Tue, 27 Jul 2021 08:50:54 +0000</pubDate>
      <link>https://dev.to/bhagatpratik07/next-js-authentication-with-netlify-identity-3ghi</link>
      <guid>https://dev.to/bhagatpratik07/next-js-authentication-with-netlify-identity-3ghi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Next.js is an open-source development framework built on top of Node.js enabling React-based web applications functionalities such as server-side rendering and generating static websites.&lt;/p&gt;

&lt;p&gt;In this guide, I will show you how to add authentication to your Next.js App using Netlify Identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Basics of Next.js&lt;/p&gt;

&lt;p&gt;Context in React&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-nextjs-app"&gt;
  &lt;/a&gt;
  1. Next.js App
&lt;/h2&gt;

&lt;p&gt;First, create/select an app you would like to add authentication to. Deploy that app to Netlify so you can use Netlify Identity it's a service provided by Netlify to add authentication to your apps. &lt;/p&gt;

&lt;p&gt;If you don't have an app you can download the starter code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app [your_project_name] -e https://github.com/bhagatpratik07/next-js-auth-blog/tree/blog

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Change the name of the app before you run the command.&lt;/p&gt;

&lt;p&gt;Run the above command in the terminal. You will get a simple next.js application with Home and About Page. We will add authentication to this app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-netlify-identity-in-our-app"&gt;
  &lt;/a&gt;
  Installing Netlify Identity in our App
&lt;/h3&gt;

&lt;p&gt;Netlify Identity is a service provided by Netlify to add authentication to our apps.&lt;/p&gt;

&lt;p&gt;Before we code we need to install Netlify identity in our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install netlify-identity-widget
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the above command in the terminal to install Netlify Identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-netlify"&gt;
  &lt;/a&gt;
  Deploying to Netlify
&lt;/h2&gt;

&lt;p&gt;Now that you have downloaded the starter code it's time to deploy it to Netlify. Head over to &lt;a href="https://www.netlify.com/"&gt;https://www.netlify.com/&lt;/a&gt; and deploy your site.  After deploying you should see something like this : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc8AZlew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302005169/MPCtW362i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc8AZlew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302005169/MPCtW362i.png" alt="Screenshot (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on Identity in navbar and click on Enable Identity. Now Netlify Identity is enabled in our app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's Start
&lt;/h2&gt;

&lt;p&gt;Create a new contexts directory at the top level of our application and inside contexts create a new file called authContext.js. Our file structure should look something like this : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSJKgujn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302492649/PdAdBOtta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSJKgujn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627302492649/PdAdBOtta.png" alt="Screenshot (4).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#coding-our-authcontext"&gt;
  &lt;/a&gt;
  Coding our authContext
&lt;/h2&gt;

&lt;p&gt;Add the below code to our AuthContext&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createContext} from "react";

export const AuthContext = createContext({
  user: null,
  login: () =&amp;gt; {},
  logout: () =&amp;gt; {},
  authReady: false,
});

const AuthContextProvider = ({ children }) =&amp;gt; {
  return &amp;lt;AuthContext.Provider&amp;gt;{children}&amp;lt;/AuthContext.Provider&amp;gt;;
};

export default AuthContextProvider;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create our AuthContext and give it default values like user initially is set to null. We have default functions for login and logout. We have authReady state, which is a boolean it will keep track of when we have established a connection with Netlify Identity. The reason we have authReady state is that when our app runs in the browser it doesn't know if the user is logged in or not. &lt;/p&gt;

&lt;p&gt;Until we establish connection with Netlify authReady will be false, when we do establish a connection with Netlify it will be set to true.&lt;/p&gt;

&lt;p&gt;Also, note that we have to wrap our app (pages/_app.js) with our context as we need to access context in our entire app. NavBar and Component are now children to our Context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pages/_app.js

import NavBar from "../components/NavBar";
import AuthContextProvider from "../contexts/authContext";
import "../styles/globals.css";

function MyApp({ Component, pageProps }) {
  return (
    &amp;lt;AuthContextProvider&amp;gt;
      &amp;lt;NavBar /&amp;gt;
      &amp;lt;Component {...pageProps} /&amp;gt;
    &amp;lt;/AuthContextProvider&amp;gt;
  );
}

export default MyApp;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update your pages/_app.js file accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#establishing-connection-with-netlify-identity"&gt;
  &lt;/a&gt;
  Establishing connection with Netlify Identity
&lt;/h2&gt;

&lt;p&gt;To establish a connection with netlify identity we will use the useEffect hook in react&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// contexts/authContext

import { createContext, useState, useEffect } from "react";
import { netlifyIdentity } from "netlify-identity-widget";

export const AuthContext = createContext({
  user: null,
  login: () =&amp;gt; {},
  logout: () =&amp;gt; {},
  authReady: false,
});

const AuthContextProvider = ({ children }) =&amp;gt; {
  useEffect(() =&amp;gt; {
    netlifyIdentity.init();
  }, []);
  return &amp;lt;AuthContext.Provider&amp;gt;{children}&amp;lt;/AuthContext.Provider&amp;gt;;
};

export default AuthContextProvider;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We import netlifyIdentity and inside our useEffect hook we simply need to add netlifyIdentity.init( ). All this will do is initialize connection with netlify identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-value-to-our-app"&gt;
  &lt;/a&gt;
  Providing value to our App
&lt;/h2&gt;

&lt;p&gt;Next, we need to provide login, logout, user values to our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createContext, useState, useEffect } from "react";
import netlifyIdentity from "netlify-identity-widget";

export const AuthContext = createContext({
  user: null,
  login: () =&amp;gt; {},
  logout: () =&amp;gt; {},
  authReady: false,
});

const AuthContextProvider = ({ children }) =&amp;gt; {
  const [user, setUser] = useState(null);


  useEffect(() =&amp;gt; {
      // on login
    netlifyIdentity.on("login", (user) =&amp;gt; {
      setUser(user);
      netlifyIdentity.close();
    });

    // on logout
    netlifyIdentity.on("logout", (user) =&amp;gt; {
      setUser(null);
    });


    // connect with Netlify Identity
    netlifyIdentity.init();
  }, []);

  const login = () =&amp;gt; {
    netlifyIdentity.open();
  };


  const logout = () =&amp;gt; {
    netlifyIdentity.logout();
  };


  const context = {
    login,
    logout,
    user,
  };


  return (
    &amp;lt;AuthContext.Provider value={context}&amp;gt;
    {children}
    &amp;lt;/AuthContext.Provider&amp;gt;
  );
};

export default AuthContextProvider;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot of code...let me explain&lt;/p&gt;

&lt;p&gt;1.Login&lt;/p&gt;

&lt;p&gt;We create a login function in which we just use open( ) which is a built-in function of Netlify Identity. All this does is open a login/signup form. We will use this as a callback function on the login button.&lt;/p&gt;

&lt;p&gt;2.Logout&lt;/p&gt;

&lt;p&gt;Logout function is the same as the login function but we use logout( ) which is a built-in netlify function to log out the user.&lt;/p&gt;

&lt;p&gt;Also, we update our useEffect and we add event listeners to log in and log out actions. &lt;/p&gt;

&lt;p&gt;On login, the user will be set to the user from null and we close our form.&lt;/p&gt;

&lt;p&gt;On logout, we set our user to null.&lt;/p&gt;

&lt;p&gt;And we provide all this as context to our app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-loginlogout-buttons"&gt;
  &lt;/a&gt;
  Creating Login/Logout Buttons
&lt;/h2&gt;

&lt;p&gt;Now it's time to update our navbar. Open components/navbar file in the code editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/navbar

import styles from "../styles/Home.module.css";
import Link from "next/link";
import { useContext } from "react";
import { AuthContext } from "../contexts/authContext";

const NavBar = () =&amp;gt; {
  const { user, login, logout } = useContext(AuthContext);
  return (
    &amp;lt;nav className={styles.nav}&amp;gt;
      &amp;lt;Link href="/"&amp;gt;
        &amp;lt;a&amp;gt;Home&amp;lt;/a&amp;gt;
      &amp;lt;/Link&amp;gt;
      &amp;lt;Link href="/about"&amp;gt;
        &amp;lt;a&amp;gt;About&amp;lt;/a&amp;gt;
      &amp;lt;/Link&amp;gt;
      &amp;lt;li&amp;gt;{!user &amp;amp;&amp;amp; &amp;lt;button onClick={login}&amp;gt;Login/Signup&amp;lt;/button&amp;gt;}&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;{user &amp;amp;&amp;amp; &amp;lt;button onClick={logout}&amp;gt;Logout&amp;lt;/button&amp;gt;}&amp;lt;/li&amp;gt;
    &amp;lt;/nav&amp;gt;
  );
};

export default NavBar;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we access login, logout, user values from our context using the useContext hook.&lt;/p&gt;

&lt;p&gt;Then we create a login button which on click fires off the login function we created in our context. Same with the logout button. &lt;/p&gt;

&lt;p&gt;We conditionally render the buttons based on if the user is logged in or not.&lt;/p&gt;

&lt;p&gt;Now click on the login button and voila.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZQ_qzL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627321490757/96WV-IWJZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZQ_qzL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627321490757/96WV-IWJZ.png" alt="Screenshot (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will ask you for the website URL. You just have to enter the URL of the website you deployed on Netlify.&lt;/p&gt;

&lt;p&gt;You can also add external providers such as Google, Github as login options. For that head back to Netlify and go to Site Settings -&amp;gt; Identity (on sidebar) and on external providers select the options you want to include.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XByxQ_Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627323621698/Vd0TgXI_P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XByxQ_Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627323621698/Vd0TgXI_P.png" alt="Screenshot (7).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;First, we created authContext to globally provide user values to our Apps. We added user and log-in, logout functions (built-in Netlify Identity functions) in our Context and used them as callback functions to our Login and Logout buttons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading-"&gt;
  &lt;/a&gt;
  Thank you for reading :)
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#drop-a-like-and-follow-me-if-you-found-this-useful"&gt;
  &lt;/a&gt;
  Drop a like and follow me if you found this useful üòä
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>netlify</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A quick dive into 3 CSS keywords: min-content, max-content and fit-content</title>
      <author>Fabrizio Calderan</author>
      <pubDate>Tue, 27 Jul 2021 08:45:04 +0000</pubDate>
      <link>https://dev.to/fcalderan/a-quick-dive-into-3-css-keywords-min-content-max-content-and-fit-content-2nkf</link>
      <guid>https://dev.to/fcalderan/a-quick-dive-into-3-css-keywords-min-content-max-content-and-fit-content-2nkf</guid>
      <description>&lt;p&gt;The &lt;em&gt;&lt;a href="https://www.w3.org/TR/css-sizing-3/"&gt;CSS Box Sizing Module Level 3&lt;/a&gt;&lt;/em&gt; specs define 3 new sizing values:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;min-content&lt;/code&gt; ‚Äî represents the minimum intrinsic size of an element. This means that when it's set as the &lt;code&gt;width&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;) of an element with text content, its size will be as long as the longest word. Every space or non-alphanumeric character (like hyphens, if hyphenation is &lt;code&gt;auto&lt;/code&gt;) can be used to apply a soft break, like in this example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2PcFvXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dbv1d2wm4oswzyv73wk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2PcFvXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dbv1d2wm4oswzyv73wk.png" alt="min-content example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;code&gt;max-content&lt;/code&gt; ‚Äì it works in the opposite way than &lt;code&gt;min-content&lt;/code&gt; since it represents the maximum intrinsic size of an element. &lt;/p&gt;

&lt;p&gt;When this keywords is set as the &lt;code&gt;width&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;) of an element with text content, it will be as long as the content without any line breaks. If the size of the parent is narrower then the element will cause an overflow, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WzmrYNJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmzm15i6mmtn7whbtc2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WzmrYNJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmzm15i6mmtn7whbtc2p.png" alt="max-content example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;code&gt;fit-content&lt;/code&gt; ‚Äî it works like a mix of &lt;code&gt;min-content&lt;/code&gt; and &lt;code&gt;max-content&lt;/code&gt;: an element sized with this keyword will stretch to contain the text but it won't be &lt;em&gt;never&lt;/em&gt; longer than &lt;code&gt;max-content&lt;/code&gt; and &lt;em&gt;never&lt;/em&gt; shorter than &lt;code&gt;min-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sc09PGjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmkaw0rhx6i9lcszky20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sc09PGjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmkaw0rhx6i9lcszky20.png" alt="fit-content example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;fit-content&lt;/code&gt; is not the same as &lt;code&gt;auto&lt;/code&gt;: an element with &lt;code&gt;display: block;&lt;/code&gt; and &lt;code&gt;width: auto&lt;/code&gt; will always take the entire space available while &lt;code&gt;fit-content&lt;/code&gt; size is limited by its content.&lt;/p&gt;

&lt;p&gt;The last example will be more clear if you try it in this snippet and you resize the &lt;em&gt;result&lt;/em&gt; window.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fcalderan/embed/ZEKvVNM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As a side note, these keywords are not animatable and they can't be used inside a &lt;code&gt;calc()&lt;/code&gt; expression, like &lt;code&gt;inline-size: calc(min-content + 2rem)&lt;/code&gt;, but you can still use them for other properties, like &lt;code&gt;max-width/max-inline-size&lt;/code&gt; or &lt;code&gt;min-width/min-inline-size&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-use-case-for-fitcontent"&gt;
  &lt;/a&gt;
  A use case for fit-content
&lt;/h2&gt;

&lt;p&gt;Exploring these keywords I've found a scenario where &lt;code&gt;fit-content&lt;/code&gt; can be somewhat useful.&lt;/p&gt;

&lt;p&gt;Let say that you have a link as the last element inside a paragraph, no &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; element before and no control over the markup: how could you show the link in a new line and centered?&lt;/p&gt;

&lt;p&gt;A possibility is to set &lt;code&gt;display: block&lt;/code&gt; on the link of course, but this will naturally expand it taking the full width of the parent, so you need to also set a &lt;code&gt;width&lt;/code&gt; (or &lt;code&gt;inline-size&lt;/code&gt;) to limit its size.&lt;/p&gt;

&lt;p&gt;Clearly the size should not be hardcoded with a fixed value, because the content may vary, but if you set instead &lt;code&gt;inline-size: fit-content&lt;/code&gt; the content now dictates the size of the element itself &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fcalderan/embed/zYwpeXv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;and this is the final result. &lt;/p&gt;

&lt;p&gt;If you have found different and creative use cases for these keywords let me know in the commentsüëá .&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words-amp-thoughts"&gt;
  &lt;/a&gt;
  Final words &amp;amp; thoughts
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://codepen.io/fcalderan/"&gt;follow me on Codepen&lt;/a&gt; or &lt;a href="https://twitter.com/fcalderan"&gt;Twitter&lt;/a&gt; where I usually talk about frontend and trees.&lt;/p&gt;

&lt;p&gt;Also, if this post was useful, you may take a look at my other &lt;strong&gt;carbon free&lt;/strong&gt; articles on dev or just retweet the announcement below:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqNx82s_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1409213607255150592/sDnD9EM6_normal.jpg" alt="Fabrizio Calderan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Fabrizio Calderan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fcalderan"&gt;@fcalderan&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I published a new post on DEV community:&lt;br&gt;¬´A quick dive into 3 &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; keywords: min-content, max-content and fit-content¬ª&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/WOvhdXSogL"&gt;dev.to/fcalderan/a-qu‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/ThePracticalDev"&gt;@ThePracticalDev&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:54 AM - 27 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1419944174082723840" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1419944174082723840" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1419944174082723840" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Protect Your SignalR Service Based Real-time Application with Application Gateway </title>
      <author>Yan Jin</author>
      <pubDate>Tue, 27 Jul 2021 08:42:38 +0000</pubDate>
      <link>https://dev.to/azure/protect-your-signalr-service-based-real-time-application-with-application-gateway-31cf</link>
      <guid>https://dev.to/azure/protect-your-signalr-service-based-real-time-application-with-application-gateway-31cf</guid>
      <description>&lt;p&gt;By &lt;a href="https://docs.microsoft.com/azure/azure-signalr/howto-private-endpoints"&gt;using the Azure Private Endpoint for your Azure SignalR&lt;/a&gt;, it allows clients on a virtual network (VNet) to securely access data over a‚ÄØ&lt;a href="https://docs.microsoft.com/en-us/azure/private-link/private-link-service-overview"&gt;Private Link&lt;/a&gt;. As next step, let‚Äôs learn how to use the &lt;a href="https://docs.microsoft.com/en-us/azure/application-gateway/overview"&gt;Azure Application Gateway&lt;/a&gt; for your Azure SignalR to manage the real-time traffic.  &lt;/p&gt;

&lt;p&gt;Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. Using the Azure Application Gateway with Azure SignalR Service enables you to:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protect your applications from common web vulnerabilities.
&lt;/li&gt;
&lt;li&gt;Get application-level load-balancing for your scalable and highly available applications.
&lt;/li&gt;
&lt;li&gt;Setup end to end secure. &lt;/li&gt;
&lt;li&gt;Customize the domain name. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs go through the key steps together and learn how to implement this reference solution:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Application Gateway helps you protect your applications and setup end to end secure.
&lt;/li&gt;
&lt;li&gt;The client cannot access the Azure SignalR Service instance through public network, and all the traffic is managed through Application Gateway.
&lt;/li&gt;
&lt;li&gt;The traffic between App Service and SignalR Service is also protected by Virtual Network. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QQOf7DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298568i2D82DD50A2A0BCCA/image-size/medium%3Fv%3Dv2%26px%3D400" alt="High level digram"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-virtual-network"&gt;
  &lt;/a&gt;
  Setup the Virtual Network
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create the &lt;a href="https://azure.microsoft.com/services/virtual-network"&gt;Virtual Network&lt;/a&gt; &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt;.
&lt;/li&gt;
&lt;li&gt;There is a default subnet already created, and add 2 new subnets:

&lt;ul&gt;
&lt;li&gt;Subnet &lt;strong&gt;&lt;em&gt;applicationSN&lt;/em&gt;&lt;/strong&gt; for your &lt;a href="https://azure.microsoft.com/services/app-service/"&gt;App Service&lt;/a&gt; or &lt;a href="https://azure.microsoft.com/services/functions/"&gt;Azure Functions&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Subnet &lt;strong&gt;&lt;em&gt;gatewaySN&lt;/em&gt;&lt;/strong&gt; for Application Gateway. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmgZ5O1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298570iDE77A06747CD74F6/image-dimensions/499x186%3Fv%3Dv2" alt="Virtual Network Configuration"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup-signalr-service"&gt;
  &lt;/a&gt;
  Setup SignalR Service
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create the resource of Azure SignalR Service &lt;strong&gt;&lt;em&gt;ASRS1&lt;/em&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;&lt;em&gt;ASRS1&lt;/em&gt;&lt;/strong&gt; in the portal. &lt;/li&gt;
&lt;li&gt;Go to the Private endpoint connections blade, and create a new private endpoint &lt;strong&gt;&lt;em&gt;PE1&lt;/em&gt;&lt;/strong&gt; with the &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt; and its &lt;strong&gt;&lt;em&gt;default subnet&lt;/em&gt;&lt;/strong&gt;. Learn more details about &lt;a href="https://docs.microsoft.com/en-us/azure/azure-signalr/howto-private-endpoints"&gt;use private endpoint for Azure SignalR Service&lt;/a&gt;. 

&lt;ul&gt;
&lt;li&gt;Resource &lt;/li&gt;
&lt;li&gt;Resource Type: Microsoft.SignalRService/SignalR &lt;/li&gt;
&lt;li&gt;Resource: &lt;strong&gt;&lt;em&gt;ASRS1&lt;/em&gt;&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKV8oZvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298573i3C7FBE9B69E8FA15/image-size/medium%3Fv%3Dv2%26px%3D400" alt="SignalR Service Resource"&gt;
&lt;/li&gt;
&lt;li&gt;Configuration &lt;/li&gt;
&lt;li&gt;Integration with private DNS zone: Yes &lt;/li&gt;
&lt;li&gt;Subnet: default subnet in VN1 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6oS99vT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298572i3DD2D04F430E6783/image-size/medium%3Fv%3Dv2%26px%3D400" alt="SignalR Service Configuration"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to the network access control blade of ASRS1 and disable the all connections in public network.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-application-gateway"&gt;
  &lt;/a&gt;
  Setup the Application Gateway
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create the &lt;a href="https://azure.microsoft.com/services/application-gateway"&gt;Application Gateway&lt;/a&gt; &lt;strong&gt;&lt;em&gt;AG1&lt;/em&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;In the Basic, use the &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;gatewaySN&lt;/em&gt;&lt;/strong&gt; to configure the virtual network.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWOCRFII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298576iA2B8FC1EA1828A1B/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Basic"&gt;
&lt;/li&gt;
&lt;li&gt;In the Frontends, create a new public address.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nmy1TwLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298575i5B2B6D532C69145E/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Frontends"&gt;
&lt;/li&gt;
&lt;li&gt;In the Backends, create a new backend pool signalr for the SignalR Service resource. You need to use the host name of the SignalR Service resource as the Target. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PylkXXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298574i3E0ADDD849D6A4D2/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Backends"&gt;
&lt;/li&gt;
&lt;li&gt;In the Configuration, add a new routing rule signalrrule to route the traffic to SignalR Service. You need to create a new HTTP setting.

&lt;ul&gt;
&lt;li&gt;Listener &lt;/li&gt;
&lt;li&gt;Protocol: HTTP (We use the HTTP frontend protocol on Application Gateway in this blog to simplify the demo and help you get started easier. But in reality, you may need to enable HTTPs and Customer Domain on it with production scenario.)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxSX6R5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298577iDFAF0C0B4C92A1A1/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Listener"&gt; &lt;/li&gt;
&lt;li&gt;Backend targets
&lt;/li&gt;
&lt;li&gt;Target type: Backend pool &lt;/li&gt;
&lt;li&gt;Add new HTTP setting

&lt;ul&gt;
&lt;li&gt;Backend protocol: HTTPs &lt;/li&gt;
&lt;li&gt;Use well known CA certificate: Yes &lt;/li&gt;
&lt;li&gt;Override with new host name: Yes &lt;/li&gt;
&lt;li&gt;Host name override: Pick host name from backend target.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JBKEoVLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298579i2BD58CF013432744/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Backend"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review and create the AG1 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ximslW6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298578i286727C97E7C80C3/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Application Gateway - Create"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we already setup the Virtual Network, SignalR Service and Application Gateway. Let‚Äôs quick test whether the configuration is correct.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the network access control blade of ASRS1 and set public network to allow server connection only. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6u3bYQOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298581iEB693BA66C572E69/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Configuration Test"&gt;
&lt;/li&gt;
&lt;li&gt;Go to AG1, open health probe, change the health probe path to /api/v1/health 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYvw2xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298582iFAADEBD401C9E9ED/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Configuration Test"&gt;
&lt;/li&gt;
&lt;li&gt;Go to the Overview blade of AG1, and find out the Frontend public IP address &lt;/li&gt;
&lt;li&gt;Open http://, and it should return 403. &lt;/li&gt;
&lt;li&gt;Open http:///api/v1/health, and it should return 200. &lt;/li&gt;
&lt;li&gt;Go back to the network access control blade of ASRS1 and disable the server connection in public network.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#run-a-chat-application-locally"&gt;
  &lt;/a&gt;
  Run a Chat Application Locally
&lt;/h2&gt;

&lt;p&gt;Now, the traffic to Azure SignalR is already managed by the Application gateway. The customer could only use the public IP address or custom domain name to access the resource. In this blog, let‚Äôs use the &lt;a href="https://github.com/aspnet/AzureSignalR-samples/tree/main/samples/ChatRoom"&gt;chat application&lt;/a&gt; as an example, and start from running it locally.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the github repo &lt;a href="https://github.com/aspnet/AzureSignalR-samples"&gt;https://github.com/aspnet/AzureSignalR-samples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Go to the Keys blade of ASRS1 and get the connection string
&lt;/li&gt;
&lt;li&gt;Go to samples/Chatroom and open the shell &lt;/li&gt;
&lt;li&gt;Set the connection string and run the application locally
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet restore 
dotnet user-secrets set Azure:SignalR:ConnectionString "&amp;lt;connection-string-of-ASR1&amp;gt;;ClientEndpoint=http://&amp;lt; frontend-public-IP-address-of-AG1&amp;gt;" 
dotnet run 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Open‚ÄØ&lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;‚ÄØand view network traces via explorer to see WebSocket connection is established through AG1‚ÄØ 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TB4kLX4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/298583iF7CDDD3105B8B701/image-dimensions/687x177%3Fv%3Dv2" alt="Run Test"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-chat-application-to-azure"&gt;
  &lt;/a&gt;
  Deploy the Chat Application to Azure
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a Web App &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;. 

&lt;ul&gt;
&lt;li&gt;Publish: Code &lt;/li&gt;
&lt;li&gt;Runtime stack: .NET Core 3.1 &lt;/li&gt;
&lt;li&gt;Operation System: Windows &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to Networking blade and configure the VNET integration.
&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;&lt;em&gt;VN1&lt;/em&gt;&lt;/strong&gt; and webapp subnet‚ÄØ&lt;strong&gt;&lt;em&gt;applicationSN&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Publish the Web App with CLI 

&lt;ul&gt;
&lt;li&gt;Publishe the application and its dependencies to a folder for deployment
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet publish -c Release 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Package the bin\Release\netcoreapp3.1\publish folder as &lt;strong&gt;&lt;em&gt;app.zip&lt;/em&gt;&lt;/strong&gt;.
&lt;/li&gt;
&lt;li&gt;Perform deployment using the kudu zip push deployment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az login  
az account set ‚Äìsubscription &amp;lt;your-subscription-name-used-to-create-WA1&amp;gt; 
az webapp deployment source config-zip -n WA1 -g &amp;lt;resource-group-of-WA1&amp;gt; --src app.zip 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Go to the Configuration blade of &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;, and add following application setting to set connection string and enable private DNS zone.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Azure__SignalR__ConnectionString=&amp;lt;connection-string-of-ASR1&amp;gt;;ClientEndpoint=http://&amp;lt; frontend-public-IP-address-of-AG1&amp;gt; 
WEBSITE_DNS_SERVER=168.63.129.16 
WEBSITE_VNET_ROUTE_ALL=1‚ÄØ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Go to the TLS/SSL settings blade of &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;, and turn off the HTTPS Only. To Simplify the demo, we used the HTTP frontend protocol on Application Gateway. Therefore, we need to turn off this option to avoid changing the HTTP URL to HTTPs automatically.
&lt;/li&gt;
&lt;li&gt;Go to the Overview blade and get the URL of &lt;strong&gt;&lt;em&gt;WA1&lt;/em&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Open the URL by replacing the https with http, and open network traces to see WebSocket connection is established through &lt;strong&gt;&lt;em&gt;AG1&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Now, you are successful to build a real-time chatroom application with Azure SignalR Service and use Application Gateway to protect your applications and setup end to end secure.  &lt;/p&gt;

&lt;p&gt;If you are trying to build your own application with Azure SignalR and Application Gateway, you could also get more helpful resources from the‚ÄØ&lt;a href="https://docs.microsoft.com/en-us/azure/azure-signalr/"&gt;Azure SignalR Service&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/azure/application-gateway"&gt;Azure Application Gateway&lt;/a&gt;. We are looking forward your feedback and ideas to help us become better via‚ÄØ&lt;a href="https://feedback.azure.com/forums/915436-azure-signalr-service"&gt;Azure Feedback Forum&lt;/a&gt;! You could also go to &lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure/bg-p/AppsonAzureBlog"&gt;Tech Community&lt;/a&gt; to learn more blogs about Azure SignalR Service.&lt;/p&gt;

&lt;p&gt;‚ÄØ &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>realtime</category>
    </item>
    <item>
      <title>You don‚Äôt need React for building websites</title>
      <author>Silvestar Bistroviƒá</author>
      <pubDate>Tue, 27 Jul 2021 08:28:02 +0000</pubDate>
      <link>https://dev.to/starbist/you-don-t-need-react-for-building-websites-455f</link>
      <guid>https://dev.to/starbist/you-don-t-need-react-for-building-websites-455f</guid>
      <description>&lt;p&gt;Here‚Äôs what I think: if you are building websites, you don‚Äôt need React (in most cases).&lt;/p&gt;

&lt;p&gt;I have been building websites for over nine years now. As I get more experienced, I use fewer libraries and frameworks and rely on good old HTML, CSS, and vanilla JavaScript. I think you should consider doing the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-rant-about-react"&gt;
  &lt;/a&gt;
  My rant about React
&lt;/h2&gt;

&lt;p&gt;Ever since React came to the stage, I‚Äôve been hearing, reading, and watching how great it is. I had a few attempts to learn it, but I failed every time. It is fair to say that I don‚Äôt understand it, so I cannot even rant about its features, shortcomings, or flaws.&lt;/p&gt;

&lt;p&gt;What I can rant about is the hype. I mean, it‚Äôs not even hype after all these years. It is a necessary evil. Of course, I am exaggerating here, but maybe not.&lt;/p&gt;

&lt;p&gt;I feel like 9 out of 10 job ads for a frontend developer mention React.&lt;/p&gt;

&lt;p&gt;I don‚Äôt get it. Why would I need to use React if I am supposed to work on building websites? Are employers afraid that if you don‚Äôt know React that you wouldn‚Äôt be able to make a landing page? Would knowing React help you solve any problems when creating a new layout or template? I cannot think of any part of the website that would require React.&lt;/p&gt;

&lt;p&gt;All these questions made me realize that I don‚Äôt need frameworks for my everyday work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-might-be-a-solution"&gt;
  &lt;/a&gt;
  There might be a solution
&lt;/h2&gt;

&lt;p&gt;Instead of adding React to every frontend job ad, employers should emphasize HTML, CSS, JavaScript, and accessibility skills. These four amigos are the only thing you need to make websites perform well, achieve a solid SEO score, and allow every user to consume the content.&lt;/p&gt;

&lt;p&gt;Brad Frost wrote about &lt;a href="https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/"&gt;front-of-the-frontend&lt;/a&gt;. Chris Coyier wrote about &lt;a href="https://css-tricks.com/the-great-divide/"&gt;the great divide&lt;/a&gt;. I agree with both of them, but I would make the following distinction: web app developer and website developer.&lt;/p&gt;

&lt;p&gt;The web app developer does need React or similar frameworks.&lt;/p&gt;

&lt;p&gt;The website developer doesn‚Äôt need React or similar frameworks.&lt;/p&gt;

&lt;p&gt;Of course, there are exceptions, but I am talking in general here.&lt;/p&gt;

&lt;p&gt;I am in a situation where I don‚Äôt need to apply to new positions and choose my employer often, but I keep my eye on job ads frequently. I sympathize with developers who are capable of building solid websites but struggle to find a job because of the lack of React skills. I know at least one person who would be thankful if React skill wouldn‚Äôt be listed so often ‚Äî a friend of mine (and my mentee) with whom I share the office these days.&lt;/p&gt;

&lt;p&gt;I propose a simple solution: if the job is about building sites, please stop adding React as a required skill unless absolutely necessary. It might be helpful to use the &lt;strong&gt;website&lt;/strong&gt; developer term, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Knowing React could only make you a better developer, and I am not saying you shouldn‚Äôt learn it. However, I am saying that it is not needed in most cases if your goal is to build websites.&lt;/p&gt;

&lt;p&gt;I hope more people would realize how powerful HTML, CSS, and JavaScript are and that these come with the most features that you‚Äôll ever need for building a website. Simpler is usually better.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>JavaScript Implementation of FizzBuzz in functional programming</title>
      <author>Koji (he/him)</author>
      <pubDate>Tue, 27 Jul 2021 08:12:22 +0000</pubDate>
      <link>https://dev.to/kojikanao/fizzbuzz-in-functional-programming-with-js-4obn</link>
      <guid>https://dev.to/kojikanao/fizzbuzz-in-functional-programming-with-js-4obn</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The FizzBuzz problem is a classic test given in coding interviews. The task is simple: Print integers 1 to N, but print ‚ÄúFizz‚Äù if an integer is divisible by 3, ‚ÄúBuzz‚Äù if an integer is divisible by 5, and ‚ÄúFizzBuzz‚Äù if an integer is divisible by both 3 and 5.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFizz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isBuzz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doFizzBuzz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFizz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFizz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}))&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`\n`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doFizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jsfiddle"&gt;
  &lt;/a&gt;
  jsfiddle
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://jsfiddle.net/381g4fct/7/"&gt;https://jsfiddle.net/381g4fct/7/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>fizzbuzz</category>
    </item>
    <item>
      <title>"Hello, world" in Assembly</title>
      <author>Bek Brace</author>
      <pubDate>Tue, 27 Jul 2021 07:26:36 +0000</pubDate>
      <link>https://dev.to/bekbrace/hello-world-in-assembly-4o6k</link>
      <guid>https://dev.to/bekbrace/hello-world-in-assembly-4o6k</guid>
      <description>&lt;p&gt;You should learn Assembly language - and I'm going to tell you why üòâ ..!&lt;/p&gt;

&lt;p&gt;Not to be a great Assembly programmer, but at least to understand how it functions.&lt;/p&gt;

&lt;p&gt;In my opinion, I think learning how to code in Assembly is to appreciate all what C language offers you; and if you want to learn C in order to appreciate all the great things that Python gives you, that's also a great move.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j--zbDv_2QQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So Assembly, C and Python are three main languages you need to know if you want to understand how code is working and how things look like underneath the hood, I even would say Assembly and C, then you're free to choose whatever language you want for backend programming; but the reaosn why I mentioned Python is that Python is written in C, the most famous Python interpreter is Cpython.&lt;br&gt;
C itself is written in C, but you can think that the first C was coded in Assembly.&lt;br&gt;
So Python is written in C, C is written in Assembly and Assembly is the human readable form for machine language which is a bunch of 0s and 1s&lt;/p&gt;

&lt;p&gt;You will need to run on an IBM compatible PC...&lt;/p&gt;

&lt;p&gt;(hmm.. wait a minute, I think this term is deprecated , but you can call me a Nerd ü§ì ) &lt;/p&gt;

&lt;p&gt;...with an x86_64 processor that is a 64 bit of virtual memory address, and also we will need to have a copy of a Linux kernel.&lt;/p&gt;

&lt;p&gt;To check out the type of your processor, just type in your terminal&lt;/p&gt;

&lt;p&gt;~$ arch &lt;br&gt;
OR &lt;br&gt;
~$ uname -m &lt;/p&gt;

&lt;p&gt;We will need also to install the NASM assembler program which is the Netwide Assembler for the Intel X86 architecture, &lt;br&gt;
An assembler works as a compiler but for assembly, &lt;br&gt;
go ahead and install that : &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install nasm&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many assemblers like &lt;br&gt;
Microsoft Assembler (MASM)&lt;br&gt;
The GNU assembler (GAS)&lt;/p&gt;

&lt;p&gt;An assembly program can be divided into three sections ‚àí&lt;br&gt;
The text section.&lt;br&gt;
The data section,&lt;br&gt;
The bss section&lt;/p&gt;

&lt;p&gt;1) The text section is used for keeping the actual code. &lt;br&gt;
This section must begin with the declaration global _start, which tells the kernel where the program execution begins, and global keyword followed by _start is essential for the linker, later when we will run our program.&lt;/p&gt;

&lt;p&gt;2) The data section is used for declaring data or constants. &lt;br&gt;
This data does not change at runtime. &lt;br&gt;
You can declare various constant values, file names, or buffer size, etc., in this section.&lt;br&gt;
You can think of this as the keyword const in JavaScript for constants declaration&lt;/p&gt;

&lt;p&gt;3) The bss section is used for declaring variables&lt;br&gt;
You can think of this as the word let in JavaScript for variables declaration&lt;/p&gt;

&lt;p&gt;You can watch the video to see how you can write a "Hello, World" simple program to print Hello, World on the screen .. in Assembly, it's not that simple ü§ì&lt;/p&gt;

&lt;p&gt;Thanks for readin - and watching maybe ü§î - leave your comment and contact me on &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt; , or follow me on Facebook, Twitter and Instagram : &lt;a class="mentioned-user" href="https://dev.to/bekbrace"&gt;@bekbrace&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Signin' out,&lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>csharp</category>
      <category>cpp</category>
    </item>
    <item>
      <title>How to debounce and throttle functions with React hooks</title>
      <author>Shubham Khatri</author>
      <pubDate>Tue, 27 Jul 2021 07:18:04 +0000</pubDate>
      <link>https://dev.to/shubhamreacts/how-to-debounce-and-throttle-functions-with-react-hooks-43ae</link>
      <guid>https://dev.to/shubhamreacts/how-to-debounce-and-throttle-functions-with-react-hooks-43ae</guid>
      <description>&lt;p&gt;&lt;strong&gt;Debouncing&lt;/strong&gt; and &lt;strong&gt;throttling&lt;/strong&gt; are two very common terms that we come across when trying to optimize function calls. They can be very useful for improving the performance of user interactions.&lt;/p&gt;

&lt;p&gt;Before jumping into the main implementation, let‚Äôs understand the basic concepts of &lt;code&gt;debounce&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt; and their real-life use cases (skip ahead if you are already familiar with these concepts).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-debounce"&gt;
  &lt;/a&gt;
  What Is debounce?
&lt;/h3&gt;

&lt;p&gt;Debouncing enforces that there is a minimum time gap between two consecutive invocations of a function call.&lt;/p&gt;

&lt;p&gt;For example, a &lt;code&gt;debounce&lt;/code&gt; interval of 500ms means that if 500ms hasn‚Äôt passed from the previous invocation attempt, we cancel the previous invocation and schedule the next invocation of the function after 500ms.&lt;/p&gt;

&lt;p&gt;A common application of &lt;code&gt;debounce&lt;/code&gt; is a &lt;code&gt;Typeahead&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-throttle"&gt;
  &lt;/a&gt;
  What Is throttle?
&lt;/h3&gt;

&lt;p&gt;Throttling is a technique with which a function is invoked at most once in a given time frame regardless of how many times a user tries to invoke it.&lt;/p&gt;

&lt;p&gt;For example, given a &lt;code&gt;throttle&lt;/code&gt; interval of 500ms, if we try to invoke a function &lt;em&gt;n&lt;/em&gt; times within 500ms, the function is called only once when 500ms has elapsed from the beginning.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Throttle&lt;/code&gt; is commonly used with &lt;code&gt;resize&lt;/code&gt; or &lt;code&gt;scroll&lt;/code&gt; events.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-debounce-and-throttle-with-class-components"&gt;
  &lt;/a&gt;
  Using debounce and throttle With Class Components
&lt;/h2&gt;

&lt;p&gt;Before we dive into how we can use &lt;code&gt;throttle&lt;/code&gt;/&lt;code&gt;debounce&lt;/code&gt; in functional components with Hooks, let‚Äôs quickly see how we do it in a class component.&lt;/p&gt;

&lt;p&gt;We define the debounced/throttled version of our function in the constructor function, and that is all we need to do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I am using lodash &lt;code&gt;debounce&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt; functions in this article.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debouncedOnChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debouncedHandleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleWindowResize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your logic here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;handleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your resize logic here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// rest of rendering code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the sample demo in the StackBlitz below:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-joukpk?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-debounce-and-throttle-in-functional-components"&gt;
  &lt;/a&gt;
  Using debounce and throttle in Functional Components
&lt;/h2&gt;

&lt;p&gt;We shall attempt to try to convert the class-based implementation to a function-based approach.&lt;/p&gt;

&lt;p&gt;The first thing that comes to mind is to directly define the debounced and throttled function within the functional component. So let‚Äôs try that first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code logic here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code logic here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debouncedOnChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttledHandleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleWindowResize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="c1"&gt;//rendering code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we do it this way, on every render cycle of the component, a new instance of the debounced/throttled function is created. Basically, we aren‚Äôt calling the same function after each re-render and it doesn‚Äôt work as expected, which you can see in the StackBlitz demo below:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-uzpj1r?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So this is definitely not the right way of using &lt;code&gt;debounce&lt;/code&gt;/&lt;code&gt;throttle&lt;/code&gt; in functional components.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#refining-our-implementation-based-on-our-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Refining Our Implementation Based on Our Learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we understand that we do not want multiple instances of our debounced or throttled function to get created after each render cycle, we shall try to optimize it. One way we can do that is by using the &lt;code&gt;useCallback&lt;/code&gt; Hook.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecallback"&gt;React docs on &lt;code&gt;useCallback&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúPass an inline callback and an array of dependencies. &lt;code&gt;useCallback&lt;/code&gt; will return a memoized version of the callback that only changes if one of the dependencies has changed.‚Äù&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inputValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// other logic here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="c1"&gt;//debounced onChange functin&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debouncedOnChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// logic here&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttledHandleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleWindowResize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;debouncedOnChange&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// other code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, we see that the &lt;code&gt;onChange&lt;/code&gt; handler makes use of the enclosing state &lt;code&gt;inputValue&lt;/code&gt;. So when we create the memoized debounced function with &lt;code&gt;useCallback&lt;/code&gt;, we pass &lt;code&gt;inputValue&lt;/code&gt; in the dependency array of &lt;code&gt;useCallback&lt;/code&gt;. Otherwise, the values obtained in the function call will be stale values instead of the updated ones due to closures.&lt;/p&gt;

&lt;p&gt;We have a problem, though: A new reference of our function only gets created when &lt;code&gt;inputValue&lt;/code&gt; changes. However, the input value changes every time we want to call the function, so we will still face the same problem of a new reference getting created. The net result is that our function still doesn‚Äôt work as expected.&lt;/p&gt;

&lt;p&gt;The throttled function, for its part, doesn‚Äôt use any state or enclosing variable and hence works perfectly well with an empty dependency array.&lt;/p&gt;

&lt;p&gt;The StackBlitz below shows the same behavior:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-egaspf?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#further-optimizing-the-approach"&gt;
  &lt;/a&gt;
  Further Optimizing the Approach
&lt;/h2&gt;

&lt;p&gt;We now know that &lt;code&gt;useCallback&lt;/code&gt; can help if we are able to create the instance of the debounced or throttled function only on the initial render, so can we solve the problem of stale closures without having to add a dependency to &lt;code&gt;useCallback&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, you are in luck. The answer is yes.&lt;/p&gt;

&lt;p&gt;There are at least two ways we can solve this problem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keeping a copy of our state in &lt;code&gt;ref&lt;/code&gt;: Since &lt;code&gt;refs&lt;/code&gt; are mutated, they aren‚Äôt truly affected by closures in the sense that we can still see the updated value even if the reference is old. So whenever we are updating the state, we also update the &lt;code&gt;ref&lt;/code&gt;. We shall not go down this path unless it‚Äôs a last resort, as it is a bit hacky and involves a lot of state duplication, which isn‚Äôt ideal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass values as arguments: Instead of relying on closures to use a value, we can pass all the necessary values that our function needs as arguments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;debounceValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDebounceValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;nonDebouncedFuncCalls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;debouncedFuncCalls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;throttleValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setThrottleValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;nonThrottledFunctionCalls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;throttledFuntionCalls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`inputValue in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setDebounceValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setThrottleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debouncedOnChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttledHandleWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleWindowResize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nonDebouncedFuncCalls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;debouncedOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debouncedFuncCalls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onWindowResize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleWindowResize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nonThrottledFunctionCalls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;throttledHandleWindowResize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;throttledFuntionCalls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onWindowResize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onWindowResize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;onWindowResize&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;//rest of the rendering code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we are passing the &lt;code&gt;inputValue&lt;/code&gt; as an argument to the debounced function and thus ensuring that it has all the latest values it needs and works smoothly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Using functional state updates can also help to avoid passing every property ‚Äî especially if it just has to update the state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out the full working code in the StackBlitz below:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-waor3n?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So there we have it. Our debounced and throttled functions now work well with functional components too, and it wasn‚Äôt as complicated as we imagined it to be.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Instead of the &lt;code&gt;useCallback&lt;/code&gt;, we can also use &lt;code&gt;useMemo&lt;/code&gt;, but the main approach logic will remain the same.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We performed a step-by-step conversion of a class component to a functional component using &lt;code&gt;debounce&lt;/code&gt; with React Hooks. These are the key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need to use the same instance of the created function as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;useCallback/useMemo&lt;/code&gt; Hook to memoize our created functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To avoid closure issues and also prevent the function from getting recreated, we can pass the values needed by the function as arguments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;State updates that need previous values can be implemented using the functional form of &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thank you for Reading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please do share your suggestions in the comments below. If you liked this article share this with your friends.&lt;/p&gt;

&lt;p&gt;Consider following me on &lt;a href="https://twitter.com/ShubhamReacts"&gt;Twitter&lt;/a&gt; for more tips and trips related to web development.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>#7) Explain pass by value &amp; pass by reference‚ùì</title>
      <author>Mayank Yadav</author>
      <pubDate>Tue, 27 Jul 2021 07:01:57 +0000</pubDate>
      <link>https://dev.to/myk/7-explain-pass-by-value-pass-by-reference-3eah</link>
      <guid>https://dev.to/myk/7-explain-pass-by-value-pass-by-reference-3eah</guid>
      <description>&lt;p&gt;üî∞In JavaScript, &lt;em&gt;primitive data types&lt;/em&gt; is passed by value and &lt;em&gt;non-primitive data types&lt;/em&gt; is passed by reference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-by-value"&gt;
  &lt;/a&gt;
  üöÄPass by Value:
&lt;/h2&gt;

&lt;p&gt;-&amp;gt;In pass by value, function is called by directly passing the value of the variable as an argument.&lt;/p&gt;

&lt;p&gt;-&amp;gt;Any change that you make to the argument inside the function does not effect the original value.&lt;/p&gt;

&lt;p&gt;-&amp;gt;Parameters passed as an argument creates it's own copy.&lt;br&gt;
So, any changes inside the function will be on it's copy and not on the original value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvIAsmr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5gott6w1kib3z9a7fm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvIAsmr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5gott6w1kib3z9a7fm1.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Let's see how it worksüëá&lt;/p&gt;

&lt;p&gt;‚úÖFirstly, define a &lt;em&gt;passByValue&lt;/em&gt; function with an argument 'a'.&lt;/p&gt;

&lt;p&gt;‚úÖDeclare and initialize the value of &lt;em&gt;b = 1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚úÖThen, pass the 'b' variable into the function, JavaScript copies the value of 'b' to the 'a' variable.&lt;/p&gt;

&lt;p&gt;‚úÖAfter that, the &lt;em&gt;passByValue&lt;/em&gt; function changes the 'a' variable. However, this does not impact the original value of 'b'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-by-reference"&gt;
  &lt;/a&gt;
  üöÄPass by Reference:
&lt;/h2&gt;

&lt;p&gt;-&amp;gt;In Pass by Reference, function is called by directly passing the reference/address of the variable as an argument.&lt;/p&gt;

&lt;p&gt;-&amp;gt;On changing the value inside the function also change the original value. &lt;/p&gt;

&lt;p&gt;-&amp;gt;In JavaScript array and Object follows pass by reference property.&lt;/p&gt;

&lt;p&gt;-&amp;gt;In Pass by reference, parameters passed as an arguments does not create its own copy, it refers to the original value so any changes made inside function will directly affect the original value. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HexkztzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s86noruejsfirlxogyou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HexkztzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s86noruejsfirlxogyou.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how it worksüëá&lt;/p&gt;

&lt;p&gt;‚úÖFirstly, define the &lt;em&gt;passByReference()&lt;/em&gt; function that accepts an object person. The function sets the &lt;em&gt;name&lt;/em&gt; property of the object to &lt;em&gt;Maverick&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚úÖNext, declare a variable &lt;em&gt;friend&lt;/em&gt; and assign it an object whose &lt;em&gt;name&lt;/em&gt; property is set to &lt;em&gt;Ayush&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;‚ö†The &lt;em&gt;friend&lt;/em&gt; is a variable that references the actual object:&lt;br&gt;
 &lt;code&gt;let friend = {name: "Ayush",};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‚úÖThen, pass the &lt;em&gt;friend&lt;/em&gt; variable into the function.&lt;/p&gt;

&lt;p&gt;‚úÖJavaScript copies the value of the &lt;em&gt;friend&lt;/em&gt; variable to &lt;em&gt;person&lt;/em&gt; variable. &lt;/p&gt;

&lt;p&gt;‚úÖAs a result, both &lt;em&gt;friend&lt;/em&gt; and &lt;em&gt;person&lt;/em&gt; variables are referencing the same object in the memory: &lt;code&gt;passByReference(friend);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‚úÖAfter that, inside the function, the &lt;em&gt;name&lt;/em&gt; property of the object is set to &lt;em&gt;Maverick&lt;/em&gt; through the &lt;em&gt;person&lt;/em&gt; variable.&lt;/p&gt;

&lt;p&gt;‚úÖFinally, accessing the &lt;em&gt;name&lt;/em&gt; property of the &lt;em&gt;friend&lt;/em&gt; variable returns &lt;em&gt;Maverick&lt;/em&gt;. &lt;/p&gt;




</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 10 most in-demand Cloud / DevOps roles</title>
      <author>DEVOPS-JOBS.NET</author>
      <pubDate>Tue, 27 Jul 2021 06:42:20 +0000</pubDate>
      <link>https://dev.to/devops_jobsnet/the-10-most-in-demand-cloud-devops-role-3ei0</link>
      <guid>https://dev.to/devops_jobsnet/the-10-most-in-demand-cloud-devops-role-3ei0</guid>
      <description>&lt;p&gt;We thought it would be interesting to go deeper into the analytics part of running our DevOps job board ‚Äì in the most privacy focused way for our users, of course. So here we are now starting to expose some of our aggregated internal job data in a systematic fashion through a simple REST API with a list of generalized job titles that are posted on devops-jobs.net.&lt;/p&gt;

&lt;p&gt;The cool thing with this is that we are able to see what‚Äôs popular in terms of the roles employers are hiring for most in the Cloud, Infrastructure and DevOps space.&lt;/p&gt;

&lt;p&gt;Our ‚Äúmethodology‚Äù here is quite simple: we‚Äôre primarily counting the occurence of job titles over the last 12 months, cleaned and adjusted for certain specialties that some companies like to do, e.g. inventing their own stuff that‚Äôs not being used by anyone else or adding crazy super-specific details to a vacancy title and so on. We also left out many titles with indicators regarding seniority or other requirements as we already have dedicated attributes for these. More on that probably in a future post.&lt;/p&gt;

&lt;p&gt;So here it is, our current (as of June 2021) top list of the ten Cloud / DevOps roles with the highest demand from employers on our site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DevOps Engineer&lt;/li&gt;
&lt;li&gt;Site Reliability Engineer&lt;/li&gt;
&lt;li&gt;Cloud Infrastructure Engineer&lt;/li&gt;
&lt;li&gt;Infrastructure Engineer&lt;/li&gt;
&lt;li&gt;Cloud Engineer&lt;/li&gt;
&lt;li&gt;QA Automation Engineer&lt;/li&gt;
&lt;li&gt;Cloud Architect&lt;/li&gt;
&lt;li&gt;DevSecOps Engineer&lt;/li&gt;
&lt;li&gt;Test Automation Engineer&lt;/li&gt;
&lt;li&gt;Platform Engineer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your interested in the raw JSON data you can find the endpoint here: &lt;a href="https://devops-jobs.net/api/list-job-titles/"&gt;https://devops-jobs.net/api/list-job-titles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results there are updated every 6 hours, although it won‚Äôt really change that much anytime soon. And if it does we‚Äôll probably write about it üòâ&lt;/p&gt;

&lt;p&gt;We also use all the job titles from that list for our brand new salaries survey to have a ‚Äústandardized‚Äù selection of positions to choose from and attach salaries to. You can check out the survey ‚Äì and the resulting dataset being released in the public domain ‚Äì here: &lt;a href="https://salaries.devops-jobs.net/"&gt;https://salaries.devops-jobs.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was first published at &lt;a href="https://insights.devops-jobs.net/the-10-most-in-demand-cloud-devops-roles/"&gt;https://insights.devops-jobs.net/the-10-most-in-demand-cloud-devops-roles/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cloudskills</category>
      <category>devops</category>
      <category>insights</category>
      <category>career</category>
    </item>
    <item>
      <title>Share your salary and see what everyone else is making in InfoSec / the Cyber Security space</title>
      <author>infosec-jobs.com</author>
      <pubDate>Tue, 27 Jul 2021 06:33:03 +0000</pubDate>
      <link>https://dev.to/infosec_jobscom/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space-4man</link>
      <guid>https://dev.to/infosec_jobscom/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space-4man</guid>
      <description>&lt;p&gt;We were wondering quite recently what the global salary landscape in the InfoSec world would look like. Searching around for some data provided few results and basically all of them didn‚Äôt provide a full dataset for us to play around with and use freely.&lt;/p&gt;

&lt;p&gt;So we decided to set up our own survey, ask the global InfoSec scene what they‚Äôre making anually, and then release all the data for free afterwards in the public domain under &lt;a href="https://creativecommons.org/share-your-work/public-domain/cc0/"&gt;CC0 license terms&lt;/a&gt;. Which literally means global salary data from the public, for the public.&lt;/p&gt;

&lt;p&gt;We went on quickly by defining some generalized attributes that would make a really simplistic survey everyone can fill it out in under a minute and don‚Äôt have to think too hard while doing it, but would still provide as much valuable information as possible so you can derive real insights from it. All of this in an anonymized fashion, of course. We don‚Äôt like touching PII anyways ‚Äì &lt;a href="https://infosec-jobs.com/about/"&gt;not really our business üòâ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It took almost two weeks of deliberations about what to ask for ‚Äì yeah it gets quite difficult when you start thinking about what makes sense and trying not to mess it up completely ‚Äì and in roughly a weekend our little salaries app (Django + SQLite are your friends, yay) was built and ready to launch.&lt;/p&gt;

&lt;p&gt;üéâ Released a few days ago you can check (and fill) it out here: &lt;a href="https://salaries.infosec-jobs.com/"&gt;https://salaries.infosec-jobs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As soon as we have a little valid dataset and solved some open issues along the way (noticed we provide a selection of the 30 most used currencies in global trade? Probably some averaged conversion into USD for all non-USD salaries would be nice having added to the data as well ü§î) we‚Äôll release a first dump of the data here.&lt;/p&gt;

&lt;p&gt;In the end we think it would be great if we can manage to create a sort of rolling survey throughout the year with a constantly updated dataset that everyone can use as they wish ‚Äì candidates, recruiters, hr departments, startup founders, data scientists, you name it‚Ä¶&lt;/p&gt;

&lt;p&gt;We made everything a select/choice field to avoid free-form input in general, except for the salary value of course. The job titles are the ones that are popular on our InfoSec job board, just to stay real and not list decades old jobs that practially don‚Äôt mean anything and aren‚Äôt even hired for anymore. We provide an open API for this too (see &lt;a href="https://infosec-jobs.com/api/list-job-titles/"&gt;https://infosec-jobs.com/api/list-job-titles/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you like the idea and want to help us to gather a free and open database of InfoSec / Cyber Security salary information, feel free to share this survey with anyone who likes to fill out salary surveys ‚Äì just kidding ‚Äì the more data the better obviously üòâ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post appeared first on &lt;a href="https://insights.infosec-jobs.com/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space/"&gt;https://insights.infosec-jobs.com/share-your-salary-and-see-what-everyone-else-is-making-in-infosec-the-cyber-security-space/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>career</category>
      <category>hiring</category>
      <category>insights</category>
    </item>
    <item>
      <title>The 10 most in-demand jobs in AI/ML and Big Data</title>
      <author>ai-jobs.net</author>
      <pubDate>Tue, 27 Jul 2021 06:23:40 +0000</pubDate>
      <link>https://dev.to/ai_jobsnet/the-10-most-in-demand-jobs-in-ai-ml-and-big-data-3394</link>
      <guid>https://dev.to/ai_jobsnet/the-10-most-in-demand-jobs-in-ai-ml-and-big-data-3394</guid>
      <description>&lt;p&gt;We thought it would be interesting to go deeper into the analytics part of running our AI/ML/DS job board ‚Äì in the most privacy focused way for our users, of course. So here we are now starting to expose some of our aggregated internal job data in a systematic fashion through a simple REST API with a list of generalized job titles that are posted on ai-jobs.net.&lt;/p&gt;

&lt;p&gt;The cool thing with this is that we are able to see what‚Äôs popular in terms of the roles employers are hiring for most often in the AI/ML and Big Data space.&lt;/p&gt;

&lt;p&gt;Our ‚Äúmethodology‚Äù here is quite simple: we‚Äôre primarily counting the occurence of job titles over the last 12 months, cleaned and adjusted for certain specialties that some companies like to do, e.g. inventing their own stuff that‚Äôs not being used by anyone else or adding crazy super-specific details to a vacancy title and so on. We also left out many titles with indicators regarding seniority or other requirements as we already have dedicated attributes for these. More on that probably in a future post.&lt;/p&gt;

&lt;p&gt;So here it is, our current (as of June 2021) top list of the ten AI/ML/Big Data roles with the highest demand from employers on our site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Engineer&lt;/li&gt;
&lt;li&gt;Data Scientist&lt;/li&gt;
&lt;li&gt;Data Analyst&lt;/li&gt;
&lt;li&gt;Machine Learning Engineer&lt;/li&gt;
&lt;li&gt;Big Data Engineer&lt;/li&gt;
&lt;li&gt;Principal Data Scientist&lt;/li&gt;
&lt;li&gt;Staff Data Engineer&lt;/li&gt;
&lt;li&gt;Marketing Data Analyst&lt;/li&gt;
&lt;li&gt;Data Engineering Manager&lt;/li&gt;
&lt;li&gt;Lead Data Scientist&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your interested in the raw JSON data you can find the endpoint here: &lt;a href="https://ai-jobs.net/api/list-job-titles/"&gt;https://ai-jobs.net/api/list-job-titles/&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results there are updated every 6 hours, although it won‚Äôt really change that much anytime soon. And if it does we‚Äôll maybe write about it üòâ&lt;/p&gt;

&lt;p&gt;We also use all the job titles from that list for our brand new salaries survey to have a ‚Äústandardized‚Äù selection of positions to choose from and attach salaries to. You can check out the survey ‚Äì and the resulting dataset being released in the public domain ‚Äì here: &lt;a href="https://salaries.ai-jobs.net/"&gt;https://salaries.ai-jobs.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published on June 1, 2021 under &lt;a href="https://insights.ai-jobs.net/the-10-most-in-demand-jobs-in-ai-ml-and-big-data/"&gt;https://insights.ai-jobs.net/the-10-most-in-demand-jobs-in-ai-ml-and-big-data/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>machinelearning</category>
      <category>ai</category>
      <category>hiring</category>
    </item>
  </channel>
</rss>
