<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Next.js Starter With Authentication + React 17 + TypeScript + Tailwind CSS 2 + ESLint</title>
      <author>Bhanu Teja Pachipulusu</author>
      <pubDate>Sun, 22 Nov 2020 08:09:13 +0000</pubDate>
      <link>https://dev.to/pbteja1998/next-js-starter-with-authentication-react-17-typescript-tailwind-css-2-eslint-2a2g</link>
      <guid>https://dev.to/pbteja1998/next-js-starter-with-authentication-react-17-typescript-tailwind-css-2-eslint-2a2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-world" class="anchor"&gt;
  &lt;/a&gt;
  Hello World 👋
&lt;/h2&gt;

&lt;p&gt;Next.js has become my go-to framework for almost every project that I make. So, I made a starter template that I can just use and get started easily.&lt;/p&gt;

&lt;p&gt;In this article, I will show you how to use the starter template that I made and deploy it with Vercel. I will also be connecting a Postgres database which I will create on Heroku.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-all-does-this-starter-template-has" class="anchor"&gt;
  &lt;/a&gt;
  What all does this starter template has?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Next.js/React 17&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Tailwind CSS 2&lt;/li&gt;
&lt;li&gt;React Query&lt;/li&gt;
&lt;li&gt;React Query Dev Tools&lt;/li&gt;
&lt;li&gt;Prisma 2&lt;/li&gt;
&lt;li&gt;GitHub Auth&lt;/li&gt;
&lt;li&gt;Email + Passwordless Auth&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Husky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this is the tech stack that you are interested in, then follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-template" class="anchor"&gt;
  &lt;/a&gt;
  1. Use Template
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XuAIJWQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605936676564/_4P5Oj3Dv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XuAIJWQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605936676564/_4P5Oj3Dv.png" alt="Screenshot 2020-11-21 at 10.57.39 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://github.com/pbteja1998/nextjs-starter"&gt;pbteja1998/nextjs-starter&lt;/a&gt; repo and click on &lt;code&gt;Use this template&lt;/code&gt; button.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-create-repo" class="anchor"&gt;
  &lt;/a&gt;
  2. Create Repo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KMZTwLIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605936868332/RxLZWQGem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KMZTwLIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605936868332/RxLZWQGem.png" alt="Screenshot 2020-11-21 at 11.04.02 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow the instructions and create your repo&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-deploy-to-vercel" class="anchor"&gt;
  &lt;/a&gt;
  3. Deploy to Vercel
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#31-import-project" class="anchor"&gt;
  &lt;/a&gt;
  3.1. Import Project
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rYE_Mej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937097391/9Lczi_Jp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rYE_Mej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937097391/9Lczi_Jp0.png" alt="Screenshot 2020-11-21 at 11.06.58 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login to &lt;a href="https://vercel.com"&gt;vercel&lt;/a&gt; and click on &lt;code&gt;Import Project&lt;/code&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#32-import-git-repo" class="anchor"&gt;
  &lt;/a&gt;
  3.2. Import Git Repo
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZC7Whwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937245104/x80XJkRGs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZC7Whwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937245104/x80XJkRGs.png" alt="Screenshot 2020-11-21 at 11.09.32 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's import from Git Repository&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#33" class="anchor"&gt;
  &lt;/a&gt;
  3.3.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6FqSMmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937391460/29tPukIQq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6FqSMmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937391460/29tPukIQq.png" alt="Screenshot 2020-11-21 at 11.12.12 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the URL of the repo that you created earlier and &lt;code&gt;Continue&lt;/code&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#34-create-vercel-project" class="anchor"&gt;
  &lt;/a&gt;
  3.4. Create Vercel Project
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FRMM6GH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937524068/jiJCAks3J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FRMM6GH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937524068/jiJCAks3J.png" alt="Screenshot 2020-11-21 at 11.14.49 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose the name of the project and &lt;code&gt;Deploy&lt;/code&gt;. We will be adding the required environment variables later.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#35-successful-deployment" class="anchor"&gt;
  &lt;/a&gt;
  3.5. Successful Deployment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b87wfLgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937865940/ACjD9b5Zw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b87wfLgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937865940/ACjD9b5Zw.png" alt="Screenshot 2020-11-21 at 11.19.33 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see this once deployed. Open the dashboard after a successful deployment.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#36-dashboard" class="anchor"&gt;
  &lt;/a&gt;
  3.6. Dashboard
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PZy0sgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937993723/DTsKaDryF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PZy0sgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937993723/DTsKaDryF.png" alt="Screenshot 2020-11-21 at 11.21.52 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. Your Next.js starter application has been deployed to Vercel. You can click on &lt;code&gt;Visit&lt;/code&gt; to open the website.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#37-web-application-demo" class="anchor"&gt;
  &lt;/a&gt;
  3.7.  Web Application Demo
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wkvQB5ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605938157984/LypP5IspB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wkvQB5ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605938157984/LypP5IspB.png" alt="Screenshot 2020-11-21 at 11.25.37 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see something like this. This home page template is taken from one of the examples in &lt;a href="https://tailwindcss.com"&gt;tailwindcss.com&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-create-a-database" class="anchor"&gt;
  &lt;/a&gt;
  4. Create a database
&lt;/h3&gt;

&lt;p&gt;We need a database to store users and user sessions. I will be using the Postgres database. But you can use whatever you want. If you already have a URL for your database, you can skip this step. I will be using Heroku to create a Postgres database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#41-create-a-new-heroku-app" class="anchor"&gt;
  &lt;/a&gt;
  4.1. Create a new Heroku app
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmGXi4Zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605938707438/tZ6AVYcRJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmGXi4Zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605938707438/tZ6AVYcRJ.png" alt="Screenshot 2020-11-21 at 11.34.16 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVB27Uus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605938825143/vEkLidE2-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVB27Uus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605938825143/vEkLidE2-.png" alt="Screenshot 2020-11-21 at 11.35.53 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#42-go-to-resources-tab-and-add-raw-heroku-postgres-endraw-addon" class="anchor"&gt;
  &lt;/a&gt;
  4.2. Go to Resources Tab and add &lt;code&gt;Heroku Postgres&lt;/code&gt; addon
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kryjs0QD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939118945/c56DV1RVA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kryjs0QD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939118945/c56DV1RVA.png" alt="Screenshot 2020-11-21 at 11.40.52 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#43" class="anchor"&gt;
  &lt;/a&gt;
  4.3.
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Heroku Postgres&lt;/code&gt; has a free tier available. I will be using that for the demonstration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FylCmiNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939266087/fR-CWaH2Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FylCmiNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939266087/fR-CWaH2Q.png" alt="Screenshot 2020-11-21 at 11.42.27 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#44-you-now-have-a-new-postgres-db-created-click-on-the-addon-to-open-the-database-dashboard" class="anchor"&gt;
  &lt;/a&gt;
  4.4. You now have a new Postgres DB created. Click on the addon to open the database dashboard
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvNG10dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939387242/eG2XADex3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvNG10dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939387242/eG2XADex3.png" alt="Screenshot 2020-11-21 at 11.45.58 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#45-view-credentials" class="anchor"&gt;
  &lt;/a&gt;
  4.5. View Credentials
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcI6PMSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939581690/PNnkecquC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcI6PMSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939581690/PNnkecquC.png" alt="Screenshot 2020-11-21 at 11.48.16 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;Settings&lt;/code&gt; and then &lt;code&gt;View Credentials&lt;/code&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#46-copy-database-uri" class="anchor"&gt;
  &lt;/a&gt;
  4.6. Copy Database URI
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fM3fkR28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939762750/5GT1OhGNu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fM3fkR28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605939762750/5GT1OhGNu.png" alt="Screenshot 2020-11-21 at 11.50.40 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should be able to see the database URI now. Copy that we will be using it later.&lt;br&gt;
Also, note that the free tier Heroku database credentials are not permanent. They change periodically. So, when you are deploying for production, use some other database that is stable or upgrade your Heroku database to a paid plan. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-setup-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  5. Setup Environment Variables
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#51-open-env-vars-dashboard-in-your-newly-created-vercel-project" class="anchor"&gt;
  &lt;/a&gt;
  5.1. Open Env Vars dashboard in your newly created Vercel project
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M73ERAbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940349623/dg7bHlDqP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M73ERAbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940349623/dg7bHlDqP.png" alt="Screenshot 2020-11-21 at 12.01.30 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#52-add-databaseurl" class="anchor"&gt;
  &lt;/a&gt;
  5.2. Add DATABASE_URL
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PpfNFca7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940625455/slKyASNuB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PpfNFca7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940625455/slKyASNuB.png" alt="Screenshot 2020-11-21 at 12.06.46 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#create-a-new-secret" class="anchor"&gt;
  &lt;/a&gt;
  Create a new secret
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QrRvX7Ll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940580529/vmxVupL7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QrRvX7Ll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940580529/vmxVupL7h.png" alt="Screenshot 2020-11-21 at 12.05.18 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#save-environment-variable" class="anchor"&gt;
  &lt;/a&gt;
  Save environment variable
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5ulQHaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940717998/z-1EW3JEj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5ulQHaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940717998/z-1EW3JEj.png" alt="Screenshot 2020-11-21 at 12.08.06 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouPRv12U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940767744/IkfA61e0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouPRv12U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605940767744/IkfA61e0t.png" alt="Screenshot 2020-11-21 at 12.09.18 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#create-raw-nextauthurl-endraw-variable" class="anchor"&gt;
  &lt;/a&gt;
  Create &lt;code&gt;NEXTAUTH_URL&lt;/code&gt; variable
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pREP_X_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605941015388/FwqVAppLt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pREP_X_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605941015388/FwqVAppLt.png" alt="Screenshot 2020-11-21 at 12.13.20 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the URL of the deployment. &lt;/p&gt;




&lt;p&gt;Similarly, create all the variables that you can see in &lt;a href="https://github.com/pbteja1998/nextjs-starter/blob/master/.env.example"&gt;.env.example&lt;/a&gt; file of the repo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SECRET&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Some random string&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;SMTP_HOST

&lt;ul&gt;
&lt;li&gt;SMTP host to send emails from. Example: &lt;code&gt;smtp.zoho.com&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;SMTP_PORT

&lt;ul&gt;
&lt;li&gt;Your SMTP port. Example: &lt;code&gt;465&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;SMTP_USER

&lt;ul&gt;
&lt;li&gt;Your SMTP user. Example: &lt;code&gt;bhanuteja@mycompany.org&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;SMTP_PASSWORD

&lt;ul&gt;
&lt;li&gt;Your email/SMTP password.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;SMTP_FROM

&lt;ul&gt;
&lt;li&gt;Email address from where you want your emails to come from.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;GITHUB_ID

&lt;ul&gt;
&lt;li&gt;Your Github OAuth App ID&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;GITHUB_SECRET

&lt;ul&gt;
&lt;li&gt;Your Github OAuth App Secret&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can follow the steps described &lt;a href="https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/"&gt;here&lt;/a&gt; to create a GitHub OAuth application. While creating that OAuth app, add &lt;code&gt;https://&amp;lt;vercel-deployment-url&amp;gt;/api/auth&lt;/code&gt; as &lt;code&gt;Authorization callback URL&lt;/code&gt;. For example, in my case, I will add &lt;code&gt;https://nextjs-starter-kit-psi.vercel.app/api/auth&lt;/code&gt; The rest of the fields, you can fill with anything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkQeGc6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605941558383/XlkQ3GbRK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkQeGc6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605941558383/XlkQ3GbRK.png" alt="Screenshot 2020-11-21 at 12.22.28 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;After adding all the environment variables, you need to redeploy the application for the changes to take effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SYIP93D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605941835866/FsveQ_Ups.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SYIP93D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605941835866/FsveQ_Ups.png" alt="Screenshot 2020-11-21 at 12.26.01 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now, your new deployment will have GitHub authentication and passwordless login with email.&lt;/p&gt;




&lt;p&gt;I will also make a slim version of the starter kit in the future which will not require any database setup. &lt;/p&gt;

&lt;p&gt;If you have any suggestions or face any problems setting this up, &lt;a href="https://github.com/pbteja1998/nextjs-starter/issues/new"&gt;open a new issue in the repo&lt;/a&gt;. I will be more than happy to help you resolve those. If you like this starter kit, give a star to &lt;a href="https://github.com/pbteja1998/nextjs-starter"&gt;pbteja1998/nextjs-starter&lt;/a&gt; repo.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#until-next-time" class="anchor"&gt;
  &lt;/a&gt;
  Until Next Time 👋
&lt;/h4&gt;

&lt;p&gt;If you liked this article, check out&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.bhanuteja.dev/3-simple-steps-to-setup-authentication-in-nextjs"&gt;3 Simple Steps To Setup Authentication in Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bhanuteja.dev/how-to-import-svgs-into-your-nextjs-project"&gt;How to Import SVGs into your Next.js Project?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bhanuteja.dev/add-typescript-to-your-nextjs-project"&gt;Add Typescript to your Next.js project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any comments, please leave them below or you can also @ me on Twitter (&lt;a href="https://twitter.com/pbteja1998"&gt;@pbteja1998&lt;/a&gt;), or feel free to follow me.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#links-and-references" class="anchor"&gt;
  &lt;/a&gt;
  Links and References:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/prisma/passwordless-authentication-with-next-js-prisma-and-next-auth-5g8g"&gt;Passwordless Authentication with Next.js, Prisma, and next-auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://next-auth.js.org/"&gt;NextAuth.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pbteja1998/nextjs-starter"&gt;pbteja1998/nextjs-starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://next-starter.vercel.app/"&gt;Nextjs Starter Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://heroku.com/"&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Software Architecture</title>
      <author>Yegor Voronyansky</author>
      <pubDate>Sun, 22 Nov 2020 08:00:34 +0000</pubDate>
      <link>https://dev.to/vrnsky/software-architecture-1k7e</link>
      <guid>https://dev.to/vrnsky/software-architecture-1k7e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7tZxXh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rpm5oszc1weogwc7o2d9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7tZxXh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rpm5oszc1weogwc7o2d9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Introduction&lt;br&gt;
In this article I will try to explain what is architecture, clean architecture, architector role in project&lt;/p&gt;

&lt;p&gt;Examples of web architecture application&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q34VJPm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tulofphvlpo28ngrfrao.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q34VJPm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tulofphvlpo28ngrfrao.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's consider an example of a service with one architectural level (Single Tier)&lt;/p&gt;

&lt;p&gt;In an application with one architectural level, the user interface, business logic, that is, the backend part of the application and the database are on the same server&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBvQrhBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gw5b65ldm2s3j020vfwk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBvQrhBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gw5b65ldm2s3j020vfwk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example of an application with one architectural level are applications such as MS Office, GIMP&lt;/p&gt;

&lt;p&gt;Benefits of using a single-layer architecture&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Very little or no delay in the interaction of components due to the fact that the components are located on the same server&lt;/li&gt;
&lt;li&gt;Although it largely depends on the machine's power and software hardware requirements, to measure the real performance of a single-tier application&lt;/li&gt;
&lt;li&gt;In addition, the user's data remains on his machine and does not need to be transferred over the network. This ensures data security at the highest level. Client data cannot be intercepted, since data exchange will occur within the same server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Disadvantages of this architecture&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The impossibility of changing the code or functions after delivery to the production server. For example, in the 90s, if the game was shipped with an erroneous code, the studios could do nothing&lt;/li&gt;
&lt;li&gt;Code in peer-to-peer applications is also vulnerable to rework and reversal. Business security is minimal, because in the case of reverse engineering, an attacker or competitor can gain access to your codebase, which can lead to financial losses. Example - your application works with finances, attackers have exposed part of your system's code and can now bypass some of your checks and thus use your application for fraud&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#twotier-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Two-tier architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb4J4J1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g6gnaiojx8vyxbf0r2qw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb4J4J1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g6gnaiojx8vyxbf0r2qw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A two-tier application includes a client and a server. The client will contain the user interface and business logic on the same machine. And the server will be a backend application deployed on another computer.&lt;/p&gt;

&lt;p&gt;There are times when you need to use a two-tier architecture, such as to-do list applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#threetier-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Three-tier architecture
&lt;/h3&gt;

&lt;p&gt;Three-tier architecture is quite popular and often used. Most simple websites like blogs, news sites use this architecture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIV1j-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhz1m7br2iejbido1y5e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIV1j-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhz1m7br2iejbido1y5e.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's consider an example of a simple blog - the client interface will be written using HTML, JavaScript, CSS and the backend application will be launched on a server, for example Apache, and the backend part will use the PostgreSQL database as storage&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ntier-architecture" class="anchor"&gt;
  &lt;/a&gt;
  N-tier architecture
&lt;/h3&gt;

&lt;p&gt;This term is used to describe an architecture that uses more than three components. Examples of these components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache - an example of this technology JCache, Caffeine. This technology is used for the following things - 1. Reduce the response time from the application without requesting any data in the database, 2. Also save some responses from third-party systems, since this can take a very long time&lt;/li&gt;
&lt;li&gt;Message broker - examples are Apache Kafka, RabbitMQ. This tool is necessary to save any messages, a message can mean some kind of request to a third-party system, for example, in Kafka you can store messages that will have to be sent to the tax system or the fiscal data operator&lt;/li&gt;
&lt;li&gt;Load balancer - examples are Nginx, Ribbon, Eureka. This tool is required to distribute the load on the application. Imagine the following situation - you have a distributed application, which means there are several instances or nodes, and in order to optimize the speed for the end user, all requests go through the balancer, which chooses a less loaded instance / node&lt;/li&gt;
&lt;li&gt;Search services - to search for information in huge amounts of data&lt;/li&gt;
&lt;li&gt;Components responsible for processing data arrays&lt;/li&gt;
&lt;li&gt;Components using heterogeneous technologies, commonly known as web services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All modern social applications - Instagram, Facebook and scalable services like Uber, Airbnb, as well as games with a huge number of players like Pokemon Go, for example, use an N-tier architecture&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Clean architecture
&lt;/h3&gt;

&lt;p&gt;The center of your application is not the database. An architecture is also not one or more frameworks that you can use. The center of your app is the use cases for your app. The center of the application is the functionality for which the business gets paid, that is, what problem / what value does your application bring to the business - this place is the center of the application&lt;/p&gt;

&lt;p&gt;Clean architecture is a set of practices, techniques, design patterns that enable you to create an extensible and reliable application. Designed to prevent the following problems that may arise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decisions are made very quickly - hasty decisions can lead to problems when the application is on the production server&lt;/li&gt;
&lt;li&gt;Difficult to make changes&lt;/li&gt;
&lt;li&gt;Stuck on a certain framework - one day an organization / person may decide that he / she does not have the strength to support this framework. Accordingly, you should not be strongly tied to the framework&lt;/li&gt;
&lt;li&gt;Focusing only on technical aspects - it is important to understand that when developing, you should focus not only on technical aspects, but also on what business value the development of new functionality will bring&lt;/li&gt;
&lt;li&gt;It's hard to find the right places in the project&lt;/li&gt;
&lt;li&gt;Business logic is scattered throughout the code - if some requirements change, the programmer will have to find all the places in the code and change the functionality in each place. If the business logic is isolated in one place, then the programmer only needs to change the code in one place&lt;/li&gt;
&lt;li&gt;Lack of tests&lt;/li&gt;
&lt;li&gt;Infrequent updates
Clean architecture also provides the following benefits when used&lt;/li&gt;
&lt;li&gt;Effective testing strategy&lt;/li&gt;
&lt;li&gt;Code for using frameworks is isolated&lt;/li&gt;
&lt;li&gt;Database independence&lt;/li&gt;
&lt;li&gt;All business logic is contained in the application use cases&lt;/li&gt;
&lt;li&gt;Hard to do wrong&lt;/li&gt;
&lt;li&gt;The application is always ready for output to the production
environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_saAhJxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ex7iwwba2ocgd2y3hcvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_saAhJxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ex7iwwba2ocgd2y3hcvq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_saAhJxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ex7iwwba2ocgd2y3hcvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_saAhJxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ex7iwwba2ocgd2y3hcvq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's analyze these figures in more detail:&lt;/p&gt;

&lt;p&gt;The core of the application is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entities representing the domain area or subject area. Subject area for payment gateway application - Internet finance&lt;/li&gt;
&lt;li&gt;At this level is the code that is applicable to the entire object as a whole (for example, checking the format of the hostname)&lt;/li&gt;
&lt;li&gt;Java Plain Objects: no frameworks or annotations required&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Core:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Represents the business actions of your application - this is what your application can do.&lt;/li&gt;
&lt;li&gt;Pure business logic, Java code without using any frameworks, but using utilitarian libraries such as Apache Commons&lt;/li&gt;
&lt;li&gt;Defines the interfaces for the data that are needed to apply the logic. One or more data providers implement the interface, but in case of use it is not known where the data is coming from&lt;/li&gt;
&lt;li&gt;At this level, business exceptions are thrown - exceptions that are directly related to the application domain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data providers (dataproviders):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receiving and storing data from multiple sources of information (database, network devices, file system, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application entrypoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This application layer describes the way to interact with the application and usually includes a delivery mechanism (for example, REST API, scheduled tasks, GUI, other systems)&lt;/li&gt;
&lt;li&gt;Launching a use case and converting the result into a format that matches the delivery mechanism&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connects all components together&lt;/li&gt;
&lt;li&gt;Dependency Injection is isolated here&lt;/li&gt;
&lt;li&gt;Contain "dirty details" - such as Main class, web server configuration, database configuration, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDN-92hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/imzgb7rlhtu01z1u78zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDN-92hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/imzgb7rlhtu01z1u78zh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDN-92hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/imzgb7rlhtu01z1u78zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDN-92hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/imzgb7rlhtu01z1u78zh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#architectural-application-templates" class="anchor"&gt;
  &lt;/a&gt;
  Architectural Application Templates
&lt;/h1&gt;

&lt;p&gt;An architectural pattern is a repetitive and generic solution to a problem arising from an application architecture problem within a given context.&lt;/p&gt;

&lt;p&gt;Let's take a look at 10 popular architectural patterns&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multilevel&lt;/li&gt;
&lt;li&gt;Client - server&lt;/li&gt;
&lt;li&gt;Leading - slave&lt;/li&gt;
&lt;li&gt;Channels and filters&lt;/li&gt;
&lt;li&gt;Mediator template&lt;/li&gt;
&lt;li&gt;Peer-to-peer template&lt;/li&gt;
&lt;li&gt;Event bus&lt;/li&gt;
&lt;li&gt;Model - View - Controller&lt;/li&gt;
&lt;li&gt;Board&lt;/li&gt;
&lt;li&gt;Interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#multilevel" class="anchor"&gt;
  &lt;/a&gt;
  Multilevel
&lt;/h3&gt;

&lt;p&gt;It is used to structure programs that can be decomposed into groups of certain subtasks located at certain levels of abstraction. Each layer provides services for the next higher layer.&lt;/p&gt;

&lt;p&gt;Most often, there are 4 layers in common information systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Presentation layer (also known as user interface layer)&lt;/li&gt;
&lt;li&gt;Application layer (also known as service layer)&lt;/li&gt;
&lt;li&gt;Business logic layer (also known as domain layer)&lt;/li&gt;
&lt;li&gt;Data access layer (also known as data storage layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Common desktop applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web applications e-commerce.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#client-server" class="anchor"&gt;
  &lt;/a&gt;
  Client - Server
&lt;/h3&gt;

&lt;p&gt;This template consists of two parts: server and many clients . The server component provides services to the client components. Clients request services from the server, and it, in turn, provides these very services to clients. Moreover, the server continues to "eavesdrop" on client requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Online applications (email, document sharing, banking).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master-slave" class="anchor"&gt;
  &lt;/a&gt;
  Master - Slave
&lt;/h3&gt;

&lt;p&gt;This pattern also involves two participants - master and slaves. The Leader distributes tasks to identical Followers and calculates the final result based on the results received from its "Subordinates".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In database replication. There, the main database is considered an authoritative source, and the subordinate databases are synchronized with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Peripheral devices connected to the bus in the computer (master and slave devices).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#channels-and-filters" class="anchor"&gt;
  &lt;/a&gt;
  Channels and Filters
&lt;/h3&gt;

&lt;p&gt;This pattern is suitable for systems that generate and process data streams. Each processing step takes place inside a filter component. Data for processing is transmitted via channels. These channels can be used to buffer or synchronize data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;· Compilers. Sequential filters perform lexical, parsing, semantic analysis, and code generation.&lt;/p&gt;

&lt;p&gt;· Workflows in bioinformatics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mediator-template" class="anchor"&gt;
  &lt;/a&gt;
  Mediator template
&lt;/h3&gt;

&lt;p&gt;This pattern is needed to structure distributed systems with disconnected components. These components can communicate with each other through a remote service call. The mediator component is responsible for coordinating the interaction of components.&lt;/p&gt;

&lt;p&gt;The server hosts its capabilities (services and characteristics) with an intermediary (broker). The client requests a service from the broker. The broker then redirects the client to the appropriate service from its registry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;· Message brokers by type &lt;a href="https://en.wikipedia.org/wiki/Apache_ActiveMQ"&gt;Apache ActiveMQ&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Apache_Kafka"&gt;Apache Kafka&lt;/a&gt;,  &lt;a href="https://en.wikipedia.org/wiki/RabbitMQ"&gt;RabbitMQ&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/JBoss_Messaging"&gt;JBoss Messaging&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peertopeer-template" class="anchor"&gt;
  &lt;/a&gt;
  Peer-to-peer template
&lt;/h3&gt;

&lt;p&gt;There are separate components in this template, the so-called  peers. Peers can act as a client requesting services from other peers (peers), and a server providing services to other peers. A peer can be a client or a server, or all at once, and can dynamically change its role over time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;· File sharing networks (&lt;a href="https://en.wikipedia.org/wiki/Gnutella"&gt;Gnutella&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Gnutella2"&gt;G2&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;· Multimedia Protocols (&lt;a href="https://en.wikipedia.org/wiki/P2PTV"&gt;P2PTV&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Peer_Distributed_Transfer_Protocol"&gt;PDTP&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;· Proprietary multimedia applications (like the same &lt;a href="https://en.wikipedia.org/wiki/Spotify"&gt;Spotify&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#event-bus" class="anchor"&gt;
  &lt;/a&gt;
  Event Bus
&lt;/h3&gt;

&lt;p&gt;This template mainly interacts with events and has 4 main components: event source, event listener, channel and event bus. Sources place messages for specific channels on the event bus. Listeners subscribe to specific channels. Listeners are notified of the appearance of messages posted on channels from their subscription.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Android development&lt;/p&gt;

&lt;p&gt;Notification services&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#model-view-controller" class="anchor"&gt;
  &lt;/a&gt;
  Model - View - Controller
&lt;/h3&gt;

&lt;p&gt;This pattern is also known as the MVC pattern. It divides interactive applications into 3 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;model - contains key data and functionality;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;view - shows information to the user (more than one view can be specified);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;controller - deals with the processing of data from the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is done in order to differentiate the internal presentation of information from the way it is presented and received from the user. This design isolates components and allows for efficient code reuse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;· Architecture of WWW-applications written in the main programming languages.&lt;/p&gt;

&lt;p&gt;· Web frameworks (for example, &lt;a href="https://en.wikipedia.org/wiki/Django_%28web_framework%29"&gt;Django&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/%20wiki%20/%20Ruby_on_Rails"&gt;Rails&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#board" class="anchor"&gt;
  &lt;/a&gt;
  Board
&lt;/h3&gt;

&lt;p&gt;This pattern is suitable for problems for which there are no clear deterministic solutions. The Board template has 3 main components:&lt;/p&gt;

&lt;p&gt;· board is a structured global memory containing objects from the space of possible solutions;&lt;/p&gt;

&lt;p&gt;· source of knowledge - specialized modules with their own presentation;&lt;/p&gt;

&lt;p&gt;· control components - selects, configures and executes modules.&lt;/p&gt;

&lt;p&gt;All components have access to the board. Components can produce new data objects that are added to the board. Components look for specific kinds of data on the board. One way to search is to match patterns against an existing source of knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;· speech recognition;&lt;/p&gt;

&lt;p&gt;· Identification and tracking of vehicles;&lt;/p&gt;

&lt;p&gt;· Determination of protein structures;&lt;/p&gt;

&lt;p&gt;· Interpretation of signals Sonar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpreter" class="anchor"&gt;
  &lt;/a&gt;
  Interpreter
&lt;/h3&gt;

&lt;p&gt;It is suitable for developing a component that must interpret programs written in a special programming language. Basically, it describes how to evaluate strings (in other words: "sentences" or "expressions") written in some particular programming language. The point is to assign a class to each character in the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;· Languages ​​of queries to the database (SQL);&lt;/p&gt;

&lt;p&gt;· Languages ​​that are used to describe data transfer protocols.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparison-of-architectural-patterns" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Comparison of architectural patterns&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Below are the pros and cons of each of the architectural patterns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layered-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Layered Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One low layer can be used by different layers of a higher rank.&lt;/li&gt;
&lt;li&gt;Layers make standardization easier because we clearly define the levels.&lt;/li&gt;
&lt;li&gt;Changes are made within one layer, while the other layers remain unchanged.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not universal.&lt;/li&gt;
&lt;li&gt;In some situations it is possible to skip some layers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#client-server-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Client / Server Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A set of services that clients can request is suitable for modeling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requests are usually executed in separate threads on the server.&lt;/li&gt;
&lt;li&gt;Interaction between processes increases resource consumption, because different clients have different views.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#masterfollower-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Master-Follower Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accuracy, because service execution is delegated to different slaves with different implementations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All slaves are isolated, they have no general condition.&lt;/li&gt;
&lt;li&gt;The waiting period in the master-slave communication is a significant disadvantage. For example, in real time systems.&lt;/li&gt;
&lt;li&gt;Suitable only for those problems whose solution can be decomposed into parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#template-channels-and-filters" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Template "Channels and Filters"&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can implement parallel processes, when input and output consist of streams, and filters begin calculations after receiving data.&lt;/li&gt;
&lt;li&gt;Simple addition of filters. The system can be easily expanded.&lt;/li&gt;
&lt;li&gt;Filters are suitable for reuse. They can build different pipelines, creating all kinds of combinations of the existing set of filters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The efficiency is reduced by the slowest filtration processes. When moving from one filter to another, data transformation is performed, which leads to increased resource consumption.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mediator-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Mediator Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is possible to dynamically change, add, delete and move objects. This pattern makes the distribution process transparent to the developer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need to standardize service descriptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#peertopeer-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Peer-to-Peer Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports decentralized computing. Extremely resilient to failures at any node.&lt;/li&gt;
&lt;li&gt;High scalability in terms of resource and computing power.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no guarantee of the quality of services; nodes cooperate spontaneously.&lt;/li&gt;
&lt;li&gt;It is difficult to guarantee security.&lt;/li&gt;
&lt;li&gt;Performance depends on the number of nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#event-bus-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Event Bus Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily add new subscribers, publishers and connections. Works well for highly distributed applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem with scalability, because all messages go through one event bus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modelviewcontroller-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Model-View-Controller Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facilitates the creation of different representations of the same model; they can be enabled or disabled at run time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The complexity of the algorithm increases. Can lead to many unnecessary adjustments to user actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#board-template" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Board Template&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy adding of new applications.&lt;/li&gt;
&lt;li&gt;You can easily expand the data space structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Editing data structures is really difficult because such changes affect all applications.&lt;/li&gt;
&lt;li&gt;Synchronization and access control may be required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#template-interpreter" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Template "Interpreter"&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highly dynamic behavior possible.&lt;/li&gt;
&lt;li&gt;An excellent solution for end users in terms of programming convenience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance problems as an interpreted language is slower than a compiled one.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>architecture</category>
      <category>software</category>
      <category>java</category>
    </item>
    <item>
      <title>Starter Guide to Big O Notation</title>
      <author>CiaraMaria</author>
      <pubDate>Sun, 22 Nov 2020 01:59:53 +0000</pubDate>
      <link>https://dev.to/proiacm/starter-guide-to-big-o-notation-4kng</link>
      <guid>https://dev.to/proiacm/starter-guide-to-big-o-notation-4kng</guid>
      <description>&lt;p&gt;As a developer without a Computer Science background, Big O Notation is one of those concepts that I've had to double down on in order to improve my algorithmic skills. In this post, I will cover some basics of Big O using JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-big-o-notation" class="anchor"&gt;
  &lt;/a&gt;
  What is Big O Notation?
&lt;/h4&gt;

&lt;p&gt;Big O Notation is used to describe how long a function takes to run and allows us to talk formally about how the runtime grows as the inputs grow. It specifically describes the worst-case scenario in terms of runtime.&lt;/p&gt;

&lt;p&gt;Big O is expressed as O(&lt;em&gt;n&lt;/em&gt;) where &lt;em&gt;n&lt;/em&gt; is the size of the input.&lt;br&gt;
We will look at three specific expressions: O(1), O(&lt;em&gt;n&lt;/em&gt;), and O(&lt;em&gt;n²&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;When determining the amount of time it takes to run an algorithm, we have some helpful rules of thumb:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When considering Big O, we only care about the broadest view. We're looking at what happens as &lt;em&gt;n&lt;/em&gt; gets ridiculously large. As this happens, the significant effect of adding 100 or multiplying by 5 decreases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants don't matter:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;If we have O(5 &lt;em&gt;n&lt;/em&gt;) we simplify to O(&lt;em&gt;n&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;If we have O(42) we simplify to O(1)&lt;/li&gt;
&lt;li&gt;If we have O(10 &lt;em&gt;n²&lt;/em&gt;) we simplify to O(&lt;em&gt;n²&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#o1" class="anchor"&gt;
  &lt;/a&gt;
  O(1)
&lt;/h4&gt;

&lt;p&gt;This expression means that a function takes a constant amount of runtime. Whether the input is 1 or 1000, as the input grows the time expended remains the same.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function logAtMostFive(n) {
  for (let i = 1; i &amp;lt;= Math.min(5, n); i++) {
    console.log(i)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above function, regardless of what &lt;em&gt;n&lt;/em&gt; is the runtime will remain constant. So, if you run this function you'll notice that whether you pass in &lt;code&gt;5&lt;/code&gt; or &lt;code&gt;200&lt;/code&gt;, the log will only be &lt;code&gt;1, 2, 3, 4, 5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a result, we can say that the Big O Notation for this function is O(1). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on" class="anchor"&gt;
  &lt;/a&gt;
  O(&lt;em&gt;n&lt;/em&gt;)
&lt;/h4&gt;

&lt;p&gt;This expression means that it takes an amount of time linear with the size of &lt;em&gt;n&lt;/em&gt;. The runtime will increase in relation to the increase of the input.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function logAtLeastFive(n) {
  for (let i = 1; i &amp;lt;= Math.max(5, n); i++) {
    console.log(i)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above function, we see the opposite effect as in the previous example. As &lt;em&gt;n&lt;/em&gt; increases, runtime increases in relation to &lt;em&gt;n&lt;/em&gt;. If you run this function, you'll notice that if you pass in &lt;code&gt;5&lt;/code&gt; the log will be &lt;code&gt;1, 2, 3, 4, 5&lt;/code&gt; however, if you pass in &lt;code&gt;200&lt;/code&gt; the log will be &lt;code&gt;1, 2, 3, 4, 5, 6, 7...200&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As a result, we can say that the Big O Notation for this function is O(&lt;em&gt;n&lt;/em&gt;). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on%C2%B2" class="anchor"&gt;
  &lt;/a&gt;
  O(&lt;em&gt;n²&lt;/em&gt;)
&lt;/h4&gt;

&lt;p&gt;This expression means that an algorithm's runtime is directly proportional to the square of &lt;em&gt;n&lt;/em&gt;. Time will exponentially increase in relation to the increase of the input. This is common in functions that involve nested iterations. Deeper nesting will result in O(&lt;em&gt;n³&lt;/em&gt;), O(&lt;em&gt;n⁴&lt;/em&gt;), etc.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function printAllPairs(n) {
  for (var i = 0; i &amp;lt;= n; i++) {
    for (var j = 0; j &amp;lt;= n; j++) {
      console.log(i, j);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above function, as &lt;em&gt;n&lt;/em&gt; increases, the runtime increases exponentially. This can seriously inhibit performance as the size of &lt;em&gt;n&lt;/em&gt; gets ridiculously large as mentioned earlier.&lt;/p&gt;

&lt;p&gt;As a result, we can say that the Big O Notation for this function is O(&lt;em&gt;n²&lt;/em&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Big O Notation allows us to describe the amount of time an algorithm will take to run. As applications grow and the amount or size of data being handled grows, the way our functions process that information becomes critical.&lt;/p&gt;

&lt;p&gt;Hopefully, you enjoyed this starter guide to Big O! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26xBI73gWquCBBCDe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26xBI73gWquCBBCDe/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Jumping into Big O</title>
      <author>rwparrish</author>
      <pubDate>Sun, 22 Nov 2020 01:59:42 +0000</pubDate>
      <link>https://dev.to/rwparrish/jumping-into-big-o-kn4</link>
      <guid>https://dev.to/rwparrish/jumping-into-big-o-kn4</guid>
      <description>&lt;p&gt;Not all programmers are math people and that is OK. Big O notation can be a little intimidating to approach if you are one of those people. In this blog, I would like to gently introduce you to the concept of Big O notation.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://rithmschool.github.io/function-timer-demo/"&gt;link&lt;/a&gt; to an awesome widget that Colt Steele created. I highly recommend playing around with it to become more familiar with the concept of Big O. I will be using the same code snippets from the widget in this blog. Check it out!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-big-o-notation" class="anchor"&gt;
  &lt;/a&gt;
  So what is Big O Notation?
&lt;/h3&gt;

&lt;p&gt;It is simply a way for us to talk about the runtime of an algorithm as its input grows. That's it. Big O is expressed as O(n) where n is the size of the input. When input grows, how will that affect the time it takes for the algorithm to run? When discussing Big O notation, we are talking in very broad terms and considering the &lt;strong&gt;worst-case scenario&lt;/strong&gt; - the upper bound for runtime. So what does it mean to consider the worst-case scenario?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simplifying-big-o" class="anchor"&gt;
  &lt;/a&gt;
  Simplifying Big O
&lt;/h3&gt;

&lt;p&gt;When considering the worst-case scenario we are thinking about what would happen when the input(n) becomes insanely large. This means constants don't matter and operations like addition, subtraction, multiplication, and division become basically irrelevant. In most cases, we can omit all constants and ignore lower powers of n - for example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt; - O(500), O(10,000), and O(1,000,000,000) all simplify to O(1).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt; - O(25n + n), O((57n / 3) * n), and O(1,000n) all simplify to O(n).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n²)&lt;/strong&gt; - O(35n + n²) simplifies to O(n²).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n³)&lt;/strong&gt; - O(35n + n² + n³) simplifies to O(n³).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the graph below. As programmers, we want to stay out of the "bad zone".&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YzHqd6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/plmmotu6kilci44ioi4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YzHqd6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/plmmotu6kilci44ioi4w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt; - as you can see in the graphic above, as the input grows, runtime remains constant. This is awesome. The algorithm runs quickly regardless of the size of the input. This is the ideal and most operations that perform a single operation fall into this &lt;strong&gt;complexity&lt;/strong&gt; (in Computer Science the performance or runtime of an algorithm is also referred to as its complexity). Pushing to an array, getting an item at a particular index, adding a child element, etc, will take the same amount of time regardless of the array length. Algorithms with O(1) are ideal in their Big O complexity:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addUpToSecond(n) {
  return n * (n + 1) / 2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt; - as input(n) grows, broadly speaking, runtime increases at a linear rate. This is because there is a 1:1 relationship between data size (input) and runtime. All loops fall into this big O complexity:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addUpToFirst(n) {
  var total = 0;
  for (var i = 0; i &amp;lt;= n; i++) {
    total += i;
  }
  return total;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Look closely at the two functions above - &lt;code&gt;addUpToSecond&lt;/code&gt; and &lt;code&gt;addUpToFirst&lt;/code&gt;. They accomplish the same thing but have different Big O complexity. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(n²)&lt;/strong&gt; - from a worst-case perspective, an algorithm with this complexity will not perform well. As input(n) increases the runtime will increase exponentially - check out the graphic above again. Stay away from nested loops:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function printAllPairs(n) {
  for (var i = 0; i &amp;lt; n; i++) {
    for (var j = 0; j &amp;lt; n; j++) {
      console.log(i, j);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#recap" class="anchor"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;p&gt;In this post, we dipped our toes into the Big O complexity pool. We learned that Big O has everything to with "measuring" the time it takes an algorithm to run in the worst-case scenario. It is best practice to avoid writing code that includes nested loops and O(1) is the ideal.&lt;/p&gt;

&lt;p&gt;I hope this intro into Big O notation and complexity was gentle, clear, and helpful. There is more to the concept than was covered in this post, but this is a good start.&lt;/p&gt;

&lt;p&gt;Please feel free to school me if you think you can explain something more clearly. Leave feedback and ask questions! Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/BmmfETghGOPrW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/BmmfETghGOPrW/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I built a Next.js job board with Next. Find your Next JS dream job!</title>
      <author>drew.tech</author>
      <pubDate>Sun, 22 Nov 2020 01:34:49 +0000</pubDate>
      <link>https://dev.to/dbredvick/i-built-a-next-js-job-board-with-next-find-your-next-js-dream-job-33n4</link>
      <guid>https://dev.to/dbredvick/i-built-a-next-js-job-board-with-next-find-your-next-js-dream-job-33n4</guid>
      <description>&lt;p&gt;I attended Next.js Conf last month and was impressed by the high quality content, updates, and virtual conference setup (yay global pandemics).&lt;/p&gt;

&lt;p&gt;It even inspired me to build a new product, &lt;a href="https://jobs.nextjsnotes.com"&gt;Next.js Jobs&lt;/a&gt; – but more on that below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-content-updates-and-setup" class="anchor"&gt;
  &lt;/a&gt;
  The content, updates, and setup
&lt;/h2&gt;

&lt;p&gt;The production level of this conference was &lt;em&gt;waay&lt;/em&gt; better than I was anticipating.&lt;/p&gt;

&lt;p&gt;The keynote along with each of the individual presentations showed a level of polish while still feeling like a conference talk. I think this was accomplished by pre-recording talks, but requiring a "one-take" policy, meaning the video had to be recorded in one sitting with no edits.&lt;/p&gt;

&lt;p&gt;Next.js 10 is great, and so are its accompanying features from Vercel. Check out my post on the &lt;a href="https://nextjsnotes.com/next-js-conf-highlights-2020/"&gt;highlights of Next.js Conf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this happened on an awesome YouTube-powered live streaming conference setup with multiple "stages". Cool stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-community" class="anchor"&gt;
  &lt;/a&gt;
  The community
&lt;/h3&gt;

&lt;p&gt;But what I was mostly impressed with was the &lt;strong&gt;community&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Tons of people registered, over 75k. And about half of them actually showed up!&lt;br&gt;&lt;br&gt;
I joined the community Discord server and was overwhelmed by the volume of channels and messages.&lt;/p&gt;

&lt;p&gt;Check out just how many "job" channels there were:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKUvCrUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nextjsnotes.com/content/images/2020/11/jobs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKUvCrUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nextjsnotes.com/content/images/2020/11/jobs.png" alt="Your Next JS dream job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, you can totally still join the Discord if you're interested: &lt;a href="https://discord.gg/KNKF84E"&gt;https://discord.gg/KNKF84E&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-realization" class="anchor"&gt;
  &lt;/a&gt;
  The realization
&lt;/h2&gt;

&lt;p&gt;And then after the conference, all of those extra job channels got cleaned up. That left me thinking, where are all these job posts going to go? I searched around, but there was really home for them.&lt;/p&gt;

&lt;p&gt;Current job boards barely treat Next.js as a first class citizen, but rather emphasize React. That's probably fine for most cases for the hiring mangers, as a good React dev can be taught Next.js.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what about the developers looking for Next.js jobs?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's not much outside of the single "#jobs" channel in the Discord now, which is very noisy. It's full of job seekers trying to find a job that uses Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-product" class="anchor"&gt;
  &lt;/a&gt;
  The product
&lt;/h2&gt;

&lt;p&gt;That's why I created Next.js Jobs – a job board for Next.js enthusiasts. A job board that helps developers find their Next(.js) job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmSyyF4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nextjsnotes.com/content/images/2020/11/nextjs-jobs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmSyyF4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nextjsnotes.com/content/images/2020/11/nextjs-jobs.png" alt="Your Next JS dream job"&gt;&lt;/a&gt;&lt;a href="https://jobs.nextjsnotes.com"&gt;&lt;/a&gt;&lt;a href="https://jobs.nextjsnotes.com"&gt;https://jobs.nextjsnotes.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;p&gt;If you're looking for a job:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jobs.nextjsnotes.com/"&gt;Sign up&lt;/a&gt; with your email &lt;em&gt;(If you're already subscribed to NextjsNotes, you're on the list)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Companies submit jobs that use Next.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I manually moderate the job post and make sure they actually use Next.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each Tuesday, an automated email goes out with links to each job and their descriptions&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you're submitting a job:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jobs.nextjsnotes.com/submit-a-job"&gt;Submit a job&lt;/a&gt; on the site&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'll moderate it and reach out to you with any questions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If approved, your job post will be sent out to developers the following Tuesday morning&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The future&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;a lot&lt;/em&gt; of missing features right now, but rather than build them, I want to validate there is actually market demand here.So test it out, let me know what you think!&lt;/p&gt;

&lt;p&gt;I'm not planning on monetizing this until it's a self-sustainable platform. Right now I'm manually finding Next.js jobs and adding them to the site. In the future, I hope to charge about &lt;strong&gt;$99/mo&lt;/strong&gt; for a job posting. Well under what LinkedIn is asking, and generally in line with what I've seen in terms of "standard pricing" for job boards.&lt;/p&gt;




&lt;p&gt;I hope I can help you find your Next JS dream job! (pun totally intended)&lt;/p&gt;

&lt;p&gt;See you on the other side,&lt;/p&gt;

&lt;p&gt;Drew&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>showdev</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Basic DOM Manipulation</title>
      <author>Todd Carlson</author>
      <pubDate>Sun, 22 Nov 2020 00:09:13 +0000</pubDate>
      <link>https://dev.to/toddster79/basic-dom-manipulation-4m57</link>
      <guid>https://dev.to/toddster79/basic-dom-manipulation-4m57</guid>
      <description>&lt;p&gt;I spent this week practicing building a basic landing page with good ole HTML, CSS, and JavaScript. No frameworks, no libraries no nothing. I also wanted to practice fetching data from an API and displaying on my page, and that's where my old friend DOM manipulation came in handy. I used &lt;a href="https://jsonplaceholder.typicode.com/posts"&gt;https://jsonplaceholder.typicode.com/posts&lt;/a&gt; to fetch some fake posts, instead of building an API from scratch. &lt;/p&gt;

&lt;p&gt;Once I had finished the layout and styling, I got to work on coding the JavaScript that I would need to fetch and display the data on my page. I wanted to display four of the posts with their heading and copy, which we get from JSONplaceholder. I had already coded the necessary HTML divs with their respective IDs that I would need to target. In my main.js file I coded the variables and set them equal to the ID using document.querySelector() like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const $heading1 = document.querySelector('#post-1');
const $blog1 = document.querySelector('#post-text-1');

const $heading2 = document.querySelector('#post-2');
const $blog2 = document.querySelector('#post-text-2');

const $heading3 = document.querySelector('#post-3');
const $blog3 = document.querySelector('#post-text-3');

const $heading4 = document.querySelector('#post-4');
const $blog4 = document.querySelector('#post-text-4');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I then declared a variable and set it equal to the URL of the api that I would be fetching the data from. This isn't necessary, but I think it makes for cleaner and easier to read code. I also declared a variable called posts that I would utilize to store all the posts that I got back from my fetch request. Also, because you get back an array of 100 objects from the fetch request, I declared an index variable and set it equal to 4, since I would initially be displaying the first four posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const apiURL = 'https://jsonplaceholder.typicode.com/posts/';

let posts = [];

let index = 4;

fetch(apiURL)
    .then((response) =&amp;gt; response.json())
    .then(apiPosts =&amp;gt; {
        posts = apiPosts;
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point I would also need to chain on another .then to display the posts, but I first need to write a function to populate the posts for me. This function will need to take in three arguments: a post, a heading and a blog. The body of the function will need to clear out the initial posts (this is necessary for when I create a button with an event listener to display four more posts), create the necessary elements, create the necessary classes, set the inner HTML of said elements to the appropriate title and heading, and lastly append the newly created elements to the DOM. My final function, which creates new h1 and p tags looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const populatePost = (post, $heading, $blog) =&amp;gt; {
    $heading.innerHTML = "";
    let $h1 = document.createElement('h1');
    $h1.className = 'post-title';
    $h1.innerHTML = post.title;
    $heading.appendChild($h1);
    $blog.innerHTML = "";
    let $p = document.createElement('p');
    $p.className = 'post-body';
    $p.innerHTML = post.body;
    $blog.appendChild($p);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Going back to my initial fetch request, we can now call the populatePost() function and pass in the necessary arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch(apiURL)
    .then((response) =&amp;gt; response.json())
    .then(apiPosts =&amp;gt; {
        posts = apiPosts;
    })
    .then(() =&amp;gt; {
        populatePost(posts[0], $heading1, $blog1);
        populatePost(posts[1], $heading2, $blog2);
        populatePost(posts[2], $heading3, $blog3);
        populatePost(posts[3], $heading4, $blog4);
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we need four posts, we call the function four times passing in a post index, a heading variable, and a blog variable which we have already created. After checking my page, I can confirm that the necessary data was appearing.&lt;/p&gt;

&lt;p&gt;Lastly, I wanted to create a button that when clicked, would display the next four posts. After creating and styling the button with HTML and CSS, all I had left to do was create and event listener with JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document
    .querySelector('#see-more-button')
    .addEventListener('click', () =&amp;gt; {
        populatePost(posts[index], $heading1, $blog1);
        populatePost(posts[index + 1], $heading2, $blog2);
        populatePost(posts[index + 2], $heading3, $blog3);
        populatePost(posts[index + 3], $heading4, $blog4);
        index += 4;
        if(index &amp;gt; 95) {
            index = 0;
        };
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I targeted my button ID with document.querySelector(), and chained on an event listener. Event listeners take in a type and a callback function. The type I needed was click, and I used an anonymous function as my callback. I again utilized my populatePost() function. I passed in my index variable, which if we recall is set to four in the global scope which is why I add 1, 2, and 3, so I get the next four posts of 5, 6, 7, and 8. I again pass in a heading variable and a blog variable. Lastly I increment the index variable by for so I get the next for posts on the next click, and I give a condition that if the index variable is greater than 95 the index variable gets sets to zero and we start with the first four posts again. &lt;/p&gt;

&lt;p&gt;I hope this post helps you to understand DOM manipulation and fetching data from an API a little better. &lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
      <category>dom</category>
    </item>
    <item>
      <title>Your first Machine Learning REST API with Python/FastAPI</title>
      <author>Gabriel</author>
      <pubDate>Sat, 21 Nov 2020 23:21:31 +0000</pubDate>
      <link>https://dev.to/gabogomez09/your-first-machine-learning-rest-api-with-python-fastapi-18jm</link>
      <guid>https://dev.to/gabogomez09/your-first-machine-learning-rest-api-with-python-fastapi-18jm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#you-will-learn" class="anchor"&gt;
  &lt;/a&gt;
  You will learn...
&lt;/h1&gt;

&lt;p&gt;a basic workflow of creating a machine learning service from stating the problem space to cleaning the data to choosing a model, training your model and finally deploying it to the web.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#requirements" class="anchor"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Basic bash&lt;/li&gt;
&lt;li&gt;Basic use of git/github&lt;/li&gt;
&lt;li&gt;Basic Python3.7&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-science" class="anchor"&gt;
  &lt;/a&gt;
  Data Science
&lt;/h2&gt;

&lt;p&gt;You've probably seen this image before:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wxtflL9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605926419024/hcOSXYebo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxtflL9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605926419024/hcOSXYebo.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Data science is a hot topic these days and is the cross section of Math, Computers and Business. That sounds nice and all but how do you do data science? &lt;/p&gt;

&lt;p&gt;Much like normal science having the scientific method, data science has a couple of methodologies that pave the way of a project. One of the most used methodologies is the &lt;a href="https://en.wikipedia.org/wiki/Cross-industry_standard_process_for_data_mining"&gt;CRISP-DM (Cross-industry standard process for data mining)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Said process is described below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQN02auy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605926375794/fwypg9JUh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQN02auy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605926375794/fwypg9JUh.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be roughly going through each and every single one of these steps today. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#business-understanding" class="anchor"&gt;
  &lt;/a&gt;
  Business Understanding
&lt;/h3&gt;

&lt;p&gt;What do want to achieve? Think of key words that can help you find the data for your problem. Maybe you want to solve a global warming problem so you look for data on floods in a certain region. Or maybe you want to speed up the identification of mushrooms at a biology lab so you look for data describing the characteristics of different mushroom species. For now don't think about the data just think about what you want to solve.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For our use case our objective will be: Lowering school dropouts through a tool that can predict students' grade based on a short survey.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-understanding" class="anchor"&gt;
  &lt;/a&gt;
  Data Understanding
&lt;/h3&gt;

&lt;p&gt;Before we go on we must first understand what kind of data we should look for.&lt;br&gt;
There are three types of data:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xe7LCD8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605928225569/CBUP3KJNt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xe7LCD8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605928225569/CBUP3KJNt.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Unstructured data can also be images, videos and audio &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For classic machine learning (which is the scope of this tutorial) the easiest data type to use is structured data, so that's what we'll be working with.&lt;br&gt;
One of the best places to look for data is &lt;a href="https://www.kaggle.com/datasets"&gt;Kaggle&lt;/a&gt; plus you can start a notebook from the same place so it makes everything a bit easier. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kaggle is a social network for data scientists where you can find data, competitions, courses and the work of others&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once in Kaggle you can go to the &lt;a href="https://www.kaggle.com/datasets"&gt;datasets&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZqaIQds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605929601922/imKvp2f76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZqaIQds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605929601922/imKvp2f76.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can insert the key words you came up for in the &lt;strong&gt;Business Understanding&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;I used the keyword &lt;strong&gt;education&lt;/strong&gt; and found &lt;a href="https://www.kaggle.com/uciml/student-alcohol-consumption"&gt;this&lt;/a&gt; data set. One of the most important things to consider is the description of the dataset and assure that it well describes the columns. For example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UjL8Nof3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605930178553/Dn0tC9VQX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UjL8Nof3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605930178553/Dn0tC9VQX.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now select the &lt;em&gt;**New Notebook&lt;/em&gt;* button and select Python and Notebook for the following options, finally click &lt;strong&gt;create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will be redirected to a Notebook where we can start understanding our data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notebooks are a way to run code with cells along with cells that interpret Markdown, this allows us to easily experiment with code while having a great way to document our thought process. These are also known as Kernels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More on Kernels &lt;a href="https://www.youtube.com/watch?v=fvF2H85ko9c&amp;amp;ab_channel=Kaggle"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We import libraries used later on, don't worry too much about them for now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pEEOUVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934673983/6ZS9nvAg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pEEOUVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934673983/6ZS9nvAg8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We load our DataFrame (a datatype from the Pandas library that represents a table) and apply some methods to it.&lt;br&gt;
Sample will give us some random rows from our data and the column attribute will just give you a list of the column names.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QtJwQ32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605932145260/DFSw-YEXo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QtJwQ32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605932145260/DFSw-YEXo.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More usefully we can use the &lt;strong&gt;info&lt;/strong&gt; method to find out that we have 16 numerical columns. This is good sign. Given that we are trying to move fast we can avoid having to deal with categorical data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HHORC96y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934115341/rorsO9Acc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HHORC96y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934115341/rorsO9Acc.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In an ideal project we would encode our categorical data using labels or one hot encodings. Converting our categorical data into numerical data. This could potentially improve our model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below you can see the main data types in tabular data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRdVga3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605933876612/Zgv8Qz3Yz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRdVga3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605933876612/Zgv8Qz3Yz.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final basic data understanding tool we will use will be the &lt;strong&gt;describe&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RdLaCF1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934250405/BAL9_xKzX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RdLaCF1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934250405/BAL9_xKzX.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It gives us some descriptive statistics like for example that the final grade (G3) mean is 10.4, which could sound odd given the rang is [0, 20]. So we investigate a little and find that that a 10 in the &lt;a href="https://en.wikipedia.org/wiki/Academic_grading_in_Portugal"&gt;Portugal grading system&lt;/a&gt; is sufficient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKQueDMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934456838/H-Sua2DAv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKQueDMn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605934456838/H-Sua2DAv.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We just came a step closer to understanding our data!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-preparation" class="anchor"&gt;
  &lt;/a&gt;
  Data Preparation
&lt;/h3&gt;

&lt;p&gt;Here is where we would clean our data, do some normalization, and encoding categorical data. But for the time being we'll just drop all of our categorical data. Which is the most naive strategy.&lt;/p&gt;

&lt;p&gt;First we select our target variable which is G3(final grade) which is a numerical column.Our table without G3 are our input columns.&lt;/p&gt;

&lt;p&gt;Then using the previously imported &lt;strong&gt;train_test_split&lt;/strong&gt; method we will split our table into two. Our training (70%) dataset and our test (30%) dataset. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is needed to evaluate how well our model learned from the data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHL8Y3hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605935003221/mL-JUmZFS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHL8Y3hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605935003221/mL-JUmZFS.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we drop all of the categorical data from our training and test data, as well as G1 and G2 (we don't want to involve past grades to predict our future grade)&lt;/p&gt;

&lt;p&gt;With the columns attribute we see what columns are left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tdNAX-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605935395643/iNCG28-Tq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tdNAX-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605935395643/iNCG28-Tq.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modeling-and-evaluation" class="anchor"&gt;
  &lt;/a&gt;
  Modeling and Evaluation
&lt;/h3&gt;

&lt;p&gt;Time for the fun part!&lt;br&gt;
We now take our training data and fit it to an instantiated RandomForestRegressor with the &lt;strong&gt;fit&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;After that we'll predict on our test data, this will result in predicted grades for these test rows.&lt;/p&gt;

&lt;p&gt;In order to evaluate our model we'll take our actual test grades and compare them with our predicted grades using the &lt;strong&gt;mean average error&lt;/strong&gt; calculated like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BoFfrNrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937316347/4m_fmy1tR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BoFfrNrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937316347/4m_fmy1tR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these steps are put together in the following lines of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pVx-3AGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605935562604/3QnkxSRuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pVx-3AGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605935562604/3QnkxSRuw.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that we have a MAE of 3.15, given the few steps take to process our data this is a good enough result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#back-to-business-understanding" class="anchor"&gt;
  &lt;/a&gt;
  Back to Business Understanding
&lt;/h3&gt;

&lt;p&gt;Since we want to make a simple form for our students we'll reduce the input variables needed for the prediction. &lt;br&gt;
Using code copied from some obscure Stackoverflow post we can see an ordered list of the most important features used in the model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGG_KGBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937744481/-NZXHyj5V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGG_KGBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937744481/-NZXHyj5V.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll take top ten data points dropping the rest of the columns, then we'll train our model again and see how well it fits our new data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5AomhQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937829952/hQgpS2-8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5AomhQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937829952/hQgpS2-8a.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently this is an even better model than the previous while using less data.&lt;br&gt;
We accept our results and finish this process saving this model as a file with the Pickle model. We'll download this file and save it for later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNvghd2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937945187/W_k4L0-Bp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNvghd2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605937945187/W_k4L0-Bp.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment" class="anchor"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;We now have a working model but this model is useless unless anybody uses it. Deploying a model is its own challenge. In this workshop we'll do a MacGyver-like deploy using &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; and &lt;a href="https://www.deta.sh/"&gt;Deta&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a free account with &lt;a href="https://www.deta.sh/"&gt;Deta&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create a directory for your new project
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir grading_prediction_service
cd grading_prediction_service
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install virtualenv and create a Python virtual environment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 -m pip install virtualenv
python3 -m virtualenv .venv
source .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's create a requirements.txt which hold our dependancies containing the following
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scikit-learn
pandas
numpy
fastapi
uvicorn
joblib
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install these dependancies in our virtual environment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a main.py file and add the following code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start the test server and in another terminal window use curl to test our endpoint
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uvicorn main:app --reload
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have our hello world endpoint!&lt;br&gt;
Now we'll see how to take this to where we need it to.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We change our code adding a pydantic data class
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Answer(BaseModel):
    age: int
    Medu: int
    studytime: int
    failures: int
    famrel: int
    freetime: int
    goout: int
    Walc: int
    health: int
    absences: int


@app.get("/")
async def root():
    return {"message": "Hello World"}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Data classes are used to validate data types when receiving data, this is what we will be receiving from the client.&lt;/p&gt;

&lt;p&gt;Move your model.mo file to this directory&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's create a new post endpoint that will receive our survey data
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

app = FastAPI()

class Answer(BaseModel):
    age: int
    Medu: int
    studytime: int
    failures: int
    famrel: int
    freetime: int
    goout: int
    Walc: int
    health: int
    absences: int


@app.get("/")
async def root():
    return {"message": "Hello World"}

@app.post("/grade_predict")
async def predict_student_grade(answer: Answer):
    answer_dict = jsonable_encoder(answer)
    for key, value in answer_dict.items():
        answer_dict[key] = [value]
     # answer_dict = {k:[v] for (k,v) in jsonable_encoder(answer).items()}
    return answer_dict
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will receive the body data, convert it into a dictionary and then convert the values in into lists. The comment is a one liner version of the same thing using a dictionary comprehension.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file in the same directory names test_prediction.json with these values
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "age": 19,
    "Medu": 1,
    "studytime": 2,
    "failures": 1,
    "famrel": 4,
    "freetime": 2,
    "goout": 4,
    "Walc": 2,
    "health": 3,
    "absences": 0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Test your new post endpoint with curl
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --request POST \
        --data @test_prediction.json \
        http://127.0.0.1:8000/grade_predict
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Finally we'll load our model, convert our dictionary into a Pandas DataFrame, feed our input to the model and return the predicted result.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pickle

import pandas as pd

from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

app = FastAPI()
with open("model.mo", "rb") as f:
    model = pickle.load(f)

class Answer(BaseModel):
    age: int
    Medu: int
    studytime: int
    failures: int
    famrel: int
    freetime: int
    goout: int
    Walc: int
    health: int
    absences: int


@app.get("/")
async def root():
    return {"message": "Hello World"}

@app.post("/grade_predict")
async def predict_student_grade(answer: Answer):
    answer_dict = jsonable_encoder(answer)
    for key, value in answer_dict.items():
        answer_dict[key] = [value]
     # answer_dict = {k:[v] for (k,v) in jsonable_encoder(answer).items()}
    single_instance = pd.DataFrame.from_dict(answer_dict)
    prediction = model.predict(single_instance)
    return prediction[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Play with your brand spanking new ML API changing the different values in test_prediction.json and using curl
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --request POST \
        --data @test_prediction.json \
        http://127.0.0.1:8000/grade_predict
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is great and all but how about we deploy this thing to the internet?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the Deta CLI
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -fsSL https://get.deta.dev/cli.sh | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Login to your account
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deta login
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a new python micro
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deta new --python ml_grading_service
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will return an endpoint which is where you will be testing your new endpoint&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy your app to your micro
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deta deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Test your endpoint with the info given the previous endpoint
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --request POST \     
        --data @test_prediction.json \
        https://XXXXX.deta.dev/grade_predict
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That is the whole CRISP-DM process. From start to finish. I hope you learned something new or at least have a new general view of what it to takes to make a data product. There are a ton of areas where this can be improved and I would love to see comments proposing improvements.&lt;/p&gt;

&lt;p&gt;You can check out the &lt;a href="https://github.com/GaboGomezT/grade_prediction_service"&gt;repo&lt;/a&gt;, I also added a very badly written front end using React. The demo can be found &lt;a href="https://grade-ml.web.app/"&gt;here&lt;/a&gt; and my Kaggle kernel can be found &lt;a href="https://www.kaggle.com/gabogabe/student-grade-prediction"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/gabogomez"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_b5Pmmj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604648334841/VNheZ_SnT.png" alt="Screen Shot 2020-11-06 at 1.38.18 AM.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>fastapi</category>
      <category>serverless</category>
    </item>
    <item>
      <title>ReactJS - Tailwind CSS Starter</title>
      <author>Angel Martinez</author>
      <pubDate>Sat, 21 Nov 2020 21:49:47 +0000</pubDate>
      <link>https://dev.to/angelcodes/reactjs-tailwind-css-starter-4ahn</link>
      <guid>https://dev.to/angelcodes/reactjs-tailwind-css-starter-4ahn</guid>
      <description>&lt;p&gt;Do you like &lt;strong&gt;tailwindcss&lt;/strong&gt; and &lt;strong&gt;ReactJS&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;If the answer is yes, a few weeks ago I created a template for React (cra) that allows you to create a &lt;code&gt;create-react-app&lt;/code&gt; project with &lt;strong&gt;Tailwind CSS&lt;/strong&gt; already configured.&lt;/p&gt;

&lt;p&gt;in order to avoid setting &lt;strong&gt;tailwindcss&lt;/strong&gt; in every project you use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;To use this template, you need to open your terminal or CMD in your preferred folder or path. Then, write the following command and press enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app myproject &lt;span class="nt"&gt;--template&lt;/span&gt; tailwindcss-starter
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn create react-app myproject &lt;span class="nt"&gt;--template&lt;/span&gt; tailwindcss-starter
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This command will start generating a &lt;code&gt;create-react-app&lt;/code&gt; project with all the basic dependencies for React and in turn, it will download each file and package that I have configured so that you can use Tailwind CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure" class="anchor"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;p&gt;Once your project has been generated you will see the following structure of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;└─ projectfolder
  ├─ node_modules
  ├─ public
  ├─ src
  ├─ .gitignore
  ├─ .prettierrc
  ├─ package.json
  ├─ postcss.config.js
  ├─ README.md
  ├─ tailwind.config.js
  └─ tailwind.css
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tailwind.config.js&lt;/code&gt;: here you can edit your tailwindcss configuration, add more colors, animations, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;postcss.config.js&lt;/code&gt;: if you need something related to postcss here you can set up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.prettierrc&lt;/code&gt;: here you can find a little configuration of prettier. This project has a prettier-plugin that help you regrouping all of the classes of tailwindcss in your JSX code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tailwind.css&lt;/code&gt;: entry CSS file of tailwindcss, here you can add your custom classes or create components with the &lt;code&gt;@apply&lt;/code&gt; directive. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#available-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Available Scripts
&lt;/h2&gt;

&lt;p&gt;With this template, you have available the basic scripts that create-react-app proved us, but I added three more scripts in our projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first script allows us to generate the fully CSS file of tailwindcss available in &lt;code&gt;src/styles.css&lt;/code&gt;. This file contains all of the classes that tailwindcss provides us.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm run build-css:develop
  &lt;span class="c"&gt;# or&lt;/span&gt;
  yarn build-css:develop
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The other script allows us to generate a purged CSS file of tailwindcss. This means that the output CSS file only will have the classes that we used in our project.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm run build-css:production
  &lt;span class="c"&gt;# or&lt;/span&gt;
  yarn build-css:production
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The last one allows us to "format" our classes in our HTML or JSX code, this will regroup the tailwindcss classes in a certain order that you can find in &lt;code&gt;.prettierrc&lt;/code&gt;file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm run format
  &lt;span class="c"&gt;# or&lt;/span&gt;
  yarn format
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And this is my template, I hope you find helpful this project, any advice or request is welcome. You can find the repository &lt;a href="https://github.com/angelmtztrc/cra-template-tailwindcss-starter"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Original post &lt;a href="https://angelcodes.hashnode.dev/reactjs-tailwind-css-starter?guid=9ba340b8-26e5-4e0c-a3dd-162f2623965f&amp;amp;deviceId=a4cbdef3-8873-42c7-b5d0-0a4c69096369"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Faster loading webpages with webP images</title>
      <author>Temitope Ayodele</author>
      <pubDate>Sat, 21 Nov 2020 20:18:03 +0000</pubDate>
      <link>https://dev.to/temmietope/faster-loading-webpages-with-webp-images-pl9</link>
      <guid>https://dev.to/temmietope/faster-loading-webpages-with-webp-images-pl9</guid>
      <description>&lt;p&gt;Have you ever wondered why your website takes forever to load? It is probably because you are using too large images. The common image types are PNG, JPG, SVG, and GIF. It is time to embrace the modern image formats! Examples are: &lt;br&gt;
JPEG 2000, JPEG XR and WebP. This article will focus on webP image formats.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-webp" class="anchor"&gt;
  &lt;/a&gt;
  WHAT IS WEBP?
&lt;/h2&gt;

&lt;p&gt;WebP is a powerful image compression technology developed by Google in 2010. It focuses on using advanced optimization techniques to reduce file size and it supports transparency and even animation. WebP formats can help compress your images to become up to two-times smaller than JPG images, and this definitely makes the images load faster and hence leading to better website performance. Take a look at this image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsKihvns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/sXcHWXpv/flowers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsKihvns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/sXcHWXpv/flowers.png" alt="png image"&gt;&lt;/a&gt;&lt;br&gt;
This png image has a size of 482.1KB,&lt;br&gt;
The jpeg format has a size of 55.4KB&lt;br&gt;
When converted to webP, the size became 43KB and the quality was still maintained&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-webp" class="anchor"&gt;
  &lt;/a&gt;
  HOW TO USE WEBP
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Firstly, you have to convert your images to webP formats.&lt;/strong&gt;&lt;br&gt;
Any common file format can be converted to WebP and still maintain their original quality (lossless compression). There are several online image formatters available all over the internet (such as &lt;a href="https://convertio.co/jpeg-webp/"&gt;this&lt;/a&gt; and &lt;a href="https://image.online-convert.com/convert-to-webp"&gt;this&lt;/a&gt; ).&lt;br&gt;
However, as awesome as this is, webP is not supported on all browsers. Firefox for instance, is still working on adding it, but Chrome and Opera fully supports webP images.&lt;br&gt;
This is not a big issue as we can still use this format without breaking our images on unsupported browsers by using fallbacks! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-webp-with-fallbacks" class="anchor"&gt;
  &lt;/a&gt;
  Using webP with Fallbacks
&lt;/h3&gt;

&lt;p&gt;HTML has two image media element (&lt;em&gt;img&lt;/em&gt; and &lt;em&gt;picture&lt;/em&gt;)&lt;br&gt;
With the &lt;em&gt;picture&lt;/em&gt; element you can to load zero to many &lt;strong&gt;source&lt;/strong&gt; elements and one &lt;strong&gt;img&lt;/strong&gt; element. How does this work? The browser will consider each of the image URL in the  elements and pick the best match among them. If neither of them is supported by the browser, or if the browser does not even support the  element at all, it then selects the image in the &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; tag.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="nx"&gt;srcset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.webp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/webp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/picture&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If the browser does not support webP image formats, the JPG image is loaded.&lt;/p&gt;

&lt;p&gt;To avoid the clumsiness, (as this seems like too many lines of code in my opinion, lol) you can create a component for this. Using ReactJS,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ImageWithFallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/webp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;delegated&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="nx"&gt;srcSet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;delegated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/picture&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, whenever you want to add an image in your code, you can easily import the &lt;em&gt;ImageWithFallback&lt;/em&gt; component and use as an image tag. Keep your code tidy :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ImageWithFallback&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/my-image.webp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/my-image.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My beautiful portrait&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In conclusion, your website speed is a very important factor, and using webP image formats can help you achieve faster loading images with equal good qualities.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Transforming data with Array.reduce</title>
      <author>Sunny Golovine</author>
      <pubDate>Sat, 21 Nov 2020 18:23:32 +0000</pubDate>
      <link>https://dev.to/sgolovine/transforming-data-with-array-reduce-1h4d</link>
      <guid>https://dev.to/sgolovine/transforming-data-with-array-reduce-1h4d</guid>
      <description>&lt;p&gt;For the longest time I never understood why you would want to use Array.reduce, I mean why would I need anything else when I already have forEach, map and filter? Array.reduce as I found out is one of the most powerful functions for transforming data, especially when working with Objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-it" class="anchor"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;At its core, Array.reduce will simply &lt;em&gt;reduce&lt;/em&gt; your data, so say you have an array of items like &lt;code&gt;[foo, bar, baz]&lt;/code&gt;, you could reduce it to only contain &lt;code&gt;foo&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;justFoo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;acc&lt;/code&gt; is our accumulator, meaning it will collect the values in the reduction as we traverse the array. &lt;code&gt;item&lt;/code&gt; in this case is the current item in the array. Lastly the empty array at the end is the initial value.&lt;/p&gt;

&lt;p&gt;So it's a more complicated filter? Why are we using this instead of Array.filter again? Let me show you some better examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-awesome-use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Some awesome use cases.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#traversing-objects" class="anchor"&gt;
  &lt;/a&gt;
  Traversing objects
&lt;/h3&gt;

&lt;p&gt;Take an complex object with the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Say you wanted to take the sum of someValue, there's no immediately easy way to do this because you have an Object rather than an Array. But this is where Array.reduce can really help. Check this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// where data is in the same format&lt;/span&gt;
&lt;span class="c1"&gt;// as above&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someValue&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Just like that we were able to take a typically difficult object to traverse and cut through it like butter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transformations" class="anchor"&gt;
  &lt;/a&gt;
  Transformations
&lt;/h3&gt;

&lt;p&gt;One overlooked use case of Array.reduce is it's ability to transform Arrays into objects. Take for example the array below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Say you wanted to convert this array into an object that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets see how we can do this with Array.reduce&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While Array.reduce requires you input an Array, you can reduce that array into practically anything you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;It took me a few years to finally adopt Array.reduce into my workflow and I only wish that I found out about it earlier. It can be a bit confusing at first, but once you get the hang of using it, it will be one the most powerful tools in your toolbox.&lt;/p&gt;

&lt;p&gt;If you're interested in learning more about Array.reduce, check out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"&gt;MDN page&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>angular</category>
    </item>
    <item>
      <title>How I built a real world project for the first time 🌈</title>
      <author>Killian Frappart</author>
      <pubDate>Sat, 21 Nov 2020 16:56:33 +0000</pubDate>
      <link>https://dev.to/killianfrappartdev/how-i-built-a-real-world-project-for-the-first-time-5gn5</link>
      <guid>https://dev.to/killianfrappartdev/how-i-built-a-real-world-project-for-the-first-time-5gn5</guid>
      <description>&lt;p&gt;I have been learning web development for a year and I have just delivered my very first MVP for a client, this is a huge step forward in my journey to become a real world developer.&lt;/p&gt;

&lt;p&gt;In this article, I will write about the building process and design thinking in general. This is not a tutorial by any means, I will simply share my experience with anyone interested.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Project Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tech"&gt;Tech Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#design"&gt;Wireframe &amp;amp; Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data"&gt;Data modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project"&gt;Project Organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#frontend"&gt;Sprint 01: Frontend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backend"&gt;Sprint 02: Backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Sprint 03: Implementing features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Sprint 04: Fix &amp;amp; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id="intro"&gt;Project Introduction 👋&lt;/h1&gt;

&lt;p&gt;Let me introduce the project first. We have to build an MVP for a mobile app that works on both &lt;a href="https://www.android.com/intl/fr_fr/"&gt;Android&lt;/a&gt; and &lt;a href="https://www.apple.com/befr/ios/ios-14/"&gt;IOS&lt;/a&gt;. This app's name is &lt;a href="https://www.allergio.net/"&gt;Allergio&lt;/a&gt; and aims to make people with food allergies' life easier.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://www.allergio.net/"&gt;Allergio&lt;/a&gt;, you can create a profile for your relatives, register their allergies and share their profiles with your contacts. &lt;/p&gt;

&lt;p&gt;The core feature is the scanner. Open up your phone's front camera, point it towards any food product and a list of the potential allergens will be displayed.&lt;/p&gt;

&lt;p&gt;In order to complete this mission, I teamed up with my friend Walid. He is a talented growing JavaScript developer, and it is a pleasure to share this experience with him.&lt;/p&gt;

&lt;h1 id="tech"&gt;Tech Stack ⚛️&lt;/h1&gt;

&lt;p&gt;To build this app, we decided to rely on the very popular &lt;a href="https://medium.com/@blockchain_simplified/what-is-mern-stack-9c867dbad302"&gt;MERN&lt;/a&gt; stack which includes:&lt;br&gt;
➡️ &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;&lt;br&gt;
➡️ &lt;a href="https://expressjs.com/fr/"&gt;Express&lt;/a&gt;&lt;br&gt;
➡️ &lt;a href="https://reactnative.dev/docs/getting-started"&gt;React Native&lt;/a&gt;&lt;br&gt;
➡️ &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although these are technologies I am familiar with, I never worked with &lt;a href="https://reactnative.dev/docs/getting-started"&gt;React Native&lt;/a&gt; and I don't know much about Mobile development concepts. &lt;/p&gt;

&lt;p&gt;We are considering &lt;a href="https://aws.amazon.com/fr/free/?trk=ps_a134p000003yhSxAAI&amp;amp;trkCampaign=acq_paid_search_brand&amp;amp;sc_channel=ps&amp;amp;sc_campaign=acquisition_BENELUX&amp;amp;sc_publisher=google&amp;amp;sc_category=core-main&amp;amp;sc_country=BENELUX&amp;amp;sc_geo=&amp;amp;sc_outcome=Acquisition&amp;amp;sc_detail=aws&amp;amp;sc_content=Brand_Core_aws_e&amp;amp;sc_matchtype=e&amp;amp;sc_segment=458573551165&amp;amp;sc_medium=ACQ-P%7CPS-GO%7CBrand%7CDesktop%7CSU%7CCore-Main%7CCore%7CBENELUX%7CEN%7CText&amp;amp;s_kwcid=AL!4422!3!458573551165!e!!g!!aws&amp;amp;ef_id=Cj0KCQiAkuP9BRCkARIsAKGLE8WFycroaf307gztU0MH5DgKk8A-Ivnm2AYYF2RhsK9G3BGyv7_uNGgaAmrXEALw_wcB:G:s&amp;amp;s_kwcid=AL!4422!3!458573551165!e!!g!!aws&amp;amp;all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc"&gt;AWS&lt;/a&gt; and &lt;a href="https://dashboard.heroku.com/"&gt;Heroku&lt;/a&gt; to host the Backend part and for file management but I will provide more details in the &lt;a href="#deploy"&gt;Fix &amp;amp; Deploy&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;It already sounds like a great and exciting challenge 🤩&lt;/p&gt;

&lt;p&gt;Here is a list of tools I usually work with to enhance my programming experience:&lt;br&gt;
➡️ OS: &lt;a href="https://www.apple.com/"&gt;MacOS&lt;/a&gt;&lt;br&gt;
➡️ Terminal: &lt;a href="https://iterm2.com/"&gt;iterm2&lt;/a&gt;&lt;br&gt;
➡️ IDE:&lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;&lt;br&gt;
➡️ Versioning: &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;br&gt;
➡️ Package Manager: &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;&lt;br&gt;
➡️ iOS Emulator: &lt;a href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt;&lt;br&gt;
➡️ Andorid Emulator: &lt;a href="https://developer.android.com/studio"&gt;Android studio&lt;/a&gt;&lt;br&gt;
➡️ Communication: &lt;a href="https://slack.com"&gt;Slack&lt;/a&gt;&lt;br&gt;
➡️ Project Organization: &lt;a href="https://trello.com"&gt;Trello&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="design"&gt;Wireframe &amp;amp; Design 🎨&lt;/h1&gt;

&lt;p&gt;Our client Xavier provided simple wireframes and we reworked them a little to make it look "modern" and improve UI/UX.&lt;/p&gt;

&lt;p&gt;We mainly worked with &lt;a href="https://www.figma.com/login"&gt;Figma&lt;/a&gt; which is a great tool that I 100% recommend. Let me show you a few examples.&lt;/p&gt;

&lt;p&gt;Splash Screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jG6nPClJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3kifao1wgao9kmt25le5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jG6nPClJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3kifao1wgao9kmt25le5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login Screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aCquGQR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/etyasmyvknuzaa7kep8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aCquGQR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/etyasmyvknuzaa7kep8i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, we redesigned the app following 2020's mobile development conventions, and we took inspiration from famous applications such as &lt;a href="https://yuka.io/"&gt;Yuka&lt;/a&gt;, &lt;a href="https://www.shazam.com/fr"&gt;Shazam&lt;/a&gt;, &lt;a href="//www.spotify.com"&gt;Spotify&lt;/a&gt;, ...&lt;/p&gt;

&lt;h1 id="data"&gt;Data modeling 💾&lt;/h1&gt;

&lt;p&gt;Since we are building a Full-Stack application, we must store and manage data. It would be crazy to jump into the coding process without a clear and well-designed action plan.&lt;/p&gt;

&lt;p&gt;What kind of data are we playing with:&lt;/p&gt;

&lt;p&gt;Users 👤&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="nx"&gt;allergens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Allergen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="nx"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Profiles 👨‍👩‍👧‍👦 (Created by the user for his relatives)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;allergens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Allergen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="nx"&gt;readers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;➡️ Allergens 🥜&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;reaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;PS: Unique IDs are provided by MongoDB by default.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Awesome, we now know what our data looks like but this is not enough. To make our app able to create, read, delete and update data, we must give it the chance to communicate with our server.&lt;/p&gt;

&lt;p&gt;You might already know it, &lt;a href="https://expressjs.com/fr/"&gt;Express&lt;/a&gt; makes it really easy to build Rest API and that is exactly what we are about to do!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are not familiar with API architecture, I recommend you skip this section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;API routes:&lt;/p&gt;

&lt;p&gt;Users 👤 ⏩ /api/users/&lt;br&gt;
➡️ (GET /:uid ) Get user by ID.&lt;br&gt;
➡️ (POST /signup ) Create user account.&lt;br&gt;
➡️ (POST /login ) Log user in.&lt;br&gt;
➡️ (PUT / ) Edit user information.&lt;/p&gt;

&lt;p&gt;Profiles 👨‍👩‍👧‍👦 ⏩ /api/profiles/&lt;br&gt;
➡️ (GET /:uid/all ) Get all profiles of user.&lt;br&gt;
➡️ (GET /:pid ) Get profile by ID.&lt;br&gt;
➡️ (POST / ) Create a new profile.&lt;br&gt;
➡️ (PUT /:pid ) Edit profile information.&lt;/p&gt;

&lt;p&gt;Contacts 👥 ⏩ /api/contacts/&lt;br&gt;
➡️ (GET /:uid ) Get user's contacts.&lt;br&gt;
➡️ (POST /search ) Search new contacts.&lt;br&gt;
➡️ (POST /share ) Share profiles with contact.&lt;br&gt;
➡️ (POST / ) Add a contact.&lt;br&gt;
➡️ (DELETE / ) Delete a contact.&lt;br&gt;
➡️ (POST /unshare ) Unshare profiles with contact.&lt;/p&gt;

&lt;p&gt;Allergens 🥜 ⏩ /api/allergens/&lt;br&gt;
➡️ (GET /:aid ) Get allergen by ID.&lt;br&gt;
➡️ (GET / ) Get all allergens.&lt;br&gt;
➡️ (GET /name/:name ) Get allergen by name.&lt;/p&gt;

&lt;p&gt;We are almost good to go, before you head to the next section, I want to have a quick word about file management.&lt;/p&gt;

&lt;p&gt;This is one of the trickiest topic we came across when building &lt;a href="https://www.allergio.net/"&gt;Allergio&lt;/a&gt; and I thought it would be interesting to share the solution we came up with.&lt;/p&gt;

&lt;p&gt;Here is the problem: how to store images ?&lt;/p&gt;

&lt;p&gt;Uploading images directly to the database would slow it down and most image hosting services require you to pay monthly fees.&lt;/p&gt;

&lt;p&gt;We decided to build a very simple custom image uploader service that stores images on the server itself and provides a URL to fetch them. This simple server is hosted on an &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt; instance running in the cloud.&lt;/p&gt;

&lt;p&gt;This is definitely not the best solution but considering the huge amount of work we have to achieve in a relatively short period of time, it does the job.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/KillianFrappartDev"&gt;
        KillianFrappartDev
      &lt;/a&gt; / &lt;a href="https://github.com/KillianFrappartDev/image-manager"&gt;
        image-manager
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h1 id="project"&gt;Project Organization 🗂️&lt;/h1&gt;

&lt;p&gt;I will never tell this enough: Organization is the key! 🔑&lt;/p&gt;

&lt;p&gt;The organization relies mostly on the &lt;a href="https://fr.wikipedia.org/wiki/M%C3%A9thode_agile"&gt;Agile Methodology&lt;/a&gt; because we were introduced to it during our coding bootcamp.&lt;/p&gt;

&lt;p&gt;The building process is split in 4 sprints of 5 days (each sprint has its own section) and every one of them must have clearly defined tasks.&lt;/p&gt;

&lt;p&gt;On Monday morning, we used to group up to establish an exhaustive list of tasks for the whole week. We used &lt;a href="//www.trello.com"&gt;Trello&lt;/a&gt; to create little cards for every task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F10axEvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qpxksyryigri18e9mixo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F10axEvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qpxksyryigri18e9mixo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every Friday, there was a meeting with our client. He was always happy to have a little demo and thanks to his weekly feedback we could finally deliver a product close to his initial expectations.&lt;/p&gt;

&lt;p&gt;Moreover, we tried to stick to daily stand-up in the morning and day retrospective around 5.30 pm.&lt;/p&gt;

&lt;p&gt;There is another organization key point whenever you start a brand-new project and it is workflow setup.&lt;/p&gt;

&lt;p&gt;We are working with &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; following Git flow's recommendations as much as possible.&lt;/p&gt;

&lt;p&gt;➡️ Not familiar with Git flow ? No worries, have a look to my article! 🧐 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/killianfrappartdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZU05z7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jCB_gkcF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/377039/ea999b53-a994-42a6-ac14-dbb1847c7258.jpg" alt="killianfrappartdev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/killianfrappartdev/git-flow-introduction-42c6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git Flow Introduction 🌲&lt;/h2&gt;
      &lt;h3&gt;Killian Frappart ・ Sep 23 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Finally, let me show you the folder structure we worked with:&lt;/p&gt;

&lt;p&gt;Allergio 📂&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Backend/&lt;br&gt;
--- controllers/&lt;br&gt;
--- models/&lt;br&gt;
--- routes/&lt;br&gt;
--- utils/ &lt;br&gt;
--- middlewares/&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Frontend/&lt;br&gt;
--- app/&lt;br&gt;
------ assets/&lt;br&gt;
------ components/&lt;br&gt;
------ screens/&lt;br&gt;
------ context/&lt;br&gt;
------ utils/&lt;br&gt;
------ navigation/&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="frontend"&gt;Sprint 01: Frontend 📲&lt;/h1&gt;

&lt;p&gt;Time has finally come to start coding! 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NzasP86v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zkfvxwpsyz64cxx9vwma.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NzasP86v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zkfvxwpsyz64cxx9vwma.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shout out to &lt;a href="https://docs.expo.io/"&gt;Expo&lt;/a&gt; that litteraly made this project possible. &lt;a href="https://docs.expo.io/"&gt;Expo&lt;/a&gt; is a framework for React applications, it provides a set of tools to start building your application in a matter of minutes and hides most of the complexity when setting up a new project.&lt;/p&gt;

&lt;p&gt;It was very scary at first to work with &lt;a href="https://reactnative.dev/docs/getting-started"&gt;React Native&lt;/a&gt; because we never used it before but &lt;a href="https://docs.expo.io/"&gt;Expo&lt;/a&gt;'s documentation is well-written and I felt like doing mobile development forever in a couple days only.&lt;/p&gt;

&lt;p&gt;After we initialized the project, setting up in-app navigation is a great starting point. Very similar to &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router&lt;/a&gt; for Web, &lt;a href="https://reactnavigation.org/"&gt;React Navigation&lt;/a&gt; is a great library that is easy to get started with and provides a good solution for every use cases.&lt;/p&gt;

&lt;p&gt;We decided to implement a bottom tab navigation for optimal user experience:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ShD3NVt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o1t29mqrg69zgdk0ll95.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShD3NVt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o1t29mqrg69zgdk0ll95.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another important step is to setup a global context. Every React developer knows how tidious it might be to lift state up through props when you project is growing bigger.&lt;/p&gt;

&lt;p&gt;To answer that need of a global state, we went for &lt;a href="https://fr.reactjs.org/docs/context.html"&gt;React Context&lt;/a&gt; mainly to store user information such as name, last name, image and wether he is logged or not.&lt;/p&gt;

&lt;p&gt;Everything seems to work fine so far, let's build our screens and components. We have about 10 screens to build (There is inner navigation for each tab) and around twice as much components like buttons, cards, inputs, bottom sheets and much more.&lt;/p&gt;

&lt;p&gt;At this point, we are working with dummy hard coded data. Our components are mostly function components and their state is managed with &lt;a href="https://fr.reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, we have enough time to implement camera features and request to an external API to gather information about food products before the end of the first sprint.&lt;/p&gt;

&lt;h1 id="backend"&gt;Sprint 02: Backend 📊&lt;/h1&gt;

&lt;p&gt;As I mentionned before, this project's backend is a Node/Express Rest API linked to a cloud &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; database.&lt;/p&gt;

&lt;p&gt;In order to make it work, we start by installing dependencies such as &lt;a href="https://developer.mozilla.org/fr/docs/Web/HTTP/CORS"&gt;cors&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/body-parser"&gt;body-parser&lt;/a&gt;, &lt;a href="https://mongoosejs.com/"&gt;mongoose&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt;, ... &lt;/p&gt;

&lt;p&gt;When working with MongoDB, I highly recommend you work with &lt;a href="https://mongoosejs.com/"&gt;mongoose&lt;/a&gt; as well. It makes your life so much easier. Define mongoose models for your data, connect to the database and you are good to go ✅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s08priwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7t00fefksy3891ga4o0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s08priwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7t00fefksy3891ga4o0f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we register routes just like I already explained &lt;a href="#data"&gt;here&lt;/a&gt; and connect each route to a dedicated controller.&lt;/p&gt;

&lt;p&gt;Every controller's behavior must be tested and for that you can give &lt;a href="//www.postman.com"&gt;Postman&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MZvQJLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/28uqrq5umgeh2fm8bwlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MZvQJLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/28uqrq5umgeh2fm8bwlm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we improve our server's robustness with proper error handling middleware and enhance development experience with nodemon and environement variables.&lt;/p&gt;

&lt;h1 id="features"&gt;Sprint 03: Implementing features 
⭐&lt;/h1&gt;

&lt;p&gt;This is by far the most exciting week, when we finally see the result of everything we did before. &lt;/p&gt;

&lt;p&gt;We spend this entire week connecting Frontend user interface to Backend controllers via HTTP requests and update the database in real time.&lt;/p&gt;

&lt;p&gt;HTTP request are done using &lt;a href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt; which is a personnal preference.&lt;/p&gt;

&lt;p&gt;There are many features to implement this week:&lt;br&gt;
➡️ Login/Signup with Email and password.&lt;br&gt;
➡️ Create and update profiles.&lt;br&gt;
➡️ Edit user information.&lt;br&gt;
➡️ Add/remove contacts.&lt;br&gt;
➡️ Share profiles with contacts.&lt;br&gt;
➡️ Upload images from phone's gallery.&lt;br&gt;
➡️ Send SMS to invite friends.&lt;br&gt;
➡️ ...&lt;/p&gt;

&lt;p&gt;Native functionnalities such as SMS, camera and photo gallery could be implemented thanks to Expo's incredible &lt;a href="https://docs.expo.io/"&gt;doc&lt;/a&gt; 🌟&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c4Nk-dZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zd5fsi8u372najwtxiz3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c4Nk-dZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zd5fsi8u372najwtxiz3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="deploy"&gt;Sprint 04: Fix &amp;amp; Deploy ☁️&lt;/h1&gt;

&lt;p&gt;Last week of this incredibly enriching adventure. I already learned a lot and spent so much time and energy. We are getting tired but there is still work to do before we send our project to the client.&lt;/p&gt;

&lt;p&gt;Thousands of lines are waiting to be refactored and plenty of little bugs still remain. Let's start by cleaning this up and fixing as many style issues as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="//aws.amazon.com"&gt;AWS&lt;/a&gt; has a cloud service called EC2. We create an Ubuntu instance and connect via SSH. After a bit of setting things up, our server and image manager are running in the cloud.&lt;/p&gt;

&lt;p&gt;Right now, the app is only available through Expo's hosting but we are looking to deploy it on App store and play store soon.&lt;/p&gt;

&lt;h1 id="conclusion"&gt;Conclusion ✅&lt;/h1&gt;

&lt;p&gt;Four intensive weeks have passed, we are tired, the project is still a little buggy but the client is happy and that is what matters the most.&lt;/p&gt;

&lt;p&gt;In my opinion, my friend Walid and I did a great job here, working on a real project for the first time and facing obstacles made us better developers.&lt;/p&gt;

&lt;p&gt;I wanted to provide a link to the app's demo or source code with this article but since this project is in the alpha phase, the client would like to keep some information confidential. &lt;/p&gt;

&lt;p&gt;Thank you very much for reading!&lt;/p&gt;

&lt;p&gt;I would love to have a feedback from you, any tips to improve as a developer or as a blogger is very appreciated 😇&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>How to create a Stack using JavaScript</title>
      <author>Juan Restrepo</author>
      <pubDate>Sat, 21 Nov 2020 16:54:08 +0000</pubDate>
      <link>https://dev.to/jrestrepo922/how-to-create-a-stack-using-javascript-mkb</link>
      <guid>https://dev.to/jrestrepo922/how-to-create-a-stack-using-javascript-mkb</guid>
      <description>&lt;p&gt;JavaScript comes with some out of the box data structures. This includes Arrays and objects. Linked List, graphs, trees, queues, and stacks are not included with JavaScript. these data structures need to be constructed using a class. The data structures mention are important to know since different data structures excel at storing and retrieving data more efficiently than others depending on the scenario. Today we will be covering how to make a Stack. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-stack" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Stack?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aVMzJcvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73uzvsvrh4pcoi3bmesm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aVMzJcvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73uzvsvrh4pcoi3bmesm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A stack is a data structure that follows a simple rule. Last-in, first-out, or FIFO. You can think of the stack as a pile of dishes. If you add a dish you must put it on top of the pile and if you want to remove the dish you need to remove it from the top of the pile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o4oEkzug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hmx76lefmzylwpnqffge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4oEkzug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hmx76lefmzylwpnqffge.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A common use for this data structure is the call stack. Functions are stack on top of each other until the function returns and functions will start popping off the stack. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-stack-contain-and-how-to-build-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What does a Stack Contain and how to build it?&lt;/strong&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To get started building a stack we need to create a stack class and inside the constructor, the object will be initialized with an empty array( &lt;code&gt;this.data&lt;/code&gt; ); &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#push" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;push()&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first instance method that will be covered push. push takes in a value as a parameter. Push adds nodes to the end of the array. Finally, return the instance of the class. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pop" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;pop()&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The instance method pop() removes values from the end of the array.  We will be using array building methods to remove a value from the end of the array. The pop() method will be used. Calling pop on the array will return the &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peek" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;peek()&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The instance method peeks () returns the last value of an array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#empty" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;empty()&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, the empty() instance method just returns true if there are any values in the stack or false if the stack is empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkTBnu1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/izo1afxap97mwj8u1c3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkTBnu1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/izo1afxap97mwj8u1c3r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stacks are very simple to build using array methods and are frequently used in recursion. Recursion is when a function calls itself. You will have to get familiar with the call stack and recursion to be able to traverse trees and graph data structures. I hope this gave you a bit of insight into what stacks are and what they are used for.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
