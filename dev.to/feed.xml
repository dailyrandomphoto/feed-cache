<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Does TDD slow you down or help you go faster?</title>
      <author>Tour√© Holder</author>
      <pubDate>Fri, 16 Apr 2021 00:20:19 +0000</pubDate>
      <link>https://dev.to/toureholder/does-tdd-slow-you-down-or-help-you-go-faster-1bel</link>
      <guid>https://dev.to/toureholder/does-tdd-slow-you-down-or-help-you-go-faster-1bel</guid>
      <description>&lt;p&gt;I have the impression that I spend less time doing manual testing and "thinking" about what to test when I do TDD. But I've heard very different opinions on this.&lt;/p&gt;

&lt;p&gt;For those of you who've done a fair share of both &lt;strong&gt;test-driven development&lt;/strong&gt; and &lt;strong&gt;test-last development&lt;/strong&gt;, do you perceive any difference in the speed of getting your code to production?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>tdd</category>
      <category>healthydebate</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How Do You Design a Shopping Cart Database for E-Commerce?</title>
      <author>Shanika Wickramasinghe</author>
      <pubDate>Fri, 16 Apr 2021 00:07:11 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/how-do-you-design-a-shopping-cart-database-for-e-commerce-4oeh</link>
      <guid>https://dev.to/fabric_commerce/how-do-you-design-a-shopping-cart-database-for-e-commerce-4oeh</guid>
      <description>&lt;p&gt;An e-commerce shopping cart serves as a virtual cart that allows customers to add and hold items until they complete the purchase. It accepts payments of customers, organizes and distributes all order information to the merchant, customer, and other relevant parties.&lt;/p&gt;

&lt;p&gt;This process requires a database to store and retrieve the relevant data while supporting the functionality of the shopping cart. A shopping cart database will contain all the critical information about products, orders, and customers and allow users to perform real-time changes reflected in their shopping session.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-the-database"&gt;
  &lt;/a&gt;
  Designing the Database
&lt;/h2&gt;

&lt;p&gt;A shopping cart database should be highly available, fault-tolerant, and highly responsive to provide customers a smooth shopping experience 24x7. When designing a shopping cart database, it &lt;strong&gt;can be divided into three main components&lt;/strong&gt; for better categorization and understanding of the underlying data structure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Static Data&lt;/li&gt;
&lt;li&gt; Session Data&lt;/li&gt;
&lt;li&gt; Processed Data&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#static-data"&gt;
  &lt;/a&gt;
  Static Data
&lt;/h4&gt;

&lt;p&gt;This component will include somewhat static data that the customer needs only to retrieve while interacting with a shopping cart. The data is stored in the following types of tables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;product&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;discount&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;user&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#session-data"&gt;
  &lt;/a&gt;
  Session Data
&lt;/h4&gt;

&lt;p&gt;This is the most important component of the shopping cart database where all the live interactions (session details) are stored when the client is interacting with the shopping cart.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;shopping_session&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cart_item&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#processed-data"&gt;
  &lt;/a&gt;
  Processed Data
&lt;/h4&gt;

&lt;p&gt;Once the customer completes a transaction, we need to permanently store the order information by moving the Session Data into permanent storage. Additionally, we need to store the payment details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;order_details&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;order_items&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;payment_details&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-relationships-in-database"&gt;
  &lt;/a&gt;
  Table Relationships in Database
&lt;/h2&gt;

&lt;p&gt;The following diagram demonstrates the relationships within the above-mentioned tables inside the database using a sample fieldset. The fields in the tables may depend on the requirements of the specific e-commerce platform and can range from a simple to complex list of fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRoLkRpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f.hubspotusercontent00.net/hubfs/6994951/table-relationships-ecommerce-database.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRoLkRpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f.hubspotusercontent00.net/hubfs/6994951/table-relationships-ecommerce-database.png" alt="Table relationships in an e-commerce database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When designing the database, we need to have a good balance between simplicity and covering the required functionality.&lt;/p&gt;

&lt;p&gt;Let's dig a bit deeper into the structure of the shopping cart database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#static-data-component"&gt;
  &lt;/a&gt;
  Static Data Component
&lt;/h4&gt;

&lt;p&gt;In a shopping cart, tables like product and discount are only required to reference the product, inventory, and pricing details. They will only get &lt;code&gt;SELECT&lt;/code&gt; queries when a customer adds an item to the shopping cart. The only time the product table gets updated is when a purchase is completed and needs to update the inventory of the products (&lt;code&gt;UPDATE&lt;/code&gt; statement). Regular updates for these tables are made by the administrators of the &lt;a href="https://resources.fabric.inc/blog/open-source-ecommerce-platforms"&gt;e-commerce platform&lt;/a&gt; and should be a part of the &lt;a href="https://resources.fabric.inc/glossary/pim"&gt;product information management system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The user table is only needed in the shopping cart to link the orders and sessions with the registered users. This allows the e-commerce platform to map the orders with the relevant users. The user details table is updated only when a new user is created, or when a user updates their details. This functionality is out of the scope of the shopping cart. Within the shopping cart, we only map the order/session with the user.&lt;/p&gt;

&lt;p&gt;Since we only retrieve the data and limit write queries to updating inventory, the product table is considered a static data component in the shopping cart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Table Structure (Product Table)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="nv"&gt;`shopping_cart`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`product`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;`id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`name`&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`desc`&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`SKU`&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`category`&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`price`&lt;/span&gt; &lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`discount_id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`created_at`&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`modified_at`&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="nv"&gt;`prod_index`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;BTREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="nv"&gt;`sku_index`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;`SKU`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;BTREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="nv"&gt;`fk_prod_discount`&lt;/span&gt;
            &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`discount_id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="nv"&gt;`shopping_cart`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`discount`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#session-data"&gt;
  &lt;/a&gt;
  Session Data
&lt;/h4&gt;

&lt;p&gt;This component contains the highly active tables within the database, facilitating the real-time functionalities of the shopping cart. The purpose of the &lt;code&gt;shopping_session&lt;/code&gt; and &lt;code&gt;cart_item&lt;/code&gt; tables is to act as highly efficient and temporary storage to support the live interactions of a customer with the shopping cart. When a customer visits the e-commerce platform, a session is created (&lt;code&gt;shopping_session&lt;/code&gt;), and each item added to the cart is captured in the &lt;code&gt;cart_item&lt;/code&gt; table linked to the specific session.&lt;/p&gt;

&lt;p&gt;This enables us to capture the state of the shopping cart regardless of the customer interactions in the e-commerce platform. Combining these details with website cookies enables us to provide previous shopping cart details even if the customer navigates out of the e-commerce platform.&lt;/p&gt;

&lt;p&gt;A considerable architectural effort is required to streamline these tables to support all kinds of live queries (SELECT, UPDATE, DELETE) made to the database without hindering the user experience. This data set also allows the retailers to understand any inefficiencies in their shopping experience by identifying the behavioral patterns of the customers. For example, if some customers are dropping out at the payment stage, the platform developers can drill down and identify any issues with the payment processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Table Structure (&lt;code&gt;shopping_session&lt;/code&gt; table)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="nv"&gt;`shopping_cart`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`shopping_session`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;`id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`user_id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`total`&lt;/span&gt; &lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="s1"&gt;'0.00'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`created_at`&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`modified_at`&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="nv"&gt;`session_index`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;`user_id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;BTREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="nv"&gt;`fk_shopping_user`&lt;/span&gt;
            &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`user_id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="nv"&gt;`shopping_cart`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`user`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#processed-data"&gt;
  &lt;/a&gt;
  Processed Data
&lt;/h4&gt;

&lt;p&gt;The processed data contains the completed order details with the associated payment details. When a transaction is completed, we move the relevant data set from the &lt;code&gt;shopping_session&lt;/code&gt; to &lt;code&gt;order_details&lt;/code&gt; table and &lt;code&gt;cart_item&lt;/code&gt; to order_item table and delete those records from the shopping_session and cart_item tables as they are no longer needed.&lt;/p&gt;

&lt;p&gt;We can use a single table group (&lt;code&gt;shopping_session/cart_item&lt;/code&gt; or &lt;code&gt;order_details/cart_item&lt;/code&gt;) with an extra field (e.g. &lt;code&gt;order_status&lt;/code&gt;) to indicate whether the order has been completed. However, this will create a bloated data set and negatively impact the performance of the e-commerce platform.&lt;/p&gt;

&lt;p&gt;By separating the data into two distinct groups, we can keep track of the completed order in a separate table. This method allows maintaining the history of the orders while reducing the load of the &lt;code&gt;shopping_session&lt;/code&gt; and &lt;code&gt;cart_item&lt;/code&gt; tables to only contain data that needs to facilitate live interactions.&lt;/p&gt;

&lt;p&gt;The combination of &lt;code&gt;order_details&lt;/code&gt; and the &lt;code&gt;order_item&lt;/code&gt; tables with the &lt;code&gt;payment_details&lt;/code&gt; table creates the complete order details and enables the e-commerce platform to arrange the post-processing and distribution of the products or services.&lt;/p&gt;

&lt;p&gt;Another advantage of the processed data component is that it can be used for analytics purposes. Matching the data with relevant users of the e-commerce platform enables us to provide suggestions based on previous purchases and carry out targeted marketing campaigns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Table Structure (order_details table)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="nv"&gt;`order_details`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;`id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`user_id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nv"&gt;`total`&lt;/span&gt; &lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`payment_id`&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`created_at`&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;`modified_at`&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="nv"&gt;`order_index`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;BTREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="nv"&gt;`customer_order_index`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;`user_id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;BTREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="nv"&gt;`fk_shopping_user_order`&lt;/span&gt;
            &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`user_id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="nv"&gt;`shopping_cart`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`user`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="nv"&gt;`fk_order_payment`&lt;/span&gt;
            &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`payment_id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="nv"&gt;`shopping_cart`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;`payment_details`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;`id`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
            &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;InnoDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expanding-the-scope-of-the-database"&gt;
  &lt;/a&gt;
  Expanding the Scope of the Database
&lt;/h2&gt;

&lt;p&gt;Shopping cart databases are only a single part of a vast e-commerce experience. This section will briefly explain how to extend the database to cover additional functionalities by introducing new tables and fields to the existing database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-details"&gt;
  &lt;/a&gt;
  User Details
&lt;/h4&gt;

&lt;p&gt;A User table can be extended with other tables such as &lt;code&gt;user_address&lt;/code&gt; and &lt;code&gt;user_payment&lt;/code&gt; to store user preferences. Thus, it enables a smooth shopping experience by providing the stored details of the user for a faster checkout process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdFvIXMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f.hubspotusercontent00.net/hubfs/6994951/stored-user-details-faster-checkout.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdFvIXMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f.hubspotusercontent00.net/hubfs/6994951/stored-user-details-faster-checkout.png" alt="stored-user-details-faster-checkout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#product-details"&gt;
  &lt;/a&gt;
  Product Details
&lt;/h4&gt;

&lt;p&gt;Combining additional tables like inventory and category to the products table enables us to expand the functionality of product management. This is a key consideration when expanding the e-commerce platform to integrate &lt;a href="https://fabric.inc/pim"&gt;Product Information Management (PIM)&lt;/a&gt; functionalities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWo5sNK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f.hubspotusercontent00.net/hubfs/6994951/product-inventory-category-detail-tables.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWo5sNK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://f.hubspotusercontent00.net/hubfs/6994951/product-inventory-category-detail-tables.png" alt="product-inventory-category-detail-tables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A shopping cart database can be extended further to support any requirement. The database can act as a standalone database powering the complete e-commerce platform or a part of a database cluster focused on shopping cart functionality. The possibilities are limited only by the development effort and the user requirements.&lt;/p&gt;

&lt;p&gt;In all instances, it is advisable to decouple the tables and create separate tables other than creating a few large tables. This increases the flexibility and the overall performance of the database while reducing data redundancy.&lt;/p&gt;

&lt;p&gt;As an additional note, it's a good idea to plan a reliable backup and disaster recovery strategy to the database from the initial deployment of the database. It will increase the resilience of the database and offer peace of mind to the platform administrators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oms-software-and-shopping-cart-apis"&gt;
  &lt;/a&gt;
  OMS Software and Shopping Cart APIs
&lt;/h2&gt;

&lt;p&gt;Order Management Software (OMS) provides everything needed to receive, track, and fulfill customer orders online. These solutions expose the shopping cart database through an API and allow e-commerce platform administrators to ensure that all order and inventory data is up to date.&lt;/p&gt;

&lt;p&gt;For instance, with &lt;a href="https://fabric.inc/oms"&gt;Fabric OMS&lt;/a&gt;, you can streamline the way of managing orders using a single dashboard and track inventory and orders across multiple channels.&lt;/p&gt;

&lt;p&gt;OMS software also comes with &lt;a href="https://api.fabric.inc/cart/untitled"&gt;shopping cart APIs&lt;/a&gt; that add flexibility to the shopping experience by enabling customers to edit their cart, apply promotional codes, and specify shipping and billing information.&lt;/p&gt;

&lt;p&gt;For example, a user can use &lt;code&gt;PATCH /cart/{cartId}/&lt;/code&gt;items to modify their cart, and the API endpoint is designed to ensure the cart is up to date at any given point. Below, you can see two sample requests for a registered and guest user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registered User (Logged in User)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cartId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;604638499041&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userAuthToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6^t@CDm6DY7FZZq3E!0lT3rxb02d7&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;registeredUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;itemId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1000000122&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quantity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5e31a1f9fcc2b500089c10e8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Guest User&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cartId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;604638499041&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userAuthToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;registeredUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;itemId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1000000015&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quantity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LPCUsIdKqZhjHoA1Ok3tMCsc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;itemId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1002200074&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quantity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3NXSiwNoKbQxe5pbM9hc10lb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Order Management System API provides different endpoints that reflect different functionalities. Below are some of the functionalities available through the &lt;a href="https://api.fabric.inc/cart/untitled"&gt;Fabric Cart API&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Merge guest cart with user cart&lt;/li&gt;
&lt;li&gt;Get cart by cartId or userId&lt;/li&gt;
&lt;li&gt;Add Ship-To to line items&lt;/li&gt;
&lt;li&gt;Get cart by Ship-To Id&lt;/li&gt;
&lt;li&gt;Apply/Remove Promo&lt;/li&gt;
&lt;li&gt;Create Bill-To records (billing details)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-vs-buying-the-shopping-cart"&gt;
  &lt;/a&gt;
  Building vs Buying the Shopping Cart
&lt;/h2&gt;

&lt;p&gt;OMS technology available from e-commerce SaaS vendors like Fabric features robust APIs that provide almost limitless functionality. Designing a shopping cart database using them from the ground up may not be the best use of resources. However, if you want to build a shopping cart database from scratch for one reason or another, this article should point you in the right direction.&lt;/p&gt;

&lt;p&gt;For further assistance, you can check out &lt;a href="https://www.oreilly.com/library/view/access-2013-the/9781449359447/ch01.html"&gt;this guide&lt;/a&gt; on creating a database from start to finish using Microsoft Access and have an in-depth look at &lt;a href="https://resources.fabric.inc/blog/ecommerce-data-model"&gt;data modeling for e-commerce applications&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>Runtime Complexity Cheatsheet</title>
      <author>Meks (they/them)</author>
      <pubDate>Thu, 15 Apr 2021 22:26:31 +0000</pubDate>
      <link>https://dev.to/mmcclure11/runtime-complexity-cheatsheet-11il</link>
      <guid>https://dev.to/mmcclure11/runtime-complexity-cheatsheet-11il</guid>
      <description>&lt;p&gt;Here is a cheat sheet for referencing to help determine the runtime of an algorithm. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notes on Runtimes:&lt;/strong&gt;&lt;br&gt;
Runtime refers to the performance of an algorithm in terms of processing power.&lt;br&gt;
&lt;strong&gt;Constant Time (1)&lt;/strong&gt; - No matter how many elements we are working with, the algorithm/operation will always take the same amount of time. This the holy grail of algorithms.&lt;br&gt;
&lt;strong&gt;Logarithmic Time (log(n))&lt;/strong&gt; - You have this if doubling the number of elements you are iterating over doesn‚Äôt double the amount of work. It's pretty safe to assume that searching operations are log(n).&lt;br&gt;
&lt;strong&gt;Linear Time (n)&lt;/strong&gt; - Iterating through all elements in a collection of data. If you see a for loop spanning from ‚Äò0‚Äô to ‚Äòarray.length‚Äô, you probably have ‚Äòn‚Äô or linear runtime. Most common for the ‚Äòsimpler‚Äô algorithm problems like reversing a string or counting the number of vowels in a string.&lt;br&gt;
&lt;strong&gt;Quasilinear Time (n * log(n))&lt;/strong&gt; - You have this if doubling the number of elements you are iterating over doesn‚Äôt double the amount of work. You can often assume that any sorting operation is n*log(n).&lt;br&gt;
&lt;strong&gt;Quadratic Time (n ^ 2)&lt;/strong&gt; - Every element in a collection has to be compared to every other element. A trick to help remember this is to think of ‚ÄòThe handshake problem‚Äô. Imagine there is a group of people in a room and a new person walks into it. That person has to be introduced to all other people in the room and shake each person's hand. Everyone in the room has already shaken everyone other person's hand. So every element is interacting with all the other elements. &lt;br&gt;
&lt;strong&gt;Exponential Time (2 ^ n)&lt;/strong&gt; - If you add a &lt;em&gt;single&lt;/em&gt; element to a collection, the processing power required doubles. Realistically you never want to propose this as a real solution because it is just too awful to compute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/mmcclure11/introduction-to-big-o-notation-50di"&gt;Big ‚ÄòO‚Äô Notation&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
As software engineers, we can often think of Big 'O' notation as the runtime of the algorithm:&lt;/p&gt;

&lt;p&gt;O(n) =&amp;gt; linear&lt;br&gt;
O(1) =&amp;gt; Constant&lt;br&gt;
O(n^2) =&amp;gt; Quadratic&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identifying Runtime Complexity - Tips and Tricks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note: These are not rules, they are generalizations. Unfortunately, there is no list to memorize that will tell you, 'these algorithms are always this'. It depends on each independent algorithm. So it really comes down to practicing and writing different algorithms and learning about their corresponding runtimes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Iterating with a simple for loop through a single collection, for example reversing a string. =&amp;gt; Probably O(n)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Iterating through half a collection. =&amp;gt; Still O(n). There are no constants in runtime since these become meaningless as data sets become infinitely larger.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Iterating through two &lt;em&gt;different&lt;/em&gt; collections with separate for loops. For example, you want to reverse two strings both in the same function in two different for loops. You want to consider both n and m because one may be huge and the other much smaller, so a new variable is introduced. =&amp;gt; O(n + m)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two nested for loops iterating over the same collection. =&amp;gt; O(n^2)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two nested for loops iterating over different collections =&amp;gt; O(n*m) [very similar to n^2]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sorting =&amp;gt; O(n*log(n))&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Searching a sorted array =&amp;gt; O(log(n))&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.interviewcake.com/"&gt;Interview cake&lt;/a&gt; and &lt;a href="https://leetcode.com/problemset/all/"&gt;leet code&lt;/a&gt; are some great resources for getting practice in with algorithms while learning about their runtimes. &lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>interview</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>JavaScript Array find() Method</title>
      <author>Francisco  Inoque</author>
      <pubDate>Thu, 15 Apr 2021 22:26:17 +0000</pubDate>
      <link>https://dev.to/frantchessico/javascript-array-find-method-d0h</link>
      <guid>https://dev.to/frantchessico/javascript-array-find-method-d0h</guid>
      <description>&lt;p&gt;The &lt;strong&gt;find ()&lt;/strong&gt; method returns the value of the first element of the array that satisfies the test function provided. Otherwise, the undefined value is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Francisco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inoque&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jaimeinoque20@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@franciscoinoque&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5678&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;josedavid@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@josedavid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9101&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Peter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jordan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;peterjordan@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@peterjordan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1112&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clifton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Urik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cliftonurik@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@cliftonurik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findUserByUserID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;error_msg&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findUserByUserID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1112&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>FontAwesome vs. emojis</title>
      <author>Sergey Ioffe</author>
      <pubDate>Thu, 15 Apr 2021 21:53:54 +0000</pubDate>
      <link>https://dev.to/sergeyioffe/fontawesome-vs-emojis-34la</link>
      <guid>https://dev.to/sergeyioffe/fontawesome-vs-emojis-34la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#fontawesome"&gt;
  &lt;/a&gt;
  FontAwesome
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;br&gt;
‚úîÔ∏è Great variety of iconic symbols&lt;br&gt;
‚úîÔ∏è Web design style&lt;br&gt;
&lt;strong&gt;Cons:&lt;/strong&gt;&lt;br&gt;
‚ùå Large file size, slows page loading&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emojis"&gt;
  &lt;/a&gt;
  Emojis
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;br&gt;
‚úîÔ∏è Extremely easy to use&lt;br&gt;
‚úîÔ∏è Tiny code size&lt;br&gt;
‚úîÔ∏è Comic style&lt;br&gt;
&lt;strong&gt;Cons:&lt;/strong&gt;&lt;br&gt;
‚ùå Limited set of iconic symbols&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resume"&gt;
  &lt;/a&gt;
  Resume
&lt;/h2&gt;

&lt;p&gt;Would use emojis if there would be social media logos included, while FontAwesome is good for user experience in tech and business web design. &lt;/p&gt;

</description>
      <category>emojis</category>
      <category>html</category>
    </item>
    <item>
      <title>Talk Notes: "Growing Software From Seed" (railsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Thu, 15 Apr 2021 21:30:42 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-growing-software-from-seed-railsconf-2021-2cng</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-growing-software-from-seed-railsconf-2021-2cng</guid>
      <description>&lt;p&gt;‚ú® &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Talk:&lt;/strong&gt; 'Growing Software From Seed' by &lt;a href="https://twitter.com/SwetaSanghavi"&gt;Sweta Sanghavi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: This talk visits some familiar places, code that should work, or seems unnecessarily complicated, and digs deeper to find what we missed at first glance. Let‚Äôs explore how we can learn to hear all our application tells us and cultivate a methodical approach to these sticky places.&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Impression&lt;/strong&gt;: üå± This talk brings exactly the energy I need in tech and I feel so rejuvenated after this half-hour! üå± A lovely analogy between gardening/weeding and coding/debugging! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I love the opening anecdote: using veggie analogy to talk about how the unknown or weakest part of the system is not necessarily &lt;strong&gt;the root&lt;/strong&gt; of the undesired behavior&lt;/li&gt;
&lt;li&gt;A quote by Pam Pierce (a gardener and an author of "Golden Gate Gardening"):&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Make a conscious effort to look at your garden. Look to spot problems in time to solve them. And look to develop a feel for the plants -- how they grow and how they respond to stress. (...)&lt;br&gt;
Turn leaves over. Notice what is flying or crawling about. Sit down. Study a plat or a square foot of ground until you've learned something new.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Debugging process

&lt;ol&gt;
&lt;li&gt;The unknown or weakest part of the system is not necessarily &lt;strong&gt;the root&lt;/strong&gt; of the undesired behavior&lt;/li&gt;
&lt;li&gt;Weed out assumptions&lt;/li&gt;
&lt;li&gt;Look at the systems holistically (also, as a part of a bigger system)&lt;/li&gt;
&lt;li&gt;Observe early, act quickly&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;A different way of looking: from scanning for signs of progress to being curious about every change that happens, and the &lt;strong&gt;why&lt;/strong&gt; behind it&lt;/li&gt;
&lt;li&gt;Expert gardeners are really just expert observers (observe early to act quickly)&lt;/li&gt;
&lt;li&gt;It's easy to overlook the error we see often!&lt;/li&gt;
&lt;li&gt;It's easy to assume we are at fault!&lt;/li&gt;
&lt;li&gt;"Great software is not built, it is grown" (&lt;a href="https://www.oreilly.com/pub/au/251"&gt;Richard Monson-Haefel&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Sometimes you need to wait to refactor:

&lt;ul&gt;
&lt;li&gt;"Duplication is far cheaper than the wrong abstraction" (&lt;a href="https://sandimetz.com/"&gt;Sandi Metz&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;"wait to see what your seedlings are before you weed"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Good Code practices from gardening:

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Talk to your plants&lt;/strong&gt;: state your assumptions (how you expect your tests to fail, what your hypotheses are, read each error out loud, ask yourself what question you're trying to answer right now)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Walk in your garden&lt;/strong&gt;: adopt the practice of daily diff as a part of your diff process (spend 15-20 mins in the morning to review the commits of the day prior to familiarize yourself and your team with all the changes that are happening in the codebase; notice high-level patterns)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Weeding&lt;/strong&gt;: tend to console noise (logs, deprecation warnings), pay down debt (just daily weed some out)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;"These practices unearth assumptions. Assumptions are the root of most bugs" üêõ&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"Shifting coding dynamics, being open to slow down and holding yourself to strive for the force that goes back to the simplest thing"&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I loved how Sweta made her whole talk plant-oriented! It's not only the main anecdote but also the visuals, the slide design, her flat in the background, and her puns! For instance, when talking about adding a new feature to the codebase, she asked: "what's the entry point - where are we going to plant our new code?" üíï&lt;/li&gt;
&lt;li&gt;This talk brings exactly the energy I need in tech and I feel so rejuvenated after this half-hour!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
    </item>
    <item>
      <title>Generating Random Passwords</title>
      <author>TheYoungestCoder</author>
      <pubDate>Thu, 15 Apr 2021 20:52:00 +0000</pubDate>
      <link>https://dev.to/theyoungestcoder/generating-random-passwords-5bcl</link>
      <guid>https://dev.to/theyoungestcoder/generating-random-passwords-5bcl</guid>
      <description>&lt;p&gt;As you may know, many programming languages have the ability to generate random &lt;strong&gt;numbers&lt;/strong&gt;, while not &lt;strong&gt;letters&lt;/strong&gt; (at least in javascript). Today, I will walk you through how you can make a random password/code generator.&lt;/p&gt;

&lt;p&gt;Firstly, we need to know how to create a random number. In javascript it's pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It returns a random number‚Äîbut only between 0-1. Since there are 26 numbers in the alphabet but many possibilities from &lt;code&gt;Math.random&lt;/code&gt;, we need to use a little logic to get a random number that has 26 possibilities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage our code will return a random from 0 to 25. Since these are only numbers‚Äîwe need to get the character associated with that number. Luckily, javascript has a function called &lt;code&gt;String.fromCharCode&lt;/code&gt;. Since the character code of "a" is 97, we need to offset our random number by 97:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our random letter, time to repeat the process using a for loop‚Äîor my personal favorite, creating an empty array followed by mapping it. Putting it all together, this is what it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// initialize an array of the specified length&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;charArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="c1"&gt;// map each item in the array to a random char&lt;/span&gt;
    &lt;span class="nx"&gt;charArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;charArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the array into a string by joining it&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;charArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Windows Users Warned: A new Windows Desktop Vulnerability found.</title>
      <author>manish srivastava</author>
      <pubDate>Thu, 15 Apr 2021 20:19:24 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/windows-users-warned-a-new-windows-desktop-vulnerability-found-2g3d</link>
      <guid>https://dev.to/manishfoodtechs/windows-users-warned-a-new-windows-desktop-vulnerability-found-2g3d</guid>
      <description>&lt;p&gt;Desktop Window Manager‚Äôs vulnerability:&lt;/p&gt;

&lt;p&gt;Kaspersky researchers have found a zero-day vulnerability (CVE-2021-28310) in a Microsoft Windows component called Desktop Window Manager (DWM). &lt;/p&gt;

&lt;p&gt;They said:&lt;/p&gt;

&lt;p&gt;"The vulnerability our advanced exploit prevention technology discovered is an elevation of privilege vulnerability. That means a program can trick Desktop Window Manager into giving it access that it shouldn‚Äôt have. In this case, the vulnerability allowed the attackers to execute arbitrary code on victims‚Äô machines ‚Äî it essentially gave them full control over the computers."&lt;/p&gt;

&lt;p&gt;CVE-2021-28310 is an out-of-bounds (OOB) write vulnerability in dwmcore.dll, which is part of Desktop Window Manager (dwm.exe). Due to the lack of bounds checking, attackers are able to create a situation that allows them to write controlled data at a controlled offset using DirectComposition API.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How to get your pc safe:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Download this pc patch&lt;br&gt;
&lt;a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-28310"&gt;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-28310&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>devops</category>
      <category>news</category>
      <category>hacking</category>
    </item>
    <item>
      <title>Reach Your Goals with the CodeNewbie Challenge (#CNC2021) üéâ</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 15 Apr 2021 20:14:51 +0000</pubDate>
      <link>https://dev.to/devteam/reach-your-goals-with-the-codenewbie-challenge-cnc2021-mha</link>
      <guid>https://dev.to/devteam/reach-your-goals-with-the-codenewbie-challenge-cnc2021-mha</guid>
      <description>&lt;p&gt;It's an exciting day for early-career developers and people learning to code!&lt;/p&gt;

&lt;p&gt;The &lt;a href="//community.codenewbie.org"&gt;CodeNewbie Community&lt;/a&gt; has announced the relaunch of their beloved &lt;strong&gt;&lt;a href="https://community.codenewbie.org/cnc2021"&gt;CodeNewbie Challenge&lt;/a&gt;&lt;/strong&gt; with updated resources and a stronger focus on community support. &lt;/p&gt;

&lt;p&gt;If you ever find yourself needing help when it comes to &lt;strong&gt;Starting to Code&lt;/strong&gt;, &lt;strong&gt;Coding More&lt;/strong&gt;, &lt;strong&gt;Writing More&lt;/strong&gt;, or &lt;strong&gt;Getting a Job&lt;/strong&gt;, the CodeNewbie Challenge 2021 (#CNC2021) is for you. &lt;/p&gt;

&lt;p&gt;The five-week challenge is conducted through routine emails that package up manageable weekly "missions", suggested reading material from other community members, helpful worksheets and exercises, lots of support, and self-care tips. This potent combo will help you make real, satisfying progress towards your goals.&lt;/p&gt;

&lt;p&gt;Ready to challenge yourself to reach your biggest early-career coding goals? Sign up and view FAQs and additional info &lt;a href="https://community.codenewbie.org/cnc2021"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you'll join us ‚Äî you've got this! ‚ù§Ô∏è &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>challenge</category>
      <category>cnc2021</category>
    </item>
    <item>
      <title>What is SQL - Part 3</title>
      <author>Marcelo Garbarino</author>
      <pubDate>Thu, 15 Apr 2021 20:01:44 +0000</pubDate>
      <link>https://dev.to/marcegarba/what-is-sql-part-3-4ica</link>
      <guid>https://dev.to/marcegarba/what-is-sql-part-3-4ica</guid>
      <description>&lt;h2&gt;
  &lt;a href="#viewing-updating-and-deleting-data-in-tables"&gt;
  &lt;/a&gt;
  Viewing, updating and deleting data in tables
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is part 3 of a four-part article which explains SQL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/marcegarba/what-is-sql-part-1-3dnb"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/marcegarba/what-is-sql-part-2-1oa1"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part 4&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#retrieving-data-using-the-select-clause"&gt;
  &lt;/a&gt;
  Retrieving data using the SELECT clause
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As mentioned before, relations / tables / sets are an unordered collection of rows, or tuples.&lt;/li&gt;
&lt;li&gt;Let's retrieve all the content in table &lt;code&gt;products&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SELECT *&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This means brings all the columns; it could also be written as &lt;code&gt;SELECT id, name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FROM products&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;List of tables to operate on. In this case, we're talking about table &lt;code&gt;products&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Here's a possible result:&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Suit C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Why &lt;em&gt;possible&lt;/em&gt;? Because there is no specific ordering of rows; it all depends on how the DB system stores the rows, the order in which rows were &lt;code&gt;INSERT&lt;/code&gt;ed, and others&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#ordering"&gt;
  &lt;/a&gt;
  Ordering
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In order to establish a specific order, we must use the &lt;code&gt;ORDER&lt;/code&gt; clause:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Suit C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;In reverse order, by name:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Suit C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ORDER&lt;/code&gt; clause may list more than one column, or expression; in this simple case, it doesn't make much sense&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#filtering"&gt;
  &lt;/a&gt;
  Filtering
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Let's see how to limit the number of rows, based on filtering conditions:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'Sport %'&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Here, a combination of &lt;code&gt;WHERE&lt;/code&gt; and &lt;code&gt;ORDER BY&lt;/code&gt; clauses:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;WHERE name LIKE 'Sport %'&lt;/code&gt; means all rows where &lt;code&gt;name&lt;/code&gt; starts with 'Sport':&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;%&lt;/code&gt; symbol maps from zero to any number of characters&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;?&lt;/code&gt; symbol were used, that would mean exactly one character, which would bring zero rows, as &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ORDER BY id ASC&lt;/code&gt;: ASC for ascending, which is the default in the clause&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;SQL offers a number of standard functions, and in fact, there are two types of functions:

&lt;ul&gt;
&lt;li&gt;Common functions, which apply to expressions in rows&lt;/li&gt;
&lt;li&gt;Aggregate and Window functions, which apply to more than one row at a time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#row-functions"&gt;
  &lt;/a&gt;
  Row functions
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;double_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;upper_name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;double_id&lt;/th&gt;
&lt;th&gt;upper_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;SPORT SHOES A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SPORT WATCH B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;SUIT C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Several things to notice here:

&lt;ul&gt;
&lt;li&gt;Expressions like &lt;code&gt;id * 2&lt;/code&gt; and functions like &lt;code&gt;upper(name)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;AS&lt;/code&gt; key word is used to give names to the expressions; if it were not used, the calculated columns would have default names, which vary depending on the DB system used&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#aggregate-and-window-functions"&gt;
  &lt;/a&gt;
  Aggregate and window functions
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;number_of_sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;sum_amount&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id_product&lt;/th&gt;
&lt;th&gt;number_of_sales&lt;/th&gt;
&lt;th&gt;sum_amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;575.72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2697.32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1903.75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Here aggregate functions &lt;code&gt;COUNT()&lt;/code&gt;, &lt;code&gt;SUM()&lt;/code&gt; are used&lt;/li&gt;
&lt;li&gt;Notice the resulting rows and content:

&lt;ul&gt;
&lt;li&gt;Aggregate functions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;COUNT(*)&lt;/strong&gt;: counts the number of rows, _according to the GROUP BY criterion&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SUM(amount)&lt;/strong&gt;: calculates the sum of column &lt;code&gt;amount&lt;/code&gt; according to the GROUP BY criterion&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AVG(&lt;em&gt;x&lt;/em&gt;)&lt;/strong&gt;: calculates the average&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MAX(&lt;em&gt;x&lt;/em&gt;)&lt;/strong&gt;, &lt;strong&gt;MIN(&lt;em&gt;x&lt;/em&gt;)&lt;/strong&gt;: obtains the maximum or minimum value&lt;/li&gt;
&lt;li&gt;There are other aggregate functions in standard SQL&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The list of columns in the &lt;code&gt;SELECT&lt;/code&gt; when using grouping functions, should either:

&lt;ul&gt;
&lt;li&gt;Be the result of an aggregate expression&lt;/li&gt;
&lt;li&gt;Be &lt;strong&gt;named&lt;/strong&gt; in the &lt;code&gt;GROUP BY&lt;/code&gt; clause&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;If this is not the case, the query should fail

&lt;ul&gt;
&lt;li&gt;If it doesn't fail, for some DB engines, that's an issue, since it's not easy to spot a failed SELECT&lt;/li&gt;
&lt;li&gt;PostgreSQL is very strict, which is a great thing; not so with other DB products&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#filtering-grouped-rules"&gt;
  &lt;/a&gt;
  Filtering grouped rules
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Instead of using the &lt;code&gt;WHERE&lt;/code&gt; clause, for filtering on aggregated expressions, &lt;code&gt;HAVING&lt;/code&gt; has to be used:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;number_of_sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;sum_amount&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id_product&lt;/th&gt;
&lt;th&gt;number_of_sales&lt;/th&gt;
&lt;th&gt;sum_amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;575.72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1903.75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#combining-results-from-more-than-one-table"&gt;
  &lt;/a&gt;
  Combining results from more than one table
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;By using the &lt;code&gt;JOIN&lt;/code&gt; clause, more than one table can be invoked in the &lt;code&gt;SELECT&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;Here is an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;number_of_sales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;sum_amount&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
  &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A few changes to notice:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM ... JOIN ... ON ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FROM used to name one table,&lt;/li&gt;
&lt;li&gt;JOIN names the second table&lt;/li&gt;
&lt;li&gt;ON establishes the way both tables are related&lt;/li&gt;
&lt;li&gt;Table name aliases:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sales s&lt;/code&gt; and &lt;code&gt;products p&lt;/code&gt;; this is not necessary, but instead of typing &lt;code&gt;sales.id_product&lt;/code&gt;, &lt;code&gt;product.name&lt;/code&gt; and &lt;code&gt;sales.amount&lt;/code&gt;, aliases help us to shorten the sentences&lt;/li&gt;
&lt;li&gt;If the column names are unique among the invoked tables, there is no strict need to preface the column with the table or alias names, although it's a good practice. In fact, if in the future one of the column names are repeated, what worked so far will stop to do so, as the DB engine wouldn't know what table the column  referrer to&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;GROUP BY&lt;/code&gt; clause &lt;strong&gt;needs&lt;/strong&gt; to include &lt;code&gt;p.name&lt;/code&gt;; otherwise, an error should be triggered (again, &lt;em&gt;not all DB engines&lt;/em&gt; do so)&lt;/li&gt;
&lt;li&gt;Types of JOIN:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;INNER JOIN&lt;/strong&gt;: Rows from both tables must be present (the default)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;LEFT JOIN&lt;/strong&gt;: Rows from the left-side table must exist, for columns in the right-side table missing, NULL values are used&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RIGHT JOIN&lt;/strong&gt;: If rows from the left-side table do &lt;strong&gt;not&lt;/strong&gt; exist, NULL values are used instead&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CROSS JOIN&lt;/strong&gt;: Cartesian product from both tables are retrieved, as long as the 'ON' clause is fulfilled&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example of a &lt;code&gt;CROSS JOIN&lt;/code&gt;, which is not much used, look at this simple SELECT:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;name_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;id_seller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;name_seller&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;sellers&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_seller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simply naming the tables without any filtering condition, is equivalent to a &lt;code&gt;CROSS JOIN&lt;/code&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id_product&lt;/th&gt;
&lt;th&gt;name_product&lt;/th&gt;
&lt;th&gt;id_seller&lt;/th&gt;
&lt;th&gt;name_seller&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;John S.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;td&gt;281&lt;/td&gt;
&lt;td&gt;Luisa G.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sport shoes A&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;Mary T.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;John S.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;td&gt;281&lt;/td&gt;
&lt;td&gt;Luisa G.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sport watch B&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;Mary T.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Suit C&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;John S.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Suit C&lt;/td&gt;
&lt;td&gt;281&lt;/td&gt;
&lt;td&gt;Luisa G.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Suit C&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;Mary T.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;SELECT&lt;/code&gt; is just an example of a &lt;code&gt;CROSS JOIN&lt;/code&gt; result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-table-contents-with-update"&gt;
  &lt;/a&gt;
  Updating table contents with UPDATE
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;UPDATE&lt;/code&gt; sentence is used for updating rows&lt;/li&gt;
&lt;li&gt;An example follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;sellers&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mar√≠a T.'&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;341&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After this change, look at the table contents:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sellers&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;John S.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;281&lt;/td&gt;
&lt;td&gt;Luisa G.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;Mar√≠a T.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Important points:

&lt;ul&gt;
&lt;li&gt;Limit the UPDATE with a WHERE; otherwise, the update will impact &lt;strong&gt;all rows&lt;/strong&gt; in a table, all of them, in one transaction&lt;/li&gt;
&lt;li&gt;Not all updates are guaranteed to success; for instance, in the schema with all constraints in place, this UPDATE will fail:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;sellers&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;234&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you try this, you'll see that it fails, as there are &lt;strong&gt;relational integrity constraints&lt;/strong&gt; which prevent tables &lt;code&gt;sellers&lt;/code&gt; and &lt;code&gt;products&lt;/code&gt; to update their PK if there is at least one row in the &lt;code&gt;sales&lt;/code&gt; table that point to those values, as is the case in the example here

&lt;ul&gt;
&lt;li&gt;See the error with PostgreSQL:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ERROR:  update or delete on table "sellers" violates foreign     
        key constraint "sales_seller_fkey" on table "sales"
DETAIL: Key (id)=(234) is still referenced from table "sales".
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;See it with MariaDB:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ERROR 1451 (23000): Cannot delete or update a parent row:
      a foreign key constraint fails
      (`course`.`sales`,
       CONSTRAINT `sales_ibfk_2`
       FOREIGN KEY (`id_seller`) REFERENCES `sellers` (`id`)
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-table-contents-with-delete"&gt;
  &lt;/a&gt;
  Deleting table contents with DELETE
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;DELETE&lt;/code&gt; DML sentence is used to remove rows from tables&lt;/li&gt;
&lt;li&gt;Here's an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="k"&gt;BETWEEN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After deleting these rows, the contents of the table are:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;id_seller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_seller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id_product&lt;/th&gt;
&lt;th&gt;id_seller&lt;/th&gt;
&lt;th&gt;date&lt;/th&gt;
&lt;th&gt;quantity&lt;/th&gt;
&lt;th&gt;amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;2020-06-10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;148.34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;2020-01-23&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;142.38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;2020-03-01&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;75.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;2020-01-17&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;210.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;2020-12-25&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;220.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;2020-01-31&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;215.48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;2020-12-01&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;448.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;281&lt;/td&gt;
&lt;td&gt;2020-04-15&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;350.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;281&lt;/td&gt;
&lt;td&gt;2020-05-13&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;605.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;2020-02-15&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;348.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;341&lt;/td&gt;
&lt;td&gt;2020-11-18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;600.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;As is the case with the failed UPDATE and constraints are in place, certain &lt;code&gt;DELETE&lt;/code&gt; queries will fail&lt;/li&gt;
&lt;li&gt;For instance:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;sales&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;234&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the FOREIGN KEY constraints established in part 2 for table &lt;code&gt;sales&lt;/code&gt; had the &lt;code&gt;ON UPDATE CASCADE ON DELETE CASCCADE&lt;/code&gt;, neither the &lt;code&gt;UPDATE&lt;/code&gt; nor the &lt;code&gt;DELETE&lt;/code&gt; would fail:

&lt;ul&gt;
&lt;li&gt;For the &lt;code&gt;UPDATE&lt;/code&gt;, it would modify the values of the foreign keys in table &lt;code&gt;sales&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For the &lt;code&gt;DELETE&lt;/code&gt;, it would also remove rows from the &lt;code&gt;sales&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;... To be continued in Part 4 ...&lt;/em&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Firebase: The google API for building Apps</title>
      <author>Sean</author>
      <pubDate>Thu, 15 Apr 2021 19:58:10 +0000</pubDate>
      <link>https://dev.to/seanolad/firebase-the-google-api-for-building-apps-498g</link>
      <guid>https://dev.to/seanolad/firebase-the-google-api-for-building-apps-498g</guid>
      <description>&lt;p&gt;Firebase is tool used for the backend and database of any app or website you might create. It's a template for your app, that can be configured to your specific needs while delivering the basics. It's made owned by google which makes it even more accessible. I use google for pretty much everything. Emails, writing, and countless other things. I actually didn't know that something like Firebase existed a year ago. I mean who's gonna give up a service like this for free-ish. Anyway lets get right into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#firebase-offers-authentication"&gt;
  &lt;/a&gt;
  Firebase offers Authentication
&lt;/h1&gt;

&lt;p&gt;This is literally the bread and butter of any application. Users need to be identified and have a secure way of doing so. Firebase authentication consists of google auth, facebook auth, email only auth, github auth, email and password auth, and a few others. Users can safely change passwords, confirm their email, and even change the email they are using. &lt;a href="https://firebase.google.com/docs/auth"&gt;Here's the link to the docs for auth.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#firebase-offers-2-different-databases-and-storage"&gt;
  &lt;/a&gt;
  Firebase offers 2 different Databases and storage
&lt;/h1&gt;

&lt;p&gt;Firebase is flexible, like really flexible. There are 2 different databases available: the real-time database, and the firestore. Both are great but personally I recommend the firestore. Storage is just for storing things that you cant keep in either database in your google cloud bucket. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Storage: &lt;a href="https://firebase.google.com/docs/storage"&gt;https://firebase.google.com/docs/storage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Firestore: &lt;a href="https://firebase.google.com/docs/firestore"&gt;https://firebase.google.com/docs/firestore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Real-time Database: &lt;a href="https://firebase.google.com/docs/database"&gt;https://firebase.google.com/docs/database&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#firebase-offers-cloud-functions"&gt;
  &lt;/a&gt;
  Firebase offers cloud functions
&lt;/h1&gt;

&lt;p&gt;Because of the nature of firebase you don't have direct access to a server, but cloud functions solve that problem. You can export your functions to be called using triggers. So any server side code can be run no stress. &lt;a href="https://firebase.google.com/docs/functions"&gt;Here's the link to the docs&lt;/a&gt; &lt;br&gt;
P.S you need to be on a paid plan to use Firebase cloud functions.&lt;/p&gt;

&lt;p&gt;Now that all that's been said here's a quick example of how you might implement firebase into a react app.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;a href="https://react-firebase-testing-b646e.web.app/"&gt;Here's a link to the code in action.&lt;/a&gt;

&lt;h1&gt;
  &lt;a href="#happy-hacking"&gt;
  &lt;/a&gt;
  Happy Hacking!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ht6HVYkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/0cj4wyr1uc851.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ht6HVYkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/0cj4wyr1uc851.jpg" alt="Cat Coder Photo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Tech Talks: "A Day in the Life of a Ruby Object" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Thu, 15 Apr 2021 19:57:20 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/tech-talks-a-day-in-the-life-of-a-ruby-object-railsconf-2021-1f9j</link>
      <guid>https://dev.to/sylwiavargas/tech-talks-a-day-in-the-life-of-a-ruby-object-railsconf-2021-1f9j</guid>
      <description>&lt;p&gt;‚ú® &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Talk:&lt;/strong&gt; 'A Day in the Life of a Ruby Object' by &lt;a href="https://twitter.com/JemmaIssroff"&gt;Jemma Issroff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: In this talk, we‚Äôll walk through the lifespan of a Ruby object from birth to the grave: from .new to having its slot reallocated. We‚Äôll discuss object creation, the Ruby object space, and an overview of garbage collection.&lt;/p&gt;

&lt;p&gt;‚ú® If you can't watch the talk, see Jemmas blogs in the &lt;a href="#read-more"&gt;read more section&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Impression&lt;/strong&gt;: Jemma is a great teacher who has made this talk beginner-friendly by explaining key concepts and providing great visuals. She's funny and smart, which makes the talk not overwhelming. This is what I'm all for: dense tech talks, especially by women technologists. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminology"&gt;Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#object"&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incremental-garbage-collection-tri-color-mark-and-sweep-algorithm"&gt;Incremental Garbage Collection: Tri-Color Mark and Sweep Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generational-garbage-collection"&gt;Generational Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compaction"&gt;Compaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;great opening anecdote: Jemma created 40,000,000,000 objects (which would be 40GB) on a computer that had only 16GB free space and the task was completed with no problem thanks to the gift of üéÅ garbage collection üéÅ

&lt;ul&gt;
&lt;li&gt;this was possible because we didn't ask Ruby to remember these objects (we were not referring to them) so Ruby followed a full object lifecycle&lt;/li&gt;
&lt;li&gt;we could see that the objects were created and then bulldozed by running &lt;code&gt;GC.stat(:count)&lt;/code&gt; (GC -&amp;gt; Garbage Collector)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operating System Heap&lt;/strong&gt;: most of a machine's memory, which includes Ruby Heap&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ruby Heap&lt;/strong&gt;: place in the machine's memory where our Ruby objects live and die

&lt;ul&gt;
&lt;li&gt;it sometimes references Operating System Heap, it can sometimes change its size&lt;/li&gt;
&lt;li&gt;it's made of memory objects called pages (when the Ruby Heap is asking for more space, it asks in increments of pages)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Page&lt;/strong&gt;: a unit in Ruby Heap

&lt;ul&gt;
&lt;li&gt;each page has a header with some info and about 409 slots (each slot is 40 byte in size), which is exactly where we store the objects&lt;/li&gt;
&lt;li&gt;some slots have rvalues, which are Ruby's internal representations of an object&lt;/li&gt;
&lt;li&gt;in some cases, the value of an object is too long for the rvalue to hold and in that case, the rvalue will point to an external memory address in the Operating&lt;/li&gt;
&lt;li&gt;in some cases rvalues contain pointers to other rvalues&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Root RVALUE&lt;/strong&gt;: values that the program will always know about that are vital to the running of the program&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;#&amp;lt;Object:0x00007fd1c69b8058&amp;gt;&lt;/code&gt; - the sequence of characters after "Object:" stands for the memory address; we can't access this object because we are not saving it to a variable so it's cleaned up&lt;/li&gt;
&lt;li&gt;sometimes the size of the Ruby Heap is not representing the memory consumption of your program because of the external pointers (the boundary in case of strings is 23 and 24 characters); where the object is stored influences the processing time&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#incremental-garbage-collection-tricolor-mark-and-sweep-algorithm"&gt;
  &lt;/a&gt;
  Incremental Garbage Collection: Tri-Color Mark and Sweep Algorithm
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;a really cool algo that Ruby uses in GC to determine which rvalues can have their slots reallocated (meaning, they are not important to the running of our program) &amp;lt;- &lt;em&gt;Jemma's presentation visualizes this process in a wonderful way and maybe these next  points won't be of much help without the visual&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;it's tri-color (white, black, grey) and not bi-color because of "stop the world"

&lt;ul&gt;
&lt;li&gt;Ruby pauses the execution of our programs to do garbage collection and it could get lengthy in bigger programs&lt;/li&gt;
&lt;li&gt;the grey allows us to stop the garbage collection (not to look at some rvalues) to allow our programs to run&lt;/li&gt;
&lt;li&gt;so, Ruby really uses "incremental Garbage Collection", which are just short intervals of GC when it picks up where we left off&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#generational-garbage-collection"&gt;
  &lt;/a&gt;
  Generational Garbage Collection
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;weak generational hypothesis"&lt;/strong&gt;: "Most objects die young" ü™¶&lt;/li&gt;
&lt;li&gt;we can manually trigger Garbage Collection by &lt;code&gt;GC.start&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;it takes an optional parameter of &lt;code&gt;full_mark: false&lt;/code&gt;, which determines if it's going to look for every object and in this case, it will only look at the young objects &amp;lt;- "Minor Garbage Collection"&lt;/li&gt;
&lt;li&gt;to look for all the objects, &lt;code&gt;full_mark: true&lt;/code&gt;  &amp;lt;- "Major Garbage Collection"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Major GC runs when the Minor GC hasn't freed up enough space&lt;/li&gt;
&lt;li&gt;If you want to see all the jobs that GC has done, you can run &lt;code&gt;GC.stat&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#compaction"&gt;
  &lt;/a&gt;
  Compaction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;rvlues are fragmented, they are not batched up together but instead spread across pages&lt;/li&gt;
&lt;li&gt;an algorithm pulls them all together into one page to take up less space&lt;/li&gt;
&lt;li&gt;because of that, the memory address may change, as visible below:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt; &lt;span class="n"&gt;obj_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Object:0x00007fd1c69b8058&amp;gt; &lt;/span&gt;

&lt;span class="n"&gt;obj_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="no"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Object:0x00007fd1c69c9060&amp;gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1_000_000_000.times {Object.new}&lt;/code&gt; -&amp;gt; 40GB, because one object in Ruby is &lt;code&gt;40 bytes&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jemma.dev/blog/gc-internal"&gt;Ruby Garbage Collection Deep Dive: GC::INTERNAL_CONSTANTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jemma.dev/blog/gc-generational"&gt;Ruby Garbage Collection Deep Dive: Generational Garbage Collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
    </item>
  </channel>
</rss>
