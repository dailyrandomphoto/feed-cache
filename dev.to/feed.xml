<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Performance Testing with k6 - 02 - Multiple Tasks</title>
      <author>Hari Bhandari</author>
      <pubDate>Wed, 05 May 2021 09:35:22 +0000</pubDate>
      <link>https://dev.to/jankaritech/performance-testing-with-k6-02-multiple-tasks-2im1</link>
      <guid>https://dev.to/jankaritech/performance-testing-with-k6-02-multiple-tasks-2im1</guid>
      <description>&lt;p&gt;In the first part of this series we learnt about creating a very basic k6 test. In this tutorial we will create some more realistic and interesting tests.&lt;br&gt;
 For that we better have a real App to test. For simplicity and because I'm familiar with it I've chosen &lt;a href="https://owncloud.com/"&gt;ownCloud&lt;/a&gt;, a file hosting and sharing &lt;br&gt;
 solution similar to Dropbox.&lt;/p&gt;

&lt;p&gt;The easiest way to get a test ownCloud instance up and running is to use docker.&lt;/p&gt;

&lt;p&gt;Just run: &lt;code&gt;docker run -p 8080:8080 --name owncloud owncloud/server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This magic &lt;code&gt;docker run&lt;/code&gt; command should give you a fresh ownCloud installation that can be reached at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is one user pre-setup called &lt;code&gt;admin&lt;/code&gt; with the super-secure password &lt;code&gt;admin&lt;/code&gt;. You can login into the UI and upload files, create new users, share files and folders, etc.&lt;br&gt;
After having played a bit with ownCloud itself, let's get back to k6.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-creating-file"&gt;
  &lt;/a&gt;
  Test Creating file
&lt;/h3&gt;

&lt;p&gt;Create a file (&lt;code&gt;script.js&lt;/code&gt;) and add the following contents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import http from 'k6/http'
import encoding from 'k6/encoding'
import { check } from 'k6'
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.0.0/index.js'

export let options = {
  iterations: 100,
  vus: 10
}

export default function() {
  const fileName = `${uuidv4()}.txt`
  const url = `http://localhost:8080/remote.php/webdav/${fileName}`
  const body = 'some content'
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin'),
    'Content-Type': 'application/x-www-form-urlencoded'
  }

  const response = http.request('PUT', url, body, { headers: headers })
  check(response, {
    'status is 201': (r) =&amp;gt; r.status === 201 || 204
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Here, in the &lt;code&gt;options&lt;/code&gt; object we are providing &lt;code&gt;iterations: 100&lt;/code&gt; and &lt;code&gt;vus: 10&lt;/code&gt; i.e. 100 test runs will be divided among 10 vus. To specify how &lt;code&gt;iterations&lt;/code&gt; is divided among &lt;code&gt;vus&lt;/code&gt; we can provide &lt;code&gt;executor&lt;/code&gt; options. For more details about executors check &lt;a href="https://k6.io/docs/using-k6/scenarios/executors/"&gt;https://k6.io/docs/using-k6/scenarios/executors/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are sending a &lt;code&gt;PUT&lt;/code&gt; request to the owncloud endpoint to create a file. For authorization header we are using user &lt;code&gt;admin&lt;/code&gt; with password &lt;code&gt;admin&lt;/code&gt; that we created. So, basically the &lt;code&gt;10 vus&lt;/code&gt; in options will be using &lt;code&gt;admin&lt;/code&gt; user authorization&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since it's not possible to create multiple files with the same name in owncloud, we are using &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;uuid&lt;/a&gt; in &lt;code&gt;fileName&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#test-deleting-file"&gt;
  &lt;/a&gt;
  Test deleting file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import http from 'k6/http'
import encoding from 'k6/encoding'
import { check } from 'k6'
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.0.0/index.js'

export let options = {
  iterations: 100,
  vus: 10
}

const createFile = url =&amp;gt; {
  const body = 'some content'
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin'),
    'Content-Type': 'application/x-www-form-urlencoded'
  }

  const response = http.request('PUT', url, body, { headers: headers })
  check(response, {
    'status is 201': (r) =&amp;gt; r.status === 201 || 204
  })
}

const deleteFile = (url) =&amp;gt; {
  const headers = {
    'Authorization': 'Basic ' + encoding.b64encode('admin:admin')
  }
  const response = http.request('DELETE', url, undefined, { headers: headers })
  check(response, {
    'status is 204': (r) =&amp;gt; r.status === 204
  })
}

export default function() {
  const fileName = `${uuidv4()}.txt`
  const url = `http://localhost:8080/remote.php/webdav/${fileName}`
  createFile(url)
  deleteFile(url)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are adding code to delete a file. Also, I have separated the logic for file creation and deletion into two separate functions &lt;code&gt;createFile&lt;/code&gt; and &lt;code&gt;deleteFile&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settings-stages"&gt;
  &lt;/a&gt;
  Settings Stages
&lt;/h3&gt;

&lt;p&gt;We can ramp up/down the VU level during the test using &lt;code&gt;stages&lt;/code&gt;  The &lt;code&gt;options.stages&lt;/code&gt; property allows you to configure ramping behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
export let options = {
  stages: [
    { duration: '30s', target: 20 },
    { duration: '1m30s', target: 10 },
    { duration: '20s', target: 0 }
  ]
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;First Stage(30s duration): Initially at the start will have 1 VU and then k6 will linearly ramp up from 1VU to 20VUs during the span of 30 seconds.&lt;/li&gt;
&lt;li&gt;Second Stage(1m30s duration): At the start of this stage we will have 20Vus from the first stage, but it will linearly ramp down to 10Vus at the end of the duration of this stage.&lt;/li&gt;
&lt;li&gt;Third Stage(20s duration): During this stage 10Vus from the second stage will linearly ramp down to zero at the end of 20 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if we run the test using &lt;code&gt;k6 run script.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqAS3EV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34328907/116341872-6baf0d00-a801-11eb-97a4-340fbeb165ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqAS3EV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34328907/116341872-6baf0d00-a801-11eb-97a4-340fbeb165ee.png" alt="Screenshot from 2021-04-28 09-08-56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in above screenshot our test runs for a total duration of &lt;code&gt;2m20s&lt;/code&gt;(30s + 1m30s + 20s), while &lt;code&gt;vus&lt;/code&gt; &lt;code&gt;max&lt;/code&gt; is &lt;code&gt;20&lt;/code&gt; (end of the first stage) and it's &lt;code&gt;min&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; which happens at the beginning of the first stage.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>List of tools for code review engineers</title>
      <author>Gustavo Silva</author>
      <pubDate>Wed, 05 May 2021 09:28:40 +0000</pubDate>
      <link>https://dev.to/codacy/list-of-tools-for-code-review-engineers-2jjo</link>
      <guid>https://dev.to/codacy/list-of-tools-for-code-review-engineers-2jjo</guid>
      <description>&lt;h1&gt;
  &lt;a href="#list-of-tools-for-code-review-engineers"&gt;
  &lt;/a&gt;
  List of tools for code review engineers
&lt;/h1&gt;

&lt;p&gt;If you perform code reviews at your company we hope that this list of tools adds value to your GitHub workflow.&lt;br&gt;
We created this &lt;a href="https://github.com/codacy/tools-for-code-review-engineers"&gt;list on GitHub&lt;/a&gt; recently and we'll periodically keep adding more tools.&lt;br&gt;
Feel free to contribute your suggestions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://gitpod.io/"&gt;Gitpod&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gitpod is an open-source Kubernetes application for automated and ready-to-code development environments that blends in your existing workflow. It enables you to describe your dev environment as code and start instant and fresh development environments for each new task directly from your browser.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://pullreminders.com/"&gt;Pull Reminders&lt;/a&gt; (from Pull Panda)&lt;/td&gt;
&lt;td&gt;Review and merge pull requests faster with Slack reminders and notifications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://pullpanda.com/assigner"&gt;Pull Assigner&lt;/a&gt; (from Pull Panda)&lt;/td&gt;
&lt;td&gt;Pull Assigner assigns code reviews to make your process more balanced and efficient: 1) Organize reviewers into groups using GitHub Teams 2) Assign pull requests to teams or automate it with CODEOWNERS 3) Pull Assigner auto-assigns one or more members of the team as reviewers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.gitify.io/"&gt;Gitify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gitify is all about making your life easier. Sitting on your menu bar, it informs you of any GitHub notifications without being annoying and of course without adverts. It just gets the job done. Works with GitHub and GitHub Enterprise. You can even connect multiple accounts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://steamclock.com/quests/"&gt;Quests&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Quests is similar to Gitify but with one important difference: Quest also supports GitLab.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://devhubapp.com/"&gt;DevHub&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Create columns for the repositories and people that matter to you; Receive Desktop Push Notifications; Manage Notifications, Issues, Pull Requests &amp;amp; Activities; Bookmark things for later.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.whitesourcesoftware.com/free-developer-tools/bolt"&gt;Bolt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Designed to close the gap between code development and security, Bolt helps GitHub developers create more secure products. It detects and alerts you of vulnerable open source components in your repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://imgbot.net/"&gt;Imgbot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Imgbot is a friendly robot that optimizes your images and saves you time by leveraging the power of pull requests.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>github</category>
      <category>tooling</category>
      <category>codereview</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Beginner Python Project (9) - Insta Spam Bot </title>
      <author>lary mak</author>
      <pubDate>Wed, 05 May 2021 09:28:02 +0000</pubDate>
      <link>https://dev.to/larymak/beginner-python-project-9-insta-spam-bot-2aj7</link>
      <guid>https://dev.to/larymak/beginner-python-project-9-insta-spam-bot-2aj7</guid>
      <description>&lt;p&gt;Am pretty sure that all of us at some point have wanted in one way or the other to get back our friends for something they did to us, right? &lt;br&gt;
Now if that is the case how would it be to send that person lots of messages to his account, that sounds great. In this part 9 of the &lt;a href="https://dev.to/larymak/series/12034"&gt;Python Projects for Beginners&lt;/a&gt; we will be creating a spam bot for that purpose.&lt;br&gt;&lt;br&gt;
We are going to use python and pyautogui to write the code, by the way, it's only going to take 5 lines of code.&lt;br&gt;&lt;br&gt;
You can also watch the video to code along:&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=yb2icRAvzBE"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shkD_rKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt-embed.herokuapp.com/embed%3Fv%3Dyb2icRAvzBE" alt=""&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;You can also check the Source code &lt;a href="https://github.com/larymak/Python-project-Scripts/tree/main/InstaSpamBot"&gt;HERE&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Like my work: &lt;br&gt;
&lt;a href="https://ko-fi.com/V7R03ZL69"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKanlt08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;br&gt;
Also check out my other Python Beginner Projects: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/larymak/beginner-python-project-4-youtube-video-downloader-4gpj"&gt;Youtube Video Downloader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/larymak/beginner-python-projects-part-1-5h1d"&gt;WhatsApp SpamBot&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Distributed tracing made simple</title>
      <author>André Eriksson</author>
      <pubDate>Wed, 05 May 2021 09:23:03 +0000</pubDate>
      <link>https://dev.to/encore/distributed-tracing-made-simple-1k1f</link>
      <guid>https://dev.to/encore/distributed-tracing-made-simple-1k1f</guid>
      <description>&lt;p&gt;&lt;strong&gt;Everything's on fire. That much is clear. But what's the root cause? Nobody's got a clue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we build distributed systems we're used to fumbling in the dark, desperately searching for the problem. Sometimes it's due to not having enough data. But paradoxically it's often due to having too much data.&lt;/p&gt;

&lt;p&gt;The real challenge lies in &lt;em&gt;making sense of it all&lt;/em&gt;. Unfortunately, general-purpose observability tools often have no idea how your application works. The end result is that distributed tracing, an incredibly powerful idea, largely under-delivers and is mostly useful for tracking down performance issues. That's good, but it could be &lt;em&gt;so much better&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-tracing-normally-works"&gt;
  &lt;/a&gt;
  How tracing (normally) works
&lt;/h2&gt;

&lt;p&gt;Tracing builds on a few pretty simple concepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spans&lt;/strong&gt; are the operations we track, with a start and an end, and references between them. They're things like a running request, or a database query. Spans can reference each other, for example to communicate that one request made an API call which results in another request. In this way we can build up a tree (or in practice a directed acyclic graph, a "DAG") of all spans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ba66Cp7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-data-model.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ba66Cp7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-data-model.png" alt="Tracing data model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each span contains &lt;strong&gt;tags&lt;/strong&gt;, which are key-value pairs, and &lt;strong&gt;events&lt;/strong&gt; which are timestamped things that happened within the span, such as emitting log messages.&lt;/p&gt;

&lt;p&gt;Not too bad so far, right? The devil's in the details. Because this data model is so generic, it's difficult to make sense of exactly what a span represents. Is it an API call? Is it a database query? They don't know, so in practice they render everything as one long list of spans. Not too helpful.&lt;/p&gt;

&lt;p&gt;The other challenge is in the instrumentation itself. In order to build up this DAG of spans, we need to pass along IDs to tie everything together. This data must be carefully threaded through our whole application. How to do that in practice differs from language to language, but setting it all up is quite a nuisance and if you miss some place you'll silently get lower quality data.&lt;/p&gt;

&lt;p&gt;In practice it ends up being lots of error-prone, boilerplate-y code. And the end result is less useful than we would like. So we figured, since Encore is all about deeply understanding how your application works using static analysis, let's try to build a better distributed tracing solution that leverages that understanding. We wanted to offer much better insights, and do it in a way that works out of the box without having to do a thing. A tall order, but we believe we've succeeded.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-tracing-works-with-encore"&gt;
  &lt;/a&gt;
  How tracing works with Encore
&lt;/h2&gt;

&lt;p&gt;The way you write &lt;a href="https://github.com/encoredev/encore"&gt;Encore applications&lt;/a&gt; has been carefully designed to facilitate static analysis. When you do, Encore can easily understand, among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The services and APIs you have defined, and their precise request/response schemas&lt;/li&gt;
&lt;li&gt;Precisely when and where you make an API call to another service, output structured log messages, execute database queries, and more&lt;/li&gt;
&lt;li&gt;What infrastructure each service requires to run&lt;/li&gt;
&lt;li&gt;Your database(s) schemas&lt;/li&gt;
&lt;li&gt;And lots more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using nothing but static code analysis we build up a detailed graph of your application as a distributed system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwx6Rwin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/app-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwx6Rwin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/app-graph.png" alt="Distributed Tracing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, when Encore compiles your application, it queries this graph to automatically add instrumentation in the right places. Instead of having to manually propagate trace IDs, Encore comes with a slightly modified Go runtime that automatically propagates trace information for you. And since it understands exactly what every operation &lt;em&gt;is&lt;/em&gt;, and not just a generic "span", Encore can add incredibly rich information that is unique to each type of event. Among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database queries, transactions, commits/rollbacks&lt;/li&gt;
&lt;li&gt;API calls, complete with input/output data&lt;/li&gt;
&lt;li&gt;Outgoing HTTP requests, along with precise timings for things like DNS resolution, TLS handshakes, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also break things down further. Encore captures goroutine timings, allowing you to see at a glance when an API call runs multiple things in parallel. Including exactly what each goroutine did: database queries, API calls, log messages, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MkkxUrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-goroutines.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MkkxUrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-goroutines.png" alt="Tracing goroutines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stack-traces"&gt;
  &lt;/a&gt;
  Stack traces
&lt;/h2&gt;

&lt;p&gt;Finally, Encore now captures &lt;em&gt;complete stack traces&lt;/em&gt; for everything. But wait, I hear you say, won't that be incredibly slow? Nope.&lt;/p&gt;

&lt;p&gt;Encore only collects the program counter for each stack frame, and then uses delta encoding and varint encoding. Then when it comes to viewing a trace, we map the program counters back to the files, lines, and function names using the program's symbol table stored in the binary, that we conveniently kept around from when we did our original static analysis pass.&lt;/p&gt;

&lt;p&gt;The end result is collecting a stack trace in as little as 300ns, and each stack frame often takes 1-2 bytes to encode. This remarkable result is only possible by the tight integration between Encore and the Go runtime. It's fast enough that we can capture stack traces for pretty much &lt;em&gt;everything&lt;/em&gt;. Database queries, API calls, log messages, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNBN6enU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-stacks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNBN6enU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-stacks.png" alt="Stack traces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-sense-of-it-all"&gt;
  &lt;/a&gt;
  Making sense of it all
&lt;/h2&gt;

&lt;p&gt;Encore is all about enabling simplicity through understanding your application, and we wanted the tracing experience to reflect that. So instead of doing all this instrumentation by hand, and presenting a trace as a long list of spans, we wanted it to "just work" with no additional effort on your part, and with a UI that reflects the structure of your app.&lt;/p&gt;

&lt;p&gt;Stack traces are great and all, but when you're building a distributed system they're often insufficient to get a complete picture of what's going on. That's what's so beautiful about our approach: the stack traces are themselves embedded in the distributed trace data.&lt;/p&gt;

&lt;p&gt;In the end, the traces are much richer in information and at the same time faster to collect. And by understanding exactly what each span represents, we can visualize traces in a much more understandable way. And the stack traces we capture? We can correlate them across the whole system, so you can understand the exact code path across all your services that led to a particular event.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---VqxzLfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VqxzLfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-ui.png" alt="Stack traces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracing-everywhere"&gt;
  &lt;/a&gt;
  Tracing Everywhere
&lt;/h2&gt;

&lt;p&gt;The final piece of the puzzle was the realization that such a powerful experience is useful for many more things than just performance analysis. That's why we made it available &lt;em&gt;everywhere&lt;/em&gt;, and perhaps most critically, for local development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gH3nI8O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gH3nI8O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encore.dev/assets/blog/tracing-list.png" alt="Local tracing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That way, the next time you're building a new feature, and you find a bug, you can immediately open up the trace view and see exactly where the problem is. Same goes for production, your test environment, and for all your Preview Environments that Encore automatically spins up for each Pull Request you open. And that time when everything was on fire and you couldn't figure out why? It sure would be nice to immediately pinpoint where the problem was.&lt;/p&gt;

&lt;p&gt;Why, you ask? Because it's about time we developers got better tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-play-around-this-stuffs-all-open-source"&gt;
  &lt;/a&gt;
  Want to play around? This stuff's all open source.
&lt;/h2&gt;

&lt;p&gt;You'll go from zero to a running backend in the cloud in less than 5 minutes. With the world's most advanced tracing integration, fully open source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://encore.dev/docs/intro/speedrun"&gt;Try it now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>tracing</category>
      <category>backend</category>
      <category>api</category>
    </item>
    <item>
      <title>Web Browser Anatomy</title>
      <author>Valerii Udodov</author>
      <pubDate>Wed, 05 May 2021 09:00:35 +0000</pubDate>
      <link>https://dev.to/vudodov/web-browser-anatomy-5eik</link>
      <guid>https://dev.to/vudodov/web-browser-anatomy-5eik</guid>
      <description>&lt;p&gt;Web Browser is a big and sophisticated application, built from multiple components. It obligated to satisfy different boring standards, to facilitate developers with stable contracts. You might know these contracts as HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;Any valid code or markup will be recognized and processed by one of the browser modules. The browser glues together all its modules with the Browser Object Model (BOM) API, aka &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;Web API&lt;/a&gt;. This is something that empowers JavaScript to operate on HTML and CSS. We will get back to it in more detail later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uK0MaKjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7j929vsc42e4dlb2rjn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uK0MaKjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7j929vsc42e4dlb2rjn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good example of Web API is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt; or its predecessor the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest&lt;/a&gt;, both are used to communicate with a remote server over HTTP. Yet another useful tool from Web API toolbox is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API"&gt;File System API&lt;/a&gt;, allowing communication with the underlying file system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-browser-engine"&gt;
  &lt;/a&gt;
  The Browser Engine
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rendering"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h3&gt;

&lt;p&gt;Let's slightly touch the browser rendering process to get ourselves familiar with the main actors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFBmG9No--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mklwiueebfgism82g0m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFBmG9No--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mklwiueebfgism82g0m8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the browser receives HTTP Response with HTML file, it'll try to break it down into a &lt;em&gt;Document Object Model&lt;/em&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;DOM&lt;/a&gt;) Tree, download if necessary CSS and break it into &lt;em&gt;CSS Object Model&lt;/em&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;CSSOM&lt;/a&gt;) Tree.&lt;/p&gt;

&lt;p&gt;After receiving following index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Val likes potatoes"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/css/example.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I like &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;potatoes&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And download referenced example.css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an intermediate step browser will produce these two trees 🌳🌳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeFe0MBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kpzzso9c1ryfhw41v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeFe0MBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kpzzso9c1ryfhw41v3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After it is done, it'll try to merge those trees and finalize results in another tree, known as a &lt;em&gt;Render-Tree&lt;/em&gt;. This tree represents all nodes needed to be rendered, basically everything that have to be shown on the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5t7Xm3Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k013wf956hrk2n51vp8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5t7Xm3Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k013wf956hrk2n51vp8f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last two steps in the rendering process are &lt;em&gt;Layout&lt;/em&gt; and &lt;em&gt;Paint&lt;/em&gt;. &lt;em&gt;Layout&lt;/em&gt; computes the exact position and size of each object, calculates the geometry based on the &lt;em&gt;Render-Tree&lt;/em&gt;. Ultimately &lt;em&gt;Paint&lt;/em&gt; step receives the &lt;em&gt;Final Render-Tree&lt;/em&gt; and renders the pixels to the screen.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Web API&lt;/em&gt;, we spoke about before, provide a mechanism for &lt;em&gt;DOM&lt;/em&gt; and &lt;em&gt;CSSOM&lt;/em&gt; manipulation. Which reflects on a render-tree. Hence what you see on the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Browser Engine&lt;/em&gt; provides an API for interaction and state-mutation.&lt;br&gt;&lt;br&gt;
It is important to note, that these APIs controlled and implemented by the browser. They might be accessed and consumed through the JavaScript code. However, nor JavaScript neither JavaScript Engine has any direct relation to it.&lt;/p&gt;

&lt;p&gt;There's no generic browser platform, each browser comes with its own Browser Engine, e.g. Trident for IE, &lt;a href="https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/"&gt;Blink&lt;/a&gt; for Chrome, &lt;a href="https://github.com/mozilla/gecko-dev"&gt;Gecko&lt;/a&gt; for Firefox, etc.&lt;br&gt;&lt;br&gt;
So next time you find a dodgy styling behavior in IE, you know whom to blame 😈.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-javascript-engine"&gt;
  &lt;/a&gt;
  The JavaScript Engine
&lt;/h2&gt;

&lt;p&gt;The JavaScript code you've written, have never ever been executed in its original shape... 🙀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-processing"&gt;
  &lt;/a&gt;
  Code processing
&lt;/h3&gt;

&lt;p&gt;As we know, the first thing that hits the browser is HTML file which presumably contains a JavaScript script reference. The Browser engine starts producing the forest of trees and at the same time &lt;a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element"&gt;&lt;em&gt;HTML Parser&lt;/em&gt; finds the&lt;/a&gt; &lt;code&gt;&amp;lt;script ...&amp;gt;&lt;/code&gt; tag. Eventually, code is downloaded (alternatively pulled from the cache or service worker) and passed to the JavaScript Engine as a UTF-16 byte stream. The entrance point to the JavaScript Engine is a &lt;em&gt;Byte-Stream Decoder&lt;/em&gt;.&lt;br&gt;&lt;br&gt;
&lt;code&gt;0076 0061 0072 0020 0078 0020 003d 0020 0033 003b&lt;/code&gt; stream got decoded and became something like &lt;code&gt;var x = 3;&lt;/code&gt;. Next decoder searches for familiar pieces, pre-defined tokens. &lt;code&gt;var&lt;/code&gt; is &lt;a href="https://www-archive.mozilla.org/js/language/js20-1999-02-18/tokens"&gt;one of the tokens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now is a time for another tree 🌳. &lt;em&gt;Parser&lt;/em&gt; and &lt;em&gt;Pre-Parser&lt;/em&gt; take all the tokens from the &lt;em&gt;Byte-Stream Decoder&lt;/em&gt;, analyze them and produces &lt;em&gt;Abstract Syntax Tree&lt;/em&gt; (AST). &lt;em&gt;The Parser&lt;/em&gt; has a higher priority, it determines and processes the hot path, which is needed immediately to make the page work, &lt;em&gt;Pre-Parser&lt;/em&gt; is processing rest, including behavior that will be triggered by user interactions or with some other events.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkbcnzYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptmz3a1d5omqioaf0zwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkbcnzYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptmz3a1d5omqioaf0zwz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far we have a tree representation of our code (AST), which we need to compile into machine code. The process of compilation and optimization takes place in &lt;em&gt;the compiler pipeline&lt;/em&gt;. The pipeline highly depends on the JavaScript engine, thus absolutely different for all browsers.&lt;br&gt;&lt;br&gt;
The most straight-forward approach to produce machine code is to produce an intermediate byte-code first with a help of the interpreter, this code can be observed and analyzed during execution, optimized and re-compiled several times into the machine code. Machine code is processor-specific, therefore optimization is done with respect to processor type and architecture.&lt;/p&gt;

&lt;p&gt;Machine code is kina final product and ends processing cycle, however, through page lifetime, the optimization process can force re-compilation to produce a more efficient version of it.&lt;/p&gt;

&lt;p&gt;Whenever JavaScript standard, aka ECMA Script, comes up with a new version or things like WebAssembly, asm.js appear, the browser engine compiling pipeline is the place where the most of work is have to be done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#v8-compilation-pipeline"&gt;
  &lt;/a&gt;
  V8 Compilation Pipeline
&lt;/h3&gt;

&lt;p&gt;V8 is Google's JavaScript engine, it is fast and powerful. V8 usage is not limited to the Chrome browser. NodeJS is using it as a part of its runtime. And recently released Microsoft Edge replaced its own implementation in favor of Google V8. And it is not only replacement Microsoft Edge did, but it also found a place for Google's Browser Engine Blink.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unBR2IAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n86b1b2j6sh6l8q1z4lo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unBR2IAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n86b1b2j6sh6l8q1z4lo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's zoom in into the compilation pipeline and identify main components.&lt;/p&gt;

&lt;p&gt;The compilation pipeline consists of two main pieces working side by side together and constantly interfering with each other. The interpreter called &lt;a href="https://docs.google.com/document/d/11T2CRex9hXxoJwbYqVQ32yIPMh0uouUZLdyrtmMoL44/edit?usp=sharing"&gt;Ignition&lt;/a&gt; and &lt;a href="https://docs.google.com/document/d/1l-oZOW3uU4kSAHccaMuUMl_RCwuQC526s0hcNVeAM1E/edit"&gt;TurboFan&lt;/a&gt; JIT compiler.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The&lt;/em&gt; &lt;em&gt;TurboFan&lt;/em&gt; is optimizing compiler built on top of the &lt;a href="https://darksi.de/d.sea-of-nodes/"&gt;"Sea of nodes" graph concept&lt;/a&gt;. It came as a replacement for long-living &lt;em&gt;Crankshaft&lt;/em&gt;. &lt;em&gt;The Crankshaft&lt;/em&gt; was good, but didn't scale well to fully support modern JavaScript (&lt;code&gt;try-catch&lt;/code&gt;, &lt;code&gt;for-of&lt;/code&gt;, &lt;code&gt;async/await,&lt;/code&gt; etc). It was defaulting to de-optimization (performance cliffs, de-optimization loops). And it was tightly coupled to &lt;em&gt;the Full-Codegen&lt;/em&gt;. Check out diagrams below 👇. &lt;em&gt;The Full-Codegen&lt;/em&gt; was also a compiler (yup, two compilers working together), comparatively fast and simple. It kicked in first and produced machine code directly, so the browser had something to execute while &lt;em&gt;Crankshaft&lt;/em&gt; was doing its job.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The&lt;/em&gt; &lt;em&gt;Ignition&lt;/em&gt; interpreter that eventually squeezed out the &lt;em&gt;Full-Codegen&lt;/em&gt; compiler and reduced memory usage, parsing overhead and provided the ability to significantly reduce pipeline complexity. &lt;em&gt;Ignition&lt;/em&gt; is  compiling to a concise byte-code, rather than machine code, since it is more concise it allows more eager compilation and it makes byte-code a source of truth for optimization and de-optimization&lt;/p&gt;

&lt;p&gt;Today V8 Compilation Pipeline looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U95oJxnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ow0ld6j3042wkfxj6yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U95oJxnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ow0ld6j3042wkfxj6yq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the final product we have as of 2017. Through the years JavaScript was quickly evolving, becoming more complicated and feature-rich language, and so did V8.&lt;/p&gt;

&lt;p&gt;In its first iteration back in 2008 it looked like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T6yuiDoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3h7o0n42qbvf2pmv62m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6yuiDoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3h7o0n42qbvf2pmv62m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After major re-factoring in 2010, with the introduction of mentioned previously &lt;em&gt;Crankshaft&lt;/em&gt; and &lt;em&gt;Full-Codegen&lt;/em&gt;, the compile pipeline looked as following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6M5LdJxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqbq93uepnr5ojpsaszl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6M5LdJxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqbq93uepnr5ojpsaszl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time was passing, JavaScript became more complicated and demanding, so did the compiler pipeline. Throwback to 2014.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xf1F_k9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0oj2ez1mcjophzaalx60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xf1F_k9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0oj2ez1mcjophzaalx60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, in 2016 V8 Code Compilation Pipeline became this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjtWulcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0aks78zvnii289txvc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjtWulcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0aks78zvnii289txvc2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tccej5np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8osqtlvxzvdksv4y8vp3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tccej5np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8osqtlvxzvdksv4y8vp3.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2017 V8 team threw away the Baseline layer and Crankshaft. And sculpt the pipeline how we know it today (2020).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTW3J8JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak7gg51x0zaurj47rt5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTW3J8JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak7gg51x0zaurj47rt5g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runtime"&gt;
  &lt;/a&gt;
  Runtime
&lt;/h3&gt;

&lt;p&gt;Now let's focus on the code execution runtime concept. This concept is shared across all browsers with JavaScript support and any other JavaScript Runtime environment, such as NodeJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRtfxGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kx6h76vzd5a3eqkz21m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRtfxGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kx6h76vzd5a3eqkz21m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The execution of code in JavaScript is limited to a single thread. The execution sequence and memory allocation is controlled by the JavaScript Engine. Objects are allocated in large memory regions called &lt;em&gt;Heap&lt;/em&gt;, execution sequence controlled by &lt;em&gt;Stack of Frames&lt;/em&gt; or just &lt;em&gt;Stack&lt;/em&gt;. &lt;em&gt;The Stack&lt;/em&gt; is directly correlated with the single-threaded nature of JavaScript (one stack === one thread). By the way, whatever you see in the exception stack trace, comes directly from the Stack of Frames. Stack has a limit and you can easily exploit touch it with infinite recursion, just saying 🙃.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJr2RA_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e0w25dbci4whj29z3nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJr2RA_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e0w25dbci4whj29z3nl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thread means blocking behavior, for that reason JavaScript has a concurrency model built-in, callbacks, promises, asynchronous operations, etc.&lt;br&gt;&lt;br&gt;
The implementation is quite different from Java, C++ or C#. It is built on top of the infinite message loop, &lt;em&gt;the Event Loop&lt;/em&gt;. Each message consists of the event and the callback function. &lt;em&gt;The Event Loop&lt;/em&gt; polls oldest messages from &lt;em&gt;the Queue&lt;/em&gt;. Message becomes a Frame and Frame transitioned to &lt;em&gt;the Stack&lt;/em&gt;. This process occurs only when &lt;em&gt;Stack&lt;/em&gt; is empty. &lt;em&gt;The Event Loop&lt;/em&gt; constantly monitors &lt;em&gt;the&lt;/em&gt; &lt;em&gt;Stack&lt;/em&gt; for that reason.&lt;br&gt;&lt;br&gt;
Whenever an event happens and there is an event handler associated with the event, the message is added to &lt;em&gt;the Queue&lt;/em&gt;. The association is stored in the &lt;em&gt;Event Table&lt;/em&gt;, which also pushes messages into &lt;em&gt;the&lt;/em&gt; &lt;em&gt;Queue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Do you remember WebAPI? WebAPI exposes a large set of pre-defined hooks for callback function registration, such as &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;. DOM interactions, Fetch API, Geo-location API and many more, all these APIs provide event-to-handler mappings compatible with &lt;em&gt;Event Table&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;"Don't try this at home" section again😈. With the help of the Queue and WebAPI, we can make infinite recursion work on the level above avoiding stack overflow exploit. All we need is to re-route functions to the Queue, instead of Stack. Wrap your recursive function call with &lt;code&gt;setInterval(..., 0);&lt;/code&gt; and there you have it. The message goes to the Queue, instead of Stack. And it will be executed until the browser will terminate the process&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnBr-z47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5pkmbqcn4allm9w38zo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnBr-z47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5pkmbqcn4allm9w38zo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;All modern web browsers are different, they might or might not have different Browser and JavaScript engines. They have different internals and provide a slightly different experience. In order to stay compatible, they have to provide consistent behavior and implement all required standards.&lt;/p&gt;

&lt;p&gt;A web browser is an extremely sophisticated evolving orchestra of modules, each and every module functioning independently. They have different responsibilities and peruse unrelated aims. However, as an experienced conductor, the web browser makes all the parts work together.&lt;/p&gt;

&lt;p&gt;Knowing environment internals is useful, having a good understanding will help to improve and boost performance in the critical parts of the front-end application and overall rendering process. More optimized code or markup ➡️less work for browser ➡️faster and more responsive web site.&lt;/p&gt;

</description>
      <category>browser</category>
      <category>browserengine</category>
      <category>javascript</category>
      <category>javascriptengine</category>
    </item>
    <item>
      <title>Solution: Jump Game II</title>
      <author>seanpgallivan</author>
      <pubDate>Wed, 05 May 2021 08:56:53 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-jump-game-ii-cn3</link>
      <guid>https://dev.to/seanpgallivan/solution-jump-game-ii-cn3</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/jump-game-ii/discuss/1192396"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-45-medium-jump-game-ii"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/jump-game-ii/"&gt;Leetcode Problem #45 (&lt;em&gt;Medium&lt;/em&gt;): Jump Game II&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of non-negative integers &lt;code&gt;nums&lt;/code&gt;, you are initially positioned at the first index of the array.&lt;/p&gt;

&lt;p&gt;Each element in the array represents your maximum jump length at that position.&lt;/p&gt;

&lt;p&gt;Your goal is to reach the last index in the minimum number of jumps.&lt;/p&gt;

&lt;p&gt;You can assume that you can always reach the last index.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [2,3,1,1,4]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [2,3,0,1,4]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= nums[i] &amp;lt;= 10^5&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Since each element of our input array (&lt;strong&gt;N&lt;/strong&gt;) represents the maximum jump length and not the definite jump length, that means we can visit any index between the current index (&lt;strong&gt;i&lt;/strong&gt;) and &lt;strong&gt;i + N[i]&lt;/strong&gt;. Stretching that to its logical conclusion, we can safely iterate through &lt;strong&gt;N&lt;/strong&gt; while keeping track of the furthest index reachable (&lt;strong&gt;next&lt;/strong&gt;) at any given moment (&lt;strong&gt;next = max(next, i + N[i])&lt;/strong&gt;). We'll know we've found our solution once &lt;strong&gt;next&lt;/strong&gt; reaches or passes the last index (&lt;strong&gt;next &amp;gt;= N.length - 1&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The difficulty then lies in keeping track of how many jumps it takes to reach that point. We can't simply count the number of times we update &lt;strong&gt;next&lt;/strong&gt;, as we may see that happen more than once while still in the current jump's range. In fact, we can't be sure of the best next jump until we reach the end of the current jump's range.&lt;/p&gt;

&lt;p&gt;So in addition to &lt;strong&gt;next&lt;/strong&gt;, we'll also need to keep track of the current jump's endpoint (&lt;strong&gt;curr&lt;/strong&gt;) as well as the number of jumps taken so far (&lt;strong&gt;ans&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Since we'll want to &lt;strong&gt;return ans&lt;/strong&gt; at the earliest possibility, we should base it on &lt;strong&gt;next&lt;/strong&gt;, as noted earlier. With careful initial definitions for &lt;strong&gt;curr&lt;/strong&gt; and &lt;strong&gt;next&lt;/strong&gt;, we can start our iteration at &lt;strong&gt;i = 0&lt;/strong&gt; and &lt;strong&gt;ans = 0&lt;/strong&gt; without the need for edge case return expressions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where N is the length of N&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Cmplexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences in the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;jump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Nlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Nlen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;
            &lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;jump&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;jump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Introducing Code Modes</title>
      <author>Siddharth</author>
      <pubDate>Wed, 05 May 2021 08:54:56 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/introducing-code-modes-13h7</link>
      <guid>https://dev.to/siddharthshyniben/introducing-code-modes-13h7</guid>
      <description>&lt;p&gt;Lately, I've been finding myself showing/hiding folders/files again and again depending on what I am doing. To make this easier, I created a VSCode extension called Code Modes.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SiddharthShyniben"&gt;
        SiddharthShyniben
      &lt;/a&gt; / &lt;a href="https://github.com/SiddharthShyniben/code-modes"&gt;
        code-modes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Change your file tree based on what mode you are in!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/SiddharthShyniben/code-modes/graphs/contributors"&gt;&lt;img src="https://camo.githubusercontent.com/b7a372711ded9efccd30802869c6f2090325305ae61da578241ce4c04344380d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f5369646468617274685368796e6962656e2f636f64652d6d6f6465732e7376673f7374796c653d666f722d7468652d6261646765" alt="Contributors"&gt;&lt;/a&gt;
&lt;a href="https://github.com/SiddharthShyniben/code-modes/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/6f98c96cfafa992fa2e75b9028b7583bd528a135c56e77b73925b2edc8bbe0e6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f5369646468617274685368796e6962656e2f636f64652d6d6f6465732e7376673f7374796c653d666f722d7468652d6261646765" alt="Forks"&gt;&lt;/a&gt;
&lt;a href="https://github.com/SiddharthShyniben/code-modes/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/77e6ceb434ae155c8a0287e6d1a406cf6c0de1a45b514917edae054e785f9970/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f5369646468617274685368796e6962656e2f636f64652d6d6f6465732e7376673f7374796c653d666f722d7468652d6261646765" alt="Stargazers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/SiddharthShyniben/code-modes/issues"&gt;&lt;img src="https://camo.githubusercontent.com/7b0fcf904d6c2ea80cd116ae5c17c6d40e75a2c26fdeb9b527428c3eb85c54c2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f5369646468617274685368796e6962656e2f636f64652d6d6f6465732e7376673f7374796c653d666f722d7468652d6261646765" alt="Issues"&gt;&lt;/a&gt;
&lt;a href="https://github.com/SiddharthShyniben/code-modes/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/77c6b12fbc8ae5fa983c0df345379cdf70a67a4797f79d561c26b0154e0f3a7e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f5369646468617274685368796e6962656e2f636f64652d6d6f6465732e7376673f7374796c653d666f722d7468652d6261646765" alt="GPL 3.0 License"&gt;&lt;/a&gt;
&lt;a href="https://github.com/SiddharthShyniben/code-modes/"&gt;&lt;img src="https://camo.githubusercontent.com/7d036fe907e0a64a242b9fcfedeff63dc9d397e16d335fafb479b777aa69d14a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f5369646468617274685368796e6962656e2f636f64652d6d6f6465733f736f72743d73656d766572267374796c653d666f722d7468652d6261646765" alt="Latest Version"&gt;&lt;/a&gt;
&lt;a href="https://saythanks.io/to/siddharth.muscat%40gmail.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4964bfa83392183cba098ee9f9586d059b28a1dca00858d3ad40b2046b85ee23/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7361792d7468616e6b732d6666363962342e7376673f7374796c653d666f722d7468652d6261646765" alt="Say thanks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/SiddharthShyniben/code-modes"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv1VUyKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/images/logo.png" alt="(ツ)" height="80"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Code Modes (for VSCode)&lt;/h3&gt;
  &lt;p&gt;
    Change your file tree based on what mode you are in
    &lt;br&gt;
    
    &lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#documentation"&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    
    
    
    &lt;a href="https://github.com/SiddharthShyniben/code-modes/issues/new?assignees=SiddharthShyniben&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=%5BBug%5D%3A+Describe+your+bug"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/SiddharthShyniben/code-modes/issues/new?assignees=SiddharthShyniben&amp;amp;labels=enhancement&amp;amp;template=feature_request.md&amp;amp;title=%5BFeature%5D%3A+Describe+your+feature"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;



  &lt;h2&gt;
Table of Contents&lt;/h2&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#about-the-project"&gt;About The Project&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#getting-started"&gt;Getting Started&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://raw.githubusercontent.com/SiddharthShyniben/code-modes/main/#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;


&lt;h2&gt;
About The Project&lt;/h2&gt;

&lt;p&gt;Ever found yourself going to the settings to show/hide folders/files again and again depending on whether you are Git debugger man or Configuration man? This extension does exactly that, hiding/showing folders/files depending on what you are doing.&lt;/p&gt;

&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;To install the extension follow these simple steps.&lt;/p&gt;
&lt;h3&gt;
Prerequisites&lt;/h3&gt;
&lt;p&gt;You need &lt;a href="https://code.visualstudio.com/" rel="nofollow"&gt;VSCode&lt;/a&gt; installed.&lt;/p&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;strong&gt;extension&lt;/strong&gt; sidebar panel in VSCode&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;code-modes&lt;/code&gt;. (Be sure to find the right one!)&lt;/li&gt;
&lt;li&gt;Click install to install it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone this repo&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd&lt;/code&gt; (&lt;a href="https://github.com/SiddharthShyniben/fcd"&gt;&lt;code&gt;fcd&lt;/code&gt;&lt;/a&gt;?) into it&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;code --install-extension code-modes-1.0.0.vsix&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;This extension exposes a command and a status bar item&lt;/p&gt;
&lt;p&gt;Use the command &lt;code&gt;Code Modes: Change mode&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SiddharthShyniben/code-modes"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Basically, there are a bunch of modes, which you can choose. When you are in a certain mode, certain files get excluded from the file tree. &lt;/p&gt;

&lt;p&gt;For now, the extension is very basic (I made it in 1 day and I had the most amazing feeling when it worked bug-free) and there is no way to add custom modes, etc. &lt;/p&gt;

&lt;p&gt;If you have any suggestions for any modes, feel free to comment!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Different React Patterns for Enterprise Apps</title>
      <author>varunprashar5</author>
      <pubDate>Wed, 05 May 2021 08:51:46 +0000</pubDate>
      <link>https://dev.to/varunprashar5/different-react-patterns-for-enterprise-apps-2c7k</link>
      <guid>https://dev.to/varunprashar5/different-react-patterns-for-enterprise-apps-2c7k</guid>
      <description>&lt;p&gt;Are you a React Developer?&lt;/p&gt;

&lt;p&gt;If you want to Simplify large React applications by separating your component logic, state and display properties to make React components more flexible then do explore more about different patterns &amp;amp; approaches you should follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Compound Components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render Props&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provider Pattern&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Combining Pattern&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component Injection&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is your strategy, approach and thought process in creating such enterprise React Apps?&lt;/p&gt;

&lt;p&gt;Let me know if you want to learn more about any pattern or topic in React.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Junior developer !== super unskilled wannabe-developer noob</title>
      <author>Lea Rosema (she/her)</author>
      <pubDate>Wed, 05 May 2021 08:12:05 +0000</pubDate>
      <link>https://dev.to/terabaud/junior-developer-super-unskilled-wannabe-developer-noob-3b5h</link>
      <guid>https://dev.to/terabaud/junior-developer-super-unskilled-wannabe-developer-noob-3b5h</guid>
      <description>&lt;p&gt;Some teams have a certain bias about junior developers because they think they are all super unskilled wannabe-developer noobs. &lt;/p&gt;

&lt;p&gt;Yeah we all know these memes and jokes about junior vs senior developers and this can be funny up to a certain point. But these jokes and memes actually get toxic when teams refuse to get juniors on board. &lt;/p&gt;

&lt;p&gt;Juniors need the opportunity to show and grow their skills. &lt;/p&gt;

&lt;p&gt;There might also even be a situation a junior has a more advanced expertise in certain fields, in such a way that seniors could even learn from the junior. If your team  categorically denies to have juniors in the team, your team might miss innovation and is maybe less diverse.&lt;/p&gt;

&lt;p&gt;Also, some juniors have multiple years of experience but they are denied a promotion and the reason for getting denied a promotion can often be very subjective.&lt;/p&gt;

&lt;p&gt;So, please look at the person's skillset, not at their level when adding new team members to your team. Get more juniors into your team :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to be good at Code Reviews</title>
      <author>Pavel Polívka</author>
      <pubDate>Wed, 05 May 2021 07:27:37 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/how-to-be-good-at-code-reviews-2lpl</link>
      <guid>https://dev.to/pavel_polivka/how-to-be-good-at-code-reviews-2lpl</guid>
      <description>&lt;p&gt;In my time as a developer, I have given hundreds of code reviews. It's something I learned to enjoy very much as it gives me others' perspectives on our codebase. Most days I learn something new from it. In this article, I want to go over few tips on how to be good at them and especially how to enjoy them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-pipeline"&gt;
  &lt;/a&gt;
  Good pipeline
&lt;/h2&gt;

&lt;p&gt;Most teams have some kind of code-style rules and recommendations on how to uniform their codebase. Whatever you do, do not force code reviewers to check whenever the pull request complies with those rules. There are tools to do that look at eslint, SonarQube. These tools should be run as part of your PR pipeline.&lt;/p&gt;

&lt;p&gt;SonarQube is one of those tools that will improve code reviews for everyone in your team. It can find style issues but can do so much more. With their code analysis, they can find the most common mistakes you can do in your code. You never closed your resource? Sonar will let you know. Personally, I never do code review before Sonar finished its job. &lt;/p&gt;

&lt;p&gt;You need to have a concrete process that will run every time somebody creates a PR or pushes new changes in there. Steps can look something like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compile the code&lt;/li&gt;
&lt;li&gt;Run the tests&lt;/li&gt;
&lt;li&gt;Run linting&lt;/li&gt;
&lt;li&gt;Run SonarQube&lt;/li&gt;
&lt;li&gt;Do the manual review process&lt;/li&gt;
&lt;li&gt;Merge to the main codebase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flyover"&gt;
  &lt;/a&gt;
  Flyover
&lt;/h2&gt;

&lt;p&gt;Like first thing, in my review, I will do a quick overview of all the changed files. This I usually do inside the pull request UI. I am focusing on few things during this stage.&lt;/p&gt;

&lt;p&gt;First is the code readability. How is the reading experience? Is it apparent what is being done? Good code should be able to convey its purpose at first glance. Then I am trying to figure out if this change is what is required by the corresponding change request. I will read through the ticket and try to match all requirements there in the pull request. &lt;/p&gt;

&lt;p&gt;During this stage, I do not dive deep into the implementation details. I identify those for later stages. &lt;/p&gt;

&lt;p&gt;Possible points conveyed at this stage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change is not very readable&lt;/li&gt;
&lt;li&gt;change does not cover the requirements, or change request ticket was not changed as requirements changed&lt;/li&gt;
&lt;li&gt;missing tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#do-deep"&gt;
  &lt;/a&gt;
  Do deep
&lt;/h2&gt;

&lt;p&gt;After the brief code flyover, I have a list of changed files I need to go deep into. I usually do this in IDE so that I can see connections between files better, but for most changes, it's ok to do it in the web UI of the pull request. &lt;/p&gt;

&lt;p&gt;I start by asking the question of how would I solve the problem and go from there. Is there a piece of code in our codebase that does something similar (or the same)? Is there a library (that we currently use) that can be used for this? If there is a library that we do not use currently is it worth adding to solve this issue? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-review"&gt;
  &lt;/a&gt;
  Test review
&lt;/h2&gt;

&lt;p&gt;Do not forget to review the tests. Are all cases valid? Does those tests have the possibility to find something? Are assertions readable? Are tests even present? &lt;/p&gt;

&lt;p&gt;Do not be afraid to fight back to add more tests if you as a reviewer feel like there is a possibility to add them to improve the codebase. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-nice-and-educate"&gt;
  &lt;/a&gt;
  Be nice and educate
&lt;/h2&gt;

&lt;p&gt;Whatever you do, do not be arrogant, snarky, and sound like a know-it-all. If the proposed solution is valid, but you would do it differently you may say so but also approve the request. You may leave education comments, but too much can of those can be harmful. Consider what feels important. Do not argue about little things, people are different and have different opinions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approval"&gt;
  &lt;/a&gt;
  Approval
&lt;/h2&gt;

&lt;p&gt;Be quick on approval, not perfect is ok. &lt;/p&gt;

&lt;p&gt;This is the golden rule you should go by.&lt;/p&gt;




&lt;p&gt;For more tips like this, you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>java</category>
    </item>
    <item>
      <title>Age Calculator | Javascript Project With Source Code</title>
      <author>Innocent Coder</author>
      <pubDate>Wed, 05 May 2021 07:22:26 +0000</pubDate>
      <link>https://dev.to/innocentcoder/age-calculator-javascript-project-with-source-code-52a0</link>
      <guid>https://dev.to/innocentcoder/age-calculator-javascript-project-with-source-code-52a0</guid>
      <description>&lt;p&gt;JavaScript offers some built-in date and time functions, which helps to calculate the age from the date (Date of Birth). Using these JavaScript methods, you can easily find the age of anyone. For this, we require a date input from the user and the current system date.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IEuYA09-fGo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;➼ Download Files and Images Link: &lt;a href="https://www.websitemakers.xyz/2021/05/age-calculator-javascript-project-with.html"&gt;https://www.websitemakers.xyz/2021/05/age-calculator-javascript-project-with.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="inputs-wrapper"&amp;gt;
            &amp;lt;input type="date" id="date-input"&amp;gt;
            &amp;lt;button onclick="ageCalculate()"&amp;gt;Calculate&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="outputs-wrapper"&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;span id="years"&amp;gt;
                    -
                &amp;lt;/span&amp;gt;
                &amp;lt;p&amp;gt;
                    Years
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;span id="months"&amp;gt;
                    -
                &amp;lt;/span&amp;gt;
                &amp;lt;p&amp;gt;
                    Months
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;span id="days"&amp;gt;
                    -
                &amp;lt;/span&amp;gt;
                &amp;lt;p&amp;gt;
                    Days
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CSS Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*,
*:before,
*:after{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
body{
    background-color: #ff6666;
}
.container{
    width: 40%;
    min-width: 450px;
    position: absolute;
    transform: translate(-50%,-50%);
    left: 50%;
    top: 50%;
    padding: 50px 30px;
}
.container *{
    font-family: "Poppins",sans-serif;
    border: none;
    outline: none;
}
.inputs-wrapper{
    background-color: #080808;
    padding: 30px 25px;
    border-radius: 8px;
    box-shadow: 0 15px 20px rgba(0,0,0,0.3);
    margin-bottom: 50px;
}
input,
button{
    height: 50px;
    background-color: #ffffff;
    color: #080808;
    font-weight: 500;
    border-radius: 5px;
}
input{
    width: 60%;
    padding: 0 20px;
    font-size: 14px;
}
button{
    width: 30%;
    float: right;
}
.outputs-wrapper{
    width: 100%;
    display: flex;
    justify-content: space-between;
}
.outputs-wrapper div{
    height: 100px;
    width: 100px;
    background-color: #080808;
    border-radius: 5px;
    color: #ffffff;
    display: grid;
    place-items: center;
    padding: 20px 0;
    box-shadow: 0 15px 20px rgba(0,0,0,0.3);

}
span{
    font-size: 30px;
    font-weight: 500;
}
p{
    font-size: 14px;
    color: #707070;
    font-weight: 400;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const months = [31,28,31,30,31,30,31,31,30,31,30,31];

function ageCalculate(){
    let today = new Date();
    let inputDate = new Date(document.getElementById("date-input").value);
    let birthMonth,birthDate,birthYear;
    let birthDetails = {
        date:inputDate.getDate(),
        month:inputDate.getMonth()+1,
        year:inputDate.getFullYear()
    }
    let currentYear = today.getFullYear();
    let currentMonth = today.getMonth()+1;
    let currentDate = today.getDate();

    leapChecker(currentYear);

    if(
        birthDetails.year &amp;gt; currentYear ||
        ( birthDetails.month &amp;gt; currentMonth &amp;amp;&amp;amp; birthDetails.year == currentYear) || 
        (birthDetails.date &amp;gt; currentDate &amp;amp;&amp;amp; birthDetails.month == currentMonth &amp;amp;&amp;amp; birthDetails.year == currentYear)
    ){
        alert("Not Born Yet");
        displayResult("-","-","-");
        return;
    }

    birthYear = currentYear - birthDetails.year;

    if(currentMonth &amp;gt;= birthDetails.month){
        birthMonth = currentMonth - birthDetails.month;
    }
    else{
        birthYear--;
        birthMonth = 12 + currentMonth - birthDetails.month;
    }

    if(currentDate &amp;gt;= birthDetails.date){
        birthDate = currentDate - birthDetails.date;
    }
    else{
        birthMonth--;
        let days = months[currentMonth - 2];
        birthDate = days + currentDate - birthDetails.date;
        if(birthMonth &amp;lt; 0){
            birthMonth = 11;
            birthYear--;
        }
    }
    displayResult(birthDate,birthMonth,birthYear);
}

function displayResult(bDate,bMonth,bYear){
    document.getElementById("years").textContent = bYear;
    document.getElementById("months").textContent = bMonth;
    document.getElementById("days").textContent = bDate;
}

function leapChecker(year){
    if(year % 4 == 0 || (year % 100 == 0 &amp;amp;&amp;amp; year % 400 == 0)){
        months[1] = 29;
    }
    else{
        months[1] = 28;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/make-a-modern-registration-form-using-html-and-css-1ag4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Make A Modern Registration Form Using HTML And CSS&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ Apr 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Any Taylor swift fans here?</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Wed, 05 May 2021 07:14:02 +0000</pubDate>
      <link>https://dev.to/sidchaudhary04/any-taylor-swift-fans-here-4ndh</link>
      <guid>https://dev.to/sidchaudhary04/any-taylor-swift-fans-here-4ndh</guid>
      <description>&lt;p&gt;Just asking if any devs are Swifties.&lt;/p&gt;

&lt;p&gt;Reply with your favourite song!&lt;/p&gt;

</description>
      <category>taylorswift</category>
      <category>askdev</category>
    </item>
  </channel>
</rss>
