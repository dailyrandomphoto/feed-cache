<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MATLAB MONDAYSüí•- Crash Course part-1 </title>
      <author>Aatmaj</author>
      <pubDate>Mon, 28 Jun 2021 05:05:56 +0000</pubDate>
      <link>https://dev.to/aatmaj/matlab-mondays-crash-course-part-1-3o80</link>
      <guid>https://dev.to/aatmaj/matlab-mondays-crash-course-part-1-3o80</guid>
      <description>&lt;p&gt;Welcome one üß≠ Welcome all! ‚úåÔ∏è Today is the first MATLAB Monday, üëê and we will learn about what is MATLAB ‚öΩ and how are variables declared in it. ü•è&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is MATLAB?&lt;/strong&gt;- MATLAB stands for MATrix LABoratory. MATLAB is a scientific programming language.‚ú® It is mainly used for solving mathematical equations and data-visualization. Complicated systems can be better understood with this software. Speed and ease of writing are the salient features of MATLAB.&lt;br&gt;
Professor Cleve Moler designed MATLAB. He did so with an intention to reduce heavy FORTRAN coding. The aim of the language was making an engineer friendly syntax.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---3hy6hzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccd2tfo3drskbka1svmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3hy6hzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccd2tfo3drskbka1svmi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
MATLAB is used by students and engineers in many disciplines like Robotics, Astrology, Machine Learning, Image Processing and Biology. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MATLAB web browser&lt;/strong&gt; The MATLAB web browser let's us run MATLAB through the web. First, login (create a new account) using your university account. If you do not have a university account, you can use a free 30- day trial too!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hdj28K47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cc7d7t2q2synxnwuutp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hdj28K47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cc7d7t2q2synxnwuutp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The command prompt&lt;/strong&gt;&lt;br&gt;
MATLAB online contains the command prompt central to the page, where we can write our code. Similar to python, MATLAB let's us calculate numbers at the command prompt, and the answer is displayed in the command window. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x6gc0EbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40fipam8fjgg66h1eiy4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6gc0EbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40fipam8fjgg66h1eiy4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Adding a semicolon at the end of the statement prevents output from being displayed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SK6JAQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tqukdai7gi74n6s1auz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SK6JAQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tqukdai7gi74n6s1auz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similer to many languages, too small or too large values like the last one are displayed using scientific notation.&lt;/p&gt;

&lt;p&gt;MATLAB operators follow this order-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Parenthesis&lt;br&gt;
2) Exponentiation&lt;br&gt;
3) Product and Division&lt;br&gt;
4) Addition and Subtraction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So for complicated calculations, it is important to specify the brackets.&lt;/p&gt;

&lt;p&gt;The command prompt can be quit using the command "exit"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MATLAB VARIABLES&lt;/strong&gt;&lt;br&gt;
We can declare variables using the '=' sign, that is the assignment operator.&lt;br&gt;
The following are the rules for variable declaration in MATLAB are same as Python as below&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Variables must begin with a letter, are case sensitive, may contain only letters numbers or underscores&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The variables declared are located at the left bottom side of the page. (WORKSPACE) The values of the variables are also displayed along with their class. Note that MATLAB treats 'ans' as a variable too. So whenever operations are performed, the variable 'ans' is overridden.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eh17ZtI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jgrt0mzigicavtbg2il.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eh17ZtI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jgrt0mzigicavtbg2il.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;to be continued....üòè&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;üò™Yes, I know learning MATLAB might be a bit of boreüôÑ...But never mind, no pain no gainüí™üèª&lt;br&gt;
For any suggestions or doubts, please comment below üëá, and I will be happy to help üôÇ üéóÔ∏è Follow me for updates...&lt;br&gt;
Also, you can gmail me for any suggestion or help üôå&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/aatmajmhatre/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mtLmTxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linkedin-%25230077B5.svg%3F%26style%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="LinkedIn"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aatmaj.mhatre@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C75QF96b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gmail-D14836%3Fstyle%3Dfor-the-badge%26logo%3Dgmail%26logoColor%3Dwhite" alt="Gmail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye for now üñê&lt;br&gt;
Meet you all soonüëç&lt;/p&gt;

&lt;p&gt;‚ûï‚ûñ‚úñÔ∏è‚ûó&lt;/p&gt;

</description>
      <category>matlab</category>
    </item>
    <item>
      <title>10 Ways to Host Your React App For Free</title>
      <author>Nilanth</author>
      <pubDate>Mon, 28 Jun 2021 04:24:17 +0000</pubDate>
      <link>https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga</link>
      <guid>https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga</guid>
      <description>&lt;p&gt;Here are the 10 services that provide free hosting for your React App.&lt;/p&gt;

&lt;p&gt;React is the most popular library in JavaScript. Most of the developers are moving to react. The React community is growing rapidly. As there are more React Apps are developed.&lt;/p&gt;

&lt;p&gt;But the problem here is the cost of hosting the App. As the app users grow, we need to scale based on it and the cost to Increase! So here we can see the services that provide free hosting. Let‚Äôs Host.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-netlify"&gt;
  &lt;/a&gt;
  1. Netlify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Z1V4LE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7s36tm21r2y8uygpppi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Z1V4LE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7s36tm21r2y8uygpppi.png" alt="Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; is an all-in-one platform for automating modern web projects. It provides continuous deployment using GitHub, Bitbucket and Gitlab. React App can be deployed in 3 steps. It also provides a free automatic HTTPS. You can also add a custom domain. With Netlify Edge, Your React Apps are accessed to the client blazing fast.&lt;/p&gt;

&lt;p&gt;Other than deployment, Netlify also provides serverless functions, Forms, Analytics, CLI, API and more. Most of these features are provided for free with some limitations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-vercel"&gt;
  &lt;/a&gt;
  2. Vercel
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWt91eNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj7n8l7mxa3qkegjtozb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWt91eNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj7n8l7mxa3qkegjtozb.png" alt="Vercel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; creator of Next.js, A modern react Framework. You can deploy React App with Zero configuration in Vercel. It will boost the app performance with its global edge network.&lt;/p&gt;

&lt;p&gt;Vercel provides a preview link for Pull Request in Bitbucket, Github and GitLab to test the feature before deploying.&lt;/p&gt;

&lt;p&gt;Vercel also provides some starter templates to create a new App and deploy it. It Provides continuous deployment, Serverless functions, HTTPS and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-aws-s3"&gt;
  &lt;/a&gt;
  3. AWS S3
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RlmJigA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g0er6s6ukpkyiyxkmp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RlmJigA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g0er6s6ukpkyiyxkmp1.png" alt="AWS S3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Web Services is the world‚Äôs leading cloud service provider. It provides almost every cloud services, and some services are given only by AWS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/s3"&gt;S3&lt;/a&gt; is also one of the AWS services. S3 Bucket is known for storing static assets. The most common use of S3 is to save images. It also provides static site hosting.&lt;/p&gt;

&lt;p&gt;You just need to upload the React Build files to the bucket. Once Upload is completed. You can access the app using the bucket URL. You can also configure CloudFront to add a custom domain and HTTPS.&lt;/p&gt;

&lt;p&gt;AWS provides 12 months of free credits on the new account. You can use that free credits for using S3 and also other AWS services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-aws-amplify"&gt;
  &lt;/a&gt;
  4. AWS Amplify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qo0Q4FiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0hqmlrpbiuqusuh1ap4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qo0Q4FiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0hqmlrpbiuqusuh1ap4.png" alt="AWS Amplify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Web Services also provides another service called &lt;a href="https://aws.amazon.com/amplify/?nc=sn&amp;amp;loc=0"&gt;Amplify&lt;/a&gt; to host your React App. Amplify will build and host your React App with global CDN.&lt;/p&gt;

&lt;p&gt;Amplify can be integrated with Git services to make the continuous deployment. It also provides HTTPS, Custom Domain, Monitoring, Password Protection, Pull-Request previews and More.&lt;/p&gt;

&lt;p&gt;Amplify comes with 12 months free of cost. As it used Amazon CloudFront CDN, the Deployed Apps are faster and cached in nearby edge locations to serve very quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-microsoft-azure"&gt;
  &lt;/a&gt;
  5. Microsoft Azure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4b7cTkoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89sz5o85euri6x2cxjxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4b7cTkoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89sz5o85euri6x2cxjxa.png" alt="Microsoft Azure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft provides &lt;a href="https://azure.microsoft.com/en-us/"&gt;Azure&lt;/a&gt; Static Web Apps to host your React App. The hosted app is served from distributed points globally to provide better performance.&lt;/p&gt;

&lt;p&gt;Azure provides Free HTTPS, Custom Domains, Versioning, Git Integration and more.&lt;/p&gt;

&lt;p&gt;Azure has a free plan with these services. It provides continuous deployment using Git integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-github-pages"&gt;
  &lt;/a&gt;
  6. GitHub Pages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYCX93KC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rudygkxcjbauset4g9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYCX93KC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rudygkxcjbauset4g9b.png" alt="GitHub Pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is a service by GitHub, The largest and most advanced development platform in the world.&lt;/p&gt;

&lt;p&gt;You can directly host your React app from the GitHub repository. You just need to make your changes and push to make your React App live.&lt;/p&gt;

&lt;p&gt;GitHub Pages provide Free HTTPS and Custom Domain. You can configure the GitHub pages with some simple steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-google-cloud-storage"&gt;
  &lt;/a&gt;
  7. Google Cloud Storage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14KTnT9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6zlwyq8bb7h5hz4ov8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14KTnT9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6zlwyq8bb7h5hz4ov8h.png" alt="Google Cloud Storage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud provides &lt;a href="https://cloud.google.com/storage/docs/hosting-static-website?skip_cache=true"&gt;Cloud Storage Bucket&lt;/a&gt; to host static sites. All you need to create a bucket, upload the code and make it public. Now your React App is deployed.&lt;/p&gt;

&lt;p&gt;Cloud Storage Bucket does not provide HTTPS and custom domain. You can configure it with the HTTPS Load Balancing service.&lt;/p&gt;

&lt;p&gt;Cloud Storage Bucket has a Free Tier plan with monthly limits. Google also provides 300$ free credits for new Account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-render"&gt;
  &lt;/a&gt;
  8. Render
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4t9DTSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x2e9gjnmduseegxun0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4t9DTSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x2e9gjnmduseegxun0x.png" alt="Render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://render.com/"&gt;Render&lt;/a&gt; is a Cloud Service Provider, Provides services for both Static and Dynamic Site. You can host your React App with three simple steps.&lt;/p&gt;

&lt;p&gt;Render provides Free SSL, Global CDN, Custom Domain, Auto Deploy with Git Integration.&lt;/p&gt;

&lt;p&gt;Render provides a Free Plan to Host Static Site and Competitive Pricing for Other services too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-surge"&gt;
  &lt;/a&gt;
  9. Surge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUGETouv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zu668ndnsdk669nsfwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUGETouv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zu668ndnsdk669nsfwt.png" alt="Surge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://surge.sh/"&gt;Surge&lt;/a&gt; is a Static Website Hosting Platform. You can deploy using the surge CLI.&lt;/p&gt;

&lt;p&gt;Surge doesn‚Äôt provide any Web Console to host the Web Pages. You can host your React App from your CLI.&lt;/p&gt;

&lt;p&gt;You can host it with a few steps using the surge CLI. It provides Free SSL, Custom Domain Configuration. Hosting in surge might require some CLI skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-heroku"&gt;
  &lt;/a&gt;
  10. Heroku
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBShuZ5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc5vta4etgu48gsgmsun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBShuZ5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc5vta4etgu48gsgmsun.png" alt="Heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.heroku.com/home"&gt;Heroku&lt;/a&gt; is a container-based cloud Platform as a Service. Heroku provides mostly all cloud services like AWS. It has a Free Plan for most of the services.&lt;/p&gt;

&lt;p&gt;You can deploy your React App using Heroku Buildpack for create-react-app. Using Heroku CLI, You can deploy the React App with few commands. The Buildpack is used for Automatic Deployment and a built-in Bundler to make the deployment less complicated.&lt;/p&gt;

&lt;p&gt;Heroku provide free SSL, Custom Domain and Git Integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are some more free services like Firebase and CloudFlare Pages. I hope you have found this useful. Thank you for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>JavaScript Event Loop</title>
      <author>Subhasish Kundu</author>
      <pubDate>Mon, 28 Jun 2021 04:01:19 +0000</pubDate>
      <link>https://dev.to/thecuriouscoder/javascript-event-loop-51cc</link>
      <guid>https://dev.to/thecuriouscoder/javascript-event-loop-51cc</guid>
      <description>&lt;p&gt;Sometime back, I started learning about JavaScript and React JS internals. My goal is to understand the internals of JavaScript and frameworks. In my last article, I wrote about  &lt;a href="https://blog.thecuriouscoder.in/abstract-introduction-to-react-internals"&gt;ReactJS internals&lt;/a&gt;. To understand more about React Fiber, we need to understand some preliminary JavaScript concept implementation. In the next three posts, I will be explaining in detail the following three concepts&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript Event Loop&lt;/li&gt;
&lt;li&gt;requestAnimationFrame and rendering cycle&lt;/li&gt;
&lt;li&gt;requestIdleCallBack&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article, I will attempt to document my learning about Event Loop. This topic might be particularly interesting to people who want to learn how NodeJS and Deno internals work. The next two topics are interesting to me for understanding how React works internally (for code base understanding). So, let's dive deep.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-execution-environment"&gt;
  &lt;/a&gt;
  JavaScript Execution Environment
&lt;/h2&gt;

&lt;p&gt;JavaScript is a single-threaded language. It executes one method at a time. Following high-level components are integral to its execution environment -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Call Stack&lt;/li&gt;
&lt;li&gt;Job Queues&lt;/li&gt;
&lt;li&gt;Rendering Step&lt;/li&gt;
&lt;li&gt;Microtasks&lt;/li&gt;
&lt;li&gt;Event Loops&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: I have used runtime environment and execution environment interchangeably. At some points, I have used EcmaScript references. I am finding EcmaScript standards quite interesting. So, I thought to include those as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#call-stack"&gt;
  &lt;/a&gt;
  Call Stack
&lt;/h3&gt;

&lt;p&gt;Like other languages like C, C++, etc., JavaScript uses a &lt;a href="https://262.ecma-international.org/6.0/#sec-execution-contexts"&gt;Call Stack&lt;/a&gt; to execute methods. Whenever it decides to execute a method, it wraps the method in a stack frame and pushes the frame into the Call Stack. For any eventual sub-method calls, it keeps on pushing sub-methods into the stack (&lt;em&gt;LIFO&lt;/em&gt; order). Once a method is executed, the corresponding stack frame is popped. Call Stack is an integral part of JavaScript for synchronous programming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test1();
function test1() {
    console.log("Test 1 entry");
    test2();
    console.log("Test 1 exit");
}
function test2() {
    console.log("Test 2 entry");
    console.log("Test 2 exit")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the above script, the result is as same as predicted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Test 1 entry
Test 2 entry
Test 2 exit
Test 1 exit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, JavaScript supports asynchronous programming. We can use setTimeout to execute something in the future like the below example. We could use the following code snippet that might trigger an alert and console.log() after 10s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    test1();
    function test1() {
        console.log("Test 1 entry");
        setTimeout(test2, 10000);
        console.log("Test 1 exit");
    }
    function test2() {
        console.log("Test 2 entry");
        alert("Test 2 execution");
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected, the result is &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mr92Xx8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624265648320/3nph6r_jE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mr92Xx8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624265648320/3nph6r_jE.png" alt="Screenshot 2021-06-21 at 2.23.51 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, there was an alert as well. Following is the timeline of events&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzWCKfu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624266204462/mWCwELODd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzWCKfu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624266204462/mWCwELODd.png" alt="Screenshot 2021-06-21 at 2.30.37 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see the "Install Timer" at the bottom left. This is where the timer was installed to be fired after 10 seconds (10847ms). &lt;/p&gt;

&lt;p&gt;It seems some thread is running in the background. Hold on! Did I not mention JavaScript is single-threaded? Let's see what could happen if JavaScript is multi-threaded. Suppose, in our hypothetical model, for the above JavaScript code execution, we are allowed to spawn a new thread for executing a single setTimeout. So, for one thousand setTimeout calls, we have a thousand threads. Each thread might attempt to change DOM as well independently. Now, if DOM is a shared resource for all the threads, multiple threads are bound to create chaos reading it at the same time. We would have spent most of our time debugging race conditions rather than building rich applications üòõ. So, yes, JavaScript is single-threaded and it has served JavaScript and us well.&lt;/p&gt;

&lt;p&gt;How come JavaScript schedule setTimeout callback after 10s then if there is no thread? The answer is Job or Task Queue. I am using both names interchangeably.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#job-queue"&gt;
  &lt;/a&gt;
  Job Queue
&lt;/h3&gt;

&lt;p&gt;With Es6, the concept of  &lt;a href="https://262.ecma-international.org/6.0/#sec-jobs-and-job-queues"&gt;Job Queue&lt;/a&gt; has been introduced. All the asynchronous tasks such as Mouse click, setTimeouts, etc., are pushed into the Job Queue for execution. JavaScript engine picks up tasks one by one and executes them using Call Stack (&lt;em&gt;FIFO&lt;/em&gt; order).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-part-of-the-javascript-engine-picks-up-tasks-from-task-queue"&gt;
  &lt;/a&gt;
  What part of the JavaScript engine picks up tasks from Task Queue?
&lt;/h3&gt;

&lt;p&gt;The Event Loop. It runs in a loop throughout the life cycle of the app. It picks up tasks from the Task Queue and executes them with the help of Call Stack.&lt;/p&gt;

&lt;p&gt;Note: My guess is the browser might maintain different queues for different kinds of event handling such as button clicks, mouse clicks, setTimeout calls, etc. Each browser can have different prioritization for each queue. It is just my guess. I am looking for ways to confirm that. I might write about that in the future.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-does-the-event-loop-do-when-there-is-nothing-in-call-stack-and-task-queue"&gt;
  &lt;/a&gt;
  What does the Event Loop do when there is nothing in Call Stack and Task Queue?
&lt;/h4&gt;

&lt;p&gt;You guessed it right - it runs in a loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-event-loop-know-if-it-needs-to-execute-something-from-task-queue"&gt;
  &lt;/a&gt;
  How does the Event Loop know if it needs to execute something from Task Queue?
&lt;/h3&gt;

&lt;p&gt;The Browser engine can enqueue a task in the relevant queue. The Event Loop, in the next rotation, can dequeue the task and execute it.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-happens-if-we-encounter-an-infinite-loop"&gt;
  &lt;/a&gt;
  What happens if we encounter an infinite loop?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;body&amp;gt;
        &amp;lt;button id="demo"&amp;gt;Trigger Alert&amp;lt;/button&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("demo").addEventListener("click", () =&amp;gt; {
            console.log("Clicked");
            while(true);
            console.log("After loop is executed");
        });
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the button click will enqueue the above synchronous script in Task Queue. In the next rotation, the Event Loop starts executing the task. Now, our script is stuck with &lt;em&gt;infinite while loop&lt;/em&gt;. As a result, the Event Loop is stuck in the same position because of our infinite loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering-step"&gt;
  &lt;/a&gt;
  Rendering Step
&lt;/h3&gt;

&lt;p&gt;Let's look into another aspect of the JavaScript runtime environment - the Rendering Step. Let's take the following example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
        &amp;lt;p id="test_paragraph"&amp;gt; Test JS Hello&amp;lt;/p&amp;gt;

        &amp;lt;button onclick="changeParagraphColor()"&amp;gt;Trigger Alert&amp;lt;/button&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script&amp;gt;
        function changeParagraphColor() {
            document.getElementById("test_paragraph").style.background = "red";
            var top = 100, nested = 1000;
            for(var i=0; i&amp;lt;top; i++) {
                for(var j=0; j&amp;lt;nested; j++) {
                    console.log(i + ":" + j);
                }
            }
            console.log("Changing color");
            document.getElementById("test_paragraph").style.background = "blue";
        }
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the browser, we can see the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1e412rTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624807630595/sKsGkr4pB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1e412rTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624807630595/sKsGkr4pB.png" alt="Screenshot 2021-06-27 at 8.56.51 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, the background color of the paragraph is changed to blue after the execution of the loop. The red background never takes effect. If I remove line 21, I can see the red paragraph, but after the execution of the script (including the loop). I expected to see first a paragraph with red background and then a blue. But I only saw, blue background.&lt;/p&gt;

&lt;p&gt;Here, we are seeing the UI effect for the last line, but not the previous UI change. Why is that? That is because of the Rendering Step. The browser does not repaint the screen after the execution of each JavaScript code. It executes the above JavaScript code and collects all styling and UI changes. It applies final change (in this case line 21) in a single shot afterward, in the Rendering step. It is a step in the Event Loop that is executed independently. And initially, I thought the changes are happening so fast that my eyes could not catch them üò§. I will dive into the Rendering step in my next post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microtasks"&gt;
  &lt;/a&gt;
  Microtasks
&lt;/h3&gt;

&lt;p&gt;For now, I am associating Microtasks with JavaScript Promises. Promises are used to perform asynchronous operations in JavaScript. If you want to know more about Promises, visit this page for  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;more details&lt;/a&gt;. The tasks executed inside Promise are called &lt;em&gt;Microtasks&lt;/em&gt;. Following is an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;body&amp;gt;
        &amp;lt;button id="demo"&amp;gt;Trigger Alert&amp;lt;/button&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("demo").addEventListener("click", () =&amp;gt; {
            Promise.resolve().then(() =&amp;gt; console.log("Micro Task 1"));
            console.log("Task 1");
        });
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example will print the following output as expected. Microtask will be executed after all the synchronous tasks are executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Task 1
Micro Task 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look into another interesting example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;body&amp;gt;
        &amp;lt;button id="demo"&amp;gt;Trigger Alert&amp;lt;/button&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("demo").addEventListener("click", () =&amp;gt; {
            Promise.resolve().then(() =&amp;gt; console.log("Micro Task 1"));
            console.log("Task 1");
        });
        document.getElementById("demo").addEventListener("click", () =&amp;gt; {
            Promise.resolve().then(() =&amp;gt; console.log("Micro Task 2"));
            console.log("Task 2");
        });
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try guessing the output (take 5 seconds). If you guess the following output, it's perfectly alright! It is natural, intuitive, and we are human.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Task 1
Task 2
Micro Task 1
Micro Task 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the answer is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Task 1
Micro Task 1
Task 2
Micro Task 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you thought of the above answer, Congratulations! üòÄ üëç&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-microtasks-are-executed"&gt;
  &lt;/a&gt;
  How microtasks are executed?
&lt;/h4&gt;

&lt;p&gt;Micro tasks are executed in two situations&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At the end of the synchronous script execution.&lt;/li&gt;
&lt;li&gt;If the Call Stack is empty.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For handling microtasks, JavaScript maintains another queue - Microtask Queue. For each call to Promise, an entry for each microtask is pushed into Microtask Queue. So, for the above example, the following will be the order&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Task 1&lt;/em&gt; got pushed into Call Stack for synchronous execution. Also, &lt;em&gt;Microtask 1&lt;/em&gt; is enqueued in the Microtask Queue.&lt;/li&gt;
&lt;li&gt;After execution of &lt;em&gt;Task 1&lt;/em&gt;, the Call Stack gets empty. So, it's the microtask time (condition 2 above)! If there were any other synchronous calls, &lt;em&gt;Microtask 1&lt;/em&gt; would have been picked up after execution of those.&lt;/li&gt;
&lt;li&gt;Microtask Queue is dequeued and the &lt;em&gt;Microtask 1&lt;/em&gt; gets executed.&lt;/li&gt;
&lt;li&gt;After step 3, the second handler gets called by Event Loop. The same thing repeats for the second microtask.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-are-event-loops"&gt;
  &lt;/a&gt;
  What are Event Loops?
&lt;/h2&gt;

&lt;p&gt;I know you might be thinking what am I talking about for this long. Nowadays, all browsers create a separate event loop for each browser tab. Collectively these are called &lt;strong&gt;Event Loops&lt;/strong&gt;. At first, Chrome started doing this. Others followed soon. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#impact-of-event-loops"&gt;
  &lt;/a&gt;
  Impact of Event Loops
&lt;/h3&gt;

&lt;p&gt;I have seen one unresponsive page causing the entire browser to get stuck in Firefox's earlier version. I have never seen this issue with Chrome. Chrome has a separate JavaScript environment for each tab from early versions I believe. The browser might require more resources to do this. But I think, it is worth the better and richer experience.üòå&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interesting-use-case-opening-a-page-in-a-separate-new-tab"&gt;
  &lt;/a&gt;
  Interesting Use case: Opening a page in a separate new tab
&lt;/h3&gt;

&lt;p&gt;Let's assume, for the below three examples, &lt;em&gt;target_page&lt;/em&gt; contains an infinite loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="target_page" target="_blank"&amp;gt;New Target Page&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the earlier version browser, for the above scenario, the &lt;em&gt;target_page&lt;/em&gt; and &lt;em&gt;current page&lt;/em&gt; used to share the same Event Loop for all the JavaScript tasks. As a result, if the &lt;em&gt;target_page&lt;/em&gt; is containing an infinite loop, both the &lt;em&gt;current&lt;/em&gt; and &lt;em&gt;target_page&lt;/em&gt; got stuck in an infinite loop as well. Both the pages used to become unresponsive. The workaround proposed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="target_page" target="_blank" rel="noopener"&amp;gt;New Tab&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon setting "rel=noopener", each page gets separate environment. It was introduced to reduce the impact of untrusted pages containing malicious JavaScript, which might affect the current page. Now, all the browsers have started implementing this behavior by default ( &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/noopener"&gt;relevant MDN doc&lt;/a&gt;). I have tested with the latest Chrome. It is implemented there.&lt;/p&gt;

&lt;p&gt;Also, for this example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="target_page"&amp;gt;New Tab&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open &lt;em&gt;target_page&lt;/em&gt; in a new tab (by right click on the mouse), both the pages share the same JavaScript runtime environment. So, if &lt;em&gt;target_page&lt;/em&gt; has an infinite loop, both the pages get stuck.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The Event Loop is an interesting and critical component for understanding any JavaScript run time environments. I am building up my knowledge on React JS and Node JS internals upon this. If you have enjoyed the article, do give me thumbs up. In case of any questions, let me know in the comments.&lt;/p&gt;

&lt;p&gt;Happy learning! üòÄ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-for-further-reading"&gt;
  &lt;/a&gt;
  References for further reading
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://262.ecma-international.org/6.0/"&gt;EcmaScript Standard&lt;/a&gt; - EcmaScript standard has documentation around how each component such as Job Queues, Call Stack should be implemented. I find these details particularly interesting.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tiny Habits for career growth as a developer</title>
      <author>Rishabh Singh ‚ö°</author>
      <pubDate>Mon, 28 Jun 2021 03:40:10 +0000</pubDate>
      <link>https://dev.to/basecampxd/tiny-habits-for-career-growth-as-a-developer-3g62</link>
      <guid>https://dev.to/basecampxd/tiny-habits-for-career-growth-as-a-developer-3g62</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-3-most-important-aspects-in-the-career-growth-of-a-developer-are"&gt;
  &lt;/a&gt;
  The 3 most important aspects in the career growth of a developer are:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Developing your skills üíª&lt;/li&gt;
&lt;li&gt;Establishing online presence üåê&lt;/li&gt;
&lt;li&gt;Networking üí¨&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's pick them up individually and learn what they mean &amp;amp; how we can build some easy-to-follow habits around them to stay on top of things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-developing-your-skills"&gt;
  &lt;/a&gt;
  1. Developing your skills üíª
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOtb6MeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqb7wi33ch2f33ve7wpz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOtb6MeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqb7wi33ch2f33ve7wpz.jpg" alt="avel-chuklanov-DUmFLtMeAbQ-unsplash"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The first step in your dev career is to start learning &amp;amp; developing your skills. There are many ways you can do this, try what works best for you! This involves building projects, practicing Leetcode, contributing to open source, etc. At the end of the day, everything comes down to finding what you're good at and focusing more on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggested-habits"&gt;
  &lt;/a&gt;
  Suggested Habits:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Build one small project every month&lt;/li&gt;
&lt;li&gt;Solve at least 3 Leetcode problems every week&lt;/li&gt;
&lt;li&gt;Solve one good first issue every week&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-establishing-online-presence"&gt;
  &lt;/a&gt;
  2. Establishing online presence üåê
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hovnhe3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n60wlv2e91uc94t3iu0f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hovnhe3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n60wlv2e91uc94t3iu0f.jpg" alt="austin-distel-tLZhFRLj6nY-unsplash"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Having an online presence on platforms like Twitter &amp;amp; LinkedIn is very vital for your career. You need to get noticed to attract opportunities. Good thing about these platforms is that it's easy to grow here despite of having a small following initially. However, you still need to give it some time by showing up on regular basis. I recommend devoting at least 30 minutes every day to building your online presence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggested-habits"&gt;
  &lt;/a&gt;
  Suggested Habits:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Post at least once a day on Twitter&lt;/li&gt;
&lt;li&gt;Post at least once a week on LinkedIn&lt;/li&gt;
&lt;li&gt;Engage with the other like-minded people for 15 mins per day&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-networking"&gt;
  &lt;/a&gt;
  3. Networking üí¨
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IL5kZl5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9tiuqkon4q64v6dq70a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IL5kZl5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9tiuqkon4q64v6dq70a.jpg" alt="smartworks-coworking-cW4lLTavU80-unsplash"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You might be wondering what's the difference between building online presence vs networking? ü§î Well, networking is all about directly engaging with people you're interested in through DMs, etc. Days of randomly applying to hundreds of jobs and hoping to get selected in at least one are over now. Traditional hiring system is slowly fading away, this is the time you need to show how innovative and creative you are to directly attract recruiters to yourself. Networking plays a key role here to help you connect with potential employers and remain in their vision. This is also great for getting referrals and off campus opportunities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggested-habits"&gt;
  &lt;/a&gt;
  Suggested Habits:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Reach out to companies &amp;amp; startups and appreciate them that you like their products &amp;amp; how enthusiast you are about the work they are doing.&lt;/li&gt;
&lt;li&gt;DM to one of the persons you admire &amp;amp; ask for advice meanwhile showing your passion.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thats-it-for-today"&gt;
  &lt;/a&gt;
  That's it for today!
&lt;/h2&gt;

&lt;p&gt;This write up was inspired by Ken Rogers' article on "How to Use Small and Sustainable Habits to Get Your First Dev Job".&lt;/p&gt;

&lt;p&gt;üìñ Read here: &lt;a href="https://www.freecodecamp.org/news/how-to-use-small-sustainable-habits-to-get-your-first-dev-job/"&gt;https://www.freecodecamp.org/news/how-to-use-small-sustainable-habits-to-get-your-first-dev-job/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you learnt something new today. Please leave a like, a lovely comment or feedback &amp;amp; also consider following me as I regularly post useful &amp;amp; informative articles to help you become a better programmer. &lt;/p&gt;

&lt;p&gt;If you like my work, please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;If you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion here &amp;amp; I will try my best to help you :D!&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Getting React.js Certified in TEN MINUTES! (Beginners Guide)</title>
      <author>The Jared Wilcurt</author>
      <pubDate>Mon, 28 Jun 2021 03:35:28 +0000</pubDate>
      <link>https://dev.to/thejaredwilcurt/getting-react-js-certified-in-ten-minutes-beginners-guide-43l2</link>
      <guid>https://dev.to/thejaredwilcurt/getting-react-js-certified-in-ten-minutes-beginners-guide-43l2</guid>
      <description>&lt;p&gt;Welcome! This tutorial is considered to be &lt;strong&gt;an order of magnitude easier&lt;/strong&gt; than other React tutorials, because we focus on a &lt;em&gt;slightly different&lt;/em&gt; version of React that is &lt;strong&gt;much&lt;/strong&gt; easier than the normal version. But the knowledge is completely transferable (and way more fun)!&lt;/p&gt;

&lt;p&gt;Instead of using the normal version of React we're using a version called "Vue". But don't worry! You're not getting a watered down version by using it. It's actually &lt;em&gt;more&lt;/em&gt; powerful, faster, smaller, and is beloved by React's creators and the React community. And most of all &lt;strong&gt;10 times easier!&lt;/strong&gt; Wow! Why isn't everyone using it? They are! Most people are moving from React to this newer, better version. So let's learn it, have some fun, and get certified as "A Real React Developer‚Ñ¢", by the governing body of this tutorial. You can even put that on your r√©sum√©!&lt;/p&gt;

&lt;p&gt;The first step for learning React is to install Vue.js. Normally React can only make WebApps, but the Vue version can also be used for websites.&lt;/p&gt;

&lt;p&gt;So you need to pick your starting point!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-create-a-website"&gt;
  &lt;/a&gt;
  I want to create a Website!
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Add a CDN link to Vue to your page:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script src="https://unpkg.com/vue@next"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-create-a-webapp"&gt;
  &lt;/a&gt;
  I want to create a Webapp!
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install Node.js &amp;amp; npm

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org"&gt;https://nodejs.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In your command prompt or terminal, run:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install -g @vue/cli &amp;amp;&amp;amp; vue ui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#learning-to-code-react"&gt;
  &lt;/a&gt;
  Learning to code React
&lt;/h2&gt;

&lt;p&gt;Follow this official "Getting started guide" for the Vue.js version of React:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/guide/introduction.html#getting-started"&gt;https://v3.vuejs.org/guide/introduction.html#getting-started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you learn, check off these important concepts:&lt;/p&gt;

&lt;p&gt;‚òê &lt;code&gt;{{ doubleCurlies }}&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; values&lt;br&gt;
‚òê &lt;code&gt;v-bind:href&lt;/code&gt; (or &lt;code&gt;:href&lt;/code&gt;) attribute binding&lt;br&gt;
‚òê &lt;code&gt;v-model&lt;/code&gt; for two-way data-binding&lt;br&gt;
‚òê &lt;code&gt;v-if&lt;/code&gt;, &lt;code&gt;v-else&lt;/code&gt;, and &lt;code&gt;v-else-if&lt;/code&gt; conditionals&lt;br&gt;
‚òê &lt;code&gt;v-for&lt;/code&gt; loops&lt;br&gt;
‚òê &lt;code&gt;v-on:click&lt;/code&gt; or &lt;code&gt;@click&lt;/code&gt;&lt;br&gt;
‚òê &lt;code&gt;methods&lt;/code&gt;&lt;br&gt;
‚òê &lt;code&gt;computed&lt;/code&gt; properties&lt;br&gt;
‚òê &lt;code&gt;props&lt;/code&gt; on a component&lt;br&gt;
‚òê &lt;code&gt;created&lt;/code&gt; and other life-cycle hooks&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#certification"&gt;
  &lt;/a&gt;
  CERTIFICATION!
&lt;/h2&gt;

&lt;p&gt;That's it! You've done it, by the powers vested in me, from the global state of the React Higher Order Council (React HoC), you are now certified as "A Real React Developer‚Ñ¢".&lt;/p&gt;

&lt;p&gt;Print off your certificate here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://TheJaredWilcurt.com/certificates/react"&gt;https://TheJaredWilcurt.com/certificates/react&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Share this with your friends, so they can be certified too!&lt;/p&gt;

&lt;p&gt;Take a picture with your certification and share on Twitter! Be sure to mention &lt;a href="https://twitter.com/TheJaredWilcurt"&gt;@TheJaredWilcurt&lt;/a&gt; so I see it.&lt;/p&gt;




&lt;p&gt;* Not officially endorsed by Facebook in any way&lt;br&gt;
** Certificate not available to those in TN, HI, CR or LF&lt;br&gt;
*** I believe in you, nothing can stop you, you are a champion&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Let's build a Markdown Editor!</title>
      <author>Siddharth</author>
      <pubDate>Mon, 28 Jun 2021 03:23:46 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/let-s-improve-the-textarea-1pjo</link>
      <guid>https://dev.to/siddharthshyniben/let-s-improve-the-textarea-1pjo</guid>
      <description>&lt;p&gt;There are a lot of options for editing markdown ‚Äì but none of them suited me. So, I created a new one, and I'll show you how I did it here!&lt;/p&gt;

&lt;p&gt;Here's the final result: &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/LYWwOze?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-base"&gt;
  &lt;/a&gt;
  The base
&lt;/h2&gt;

&lt;p&gt;We are gonna use a textarea to implement this because &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Textareas support all the native keyboard shortcuts, clicking, and stuff which we don't want to reimplement&lt;/li&gt;
&lt;li&gt;A11y!&lt;/li&gt;
&lt;li&gt;Many chrome extensions (like Grammarly) support checking your writing in textareas, so we need that to work&lt;/li&gt;
&lt;li&gt;It's almost the only option we got&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the first thing we should do is, well, create a textarea! Give it a proper ID and stuff so that we can target it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"editor"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"editor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-two-characters-when-typing-one-of-them"&gt;
  &lt;/a&gt;
  Adding two characters when typing one of them
&lt;/h2&gt;

&lt;p&gt;One of the first things I want to do is insert another &lt;code&gt;'&lt;/code&gt; when a &lt;code&gt;'&lt;/code&gt; is typed and position the cursor properly.&lt;/p&gt;

&lt;p&gt;First things first, let's create a map of which characters we want to insert&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keymap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// value: the value to insert when the character is typed&lt;/span&gt;
    &lt;span class="c1"&gt;// pos: the number of characters the cursor should move forwards&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;()&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\'\'&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚Äú&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚Äú‚Äù&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;``&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚Äò&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚Äò‚Äô&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;¬´&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;¬´¬ª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;„Äå&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;„Äå„Äç&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~~&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've added maps for quotes, smart quotes, some uncommon quotes, and some common markdown syntax. Feel free to add more snippets&lt;/p&gt;

&lt;p&gt;Next thing to do is add a keydown listener to the textarea:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check if there is a matching key in the keymap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keymap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if there is, prevent the default action, which is inserting a character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And insert the correct character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;keymap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;keymap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4nVZf-IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3nug2gae2pjmdvxh9fu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4nVZf-IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3nug2gae2pjmdvxh9fu.gif" alt="double-char"&gt;&lt;/a&gt;&lt;/p&gt;
There it is! Double characters inserted!



&lt;p&gt;&lt;br&gt;&lt;br&gt;
I gotta say, it feels very useful for creating emoticons &lt;code&gt;¬Ø\_(„ÉÑ)_/¬Ø&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inserting-a-tab-character-when-we-enter-tab"&gt;
  &lt;/a&gt;
  Inserting a tab character when we enter tab
&lt;/h2&gt;

&lt;p&gt;It's so irritating to have to type four characters when we mean to insert a tab... we &lt;em&gt;have to&lt;/em&gt; fix it!&lt;/p&gt;

&lt;p&gt;We can listen to a Tab key in our &lt;code&gt;eventListener&lt;/code&gt;, and the rest of the code is pretty much the same as our previous snippet example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="c1"&gt;// Please don't start a tabs vs spaces debate&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;   &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I also wanna change the tab width to 4:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#editor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;tab-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zk5SsL0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gabkgd55ogwt0dkfx064.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zk5SsL0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gabkgd55ogwt0dkfx064.gif" alt="tab"&gt;&lt;/a&gt;&lt;/p&gt;
TAB TAB TAB TAB TAB



&lt;p&gt;&lt;br&gt;&lt;br&gt;
That looks nice, only thing being we can no longer use tab to go to the next element. Well, I'll fix that someday. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tabtoexpand-snippets"&gt;
  &lt;/a&gt;
  Tab-to-expand snippets
&lt;/h2&gt;

&lt;p&gt;Yeah! Snippets! &lt;br&gt;
I don't really have any ideas on snippets, but, we'll manage...&lt;/p&gt;

&lt;p&gt;Once again, we are going to create a map with our keyboard shortcuts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snipmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// These make no sense but I'll add them for completeness&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;# &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;## &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// These make sense&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;### &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#### &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;##### &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;###### &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// Lorem ipsum&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lorem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// Might be a good idea to add a snippet for a table sometime.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we gotta do a bit of refactoring on out &lt;code&gt;Tab&lt;/code&gt; section. We should make an if statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snippet&lt;/span&gt; &lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;   &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snipmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that we can add a snippet if it exists, else just insert a Tab character.&lt;/p&gt;

&lt;p&gt;First thing to do is check if a given snippet exists. So we have to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the word behind the cursor&lt;/li&gt;
&lt;li&gt;Check if it is in the &lt;code&gt;snipmap&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;If it is, then remove the snippet text and insert the snippet&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we'll define our &lt;code&gt;getWord&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getWord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;preText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use it in the if statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getWord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;snipmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Subtract the word's length because we need to remove the snippet from the original text&lt;/span&gt;
    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nx"&gt;snipmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;snipmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Tab code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsikWxD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pisoc03bs5s4ujf8wkl1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsikWxD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pisoc03bs5s4ujf8wkl1.gif" alt="tab-snip"&gt;&lt;/a&gt;  &lt;/p&gt;
*type* TAB TAB *type* *type* TAB



&lt;p&gt;&lt;br&gt;&lt;br&gt;
And now we have our Tab snippets working. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-a-bookmarklet"&gt;
  &lt;/a&gt;
  Bonus: A Bookmarklet
&lt;/h2&gt;

&lt;p&gt;Well, If we could just have this work for every textarea, that would be awesome!! So, I just made a bookmarklet out of it, and here's the pen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/zYZgaxb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That bookmarklet works on almost every website, even on DEV!&lt;/p&gt;




&lt;p&gt;That's it! Stay tuned for part 2 of this post, I have a few features planned and also a few ideas which I don't know how to implement ;)&lt;/p&gt;

&lt;p&gt;I know this editor isn't actually a markdown editor, more like &lt;em&gt;TExtarea iMproved&lt;/em&gt; (no pun intended), but we'll fix that in the next part&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô unit test ‡πÉ‡∏ô Rust</title>
      <author>Pallat Anchaleechamaikorn</author>
      <pubDate>Mon, 28 Jun 2021 03:17:28 +0000</pubDate>
      <link>https://dev.to/pallat/unit-test-rust-ggb</link>
      <guid>https://dev.to/pallat/unit-test-rust-ggb</guid>
      <description>&lt;p&gt;‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô unit test ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤ Rust ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô file ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö code ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô integration test ‡∏à‡∏∞‡πÅ‡∏¢‡∏Å‡πÑ‡∏õ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô /tests ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö /src&lt;/p&gt;

&lt;p&gt;‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô unit test ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[test]&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_correct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ ‡πÄ‡∏£‡∏≤‡∏°‡∏µ function add ‡πÑ‡∏ß‡πâ‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡∏ó‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô unit test ‡∏•‡∏á‡πÑ‡∏õ‡πÉ‡∏ô code ‡∏ï‡∏£‡∏á‡πÜ ‡πÄ‡∏ß‡∏•‡∏≤ compile ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô unit test ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡πÉ‡∏™‡πà&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#[cfg(test)]&lt;/code&gt; ‡πÑ‡∏ß‡πâ‡∏ö‡∏ô mod tests ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å compiler ‡∏ß‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô unit test ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ compile&lt;/p&gt;

&lt;p&gt;‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á module ‡∏ä‡∏∑‡πà‡∏≠ tests ‡∏•‡∏á‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ function ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô unit test ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà &lt;code&gt;#[test]&lt;/code&gt; ‡πÑ‡∏ß‡πâ&lt;/p&gt;

&lt;p&gt;‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å function ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô &lt;code&gt;super::&lt;/code&gt; ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ &lt;code&gt;use super::*;&lt;/code&gt; ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[test]&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_correct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cargo test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πá‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô unit test ‡πÉ‡∏ô Rust ‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß&lt;/p&gt;

</description>
      <category>rust</category>
    </item>
    <item>
      <title>How to improve the performance of a React Native App?</title>
      <author>kpiteng</author>
      <pubDate>Mon, 28 Jun 2021 03:13:21 +0000</pubDate>
      <link>https://dev.to/kpiteng/how-to-improve-the-performance-of-a-react-native-app-188p</link>
      <guid>https://dev.to/kpiteng/how-to-improve-the-performance-of-a-react-native-app-188p</guid>
      <description>&lt;p&gt;See how you will boost your &lt;a href="https://www.kpiteng.com/services/mobile-app-development/react-native-app-development/"&gt;react native app&lt;/a&gt; performance, improve start-up time, decrease bundle size &amp;amp; memory usage.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#key-points-"&gt;
  &lt;/a&gt;
  Key Points -
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Hermes&lt;/li&gt;
&lt;li&gt;Avoid re-rendering using useMemo&lt;/li&gt;
&lt;li&gt;Cache Images&lt;/li&gt;
&lt;li&gt;Use nativeDriver with Animated Library&lt;/li&gt;
&lt;li&gt;State Management With Redux/MobX/Apollo&lt;/li&gt;
&lt;li&gt;Remove Console Log&lt;/li&gt;
&lt;li&gt;Optimize Android App Size&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-hermes"&gt;
  &lt;/a&gt;
  1. Hermes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactnative.dev/docs/hermes"&gt;Hermes&lt;/a&gt; is an open-source JavaScript engine optimized for React Native. Hermes integration helps to improve start-up time, decreased memory usage, and smaller app size.&lt;/p&gt;

&lt;p&gt;With Hermes your app will start at 2x speed, memory usage will decrease to 30%, android app bundle size decreased 30%, iOS Application performance will boost.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how to integrate &lt;a href="https://hermesengine.dev/"&gt;Hermes&lt;/a&gt;. Hermes supports iOS support after the 0.64 version. So make sure you upgrade your app using &lt;a href="https://react-native-community.github.io/upgrade-helper/?from=0.59.0"&gt;React Native Upgrade Helper&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#enabling-hermes-"&gt;
  &lt;/a&gt;
  Enabling Hermes -
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Android -&lt;/strong&gt;&lt;br&gt;
Add following code line In android/app/build.gradle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;project.ext.react = [
  entryFile: "index.js",
-     enableHermes: false  // clean and rebuild if changing
+     enableHermes: true  // clean and rebuild if changing
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using ProGuard, add following rules in proguard-rules.pro :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-keep class com.facebook.hermes.unicode.** { *; }
-keep class com.facebook.jni.** { *; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clean the build&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd android &amp;amp;&amp;amp; ./gradlew clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;iOS -&lt;/strong&gt;&lt;br&gt;
Edit ios/Podfile file with below code lines -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use_react_native!(
  :path =&amp;gt; config[:reactNativePath],
  # to enable hermes on iOS, change false to true and then install pods
-    :hermes_enabled =&amp;gt; false
+    :hermes_enabled =&amp;gt; true
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the Hermes pod&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ios &amp;amp;&amp;amp; pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs it, Now create your iOS &amp;amp; Android build and see application start-up speed, memory usage, and specially bundle size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-avoid-rerendering-using-usememo"&gt;
  &lt;/a&gt;
  2. Avoid re-rendering using useMemo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.kpiteng.com/blogs/react-hooks"&gt;useMemo hooks&lt;/a&gt; helps developers to avoid re-rendering of child components to improve the performance of react application. useMemo is used to handle memoization, meaning if any component receives the same props more than once, it will use previously cached props and render the JSX view and return component.&lt;/p&gt;

&lt;p&gt;In the sample below I have taken FlatList and Button. First time Flatlist renders perfectly. Now when user pressed button new setCount will update state variable and whole component getting reloaded with FlatList even no values updated in Array. To avoid this I have wrapped FlatListItem (UseMemoListItem) with useMemo, so useMemo checks if any change in props then only it will render the JSX else it will return render &amp;amp; return the view previous props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const technology = [
  { name: 'React Native' },
  { name: 'React.js' },
  { name: 'Next.js' },
 ];
 const [arrTechnology, setArrTechnology] = useState(technology);
 const [count, setCount] = useState(0);

 function UseMemoListItem({item, onChange, arrTechnology}) {
  return useMemo(() =&amp;gt; {
    return (
      &amp;lt;View style={Styles.container}&amp;gt;
        &amp;lt;Text&amp;gt;{item.name}&amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }, [item.status]);
 }

  return (
    &amp;lt;View style={Styles.container}&amp;gt;
      &amp;lt;Button title='Increment' onPress={() =&amp;gt; setCount(count + 1)} /&amp;gt;
      &amp;lt;FlatList
        data={arrTechnology}
        keyExtractor={(item) =&amp;gt; String(item.name)}
        renderItem={({item, index}) =&amp;gt; (
          &amp;lt;UseMemoListItem
            item={item}
          /&amp;gt;
        )}
        ItemSeparatorComponent={() =&amp;gt; &amp;lt;UseMemoListItemSeprator /&amp;gt;}
        showsVerticalScrollIndicator={false}
      /&amp;gt;
    &amp;lt;/View&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-cache-images"&gt;
  &lt;/a&gt;
  3. Cache Images
&lt;/h3&gt;

&lt;p&gt;React Native Image component allow developers to display Images in application, still there is few issues like -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rendering number of Image (Product List - ECommerce Application)&lt;/li&gt;
&lt;li&gt;Low performance in Caching Image Loading&lt;/li&gt;
&lt;li&gt;Image flickering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To solve this issue React Native support in-build caching for &lt;a href="https://reactnative.dev/docs/images#cache-control-ios-only"&gt;iOS&lt;/a&gt; by enabling following lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Image
  source={{
    uri: 'https://example.com/image.png',
    cache: 'only-if-cached'
  }}
  style={{ width: 400, height: 400 }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, what to do for Android, there is a popular third-party library named - &lt;a href="https://github.com/DylanVann/react-native-fast-image"&gt;react-native-fast-image&lt;/a&gt; which will work perfect for iOS &amp;amp; Android. Using Fast Image you can give quick image rendering, caching mechanism and many more to application users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import FastImage from 'react-native-fast-image'

const YourImage = () =&amp;gt; (
    &amp;lt;FastImage
        style={{ width: 200, height: 200 }}
        source={{
            uri: 'https://yourimageurl.com/image.png',
            headers: { Authorization: 'token' },
            priority: FastImage.priority.normal,
        }}
        resizeMode={FastImage.resizeMode.contain}
    /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-use-nativedriver-with-animated-library"&gt;
  &lt;/a&gt;
  4. Use nativeDriver with Animated Library
&lt;/h3&gt;

&lt;p&gt;We are using animations in our Application, but sometimes it will not run smoothly as expected which impacts application render performance. To avoid flicker and run smooth animation, &lt;a href="https://reactnative.dev/docs/animated"&gt;useNativeDriver&lt;/a&gt; which send animation to native bridge before animation start on component. This helps animations to be executed on separate javascript instance, which resulting in smoother animation.&lt;/p&gt;

&lt;p&gt;It‚Äôs very simple to integration - &lt;strong&gt;useNativeDriver: true&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Animated.timing(this.state.animatedValue, {
  toValue: 1,
  duration: 500,
  useNativeDriver: true, // &amp;lt;-- Add this
}).start();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-state-management-with-reduxmobxapollo"&gt;
  &lt;/a&gt;
  5. State Management With Redux/MobX/Apollo
&lt;/h3&gt;

&lt;p&gt;Many times it is required to manage data locally means caching data which shows immediately to the user without interruption whenever the user comes back to the application. We are using AsyncStorage, Local Database Storage to store data and when the user comes back next time/ open application next time we are fetching data and keeping it in Global variables to access anywhere in the application.&lt;/p&gt;

&lt;p&gt;To manage this in various screens and storing data into various arrays, object Prefer popular State Management Library like Redux, Redux Rematch, &lt;a href="https://www.kpiteng.com/blogs/mobx-state-tree"&gt;MobX&lt;/a&gt; and &lt;a href="https://www.kpiteng.com/blogs/react-native-apollo-graphql"&gt;Apollo&lt;/a&gt;. These library will storage | mange | retrieve data for you and you can easily access throughout the app without any interruption.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-remove-console-log"&gt;
  &lt;/a&gt;
  6. Remove Console Log
&lt;/h3&gt;

&lt;p&gt;All we are using &lt;strong&gt;console.log('Hello KPITENG!')&lt;/strong&gt; to debug applications. While deploying an application if we keep console.log() then it will create performance issues due to javascript thread.&lt;/p&gt;

&lt;p&gt;To remove console.log in Production, following simple installation and setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install babel-plugin-transform-remove-console
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, modify the .babelrc file to remove the console statements, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "env": {
    "production": {
      "plugins": ["transform-remove-console"]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-optimize-android-app-size"&gt;
  &lt;/a&gt;
  7. Optimize Android App Size
&lt;/h3&gt;

&lt;p&gt;React Native Android apps contain -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resources such as images, fonts, etc.&lt;/li&gt;
&lt;li&gt;Four different binaries compiled for different CPU architectures&lt;/li&gt;
&lt;li&gt;Javascript bundle with business logic&lt;/li&gt;
&lt;li&gt;Other in-built files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While you are building an app this will combine all these and create a binary for you. To &lt;a href="https://reactnative.dev/docs/signed-apk-android#enabling-proguard-to-reduce-the-size-of-the-apk-optional"&gt;optimize binary size Android build&lt;/a&gt; in React Native by adding below line&lt;/p&gt;

&lt;p&gt;Update following line in android/app/build.gradle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def enableProguardInReleaseBuilds = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to extract four different binary according your CPU architecture then,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def enableSeparateBuildPerCPUArchitecture = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Thanks for reading Blog!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;KPITENG | DIGITAL TRANSFORMATION&lt;br&gt;
&lt;a href="http://www.kpiteng.com/blogs"&gt;www.kpiteng.com/blogs&lt;/a&gt; | &lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;br&gt;
Connect | Follow Us On - &lt;a href="https://www.linkedin.com/company/kpiteng/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://www.facebook.com/kpiteng"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.instagram.com/kpiteng"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>performance</category>
      <category>javascript</category>
    </item>
    <item>
      <title>useMemo - React Hooks Series</title>
      <author>Pratap Sharma</author>
      <pubDate>Mon, 28 Jun 2021 02:57:36 +0000</pubDate>
      <link>https://dev.to/pratap2210/usememo-react-hooks-series-2074</link>
      <guid>https://dev.to/pratap2210/usememo-react-hooks-series-2074</guid>
      <description>&lt;p&gt;Welcome back to the series of &lt;strong&gt;React Hooks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Series path&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pratapsharma.in/use-state-react-hook"&gt;useState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pratapsharma.in/use-effect-react-hook"&gt;useEffect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;useMemo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main objective will be to explore how re-rendering works in React, why that is a critical factor for React applications, and how the &lt;code&gt;useMemo&lt;/code&gt; hook can leverage it to build a performance boost in your applications. We will also see when &lt;code&gt;useMemo&lt;/code&gt; can cause performance issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-usememo-endraw-hook"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;useMemo&lt;/code&gt; hook?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useMemo()&lt;/code&gt; is a built-in React hook that accepts two arguments ‚Äî a function compute that computes a result and the dependencies array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us try to get the essence of the &lt;code&gt;useMemo&lt;/code&gt; hook. During the first rendering, &lt;code&gt;useMemo(compute, dependencies)&lt;/code&gt; invokes the &lt;code&gt;compute&lt;/code&gt; function, which is the first argument, memoizes the calculation result, and returns it to the component.&lt;/p&gt;

&lt;p&gt;If during the next renderings the dependencies change, then &lt;code&gt;useMemo()&lt;/code&gt; invokes &lt;code&gt;compute&lt;/code&gt;, memoizes the new value, and returns it. But if dependencies don't change during re-rendering, then &lt;code&gt;useMemo()&lt;/code&gt; doesn't invoke &lt;code&gt;compute&lt;/code&gt; but returns the &lt;strong&gt;memoized&lt;/strong&gt; value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-raw-usememo-endraw-"&gt;
  &lt;/a&gt;
  When to Use &lt;code&gt;useMemo&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;The basic and first step is to write the code first and then revisit it to see if any optimization can be made.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implementing &lt;code&gt;useMemo&lt;/code&gt; too often in an application can harm the performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When looking to implement &lt;code&gt;useMemo&lt;/code&gt;, you can check with profiling tools in the debugger to identify any expensive performance issues. By expensive, I mean if the application is consuming a lot of resources (memory). It makes sense to memoize with &lt;code&gt;useMemo&lt;/code&gt; only if you declare a large number of variables in a function at render.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;A component &lt;code&gt;&amp;lt;ComputeFactorial /&amp;gt;&lt;/code&gt; calculates the factorial of a number introduced into an input field.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a possible implementation of &lt;code&gt;&amp;lt;ComputeFactorial /&amp;gt;&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ComputeFactorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFactorialOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Factorial of
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setInc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Force Re-render&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFactorialOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getFactorialOf(n) is called!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;getFactorialOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time the input value is changed, the factorial is calculated using&lt;code&gt;getFactorialOf(n)&lt;/code&gt; and '&lt;code&gt;getFactorialOf(n)&lt;/code&gt; is called!' is logged to console.&lt;/p&gt;

&lt;p&gt;On the other hand, each time you click the &lt;code&gt;Force Re-render&lt;/code&gt; button, the &lt;code&gt;inc&lt;/code&gt; state value is updated. Updating the &lt;code&gt;inc&lt;/code&gt; state value triggers &lt;code&gt;&amp;lt;ComputeFactorial /&amp;gt;&lt;/code&gt; component to re-render. When a component is re-rendered, the factorial is recalculated again ‚Äî '&lt;code&gt;getFactorialOf(n)&lt;/code&gt; is called!' is logged to console.&lt;/p&gt;

&lt;p&gt;How can you memoize the factorial calculation when the component re-renders? Welcome &lt;code&gt;useMemo()&lt;/code&gt; hook!&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;useMemo(() =&amp;gt; getFactorialOf(number), [number])&lt;/code&gt; instead of simple &lt;code&gt;getFactorialOf(number)&lt;/code&gt;, React memoizes the factorial calculation.&lt;/p&gt;

&lt;p&gt;Let‚Äôs improve &lt;code&gt;&amp;lt;ComputeFactorial /&amp;gt;&lt;/code&gt; and memoize the factorial calculation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ComputeFactorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getFactorialOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Factorial of
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setInc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Force Re-render&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFactorialOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getFactorialOf(n) is called!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;getFactorialOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time the value of the number is changed, '&lt;code&gt;getFactorialOf(n)&lt;/code&gt; called!' is logged to console, which is expected.&lt;/p&gt;

&lt;p&gt;However, if you click Force Re-render button, '&lt;code&gt;getFactorialOf(n) is called!&lt;/code&gt;' isn‚Äôt logged to console because &lt;code&gt;useMemo(() =&amp;gt; getFactorialOf(number), [number])&lt;/code&gt; returns the memoized factorial calculation. How cool is that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;This article explored the &lt;code&gt;useMemo&lt;/code&gt; hook and when it is appropriate to use it in a React application.&lt;/p&gt;

&lt;p&gt;We also see that &lt;code&gt;useMemo&lt;/code&gt; helps in boosting the performance of an application by "remembering" or &lt;strong&gt;memoizing&lt;/strong&gt; expensive functions and preventing a re-render every time there is a change in the application.&lt;/p&gt;

&lt;p&gt;We also learnt that while using &lt;code&gt;useMemo&lt;/code&gt; can improve the application's performance, overusing &lt;code&gt;useMemo&lt;/code&gt; can slow down your application. This means the more &lt;code&gt;useMemo&lt;/code&gt; hook is used, and the memory has to be allocated for the memory.&lt;/p&gt;

&lt;p&gt;If you have any questions, suggestions, corrections, I will look forward to it. Thank you for making it this far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Series path&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pratapsharma.in/use-state-react-hook"&gt;useState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pratapsharma.in/use-effect-react-hook"&gt;useEffect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;useMemo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üíå If you'd like to receive more tutorials in your inbox, you can sign up for the newsletter &lt;a href="https://pratap.substack.com"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS Managed AD x AWS SSO„ÅßGoogle Workspace„Å´„É≠„Ç∞„Ç§„É≥„Åô„Çã</title>
      <author>ryanc</author>
      <pubDate>Mon, 28 Jun 2021 02:38:18 +0000</pubDate>
      <link>https://dev.to/ryanch79/aws-managed-ad-x-aws-sso-google-workspace-2kf8</link>
      <guid>https://dev.to/ryanch79/aws-managed-ad-x-aws-sso-google-workspace-2kf8</guid>
      <description>&lt;p&gt;Google WorkspaceÔºàÊóßG SuiteÔºâ„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çí‰Ωø„ÅÑ„Åü„ÅÑ„Åë„Å©„ÄÅ„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ„ÅØActive Directory„ÅßË°å„ÅÑ„Åü„ÅÑ„Å®„ÅÑ„ÅÜ„Ç±„Éº„Çπ„ÇÇ„ÅÇ„Çã„Å†„Çç„ÅÜ„ÄÇ&lt;/p&gt;

&lt;p&gt;Ë®Ä„ÅÑÊèõ„Åà„Çã„Å®„ÄÅAD„ÇíË™çË®º„Éó„É≠„Éê„Ç§„ÉÄ„ÉºÔºàIdentity Provider„ÄÅIdP„Å®„ÇÇÊõ∏„ÅèÔºâ„Å®„Åó„Å¶Âà©Áî®„Åó„ÄÅGoogle Workspace„Çí„Åù„Çå„Å®ÈÄ£Êê∫„Åô„Çã„Ç´„Çπ„Çø„É†SAML„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÁôªÈå≤„Åô„Çã„Å®„ÅÑ„ÅÜ„Åì„Å®„Å´„Å™„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;ADFS„Çí„Åü„Å¶„Å¶ÈÄ£Êê∫„Åï„Åõ„Åü„Çä„ÄÅAD„ÅÆ„É¶„Éº„Ç∂„Éº„ÇíGoogle„Å®ÂêåÊúü„Åï„Åõ„ÇãÊñπÊ≥ï„ÇÇ„ÅÇ„Çã„Çà„ÅÜ„Å†„ÅåAWS Managed Microsoft ADÔºà‰ª•‰∏ãAWS Managed ADÔºâ„Çí‰Ωø„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅÂ∞ë„ÅóÈù¢ÂÄí„Å†„ÄÇÂâçËÄÖ„ÅØ„Åß„Åç„Çã„Å®ÊÄù„ÅÜ„Åå„ÄÅÂæåËÄÖ„Å´Èñ¢„Åó„Å¶„ÅØÊú™Á¢∫Ë™ç„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
„Åù„Åì„Åß„ÄÅAWS„ÅÆ„Ç∑„É≥„Ç∞„É´„Çµ„Ç§„É≥„Ç™„É≥„Çµ„Éº„Éì„Çπ„ÅÆAWS SSO„ÇíÂà©Áî®„Åô„Çå„Å∞„Çµ„Éº„Éê„Éº„Çí„Åü„Å¶„Å¶‰Ωï„Åã„Åó„Çâ„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„ÇãÂøÖË¶Å„Å™„Åè„ÄÅ„Åù„ÅÆËæ∫„Çä„ÅÆ„Éï„Çß„Éá„É¨„Éº„Ç∑„Éß„É≥„Çí„ÇÑ„Å£„Å¶„Åè„Çå„Çã„ÅÆ„ÅßÊ•Ω„Å´ÈÄ£Êê∫„Åß„Åç„Çã„ÄÇ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AWS Managed AD„ÇíÊßãÁØâ„Åó„Å¶„ÅÑ„Å¶„ÄÅ„Å°„ÇÉ„Çì„Å®Ê©üËÉΩ„Åó„Å¶„ÅÑ„Çã&lt;/li&gt;
&lt;li&gt;AWS SSO„ÇíÊúâÂäπ„Å´„Åï„Åõ„Å¶„ÅÇ„ÇãÔºà„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅØ„Åó„Å¶„ÅÑ„Å™„Åè„Å¶„ÇÇËâØ„ÅÑÔºâ
‰∏äË®ò„ÅÆ2„Å§„ÅÆ„Åì„Å®„ÇíÂâçÊèê„Å´„ÄÅGoogle Workspace„Å®„ÅÆÈÄ£Êê∫„Çí„Åó„Å¶„Åø„Çã„Å®„Åô„Çã„ÄÇ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;„Å™„Åä„ÄÅÂΩì„Åü„ÇäÂâç„Å†„Åå„ÄÅ„Åó„Å£„Åã„Çä„É¶„Éº„Ç∂„Éº„ÅÆ„Éï„Çß„Éá„É¨„Éº„Ç∑„Éß„É≥„ÇíË°å„ÅÜ„Åü„ÇÅ„Å´„ÅØGoogleÂÅ¥„ÅÆ„É¶„Éº„Ç∂„Éº„Å®AD„ÅÆ„É¶„Éº„Ç∂„Éº„ÅØÂêå„Åò„Éâ„É°„Ç§„É≥Âêç„ÇíÂà©Áî®„Åó„Å¶„ÅÑ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇÁµÑÁπî„ÅåÊåÅ„Å£„Å¶„ÅÑ„Çã„Å°„ÇÉ„Çì„Å®„Åó„Åü„Éë„Éñ„É™„ÉÉ„ÇØ„Éâ„É°„Ç§„É≥„ÇíÂà©Áî®„Åô„Çã„Å®„ÅÑ„ÅÜ„Åì„Å®„Å†Ôºà.local„Åß„ÅØ„Å†„ÇÅ„Å™„ÅÆ„Åß„ÄÅAD„ÅÆ„Éâ„É°„Ç§„É≥„Åå.local„Å™„Çâ„Éë„Éñ„É™„ÉÉ„ÇØ„Éâ„É°„Ç§„É≥„Åßalternative UPN„ÇíËøΩÂä†„Åó„Å¶„Åä„Åè„Åì„Å®Ôºâ„ÄÇ&lt;/p&gt;

&lt;p&gt;AWS Managed AD„Åß„ÅØ„ÄÅ„Éë„Éñ„É™„ÉÉ„ÇØ„Éâ„É°„Ç§„É≥„Åß„ÅÇ„Å£„Å¶„ÇÇ.local„Åß„ÅÇ„Å£„Å¶„ÇÇ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åô„ÇãÈöõ„Å´Ê§úË®º„Åå„ÅØ„Åó„Çã„Å®„ÅÑ„ÅÜ„Åì„Å®„ÅØ„Å™„ÅÑ„ÅÆ„Å†„Åå„ÄÅGoogleÂÅ¥„ÅØ„Å°„ÇÉ„Çì„Å®Ëá™ÂàÜ„ÅåÊåÅ„Å£„Å¶„ÅÑ„Çã„Éâ„É°„Ç§„É≥„Åò„ÇÉ„Å™„ÅÑ„Å®„Ç´„Çπ„Çø„É†„Éâ„É°„Ç§„É≥„Å®„Åó„Å¶Âà©Áî®„Åß„Åç„Å™„ÅÑ„ÅÆ„ÅßÊ≥®ÊÑè„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
„Åæ„Åö„ÅØAWS SSO„ÅÆÁîªÈù¢„Åã„Çâ„ÄÅË™çË®º„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíË®≠ÂÆö„Åô„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;Active Directory„ÇíID„ÅÆ„ÇΩ„Éº„Çπ„Å´ÊåáÂÆö„Åó„Åü‰∏ä„Åß„ÄÅ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰∏ÄË¶ß„Åã„Çâ„ÄÅÊ≠£„Åó„ÅÑAWS Managed AD„ÇíÈÅ∏Êäû„Åô„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdQs_kAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l5vwaxn20n8koxnbr9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdQs_kAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l5vwaxn20n8koxnbr9v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ë®≠ÂÆö„ÅåÂÆå‰∫Ü„Åô„Çã„Å®„ÄÅ„Åì„Çì„Å™Áä∂ÊÖã„Å´„Å™„Å£„Å¶„ÅÑ„Çã„ÅØ„Åö„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--om8tyvSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp03m56qnl5inx0zdmms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--om8tyvSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp03m56qnl5inx0zdmms.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Ê¨°„Å´„ÄÅGoogle„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíËøΩÂä†„Åô„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;Â∑¶ÂÅ¥„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅÆ„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Äç„ÇíÈÅ∏Êäû„Åó„ÄÅÊñ∞Ë¶è„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆËøΩÂä†„Åã„ÇâG Suite„ÇíÊ§úÁ¥¢„Åô„Çã„ÄÇ„Åì„Åì„ÅØ„Åæ„Å†ÂêçÂâç„ÅåÊõ¥Êñ∞„Åï„Çå„Å¶„Å™„Åè„Å¶ÊóßÂêçÁß∞„ÅÆG Suite„Å´„Å™„Å£„Å¶„ÅÑ„Çã„ÅÆ„Å≠„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEE_xjG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qatuzleh0yfyyrovxzjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEE_xjG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qatuzleh0yfyyrovxzjk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆËøΩÂä†ÊôÇ„Å´„ÄÅË®≠ÂÆöÁîªÈù¢„Å´„Å¶„ÅÑ„Åè„Å§„ÅãÊÉÖÂ†±„ÇíÊéß„Åà„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS SSO „Çµ„Ç§„É≥„Ç§„É≥ URL&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS SSO „Çµ„Ç§„É≥„Ç¢„Ç¶„Éà URL&lt;br&gt;
„Çí„Ç≥„Éî„Éº„Åó„Å¶„Åä„ÅÑ„Å¶„ÄÅ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS SSO Ë®ºÊòéÊõ∏&lt;br&gt;
„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Åä„Åè„ÄÇ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvgX70rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fde4nfckwbjlcfuyahlu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvgX70rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fde4nfckwbjlcfuyahlu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‰ªñ„Å´„ÄÅ„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£„Äç„Å®„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„É°„Çø„Éá„Éº„Çø„Äç„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Å†„Åå„ÄÅ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÂßã URL„ÄçÔºö&lt;a href="https://www.google.com/a/"&gt;https://www.google.com/a/&lt;/a&gt;&amp;lt;Ëá™ÂàÜ„ÅÆ„Éâ„É°„Ç§„É≥Âêç&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ SAML „É°„Çø„Éá„Éº„Çø„Éï„Ç°„Ç§„É´*„Äç„ÅØÊâãÂãï„Åß„ÅÆ„É°„Çø„Éá„Éº„ÇøÂÖ•Âäõ„Å´Âàá„ÇäÊõø„Åà„Åü‰∏ä„Åß„ÄÅ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ ACS URL*„ÄçÔºö&lt;a href="https://www.google.com/a/"&gt;https://www.google.com/a/&lt;/a&gt;&amp;lt;Ëá™ÂàÜ„ÅÆ„Éâ„É°„Ç§„É≥Âêç&amp;gt;/acs&lt;/li&gt;
&lt;li&gt;„Äå„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ SAML ÂØæË±°ËÄÖ*„ÄçÔºögoogle.com/a/&amp;lt;Ëá™ÂàÜ„ÅÆ„Éâ„É°„Ç§„É≥Âêç&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;„Å´„Åù„Çå„Åû„ÇåË®≠ÂÆö„Åô„Çã„ÄÇ‰Ωï„ÇíË®≠ÂÆö„Åô„Çã„Åã„ÇíË™¨Êòé„Åó„Å¶„Åè„Çå„ÇãGoogle„ÅÆ„Éò„É´„Éó„Éö„Éº„Ç∏„Åå„ÅÇ„Çã„Åå„ÄÅ„Åì„Åì„Åß„ÅØÁúÅ„Åè„Å®„Åô„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RRxgFIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/862bv9g9ueblwltq8xsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RRxgFIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/862bv9g9ueblwltq8xsk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Ê¨°„Å´„ÄÅ„Å°„Çá„Å£„Å®‰ΩúÊ•≠Â†¥ÊâÄ„ÇíÂ§â„Åà„Å¶‰ªäÂ∫¶„ÅØGoogleÂÅ¥„ÅßSSO„ÅÆË®≠ÂÆö„Å®„É¶„Éº„Ç∂„Éº‰ΩúÊàê„ÇíË°å„ÅÜ„ÄÇ&lt;/p&gt;

&lt;p&gt;ÁµÑÁπî„ÅÆÁÆ°ÁêÜËÄÖ„Å®„Åó„Å¶Google AdminÁîªÈù¢„Å´„É≠„Ç∞„Ç§„É≥„Åó„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£‚Üí„Ç∑„É≥„Ç∞„É´„Çµ„Ç§„É≥„Ç™„É≥„ÅÆË®≠ÂÆö„Å´ÈÄ≤„ÇÄ„ÄÇË®≠ÂÆö„Åå2„Å§„ÅÇ„Çã„Åå„ÄÅ&lt;/p&gt;

&lt;p&gt;„ÄåSAML„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å´ÂØæ„Åô„Çã„Ç∑„É≥„Ç∞„É´„Çµ„Ç§„É≥„Ç™„É≥ÔºàSSOÔºâ„ÅÆË®≠ÂÆö„Äç„ÅØ„ÄÅ‰ªäÂõû„Å®„ÅØÈÄÜ„ÅÆ„Ç∑„Éä„É™„Ç™„Åß‰Ωø„ÅÜ„ÇÇ„ÅÆ„Å†„ÄÇ„Å§„Åæ„Çä„ÄÅGoogleÂÅ¥„ÅåË™çË®º„Éó„É≠„Éê„Ç§„ÉÄ„Éº„Å®„Åó„Å¶„ÄÅAWSÁÆ°ÁêÜ„Ç≥„É≥„ÇΩ„Éº„É´Á≠â„Å´„É≠„Ç∞„Ç§„É≥„Åó„Åü„ÅÑÂ†¥Âêà„ÄÇ&lt;/p&gt;

&lt;p&gt;„Äå„Çµ„Éº„Éâ„Éë„Éº„ÉÜ„Ç£„ÅÆ ID „Éó„É≠„Éê„Ç§„ÉÄ„Çí‰ΩøÁî®„Åó„Åü„Ç∑„É≥„Ç∞„É´ „Çµ„Ç§„É≥„Ç™„É≥ÔºàSSOÔºâ„ÅÆË®≠ÂÆö„Äç„Åå„ÄÅ‰ªäÂõû‰Ωø„ÅÜ„ÇÇ„ÅÆ„Å™„ÅÆ„ÅßÈñìÈÅï„ÅÑ„ÅÆ„Å™„ÅÑ„Çà„ÅÜ„Å´„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eblgog3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6e2f57y119ii4lazy4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eblgog3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6e2f57y119ii4lazy4c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ë¶ã„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÇÇ„ÅÜ„ÅäÂàÜ„Åã„Çä„Å†„Å®ÊÄù„ÅÜ„Åå„ÄÅÂÖàÁ®ãAWS SSOÂÅ¥„ÅßÊéß„Åà„ÅüÊÉÖÂ†±„Çí„Åì„Å°„Çâ„Å´„Çª„ÉÉ„Éà„Åô„Çã„ÄÇ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;„Äå„É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏„ÅÆURL„ÄçÔºöAWS SSO „Çµ„Ç§„É≥„Ç§„É≥ URL&lt;/li&gt;
&lt;li&gt;„Äå„É≠„Ç∞„Ç¢„Ç¶„Éà„Éö„Éº„Ç∏„ÅÆURL„ÄçÔºöAWS SSO „Çµ„Ç§„É≥„Ç¢„Ç¶„Éà URL&lt;/li&gt;
&lt;li&gt;„ÄåÁ¢∫Ë™çÁî®„ÅÆË®ºÊòéÊõ∏„ÄçÔºöAWS SSO„Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„ÅüË®ºÊòéÊõ∏&lt;/li&gt;
&lt;li&gt;„Äå„Éâ„É°„Ç§„É≥Âõ∫Êúâ„ÅÆÁô∫Ë°åÂÖÉ„Çí‰ΩøÁî®„ÄçÔºö„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÖ•„Çå„Çã&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ë®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åü„Çâ„ÄÅ‰øùÂ≠ò„ÇíË°å„ÅÜ„ÄÇ&lt;/p&gt;

&lt;p&gt;Ê¨°„ÅØ„ÄÅGoogleÂÅ¥„ÅÆ„É¶„Éº„Ç∂„Éº„Å´AD„Å®Âêå„Åò„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅåÂ≠òÂú®„Åó„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„ÄÅ„Åæ„Å†„Å™„ÅÑ„ÅÆ„Åß„ÅÇ„Çå„Å∞‰ΩúÊàê„Åó„Å¶„Åä„Åè„ÄÇ&lt;/p&gt;

&lt;p&gt;‚Äª„Åì„ÅÆ‰æã„Åß„ÅØ„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆËá™ÂãïÂêåÊúüÔºà„Éó„É≠„Éì„Ç∏„Éß„Éã„É≥„Ç∞Ôºâ„ÅØË°å„Å£„Å¶„ÅÑ„Å™„ÅÑ&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
ÂÜçÂ∫¶AWS SSO„Å´Êàª„Çä„ÄÅ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å´„É¶„Éº„Ç∂„Éº„ÅÆÂâ≤ÂΩì„ÇíË°å„ÅÜ„ÄÇ&lt;/p&gt;

&lt;p&gt;„Åï„Åç„Åª„Å©ËøΩÂä†„Åó„Åü„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„ÄåÂâ≤„ÇäÂΩì„Å¶Ê∏à„Åø„É¶„Éº„Ç∂„Éº„Äç„Çø„Éñ„Åã„Çâ„ÄÅ„Äå„É¶„Éº„Ç∂„Éº„ÅÆÂâ≤„ÇäÂΩì„Å¶„Äç„ÇíÈÅ∏Êäû„Åó„ÄÅ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂà©Áî®„Åï„Åõ„Åü„ÅÑ„É¶„Éº„Ç∂„Éº„ÇÑ„Ç∞„É´„Éº„Éó„ÇíÂâ≤„ÇäÂΩì„Å¶„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rr49jF8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wbfosoq89944b8nhpqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rr49jF8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wbfosoq89944b8nhpqn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
„Åì„Åì„Åæ„ÅßÁµÇ„Çè„Å£„Åü„Çâ„ÄÅÁõ¥Êé•AWS SSO„ÅÆ„Éù„Éº„Çø„É´ÁîªÈù¢„Åã„Çâ„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åø„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_0kac7E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36drl4tdckarm1e6hg4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0kac7E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36drl4tdckarm1e6hg4i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥‰∏ÄË¶ß„Å´„ÄÅ„Å°„ÇÉ„Çì„Å®G Suite„Åå„ÅÇ„Çã„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwy9kxBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gm4xk78dmlhxh688tga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwy9kxBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gm4xk78dmlhxh688tga.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;G Suite„ÅÆ„Ç¢„Ç§„Ç≥„É≥„ÇíÈÅ∏Êäû„Åô„Çã„Å®„ÄÅ„Å°„ÇÉ„Çì„Å®„Ç∑„É≥„Ç∞„É´„Çµ„Ç§„É≥„Ç™„É≥„Åß„Åç„Åü„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdE00rz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0uyem1u6f7ok4073s08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdE00rz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0uyem1u6f7ok4073s08.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>activedirectory</category>
      <category>google</category>
      <category>singlesignon</category>
    </item>
    <item>
      <title>Markdown automation made simple using markdown-autodocs github action</title>
      <author>Dinesh</author>
      <pubDate>Mon, 28 Jun 2021 01:29:05 +0000</pubDate>
      <link>https://dev.to/dineshsonachalam/markdown-automation-made-simple-using-markdown-autodocs-github-action-17nj</link>
      <guid>https://dev.to/dineshsonachalam/markdown-automation-made-simple-using-markdown-autodocs-github-action-17nj</guid>
      <description>&lt;p&gt;Hi everyone!, I just released markdown-autodocs GitHub action which will help you to auto-document your markdown files. Please give a star for this repo if you find it useful.&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href="https://github.com/dineshsonachalam/markdown-autodocs"&gt;https://github.com/dineshsonachalam/markdown-autodocs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-markdown-autodocs"&gt;Why markdown-autodocs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#examples"&gt;Examples&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#code-block"&gt;CODE Block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#json-to-html-table"&gt;JSON to HTML table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-workflow-artifacts-table"&gt;Github Workflow Artifacts table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-repo-which-uses-all-the-markdown-autodocs-feature"&gt;Example Repo which uses all the markdown-autodocs feature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#usage"&gt;Usage&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#adding-markdown-autodocs-in-your-workflow"&gt;Adding markdown-autodocs in your workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extended-example-with-all-possible-options-available-for-this-action"&gt;Extended example with all possible options available for this Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-workflow-artifacts"&gt;Github Workflow Artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-markdownautodocs"&gt;
  &lt;/a&gt;
  Why markdown-autodocs?
&lt;/h2&gt;

&lt;p&gt;To make your repo more appealing and useful you need to provide example code snippets in your README.md. Manually copy and pasting each code snippet in their respective places in your README would be inefficient and time-consuming.&lt;/p&gt;

&lt;p&gt;This problem can be solved using &lt;b&gt;markdown-autodocs&lt;/b&gt; a GitHub Action that automatically generates &amp;amp; updates markdown content (like your README.md) from external or remote files. You need to add markers in your README.md that will tell markdown-autodocs where to insert the code snippet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Code block:&lt;/b&gt; Insert code snippet in your markdown file from external or remote files.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;JSON to HTML table:&lt;/b&gt; Insert HTML Table in your markdown file by converting JSON file contents to HTML table.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Github Workflow Artifacts table:&lt;/b&gt; Insert the Github workflow artifacts table in your markdown file by getting the latest artifacts for a workflow run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#code-block"&gt;
  &lt;/a&gt;
  CODE Block
&lt;/h3&gt;

&lt;p&gt;Get code from an external file or URL and insert it in your markdown.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: The relative path to the code to pull in, or the &lt;code&gt;URL&lt;/code&gt; where the raw code lives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get code from external file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/dineshsonachalam/f8eb73a29a379b3944fbfb0213c558bb#get-code-from-external-file"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8ALbhDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c8FskHr.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get code from remote file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/dineshsonachalam/f8eb73a29a379b3944fbfb0213c558bb#get-code-from-remote-file"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbGy89Tj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kQ6qhlI.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json-to-html-table"&gt;
  &lt;/a&gt;
  JSON to HTML table
&lt;/h3&gt;

&lt;p&gt;Get JSON contents from an external file and convert it into an HTML table and insert's it in your markdown.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: The relative path to the JSON file to pull in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/dineshsonachalam/f8eb73a29a379b3944fbfb0213c558bb#json-to-html-table"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzLBqhjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/t0pwMk2.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-workflow-artifacts-table"&gt;
  &lt;/a&gt;
  Github Workflow Artifacts table
&lt;/h3&gt;

&lt;p&gt;Get the list of the latest artifacts generated from a workflow run. Generates a workflow artifacts table consists of artifacts download and workflow URL in an HTML table and inserts it in your markdown file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/dineshsonachalam/f8eb73a29a379b3944fbfb0213c558bb#github-workflow-artifacts-table"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4KNtM19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Gr6P0bM.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-repo-which-uses-all-the-markdownautodocs-feature"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/dineshsonachalam/repo-using-markdown-autodocs"&gt;Example Repo which uses all the markdown-autodocs feature&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adding-markdownautodocs-in-your-workflow"&gt;
  &lt;/a&gt;
  Adding markdown-autodocs in your workflow
&lt;/h3&gt;

&lt;p&gt;Add the following step at the end of your job, after other steps that might add or change files.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dineshsonachalam/markdown-autodocs@v1.0.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extended-example-with-all-possible-options-available-for-this-action"&gt;
  &lt;/a&gt;
  Extended example with all possible options available for this Action
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Markdown autodocs&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dineshsonachalam/markdown-autodocs@v1.0.2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Optional, defaults to author of the commit that triggered the run&lt;/span&gt;
    &lt;span class="na"&gt;commit_author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Author &amp;lt;actions@github.com&amp;gt;&lt;/span&gt;

    &lt;span class="c1"&gt;# Optional, defaults to "actions@github.com"&lt;/span&gt;
    &lt;span class="na"&gt;commit_user_email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions@github.com&lt;/span&gt;

    &lt;span class="c1"&gt;# Optional, but recommended&lt;/span&gt;
    &lt;span class="c1"&gt;# Defaults to "Apply automatic changes"&lt;/span&gt;
    &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Apply automatic changes&lt;/span&gt;

    &lt;span class="c1"&gt;# Optional branch name where commit should be pushed to.&lt;/span&gt;
    &lt;span class="c1"&gt;# Defaults to the current branch.&lt;/span&gt;
    &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;feature-123&lt;/span&gt;

    &lt;span class="c1"&gt;#¬†Optional output file paths, defaults to '[./README.md]'.&lt;/span&gt;
    &lt;span class="na"&gt;output_file_paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[./README.md]'&lt;/span&gt;

    &lt;span class="c1"&gt;# Categories to automatically sync or transform its contents in the markdown files.&lt;/span&gt;
    &lt;span class="c1"&gt;# Defaults to '[code-block,json-to-html-table,workflow-artifact-table]'&lt;/span&gt;
    &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[code-block,json-to-html-table,workflow-artifact-table]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#github-workflow-artifacts"&gt;
  &lt;/a&gt;
  Github Workflow Artifacts
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Artifact&lt;/th&gt;
&lt;th&gt;Workflow&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/suites/3097026321/artifacts/70769320"&gt;Jest-integration-test-report&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/actions/runs/976582803"&gt;integration-tests&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/suites/3097026321/artifacts/70769321"&gt;module-dependencies-license-report&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/actions/runs/976582803"&gt;integration-tests&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/suites/3097026321/artifacts/70769322"&gt;size-of-dependencies&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/actions/runs/976582803"&gt;integration-tests&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/suites/3097026321/artifacts/70769323"&gt;vulnerabilities-audit-report&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/dineshsonachalam/markdown-autodocs/actions/runs/976582803"&gt;integration-tests&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//CONTRIBUTING.md"&gt;Contributing Guideline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt; ¬© &lt;a href="https://www.github.com/dineshsonachalam"&gt;dineshsonachalam&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>part 3: Binary search tree in data structure</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 27 Jun 2021 23:24:22 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-3-binary-search-tree-in-data-structure-3p7m</link>
      <guid>https://dev.to/ayabouchiha/part-3-binary-search-tree-in-data-structure-3p7m</guid>
      <description>&lt;p&gt;Hi, in this is part 3 of the tree data structure, we're going to discuss the Binary search tree, and in the next post, we will cover in detail its implementation (insertion, searching, and deletion).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-search-tree-bst"&gt;
  &lt;/a&gt;
  Binary search tree (BST)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Binary search tree&lt;/strong&gt;: or (&lt;em&gt;sorted binary tree&lt;/em&gt;) is a &lt;strong&gt;binary tree&lt;/strong&gt; invented in (1960) which all nodes that exist in the &lt;em&gt;right sub-tree&lt;/em&gt; are greater than the nodes that exist in the &lt;em&gt;left sub-tree&lt;/em&gt; and there &lt;em&gt;parent node&lt;/em&gt;.
and Both the left and right subtrees must be binary search trees as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwkCdVb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u97xgilz9xiq2cc6o75u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwkCdVb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u97xgilz9xiq2cc6o75u.jpg" alt="Aya Bouchiha binary search tree in data structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-complexity-of-binary-search-tree"&gt;
  &lt;/a&gt;
  Space complexity of binary search tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The space complexity of the binary search tree is &lt;strong&gt;O(n)&lt;/strong&gt; where n is the number of elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity-of-binary-search-tree"&gt;
  &lt;/a&gt;
  Time complexity of binary search tree
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;insert&lt;/th&gt;
&lt;th&gt;search&lt;/th&gt;
&lt;th&gt;delete&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;best case&lt;/td&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;worst case&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The time complexity of the Binary search tree becomes &lt;strong&gt;O(n)&lt;/strong&gt; if the binary tree is a skewed binary tree.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-a-binary-search-tree"&gt;
  &lt;/a&gt;
  Advantages of using a binary search tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Faster than array and Linked list in insertion and deletion.&lt;/li&gt;
&lt;li&gt;It is so Efficient in searching&lt;/li&gt;
&lt;li&gt;getting The minimum and the Maximum easily&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-using-a-binary-search-tree"&gt;
  &lt;/a&gt;
  Disadvantages of using a binary search tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;More stack space due to the recursion &lt;/li&gt;
&lt;li&gt;The run time mat increases because of the comparisons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/"&gt;https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://afteracademy.com/blog/binary-search-tree-introduction-operations-and-applications"&gt;https://afteracademy.com/blog/binary-search-tree-introduc
tion-operations-and-applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-are-some-practical-applications-of-binary-search-trees"&gt;https://www.quora.com/What-are-some-practical-applications-of-binary-search-trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upgrad.com/blog/binary-tree-in-data-structure/"&gt;https://www.upgrad.com/blog/binary-tree-in-data-structure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursehero.com/file/p1fldsp9/Disadvantages-of-Binary-Search-Trees-The-shape-of-the-tree-depends-on-the-order/"&gt;https://www.coursehero.com/file/p1fldsp9/Disadvantages-of-Binary-Search-Trees-The-shape-of-the-tree-depends-on-the-order/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/binary-search-tree"&gt;https://www.javatpoint.com/binary-search-tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in the next post, on which we will cover the binary search tree implementation in detail, Happy Coding:) &lt;/p&gt;

&lt;p&gt;#day_15&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>python</category>
    </item>
  </channel>
</rss>
