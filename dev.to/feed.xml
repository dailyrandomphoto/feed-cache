<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Best Google Chrome Extensions for Web Developers in 2021</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sun, 18 Apr 2021 08:55:54 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/10-best-google-chrome-extensions-for-web-developers-in-2021-239i</link>
      <guid>https://dev.to/pawanbhayde/10-best-google-chrome-extensions-for-web-developers-in-2021-239i</guid>
      <description>&lt;p&gt;Whether you're a beginner Programmer or a seasoned programmer, you spend most of some time on Google. If you've got used Google Chrome Extensions a couple of years back, you almost certainly are avoiding it now or not even realizing its existence. But within the previous couple of years, there are many good Google Chrome developer extensions specifically made for Programmers and Software Developers to assists in their work.&lt;/p&gt;

&lt;p&gt;We often download multiple tools for various purposes and spend tons of space for storing . So why not use a Google Chrome Extension to try to to an equivalent job and reduce the work to manage multiple tools. Here we've cumulated an inventory of the simplest Chrome extensions that are very helpful for you as a developer and with these built-in developer tools, there seems to be no further need for more tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Daily.dev –&lt;/strong&gt;&lt;br&gt;
If you're a busy developer who cannot continue with the happenings of the programming and development world, then &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Daily.dev&lt;/a&gt; is perhaps the simplest Chrome extension for you. Its creators also are professional web developers and that they created it because they were spending an excessive amount of time checking out the newest dev news.&lt;/p&gt;

&lt;p&gt;It comes with a default opening tab that shows you the foremost awesome dev news with zero efforts. it's an extension which will surely boost your professional growth with content from many qualified sources for you. Simply open a replacement tab, and you’re done. Being an open-source extension, Daily.dev helps an enormous community of developers round the world to remain in-tuned with the newest news.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Wappalyzer –&lt;/strong&gt;&lt;br&gt;
Developed by Elbert Alias in 2009, &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Wappalyzer&lt;/a&gt; may be a Chrome extension that permits the developer to spot the various technologies that constitute the rear end of an internet site .&lt;/p&gt;

&lt;p&gt;Wappalyzer identifies the online technologies used on an internet site detecting web servers, frameworks, installed analytics tools, libraries, CMS, plugins, databases, widgets, and lots of more.&lt;/p&gt;

&lt;p&gt;It is an open-source extension and it uncovers quite thousand technologies which make it a real lifeline for developers and designers within the quest of creating appealing websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. sitemode.io –&lt;/strong&gt;&lt;br&gt;
This is certainly one among the simplest Chrome extensions out there for web developers since it allows them to switch , save, and share any website which too in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Sitemod.io&lt;/a&gt; extension allows developers to switch an internet site without having access to the ASCII text file and also to make a shareable link to the modified website.&lt;/p&gt;

&lt;p&gt;It is an excellent tool if you're an internet designer and have ideas for a prospective customer's website.&lt;/p&gt;

&lt;p&gt;It uses Chrome Developer Tools to edit an internet page's HTML, CSS, or JS code, and make it possible to feature your code to the online page. Sitemod.io may be a must-have extension in your developer toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Devo –&lt;/strong&gt;&lt;br&gt;
Devo may be a new tab extension that shows GitHub Trending topics, Product Hunts, Hacker News, and lots of different platforms’ front pages on every new tab, with no-login required.&lt;/p&gt;

&lt;p&gt;Users have the liberty of adjusting the location of the cards, display whatever platform they might wish to in several orders. it's an excellent tool for developers who got to stay updated with the newest changes in various tech-related fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Devo&lt;/a&gt; uses specially-built web crawlers for every of the platforms and designs the info within the way of the first platform. it's an open-source extension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Marmoset&lt;/strong&gt;&lt;br&gt;
User appeal is extremely important for developer projects and lots of times developers might encounter the necessity to make snapshots for his or her codes in their projects for aesthetics or other representation purposes.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Marmoset&lt;/a&gt;, it's possible to make beautiful code snapshots, in only seconds, that are useful for either creating graphical representations of your work to be used on social media or in your portfolio website or elsewhere . it's a must have tool for web developers and designers.&lt;/p&gt;

&lt;p&gt;Marmoset- Best Google Chrome Extensions for Software Developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. JSON Viewer&lt;/strong&gt;&lt;br&gt;
If you're currently working or have previously worked with anything involving plenty of JSON code like API's (especially RestFul APIs), then you would possibly be totally conscious of the very fact that how clumsy and unreadable the JSON code is usually .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;JSON Viewer&lt;/a&gt; may be a visually stunning JSON highlighter and beautifier tool that serves an excellent purpose as a Chrome extension for developers.&lt;/p&gt;

&lt;p&gt;It helps during arranging the JSON data in a visually appealing tree format which may be viewed directly within the browser window. it's an open-source extension for inspecting JSON data.&lt;/p&gt;

&lt;p&gt;Related: Learn to Code, Make Money: the way to Turn Programming Skills Into Income&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. SAML Tracer&lt;/strong&gt;&lt;br&gt;
As an internet developer, one has got to handle large amounts of knowledge that circulates through the whole project and between various others.&lt;/p&gt;

&lt;p&gt;Security Assertion Mark-up Language (SAML) which is an open standard allowing the exchange of authorization credentials between a service provider and an identity provider comes into action here.&lt;/p&gt;

&lt;p&gt;Thus, a developer often has the necessity to trace the SAML traffic. With the assistance of the &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;SAML Tracer&lt;/a&gt; Chrome extension, developers can easily trace and highlight SAML traffic.&lt;/p&gt;

&lt;p&gt;It traces the small print of SAML Request and Response and may also trace the small print of HTTP requests or browser traffic including requests like GET, POST, PUT, DELETE, login and logout responses, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. actiTime&lt;/strong&gt;&lt;br&gt;
Any developer round the globe knows that point may be a vital factor for the success of their projects and keeping a track of their development time is important for the project's progress and growth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;actiTime&lt;/a&gt; extension makes time tracking easier and allows you to trace your hours directly from Chrome with a timer.&lt;/p&gt;

&lt;p&gt;It is an excellent tool for developers to stay a track of their work hours and is employed by companies and freelancers to research their performance and manage their project's progress and profitability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Ghostery&lt;/strong&gt;&lt;br&gt;
Ghostery may be a powerful privacy protection extension for Chrome developers. It not only blocks ads but also detects and stops trackers, pixels, or the other embedded snippet ultimately speeding up websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Ghostery&lt;/a&gt; eliminates annoying advertisements from an internet site and provides tracking protection to guard your data by blocking 3rd party websites from tracking you. it's freed from cost and requires no sign-up or registration to urge started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Full-Stack Developer Tools&lt;/strong&gt;&lt;br&gt;
In the past few years, the demand for full-stack developers has risen exponentially within the market then has the demand for full-stack development tools.&lt;/p&gt;

&lt;p&gt;There are an outsized number of tools for full-stack development but it's very tedious work to fetch them from different locations. &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Full-Stack Assistant - Developer Tools&lt;/a&gt; has made this task easier for developers by bringing the foremost used tools for full-stack development under one chrome extension.&lt;/p&gt;

&lt;p&gt;It consists of useful Development Tools and resources in one organized place.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>C++ vs Python</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Sun, 18 Apr 2021 08:31:05 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/c-vs-python-47ki</link>
      <guid>https://dev.to/saiansulsblog/c-vs-python-47ki</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;.&lt;br&gt;
In this blog we are gonna find which programming language is better.&lt;/p&gt;

&lt;p&gt;So let's start,&lt;/p&gt;

&lt;p&gt;Firstly let us know what is programming? &lt;br&gt;&lt;br&gt;
Programming is the way we can make the computer perform various tasks.&lt;/p&gt;

&lt;p&gt;What is programming language? &lt;br&gt;&lt;br&gt;
It is a formal language to perform various tasks, there are several protocols and algorithms to be followed.&lt;/p&gt;

&lt;p&gt;Let us know the types of programming languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procedural Programming Language. &lt;/li&gt;
&lt;li&gt;Functional Programming Language. &lt;/li&gt;
&lt;li&gt;Object-oriented Programming Language. &lt;/li&gt;
&lt;li&gt;Scripting Programming Language. &lt;/li&gt;
&lt;li&gt;Logic Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some names of programming language are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ Language. &lt;/li&gt;
&lt;li&gt;C Language. &lt;/li&gt;
&lt;li&gt;Pascal Language.&lt;/li&gt;
&lt;li&gt;Python Language.&lt;/li&gt;
&lt;li&gt;Java Language.&lt;/li&gt;
&lt;li&gt;Perl Language&lt;/li&gt;
&lt;li&gt;Lisp Language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now lets us know something about both the programming language:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxdIrASp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618658101893/6ORZL3PNI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxdIrASp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618658101893/6ORZL3PNI.png" alt="White Photo Gaming YouTube Thumbnail.png"&gt;&lt;/a&gt;&lt;br&gt;
It is programming language used for building high level programmed applications, developed by Bjarne Stroustrup as an extension of the C programming language, or "C with Classes". C++ supports different ways of programming like: object-oriented, functional, procedural and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DY94aMkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618657361352/knijkR4X1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DY94aMkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618657361352/knijkR4X1.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It is a programming language, it's object oriented, it's a interpreter language which is easy to learn. This can be used for software and web development also for data science.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-let-us-know-some-of-the-of-the-difference-between-two-programming-language"&gt;
  &lt;/a&gt;
  Now let us know some of the  of the difference between two programming language
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;C++&lt;/th&gt;
    &lt;th&gt;Pyhton&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;It is statically typed &lt;/td&gt;
    &lt;td&gt;It is dynamically typed &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;No scope as an backend developer &lt;/td&gt;
    &lt;td&gt;Good option for backend developer &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt; Need to write a lot of lines of code&lt;/td&gt;
    &lt;td&gt;Less lines of codes required &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;It is pre; compiled&lt;/td&gt;
    &lt;td&gt;It uses interpreter&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Looks messy but manageable as compared to python&lt;/td&gt;
    &lt;td&gt;It is easy since its object-oriented and simpler to use&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;C++ is faster than python  &lt;/td&gt;
    &lt;td&gt;Python is slower because it uses interpreter, it also determines on the type of data while running &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; It doesn't support garbage collection &lt;/td&gt;
&lt;td&gt; It supports garbage collection &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; TIOBE rating is 4 &lt;/td&gt;
&lt;td&gt; TIOBE rating is 3 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Variables are limited within loops &lt;/td&gt;
&lt;td&gt; Variables are also accessible outside loops &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Rapid Prototyping not possible because of larger code size&lt;/td&gt;
&lt;td&gt; Rapid Prototyping is possible because of the small size of the code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Not easy in contrast to Python because of its complex syntax. &lt;/td&gt;
&lt;td&gt; Program is easier to type &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These were some of the differences between these 2 programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-let-us-know-some-advantage-amp-disadvantages-of-python-amp-c"&gt;
  &lt;/a&gt;
  Now let us know some advantage &amp;amp; disadvantages of Python &amp;amp; C++
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clb38g54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618729828057/Hy85WdYbD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clb38g54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618729828057/Hy85WdYbD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-python"&gt;
  &lt;/a&gt;
  Advantages of Python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Its portable&lt;/li&gt;
&lt;li&gt;Its free and open sourced&lt;/li&gt;
&lt;li&gt;Easy to use and fast to develop language&lt;/li&gt;
&lt;li&gt;It has all the libraries that each requires&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantage-of-python"&gt;
  &lt;/a&gt;
  Disadvantage of Python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speed is slower than C++&lt;/li&gt;
&lt;li&gt;There are sometimes runtime errors&lt;/li&gt;
&lt;li&gt;Its not a good choice for mobile development&lt;/li&gt;
&lt;li&gt;Its used for functional programming&lt;/li&gt;
&lt;li&gt;Its not a good choice for memory intensive tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-c"&gt;
  &lt;/a&gt;
  Advantages of C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is also portable&lt;/li&gt;
&lt;li&gt;Object oriented&lt;/li&gt;
&lt;li&gt;Low-level Manipulation&lt;/li&gt;
&lt;li&gt;Memory Management&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-c"&gt;
  &lt;/a&gt;
  Disadvantages of C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It does not have any security feature&lt;/li&gt;
&lt;li&gt;It can't support garbage collection&lt;/li&gt;
&lt;li&gt;Difficult to debug while used for web applications&lt;/li&gt;
&lt;li&gt;It becomes complex while in a very big and high level programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, since we have covered what is python &amp;amp; C++, its difference and its advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Now lets proceed towards the conclusion&lt;/p&gt;

&lt;p&gt;So, if you have read this, you might have a clear idea about which programming language is better and which one you should use.&lt;br&gt;
Python is better beginners because of  its easy code and syntax, its a good for who want to choose their  career  in backend web development.&lt;br&gt;
Python is also leading language for data analytics and machine learning .&lt;br&gt;
But, if you want to develop applications or software then C++ is a good programming language to go for.&lt;/p&gt;

&lt;p&gt;Now, at the end you have to decide for what purpose which one you have to choose.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Solution: Remove Nth Node From End of List</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 18 Apr 2021 08:12:33 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-remove-nth-node-from-end-of-list-4njl</link>
      <guid>https://dev.to/seanpgallivan/solution-remove-nth-node-from-end-of-list-4njl</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/discuss/1164542"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-19-medium-remove-nth-node-from-end-of-list"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/"&gt;Leetcode Problem #19 (&lt;em&gt;Medium&lt;/em&gt;): Remove Nth Node From End of List&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a linked list, remove the &lt;code&gt;n&lt;/code&gt;th node from the end of the list and return its &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow up&lt;/strong&gt;: Could you do this in one pass?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1,2,3,4,5], n = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1,2,3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVNBh1PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1], n = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1,2], n = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the list is &lt;code&gt;sz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= sz &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= sz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;With a singly linked list, the &lt;em&gt;only&lt;/em&gt; way to find the end of the list, and thus the &lt;strong&gt;n&lt;/strong&gt;'th node from the end, is to actually iterate all the way to the end. The challenge here is attemping to find the solution in only one pass. A naive approach here might be to store pointers to each node in an array, allowing us to calculate the &lt;strong&gt;n&lt;/strong&gt;'th from the end once we reach the end, but that would take &lt;strong&gt;O(M) extra space&lt;/strong&gt;, where &lt;strong&gt;M&lt;/strong&gt; is the length of the linked list.&lt;/p&gt;

&lt;p&gt;A slightly less naive approach would be to only store only the last &lt;strong&gt;n+1&lt;/strong&gt; node pointers in the array. This could be achieved by overwriting the elements of the storage array in circlular fashion as we iterate through the list. This would lower the &lt;strong&gt;space complexity&lt;/strong&gt; to &lt;strong&gt;O(N+1)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to solve this problem in only one pass and &lt;strong&gt;O(1) extra space&lt;/strong&gt;, however, we would need to find a way to &lt;em&gt;both&lt;/em&gt; reach the end of the list with one pointer &lt;em&gt;and also&lt;/em&gt; reach the &lt;strong&gt;n&lt;/strong&gt;'th node from the end simultaneously with a second pointer.&lt;/p&gt;

&lt;p&gt;To do that, we can simply stagger our two pointers by &lt;strong&gt;n&lt;/strong&gt; nodes by giving the first pointer (&lt;strong&gt;fast&lt;/strong&gt;) a head start before starting the second pointer (&lt;strong&gt;slow&lt;/strong&gt;). Doing this will cause &lt;strong&gt;slow&lt;/strong&gt; to reach the &lt;strong&gt;n&lt;/strong&gt;'th node from the end at the same time that &lt;strong&gt;fast&lt;/strong&gt; reaches the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnoNPYoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BSiLKj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnoNPYoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BSiLKj0.png" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we will need access to the node &lt;em&gt;before&lt;/em&gt; the target node in order to remove the target node, we can use &lt;strong&gt;fast.next == null&lt;/strong&gt; as our exit condition, rather than &lt;strong&gt;fast == null&lt;/strong&gt;, so that we stop one node earlier.&lt;/p&gt;

&lt;p&gt;This will unfortunately cause a problem when &lt;strong&gt;n&lt;/strong&gt; is the same as the length of the list, which would make the first node the target node, and thus make it impossible to find the node &lt;em&gt;before&lt;/em&gt; the target node. If that's the case, however, we can just &lt;strong&gt;return head.next&lt;/strong&gt; without needing to stitch together the two sides of the target node.&lt;/p&gt;

&lt;p&gt;Otherwise, once we succesfully find the node &lt;em&gt;before&lt;/em&gt; the target, we can then stitch it together with the node &lt;em&gt;after&lt;/em&gt; the target, and then &lt;strong&gt;return head&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences between the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;removeNthFromEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="nf"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Introduction to Microservice Architecture</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 18 Apr 2021 08:01:00 +0000</pubDate>
      <link>https://dev.to/tamerlang/introduction-to-microservice-architecture-1p8h</link>
      <guid>https://dev.to/tamerlang/introduction-to-microservice-architecture-1p8h</guid>
      <description>&lt;p&gt;It can be very intimidating designing a backend system. There are many different variations and so many buzz words such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monolith&lt;/li&gt;
&lt;li&gt;Macroservices&lt;/li&gt;
&lt;li&gt;Miniservices&lt;/li&gt;
&lt;li&gt;Microservices&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it turns out, the process of choosing an architecture is a lot simpler. You just gotta know the pros and cons of each one and pick the one that suits your project needs. But first, you need to have a solid understanding of each architectural pattern, so this is why in this post we cover one of the most popular architectural patterns, the microservice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basics of software architecture&lt;/li&gt;
&lt;li&gt;Pros and cons of the monolith architecture&lt;/li&gt;
&lt;li&gt;Pros and cons of microservices&lt;/li&gt;
&lt;li&gt;Basics of design pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;Before we move on to the gritty details of microservices, we first have to cover the basic terminology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-software-architecture"&gt;
  &lt;/a&gt;
  What is software architecture?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Architecture, in a nutshell, is the decisions that you wish you had made early on in the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Architecture is the skeleton of the project. It is the hard decisions you make early on that determine the foundation of the project. It's this foundation that greatly influences the quality of code, ease of development and deployment, maintainability, and evolvability.&lt;/p&gt;

&lt;p&gt;Examples of architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-Server&lt;/li&gt;
&lt;li&gt;Monolith&lt;/li&gt;
&lt;li&gt;Model-View-Controller (MVC)&lt;/li&gt;
&lt;li&gt;Event-Driven&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-monolith-architecture"&gt;
  &lt;/a&gt;
  What is monolith architecture?
&lt;/h3&gt;

&lt;p&gt;You might be thinking, &lt;em&gt;isn't this post about microservices, why is this idiot talking about monolith?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason is that to understand what problems does the microservice architecture fix, we gotta first understand the problems that the old traditional monolithic architecture give.&lt;/p&gt;

&lt;p&gt;Okay, moving on. &lt;/p&gt;

&lt;p&gt;The word monolith means "composed all in one place", in software terms it means having a single application, made up of different components, combined into a single program from a single platform.&lt;/p&gt;

&lt;p&gt;Components may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorization - responsible for authorizing the user&lt;/li&gt;
&lt;li&gt;Presentation - responsible for handling HTTP requests, and responding back with HTML or JSON/XML (if it's an API)&lt;/li&gt;
&lt;li&gt;Business logic - the business logic of the application&lt;/li&gt;
&lt;li&gt;Database layer - responsible for communicating with the database&lt;/li&gt;
&lt;li&gt;Application integration - responsible for integrating with other services (using REST API or messaging) or any other data source.&lt;/li&gt;
&lt;li&gt;Notification module - responsible for sending notifications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVGm_Jeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhmz7z95897fdv67r7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVGm_Jeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhmz7z95897fdv67r7t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For years monolithic applications have been industry default because it's simple. All code is in one place, it's simple to test, and deploy. But as application size grows, there are some major drawbacks that get introduced.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-problems-with-monolithic-architecture"&gt;
  &lt;/a&gt;
  What are the problems with monolithic architecture?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maintenance - as the codebase increases, it becomes harder to make changes.&lt;/li&gt;
&lt;li&gt;The large code base intimidates developers, especially new ones. Which will lead to decreased productivity.&lt;/li&gt;
&lt;li&gt;Overloaded IDE - the larger the code base, the slower the IDE and the less productive developers will be.&lt;/li&gt;
&lt;li&gt;Startup time - the larger the application, the more time it will take to launch the application, in turn will lead to decreased productivity.&lt;/li&gt;
&lt;li&gt;Deployment - in order to update one component, your gonna have to redeploy the whole application. This might interrupt background tasks, and possibly cause problems.&lt;/li&gt;
&lt;li&gt;Scaling - monolithic applications are hard to scale because different modules may have different resource requirements.&lt;/li&gt;
&lt;li&gt;Scaling to development teams - as an application gets bigger, it would be advisable to separate developers into teams per module. For example, a team for the payments module, and another team for the products module. In a monolithic architecture, everything is coupled together, making it hard for teams to work independently. This forces the teams to coordinate their development and deployments. In turn, making it difficult to make changes and update production.&lt;/li&gt;
&lt;li&gt;Tech stack - Monolithic architecture forces you to stick to one technology (sometimes even a specific version of that technology). It's very hard to adopt new technology due to the fact that changing the language or framework will affect the whole application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-microservice"&gt;
  &lt;/a&gt;
  What is a microservice?
&lt;/h3&gt;

&lt;p&gt;The microservice architecture is an approach to software development, in which a large application is made up of a suite of modular services (i.e loosely coupled modules/components). A good analogy would be legos, where each set of blocks corresponds to a component. Additionally, a group of connected components would create a full-fledged application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MQRi63M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar48ltpk20zacd7bthj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MQRi63M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar48ltpk20zacd7bthj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each module/service has a single business goal and uses simple interfaces to communicate with other services. Another feature of services is that, unlike the monolith application where you share a single database, microservices follow the approach of database per service. This ensures loose coupling, and the service can use the database that best suits its needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-of-microservices"&gt;
  &lt;/a&gt;
  Pros of Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Enable the continuous development and deployment of large complex applications.

&lt;ul&gt;
&lt;li&gt;Improves maintainability - each service is small, so it's much easier to make changes.&lt;/li&gt;
&lt;li&gt;Better testability - services are smaller and faster to test.&lt;/li&gt;
&lt;li&gt;Better deployability - each service can be deployed independently&lt;/li&gt;
&lt;li&gt;Enables teams to be independent - teams can get full responsibility for a single or set of services. Each team can develop, test, deploy, and scale their services independently of all other teams.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Each microservice is relatively small:

&lt;ul&gt;
&lt;li&gt;Less complexity, easier to understand&lt;/li&gt;
&lt;li&gt;Smaller code base, making the IDE fast.&lt;/li&gt;
&lt;li&gt;The application starts faster, which makes developers much more productive, and speeds up deployments.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Improved fault isolation. If one service faces issues, then only that service will be affected. The other services will continue normally. Unlike monolithic architecture, one misbehaving component can bring down the entire system.&lt;/li&gt;
&lt;li&gt;Better evolvability - when developing a new service, you can use a new technology stack. Similarly, when making major changes to an existing service, you can rewrite the whole service in a new stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons-of-microservices"&gt;
  &lt;/a&gt;
  Cons of Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Developers must deal with the additional complexity of creating a distributed system:

&lt;ul&gt;
&lt;li&gt;Developers must implement the inter-service communication mechanism and deal with partial failure&lt;/li&gt;
&lt;li&gt;Implementing requests that span multiple services is more difficult.&lt;/li&gt;
&lt;li&gt;Testing the interactions between services is more difficult.&lt;/li&gt;
&lt;li&gt;Implementing requests that span multiple services requires careful coordination between the teams.&lt;/li&gt;
&lt;li&gt;Developer tools/IDEs are oriented toward building monolithic applications and don’t provide explicit support for developing distributed applications.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Deployment complexity - in production, there is additional complexity in deploying and managing a system compromised of many different services.&lt;/li&gt;
&lt;li&gt;Increased memory consumption. The microservice architecture replaces N monolithic application instances with NxM services instances. If each service runs in its own JVM (or equivalent), which is usually necessary to isolate the instances, then there is the overhead of M times as many JVM runtimes. Moreover, if each service runs on its own VM (e.g. EC2 instance), as is the case at Netflix, the overhead is even higher.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#microservice-design-patterns"&gt;
  &lt;/a&gt;
  Microservice Design Patterns
&lt;/h2&gt;

&lt;p&gt;You cannot use the microservice architecture alone, there are many different design patterns that solve the same problems in different ways, and it's your job as the developer to choose which one best fits your project. &lt;/p&gt;

&lt;p&gt;An example may be:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How to decompose the application into services?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here you can use different design patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decompose by business capability and define services corresponding to business capabilities.&lt;/li&gt;
&lt;li&gt;Decompose by domain-driven design subdomain.&lt;/li&gt;
&lt;li&gt;Decompose by verb or use case and define services that are responsible for particular actions. e.g. a &lt;code&gt;Shipping Service&lt;/code&gt; that’s responsible for shipping complete orders.&lt;/li&gt;
&lt;li&gt;Decompose by nouns or resources by defining a service that is responsible for all operations on entities/resources of a given type.
e.g. an &lt;code&gt;Account Service&lt;/code&gt; that is responsible for managing user accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-patterns"&gt;
  &lt;/a&gt;
  What are patterns?
&lt;/h3&gt;

&lt;p&gt;Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.&lt;/p&gt;

&lt;p&gt;You can't just find and copy a pattern. Patterns do not provide any code but provide a general concept for solving a specific problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-types-of-microservices-patterns"&gt;
  &lt;/a&gt;
  What are the types of microservices patterns?
&lt;/h3&gt;

&lt;p&gt;Microservices have lots of patterns, to make it easier, we have separated the patterns into three categories based on their relationships to one another.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Predecessor – a predecessor pattern is a pattern that motivates the need for this pattern. For example, the Microservice Architecture pattern is the predecessor to the rest of the patterns in the pattern language except the monolithic architecture pattern.&lt;/li&gt;
&lt;li&gt;Successor – a pattern that solves an issue that is introduced by this pattern. For example, if you apply the Microservice Architecture pattern you must then apply numerous successor patterns including service discovery patterns and the Circuit Breaker pattern.&lt;/li&gt;
&lt;li&gt;Alternative – a pattern that provides an alternative solution to this pattern. For example, the Monolithic Architecture pattern and the Microservice Architecture pattern are alternative ways of architecting an application. You pick one or the other. These relationships provide valuable guidance when using a pattern language. Applying a pattern creates issues that you must then address by applying successor patterns. The selection of patterns continuously recursively until you reach patterns with no successor. If two or more patterns are alternatives then you must typically pick just one. In many ways, this is similar to traversing a graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you now know enough to go forth in your journey of being a software architect. The journey doesn't stop here, make sure to check out &lt;a href="http://microservices.io"&gt;microservices.io&lt;/a&gt; for more details on microservices.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>architecture</category>
      <category>computerscience</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Setting up my Windows Coding Environment </title>
      <author>Hritik Pawar</author>
      <pubDate>Sun, 18 Apr 2021 07:31:41 +0000</pubDate>
      <link>https://dev.to/iamhritikpawar/setting-up-my-windows-coding-environment-2c7e</link>
      <guid>https://dev.to/iamhritikpawar/setting-up-my-windows-coding-environment-2c7e</guid>
      <description>&lt;p&gt;So a few days back I whipped my Computer so that I can do all clean start with all the latest version software and apps. So while doing the process I noted down everything I downloaded, so that if I do it again I just have to run all these commands once and it's done.&lt;br&gt;
It's a very effective method and time-saving I definitely recommend it to document everything you use.&lt;br&gt;
Here are some basic software commands to quickstart your setup.&lt;/p&gt;

&lt;p&gt;Also at the end are some tools I have listed that are very useful.&lt;/p&gt;

&lt;p&gt;Run the commands mentioned to install everything&lt;/p&gt;

&lt;p&gt;choco install  : To Install&lt;/p&gt;

&lt;p&gt;choco upgrade  : To upgrade&lt;/p&gt;

&lt;p&gt;choco uninstall  : To uninstall&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install a package manager&lt;/p&gt;

&lt;p&gt;Chocolatey :  &lt;a href="https://chocolatey.org/"&gt;https://chocolatey.org/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; @&lt;span class="s2"&gt;"%SystemRoot%&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;ystem32&lt;/span&gt;&lt;span class="se"&gt;\W&lt;/span&gt;&lt;span class="s2"&gt;indowsPowerShell&lt;/span&gt;&lt;span class="se"&gt;\v&lt;/span&gt;&lt;span class="s2"&gt;1.0&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="s2"&gt;owershell.exe"&lt;/span&gt; &lt;span class="nt"&gt;-NoProfile&lt;/span&gt; &lt;span class="nt"&gt;-InputFormat&lt;/span&gt; None &lt;span class="nt"&gt;-ExecutionPolicy&lt;/span&gt; Bypass &lt;span class="nt"&gt;-Command&lt;/span&gt; &lt;span class="s2"&gt;"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; SET &lt;span class="s2"&gt;"PATH=%PATH%;%ALLUSERSPROFILE%&lt;/span&gt;&lt;span class="se"&gt;\c&lt;/span&gt;&lt;span class="s2"&gt;hocolatey&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install latest python&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;python 

&lt;span class="c"&gt;#check python version after install&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; python &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;install latest Java&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;jdk8

&lt;span class="c"&gt;#check Java version after install&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; java &lt;span class="nt"&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install Hyper ( Hyper is a good looking command-line tool similar to Command line or Powershell)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install  &lt;/span&gt;hyper
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;install Wox ( Wox is a quick search and launch tool similar to Alfred on Mac )&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;wox
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install node.js&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;nodejs.install

&lt;span class="c"&gt;#check version after install&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install sticky notes&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;simple-sticky-notes
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install VS code&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;choco &lt;span class="nb"&gt;install &lt;/span&gt;vscode.install

&lt;span class="c"&gt;#for specific version specify the version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;vscode.install &lt;span class="nt"&gt;--version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.40.0
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```bash
#VS-CODE Extensions

1. AutoComplete Tag - sporiley.css-auto-prefix
2. CSS-Auto-Prefix - sporiley.css-auto-prefix
3. Live Server - ritwickdey.liveserver
4. Material Icon Theme - pkief.material-icon-theme
5. Adrian Theme - adriantheme.adrian-theme
6. Bunch of Language Support Apps (For any Language you use)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install SublimeText3&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;sublimetext3
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Firefox&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;firefox

&lt;span class="c"&gt;#Also install some extensions for firefox&lt;/span&gt;

1. Privacy Badger
2. HTTPS everywhere
3. Ublock origin
4. Grammarly
5. Hotspot Shield
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-tools-i-use"&gt;
  &lt;/a&gt;
  Other Tools I use.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devdocs.io/"&gt;DevDocs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://replit.com/"&gt;The collaborative browser based IDE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devhints.io/"&gt;Devhints - TL;DR for developer documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devhints.io/"&gt;Devhints - TL;DR for developer documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jdan.github.io/98.css/"&gt;98.css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.ucraft.com/free-logo-maker"&gt;Free Logo Maker | Create Your Logo Online with Ucraft&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://getterms.io/"&gt;getterms.io&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.grammarly.com/"&gt;Write your best with Grammarly.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;Notion - The all-in-one workspace for your notes, tasks, wikis, and databases.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better-looking version of this post available here 😁: &lt;a href="https://www.notion.so/hritikpawar/Coding-Setup-64e514417d3240ccb03e6480d6da72dc"&gt;https://www.notion.so/hritikpawar/Coding-Setup-64e514417d3240ccb03e6480d6da72dc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>setup</category>
    </item>
    <item>
      <title>Setup Development Environment with Docker for Monorepo 🐳</title>
      <author>Tejas Nikhar</author>
      <pubDate>Sun, 18 Apr 2021 07:16:09 +0000</pubDate>
      <link>https://dev.to/tejastn10/setup-development-environment-with-docker-for-monorepo-3433</link>
      <guid>https://dev.to/tejastn10/setup-development-environment-with-docker-for-monorepo-3433</guid>
      <description>&lt;p&gt;Docker is a set of the platform as service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries, and configuration files; they can communicate with each other through well-defined channels.&lt;/p&gt;

&lt;p&gt;In version control systems, a monorepo is a software development strategy where code for many projects is stored in the same repository.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-set-up-a-development-environment"&gt;
  &lt;/a&gt;
  Why set up a Development Environment?
&lt;/h3&gt;

&lt;p&gt;While developing a Full-Stack app we come across many things which we have to configure and are necessary for building that application. Moreover, we might be working in a team or it may be an Open-Source Project which has many contributors. As we consider these things we can definitely see, the old excuse "It was working fine on my machine...". One can also implement the development setup on their portfolio projects to showcase that they can implement their knowledge about Docker and also familiarizing themselves with it.&lt;/p&gt;

&lt;p&gt;Most of us know that we want a fast development and build process to tackle this. We set up a development environment for our project using Docker to develop seamlessly without any OS-level errors.&lt;/p&gt;

&lt;p&gt;The practice here is one way you can implement Docker. There might be many ways that might suit your scenario, so try to research more and try implementing them with the trial and error method, and remember implementing them would definitely help in the long term.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-know-your-project"&gt;
  &lt;/a&gt;
  Step 1: Know your Project
&lt;/h3&gt;

&lt;p&gt;For the demo, we are using my own Project which consists of React frontend and Nodejs Backend.&lt;/p&gt;

&lt;p&gt;Link to repo →  &lt;a href="https://github.com/tejastn10/ShoeShoppee"&gt;https://github.com/tejastn10/ShoeShoppee&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-dev-dockerfiles-to-the-project"&gt;
  &lt;/a&gt;
  Step 2: Add dev Dockerfiles to the project
&lt;/h3&gt;

&lt;p&gt;💡 NOTE: If you're using Vs-Code it provides so much help in creating and managing Dockerfiles for your environment. I'll provide a link showcasing how you can utilize Vs-Code to its full abilities and add docker configuration for your platform. Vs-Code adds all that is required such as dockerignore files and even debug configuration if specified.&lt;/p&gt;

&lt;p&gt;Link to video → &lt;a href="https://www.youtube.com/watch?v=BfzpN6drbJc"&gt;Supercharge Your Docker Development with VS Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Dockerfile&lt;/strong&gt;&lt;br&gt;
The frontend Dockerfile is located in the &lt;em&gt;frontend/web&lt;/em&gt;  folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; "/app"&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn global add typescript
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn global add less

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./package.json ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;lessc &lt;span class="nt"&gt;--js&lt;/span&gt; ./src/styles/theme.less ./src/styles/theme.css

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Backend Dockerfile&lt;/strong&gt;&lt;br&gt;
The backend Dockerfile is located in &lt;em&gt;backend&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; "/app"&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn global add typescript

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./package.json ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "server" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Nginx Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The nginx Dockerfile is located in &lt;em&gt;nginx&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./default.conf /etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These files are named &lt;em&gt;Dockerfile.dev&lt;/em&gt; for specifying that these are for development purposes only.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-dev-dockercompose-file-to-the-project"&gt;
  &lt;/a&gt;
  Step 3: Add dev Docker-compose file to the project
&lt;/h3&gt;

&lt;p&gt;The root folder contains the compose file adding all the services specified in the respective Docker files. In my project, the development docker-compose file is &lt;em&gt;docker-compose.debug.yml&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.4"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./nginx&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:80&lt;/span&gt;
  &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./backend&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/app/node_modules&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./backend:/app&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=development&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PORT=5000&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JWT_SECRET=clocked&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_URI&lt;/span&gt;
  &lt;span class="na"&gt;frontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./frontend/web&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/app/node_modules&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/app/src/styles&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./frontend/web:/app&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=development&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;REACT_APP_DEVELOPMENT_API_ENDPOINT=/devURL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-starting-the-project-with-dockercompose-up"&gt;
  &lt;/a&gt;
  Step 4: Starting the project with docker-compose up
&lt;/h3&gt;

&lt;p&gt;Now all that remains is to build and run the compose file and voila your setup is complete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; ./docker-compose.debug.yml up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwLMz5vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1vdnzlkk6nmcy53rr7j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwLMz5vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1vdnzlkk6nmcy53rr7j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This article assumes prior knowledge about Docker, not much but familiarity with the tech is sufficient. Do tell me how you would implement yours and also provide me where I can improve my configuration.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>docker</category>
      <category>node</category>
    </item>
    <item>
      <title>Building A CRUD Application Using Node JS And MongoDB Atlas</title>
      <author>Altaf Shaikh</author>
      <pubDate>Sun, 18 Apr 2021 06:41:01 +0000</pubDate>
      <link>https://dev.to/ialtafshaikh/building-a-crud-application-using-node-js-and-mongodb-atlas-2df5</link>
      <guid>https://dev.to/ialtafshaikh/building-a-crud-application-using-node-js-and-mongodb-atlas-2df5</guid>
      <description>&lt;p&gt;Hello Folks!!&lt;/p&gt;

&lt;p&gt;In this article, we will learn how we can use &lt;code&gt;MongoDB&lt;/code&gt; database in &lt;code&gt;Node JS&lt;/code&gt; using &lt;code&gt;Mogoose&lt;/code&gt; library, which is a very popular library widely used in the Industries.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article we had used the &lt;code&gt;MongoDB Cloud&lt;/code&gt; service called &lt;a href="https://www.mongodb.com/cloud"&gt;MongoDB Atlas&lt;/a&gt;, you can also use the MongoDB server running &lt;code&gt;locally&lt;/code&gt;, the process remains the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-mongoose"&gt;
  &lt;/a&gt;
  What is Mongoose?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mongoosejs.com"&gt;Mongoose&lt;/a&gt; is an &lt;code&gt;Object Data Modeling (ODM)&lt;/code&gt; library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between &lt;code&gt;objects in code&lt;/code&gt; and the representation of those &lt;code&gt;objects in MongoDB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GMG8MnCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/_aGYeBYNDs0M62mntcMkPM8noSGEEkWnGLbeKXSQH5F8aaySZ7EtY-EctZ3l7b315KnpCPs9_5eCf-MZ4w4pVz0p3jm6Ban9YI_i1tntnqO9mdUtjfE6UyweGEOSBBTzkJVK0RYc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GMG8MnCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/_aGYeBYNDs0M62mntcMkPM8noSGEEkWnGLbeKXSQH5F8aaySZ7EtY-EctZ3l7b315KnpCPs9_5eCf-MZ4w4pVz0p3jm6Ban9YI_i1tntnqO9mdUtjfE6UyweGEOSBBTzkJVK0RYc" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mongodb-vs-sql"&gt;
  &lt;/a&gt;
  MongoDb VS SQL
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt; is a schema-less NoSQL document database. It means you can store &lt;code&gt;JSON&lt;/code&gt; documents in it, and the structure of these documents can vary as it is not enforced like SQL databases. This is one of the advantages of using NoSQL as it speeds up application development and reduces the complexity of deployments.&lt;/p&gt;

&lt;p&gt;Below is an example of how data is stored in &lt;code&gt;Mongo&lt;/code&gt; vs. &lt;code&gt;SQL&lt;/code&gt; Database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIQBKiUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4_IaG34XUPlh3Wn3m3AhGQpjAW3Qj6Gfr22t1pq704bkF9gkzRfCx_VMqwusMSNns18TaGprLPMe6Gu9XZqS1_HofdA2gsGsxeQD2KyzyAEM2bB4xSs1ZhyooRl5H0i4oavISbsA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIQBKiUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4_IaG34XUPlh3Wn3m3AhGQpjAW3Qj6Gfr22t1pq704bkF9gkzRfCx_VMqwusMSNns18TaGprLPMe6Gu9XZqS1_HofdA2gsGsxeQD2KyzyAEM2bB4xSs1ZhyooRl5H0i4oavISbsA" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdQiZ3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/9-NNCrtrxHnrKbZN-ovu0tg034CJWuEI7eeuZ5XFgZQzSltwwYqFV4zupkQ8DRpvBERH0n-UYSuZLLdt7_mhtB488uNjgU5xV__qyMzwnuYzOsTcQQpSLgSi0nwcdIRmKTvZ9jfi" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdQiZ3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/9-NNCrtrxHnrKbZN-ovu0tg034CJWuEI7eeuZ5XFgZQzSltwwYqFV4zupkQ8DRpvBERH0n-UYSuZLLdt7_mhtB488uNjgU5xV__qyMzwnuYzOsTcQQpSLgSi0nwcdIRmKTvZ9jfi" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mongoose has great &lt;code&gt;documentation&lt;/code&gt;, checkout the docs &lt;a href="https://mongoosejs.com/docs/"&gt;here&lt;/a&gt; to learn more about Mongoose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mongoose-terminologies"&gt;
  &lt;/a&gt;
  Mongoose Terminologies
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#collections"&gt;
  &lt;/a&gt;
  Collections
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Collections'&lt;/code&gt; in Mongo are equivalent to tables in relational databases. They can hold multiple JSON documents.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documents"&gt;
  &lt;/a&gt;
  Documents
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Documents'&lt;/code&gt; are equivalent to records or rows of data in SQL. While a SQL row can reference data in other tables, Mongo documents usually combine that in a document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fields"&gt;
  &lt;/a&gt;
  Fields
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Fields'&lt;/code&gt; or attributes are similar to columns in a SQL table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  Schema
&lt;/h2&gt;

&lt;p&gt;While Mongo is schema-less, SQL defines a schema via the table definition. A Mongoose &lt;code&gt;'schema'&lt;/code&gt; is a document data structure (or shape of the document) that is enforced via the application layer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#models"&gt;
  &lt;/a&gt;
  Models
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Models'&lt;/code&gt; are higher-order constructors that take a schema and create an instance of a document equivalent to records in a relational database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8Bmongoose-in-action"&gt;
  &lt;/a&gt;
  ​Mongoose In Action
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#referencing"&gt;
  &lt;/a&gt;
  Referencing
&lt;/h3&gt;

&lt;p&gt;So now, we will see a subtle difference between Mongoose &lt;code&gt;Schema&lt;/code&gt; and &lt;code&gt;Model&lt;/code&gt;, after that we will start working with mongoose and we will proceed further step by step explain each concept.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongoose-schema-vs-model"&gt;
  &lt;/a&gt;
  Mongoose Schema vs. Model
&lt;/h3&gt;

&lt;p&gt;A Mongoose &lt;code&gt;model&lt;/code&gt; is a wrapper on the Mongoose &lt;code&gt;schema&lt;/code&gt;. A Mongoose schema defines the structure of the document, default values, validators, etc., whereas a Mongoose model provides an interface to the database for creating, querying, updating, deleting records, etc.&lt;/p&gt;

&lt;p&gt;Don't Jump for coding right now, have some &lt;code&gt;patience&lt;/code&gt; and for now just read the sections, in further section we will create and setup the project step by step : )&lt;/p&gt;

&lt;p&gt;Creating a Mongoose model comprises primarily of &lt;code&gt;three&lt;/code&gt; parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Referencing Mongoose&lt;/li&gt;
&lt;li&gt;Defining the Schema&lt;/li&gt;
&lt;li&gt;Exporting a Model&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-referencing-mongoose"&gt;
  &lt;/a&gt;
  1. Referencing Mongoose
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;reference&lt;/code&gt; will be the same as the one that was returned when we connected to the database, which means the schema and model definitions will not need to explicitly connect to the database, we will see &lt;code&gt;database connection&lt;/code&gt; in the further section.&lt;/p&gt;

&lt;p&gt;now, lets create a &lt;code&gt;reference&lt;/code&gt; to Schema class from mongoose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Schema = mongoose.Schema;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's move on to create our very own &lt;code&gt;Schema&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-defining-the-schema"&gt;
  &lt;/a&gt;
  2.  Defining the Schema
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const todoSchema = new Schema(
  {
    description: {
      type: String,
      required: true,
    },
  },
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we have created an instance of Schema and named it &lt;code&gt;todoSchema&lt;/code&gt;. The Schema takes object as a parameter, so we had passed an object and inside that we have a key called &lt;code&gt;description&lt;/code&gt; and its value is again an object in which we had specified we need a field description of type "&lt;code&gt;String&lt;/code&gt;", this type is in-built with mongoose you can refer more on official &lt;a href="https://mongoosejs.com/docs/schematypes.html"&gt;docs&lt;/a&gt; and also it is a required field so we had defined this with the key &lt;code&gt;required&lt;/code&gt; and with a &lt;code&gt;boolean&lt;/code&gt; value of true.&lt;/p&gt;

&lt;p&gt;Lets add more field into the schema,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const todoSchema = new Schema(
  {
    description: {
      type: String,
      required: true,
    },
    completed: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So similarly we had define a field called &lt;code&gt;completed&lt;/code&gt; and it is of type Boolean and it hold a default value false.&lt;/p&gt;

&lt;p&gt;And if you carefully looked at the structure we had passed a second parameter which is an object with a key &lt;code&gt;timestamps&lt;/code&gt; so this second parameter is a configuration object in which we had only used an inbuilt feature of mongoose which adds to additional fields to every documents namely &lt;code&gt;createdAt&lt;/code&gt; and &lt;code&gt;updatedAt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following &lt;code&gt;Schema Types&lt;/code&gt; are permitted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Array&lt;/li&gt;
&lt;li&gt;  Boolean&lt;/li&gt;
&lt;li&gt;  Buffer&lt;/li&gt;
&lt;li&gt;  Date&lt;/li&gt;
&lt;li&gt;  Mixed (A generic / flexible data type)&lt;/li&gt;
&lt;li&gt;  Number&lt;/li&gt;
&lt;li&gt;  ObjectId&lt;/li&gt;
&lt;li&gt;  String&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-exporting-a-model"&gt;
  &lt;/a&gt;
  3. Exporting a Model
&lt;/h3&gt;

&lt;p&gt;Finally, let's create the model using the &lt;code&gt;Schema&lt;/code&gt; we had created and Export the model to use it in other modules where we need to interact with the database.&lt;/p&gt;

&lt;p&gt;​We need to call the &lt;code&gt;model constructor&lt;/code&gt; on the Mongoose instance and pass it the name of the collection and a &lt;code&gt;reference&lt;/code&gt; to the schema definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Todos = mongoose.model("Todo", todoSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now finally let's export this model so that we can use this model throughout the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = Todos;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we understand how we can define a &lt;code&gt;schema&lt;/code&gt; and using schema how we can make our &lt;code&gt;model&lt;/code&gt;. So this was the major part of the Mongoose model creation and now we have to make use of this model.&lt;/p&gt;

&lt;p&gt;Next, we will see how to &lt;code&gt;setup the project&lt;/code&gt; and start writing some &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-application"&gt;
  &lt;/a&gt;
  Creating an Application
&lt;/h2&gt;

&lt;p&gt;​So let's create a project folder &lt;code&gt;node-mongoose&lt;/code&gt; and inside your project folder create a folder called &lt;code&gt;models&lt;/code&gt; and inside that create a file called &lt;code&gt;todos.js&lt;/code&gt; and paste below code into it and your &lt;code&gt;todos.js&lt;/code&gt; model file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// models/todos.js

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const todoSchema = new Schema(
  {
    description: {
      type: String,
      required: [true, "please enter task details"],
    },
    completed: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);

var Todos = mongoose.model("Todo", todoSchema);

module.exports = Todos;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Previously we had implemented this model, if you haven't followed that checkout the &lt;code&gt;Referencing Mongoose Section above&lt;/code&gt;, then you are good to continue this section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node-mongoose
  - models
     - todos.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open a terminal in &lt;code&gt;node-mongoose&lt;/code&gt; i.e root folder of your project and follow below steps:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;npm init -y&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Create a file called &lt;code&gt;app.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Install express using &lt;code&gt;npm install express&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Install mongoose using &lt;code&gt;npm install mongoose&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Install dotenv using &lt;code&gt;npm install dotenv&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Create a file called &lt;code&gt;app.js&lt;/code&gt; in root folder of your project&lt;/li&gt;
&lt;li&gt; Now follow the steps in this blog and get the &lt;code&gt;database url&lt;/code&gt; which will look like this :
&lt;code&gt;mongodb+srv://sample_user:&amp;lt;password&amp;gt;@my-sample-cluster-b3ugy.mongodb.net/&amp;lt;dbname&amp;gt;?retryWrites=true&amp;amp;w=majority&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Create a &lt;code&gt;.env&lt;/code&gt; file in the root folder&lt;/li&gt;
&lt;li&gt; Add this line in the .env file with your password and database name 
&lt;code&gt;DATABASE_URL=mongodb+srv://sample_user:&amp;lt;password&amp;gt;@my-sample-cluster-b3ugy.mongodb.net/&amp;lt;dbname&amp;gt;?retryWrites=true&amp;amp;w=majority&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Also to ensure your database connection should not visible to other if you are storing your code on a service like Github. Create a &lt;code&gt;.gitignore&lt;/code&gt; file and enter the file name &lt;code&gt;.env&lt;/code&gt; inside it. So git will not keep track of this file.&lt;/li&gt;
&lt;li&gt;Also add one more variable on new line inside &lt;code&gt;.env&lt;/code&gt; file called &lt;code&gt;PORT=3000&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your &lt;code&gt;.env&lt;/code&gt; file should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL=mongodb+srv://sample_user:&amp;lt;password&amp;gt;@my-sample-cluster-b3ugy.mongodb.net/&amp;lt;dbname&amp;gt;?retryWrites=true&amp;amp;w=majority
PORT=3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;.gitignore&lt;/code&gt; file should look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets import the packages we have install into the &lt;code&gt;app.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets load the environment variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotenv.config({ path: ".env" });
const PORT = process.env.PORT;
const dbURI = process.env.DATABASE_URL;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets import the model &lt;code&gt;todos&lt;/code&gt; we have created inside the &lt;code&gt;models/&lt;/code&gt; folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//model
const Tasks = require("./models/todos");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now , lets create a &lt;code&gt;database connection&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const connect = mongoose.connect(dbURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

connect.then(
  (db) =&amp;gt; {
    console.log("Connected Successfully to Mongodb Server");

  },
  (err) =&amp;gt; {
    console.log(err);
  }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets initialize the &lt;code&gt;express app&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets add a &lt;code&gt;middleware&lt;/code&gt; which converts the request body into json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally lets create a listener to accept incoming HTTP request on specific port:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(PORT, () =&amp;gt; {
  console.log(`Server is running at http://localhost:${PORT}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Final &lt;code&gt;app.js&lt;/code&gt; should look like this:&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");

dotenv.config({ path: ".env" });
const PORT = process.env.PORT;
const dbURI = process.env.DATABASE_URL;

//model
const Tasks = require("./models/todos");

const connect = mongoose.connect(dbURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

connect.then(
  (db) =&amp;gt; {
    console.log("Connected Successfully to Mongodb Server");

  },
  (err) =&amp;gt; {
    console.log(err);
  }
);

const app = express();

app.use(express.json());

app.listen(PORT, () =&amp;gt; {
  console.log(`Server is running at http://localhost:${PORT}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we are good to go with basic &lt;code&gt;CRUD&lt;/code&gt; operations.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#mongoose-crud-operations"&gt;
  &lt;/a&gt;
  Mongoose CRUD Operations
&lt;/h2&gt;

&lt;p&gt;Mongoose has a flexible &lt;code&gt;API&lt;/code&gt; and provides many ways to accomplish a task. We will not focus on the variations because that is out of scope for this article, but remember that most of the operations can be done in more than one way either syntactically or via the application architecture.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-record"&gt;
  &lt;/a&gt;
  Create Record
&lt;/h2&gt;

&lt;p&gt;Let's &lt;code&gt;create&lt;/code&gt; a todo and &lt;code&gt;save&lt;/code&gt; into our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let newTask = {
      description: "task added using create",
};

Tasks.create(newTask)
  .then((data) =&amp;gt; {
      console.log(data);
   })
   .catch((err) =&amp;gt; {
      console.log(err);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly we had created a &lt;code&gt;newTask&lt;/code&gt; object with description of a todo which is a mandatory field required to create a document in the database. Mongoose model has a &lt;code&gt;create()&lt;/code&gt; method which is a &lt;code&gt;promise&lt;/code&gt; and on successful we get the response in data and in-case of failure it is catched and error is  displayed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-all-tasks"&gt;
  &lt;/a&gt;
  Find All Tasks
&lt;/h2&gt;

&lt;p&gt;To &lt;code&gt;get&lt;/code&gt; all the documents stored inside a collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//all tasks

Tasks.find({})
   .then((data) =&amp;gt; {
       console.log("All tasks", data);
    })
    .catch((err) =&amp;gt; {
       console.log(err);
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#find-a-single-document-or-record"&gt;
  &lt;/a&gt;
  Find A Single Document or Record
&lt;/h2&gt;

&lt;p&gt;Let's see how we can find a &lt;code&gt;single&lt;/code&gt; document from the collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; //find with condition

  Tasks.find({ completed: false })
    .then((data) =&amp;gt; {
         console.log("All tasks", data);
     })
     .catch((err) =&amp;gt; {
         console.log(err);
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-a-document"&gt;
  &lt;/a&gt;
  Update a Document
&lt;/h2&gt;

&lt;p&gt;Let's modify the record by &lt;code&gt;updating&lt;/code&gt; the &lt;strong&gt;status&lt;/strong&gt; &lt;code&gt;completed:false&lt;/code&gt; to &lt;code&gt;completed:true&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Tasks.findByIdAndUpdate({ _id: req.params.id },{
            $set: {completed:true},
          },
          { new: true, useFindAndModify: false } //get updated result
       )
       .then((data) =&amp;gt; {
         console.log("Updated todo data", data);
       })
       .catch((err) =&amp;gt; {
         console.log(err);
       });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delete-a-document-from-the-collection"&gt;
  &lt;/a&gt;
  Delete a document from the collection
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; //delete all tasks
     Tasks.remove({});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// delete specific task

    Tasks.findByIdAndRemove(task_id)
       .then((data) =&amp;gt; {
         console.log("All tasks", data);
       })
       .catch((err) =&amp;gt; {
         console.log(err);
       });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example replace the &lt;code&gt;task_id&lt;/code&gt; with the value of &lt;code&gt;_id&lt;/code&gt; of a task in mongoDB databse which looks like &lt;code&gt;5a78fe3e2f44ba8f85a2409a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So we have seen all  the &lt;code&gt;CRUD&lt;/code&gt; operations namely, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's use them in our &lt;code&gt;app.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");

dotenv.config({ path: ".env" });
const PORT = process.env.PORT;
const dbURI = process.env.DATABASE_URL;

//model
const Tasks = require("./models/todos");

const connect = mongoose.connect(dbURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

connect.then(
  (db) =&amp;gt; {
    console.log("Connected Successfully to Mongodb Server");

    //all tasks
    Tasks.find({})
      .then((data) =&amp;gt; {
        console.log("All tasks", data);
      })
      .catch((err) =&amp;gt; {
        console.log(err);
      });

    // similary use all the other operation here

    // CAUTION: don't put all the operation together, use one operation
    // at a time
  },
  (err) =&amp;gt; {
    console.log(err);
  }
);

const app = express();

app.use(express.json());

app.listen(PORT, () =&amp;gt; {
  console.log(`Server is running at http://localhost:${PORT}`);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run your &lt;code&gt;server&lt;/code&gt; by using the following command:&lt;/p&gt;

&lt;p&gt;first install,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodemon app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Congratulations !!&lt;/code&gt; We had learned the &lt;code&gt;fundamentals&lt;/code&gt; of Mongoose and How we can use it in Node JS.&lt;/p&gt;

&lt;p&gt;I hope this article &lt;code&gt;helped&lt;/code&gt; you to understand the core idea : ) Do give a &lt;code&gt;like&lt;/code&gt; to this article to &lt;code&gt;motivate&lt;/code&gt; me to write more : D&lt;br&gt;
​&lt;/p&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Easy Lazy Loading with React &amp; Intersection Observer API</title>
      <author>AnxinYang</author>
      <pubDate>Sun, 18 Apr 2021 06:26:40 +0000</pubDate>
      <link>https://dev.to/anxinyang/easy-lazy-loading-with-react-intersection-observer-api-1dll</link>
      <guid>https://dev.to/anxinyang/easy-lazy-loading-with-react-intersection-observer-api-1dll</guid>
      <description>&lt;p&gt;In this article, I'll write a React hook and a React component that will help you achieve lazy loading in ReactJS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-intersection-observer-api"&gt;
  &lt;/a&gt;
  What is Intersection Observer API?
&lt;/h2&gt;

&lt;p&gt;Basically, Intersection Observer will monitor elements and check if they're intersect with the viewport of an document or, most of time, the browser viewport.&lt;/p&gt;

&lt;p&gt;For more information, please refer to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-react-hook"&gt;
  &lt;/a&gt;
  Create the React hook
&lt;/h2&gt;

&lt;p&gt;First, let's start with an empty hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can add a state that will tell us if the component is intersecting and return that state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need a ref that can hold the observer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need a target element for the observer, let's add a parameter and state to the hook function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can create a observer to observe the Element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And don't forget to disconnect the observer once the component is unmounted or the target element is changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to be able to configure the observer, so let's add the options to the hook function as a parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserverInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about the options, please refer to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last, since we usually don't want to remove the content we've rendered, let's add a parameter that allow us to choice if we want the observer to be disconnected after the target element is intersected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserverInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-lazy-loading-component"&gt;
  &lt;/a&gt;
  Create a Lazy Loading Component
&lt;/h2&gt;

&lt;p&gt;Once we have the hook we need, it's very simple to create a lazy loading componentwith it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LazyLoadProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt;
    &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;CSSProperties&lt;/span&gt;
    &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LazyLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LazyLoadProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rootMargin&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tag&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, here we go. &lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please let me know if there is any issue I made.&lt;/p&gt;

&lt;p&gt;The hook and the Lazyload component are included in my npm package &lt;a href="https://www.npmjs.com/package/ax-react-lib"&gt;ax-react-lib&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>hooks</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understand how linux containers works with practical examples</title>
      <author>Ivan Moreno</author>
      <pubDate>Sun, 18 Apr 2021 06:02:41 +0000</pubDate>
      <link>https://dev.to/ivanmoreno/understand-how-linux-containers-works-with-practical-examples-2ng2</link>
      <guid>https://dev.to/ivanmoreno/understand-how-linux-containers-works-with-practical-examples-2ng2</guid>
      <description>&lt;p&gt;Nowadays a bast majority of server workloads run using linux containers because of his flexibility and lightweight but have you ever think how does linux containers works. In this tutorial we will demystify how does linux containers works with some practical examples. Linux containers works thanks two kernel features: &lt;code&gt;namespaces&lt;/code&gt; and &lt;code&gt;cgroups&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#linux-namespaces"&gt;Linux Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linux-control-groups-cgroups"&gt;Linux control groups (cgroups)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#container-fundamentals-key-technologies"&gt;Container Fundamentals (key technologies)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#process-namespace-fundamentals"&gt;Process namespace fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filesystem---overlayfs-fundamentals"&gt;Filesystem - Overlayfs fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#networking---linux-bridge-fundamentals"&gt;Networking - Linux bridge fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#control-groups-cgroups-fundamentals"&gt;Control groups (cgroups) fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-container-from-scratch"&gt;Create a container from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#inspect-namespaces-within-a-docker-container"&gt;Inspect Namespaces within a docker container&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-docker-ce"&gt;Install docker CE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inspect-docker-network"&gt;Inspect Docker Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inspect-cgroups-in-a-docker-container"&gt;Inspect cgroups in a docker container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inspect-overlay-fs-in-a-docker-container"&gt;Inspect overlay fs in a docker container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inspect-docker-process-namespace"&gt;Inspect docker process namespace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conslusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#linux-namespaces"&gt;
  &lt;/a&gt;
  Linux Namespaces
&lt;/h1&gt;

&lt;p&gt;A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource.  Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes. One use of namespaces is to implement containers. [&lt;a href="https://man7.org/linux/man-pages/man7/namespaces.7.html"&gt;1&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Currently the linux kernel have 8 types of namespaces:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Namespace&lt;/th&gt;
&lt;th&gt;Isolates&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cgroup&lt;/td&gt;
&lt;td&gt;Cgroup root directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IPC&lt;/td&gt;
&lt;td&gt;System V IPC, POSIX message queues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;Network devices, stacks, ports, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mount&lt;/td&gt;
&lt;td&gt;Mount points&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PID&lt;/td&gt;
&lt;td&gt;Process IDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Boot and monotonic clocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;User and group IDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UTS&lt;/td&gt;
&lt;td&gt;Hostname and NIS domain name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#linux-control-groups-cgroups"&gt;
  &lt;/a&gt;
  Linux control groups (cgroups)
&lt;/h1&gt;

&lt;p&gt;Cgroups allow you to allocate resources — such as CPU time, system memory, network bandwidth, or combinations of these resources — among user-defined groups of tasks (processes) running on a system. You can monitor the cgroups you configure, deny cgroups access to certain resources, and even reconfigure your cgroups dynamically on a running system. [&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/ch01"&gt;2&lt;/a&gt;]&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#container-fundamentals-key-technologies"&gt;
  &lt;/a&gt;
  Container Fundamentals (key technologies)
&lt;/h1&gt;

&lt;p&gt;In this section we gonna make some practices with the following key technologies that make possible the usage of containers in linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#process-namespace-fundamentals"&gt;Process namespace fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filesystem---overlayfs-fundamentals"&gt;Filesystem - Overlayfs fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#networking---linux-bridge-fundamentals"&gt;Networking - Linux bridge fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#control-groups-cgroups-fundamentals"&gt;Control groups (cgroups) fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NOTE: &lt;strong&gt;&lt;em&gt;This tutorial was made using a VM with 1GB of ram and 1vCPU using debian 10 buster with kernel &lt;code&gt;4.19.0-16-amd64&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-namespace-fundamentals"&gt;
  &lt;/a&gt;
  Process namespace fundamentals
&lt;/h2&gt;

&lt;p&gt;A process namespace isolate a running command from the host. Let's see how to implement a process namespace in linux.&lt;/p&gt;

&lt;p&gt;List  process namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lsns &lt;span class="nt"&gt;-t&lt;/span&gt; pid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get the PID of the current terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt; &lt;span class="c"&gt;# parent PID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Launch a new zsh terminal using namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unshare &lt;span class="nt"&gt;--fork&lt;/span&gt; &lt;span class="nt"&gt;--pid&lt;/span&gt; &lt;span class="nt"&gt;--mount-proc&lt;/span&gt; zsh
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;300 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;300 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;300 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;300 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;300 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;top
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the process tree from the parent&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ps f &lt;span class="nt"&gt;-g&lt;/span&gt; &amp;lt;PPID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lsns &lt;span class="nt"&gt;-t&lt;/span&gt; pid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#filesystem-overlay-fs-fundamentals"&gt;
  &lt;/a&gt;
  Filesystem - Overlay FS fundamentals
&lt;/h2&gt;

&lt;p&gt;Containers need to have a filesystem, one of the most used filesystem for containers is &lt;code&gt;overlay&lt;/code&gt; who can mount with &lt;code&gt;layes&lt;/code&gt; and merge in a single directory, the lower layers are read only and all changes are made on the upper layer. Let's see how does overlay fs works.&lt;/p&gt;

&lt;p&gt;Create directories&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;lower1,lower2,upper,work,merged&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create some files in lower directories&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Lower 1 - original"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; lower1/file1.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Lower 2 - original"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; lower2/file2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create overlay FS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-t&lt;/span&gt; overlay &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nv"&gt;lowerdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/lower1:/tmp/lower2,upperdir&lt;span class="o"&gt;=&lt;/span&gt;/tmp/upper,workdir&lt;span class="o"&gt;=&lt;/span&gt;/tmp/work none /tmp/merged
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create, modify files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/merged
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"file created in merged directory"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; file_created.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"file 1 modified"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; file1.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Umount overlay fs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
&lt;span class="nv"&gt;$ &lt;/span&gt;umount /tmp/merged
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect lower and upper dirs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find &lt;span class="nt"&gt;-name&lt;/span&gt; &lt;span class="s1"&gt;'*.txt'&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f 2&amp;gt;/dev/null | &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;fn&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;&amp;gt; cat &lt;/span&gt;&lt;span class="nv"&gt;$fn&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#networking-linux-bridge-fundamentals"&gt;
  &lt;/a&gt;
  Networking - Linux bridge fundamentals
&lt;/h2&gt;

&lt;p&gt;Linux container uses network namespaces to isolate the network from the host, this is possible implementing a bridge interface that acts like network switch, and every container connect to that interface with his own ip address. Let's see how does linux bridge and network namespaces works.&lt;/p&gt;

&lt;p&gt;Create a Network Virtual bridge&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;add br-net &lt;span class="nb"&gt;type &lt;/span&gt;bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List Network Interfaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assign an IP Address to bridge interface&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip addr add 192.168.55.1/24 brd + dev br-net
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bring UP the bridge interface&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;br-net up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create 2 Network Namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip netns add ns1
&lt;span class="nv"&gt;$ &lt;/span&gt;ip netns add ns2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a Virtual Ethernet cable pair&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;add veth-ns1 &lt;span class="nb"&gt;type &lt;/span&gt;veth peer name br-ns1
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;add veth-ns2 &lt;span class="nb"&gt;type &lt;/span&gt;veth peer name br-ns2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assign veth to namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;veth-ns1 netns ns1
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;veth-ns2 netns ns2
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;br-ns1 master br-net
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;br-ns2 master br-net
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assign IP address to veth within namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; ns1 addr add 192.168.55.2/24 dev veth-ns1
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; ns2 addr add 192.168.55.3/24 dev veth-ns2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bring UP veth interfaces within Namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; ns1 &lt;span class="nb"&gt;link set &lt;/span&gt;veth-ns1 up
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; ns2 &lt;span class="nb"&gt;link set &lt;/span&gt;veth-ns2 up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bring UP bridge veth in the local host&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;dev br-ns1 up
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;dev br-ns2 up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure default route within namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; ns1 route add default via 192.168.55.1 dev veth-ns1 
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; ns2 route add default via 192.168.55.1 dev veth-ns2 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enable IP forward in the host&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure &lt;code&gt;MASQUERADE&lt;/code&gt; in the host for &lt;code&gt;192.168.55.0/24&lt;/code&gt; subnet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;iptables &lt;span class="nt"&gt;-t&lt;/span&gt; nat &lt;span class="nt"&gt;-A&lt;/span&gt; POSTROUTING &lt;span class="nt"&gt;-s&lt;/span&gt; 192.168.55.0/24 &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; br-net &lt;span class="nt"&gt;-j&lt;/span&gt; MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#control-groups-cgroups-fundamentals"&gt;
  &lt;/a&gt;
  Control groups (cgroups) fundamentals
&lt;/h2&gt;

&lt;p&gt;Control groups or cgroups are used by containers to limit the usage of resource in the host machine. Let's see how does cgroups works.&lt;/p&gt;

&lt;p&gt;Create cgroups directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /mycg/&lt;span class="o"&gt;{&lt;/span&gt;memory,cpusets,cpu&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mount cgroups directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-t&lt;/span&gt; cgroup &lt;span class="nt"&gt;-o&lt;/span&gt; memory none /mycg/memory
&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-t&lt;/span&gt; cgroup &lt;span class="nt"&gt;-o&lt;/span&gt; cpu,cpuacct none /mycg/cpu
&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-t&lt;/span&gt; cgroup &lt;span class="nt"&gt;-o&lt;/span&gt; cpuset none /mycg/cpusets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create new directories under CPU controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /mycg/cpu/user&lt;span class="o"&gt;{&lt;/span&gt;1..3&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assign CPU shares to every user (This example uses 1vCPU)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# 2048 / (2048 + 512 + 80) = 77%&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;2048 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /mycg/cpu/user1/cpu.shares
&lt;span class="c"&gt;# 512 / (2048 + 512 + 80) = 19%&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;512 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /mycg/cpu/user2/cpu.shares
&lt;span class="c"&gt;# 80 / (2048 + 512 + 80) = 3%&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;80 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /mycg/cpu/user3/cpu.shares
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create artificial load&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /dev/urandom &amp;amp;&amp;gt; /dev/null &amp;amp;
&lt;span class="nv"&gt;$ PID1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /dev/urandom &amp;amp;&amp;gt; /dev/null &amp;amp;
&lt;span class="nv"&gt;$ PID2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /dev/urandom &amp;amp;&amp;gt; /dev/null &amp;amp;
&lt;span class="nv"&gt;$ PID2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assign process to every user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PID1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /mycg/cpu/user1/tasks
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PID2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /mycg/cpu/user2/tasks
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PID3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /mycg/cpu/user3/tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Monitoring process&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;top
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-a-container-from-scratch"&gt;
  &lt;/a&gt;
  Create a container from scratch
&lt;/h1&gt;

&lt;p&gt;So far we know how does linux namespaces works, now lets create a container using overlayfs, network namespaces, cgroups and process namespaces from scratch. Let's see how a linux container is created. &lt;/p&gt;

&lt;p&gt;Download and extract debian container fs from docker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull debian
&lt;span class="nv"&gt;$ &lt;/span&gt;docker save debian &lt;span class="nt"&gt;-o&lt;/span&gt; debian.tar
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;debian_layer
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; fs/&lt;span class="o"&gt;{&lt;/span&gt;lower,upper,work,merged&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tar &lt;/span&gt;xf debian.tar &lt;span class="nt"&gt;-C&lt;/span&gt; debian_layer
&lt;span class="nv"&gt;$ &lt;/span&gt;find debian_layer &lt;span class="nt"&gt;-name&lt;/span&gt; &lt;span class="s1"&gt;'layer.tar'&lt;/span&gt; &lt;span class="nt"&gt;-exec&lt;/span&gt; &lt;span class="nb"&gt;tar &lt;/span&gt;xf &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; fs/lower &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create bridge interface&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip netns add cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;add br-cnt &lt;span class="nb"&gt;type &lt;/span&gt;bridge
&lt;span class="nv"&gt;$ &lt;/span&gt;ip addr add 192.168.22.1/24 brd + dev br-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;br-cnt up
&lt;span class="nv"&gt;$ &lt;/span&gt;sysctl &lt;span class="nt"&gt;-w&lt;/span&gt; net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;$ &lt;/span&gt;iptables &lt;span class="nt"&gt;-t&lt;/span&gt; nat &lt;span class="nt"&gt;-I&lt;/span&gt; POSTROUTING 1 &lt;span class="nt"&gt;-s&lt;/span&gt; 192.168.22.0/24 &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; br-cnt &lt;span class="nt"&gt;-j&lt;/span&gt; MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create overlay Filesystem from debian container fs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-vt&lt;/span&gt; overlay &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nv"&gt;lowerdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./fs/lower,upperdir&lt;span class="o"&gt;=&lt;/span&gt;./fs/upper,workdir&lt;span class="o"&gt;=&lt;/span&gt;./fs/work none ./fs/merged
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mounting Virtual File Systems&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nt"&gt;--bind&lt;/span&gt; /dev ./fs/merged/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Launch process namespace within &lt;code&gt;fs/merged&lt;/code&gt; fs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unshare &lt;span class="nt"&gt;--fork&lt;/span&gt; &lt;span class="nt"&gt;--pid&lt;/span&gt; &lt;span class="nt"&gt;--net&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/netns/cnt &lt;span class="nb"&gt;chroot&lt;/span&gt; ./fs/merged &lt;span class="se"&gt;\&lt;/span&gt;
    /usr/bin/env &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin:/usr/bin:/sbin:/usr/sbin &lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TERM&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    /bin/bash &lt;span class="nt"&gt;--login&lt;/span&gt; +h
&lt;span class="c"&gt;# Mount proc within container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mount &lt;span class="nt"&gt;-vt&lt;/span&gt; proc proc /proc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Connect the container with &lt;code&gt;br-cnt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;add veth-cnt &lt;span class="nb"&gt;type &lt;/span&gt;veth peer name br-veth-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;veth-cnt netns cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;br-veth-cnt master br-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link set &lt;/span&gt;br-veth-cnt up
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; cnt addr add 192.168.22.2/24 dev veth-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; cnt &lt;span class="nb"&gt;link set &lt;/span&gt;lo up
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; cnt &lt;span class="nb"&gt;link set &lt;/span&gt;veth-cnt up
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; cnt route add default via 192.168.22.1 dev veth-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip netns &lt;span class="nb"&gt;exec &lt;/span&gt;cnt ping &lt;span class="nt"&gt;-c&lt;/span&gt; 3 1.1.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mount cgroup&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /sys/fs/cgroup/memory/cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;10000000 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/cnt/memory.limit_in_bytes
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;0 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/cnt/memory.swappiness
&lt;span class="nv"&gt;$ CHILD_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;lsns &lt;span class="nt"&gt;-t&lt;/span&gt; pid | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"[/]bin/bash --login +h"&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print $4}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$CHILD_PID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/memory/cnt/tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run commands within container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt update
&lt;span class="nv"&gt;$ &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;nginx procps curl &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;nginx
&lt;span class="nv"&gt;$ &lt;/span&gt;curl 127.0.0.1:80
&lt;span class="nv"&gt;$ &lt;/span&gt;curl 192.168.22.2:80 &lt;span class="c"&gt;# from host&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt; &amp;lt;/dev/zero &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; 15m&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;15&lt;span class="o"&gt;)&lt;/span&gt; | &lt;span class="nb"&gt;tail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clean all&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;umount /proc &lt;span class="c"&gt;# within container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="c"&gt;# within container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;umount &lt;span class="nt"&gt;-R&lt;/span&gt; ./fs/merged
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;del br-veth-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nb"&gt;link &lt;/span&gt;del br-cnt
&lt;span class="nv"&gt;$ &lt;/span&gt;ip netns del cnt &lt;span class="c"&gt;# grep cnt /proc/mounts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#inspect-namespaces-within-a-docker-container"&gt;
  &lt;/a&gt;
  Inspect Namespaces within a docker container
&lt;/h1&gt;

&lt;p&gt;Fortunately for us there is a program that simplifies the usage of containers, for us this program is &lt;code&gt;docker&lt;/code&gt; who manage the life-cycle of running a container. Let's see how does &lt;code&gt;docker&lt;/code&gt; implement the namespaces running a container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-docker-ce"&gt;
  &lt;/a&gt;
  Install docker CE
&lt;/h2&gt;

&lt;p&gt;Install docker community edition from official script in &lt;a href="https://get.docker.com"&gt;get.docker.com&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class="nt"&gt;-o&lt;/span&gt; install_docker.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;less install_docker.sh &lt;span class="c"&gt;# optional&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sh install_docker.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; docker &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;newgrp docker &lt;span class="c"&gt;# Or logout and login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inspect-docker-network"&gt;
  &lt;/a&gt;
  Inspect Docker Network
&lt;/h2&gt;

&lt;p&gt;Create a bridge network using docker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker network create mynet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect bridge network, see subnet using IP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ BR_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;ip &lt;span class="nb"&gt;link&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s1"&gt;'@'&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/br-/{gsub(":",""); print $2}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ip addr show &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BR_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect Docker bridge network, see subnet using docker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker network inspect mynet | &lt;span class="nb"&gt;grep &lt;/span&gt;Subnet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run an nginx web server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--name&lt;/span&gt; nginx &lt;span class="nt"&gt;--net&lt;/span&gt; mynet &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect network namespace from &lt;code&gt;nginx&lt;/code&gt; container&lt;/p&gt;

&lt;p&gt;Create symlink from &lt;code&gt;/proc&lt;/code&gt; to &lt;code&gt;/var/run/netns&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ CONTAINER_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker container ps | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/nginx/{print $1}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ CONTAINER_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker inspect &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s1"&gt;'{{.State.Pid}}'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /var/run/netns/
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-sfT&lt;/span&gt; /proc/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_PID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/ns/net /var/run/netns/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check network interface within namespace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip netns list
&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;link &lt;/span&gt;show eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check IP address of nginx container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ip &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; addr show eth0
&lt;span class="nv"&gt;$ &lt;/span&gt;docker container inspect nginx | &lt;span class="nb"&gt;grep &lt;/span&gt;IPAddress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check port forwarding from 8080 to 80&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;iptables &lt;span class="nt"&gt;-t&lt;/span&gt; nat &lt;span class="nt"&gt;-nvL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inspect-cgroups-in-a-docker-container"&gt;
  &lt;/a&gt;
  Inspect cgroups in a docker container
&lt;/h2&gt;

&lt;p&gt;Run a Ubuntu container with limited resources&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--name&lt;/span&gt; test_cg &lt;span class="nt"&gt;--memory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10m &lt;span class="nt"&gt;--cpus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.1 &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See cgroup fs hierarchy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ CONTAINER_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker container ps &lt;span class="nt"&gt;--no-trunc&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/test_cg/{print $1}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;tree /sys/fs/cgroup/&lt;span class="o"&gt;{&lt;/span&gt;memory,cpu&lt;span class="o"&gt;}&lt;/span&gt;/docker/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See attached task to container cgroup&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container top test_cg | &lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 1 | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt; &lt;span class="c"&gt;# container parent PID&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /sys/fs/cgroup/&lt;span class="o"&gt;{&lt;/span&gt;memory,cpu&lt;span class="o"&gt;}&lt;/span&gt;/docker/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/tasks &lt;span class="c"&gt;# the same as container parent PID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Monitoring the container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container stats test_cg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate CPU load&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /dev/urandom &amp;amp;&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate Memory load&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt; &amp;lt;/dev/zero &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; 50m&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;30&lt;span class="o"&gt;)&lt;/span&gt; | &lt;span class="nb"&gt;tail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inspect-overlay-fs-in-a-docker-container"&gt;
  &lt;/a&gt;
  Inspect overlay fs in a docker container
&lt;/h2&gt;

&lt;p&gt;Run a ubuntu container with limited resources&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--name&lt;/span&gt; test_overlayfs &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; debian
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: &lt;strong&gt;&lt;em&gt;The merged layer is the actual container Filesystem&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inspect lower layers with tree and less&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container inspect test_overlayfs &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s1"&gt;'{{.GraphDriver.Data.LowerDir}}'&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN{FS=":"}{for (i=1; i&amp;lt;= NF; i++) print $i}'&lt;/span&gt; | &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;low&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;tree &lt;span class="nt"&gt;-L&lt;/span&gt; 2 &lt;span class="nv"&gt;$low&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; | less
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect upper layer (It's empty)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container inspect test_overlayfs &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s1"&gt;'{{.GraphDriver.Data.UpperDir}}'&lt;/span&gt; | &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;upper&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;tree &lt;span class="nv"&gt;$upper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; | less
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run command withing the container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class="nb"&gt;install &lt;/span&gt;nmap &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect (again) upper layer (now it's not empty)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container inspect test_overlayfs &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s1"&gt;'{{.GraphDriver.Data.UpperDir}}'&lt;/span&gt; | &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;upper&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;tree &lt;span class="nv"&gt;$upper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; | less
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inspect-docker-process-namespace"&gt;
  &lt;/a&gt;
  Inspect docker process namespace
&lt;/h2&gt;

&lt;p&gt;Run docker container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--name&lt;/span&gt; test_ps &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Launch process within container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;600 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;600 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;600 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;600 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;600 &amp;amp;
&lt;span class="nv"&gt;$ &lt;/span&gt;top
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See container tree process from container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ CONTAINER_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker container top test_ps | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'2p'&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ps f &lt;span class="nt"&gt;-g&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER_PID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List PID namespaces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lsns &lt;span class="nt"&gt;-t&lt;/span&gt; pid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See process using docker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker container top test_ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this tutorial we create our first container from scratch understanding what happen behind the scenes when we run a container. I hope this tutorial helps you to understand the technologies behind the linux containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ivanmorenoj/how-containers-works"&gt;Source code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>linux</category>
      <category>kubernetes</category>
      <category>containers</category>
    </item>
    <item>
      <title>I made a 'new tab' browser extension/theme</title>
      <author>Virej Dasani</author>
      <pubDate>Sun, 18 Apr 2021 05:46:38 +0000</pubDate>
      <link>https://dev.to/virejdasani/i-made-a-browser-new-tab-theme-1pkd</link>
      <guid>https://dev.to/virejdasani/i-made-a-browser-new-tab-theme-1pkd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#luminous-new-tab"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/virejdasani/LuminousNewTab/blob/master/README.md"&gt;Luminous New Tab&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;is a beautiful and open-source new tab browser extension that has an animated gradient background. New tabs will show the time, weather and let you do Google searches too! &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BWXQjgYy9-w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Luminous New Tab is available for &lt;a href="https://chrome.google.com/webstore/detail/luminous-new-tab/gakanaedbiohimbhbddcilejbpdmobdo"&gt;Google Chrome&lt;/a&gt; and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/luminous-tab/"&gt;Firefox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I made Luminous New Tab because of the lack of minimal, ad-free New Tab extensions. I feel it gives a nice vibe to the browser and is quite useful. &lt;br&gt;
Let me know what you think about Luminous New Tab&lt;br&gt;
You can request features and report bug &lt;a href="https://github.com/virejdasani/LuminousNewTab/issues/new"&gt;here&lt;/a&gt;&lt;br&gt;
And if you decide to get it for your browser, a &lt;a href="https://chrome.google.com/webstore/detail/luminous-new-tab/gakanaedbiohimbhbddcilejbpdmobdo/reviews"&gt;review&lt;/a&gt;, and a star to &lt;a href="https://github.com/virejdasani/LuminousNewTab"&gt;the repo&lt;/a&gt; on GitHub thanks!&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#download-for-chrome-or-firefox"&gt;
  &lt;/a&gt;
  Download for &lt;a href="https://chrome.google.com/webstore/detail/luminous-new-tab/gakanaedbiohimbhbddcilejbpdmobdo"&gt;Chrome&lt;/a&gt; or &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/luminous-tab/"&gt;Firefox&lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#luminous-new-tab-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/virejdasani/LuminousNewTab/"&gt;Luminous New Tab on GitHub&lt;/a&gt;
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#follow-me-on-dev"&gt;
  &lt;/a&gt;
  Follow me on &lt;a href="https://dev.to/virejdasani/"&gt;Dev&lt;/a&gt;
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#check-out-some-of-my-other-projects-and-follow-me-on-my-socials-from-my-website-here"&gt;
  &lt;/a&gt;
  Check out some of my other projects and follow me on my socials from my website &lt;a href="http://www.virej.ml/"&gt;here&lt;/a&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>✨10 CMD Commands to make you stand out!✨</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Sun, 18 Apr 2021 05:34:46 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/10-cmd-commands-to-make-you-stand-out-5hgk</link>
      <guid>https://dev.to/kaiwalyakoparkar/10-cmd-commands-to-make-you-stand-out-5hgk</guid>
      <description>&lt;p&gt;In this blog, I am not going to describe the common commands. Here I am going to tell you the commands which will help you stand out of the crowd using a command prompt&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-assoc"&gt;
  &lt;/a&gt;
  📌 1. Assoc:
&lt;/h2&gt;

&lt;p&gt;Most files in Windows are associated with a specific program that is assigned to open the file by default. At times, remembering these associations can become confusing. You can remind yourself by entering the command assoc to display a full list of filename extensions and program associations.&lt;br&gt;
You can also extend the command to change file associations. For example, &lt;code&gt;assoc .txt=&lt;/code&gt; will change the file association for text files to whatever program you enter after the equal sign.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-cipher"&gt;
  &lt;/a&gt;
  📌 2. Cipher:
&lt;/h2&gt;

&lt;p&gt;Deleting files on a mechanical hard drive doesn't really delete them at all. Instead, it marks the files as no longer accessible and the space they took up as free. The files remain recoverable until the system overwrites them with new data, which can take some time.&lt;br&gt;
The &lt;code&gt;cipher&lt;/code&gt; command, however, wipes a directory by writing random data to it. To wipe your C drive, for example, you'd use the &lt;code&gt;cipher /w:d&lt;/code&gt; command, which will wipe free space on the drive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-driverquery"&gt;
  &lt;/a&gt;
  📌 3. Driverquery
&lt;/h2&gt;

&lt;p&gt;Drivers remain among the most important software installed on a PC. Improperly configured or missing drivers can cause all sorts of trouble, so it's good to have access to a list of what's on your PC. That's exactly what the driver query command does. You can extend it to &lt;code&gt;driver query -v&lt;/code&gt; to obtain more information, including the directory in which the driver is installed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-file-compare"&gt;
  &lt;/a&gt;
  📌 4. File Compare:
&lt;/h2&gt;

&lt;p&gt;You can use this command to identify differences in text between two files. It's particularly useful for writers and programmers trying to find small changes between two versions of a file. Simply type &lt;code&gt;fc&lt;/code&gt; and then the directory path and file name of the two files you want to compare.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ipconfig"&gt;
  &lt;/a&gt;
  📌 5. Ipconfig:
&lt;/h2&gt;

&lt;p&gt;This command relays the IP address that your computer is currently using. However, if you're behind a router (like most computers today), you'll instead receive the local network address of the router.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-netstat"&gt;
  &lt;/a&gt;
  📌 6. Netstat:
&lt;/h2&gt;

&lt;p&gt;Entering the command &lt;code&gt;netstat -an&lt;/code&gt; will provide you with a list of currently open ports and related IP addresses. This command will also tell you what state the port is in; listening, established, or closed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ping"&gt;
  &lt;/a&gt;
  📌 7. Ping:
&lt;/h2&gt;

&lt;p&gt;Typing ping followed by an IP address or web domain will send a series of test packets to the specified address. If they arrive and are returned, you know the device is capable of communicating with your PC; if it fails, you know that there's something blocking communication between the device and your computer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-pathping"&gt;
  &lt;/a&gt;
  📌 8. PathPing:
&lt;/h2&gt;

&lt;p&gt;This is a more advanced version of ping that's useful if there are multiple routers between your PC and the device you're testing. Like ping, you use this command by typing &lt;code&gt;pathping&lt;/code&gt; followed by the IP address, but unlike ping, &lt;code&gt;pathping&lt;/code&gt; also relays some information about the route the test packets take.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-tracert"&gt;
  &lt;/a&gt;
  📌 9. Tracert:
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tracert&lt;/code&gt; command is similar to &lt;code&gt;pathping&lt;/code&gt;. Once again, type &lt;code&gt;tracert&lt;/code&gt; followed by the IP address or domain you'd like to trace. You'll receive information about each step in the route between your PC and the target. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-powercfg"&gt;
  &lt;/a&gt;
  📌 10. Powercfg:
&lt;/h2&gt;

&lt;p&gt;Powercfg is a very powerful command for managing and tracking how your computer uses energy. You can use the command &lt;code&gt;powercfg&lt;/code&gt; hibernate on and &lt;code&gt;powercfg&lt;/code&gt; hibernate off to manage hibernation, and you can also use the command &lt;code&gt;powercfg /a&lt;/code&gt; to view the power-saving states currently available on your PC.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>tooling</category>
      <category>tutorial</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Top 10 JavaScript Interview Questions and Answers you should know - Junior and Senior</title>
      <author>angelo.miranda</author>
      <pubDate>Sun, 18 Apr 2021 04:54:06 +0000</pubDate>
      <link>https://dev.to/angelomiranda/top-10-javascript-interview-questions-and-answers-you-should-know-junior-and-senior-3943</link>
      <guid>https://dev.to/angelomiranda/top-10-javascript-interview-questions-and-answers-you-should-know-junior-and-senior-3943</guid>
      <description>&lt;p&gt;It is important to be prepared prior to a job interview as you only have 1️⃣ chance to impress and convince the interviewers that you are the one they are looking for. Typically, you will meet up with different engineers who will ask very hard questions, and unfortunately, you will most likely not get the job 🤦🙅 if one of them says 'NO' 🚫 especially the senior ranking interviewer.&lt;/p&gt;

&lt;p&gt;There would be a time for an engineer to look for a new role whether it is driven by a new challenge, more money, or to move to a different place. &lt;/p&gt;

&lt;p&gt;In this case, it is vital to be completely ready and and know the common questions that are commonly asked so you are able to answer correctly and confidently. I have compiled the top 1️⃣0️⃣ Q&amp;amp;A for both Junior and Senior that is guaranteed to be asked on a job interview. I am in the process of writing/compiling HTML and CSS Q&amp;amp;A which I will post here when I get done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mid-senior-level-questions-and-answers"&gt;
  &lt;/a&gt;
  Mid - Senior Level Questions and Answers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-a-closure"&gt;
  &lt;/a&gt;
  1. What is a closure?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Closure is a function in a function. The inner function has access to the outer's function scope and parameters even after the outer function has returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-what-are-the-differences-between-call-apply-and-bind"&gt;
  &lt;/a&gt;
  2. What are the differences between call, apply, and bind?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;call&lt;/strong&gt; and &lt;strong&gt;apply&lt;/strong&gt; immediately calls a function while &lt;strong&gt;bind&lt;/strong&gt; creates a new function that can be invoked in the future. Arguments with &lt;strong&gt;call&lt;/strong&gt; are passed in one by one, separated with a comma while &lt;strong&gt;apply&lt;/strong&gt; expects an array as its argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-what-is-an-event-loop"&gt;
  &lt;/a&gt;
  3. What is an event loop?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;event loop&lt;/strong&gt; is responsible for executing javascript code, collecting and processing events, and executing queued sub-tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-what-is-currying-function"&gt;
  &lt;/a&gt;
  4. What is currying function?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A currying function is the process of taking a function with multiple arguments and turning it into a sequence of functions each with a single argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Curried functions are a great way to improve code reusability and functional composition&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-what-is-prototype-in-javascript"&gt;
  &lt;/a&gt;
  5. What is prototype in javascript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prototypes are the mechanism by which JavaScript objects inherit from another object. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-what-is-memoization"&gt;
  &lt;/a&gt;
  6. What is memoization?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Memoization&lt;/strong&gt; is an optimization technique by storing the result of expensive function calls and returning the cached results when the same inputs occur again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-what-is-a-higherorder-function"&gt;
  &lt;/a&gt;
  7. What is a higher-order function?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a higher-order function is a function that accepts another function as an argument or returns a function as a return value or both of them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Map, filter and reduce are some examples of higher-order functions that are already built-in to JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-what-is-event-delegation"&gt;
  &lt;/a&gt;
  8. What is event delegation?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Event delegation is a pattern of adding a single event listener to a parent element instead of multiple elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-name-some-ways-to-handle-asynchronous-operation-in-javascript"&gt;
  &lt;/a&gt;
  9. Name some ways to handle asynchronous operation in javascript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Callback&lt;/strong&gt; is a function that is used to notify the calling instance &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt; is an object representing the eventual completion or failure of an asynchronous operation. A pending promise can either be fulfilled with a value or rejected with a reason.&lt;br&gt;
Callbacks are attached to the returned promises that make handling of asynchronous code easier and more readable. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;async/await&lt;/strong&gt; is a new addition to ES2017 which is syntactic sugar on top of promises and make asynchronous code look synchronous code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-what-is-recursion"&gt;
  &lt;/a&gt;
  10. What is recursion?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Recursion&lt;/strong&gt; is a technique for iterating over an operation by having a function call itself repeatedly until it arrives at a result. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is most effective for solving problems like sorting or traversing the nodes of complex or non-linear data structures&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't feel like reading? Here is a video - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O1UizGrR79U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#entry-junior-level-questions-and-answers"&gt;
  &lt;/a&gt;
  Entry - Junior Level Questions and Answers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-javascript"&gt;
  &lt;/a&gt;
  1. What is Javascript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;it is the scripting language of the web that was initially intended to run on the browser. Today, JavaScript is used in the server. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-what-is-ecmascript"&gt;
  &lt;/a&gt;
  2. What is ECMAScript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;is a standard specification for scripting languages. JavaScript is based on ECMAScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-what-is-the-difference-between-and-"&gt;
  &lt;/a&gt;
  3. What is the difference between == and ===?
&lt;/h3&gt;

&lt;p&gt;== compares values&lt;br&gt;
=== compares both type and value&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-what-is-a-promise"&gt;
  &lt;/a&gt;
  4. What is a promise?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;is an object that may produce a single value sometime in the future with either a resolved value or a reason for not being resolved&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#5-what-is-strict-mode-in-js"&gt;
  &lt;/a&gt;
  5. What is strict mode in JS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;it is useful for writing secure JS code. It prevents some bugs from happening and throws more exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#6-what-is-the-difference-between-null-and-undefined"&gt;
  &lt;/a&gt;
  6. What is the difference between null and undefined?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;null&lt;/strong&gt; type is an object that is explicitly assigned to a variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;undefined&lt;/strong&gt; type is undefined where the variable has been declared but has no assigned value&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-what-is-ajax"&gt;
  &lt;/a&gt;
  7. What is AJAX?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;stands for Asynchronous JavaScript and XML. We can send data to the server and get data without refreshing the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#8-explain-the-difference-between-synchronous-and-asynchronous"&gt;
  &lt;/a&gt;
  8. Explain the difference between synchronous and asynchronous.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Synchronous&lt;/strong&gt; is blocking operation while &lt;strong&gt;asynchronous&lt;/strong&gt; is not. Synchronous complete the current code before the next code is executed while asynchronous continue on the next code without completing the current code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#9-what-are-the-differences-between-var-let-and-const"&gt;
  &lt;/a&gt;
  9. What are the differences between var, let, and const
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;var&lt;/strong&gt; is scoped to a function. &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt; are block-scoped. Accessible to nearest curly braces (function, if-else, for-loop)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#10-what-is-the-dom"&gt;
  &lt;/a&gt;
  10. What is the DOM?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;it stands for Document Object Model. This can be used to access and change the document structure, style, and content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't feel like reading? Here is a video - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-AZuoPleqC8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>jobinterview</category>
      <category>junior</category>
      <category>senior</category>
    </item>
  </channel>
</rss>
