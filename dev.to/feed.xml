<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn With Me:Apple's Swift Literals</title>
      <author>Ansh Gupta</author>
      <pubDate>Sun, 17 Oct 2021 07:09:49 +0000</pubDate>
      <link>https://dev.to/thisisanshgupta/learn-with-meapples-swift-literals-2ijd</link>
      <guid>https://dev.to/thisisanshgupta/learn-with-meapples-swift-literals-2ijd</guid>
      <description>&lt;p&gt;Hello guys and Welcome to &lt;em&gt;Learn With Me: Apple's Swift&lt;/em&gt;.In previous tutorial you learned about Variables and Constants and today we are going to learn about Literals .So without wasting time let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#literals"&gt;
  &lt;/a&gt;
  Literals
&lt;/h1&gt;

&lt;p&gt;Literals are representations of fixed values in a program. They can be numbers, characters, or strings, etc. For example, "Hello, World!", 12, 23.0, "C", etc.&lt;br&gt;
Swift supports 4 types of &lt;br&gt;
literals,that are: &lt;br&gt;
•&lt;strong&gt;Integer Literals&lt;/strong&gt;&lt;br&gt;
•&lt;strong&gt;Floating-point Literals&lt;/strong&gt;&lt;br&gt;
•&lt;strong&gt;Boolean Literals&lt;/strong&gt;&lt;br&gt;
•&lt;strong&gt;String and Character Literals&lt;/strong&gt;.&lt;br&gt;
So let's study about them in brief.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#integer-literals"&gt;
  &lt;/a&gt;
  Integer Literals
&lt;/h1&gt;

&lt;p&gt;Integer literals are those that do not have a fractional or an exponential part.&lt;/p&gt;

&lt;p&gt;There are four types of integer literals in Swift:&lt;br&gt;
•A decimal number, with no prefix.&lt;br&gt;
•A binary number, with a 0b prefix.&lt;br&gt;
•An octal number, with a 0o prefix.&lt;br&gt;
•A hexadecimal number, with a 0x prefix.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#floatingpoint-literals"&gt;
  &lt;/a&gt;
  Floating-Point Literals
&lt;/h1&gt;

&lt;p&gt;Floating-point literals are numeric literals that have floating decimal points or they are in fraction. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;7.008&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,&lt;strong&gt;7.008&lt;/strong&gt; is a floating-point literal assigned to the &lt;strong&gt;radius&lt;/strong&gt; constant.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boolean-literals"&gt;
  &lt;/a&gt;
  Boolean Literals
&lt;/h1&gt;

&lt;p&gt;There are only two Boolean Literals:&lt;strong&gt;true&lt;/strong&gt; and &lt;strong&gt;false&lt;/strong&gt;.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#character-literals"&gt;
  &lt;/a&gt;
  Character Literals
&lt;/h1&gt;

&lt;p&gt;Character literals are Unicode characters enclosed in double quotes.For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"S"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#string-literals"&gt;
  &lt;/a&gt;
  String Literals
&lt;/h1&gt;

&lt;p&gt;String literals are sequences of characters enclosed in double quotes.For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Jonathan"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading.I hope you will enjoy learning it.If you have any issues then let me know in the discussions.And in next part we are going to learn about Data Types in Swift.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>ios</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React basics: explaining the useContext hook</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 17 Oct 2021 06:00:39 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/react-basics-explaining-the-usecontext-hook-1dgd</link>
      <guid>https://dev.to/dailydevtips1/react-basics-explaining-the-usecontext-hook-1dgd</guid>
      <description>&lt;p&gt;Sometimes we have data that we need to access in almost all parts of our components.&lt;/p&gt;

&lt;p&gt;It will become a hassle to pass them down to each component, exactly where context comes in.&lt;/p&gt;

&lt;p&gt;In this example, I'll use a specific theme for a website.&lt;br&gt;
Our website has a blue and a red theme, which the user can toggle based on their preferences.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-context"&gt;
  &lt;/a&gt;
  Creating a context
&lt;/h2&gt;

&lt;p&gt;Before we can do anything, we need to create a new context to wrap around our application.&lt;/p&gt;

&lt;p&gt;So, let's look at how that works, create a new file called &lt;code&gt;ThemeContext.js&lt;/code&gt; and start by adding the imports we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's define our themes, this is still pretty hardcoded, but it will work fine for this demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have a blue and a red theme.&lt;/p&gt;

&lt;p&gt;The first thing we need to do now is create an actual context with a default value.&lt;br&gt;
In my case, I want the red theme to be the blue theme to be the default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we can export a &lt;code&gt;ThemeProvider&lt;/code&gt; which helps us wrap this theme around our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This provider can now be wrapped around our app to apply the context. Let's head over to our &lt;code&gt;App.js&lt;/code&gt; file and do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;our&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us access to anything in the theme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-context"&gt;
  &lt;/a&gt;
  Using the context
&lt;/h2&gt;

&lt;p&gt;Pretty cool, but how do we now use this context?&lt;/p&gt;

&lt;p&gt;Create a sample component that will act as our paint. This component will take the context and display the correct color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      I'm the paint
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component will render a simple div, with colors based on whatever our theme is.&lt;/p&gt;

&lt;p&gt;Head back to your &lt;code&gt;App&lt;/code&gt; and include this component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Paint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see the block in your browser like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjOeGmF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673041261/hqoFz5uOE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjOeGmF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673041261/hqoFz5uOE.png" alt="Basic context painted component in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we now change our &lt;code&gt;ThemeContext&lt;/code&gt; to be red, we should see a red box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qVIzkxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673125222/Rt1pNhzK2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qVIzkxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673125222/Rt1pNhzK2.png" alt="Changed context provider in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-toggle"&gt;
  &lt;/a&gt;
  Adding a toggle
&lt;/h2&gt;

&lt;p&gt;This is pretty exciting stuff already, but it becomes super powerful by adding a dynamic switch for our theme.&lt;/p&gt;

&lt;p&gt;Let's say we want to render two buttons. Each button will set a different theme.&lt;/p&gt;

&lt;p&gt;To do this, we first have to use &lt;a href="https://daily-dev-tips.com/posts/react-basics-explaining-the-usestate-hook/"&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/a&gt; in our &lt;code&gt;ThemeContext&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeProviderData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;themeProviderData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I use the &lt;code&gt;useState&lt;/code&gt; function to now set a basic theme (blue). &lt;br&gt;
Then I create a primary object containing the current theme data and pass the &lt;code&gt;setState&lt;/code&gt; function to modify the state variable.&lt;br&gt;
Then we pass this object as the value of our theme.&lt;/p&gt;

&lt;p&gt;One thing to note here is that we changed from passing a single variable to passing an object.&lt;/p&gt;

&lt;p&gt;So head over to your &lt;code&gt;Paint&lt;/code&gt; component and change the import like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can go ahead and create a new component called &lt;code&gt;Toggle&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;RED&lt;/span&gt; &lt;span class="nx"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BLUE&lt;/span&gt; &lt;span class="nx"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this function extracts the &lt;code&gt;setTheme&lt;/code&gt; function from our context.&lt;br&gt;
It then renders two buttons and appends this function with a specific value.&lt;/p&gt;

&lt;p&gt;Go ahead and include this component in your &lt;code&gt;App&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Paint&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it. We can now toggle between our two themes!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3__p9Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673605426/v-NLzBUhS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3__p9Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633673605426/v-NLzBUhS.gif" alt="Switching context in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've also added this project on &lt;a href="https://github.com/rebelchris/react-basics/tree/context"&gt;GitHub&lt;/a&gt; if you want to see more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Winning my first Hacktoberfest!</title>
      <author>SHOURYA GUPTA</author>
      <pubDate>Sun, 17 Oct 2021 05:43:45 +0000</pubDate>
      <link>https://dev.to/shouryabrahmastra/winning-my-first-hacktoberfest-3fba</link>
      <guid>https://dev.to/shouryabrahmastra/winning-my-first-hacktoberfest-3fba</guid>
      <description>&lt;p&gt;🎆Hello!! Everyone reading this.✨&lt;/p&gt;

&lt;p&gt;This is my first post on &lt;a href="https://dev.to/"&gt;dev&lt;/a&gt; &amp;amp; I'm so excited to tell my journey of my first Hacktoberfest Event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;It all started when I came across this event on the very 1st day of this October month when I came across a WhatsApp forward that enthusiastic coder and developers can contribute to a month long festival of contributing to the open source. Truly speaking the winning swag by contributing to Open-Source attracted me more than the contribution that I made.&lt;br&gt;
But still with no pre-knowledge of how to contribute to this open source world I just blindly jumped into this task and with the help of the web and YouTube and my persisting knowledge of DSA I some how learnt to create my first pull request. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-was-a-leap-of-new-era-for-my-coding-career-as-well-i-learnt-more-than-i-could-contribute-to-this-open-source-world"&gt;
  &lt;/a&gt;
  It was a leap of new era for my coding career as well; I learnt more than I could contribute to this open source world.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#main-event"&gt;
  &lt;/a&gt;
  Main Event
&lt;/h2&gt;

&lt;p&gt;My first PR to count towards the event was :&lt;br&gt;
&lt;a href="https://github.com/qwert-ji/the-c/pull/10"&gt;qwert-ji&lt;/a&gt; which was on 1st Oct.&lt;br&gt;
Seeing that already 1 out of 4 PR was already done, I was on a rampage to find more repos tagged with the &lt;code&gt;hacktoberfest&lt;/code&gt; labels to contribute to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;Here's the list of the PR's that I submitted, counted towards the event :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/STICMedicaps/Hacktoberfest/pull/20"&gt;STICMedicaps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/qwert-ji/the-c/pull/10"&gt;qwert-ji&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Astrodevil/Programming-Basics/pull/289"&gt;Astrodevil&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/AkshayNachappa/Hacktoberfest_2021/pull/33"&gt;AkshayNachappa&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ieeeiasvit/ProLang-IAS/pull/34"&gt;ieeeiasvit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/rohithmaddz/Programs/pull/8"&gt;rohithmaddz&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/guptaravi5400/hacktoberfest_2021/pull/15"&gt;guptaravi5400&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/throwaway-root/DataStructers/pull/62"&gt;throwaway-root&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/manish-virgat/Hacktoberfest-C-Program/pull/101"&gt;manish-virgat&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/basava1134/First-PR-Hacktoberfest/pull/29"&gt;basava1134&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/hctnm2/Open-Source-Enthusiast/pull/128"&gt;hctnm2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/JayanthSriram27/Hacktoberfest2k21/pull/40"&gt;JayanthSriram27&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you'll look at all the PR's I've made during this time, you'll notice that all of them are minor yet notable changes and these contributions meet the criteria for being counted towards the &lt;em&gt;hacktoberfest&lt;/em&gt; event.&lt;/p&gt;

&lt;p&gt;I'm starting to get the hang of it now by actually interacting with maintainers and other contributors. It's such a welcoming community who guide beginners with such patience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;As the minimum PRs required to win some swag, mine were only waiting for the review period of 14 days to complete today.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8G_ooJzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydpirltglggrfk8kyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8G_ooJzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydpirltglggrfk8kyk.png" alt="My Hacktoberfest page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time &lt;a href="https://hacktoberfestswaglist.com/#swag-list-2021"&gt;official event swag&lt;/a&gt; include:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2n2O80g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8wucw2a6x3iwqxo093i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2n2O80g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8wucw2a6x3iwqxo093i.png" alt="Hacktoberfest T-shirt"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;T-Shirts&lt;br&gt;
-&amp;gt;Stickers&lt;br&gt;
-&amp;gt;&lt;a href="https://shop.dev.to/products/dev-hacktoberfest-badge"&gt;Dev.to badge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These rewards can be claimed after 4 of you're PRs have successfully passed the review.&lt;/p&gt;

&lt;p&gt;Thank's for reading this article.&lt;br&gt;
🎉🎉And congratulations to everyone if you've also won this time hacktoberfest event &lt;em&gt;&lt;code&gt;treat please&lt;/code&gt;😅&lt;/em&gt;.✨🎊🎊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socials"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Shourya_Nishi"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShouryaBrahmastra"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/profile.php?id=100008282954303"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//gptshourya02@gmail.com"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Generating accessor methods easily</title>
      <author>masaushi</author>
      <pubDate>Sun, 17 Oct 2021 05:16:29 +0000</pubDate>
      <link>https://dev.to/masaushi/generating-accessor-methods-easily-3p61</link>
      <guid>https://dev.to/masaushi/generating-accessor-methods-easily-3p61</guid>
      <description>&lt;p&gt;Hi all,&lt;br&gt;
I have made a go tool to generate accessor methods(getter or setter) for unexported struct fields, so let me introduce it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/masaushi/accessory"&gt;https://github.com/masaushi/accessory&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/masaushi"&gt;
        masaushi
      &lt;/a&gt; / &lt;a href="https://github.com/masaushi/accessory"&gt;
        accessory
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      accessor methods generator for Go programming language
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
accessory&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/masaushi/accessory/actions/workflows/test.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcZire5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/masaushi/accessory/actions/workflows/test.yml/badge.svg" alt="test"&gt;&lt;/a&gt;
&lt;a href="https://github.com/masaushi/accessory/actions/workflows/release.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NL7Nc4l7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/masaushi/accessory/actions/workflows/release.yml/badge.svg" alt="release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;accessory is an accessor generator for &lt;a href="https://golang.org/" rel="nofollow"&gt;Go programming language&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
What is accessory?&lt;/h2&gt;
&lt;p&gt;Accessory is a tool that generates accessor methods from any structs.&lt;/p&gt;
&lt;p&gt;Sometimes you might make struct fields unexported in order for values of fields not to be accessed
or modified from anywhere in your codebases, and define getters or setters for values to be handled in a desired way.&lt;/p&gt;
&lt;p&gt;But writing accessors for so many fields is time-consuming, but not exciting or creative.&lt;/p&gt;
&lt;p&gt;Accessory frees you from tedious, monotonous tasks.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;To get the latest released version&lt;/p&gt;
&lt;h3&gt;
Go version &amp;lt; 1.16&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;go get github.com/masaushi/accessory&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Go 1.16+&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;go install github.com/masaushi/accessory@latest&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;h3&gt;
Declare Struct with &lt;code&gt;accessor&lt;/code&gt; Tag&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;accessory&lt;/code&gt; generates accessor methods from defined structs, so you need to declare a struct and fields with &lt;code&gt;accessor&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Values for &lt;code&gt;accessor&lt;/code&gt; tag is &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt;, &lt;code&gt;getter&lt;/code&gt; is for generating getter method and &lt;code&gt;setter&lt;/code&gt; is for setter methods.&lt;/p&gt;
&lt;p&gt;Here…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/masaushi/accessory"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes you might make struct fields unexported in order for values of the fields not to be accessed or modified from anywhere in your codebases.&lt;/p&gt;

&lt;p&gt;Making struct fields unexported will prevent data from unexpected use or change.&lt;br&gt;
But you sometimes might need accessor methods for some fields to get/set data in a desired way.&lt;/p&gt;

&lt;p&gt;However, writing accessors for many fields is time-consuming, but not exciting or creative.&lt;/p&gt;

&lt;p&gt;This tool frees you from that tedious, monotonous task.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;h5&gt;
  &lt;a href="#1-declare-a-model-with-raw-accessor-endraw-tag"&gt;
  &lt;/a&gt;
  1. Declare a model with &lt;code&gt;accessor&lt;/code&gt; tag.
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`accessor:"getter"`&lt;/span&gt;
    &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="s"&gt;`accessor:"setter"`&lt;/span&gt;
    &lt;span class="n"&gt;field3&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`accessor:"getter,setter"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#2-run-raw-accessory-endraw-command"&gt;
  &lt;/a&gt;
  2. Run &lt;code&gt;accessory&lt;/code&gt; command
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;accessory &lt;span class="nt"&gt;-type&lt;/span&gt; MyStruct &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#3-accessor-methods-will-be-generated"&gt;
  &lt;/a&gt;
  3. Accessor methods will be generated.
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Field1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SetField2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Field3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SetField3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#4-you-can-customize-method-name"&gt;
  &lt;/a&gt;
  4. You can customize method name
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`accessor:"getter:GetFirstField"`&lt;/span&gt;
    &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="s"&gt;`accessor:"setter:ChangeSecondField"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Generated methods will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetFirstField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ChangeSecondField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#5-you-can-also-generate-accessors-with-raw-go-generate-endraw-"&gt;
  &lt;/a&gt;
  5. You can also generate accessors with &lt;code&gt;go generate&lt;/code&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:generate accessory -type MyStruct&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`accessor:"getter"`&lt;/span&gt;
    &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;   &lt;span class="s"&gt;`accessor:"setter"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Generating accessors easily will save your time and help you focus on writing important business logics.&lt;/p&gt;

&lt;p&gt;I'm looking forward to getting your feedback.&lt;/p&gt;

&lt;p&gt;Have a wonderful day!&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>How to Force Re-Render a React Component &amp; Should you do it?</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 17 Oct 2021 05:06:33 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/how-to-force-re-render-a-react-component-should-you-do-it-5h1p</link>
      <guid>https://dev.to/ruppysuppy/how-to-force-re-render-a-react-component-should-you-do-it-5h1p</guid>
      <description>&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; automatically &lt;strong&gt;Re-Renders&lt;/strong&gt; the components whenever any of its &lt;strong&gt;props&lt;/strong&gt; or its &lt;strong&gt;state&lt;/strong&gt; is updated. But quite often beginners &lt;em&gt;(especially me in my early days)&lt;/em&gt; find it quite difficult getting a component &lt;strong&gt;re-rendered&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, let's look at the &lt;em&gt;methods we can use to &lt;strong&gt;re-render&lt;/strong&gt; a component&lt;/em&gt;, and discuss &lt;em&gt;whether we should really force a &lt;strong&gt;re-render&lt;/strong&gt;&lt;/em&gt; or let &lt;strong&gt;React&lt;/strong&gt; take care of it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rerender-a-class-component"&gt;
  &lt;/a&gt;
  Re-Render a Class Component
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Class Components&lt;/strong&gt; provide you a &lt;strong&gt;built-in method&lt;/strong&gt; to trigger a &lt;strong&gt;Re-Render&lt;/strong&gt;. Simply use &lt;code&gt;forceUpdate&lt;/code&gt; method to force &lt;strong&gt;React&lt;/strong&gt; to &lt;strong&gt;Re-Render&lt;/strong&gt; the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#rerender-a-functional-component"&gt;
  &lt;/a&gt;
  Re-Render a Functional Component
&lt;/h1&gt;

&lt;p&gt;Unfortunately, &lt;strong&gt;Functional Component&lt;/strong&gt; doesn't have a &lt;code&gt;forceUpdate&lt;/code&gt; method for ease of use. You can use &lt;code&gt;useState&lt;/code&gt; hook to simulate an update or create a &lt;strong&gt;custom hook&lt;/strong&gt; too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// forceUpdate hook&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useForceUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// component&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forceUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForceUpdate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#should-you-force-rerender-a-react-component"&gt;
  &lt;/a&gt;
  Should you Force Re-Render a React Component?
&lt;/h1&gt;

&lt;p&gt;Now for answering the most important question...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-no-and-no"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NO! NO! and NO!!!!!!!!!!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--riXuMcS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjatgj9qpcfzvjde116.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riXuMcS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjatgj9qpcfzvjde116.gif" alt="No"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In most cases, you DEFINITELY SHOULD NOT &lt;strong&gt;force a re-render&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;There are a few &lt;em&gt;niche cases&lt;/em&gt;, like &lt;strong&gt;modifying a blockchain&lt;/strong&gt; (which only returns a &lt;strong&gt;transaction hash&lt;/strong&gt; and no data), where the &lt;strong&gt;forced re-render&lt;/strong&gt; makes sense to &lt;em&gt;fetch the updated data&lt;/em&gt; from the &lt;strong&gt;blockchain&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#debugging-why-the-component-isnt-updating"&gt;
  &lt;/a&gt;
  Debugging Why the Component isn't Updating
&lt;/h1&gt;

&lt;p&gt;Let's look at some of the common issues why &lt;em&gt;&lt;strong&gt;React&lt;/strong&gt; fails to update your components&lt;/em&gt; and &lt;em&gt;find solutions for them as well&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-incorrectly-updated-state"&gt;
  &lt;/a&gt;
  1. Incorrectly Updated State
&lt;/h2&gt;

&lt;p&gt;Let's consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Update&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component would not be &lt;strong&gt;re-rendering&lt;/strong&gt; the &lt;em&gt;user's name&lt;/em&gt; even when the &lt;code&gt;Update User&lt;/code&gt; button is clicked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; evaluates state changes by checking its &lt;strong&gt;shallow equality&lt;/strong&gt; (also called &lt;strong&gt;reference equality&lt;/strong&gt;), which checks to see if &lt;em&gt;both the current and the new value for state reference the same object&lt;/em&gt;. In our example, we updated one of the properties of the &lt;strong&gt;user object&lt;/strong&gt;, but we technically made &lt;code&gt;setUser&lt;/code&gt; the same object reference, and thus, &lt;strong&gt;React&lt;/strong&gt; &lt;em&gt;didn’t perceive any change in its state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://reactjs.org/docs/react-component.html#state"&gt;&lt;strong&gt;React&lt;/strong&gt; documentation&lt;/a&gt; mentions, &lt;em&gt;State should be treated as immutable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, how do we fix it? We could &lt;em&gt;create a new object with the updated values&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-incorrectly-updated-props-without-state-change"&gt;
  &lt;/a&gt;
  2. Incorrectly Updated Props (without state change)
&lt;/h2&gt;

&lt;p&gt;Incorrectly updating props without a state change can also leads to bugs. Let’s look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// setInterval(() =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//   console.log(time)&lt;/span&gt;
&lt;span class="c1"&gt;// }, 1000);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervalId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Clock&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Clock&lt;/code&gt; in the example doesn't update the &lt;code&gt;time&lt;/code&gt; after the first load. To confirm that the &lt;code&gt;time&lt;/code&gt; is being properly updated, you can just un-comment the &lt;code&gt;console.log&lt;/code&gt;. Every second, &lt;em&gt;the runtime will update the variable &lt;code&gt;time&lt;/code&gt;, which is then passed to our &lt;code&gt;Clock&lt;/code&gt; component for rendering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When the state changes, &lt;code&gt;App&lt;/code&gt; (parent component) is &lt;strong&gt;re-rendered&lt;/strong&gt;, thus triggering a &lt;strong&gt;re-rendered&lt;/strong&gt; in &lt;code&gt;Clock&lt;/code&gt; (child component) with the updated &lt;code&gt;time&lt;/code&gt;. Thus &lt;em&gt;updating state is what actually triggers the re-render&lt;/em&gt;, which is then &lt;em&gt;propagated through the props&lt;/em&gt;. So updating the state is ABSOLUTELY CRUCIAL!&lt;/p&gt;

&lt;p&gt;So to fix the issue, we could use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervalId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Clock&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;Just like everything in this world, this article too has to end 😛 &lt;/p&gt;

&lt;p&gt;In the article, we went through some of the ways you can &lt;strong&gt;force re-render&lt;/strong&gt; your &lt;strong&gt;React&lt;/strong&gt; Components as well as the common causes of why &lt;em&gt;&lt;strong&gt;React&lt;/strong&gt; fails to re-render the components&lt;/em&gt;. Hope this helps you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best of Luck with your React Development Journey!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Looking for ways to boost your productivity? Check out my &lt;strong&gt;Bi-Weekly Productivity Blogs&lt;/strong&gt; on &lt;a href="https://tapajyotibose.medium.com/"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt;? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Add Power Off and Reboot to grub menu</title>
      <author>Dhananjay Tanpure</author>
      <pubDate>Sun, 17 Oct 2021 04:57:04 +0000</pubDate>
      <link>https://dev.to/dtan13/add-power-off-and-reboot-to-grub-menu-a45</link>
      <guid>https://dev.to/dtan13/add-power-off-and-reboot-to-grub-menu-a45</guid>
      <description>&lt;p&gt;To add &lt;strong&gt;Power Off&lt;/strong&gt; and &lt;strong&gt;Reboot&lt;/strong&gt; options to grub menu, you need to update a file in your grub configuration directory.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/grub.d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#open-raw-40custom-endraw-in-your-favorite-editor"&gt;
  &lt;/a&gt;
  Open &lt;code&gt;40_custom&lt;/code&gt; in your favorite editor
&lt;/h3&gt;

&lt;p&gt;For me its &lt;code&gt;micro&lt;/code&gt; :&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;micro 40_custom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#add-following-line-at-the-end-of-the-file"&gt;
  &lt;/a&gt;
  Add following line at the end of the file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 menuentry &lt;span class="s2"&gt;"Reboot"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      reboot
&lt;span class="o"&gt;}&lt;/span&gt;

menuentry &lt;span class="s2"&gt;"Power Off"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      halt
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Do not change the &lt;code&gt;exec tail&lt;/code&gt; line in the file&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#update-your-raw-grubcfg-endraw-file"&gt;
  &lt;/a&gt;
  Update your &lt;code&gt;grub.cfg&lt;/code&gt; file
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;  For Debian based distros
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;update-grub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  For Arch based and Other distros
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;grub-mkconfig &lt;span class="nt"&gt;-o&lt;/span&gt; /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>grublinux</category>
    </item>
    <item>
      <title>Improve your productivity as a developer</title>
      <author>Dylan Oh</author>
      <pubDate>Sun, 17 Oct 2021 04:38:27 +0000</pubDate>
      <link>https://dev.to/ohdylan/improve-your-productivity-as-a-developer-22kc</link>
      <guid>https://dev.to/ohdylan/improve-your-productivity-as-a-developer-22kc</guid>
      <description>&lt;p&gt;We are in the era of information explosion. People are tend to have poor concentration and cause low productivity nowadays. As a developer, our main role is to create great product in the least possible time. However, how can we improve and become the best productive self at work / on project? These are my personal experience for improving productivity and I hope it helps you too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Planning before execution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we are new, we tend to jump straight into execution of tasks without planning. This is one of the most valuable lessons that I have learnt from my senior (shout-out to Jessie) when I first joined the company. Always, always, always plan before you start coding / working on the tasks. We usually find ourselves got stuck in the middle of writing codes, and have to rewrite a huge chunk of code after realising that the logic that we structured our codes was wrong. We can start with pseudocodes, and that always helps to visualise the overall big picture for the task. Besides, it is easier to amend pseudocodes. After you have sorted out the logic, all that left is to execute and transform them into codes. If you take 80% of your time to plan them carefully, you will only need the remaining 20% to execute. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Breakdown tasks and set deadline for each of the task&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the reasons that leads to procrastination is that we are not sure where to start with when looking at a large task / project, for example building your portfolio website. What we have to do to overcome this is to break down this large task into smaller pieces, and set a firmed deadline to each of them. Take building portfolio website as an example, we can split that into sourcing assets for your website, UI Design &amp;amp; wireframing, transforming the design into UI Components, etc. Meanwhile, UI components can be further broken down into NavBar, Button, Card and so on. By creating the workflow and making a gigantic task into more manageable tasks, we tend not to procrastinate our works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Deep work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Writing codes is a task that requires deep focus. Personally, I have to manage projects and provide technical supports sometimes other than coding. You might get a lot of interruptions, and it takes time to get back to the state of focus. The way that I deal with this is that I switch off all the notifications from email, messages and other apps for 2 hours and just focus on coding. You might be surprised on how much you could achieve by deep focusing for just 2 hours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Environment of working is an element of boosting productivity as well, especially for those who are working from home. It is important to separate working and relaxing area. My room is the only place I can work + study + rest at home (I am currently renting a room). Therefore, unless I am forced to work at home, I would prefer to go to office so that I have a better environment for work. Besides, keep your mobile phone away, and set an alarm clock to get some rest after working a period of time. You can also play some white noise in the background and that really helps me focusing more on my tasks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. If you feel like you cannot focus, go for a short walk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do not force yourself to sit in front of desk when you are in a state where you cannot focus. There are times where we were just staring at the screen and our brain is just not functioning at all. Go for a walk, meditate or taking a shower might help to reboot your system and get back to work in a better state.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>selfimprovement</category>
    </item>
    <item>
      <title>Divtober Day 16: Snow</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 17 Oct 2021 04:37:35 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-16-snow-18bb</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-16-snow-18bb</guid>
      <description>&lt;p&gt;I did two different entries for snow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One that will make your computer fan work like it has never been working before&lt;/li&gt;
&lt;li&gt;Another that would be 1,000 easier and better in SVG (again!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll put the one that requires a lot of CPU at the bottom, in the hopes that if you don't scroll down, it won't load and mess things up with your computer. It's basically a single-element snow fall effect with CSS.&lt;/p&gt;

&lt;p&gt;But first: a sad (but kind of cute) abominable snow man:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExvPOGo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And now the snow fall: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNErYxV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It has to be possible to simplify the snowfall so it doesn't require so many things (and maybe then, it will go smoother)&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>x86 vs x64 systems for roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 17 Oct 2021 03:59:17 +0000</pubDate>
      <link>https://dev.to/developertharun/x86-vs-x64-systems-for-roadrunners-1nle</link>
      <guid>https://dev.to/developertharun/x86-vs-x64-systems-for-roadrunners-1nle</guid>
      <description>&lt;h2&gt;
  &lt;a href="#x86-systems"&gt;
  &lt;/a&gt;
  x86 Systems
&lt;/h2&gt;

&lt;p&gt;x86 is a generic name that is used to refer to all Intel processors that were released after the original 8086 or 8088 variant of Intel processors. The variants like 80286, 80386, 80486 so on.. were named using the convention x86, where the 80 is implicit, and x can be replaced with a number conveniently. These are backward compatible systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;8086 or 8088 are the various names that are used to Identify the microprocessors of Intel that were released in the 1970s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#registers-used-in-the-early-x86-systems"&gt;
  &lt;/a&gt;
  Registers used in the early x86 systems
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A Register is a tiny memory holding electronic device that is used by the processor to either store instructions, data or address. These are fundamental units that are used when executing a computer instruction to perform a task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;x86 systems ranged from 8-bit, 16-bit and then 32bit. What do these bits refer to? They are the highest number of bits in a single register that exists in the system.&lt;br&gt;
Maximum memory limit&lt;/p&gt;

&lt;p&gt;When we say 32-bit, the number will contain 32 digits with each of them being either 0 or 1. The number system used here is Binary System ( power 2 ). Hence, the maximum possible value here will be 2³², which is 42,94,967,295. These are the maximum number of memory locations that a 32-bit register can access. We can only attach that memory device which the register can completely make use of.&lt;/p&gt;

&lt;p&gt;Thus, a 32-bit register can cater a maximum of 4GB of RAM. This is because, if each memory location that the register points to can hold 1 byte of data, then 42,94,967,295 bytes = 4.29 G. Although this is theoretical, the actual RAM that can be used will be less than around 3.5G, because of certain parts of the register being used to store other types of data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#x64-systems"&gt;
  &lt;/a&gt;
  x64 Systems
&lt;/h2&gt;

&lt;p&gt;For the systems that evolved to use 64-bit registers, they initially named it x86–64, but since this sounds longer, the naming was changed to x64 systems. x64 is a generic name that is used to refer to all Intel processors that are 64-bit processors.&lt;/p&gt;

&lt;p&gt;The x64 systems as mentioned above contains registers that are even capable of storing 64bits in a single register.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theoretical-maximum-memory-limit"&gt;
  &lt;/a&gt;
  Theoretical Maximum memory limit
&lt;/h3&gt;

&lt;p&gt;When we say 64-bit, the number will contain 64 digits with each of them being either 0 or 1. The number system used here will be Binary system just like the 32-bit family. Hence, the maximum possible value here will be 2⁶⁴.&lt;/p&gt;

&lt;p&gt;Thus each 64-bit register can cater a maximum of around 18 Quintillion bytes of memory. ( One Quintillion is 10¹⁸ ). Therefore it will be able to handle the usual RAM that we come across everyday effortlessly, including enterprise production servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#processing-power-of-x64-systems"&gt;
  &lt;/a&gt;
  Processing power of x64 systems
&lt;/h3&gt;

&lt;p&gt;x64 systems come with configurations like dual core, quad core, octa core and so on, which depicts the number of processors that work simultaneously in an integrated circuit. This enables the Operating system to perform tasks parallely. While dual-core has two cores than one single core, every task that it does need not be twice as fast as a single core machine. This is because, even the operating systems and programs that is using the processors should be able to perform parallely using multi processors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-generation"&gt;
  &lt;/a&gt;
  Current generation
&lt;/h2&gt;

&lt;p&gt;Currently the popular architecture is to use the 64-bit system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precise as possible. Here, a roadrunner is referred to a person who does things super fast &amp;amp; efficient. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>systems</category>
      <category>computerscience</category>
      <category>architecture</category>
      <category>processor</category>
    </item>
    <item>
      <title>AWK an old-school tool today</title>
      <author>Sergio Marcial</author>
      <pubDate>Sun, 17 Oct 2021 03:56:59 +0000</pubDate>
      <link>https://dev.to/kh40sz3r0/awk-an-old-school-tool-today-4p3</link>
      <guid>https://dev.to/kh40sz3r0/awk-an-old-school-tool-today-4p3</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-awk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is AWK?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;AWK is a command-line programming language primarily oriented to text and files processing - some might call it a tool -, simple yet elegant continuous lines of code can replace multiple lines of a more robust language like java or node without losing their intention.&lt;/p&gt;

&lt;p&gt;In essence, AWK code is so simple that you can just throw it away after the execution or once your program has finished its work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN { print "Hello World" }'&lt;/span&gt;
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there is so much more than that; considering the constant need to process data files, once you have started with AWK, you will stop building complete programs to process CSV or log files for faster and more straightforward with a couple of instructions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $0 }'&lt;/span&gt; example.txt
This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $4, $1, $5, $3, $2 }'&lt;/span&gt; example.txt
AWK This example an is

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1, "could be your", $4, $5 }'&lt;/span&gt; example.txt
This could be your AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calculations become somewhat ridiculously simple to process&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $0 }'&lt;/span&gt; example_numbers.txt
1 2 3 testing

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1 + $2 + $3, $4 }'&lt;/span&gt; example_numbers.txt
6 testing

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $2 * $3, $4 }'&lt;/span&gt; example_numbers.txt
6 testing

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $2 / $3, $4 }'&lt;/span&gt; example_numbers.txt
0.666667 testing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the real potential of AWK is still beyond simple operations. With the help of control statements, loops, switch functions, this command-line tool is closer to a programming language hand to hand with multiple file processing operations to make our lives even simpler&lt;/p&gt;

&lt;p&gt;For loop example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;loop.awk
&lt;span class="c"&gt;#!/bin/awk -f&lt;/span&gt;

BEGIN &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        print i
&lt;span class="o"&gt;}&lt;/span&gt; 

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; loop.awk
1
2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#why-is-relevant-today"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why is relevant today?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;In a generation of powerful and versatile programming languages, sometimes we engineers tend to overcomplicate problems, most commonly because of lack of knowledge in other options, so think about how many times have you develop a small Python, NodeJS, or Golang script to read a huge CSV file, or even build a small JVM-oriented language utility with the language of your choice and without even realizing already develop multiple lines of boilerplate (useless) code.&lt;/p&gt;

&lt;p&gt;Python script to read a file line by line and print result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Line {}: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same but with &lt;strong&gt;AWK&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print "Line ", $1, ":", $2 }'&lt;/span&gt; example.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you could create more examples to explain the difference between creating scripts with AWK and with any other language, but also it is pretty performant in comparison with other&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q87bYCIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf9bj815v22dp4l35dm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q87bYCIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf9bj815v22dp4l35dm6.png" alt="AWK and its variations' performance measurements"&gt;&lt;/a&gt;&lt;br&gt;
AWK and its variations' performance measurements &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;As you can see, this old-school language (&lt;strong&gt;AWK was created initially in 1977&lt;/strong&gt;) could outshine some of these more robust and modern languages in some tasks, and learning it might give you a new tool you didn't even know you want to have.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-steps-in-awk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;First steps in AWK&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Let's start by mentioning that AWK is in every Linux and macOS distribution (how cool is that?); for Windows, you have to install it (but I am pretty sure it cannot be that hard, right?).&lt;/p&gt;

&lt;p&gt;How to know what version of AWK you currently have installed?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-version&lt;/span&gt;
&lt;span class="nb"&gt;awk &lt;/span&gt;version 20200816
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now let's start with the basics; AWK commands' structure is pretty simple; however, there are some tricks to it, especially if you want to use it for actual text processing, the basic command could be described in this way &lt;code&gt;&amp;lt;condition&amp;gt; { action }&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is optional as we saw in a previous example &lt;code&gt;awk '{ print $0 }' example.txt&lt;/code&gt; while the &lt;code&gt;action&lt;/code&gt; is the operation you need to execute.&lt;/p&gt;

&lt;p&gt;For the conditions, there are only two types of conditions, &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;, and they also can have actions, for example, consider &lt;code&gt;BEGIN&lt;/code&gt; as the entry instruction where you can enable, disable or configure different variables within the script run execution, for example, if you want to change the delimiter character from the default space (&lt;code&gt;' '&lt;/code&gt;) to a semicolon (&lt;code&gt;;&lt;/code&gt;) you can add something like at the beginning of the script &lt;code&gt;BEGIN { FS= ';'}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;AWK provides 8 built-in variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FILENAME&lt;/strong&gt; - Name of the current input file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FS&lt;/strong&gt; - Input field separator variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FNR&lt;/strong&gt; - Number of Records relative to the current input file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NF&lt;/strong&gt; - Number of Fields in a record&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NR&lt;/strong&gt; - Number of Records Variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;OFS&lt;/strong&gt; - Output Field Separator Variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ORS&lt;/strong&gt; - Output Record Separator Variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RS&lt;/strong&gt; - Record Separator variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;END&lt;/code&gt;, on the other hand, will always be at the closing statement and can be used to execute any finishing commands after the main body has been completed, for example, printing final variables' values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;BEGIN &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        s +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
END &lt;span class="o"&gt;{&lt;/span&gt; print s &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Something else worth mentioning is the fact that AWK supports the creation of custom functions when you need to do more complex operations and the script starts to become hard to manage &lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print "The square root of", $1, "is", sqrt($1) }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AWK also provides the functionality to create Arrays (and operations built-in to manage them) and multiple other data types that we won't be discussing in this post because it might take a couple of hundreds of lines. Still, you can find a good description of them &lt;a href="https://www.gnu.org/software/gawk/manual/html_node/General-Data-Types.html"&gt;here&lt;/a&gt;, so please take a look if you are curious to learn more.&lt;/p&gt;

&lt;p&gt;Example of array operations in AWK:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array addition&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;BEGIN &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        array[&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
END &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;position &lt;span class="k"&gt;in &lt;/span&gt;array&lt;span class="o"&gt;)&lt;/span&gt; 
        print position &lt;span class="s2"&gt;": "&lt;/span&gt; array[position]
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Array deleting&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
BEGIN &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        array[&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
END &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;position &lt;span class="k"&gt;in &lt;/span&gt;array&lt;span class="o"&gt;)&lt;/span&gt; 
        delete array[position]
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in case you are thinking how powerful this is and like me trying to take it further to create small AWK powered "apps" to do the monotonous tasks while wondering how can you verify if what you are coding is valid, you can execute any number of unit tests for shell scripts, and therefore, AWK scripts using &lt;a href="https://github.com/kward/shunit2"&gt;shunit2&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-processing-with-awk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Data processing with AWK&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;As mentioned a couple of times during this post, AWK's main objective is to process data, which could mean data in files, lines provided command output, or any other form of input data, but let's start simple.&lt;/p&gt;

&lt;p&gt;Opening a file and reading the data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $0 }'&lt;/span&gt; example.txt
This is an AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the previous example AWK, we can notice some things like how AWK uses indexes to split the data provided within the file; these indexes are created using the delimiter, which by default is the blank space (check the example in this post on how to define a new delimiter)&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;$0&lt;/code&gt; will print the whole line, while using the sequence generated based on the number of columns will give you control of the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $4, $1, $5, $3, $2 }'&lt;/span&gt; example.txt
AWK This example an is
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also straightforwardly concatenate strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1, "could be your", $4, $5 }'&lt;/span&gt; example.txt
This could be your AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Searching a value&lt;/p&gt;

&lt;p&gt;AWK can search information within the provided input, and one way is using regexp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/This/ { print $0 }'&lt;/span&gt;
This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/test/ { print $0 }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another searching mechanism is using control operations like &lt;code&gt;if&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'if ($1=="This"){ print $0 }'&lt;/span&gt;
This is an AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#awk-gawk-nawk-or-mawk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AWK, GAWK, NAWK or MAWK&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Finally as usual in any programming language, variants tend to appear with time, and AWK was not the exception; what could be considered the most important (according to me) are the next.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GAWK&lt;/strong&gt; - GNU AWK is available from the GNU project's &lt;a href="http://savannah.gnu.org/projects/gawk/"&gt;open source&lt;/a&gt; and is currently maintained.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NAWK&lt;/strong&gt; - New AWK Computing, a news release on the AWK project &lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MAWK&lt;/strong&gt; - Fast AWK implementation which it's codebase is based on a byte-code interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there are other multiple variants out there, and you won't have any trouble finding them.&lt;/p&gt;

&lt;p&gt;As you can see, AWK is an excellent flexible and robust command-line tool, which takes a while to ramp up to, but once you get the basics is pretty simple to use and explode its potential.&lt;/p&gt;

&lt;p&gt;In the next post, I will go deeper into different and more complex scenarios and examples; let me know if you have any questions or comments or want more specific related content.&lt;/p&gt;







&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://brenocon.com/blog/2009/09/dont-mawk-awk-the-fastest-and-most-elegant-big-data-munging-language/"&gt;https://brenocon.com/blog/2009/09/dont-mawk-awk-the-fastest-and-most-elegant-big-data-munging-language/&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html"&gt;https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;Robbins, Arnold (March 2014). &lt;a href="http://www.skeeve.com/gnu-awk-and-me-2014.pdf"&gt;"The GNU Project and Me: 27 Years with GNU AWK"&lt;/a&gt; (PDF). skeeve.com. Retrieved October 4, 2014. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>linux</category>
      <category>tooling</category>
      <category>programming</category>
    </item>
    <item>
      <title>Advanced Front End Developer , Interview Essentials - Part 2</title>
      <author>Goutham JM</author>
      <pubDate>Sun, 17 Oct 2021 03:31:00 +0000</pubDate>
      <link>https://dev.to/gouthamjm/advanced-front-end-developer-interview-essentials-part-2-41gm</link>
      <guid>https://dev.to/gouthamjm/advanced-front-end-developer-interview-essentials-part-2-41gm</guid>
      <description>&lt;p&gt;This post is a continuation of &lt;a href="https://dev.to/gouthamjm/advanced-fe-dev-interview-essentials-1-45ho"&gt;Advanced Front End Developer , Interview Essentials - Part 1&lt;/a&gt; ,if you haven't read it I strongly recommend you to go through the post where I have explained the CRP in detail&lt;/p&gt;

&lt;p&gt;Optimizing the Critical Rendering Path is very essential for performance of a site , and always keep in mind the below rule&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You cannot optimize something that you cannot measure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1dom-optimization"&gt;
  &lt;/a&gt;
  1.DOM Optimization
&lt;/h2&gt;

&lt;p&gt;You should stream HTML as fast as you can ,we can achieve that by these step's minification,compression and caching the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In which stage of CRP, Do you think will the page be rendered ?&lt;/strong&gt; &lt;br&gt;
It will be rendered when the render tree is constructed ,i.e. just after CSSOM has been constructed, and it will be the render blocking step , so it becomes crucial to optimize CSSOM&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2cssom-optimization"&gt;
  &lt;/a&gt;
  2.CSSOM Optimization
&lt;/h2&gt;

&lt;p&gt;As CSS is a render blocking resource,always keep your CSS lean, deliver it as quickly as possible, and we can use media types and queries to unblock rendering&lt;/p&gt;

&lt;p&gt;If we have some CSS styles that are only used under certain conditions, for example, when the page is being printed or being projected onto a large monitor,but you are viewing in a mobile ,then we can block rendering on the resources that are not used.&lt;/p&gt;

&lt;p&gt;CSS &lt;code&gt;media types&lt;/code&gt; and &lt;code&gt;media queries&lt;/code&gt; allow us to address these use cases,in the below example if we maintain a separate style sheet for different use cases , &lt;em&gt;Example&lt;/em&gt; : we may need to apply certain styling for print or in responsive site we can mention a specific width during which case only the style sheet must be imported&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"other.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 40em)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When declaring your style sheet assets, pay close attention to the media type and queries; they greatly impact critical rendering path performance&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"portrait.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"orientation:portrait"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first declaration is render blocking and matches in all conditions.&lt;/li&gt;
&lt;li&gt;The second declaration is also render blocking: "all" is the default type, so if you don’t specify any type, it’s implicitly set to "all". Hence, the first and second declarations are actually equivalent.&lt;/li&gt;
&lt;li&gt;The third declaration has a dynamic media query, which is evaluated when the page is loaded. Depending on the orientation of the device while the page is loading, portrait.css may or may not be render blocking.&lt;/li&gt;
&lt;li&gt;The last declaration is only applied when the page is being printed, so it is not render blocking when the page is first loaded in the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#avoid-css-imports"&gt;
  &lt;/a&gt;
  Avoid CSS imports
&lt;/h3&gt;

&lt;p&gt;The CSS import (&lt;code&gt;@import&lt;/code&gt;) directive enables one stylesheet to import rules from another stylesheet file. However, avoid these directives because they introduce additional roundtrips into the critical path: the imported CSS resources are discovered only after the CSS stylesheet with the &lt;code&gt;@import&lt;/code&gt; rule itself is received and parsed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-css-in-the-document-head"&gt;
  &lt;/a&gt;
  Put CSS in the document head
&lt;/h3&gt;

&lt;p&gt;Specify all CSS resources as early as possible within the HTML document so that the browser can discover the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags and dispatch the request for the CSS as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-js-optimization"&gt;
  &lt;/a&gt;
  3. JS Optimization
&lt;/h2&gt;

&lt;p&gt;JavaScript allows us to modify just about every aspect of the page: content, styling, and its response to user interaction . JavaScript can also block DOM construction and delay when the page is rendered. To deliver optimal performance, make your JavaScript async and eliminate any unnecessary JavaScript from the critical rendering path&lt;/p&gt;

&lt;p&gt;By default, JavaScript execution is "parser blocking": when the browser encounters a script in the document it must pause DOM construction, hand over control to the JavaScript runtime, and let the script execute before proceeding with DOM construction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's take the below example where there is a style sheet as well as script that modify the  &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag , so will the text be rendered black or red , the answer to this lies in the order of the execution &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Page requests for HTML, and it will start building the DOM&lt;/li&gt;
&lt;li&gt;Then it will encounter style and request for CSS resources ,during this time CSS doesn't know whether the script will modify the CSS, so it will wait for  CSSOM to be constructed&lt;/li&gt;
&lt;li&gt;After CSSOM is constructed, then JS will be executed and will build the Render Tree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS blocks script as well as rendering page, so it becomes crucial  to optimize the CSS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3pEZRCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofq4xmg7o9zfdbyjf6n1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3pEZRCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofq4xmg7o9zfdbyjf6n1.png" alt="JS Optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;1.All JS code might not modify the DOM in such cases one way we can optimize JS it to load it after DOM has been loaded ,like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      function loadFunction() &lt;span class="si"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Window is loaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="si"&gt;}&lt;/span&gt;
      window.onload = loadFunction();
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Another way to solve this is to add &lt;code&gt;async&lt;/code&gt; attribute to the  &lt;code&gt;script&lt;/code&gt; tag , it does two things - it doesn't block DOM construction, and CSSOM construction , so basically what it does is it will allow JS not to block CRP &lt;br&gt;
3.There is also a &lt;code&gt;defer&lt;/code&gt; attribute that you can add to the script tag that tells the parser that the script should wait to execute until after the document is loaded&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;So let's see what all the options we have to optimize the CRP&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Minification,Compression and Caching - HTML,CSS and JS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce critical resources  - CSS media query ,avoid imports and use critical inline CSS , JS - with async or defer attribute&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shorten CRP length , i.e. reduce the number of round trips for fetching resources , there are a ton of ways to optimize it based on different communication protocol,You can refer it &lt;a href="https://hpbn.co/"&gt;here&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimize the order in which the remaining critical resources are loaded: download all critical assets as early as possible to shorten the critical path length.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other methods of optimizing a site ,in my next post I will discuss on how to achieve Fast Load time for your site&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path"&gt;https://developers.google.com/web/fundamentals/performance/critical-rendering-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://classroom.udacity.com/courses/ud884"&gt;https://classroom.udacity.com/courses/ud884&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Difference between Methods and functions in Javascript </title>
      <author>Amran AL Ketara</author>
      <pubDate>Sun, 17 Oct 2021 03:30:05 +0000</pubDate>
      <link>https://dev.to/amk/difference-between-methods-and-functions-in-javascript-53f5</link>
      <guid>https://dev.to/amk/difference-between-methods-and-functions-in-javascript-53f5</guid>
      <description>&lt;p&gt;In this article I'm explaining what is the difference between functions and methods in Javascript.&lt;br&gt;
&lt;a href="https://amkblog.com/javascript/methods-and-functions/"&gt;https://amkblog.com/javascript/methods-and-functions/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
