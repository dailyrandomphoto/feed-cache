<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Awesome macOS Libraries List</title>
      <author>Anton Paliakou</author>
      <pubDate>Fri, 21 Jan 2022 09:58:35 +0000</pubDate>
      <link>https://dev.to/toni777772/awesome-macos-libraries-list-3556</link>
      <guid>https://dev.to/toni777772/awesome-macos-libraries-list-3556</guid>
      <description>&lt;p&gt;Do you like the list? Press ‚≠êÔ∏è on GitHub too! Thanks!&lt;br&gt;
&lt;a href="https://github.com/Toni77777/awesome-macos-libraries"&gt;https://github.com/Toni77777/awesome-macos-libraries&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-manager"&gt;
  &lt;/a&gt;
  Dependency Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt; - The Package Manager for the Swift Programming Language. Created and maintained by Apple. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CocoaPods/CocoaPods"&gt;CocoaPods&lt;/a&gt; - The Cocoa Dependency Manager. CocoaPods manages dependencies for your Xcode projects. (de facto standard/most used Dependency Manager) Language: Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; - A simple, decentralized dependency manager for Cocoa. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#animation"&gt;
  &lt;/a&gt;
  Animation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/timdonnelly/Advance"&gt;Advance&lt;/a&gt; - Physics-based animations. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#audio"&gt;
  &lt;/a&gt;
  Audio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/AudioKit/AudioKit"&gt;AudioKit&lt;/a&gt; - Swift audio synthesis, processing, &amp;amp; analysis platform. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/realm-swift"&gt;Realm&lt;/a&gt; - Realm is a mobile database: a replacement for Core Data &amp;amp; SQLite. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yapstudios/YapDatabase"&gt;YapDatabase&lt;/a&gt; - YapDB is a collection/key/value store with a plugin architecture. It's built atop sqlite, for Swift &amp;amp; objective-c developers. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ccgus/fmdb"&gt;FMDB&lt;/a&gt; - A Cocoa / Objective-C wrapper around SQLite. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/modo-studio/SugarRecord"&gt;SugarRecord&lt;/a&gt; - CoreData/Realm sweet wrapper written in Swift. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stephencelis/SQLite.swift"&gt;SQLite.swift&lt;/a&gt; - A type-safe, Swift-language layer over SQLite3. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/groue/GRDB.swift"&gt;GRDB&lt;/a&gt; - A toolkit for SQLite databases, with a focus on application development. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/realm-cocoa-converter"&gt;Realm Converter&lt;/a&gt; - A library that provides the ability to import/export Realm files from a variety of data container formats. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Tencent/wcdb"&gt;WCDB&lt;/a&gt; - WCDB is a cross-platform database framework developed by WeChat. Language: C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/caiyue1993/IceCream"&gt;IceCream&lt;/a&gt; - Sync Realm Database with CloudKit. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenKitten/MongoKitten"&gt;MongoKitten&lt;/a&gt; - Native MongoDB driver for Swift, written in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arturdev/Unrealm"&gt;Unrealm&lt;/a&gt; - Unrealm is an extension on RealmCocoa, which enables Swift native types to be saved in Realm. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dependency-injection"&gt;
  &lt;/a&gt;
  Dependency Injection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Swinject/Swinject"&gt;Swinject&lt;/a&gt; - Dependency injection framework for Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#device"&gt;
  &lt;/a&gt;
  Device
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Ekhoo/Device"&gt;Device&lt;/a&gt; - Light weight tool for detecting the current device and screen size written in swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwifterSwift/SwifterSwift"&gt;SwifterSwift&lt;/a&gt; - A handy collection of more than 500 native Swift extensions to boost your productivity. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nvzqz/FileKit"&gt;FileKit&lt;/a&gt; - Simple and expressive file management in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pixelglow/ZipZap"&gt;ZipZap&lt;/a&gt; - zip file I/O library. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/weichsel/ZIPFoundation"&gt;ZIPFoundation&lt;/a&gt; - Effortless ZIP Handling in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZipArchive/ZipArchive"&gt;SSZipArchive&lt;/a&gt; - ZipArchive is a simple utility class for zipping and unzipping files. Language: C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/krzysztofzablocki/KZFileWatchers"&gt;KZFileWatchers&lt;/a&gt; - A micro-framework for observing file changes, both local and remote. Helpful in building developer tools. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/amosavian/FileProvider"&gt;FilesProvider&lt;/a&gt; - FileManager replacement for Local, iCloud and Remote. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marmelroy/Zip"&gt;Zip&lt;/a&gt; - Swift framework for zipping and unzipping files. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image"&gt;
  &lt;/a&gt;
  Image
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/onevcat/Kingfisher"&gt;Kingfisher&lt;/a&gt; - A lightweight, pure-Swift library for downloading and caching images from the web. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kean/Nuke"&gt;Nuke&lt;/a&gt; - Image loading system. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Alamofire/AlamofireImage"&gt;AlamofireImage&lt;/a&gt; - AlamofireImage is an image component library for Alamofire. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#in-app-purchases-and-subscription"&gt;
  &lt;/a&gt;
  In App Purchases and Subscription
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bizz84/SwiftyStoreKit"&gt;SwiftyStoreKit&lt;/a&gt; - Lightweight In App Purchases Swift framework. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RevenueCat/purchases-ios"&gt;purchases-ios&lt;/a&gt; - In-app purchases and subscriptions made easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types"&gt;Codable&lt;/a&gt; - Out of box üì¶  solution from Apple for Encode/Decode JSON. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwiftyJSON/SwiftyJSON"&gt;SwiftyJSON&lt;/a&gt; - The better way to deal with JSON data in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SBJson/SBJson"&gt;SBJson&lt;/a&gt; - This framework implements a strict JSON parser and generator in Objective-C. Language: Objective-C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Mantle/Mantle"&gt;Mantle&lt;/a&gt; - Model framework for Cocoa and Cocoa Touch. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jsonmodel/jsonmodel"&gt;JSONModel&lt;/a&gt; - Magical Data Modeling Framework for JSON - allows rapid creation of smart data models. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ikesyo/Himotoki"&gt;Himotoki&lt;/a&gt; - A type-safe JSON decoding library purely written in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tristanhimmelman/AlamofireObjectMapper"&gt;AlamofireObjectMapper&lt;/a&gt; - An Alamofire extension which converts JSON response data into swift objects using ObjectMapper. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CoderMJLee/MJExtension"&gt;MJExtension&lt;/a&gt; - A fast, convenient and nonintrusive conversion framework between JSON and model. Your model class doesn't need to extend any base class. You don't need to modify any model file. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tristanhimmelman/ObjectMapper"&gt;ObjectMapper&lt;/a&gt; - Simple JSON Object mapping written in Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keychain"&gt;
  &lt;/a&gt;
  Keychain
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kishikawakatsumi/KeychainAccess"&gt;KeychainAccess&lt;/a&gt; - Simple Swift wrapper for Keychain. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matthewpalmer/Locksmith"&gt;Locksmith&lt;/a&gt; - A powerful, protocol-oriented library for working with the keychain in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/square/Valet"&gt;Valet&lt;/a&gt; - Valet lets you securely store data in the macOS Keychain without knowing a thing about how the Keychain works. It‚Äôs easy. We promise. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kishikawakatsumi/UICKeyChainStore"&gt;UICKeyChainStore&lt;/a&gt; - UICKeyChainStore is a simple wrapper for Keychain on macOS. Makes using Keychain APIs as easy as NSUserDefaults. Language: Objective-C.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#linter"&gt;
  &lt;/a&gt;
  Linter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt; - A tool to enforce Swift style and conventions. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/CocoaLumberjack/CocoaLumberjack"&gt;CocoaLumberjack&lt;/a&gt; - A fast &amp;amp; simple, yet powerful &amp;amp; flexible logging framework. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fpillet/NSLogger"&gt;NSLogger&lt;/a&gt; - A modern, flexible logging tool. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/atereshkov/EXPLogger"&gt;EXPLogger&lt;/a&gt; - A lightweight and simple logger for Swift projects. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DaveWoodCom/XCGLogger"&gt;XCGLogger&lt;/a&gt; - A debug log framework for use in Swift projects. Allows you to log details to the console (and optionally a file), just like you would have with NSLog() or print(), but with additional information, such as the date, function name, filename and line number. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwiftyBeaver/SwiftyBeaver"&gt;SwiftyBeaver&lt;/a&gt; - Convenient &amp;amp; secure logging during development &amp;amp; release. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/PureLayout/PureLayout"&gt;PureLayout&lt;/a&gt; - The ultimate API for iOS &amp;amp; OS X Auto Layout ‚Äî impressively simple, immensely powerful. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SnapKit/SnapKit"&gt;SnapKit&lt;/a&gt; - A Swift Autolayout DSL. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/exyte/Grid"&gt;Grid&lt;/a&gt; - The most powerful Grid container missed in SwiftUI. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kean/Align"&gt;Align&lt;/a&gt; - Intuitive and powerful Auto Layout library. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/layoutBox/PinLayout"&gt;PinLayout&lt;/a&gt; - Fast Swift Views layouting without auto layout. No magic, pure code, full control and blazing fast. Concise syntax, intuitive, readable &amp;amp; chainable. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/onmyway133/EasyAnchor"&gt;EasyAnchor&lt;/a&gt; - Declarative, extensible, powerful Auto Layout. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/roberthein/TinyConstraints"&gt;TinyConstraints&lt;/a&gt; - Nothing but sugar. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rightpoint/Anchorage"&gt;Anchorage&lt;/a&gt; - A collection of operators and utilities that simplify layout code. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nakiostudio/EasyPeasy"&gt;EasyPeasy&lt;/a&gt; - Auto Layout made easy. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mamaral/Neon"&gt;Neon&lt;/a&gt; - A powerful Swift programmatic UI layout framework. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robb/Cartography"&gt;Cartography&lt;/a&gt; -  A declarative Auto Layout DSL for Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Alamofire/Alamofire"&gt;Alamofire&lt;/a&gt; - Alamofire is an HTTP networking library written in Swift. (de facto standard library for network) Language: Swift.
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apollographql/apollo-ios"&gt;apollo-ios&lt;/a&gt; - A strongly-typed, caching GraphQL client. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AFNetworking/AFNetworking"&gt;AFNetworking&lt;/a&gt; - A delightful networking framework. Language: Objective-C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ashleymills/Reachability.swift"&gt;Reachability&lt;/a&gt; - Replacement for Apple's Reachability re-written in Swift with closures. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Moya/Moya"&gt;Moya&lt;/a&gt; - Network abstraction layer written in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ishkawa/APIKit"&gt;APIKit&lt;/a&gt; - Type-safe networking abstraction layer that associates request type with response type. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daltoniam/SwiftHTTP"&gt;SwiftHTTP&lt;/a&gt; - Thin wrapper around NSURLSession in swift. Simplifies HTTP requests. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dduan/Just"&gt;Just&lt;/a&gt; - Swift HTTP for Humans. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bustoutsolutions/siesta"&gt;siesta&lt;/a&gt; - The civilized way to write REST API clients. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RestKit/RestKit"&gt;RestKit&lt;/a&gt; - RestKit is a framework for consuming and modeling RESTful web resources. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apple/swift-protobuf"&gt;Swift Protobuf&lt;/a&gt; - Plugin and runtime library for using protobuf with Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexeyxo/protobuf-swift"&gt;protobuf-swift&lt;/a&gt; - Google ProtocolBuffers for Apple Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactive-programming"&gt;
  &lt;/a&gt;
  Reactive Programming
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt; - Reactive Programming in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa"&gt;ReactiveCocoa&lt;/a&gt; - Cocoa framework and Obj-C dynamism bindings for ReactiveSwift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt; - Streams of values over time by ReactiveCocoa group. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#socket"&gt;
  &lt;/a&gt;
  Socket
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/socketio/socket.io-client-swift"&gt;Socket.IO&lt;/a&gt; - Socket.IO client written on Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebookincubator/SocketRocket"&gt;SocketRocket&lt;/a&gt; - A conforming Objective-C WebSocket client library. Language: Objective-C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robbiehanson/CocoaAsyncSocket"&gt;CocoaAsyncSocket&lt;/a&gt; - Asynchronous socket networking library. Language: Objective-C. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you know a cool macOS library? Welcome to contribute!&lt;br&gt;
&lt;a href="https://github.com/Toni77777/awesome-macos-libraries"&gt;https://github.com/Toni77777/awesome-macos-libraries&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>macos</category>
      <category>github</category>
      <category>osx</category>
    </item>
    <item>
      <title>Detecting Fake News Project</title>
      <author>Lians </author>
      <pubDate>Fri, 21 Jan 2022 09:55:01 +0000</pubDate>
      <link>https://dev.to/lians/detecting-fake-news-project-1n8d</link>
      <guid>https://dev.to/lians/detecting-fake-news-project-1n8d</guid>
      <description>&lt;p&gt;I always had Python debates with my friends; there was always something about me and the language that didn't match up. Who'd have guessed that two years later, I'd be considering a career in Data Science centered on Python? This is a step-by-step guide to completing a data science project that detects fake news. For this project,  I collected a Data Set from (&lt;a href="https://drive.google.com/file/d/1er9NJTLUA3qnRuyhfzuN0XUsoIC4a-_q/view"&gt;https://drive.google.com/file/d/1er9NJTLUA3qnRuyhfzuN0XUsoIC4a-_q/view&lt;/a&gt;)&lt;br&gt;
To begin you will need the following installed in your computer;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Jupyter Notebook that can be installed using Anaconda&lt;/li&gt;
&lt;li&gt; Python 3&lt;/li&gt;
&lt;li&gt; Download the csv file of the data set from the link shared above.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's get started&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We'll design a TfidfVectorizer with sklearn and then establish a PassiveAgressorClassiffer to help fit the model.&lt;br&gt;
You'll need to install the following prerequisites before you can use your Jupyter library. We begin by installing numpy sklearn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install numpy pandas sklearn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your application will install the required tools and create a fresh input space for you to type your next code.&lt;br&gt;
You'll need to use the codes below to make the appropriate imports for this project;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
import numpy as np
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After executing the application, the screen will show no output, indicating that the data set is ready to be read into your notebook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#news is just a variable name we assigned to the project to simply our access to the dataset, you are free to select another name.
news = pd.read_csv(r'C:\Users\lian.s\Desktop\Sign Recognition\news.csv')
#We print out the number of rows and columns
news.shape
#Prints out the top 5 rows in a dataframe or series
news.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6e9G-3DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8crnz6turnmgk3nqxaot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6e9G-3DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8crnz6turnmgk3nqxaot.png" alt="If you run the program, you'll notice something like this." width="880" height="335"&gt;&lt;/a&gt;&lt;br&gt;
That means we successfully read the dataset to our notebook and described the top 5 rows and columns. Now we can call the labels from the data set;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;labels= news.label
labels.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, your project is off to a solid start&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlNuCRI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a8m6kxnsz5ka4dlfl8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlNuCRI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a8m6kxnsz5ka4dlfl8i.png" alt="Congratulations, your project is off to a solid start" width="880" height="132"&gt;&lt;/a&gt;&lt;br&gt;
You've undoubtedly dealt with training and testing as a young data scientist. This will be the next phase in the development of our project.&lt;br&gt;
We utilize data to construct a training set, which is a subset used to fit the model, and then we use the trainset to test it. As a result, we must first establish a training set and then test it to convert it to a test set. The models developed are used to predict an unknown outcome.&lt;br&gt;
To accomplish this, we employ;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x_train,x_test,y_train,y_test=train_test_split(news['text'], labels, test_size=0.2, random_state=7)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We continue by creating a TfidfVectorizer;&lt;br&gt;
Term Frequency (TF) is the number of times a word appears in a document, whereas Inverse Document Frequency (IDF) is the number of times a word appears in one document relative to others. The function creates its own matrix from raw data sets. We first generate the matrix, then fit and transform the vectorizer on the train set, as well as transform the vectorizer on the test set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)
tfidf_train=tfidf_vectorizer.fit_transform(x_train) 
tfidf_test=tfidf_vectorizer.transform(x_test)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the help of sklearn PassiveAggressiveClassifier, which operates by reacting passively to accurate classifications and aggressively to any misclassifications, we'll be able to calculate the accuracy of our test set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Initialize a PassiveAggressiveClassifier
pac=PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train,y_train)
#Predict on the test set and calculate accuracy
y_pred=pac.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'Accuracy: {round(score*100,2)}%')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have an accuracy result of 92.9%&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AW8WCis9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4trcnypn4l24c77qmao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AW8WCis9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4trcnypn4l24c77qmao.png" alt="an accuracy result of 92.9%" width="880" height="217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we print out the matrix of how many fake and true news exist amongst our set. This is what we call a confusion matrix.&lt;/p&gt;

&lt;p&gt;confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlJpcsjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll095rzirm07ax3b3471.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlJpcsjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll095rzirm07ax3b3471.png" alt="Results" width="880" height="153"&gt;&lt;/a&gt;&lt;br&gt;
From our test, we have 588 true positives, 40 false positives , 589 true negatives and 50 false negatives.&lt;/p&gt;

&lt;p&gt;There you have it, for more practice you can use the set to calculate over and underfitting. I hope you found this post useful; please share your thoughts in the comments section below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to build a toast (notification) component with Tailwind CSS and Flowbite</title>
      <author>Zolt√°n Sz≈ëgy√©nyi</author>
      <pubDate>Fri, 21 Jan 2022 09:49:42 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-toast-notification-component-with-tailwind-css-and-flowbite-47nb</link>
      <guid>https://dev.to/themesberg/how-to-build-a-toast-notification-component-with-tailwind-css-and-flowbite-47nb</guid>
      <description>&lt;p&gt;Tailwind CSS is one of the most popular open-source CSS frameworks based on the utility-first approach and it is estimated that this year it will reach more weekly downloads on NPM than Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flowbite.com"&gt;Flowbite&lt;/a&gt; is an open-source component library based on Tailwind CSS featuring dark mode support, a Figma design system, components like buttons, dropdowns, modals, navbars, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpVuoewp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1f5wzbxp7sd3ezsi2mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpVuoewp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1f5wzbxp7sd3ezsi2mn.png" alt="Tailwind CSS Toast" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article I want to show you how you can build a toast/notification component for your Tailwind CSS project using Flowbite.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-toast-component"&gt;
  &lt;/a&gt;
  Tailwind CSS toast component
&lt;/h2&gt;

&lt;p&gt;First of all, we should set up the semantic HTML5 markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" role="alert"&amp;gt;
    &amp;lt;div&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now add the close use some stylings for the toast wrapper and the text inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A toast and notification pop-up should always have a close icon. Let's use a SVG X icon:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
    &amp;lt;button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" aria-label="Close"&amp;gt;
        &amp;lt;span class="sr-only"&amp;gt;Close&amp;lt;/span&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also add a descriptive icon before the text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200"&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
    &amp;lt;button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" aria-label="Close"&amp;gt;
        &amp;lt;span class="sr-only"&amp;gt;Close&amp;lt;/span&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to make add the feature of the close icon to actually hide the toast component, I recommend you to &lt;a href="https://flowbite.com/docs/getting-started/quickstart/"&gt;install Flowbite&lt;/a&gt; as a plugin inside your Tailwind CSS project and also include the JS script.&lt;/p&gt;

&lt;p&gt;Make sure that you have &lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;Node.js&lt;/a&gt; and &lt;a href="https://tailwindcss.com/" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; installed. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Flowbite as a dependency using NPM by running the following command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @themesberg/flowbite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Require Flowbite as a plugin inside the &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@themesberg/flowbite/plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Include the main JavaScript file to make interactive elements work:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../path/to/@themesberg/flowbite/dist/flowbite.bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Additionally to your own &lt;code&gt;content&lt;/code&gt; data you should add &lt;code&gt;@themesberg/flowbite&lt;/code&gt; to apply the classes from the interactive elements in the &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./node_modules/@themesberg/flowbite/**/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add the &lt;code&gt;data-collapse-toggle="toast-default"&lt;/code&gt; data attribute to close the toast component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200"&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
    &amp;lt;button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-collapse-toggle="toast-default" aria-label="Close"&amp;gt;
        &amp;lt;span class="sr-only"&amp;gt;Close&amp;lt;/span&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark mode
&lt;/h2&gt;

&lt;p&gt;If you noticed I also showed you how to add the &lt;code&gt;dark:x&lt;/code&gt; variant classes for dark mode. Check out this &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;Tailwind CSS dark mode tutorial&lt;/a&gt; to learn how to set up a dark mode switcher with Flowbite and Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_efOvmPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lprb1d6450ebtwroi00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_efOvmPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lprb1d6450ebtwroi00.png" alt="Tailwind CSS toast dark mode" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-components"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS components
&lt;/h2&gt;

&lt;p&gt;This toast component built with Tailwind is part of a larger and open source component library called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHEtzhV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hldt1t2on5mqy9yxq7dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHEtzhV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hldt1t2on5mqy9yxq7dx.png" alt="Tailwind CSS Toast" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out the following links to view more toast component styles, sizes, and variations and also other components like buttons, modals, navbars, and more.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://flowbite.com/docs/components/toast/"&gt;Tailwind CSS toast component&lt;/a&gt;&lt;br&gt;
üìö &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite - Tailwind CSS components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>6 ways to make online as a content creator in 2022</title>
      <author>Rex Anthony</author>
      <pubDate>Fri, 21 Jan 2022 09:47:37 +0000</pubDate>
      <link>https://dev.to/rexthony/6-ways-to-make-online-as-a-content-creator-in-2022-236h</link>
      <guid>https://dev.to/rexthony/6-ways-to-make-online-as-a-content-creator-in-2022-236h</guid>
      <description>&lt;p&gt;Anyone can make money online as a content creator. The internet has made it possible for anyone to make money when they provide a product or service that people want. A few years back, there was only a handful of options for content creators to make a living from their craft, but things have changed a lot in recent times.&lt;/p&gt;

&lt;p&gt;There are now a lot of options available for content creators to make a living online. Some of the ways content creators make money online will be discussed in this article&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-money-online-with-freelancing-for-content-creators"&gt;
  &lt;/a&gt;
  Make money online with freelancing for content creators
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cI1mNXjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/taking-notes-from-a-laptop" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cI1mNXjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/taking-notes-from-a-laptop" alt="A freelancer taking notes from a laptop" width="750" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever since I began freelancing over a year ago, I have had the opportunity to work with a handful of professionals and experts from all over the world. I have experienced the freedom to work from wherever and at whatever time I like. The freedom to choose my work hours is such an incredible experience.&lt;/p&gt;

&lt;p&gt;Because I've done such an effective job of defining my value proposition, branding myself as an expert in my field, and getting my work in front of new clients, I have a 3-5 month waiting list of new freelance jobs.&lt;/p&gt;

&lt;p&gt;However, that didn't happen overnight. My success in freelancing is the result of a lot of strategic positioning, hours of hard work, and good timing.&lt;/p&gt;

&lt;p&gt;If you're ready to get serious in freelancing here are some tips to boost your earnings during your first year of freelancing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pick-a-growing-niche"&gt;
  &lt;/a&gt;
  Pick a growing Niche
&lt;/h3&gt;

&lt;p&gt;If you are just starting out freelancing, you might be asking yourself what skills you have to offer. You might be tempted to take any job that comes by without any strategic planning. &lt;/p&gt;

&lt;p&gt;The nice thing about most freelancing platforms such as &lt;a href="https://sharetxt.live/recommends/fiverr"&gt;fiverr&lt;/a&gt; is that you can create several gigs based on the skills that you have.&lt;/p&gt;

&lt;p&gt;When you specialize in a skill, you become an expert in a specific field and get more referrals. This means that you are less dependent on the platform's algorithms. You will find that most of your jobs will be by referrals. This will depend on the quality of your past work.&lt;/p&gt;

&lt;p&gt;To discover growing niches you need to find out what people are searching for. This can be done by using an application that I created for you called &lt;a href="https://sharetxt.live/app/search-analyser"&gt;Search Analyser&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To use the application, simply visit the site and enter your niche into the input field then click on search, you will see questions that people are searching around your niche. This will help you to discover the questions that people are asking around your niche.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-clear-about-what-service-you-offer"&gt;
  &lt;/a&gt;
  Be clear about what service you offer
&lt;/h3&gt;

&lt;p&gt;A major decision you can make is the service that you offer. This will save you from a lot of stress. &lt;/p&gt;

&lt;p&gt;The more specific you can be about what service your offer, the better. Not only will it help you to brand yourself, but it'll also allow you to control the expectations of prospective clients and help them to know what they will get by working with you.&lt;/p&gt;

&lt;p&gt;While the short-term benefits of steady work are tempting, taking on projects that aren't getting you closer to your ultimate goal of becoming the best in your field will only delay you from making meaningful progress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-good-portfolio-site"&gt;
  &lt;/a&gt;
  Create a good portfolio site
&lt;/h3&gt;

&lt;p&gt;One of the best ways to demonstrate your technical skills is by having an amazing portfolio site of your own. There are a lot of free bootstrap themes out there, but I find that creating your custom design stands out and it is more unique and shows your personality.&lt;/p&gt;

&lt;p&gt;Here are some tips for a good portfolio site&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Showcase your expertise&lt;/li&gt;
&lt;li&gt;Highlight relevant experience&lt;/li&gt;
&lt;li&gt;Start with your best work&lt;/li&gt;
&lt;li&gt;Include your contact information so that potential customers can contact you&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#research-your-pricing"&gt;
  &lt;/a&gt;
  Research your pricing
&lt;/h3&gt;

&lt;p&gt;Most clients won't hesitate to pay higher rates for a freelancer that gives them an incredible first impression.&lt;/p&gt;

&lt;p&gt;While deciding how much to charge clients for your service, it is important to research the average prices that similar jobs charge. &lt;/p&gt;

&lt;p&gt;You don't want to charge too much or too low, researching your prices prevents clients from seeing you as scammy and there will be more pressure on you to over-deliver. You can always increase your prices in the future as you gain more reputation and hope that your clients stay on board.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-money-online-with-affiliate-marketing"&gt;
  &lt;/a&gt;
  Make money online with affiliate marketing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hgd-2qjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/affiliate-marketing-written-on-note" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hgd-2qjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/affiliate-marketing-written-on-note" alt="Affiliate marketing note" width="800" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Affiliate marketing is one of the ways that you can make money online as a content creator. It is when an online retailer pays you a commission for traffic or sales generated from your referrals.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You recommend a product or service to your followers&lt;/li&gt;
&lt;li&gt;Your followers purchase the product or service using your affiliate link&lt;/li&gt;
&lt;li&gt;You get paid a commission for the sales made using your affiliate link&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get started in affiliate marketing, you do not need to pay money to get a website. There are free website creators and blogs that you can acquire such as from &lt;a href="https://blogger.com"&gt;blogger&lt;/a&gt; and &lt;a href="https://medium.com"&gt;medium&lt;/a&gt; that you can use to get started.&lt;/p&gt;

&lt;p&gt;If you've done the work to choose a niche, choosing affiliate products to promote should be easy. &lt;strong&gt;Pick products that you have used and can recommend to your followers&lt;/strong&gt;. This makes it easy to promote because it is something you own or have used for some time. You can write about your experience using this product and you can provide a unique product insight better than anyone else.&lt;/p&gt;

&lt;p&gt;There are many affiliate networks out there, but here are a few of the most popular&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shareasale.com"&gt;ShareASale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cj.com"&gt;CJ Affiliate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://clickbank.com"&gt;ClickBank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://affiliate-program.amazon.com"&gt;Amazon Associates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Making data-driven decisions provides an excellent opportunity to boost your affiliate earnings. The benefit of affiliate networks as shown above is that they typically have more data on how well a product sells.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-money-online-with-google-adsense"&gt;
  &lt;/a&gt;
  Make money online with Google AdSense
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_U_0ubIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/ads-displayed-on-a-computer-screen" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_U_0ubIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/ads-displayed-on-a-computer-screen" alt="Ads showing on a screen" width="620" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For new websites or blogs, the Google Adsense program can be one of the fastest ways to generate income. Google Adsense is an advertising program that enables you to make money by running ads on your website, blog, or youtube videos. You get paid when visitors click on ads or when you have a large number of people viewing ads from your site.&lt;/p&gt;

&lt;p&gt;The ads are generated from businesses that use Google's Adwords program. You simply place a special code in your website or blog that google uses to identify your website and send ads to be displayed.&lt;/p&gt;

&lt;p&gt;The Google Adsense program has the following features&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is free to use&lt;/li&gt;
&lt;li&gt;Eligibility requirements are not stringent, it is easy to set up and integrate into your website even when it is new&lt;/li&gt;
&lt;li&gt;You can customize the placement of ads on your site&lt;/li&gt;
&lt;li&gt;Google pays monthly by direct deposit if you meet the $100 minimum threshold&lt;/li&gt;
&lt;li&gt;You can run ads on several websites from one Adsense account&lt;/li&gt;
&lt;li&gt;The type of ads that are displayed on your site is based on the type of content that you create on your site&lt;/li&gt;
&lt;li&gt;Targeting high CPC keywords will increase how much money you can make from your site&lt;/li&gt;
&lt;li&gt;You make more money when more people view your ads or if you have many site visitors&lt;/li&gt;
&lt;li&gt;Google can terminate your account at any time if you break its rules&lt;/li&gt;
&lt;li&gt;Google Adsense does not pay more than other advertising programs&lt;/li&gt;
&lt;li&gt;Google does not support clicking on your ads, incentivizing clicks, buying clicks, self clicking or using a program designed to drive traffic to your AdSense pages&lt;/li&gt;
&lt;li&gt;Use organic, SEO, digital marketing to grow your site traffic effectively without breaking Google Adsense security rules.&lt;/li&gt;
&lt;li&gt;Adsense works better when your website is optimized for mobile devices. You can check this by &lt;a href="https://search.google.com/test/mobile-friendly"&gt;performing the mobile usability test&lt;/a&gt; for your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#make-money-online-with-ecommerce"&gt;
  &lt;/a&gt;
  Make money online with Ecommerce
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKzIlL0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/shopping-cart-with-cash-beside-laptop" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKzIlL0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/shopping-cart-with-cash-beside-laptop" alt="A shopping cart with cash beside laptop" width="800" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the hardest parts of growing an e-commerce business is getting enough traffic to your website. Most e-commerce businesses rely on paid ads to generate sales but this is expensive and cuts into your profit margins. I recommend focusing on an inbound marketing strategy so you can improve your store's rankings in organic search results. It takes more time than buying ads but the payoff is greater.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E-commerce refers to any type of business conducted online. The most popular example of eCommerce is online shopping, which is defined as buying and selling goods via the internet on any device.&lt;/p&gt;

&lt;p&gt;There are a lot of free online platforms such as &lt;a href="https://woocommerce.com"&gt;woocommerce&lt;/a&gt;, &lt;a href="https://www.shopify.com"&gt;shopify&lt;/a&gt; etc, that enable you to create an online store on their platform for free without having to build one from scratch. &lt;/p&gt;

&lt;p&gt;Success in your eCommerce store depends on your product, marketing, and niche but on average, a new eCommerce company &lt;a href="https://blog.rjmetrics.com/2015/03/27/how-much-money-can-an-ecommerce-website-make"&gt;can make around $39,000&lt;/a&gt;, in their first month of business and can grow that income from there.&lt;/p&gt;

&lt;p&gt;Before you build your online store you need to know what to sell and how to source it. Firstly you need to find a niche, for example, fitness, technology, bodycon/summer dresses, pet products, and baby products are very popular right now.&lt;/p&gt;

&lt;p&gt;Here are some tips that you use to grow your eCommerce store&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find a product you want to sell. Often niche products work best.&lt;/li&gt;
&lt;li&gt;Build a business plan and model.&lt;/li&gt;
&lt;li&gt;Build an eCommerce store and website to ‚Äòsell‚Äô your product (minimal cost).&lt;/li&gt;
&lt;li&gt;Upload your products to your store.&lt;/li&gt;
&lt;li&gt;Create a blog that drives traffic.&lt;/li&gt;
&lt;li&gt;Invest in a good product information management (PIM) software solution.&lt;/li&gt;
&lt;li&gt;Get your products on as many channels as possible.&lt;/li&gt;
&lt;li&gt;The more you automate your processes, the faster you‚Äôll grow.&lt;/li&gt;
&lt;li&gt;Invest in the right software from the start.&lt;/li&gt;
&lt;li&gt;Invest in a good landing page builder with analytics to track what works.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#make-money-online-by-creating-and-selling-courses-and-tutorials"&gt;
  &lt;/a&gt;
  Make money online by creating and selling courses and tutorials
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRHr0I2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/a-lady-taking-an-online-course" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRHr0I2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/a-lady-taking-an-online-course" alt="A lady taking an online course" width="800" height="450"&gt;&lt;/a&gt;&lt;br&gt;
Online courses are rapidly becoming a massive opportunity for content creators to make money from their passions because there are people who want your expertise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.forbes.com/sites/tjmccue/2018/07/31/e-learning-climbing-to-325-billion-by-2025-uf-canvas-absorb-schoology-moodle/#5db39a13b395"&gt;According to Forbes&lt;/a&gt;, the e-learning market is expected to be worth $325 billion by 2025. Selling online courses can be a source of passive income once you have an established customer base.&lt;/p&gt;

&lt;p&gt;While creating an amazing course takes work, a lot of that effort happens upfront. Once you‚Äôve put together the content and structure for your course, the hardest part is done. You can continue to sell and profit off it for months and years to come. &lt;/p&gt;

&lt;p&gt;The best news is that anybody can create and sell online courses. All you need is some knowledge and the ability to speak on a subject with a passion.&lt;/p&gt;

&lt;p&gt;Courses can be products in their own right, or they can be used as marketing tools to attract people to your target audience. Some businesses offer free courses as a lead generation tool.&lt;/p&gt;

&lt;p&gt;There are a lot of platforms where you can upload your courses and offer them for sale&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sharetxt.live/recommends/udemy"&gt;Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sharetxt.live/recommends/skillshare"&gt;SkillShare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sharetxt.live/recommends/thinkific"&gt;Thinkific&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sharetxt.live/recommends/teachable"&gt;Teachable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tips for getting started with online courses&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determine the topic(s) your target audience needs help with.&lt;/li&gt;
&lt;li&gt;Research other online courses in your space.&lt;/li&gt;
&lt;li&gt;Determine your pricing.&lt;/li&gt;
&lt;li&gt;Determine what content formats your online course will include. &lt;/li&gt;
&lt;li&gt;Invest in recording equipment. &lt;/li&gt;
&lt;li&gt;Break down the creation process into steps.&lt;/li&gt;
&lt;li&gt;Create your online course.&lt;/li&gt;
&lt;li&gt;Review, improve and launch your online course.&lt;/li&gt;
&lt;li&gt;Promote your online course.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#make-money-creating-youtube-videos"&gt;
  &lt;/a&gt;
  Make money creating Youtube videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj3B_uv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/a-hand-holding-a-phone-with-youtube-open" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj3B_uv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sharetxt.live/uploads/images/a-hand-holding-a-phone-with-youtube-open" alt="A hand holding a phone with youtube open" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content creators aren‚Äôt paid by YouTube for the videos they upload. Neither are videos monetized by default. If you want to take advantage of how to get paid on YouTube, you have to enable monetization in your YouTube account settings. From there, you have options to join the YouTube Partner Program or have your videos listed on YouTube Premium.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com"&gt;YouTube&lt;/a&gt; is half the internet: that‚Äôs 1.9 billion users logging in every month. But at the same time, 500 hours of video are uploaded to the site every minute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-make-money-from-youtube"&gt;
  &lt;/a&gt;
  How do you make money from Youtube
&lt;/h3&gt;

&lt;p&gt;Your earning potential isn‚Äôt determined solely by the number of subscribers and views you have, but also by the level of engagement you generate, the niche you cater to, and the revenue channels you explore. That‚Äôs not to say subscriber count doesn‚Äôt matter.&lt;/p&gt;

&lt;p&gt;The number of views you get doesn‚Äôt correlate to revenue earned. If your video gets thousands of views but no one watches or clicks the ad, you won‚Äôt make any money. This is because of YouTube‚Äôs criteria for billing advertisers: a viewer must click an ad or watch the ad in full (10, 15, or 30 seconds) for you to get paid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To qualify for the Youtube Partner Program (YPP), you need to be in good standing with YouTube, have 4,000 valid public watch hours in the previous 12 months, and at least 1,000 subscribers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, with the release of YouTube Premium, you no longer need to rely on advertisers to create engaging or enticing ads to earn revenue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/premium"&gt;YouTube Premium&lt;/a&gt; is a paid membership program that allows fans to watch and support their favorite content creators without ads. For creators, not much changes, as they will get paid for content consumed by non-members on YouTube along with content on YouTube Premium.&lt;/p&gt;

&lt;p&gt;According to YouTube, your content could get excluded from ad revenue if it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sexually suggestive content, including partial nudity and sexual humor&lt;/li&gt;
&lt;li&gt;Violence, including displays of serious injury and events related to violent extremism&lt;/li&gt;
&lt;li&gt;Inappropriate language, including harassment, profanity, and vulgar language&lt;/li&gt;
&lt;li&gt;Promotion of drugs and regulated substances, including selling, use, and abuse of such items&lt;/li&gt;
&lt;li&gt;Controversial or sensitive subjects and events, including subjects related to war, political &lt;/li&gt;
&lt;li&gt;conflicts, natural disasters, and tragedies, even if graphic imagery is not shown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can make money from Youtube by the following&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Join the YouTube Partner Program&lt;/li&gt;
&lt;li&gt;Sell your merch&lt;/li&gt;
&lt;li&gt;Create sponsored content&lt;/li&gt;
&lt;li&gt;Become an affiliate partner&lt;/li&gt;
&lt;li&gt;Get your fans to pay you directly&lt;/li&gt;
&lt;li&gt;Use crowdfunding&lt;/li&gt;
&lt;li&gt;License your content to the media&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are a lot of opportunities for content creators to make money online. Not all methods will be good for everyone. Start with one by discovering the best strategy that works for you, then move on to another way to make money after you get familiar with one method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sharetxt.live/blog/ways-to-make-money-online-as-a-content-creator"&gt;View original article here for updates&lt;/a&gt;&lt;/p&gt;

</description>
      <category>makemoneyonline</category>
      <category>freelancing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Moonly - Discover Upcoming NFT Update #2</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Fri, 21 Jan 2022 09:29:57 +0000</pubDate>
      <link>https://dev.to/shtefcs/moonly-discover-upcoming-nft-update-2-2o9f</link>
      <guid>https://dev.to/shtefcs/moonly-discover-upcoming-nft-update-2-2o9f</guid>
      <description>&lt;p&gt;Hello people üëã, how is your week? Hope you did at least half of what you wanted.&lt;/p&gt;

&lt;p&gt;Last week I introduced my new project called &lt;a href="https://moon.ly"&gt;https://moon.ly&lt;/a&gt; which discovers upcoming NFT's, currently on Solana blockchain only. In the near future, It will also offer a set of tools based on analyzing the various data source to help people in the NFT space make better decisions when minting or trading.&lt;/p&gt;

&lt;p&gt;The initial version of Moonly was built using no-code tools like &lt;a href="https://automatio.co"&gt;https://automatio.co&lt;/a&gt; which collected a bunch of data, Webflow to put a website together, and Integromat, to automate some processes. Of course, there is a lot of manual work involved done by me and my VA (virtual assistant) Nikola.&lt;/p&gt;

&lt;p&gt;As I write, Moonly is getting rebuilt from the scratch using tech like Next.js, Express, GraphQL, etc. We are building custom solutions because of more flexibility and scalability. For example, Webflow has a very annoying limit of 10k items in the CMS database, and a lot of people complain about it for years, but they don't listen. To be honest, that is one of the main reasons I decided to build a custom solution from scratch, but ofc there are other reasons which I will talk about in the next update.&lt;/p&gt;

&lt;p&gt;In the last 7-8 days we did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Designed UI for NFT details page with all kinds of metrics &lt;a href="https://i.imgur.com/JBcxOAv.png"&gt;https://i.imgur.com/JBcxOAv.png&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Converted Ui to a Next.js frontend &lt;a href="https://i.imgur.com/gfzxim1.png"&gt;https://i.imgur.com/gfzxim1.png&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Built backend and database structure&lt;/li&gt;
&lt;li&gt;Started connecting with external data sources and API's&lt;/li&gt;
&lt;li&gt;Started building administration panel&lt;/li&gt;
&lt;li&gt;Added 200+ NFT projects&lt;/li&gt;
&lt;li&gt;Moonly generated ~1600 visitors in the last 7 days &lt;a href="https://i.imgur.com/WyI5LmX.png"&gt;https://i.imgur.com/WyI5LmX.png&lt;/a&gt;. Needed to exclude Direct traffic, because there is a bunch of bot attack there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are also preparing our own NFT, but more on that when we have some progress updates.&lt;/p&gt;

&lt;p&gt;Currently, the team consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two developers, one backend/DevOps, and another full-stack&lt;/li&gt;
&lt;li&gt;One virtual Assistant&lt;/li&gt;
&lt;li&gt;Writer&lt;/li&gt;
&lt;li&gt;UI Designer &amp;amp; Webflow developer (my wife Jelena)&lt;/li&gt;
&lt;li&gt;UI/UX designer (me)&lt;/li&gt;
&lt;li&gt;Growth hacker (me)&lt;/li&gt;
&lt;li&gt;Pixel Art designer for NFT&lt;/li&gt;
&lt;li&gt;Everything else of course me, since I need to glue, manage and decide on most of the things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last week I shared the top 30 Solana NFT projects by volume. Today I am sharing the next 30 projects also by volume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsnatchers"&gt;https://moon.ly/nft/solsnatchers&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/metabaes"&gt;https://moon.ly/nft/metabaes&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/grim-syndicate"&gt;https://moon.ly/nft/grim-syndicate&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/quantum-traders"&gt;https://moon.ly/nft/quantum-traders&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solana-monkette-business"&gt;https://moon.ly/nft/solana-monkette-business&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solyetis"&gt;https://moon.ly/nft/solyetis&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/space-runners"&gt;https://moon.ly/nft/space-runners&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/eternal-beings"&gt;https://moon.ly/nft/eternal-beings&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/doge-capital"&gt;https://moon.ly/nft/doge-capital&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/enviro"&gt;https://moon.ly/nft/enviro&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/nyan-heroes"&gt;https://moon.ly/nft/nyan-heroes&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/tower"&gt;https://moon.ly/nft/tower&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/frakt"&gt;https://moon.ly/nft/frakt&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/unirexcity"&gt;https://moon.ly/nft/unirexcity&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/taiyo-robotics"&gt;https://moon.ly/nft/taiyo-robotics&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solanadogenfts"&gt;https://moon.ly/nft/solanadogenfts&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/lifinity-flares"&gt;https://moon.ly/nft/lifinity-flares&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/rox-collective"&gt;https://moon.ly/nft/rox-collective&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solana-bananas"&gt;https://moon.ly/nft/solana-bananas&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/boss-bulls-tm-club"&gt;https://moon.ly/nft/boss-bulls-tm-club&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/dazedducks-metagalactic-club"&gt;https://moon.ly/nft/dazedducks-metagalactic-club&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/the-sneks"&gt;https://moon.ly/nft/the-sneks&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/the-sneks"&gt;https://moon.ly/nft/the-sneks&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solcities"&gt;https://moon.ly/nft/solcities&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/goblin-laboratory"&gt;https://moon.ly/nft/goblin-laboratory&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solana-birbs"&gt;https://moon.ly/nft/solana-birbs&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/mini-royale-nations-2"&gt;https://moon.ly/nft/mini-royale-nations-2&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/high-roller-hippo-clique"&gt;https://moon.ly/nft/high-roller-hippo-clique&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/danuki-dojo"&gt;https://moon.ly/nft/danuki-dojo&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/chainmyth"&gt;https://moon.ly/nft/chainmyth&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>nft</category>
      <category>blockchain</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Build GitHub star history tracker in 10 minutes using low-code</title>
      <author>Shubhendra Singh Chauhan</author>
      <pubDate>Fri, 21 Jan 2022 08:59:14 +0000</pubDate>
      <link>https://dev.to/tooljet/build-github-star-history-tracker-in-10-minutes-using-low-code-1ge7</link>
      <guid>https://dev.to/tooljet/build-github-star-history-tracker-in-10-minutes-using-low-code-1ge7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this tutorial, we‚Äôre going to build an app that can be used to track the stars count of public GitHub repositories over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVeewpLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ei6zmbw571tenwk17he.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVeewpLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ei6zmbw571tenwk17he.png" alt="demo" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre a developer who owns/maintains a project on GitHub and wants to track the growth of GitHub stars of your repository then this app is going to be very useful for you. You can either build this app or you can use the live demo that we built here - &lt;a href="https://apps.tooljet.com/github-star-history"&gt;https://apps.tooljet.com/github-star-history&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For building this application we will use &lt;strong&gt;ToolJet&lt;/strong&gt; (&lt;a href="https://github.com/tooljet/tooljet"&gt;https://github.com/tooljet/tooljet&lt;/a&gt;) which is a free and¬†open-source, low-code platform that allows you to quickly build tools, &lt;strong&gt;GitHub APIs&lt;/strong&gt; for getting the repository information like stars count and date, &lt;strong&gt;GitHub personal access token&lt;/strong&gt; only if the stars count of a repository is higher than 5000.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° ToolJet provides an option to import and export applications. You can download the exported source code of this app from &lt;a href="https://gist.github.com/akshaysasidrn/09dc7a0456dddc20759c2f41b18caf8e"&gt;here&lt;/a&gt; and import it to your personal ToolJet account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building this application using ToolJet is super easy and I have broken down the whole tutorial into the following parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the UI&lt;/li&gt;
&lt;li&gt;Create the queries&lt;/li&gt;
&lt;li&gt;Add properties to widgets&lt;/li&gt;
&lt;li&gt;Make app live&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#build-the-ui"&gt;
  &lt;/a&gt;
  Build the UI
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start with building the user interface of our application first. To build the user interface, we will be using widgets like containers, text, text-input, button, and chart. Here‚Äôs my version of user-interface built using the following widgets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;container&lt;/strong&gt; that includes a &lt;strong&gt;text&lt;/strong&gt; widget inside it to build the header including the title of application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiCvOq-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hb2xznf0j3jsrqjhk3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiCvOq-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hb2xznf0j3jsrqjhk3k.png" alt="heading" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;text-input&lt;/strong&gt; and a &lt;strong&gt;button&lt;/strong&gt; next to it. The text-input will be used to get the repository name in this format: &lt;code&gt;account/repo-name&lt;/code&gt; and the button will be used to perform the action to run the query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--crcERC4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u98oixrhuryrm3mqaup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--crcERC4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u98oixrhuryrm3mqaup.png" alt="text-input" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;chart&lt;/strong&gt; widget (line graph) to display the changes in stars count over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alBu2KNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he0bqwlwah7ig85npedp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alBu2KNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he0bqwlwah7ig85npedp.png" alt="chart" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;password-input&lt;/strong&gt; widget and a &lt;strong&gt;text&lt;/strong&gt; widget below it. Password-input widget to hold the GitHub personal access token and the text widget to add the display the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SnyR9sem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuwtq8onrpyflj2jfkjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SnyR9sem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuwtq8onrpyflj2jfkjf.png" alt="password" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And finally a &lt;strong&gt;container&lt;/strong&gt; that includes &lt;strong&gt;two text widgets&lt;/strong&gt;, one to display the total stars count of the repository and the other to display the time when the repository was created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bOlmOsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ysns6k5d7rlu79r4483.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bOlmOsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ysns6k5d7rlu79r4483.png" alt="two" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° You can always make use of more widgets to build a better UI and customize or style widgets by changing their property from the inspect panel.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#create-the-queries"&gt;
  &lt;/a&gt;
  Create the queries
&lt;/h2&gt;

&lt;p&gt;Now, we will create the queries that will get the repository information like stars count and date. &lt;/p&gt;

&lt;p&gt;We will be creating two queries - one using REST API datasource and the other using custom JavaScript code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-query-using-rest-api"&gt;
  &lt;/a&gt;
  First query using REST API
&lt;/h3&gt;

&lt;p&gt;This query will get the data from GitHub like &lt;code&gt;stargazers_count&lt;/code&gt; and the the time when the repository was &lt;code&gt;created_at&lt;/code&gt; . Let‚Äôs create the query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the query editor at the bottom and click on the &lt;code&gt;+&lt;/code&gt; button to create a new query&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;REST API&lt;/strong&gt; from the datasource dropdown&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, Select &lt;code&gt;GET&lt;/code&gt; method and enter the GitHub‚Äôs API endpoint &lt;code&gt;https://api.github.com/repos/{{components.textinput1.value}}&lt;/code&gt; - at the end of URL we have used JavaScript inside double curly brackets. This will use the value from the text-input widget.&lt;/li&gt;
&lt;li&gt;We will use &lt;strong&gt;Transformation&lt;/strong&gt; to convert the data received from the response of API into JSON format. Enter &lt;code&gt;return { starGazers: data.stargazers_count };&lt;/code&gt; - this will get the &lt;code&gt;stargazers_count&lt;/code&gt; from the response received using API and will create a key value pair. (You can check the &lt;a href="https://docs.tooljet.com/docs/tutorial/transformations"&gt;documentation&lt;/a&gt; to know more about the Transformation)&lt;/li&gt;
&lt;li&gt;Now you can click on &lt;strong&gt;Preview&lt;/strong&gt; button to check result of the query in preview section and then click on &lt;strong&gt;Save&lt;/strong&gt; to create the query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFhszbrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf75ko148ggtwxsqptdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFhszbrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf75ko148ggtwxsqptdd.png" alt="query1" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect! we have created our first query that will get the repository data like total stargazers at the moment and the date when the repository was created. Let‚Äôs move on to build another query.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#second-query-using-custom-javascript-code"&gt;
  &lt;/a&gt;
  Second query using custom JavaScript code
&lt;/h3&gt;

&lt;p&gt;To build this query we will be writing some JavaScript code to get the data specifically of stargazers. We will be fetching the data like the number of stargazers on a particular date and then we will use this data to create &lt;code&gt;key: value&lt;/code&gt; pairs of &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;number of stargazers&lt;/code&gt; on that particular date. This will be used to build the line chart for graphical representation of change in stargazers over time. Let‚Äôs create the query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the query editor and click on the &lt;code&gt;+&lt;/code&gt; button to create a new query&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Run JavaScript code&lt;/strong&gt; from the datasource dropdown&lt;/li&gt;
&lt;li&gt;Write the JavaScript code in the editor:

&lt;ul&gt;
&lt;li&gt;Let‚Äôs define a variable starsgazerURL and assign the GitHub API to it - const stargazersURL = &lt;code&gt;https://api.github.com/repos/${components.textinput1.value}/stargazers?per_page=100&amp;amp;page={page}&lt;/code&gt;; .&lt;/li&gt;
&lt;li&gt;totalPages variable that will store the parsed integer value of total number of pages - const totalPages = parseInt(queries.restapi1.data.starGazers/100); &lt;/li&gt;
&lt;li&gt;pages variable that will create an array from total number of pages - let pages = [...Array(totalPages).keys()]; &lt;/li&gt;
&lt;li&gt;Create an empty object dates - let dates = {};&lt;/li&gt;
&lt;li&gt;Create an empty array results - let results = []; &lt;/li&gt;
&lt;li&gt;For headers we will assign the media type supported by GitHub‚Äôs REST API - let headers = {'Accept': 'application/vnd.github.v3.star+json'} &lt;/li&gt;
&lt;li&gt;If condition to accept the GitHub personal access token from the text-input -  if(components.passwordinput1.value !== '') { headers['Authorization'] = &lt;code&gt;token ${components.passwordinput1.value}&lt;/code&gt;} &lt;/li&gt;
&lt;li&gt;A for-loop that will replace the page number in the starGazersURL and then iterating through all the stars to get a list of all stars and the time at which they starred:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stargazersURL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{page}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starredAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;starred_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yyyy-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And at last the assigning total to 0 and iterating through every date in dates object. Then creating array of objects and pushing to results array:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; Once done writing the code, &lt;strong&gt;Save&lt;/strong&gt; this query.
&lt;strong&gt;Here‚Äôs the complete code:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stargazersURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.github.com/repos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textinput1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/stargazers?per_page=100&amp;amp;page={page}`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restapi1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;starGazers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Accept&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/vnd.github.v3.star+json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordinput1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordinput1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stargazersURL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{page}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starredAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;starred_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yyyy-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also &lt;strong&gt;add an event handler&lt;/strong&gt; to our first query to run the second query every time the first query is successful. To do that we need to go to the &lt;strong&gt;Advanced&lt;/strong&gt; tab of our first query and then create a new handler. Select the &lt;strong&gt;On Success&lt;/strong&gt; Event and in Action dropdown select &lt;strong&gt;Run Query&lt;/strong&gt;, then select the second query and save it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adding-properties-to-widgets"&gt;
  &lt;/a&gt;
  Adding properties to widgets
&lt;/h2&gt;

&lt;p&gt;So now that we have successfully built the user interface and created the queries, all we need to do now is configure the widgets to function correctly. Let‚Äôs configure the widgets:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#textinput"&gt;
  &lt;/a&gt;
  Text-input
&lt;/h3&gt;

&lt;p&gt;We don‚Äôt need to configure anything specific in this widget. It is used to get the input from user. Once the user has entered the repository name in the correct form then the queries will automatically fetch the value from the widget. We can add a placeholder for the users to understand the correct format to enter. Just click any where on the widget to open the inspect-panel on the right and in the Placeholder box enter &lt;code&gt;account-name/repo-name&lt;/code&gt; . &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#button"&gt;
  &lt;/a&gt;
  Button
&lt;/h3&gt;

&lt;p&gt;We will need to make several changes in the property of the button widget. It is the widget that will be used to trigger the queries and make our whole application work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first thing that we can do is add a text to our button like &lt;code&gt;Fetch data&lt;/code&gt; and change the colour of button from the &lt;strong&gt;Style&lt;/strong&gt; tab. This will improve the UI of button.&lt;/li&gt;
&lt;li&gt;Let‚Äôs add functionality, we can add the &lt;strong&gt;Loading state&lt;/strong&gt; to our button so that it shows a loader until the a query has done getting the results. To do this, just add &lt;code&gt;{{queries.runjs2.isLoading || queries.restapi1.isLoading}}&lt;/code&gt; this will display a loading state to the button while either of the queries run.&lt;/li&gt;
&lt;li&gt;Now finally, add an event handler to the button so that whenever the button is clicked an action is performed. In this case, we will create &lt;code&gt;On Click&lt;/code&gt; event, add &lt;code&gt;Run Query&lt;/code&gt; action to it, and will select the first query. When the button will be clicked it will run the first query in the backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpJaCN_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4cziauakkkboma16wsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpJaCN_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4cziauakkkboma16wsz.png" alt="button" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passwordinput"&gt;
  &lt;/a&gt;
  Password-input
&lt;/h3&gt;

&lt;p&gt;Just like the text-input widget, all we need to do is add a &lt;strong&gt;Placeholder&lt;/strong&gt; to this widget - &lt;code&gt;GitHub token&lt;/code&gt; so that the user knows to input the GitHub token. Learn how to get GitHub personal access token &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-widget-below-passwordinput"&gt;
  &lt;/a&gt;
  Text widget below password-input
&lt;/h3&gt;

&lt;p&gt;We will use this text to display it as a message for the password input field. Just click on the widget and add the text - &lt;code&gt;&amp;lt;small&amp;gt;Required if more than 5000 stars. Token is not stored or sent to backend.&amp;lt;/small&amp;gt;&lt;/code&gt; and from &lt;strong&gt;Style&lt;/strong&gt; tab use the color picker to change the font color to red.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° You can use HTML to customize the text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#text-widgets-inside-containers"&gt;
  &lt;/a&gt;
  Text widgets inside containers
&lt;/h3&gt;

&lt;p&gt;We will use two text widgets inside the container. The first one is to display the number of total stars. Click on the widget to edit its property and add the following text: &lt;code&gt;This repository has {{queries.restapi1.data.starGazers}} stars üåü&lt;/code&gt;¬†this uses JavaScript inside double curly brackets to get the number of &lt;code&gt;starGazers&lt;/code&gt; from the &lt;code&gt;data&lt;/code&gt; fetched by the &lt;code&gt;restapi1&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLSPHWCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwhwtt2b1bpz7z5gq5lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLSPHWCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwhwtt2b1bpz7z5gq5lb.png" alt="text1" width="725" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the second text displays the time when the repository was first created. Click on the widget to edit its property and add the following text: &lt;code&gt;Repository was created {{moment(queries.restapi1.rawData.created_at).fromNow()}} ago&lt;/code&gt; this will use JS functions to &lt;code&gt;moment&lt;/code&gt; and &lt;code&gt;fromNow&lt;/code&gt; to convert the &lt;code&gt;created_at&lt;/code&gt; date received in &lt;code&gt;data&lt;/code&gt; fetched by the &lt;code&gt;restapi1&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2yR5Hpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipql5cra09s1jrdtz6bz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2yR5Hpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipql5cra09s1jrdtz6bz.png" alt="text2" width="713" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chart"&gt;
  &lt;/a&gt;
  Chart
&lt;/h3&gt;

&lt;p&gt;We will edit 4 properties of the Chart:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Title:&lt;/strong&gt; This title will display at the top-center of the chart &lt;code&gt;Stars over time&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Chart type:&lt;/strong&gt; ToolJet support different chart types including line, bar, and pie. We will use &lt;strong&gt;line chart&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Chart data:&lt;/strong&gt; We will use the data fetched and converted into array of objects by the query &lt;code&gt;runjs2&lt;/code&gt; - &lt;code&gt;{{queries.runjs2.data}}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loading state:&lt;/strong&gt; The chart will display a loading state until the query has successfully fetched and converted the results - &lt;code&gt;{{queries.runjs2.isLoading || queries.restapi1.isLoading}}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Zgk3M3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxvv3l2qrabzqh9tcewa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Zgk3M3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxvv3l2qrabzqh9tcewa.png" alt="chart" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! we are almost done with our app, now we will see how to deploy it and share it with our friends and community.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#make-app-live"&gt;
  &lt;/a&gt;
  Make app live
&lt;/h2&gt;

&lt;p&gt;To do this just click on the¬†&lt;strong&gt;Deploy&lt;/strong&gt;¬†button on the top-right corner. On the dialog box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the¬†&lt;strong&gt;+Version&lt;/strong&gt;¬†button to create a version of the app&lt;/li&gt;
&lt;li&gt;Click on the¬†&lt;strong&gt;Save&lt;/strong&gt;¬†button to save the progress and then click on the¬†&lt;strong&gt;Deploy&lt;/strong&gt;¬†button to deploy on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Making app shareable:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the Share button on the top-right&lt;/li&gt;
&lt;li&gt;In the dialog box, click on the toggle switch to¬†&lt;strong&gt;make the application public&lt;/strong&gt;¬†and¬†&lt;strong&gt;shareable&lt;/strong&gt;¬†through the link in the box&lt;/li&gt;
&lt;li&gt;You can also edit the URL according to your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rcpHyAxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/12/deploy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcpHyAxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/12/deploy.gif" alt="https://blog.tooljet.com/content/images/2021/12/deploy.gif" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congrats&lt;/strong&gt; üéâ **** : You‚Äôve successfully built an app that lets you track the GitHub stars history just by entering the repository name and get the details like Total stargazer over time and time when it was created. If you run into any problems, always feel free to reach out to us on our &lt;a href="https://join.slack.com/t/tooljet/shared_invite/zt-r2neyfcw-KD1COL6t2kgVTlTtAV5rtg"&gt;slack community&lt;/a&gt; or email us at &lt;a href="//mailto:hello@tooljet.com"&gt;hello@tooljet.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Making Jamstack &amp; Figma Templates for Landing Pages</title>
      <author>Fajar Siddiq</author>
      <pubDate>Fri, 21 Jan 2022 08:12:45 +0000</pubDate>
      <link>https://dev.to/euphorya/making-jamstack-figma-templates-for-landing-pages-249p</link>
      <guid>https://dev.to/euphorya/making-jamstack-figma-templates-for-landing-pages-249p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCm2s_s0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qji6vk8lxdel3etxbah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCm2s_s0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qji6vk8lxdel3etxbah.png" alt="Image description" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I spent time building designs in 2021 on Figma &amp;amp; also Jamstack templates for landing pages, button toggle &amp;amp; resume design and now is available in year 2022. I hope this will help others like finding a job with the resume &amp;amp; landing pages to create a productized services.&lt;/p&gt;

&lt;p&gt;Products to help you:&lt;br&gt;
‚úÖ Productized Yours&lt;br&gt;
‚úÖ Create a Modern Resume&lt;br&gt;
‚úÖ Create a Landing Page&lt;br&gt;
üî• Available now for &lt;a href="https://fajarsiddiq.gumroad.com/"&gt;download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-lZ8ekV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t77pgsupd02xi6bc6pk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-lZ8ekV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t77pgsupd02xi6bc6pk.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcfhlsSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmoqboa49v5h162py7zm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcfhlsSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmoqboa49v5h162py7zm.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3z7ukZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbucqz1ulsq9pldg10qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3z7ukZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbucqz1ulsq9pldg10qo.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVPBg3yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb60yusi606xouz87gd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVPBg3yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb60yusi606xouz87gd6.png" alt="Image description" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aa8L-avZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw83bb34isofdqhzr3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aa8L-avZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw83bb34isofdqhzr3a.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHb0pGD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81wqfd7wuncbb13jk0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHb0pGD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81wqfd7wuncbb13jk0e.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üî• Available now for &lt;a href="https://fajarsiddiq.gumroad.com/"&gt;download&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>figma</category>
      <category>templates</category>
      <category>gumroad</category>
    </item>
    <item>
      <title>Why chatbots are used in many websites?</title>
      <author>Raman Bansal</author>
      <pubDate>Fri, 21 Jan 2022 07:41:12 +0000</pubDate>
      <link>https://dev.to/ramanbansal/why-chatbots-are-used-in-many-websites-3klg</link>
      <guid>https://dev.to/ramanbansal/why-chatbots-are-used-in-many-websites-3klg</guid>
      <description>&lt;p&gt;Recently,  many websites are using chatbots for solving customers queries about their products, services etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-chatbots"&gt;
  &lt;/a&gt;
  What are chatbots?
&lt;/h2&gt;

&lt;p&gt;Chatbots are computer software designed to simulate human conversation through text or voice. Nicely, the primary use of chatbots is to answer basic questions from internet site traffic the use of artificial intelligence (AI).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-chatbots"&gt;
  &lt;/a&gt;
  Types of Chatbots
&lt;/h2&gt;

&lt;p&gt;There are two types of chatbots:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linguistic Chatbots&lt;/li&gt;
&lt;li&gt;AI Chatbots&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-linguistic-chatbot"&gt;
  &lt;/a&gt;
  1. Linguistic Chatbot
&lt;/h3&gt;

&lt;p&gt;Linguistic Chatbots are also known as Rule-based chatbots. Facebook messenger is an example of Linguistic Chatbot. These chatbots are can be used to answer some simple questions and also helps in booking tickets, opening mobile apps etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-ai-chatbots"&gt;
  &lt;/a&gt;
  2. AI Chatbots
&lt;/h3&gt;

&lt;p&gt;AI Chatbots uses machine learning and uses technology like natural language processing (NLP) to understand user queries. With NLP these bots can understand the human problem without any human assistance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-chatbots-are-used-in-websites"&gt;
  &lt;/a&gt;
  Why chatbots are used in websites?
&lt;/h2&gt;

&lt;p&gt;Following are reasons why chatbots and used in websites:-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-provides-valuable-info-at-less-time"&gt;
  &lt;/a&gt;
  1. Provides valuable info at less time
&lt;/h3&gt;

&lt;p&gt;If any visitor want to find any information about the site or have any query about the site, then rather then filling the form he will press the magic button. With Chatbots they can find the valuable information at very less period of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cost-effective"&gt;
  &lt;/a&gt;
  2. Cost Effective
&lt;/h3&gt;

&lt;p&gt;Rather having a call center you will create a chatbot which is less expensive and solve customer's problem within in a second and you  don't pay salary to chatbot. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-available-any-time"&gt;
  &lt;/a&gt;
  3. Available any time
&lt;/h3&gt;

&lt;p&gt;Call centre will not open 24 hours but chatbot does. Chatbots run on internet which is available 24 hours. You many visit it at any time. Night or day it will work properly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-build-brand-trust"&gt;
  &lt;/a&gt;
  4. Build Brand trust
&lt;/h3&gt;

&lt;p&gt;As Chatbots are available 24 hours for solving customers' problems, you may also tells your customer about your products/services. Bots create a perfect bond between customer and business. &lt;/p&gt;

&lt;p&gt;For more:-&lt;br&gt;
&lt;a href="https://techwithpie.blogspot.com/2021/10/why-chatbots-are-used-in-many-websites.html"&gt;Read the full article&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>JS Coding Question #11: Are Two Object Equal (üí•3 Solutionsüí•)</title>
      <author>Let's Code</author>
      <pubDate>Fri, 21 Jan 2022 06:59:54 +0000</pubDate>
      <link>https://dev.to/frontendengineer/js-coding-question-11-are-two-object-equal-3-solutions-56g4</link>
      <guid>https://dev.to/frontendengineer/js-coding-question-11-are-two-object-equal-3-solutions-56g4</guid>
      <description>&lt;p&gt;...And the series continues after couple of React Interview Questions and Coding articles. üëç &lt;/p&gt;

&lt;p&gt;Now, this interview question can be tricky as you would need to know how to recurse in order to solve this problem/challenge. Even seasoned engineers often stumble to answer this question so better not to underestimate this problem but be ready. Video format is available below if you don't feel like reading. Here is a &lt;a href="https://codepen.io/angelo_jin/pen/abLKKaX"&gt;Codepen&lt;/a&gt; if you want to edit/play around the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-question-11"&gt;
  &lt;/a&gt;
  Interview Question #11:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Write a function or program that checks if two objects are equal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There can be many solutions to problems/challenges that are efficient and less efficient, elegant and less elegant. If you have any other than the 3 solutions I have, please share so others may benefit. Below is my 3 solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  Solution #1:
&lt;/h3&gt;

&lt;p&gt;JSON.stringify&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// sort so it will handle object properties that are not in order&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sortString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;sortString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is an approach that looks very dirty/hacky but may still be useful if one is comparing smaller objects. It is easy and fast to write and do not need any libraries which adds overhead to the final js bundle. Since this is fast to write, it may also be useful for quick sanity check or verifying if two objects are equal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  Solution #2:
&lt;/h3&gt;

&lt;p&gt;Using a lib&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lodashEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Most codebases have js utility already. What I like about libraries are that they solve common problems effectively and are well-tested to cover edge cases. I love open source libs and I am firm believer not to reinvent the wheel for problems that are already been solved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#solution-3"&gt;
  &lt;/a&gt;
  Solution #3:
&lt;/h3&gt;

&lt;p&gt;Custom Approach&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ensure that arguments are objects&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="c1"&gt;// return false right away if objects properties length are not equal&lt;/span&gt;
      &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="c1"&gt;// use reduce setting the initial value to equal which is true&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then recurse as deep as possible and keep recursing if values are objects&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;deepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// just do normal compare if not an object&lt;/span&gt;
      &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This custom approach requires recursion to be able to compare nested, deep objects. Many interviewers would want to see interviewees show/draft their own solution as they want to see how they communicate, think and code at the same time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts:
&lt;/h2&gt;

&lt;p&gt;If I am interviewing someone and they can tell me that solution maybe using a libraries AND sudo code a custom solution trying to recurse through it, I would be satisfied with those answer. How about you? What are your thoughts?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2j8L8RsHQpM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Front-End Developer Roadmap</title>
      <author>itgitnit</author>
      <pubDate>Fri, 21 Jan 2022 06:08:54 +0000</pubDate>
      <link>https://dev.to/itgitnit/front-end-developer-roadmap-302i</link>
      <guid>https://dev.to/itgitnit/front-end-developer-roadmap-302i</guid>
      <description>&lt;p&gt;So you are an absolute beginner who is trying to learn web development and more interested in the front-end part of it and you are looking forward to having an absolute guided path or a roadmap so that you can learn front-end development. Let me give it to you in the very easiest and the cleanest manner. HTML, CSS, and Javascript and that‚Äôs it, that is your front-end developer guide. But hey, you have also heard that XYZ YouTuber was saying that you should also be learning react, is he wrong? No, absolutely not. We have also heard about Chakra UI, Tailwind CSS, Bootstrap, So you shouldn't be learning that, no it‚Äôs not like that. So there is a lot more context here that you should understand. So, let me explain it in a little bit more in-depth. See the ultimate guide of front-end development is still the basic HTML, CSS, and Javascript, but it is a lot more information that is exposed to you without understanding the context of that information. So, in this blog, I‚Äôll give you not only the roadmap, but actually the understandable, contextual roadmap so that you can figure out which tech stack you should pick up and which you can leave. &lt;/p&gt;

&lt;p&gt;Let‚Äôs start with not everybody's favorite which is HTML. Now I understand the context of HTML, everybody knows it but nobody knows it, this is the ultimate reality of HTML, you know enough that you can figure out what this tag is going to do, but sometimes beginner faces a really challenging situation that they don‚Äôt want to write this much of HTML for designing the page. But the ultimate reality is that the page is going to be no matter what, is going to build with HTML, and this is exactly the point when you have to do something but you don‚Äôt want to do something, this is where exactly more tools come into the front-end development. See, when you build a web application let's just say there is a product on the web page, somebody needs to actually write HTML for that product. Now surely we have programming languages that help us to give us loops and conditional so that we can either conditionally replace those products with something else, or maybe can repeat that product probably a hundred times with different values. Now, this is all a little bit of an advanced side we don‚Äôt want to go there, first, we want to capture the front-end part of it. But something you must really understand is that no matter what happens, somebody needs to write HTML for those buttons, for those images, and something else. Now, this something else can be buttons, unlisted elements, listed elements, and a whole bunch of other things. So in order to make sure that you write faster HTML, Emmet comes into the picture which gives you a lot of shortcuts so that you don‚Äôt really feel tiresome to write those HTML, yet somebody actually writes them. So this is the first introduction to the additional tool in the front-end journey, Emmet.&lt;/p&gt;

&lt;p&gt;Now, moving on to our second part of the front-end development which is CSS. Now it‚Äôs not just about structuring the web page it should look also decently beautiful. And that‚Äôs where CSS comes into the picture. But writing the CSS with position absolute or position relative and providing all these elements to be arranged at the exact place where you want is not the easiest task of all and hence since again, the picture comes in, we want to do something but we really don‚Äôt want to do it, that‚Äôs exactly when the same things come in. Some of the helper tools, now writing CSS you can absolutely write that, you don‚Äôt need to use any tools, libraries, frameworks, anything at all, you can use plain vanilla CSS to write everything. But since we don‚Äôt want to and that‚Äôs where the new libraries, frameworks of CSS come into the picture. These libraries and frameworks help you to actually arrange things nicely and beautifully, some provide a really powerful grid so that you can arrange your web pages into the easiest format. Some even give you more things to make things beautiful like buttons and navigation bar and a whole lot of other things. And trust me there is no shortage of these CSS frameworks, some people love one, some people love others. Bootstrap, Material CSS, MD Bootstrap, Chakra, Tailwind CSS, and there is so much of them. Now my personal recommendation is to go ahead and get started with bootstrap and eventually explore others. You may fall in love with Tailwind CSS or the Chakra CSS or something else, but again one thing is sure, these are all helper libraries if you don‚Äôt want to use them, you absolutely can avoid them and, hence comes into the picture that CSS is the foundation of the front-end development. And also the reason why I‚Äôm recommending to get started with Bootstrap is because it gives you the ultimate knowledge and the sense of, how things should be arranged on the web page. Once you understand the bootstrap understanding Material or the Chakra or the Tailwind is relatively easier but it‚Äôs not true for everyone. So, again, if you are getting started with Material that‚Äôs also totally fine.&lt;/p&gt;

&lt;p&gt;Now, finally moving into the third part of the front-end development guide which is Javascript. Now Javascript is really one of the most powerful and proving to be more powerful than we expected it to be. Now the question is can we build everything in Vanilla Javascript? Absolutely yes, there is no one who is stopping you to do so. Javascript can actually make server calls and can bring up some of the JSON data and then you can actually place these JSON data nicely and there is nothing that is stopping you. But is it tiresome? Yes, Of Course, writing a Web application that is governed entirely by Javascript without imposing some of the rules that what you should do? What you should not do? Can become an absolute nightmare, adding more team members to this and this actually gets out of hand pretty quickly and pretty easily and this is exactly where some of the rules are imposed on the entire team or the entire project, that hey, if you are going to change this object in the javascript so this is the way how you are going to do it, if you need to render some condition this is how you are going to do it. Previously, people used to do this kind of rules and regulations on the project basis or the company basis, but eventually, somebody realizes that hey, we need to just roll out these standards to everyone and thus a lot of libraries and frameworks in the Javascript came into the picture, but one thing you need to absolutely understand that the final output of these all things React, Vue or whatever we learning is HTML, CSS, and Javascript. So, ultimately your code is compiled into these three things only. So the more we are going to understand the Javascript paradigm more easily, it‚Äôs going to be easier for you to switch between React or angular or Vue. So, ultimately it boils down to the basic javascript. &lt;/p&gt;

&lt;p&gt;Now in order to make sure that your web applications follow some of the standard practices and these same practices are being followed by your team members also, we pick up some of the libraries or the frameworks, and famous ones are React, Angular, Vue and there is a lot more other than that. A whole lot of companies are using even those frameworks as well, some due to legacy reasons, some due to other conditional reasoning that this is the best fit for us, so, there is no shortage of them. Now in this vast world where Javascript frameworks are dropping every next day, my personal recommendation is to get started with React because React standards are being utilized by a whole lot of other frameworks and libraries too. Once you understand, how to write these codes into React you will be able to quickly migrate into Vue, Meteor, and tonnes of other frameworks. Now, once you understand React, obviously your project is going to go more complex and that‚Äôs where you start exploring more of these libraries and frameworks may be Vue is much more suitable for your project, or maybe you need something more complex may be NextJS but again this is all can go like really crazy. But again, my recommendation is to get started with React, understand this as basic, and explore things later on.&lt;/p&gt;

&lt;p&gt;Now let me give you an additional tip to you that is going to make you even a better front-end developer. Now, as things are getting more complex, there are things something known as State Management. So, what basically happens, let's just say this is your name and you want to display this name onto 10 different places on the website, and what happens if one place changes that name how you are going to make sure that 9 different places get to know about this change. And that‚Äôs where the State Management Library comes in. The State Management Library can be a little bit intimidating at first, but they are not, it is just a centralized place from which all the data goes in and goes out, and thus State Management Library is also an essential part if you want to become a front-end developer. Now, since this is also a common problem there is no shortage of such State Management Library my personal recommendation is to get started with Redux. I know this is a little bit tough compared to others, but this is going to give you the ultimate knowledge of why we are doing and what we are doing once you understand the Redux rest of the things are gonna fine and are gonna seem like absolutely easy. So, I told you that ultimately it is just HTML, CSS, and Javascript rest of all the libraries, and all the front-end roadmaps which are including all these extra things, yes they are helpful but not too much necessary. But is it going to be necessary if you are looking for a job? Or want to become a modern front-end developer? Yes, it‚Äôs going to be. But the most important thing is, now you know the context of why this is happening and why there are so many things to learn. So, I think you can make a better decision now to pick what‚Äôs library I can choose and what I can learn later on in life.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this demystifying the front-end developer roadmap!!!!!!......&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript is Crazy ü§Ø</title>
      <author>SnowBit</author>
      <pubDate>Fri, 21 Jan 2022 05:54:41 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/javascript-is-crazy-39dh</link>
      <guid>https://dev.to/codewithsnowbit/javascript-is-crazy-39dh</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks üëã
&lt;/h3&gt;

&lt;p&gt;What's up friends, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a young self-taught and passionate developer and have an intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with a little crazy thing.&lt;/p&gt;

&lt;p&gt;So, let's get started.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the output will be &lt;code&gt;55&lt;/code&gt; as the string is added with a number and that will join the string with the number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;When adding&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two strings&lt;/li&gt;
&lt;li&gt;A string and a number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;will join with the string.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;+&lt;/code&gt; operator is used with the string is called &lt;strong&gt;concatenation&lt;/strong&gt; operator&lt;/p&gt;

&lt;p&gt;Now here comes something &lt;strong&gt;crazy&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logic of concatenation operator doesn't apply in the case of &lt;code&gt;-&lt;/code&gt; operator. Let me explain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concatenation operator&lt;/strong&gt; can join string and add numbers, but &lt;code&gt;-&lt;/code&gt; operator can only substract. Therefore, here &lt;code&gt;"5"&lt;/code&gt; will get converted to integer and the output will be &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;5 - 5&lt;/code&gt; is zero.&lt;/p&gt;

&lt;p&gt;Let's go with some other examples,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: -90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you for reading, have a nice day!&lt;br&gt;
&lt;strong&gt;Your appreciation is my motivation üòä&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@michalmatlon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michal Matlon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/math?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Fetch GitHub Markdown and Show on Blog Post or Website ft. showdownjs
</title>
      <author>Shaswat Raj</author>
      <pubDate>Fri, 21 Jan 2022 05:52:40 +0000</pubDate>
      <link>https://dev.to/sh20raj/fetch-github-markdown-and-show-on-blog-post-or-website-ft-showdownjs-4dm3</link>
      <guid>https://dev.to/sh20raj/fetch-github-markdown-and-show-on-blog-post-or-website-ft-showdownjs-4dm3</guid>
      <description>&lt;p&gt;Previous Post :- &lt;a href="https://dev.to/sh20raj/convert-markdown-or-md-url-to-html-markdowntohtml-using-javascript-ft-showdownjs-1med"&gt;https://dev.to/sh20raj/convert-markdown-or-md-url-to-html-markdowntohtml-using-javascript-ft-showdownjs-1med&lt;/a&gt;&lt;br&gt;
Video Documentation :- &lt;a href="https://youtu.be/omtgsLp9hOI"&gt;https://youtu.be/omtgsLp9hOI&lt;/a&gt;&lt;br&gt;
Article Source :- &lt;a href="https://codexdindia.blogspot.com/2022/01/convert-markdown-or-md-url-to-html-using-javascript.html"&gt;https://codexdindia.blogspot.com/2022/01/convert-markdown-or-md-url-to-html-using-javascript.html&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#convert-a-markdown-containing-url-to-html-and-show-it"&gt;
  &lt;/a&gt;
  Convert a Markdown Containing URL to HTML and Show it.
&lt;/h1&gt;

&lt;p&gt;For this we will Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch Api&lt;/a&gt;.&lt;br&gt;
Here is the raw URL of &lt;a href="http://showdownjs.com/"&gt;showdownjs&lt;/a&gt; readme.md :- &lt;a href="https://github.com/showdownjs/showdown/raw/master/README.md"&gt;https://github.com/showdownjs/showdown/raw/master/README.md&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;We will fetch content of this URL then convert it to HTML and show on our website. See Demo on &lt;a href="https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010"&gt;Codepen&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id="mypost"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
fetch('https://raw.githubusercontent.com/showdownjs/showdown/master/README.md').then(response =&amp;gt; response.text())
  .then(data =&amp;gt; {
  console.log(data);
  var converter = new showdown.Converter();
var md = data;
var html = converter.makeHtml(md);
  document.querySelector('#mypost').innerHTML = html;
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the result on Codepen :- &lt;a href="https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010"&gt;https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>sh20raj</category>
      <category>showdownjs</category>
      <category>markdown</category>
    </item>
  </channel>
</rss>
