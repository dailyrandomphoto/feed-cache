<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Handbook announcement!</title>
      <author>kapeel kokane</author>
      <pubDate>Thu, 12 Aug 2021 18:01:29 +0000</pubDate>
      <link>https://dev.to/comscience/javascript-handbook-announcement-lj6</link>
      <guid>https://dev.to/comscience/javascript-handbook-announcement-lj6</guid>
      <description>&lt;p&gt;Hey There üëãüèæ&lt;/p&gt;

&lt;p&gt;Announcing that my &lt;strong&gt;JavaScript Handbook&lt;/strong&gt; is ready for release!&lt;/p&gt;

&lt;p&gt;Here's the announcement tweet:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIDn7-Kg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8m46K0VEAEWDl0.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The cover page for my upcoming JS book (created using &lt;a href="https://twitter.com/excalidraw"&gt;@excalidraw&lt;/a&gt;) is ready!&lt;br&gt;&lt;br&gt;Releasing soon! üôåüèæ&lt;br&gt;&lt;br&gt;Thanks for such an amazing tool &lt;a href="https://twitter.com/Vjeux"&gt;@Vjeux&lt;/a&gt; !&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:39 PM - 12 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425874661473079298" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425874661473079298" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425874661473079298" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Share with others &amp;amp; Follow me on twitter to get more updates!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>books</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>#100daysofcode [Day - 02]</title>
      <author>Al Siam</author>
      <pubDate>Thu, 12 Aug 2021 17:52:34 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-02-174a</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-02-174a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-02"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 02]
&lt;/h1&gt;

&lt;p&gt;Today I've solved some small problems.&lt;br&gt;
01 Getting Leap-year,&lt;br&gt;
02 Find the Biggest Number from an Array,&lt;br&gt;
03 Remove the Duplicate Name or Numbers,&lt;br&gt;
04 Getting the Factorial numbers&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFzRQ0ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fipnpdbx9hw17bf8k7qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFzRQ0ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fipnpdbx9hw17bf8k7qg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5uD1rHCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn0b9bkx4hmmys6immgf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5uD1rHCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn0b9bkx4hmmys6immgf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8kJfe9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhhgcobzrrnqzfnbvn7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8kJfe9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhhgcobzrrnqzfnbvn7g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiyW5agb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npsamynhsq1caczyqxye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiyW5agb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npsamynhsq1caczyqxye.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-javascript-webdevelopment"&gt;
  &lt;/a&gt;
  coding #javascript #webdevelopment
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploying CI/CD For NodeJS Serverless Applications Workshop: Part IV</title>
      <author>Salah Elhossiny</author>
      <pubDate>Thu, 12 Aug 2021 17:10:20 +0000</pubDate>
      <link>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-iv-31b</link>
      <guid>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-iv-31b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#build-the-pipeline"&gt;
  &lt;/a&gt;
  BUILD THE PIPELINE
&lt;/h1&gt;

&lt;p&gt;In this part you are going to learn how to automate the build, package and deploy commands by creating a continous delivery pipeline using AWS Code Pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eenhAJ-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq5tydphpccdx6bv8fp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eenhAJ-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq5tydphpccdx6bv8fp1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The services used are in this part: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CodeCommit&lt;/li&gt;
&lt;li&gt;CodeBuild&lt;/li&gt;
&lt;li&gt;CodePipeline&lt;/li&gt;
&lt;li&gt;CloudFormation&lt;/li&gt;
&lt;li&gt;AWS CDK &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-a-git-repository"&gt;
  &lt;/a&gt;
  CREATE A GIT REPOSITORY
&lt;/h2&gt;

&lt;p&gt;Any CI/CD pipeline starts with a code repository. &lt;/p&gt;

&lt;p&gt;In this workshop we use AWS CodeCommit for ease of integration, but you could use other source code integrations, like GitHub for example.&lt;/p&gt;

&lt;p&gt;Run the following command from your terminal to create a new CodeCommit repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws codecommit create-repository &lt;span class="nt"&gt;--repository-name&lt;/span&gt; sam-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the following output. Copy the value of cloneUrlHttp, you will need it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JpgE-49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqqi4nhh0jiv0y7g7i8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JpgE-49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqqi4nhh0jiv0y7g7i8d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-credentials"&gt;
  &lt;/a&gt;
  CONFIGURE CREDENTIALS
&lt;/h2&gt;

&lt;p&gt;One of the cool things about CodeCommit is the support for IAM authentication. And if you are running this workshop from a Cloud9 workspace, you can leverage the fact that your terminal is already pre-authenticated with valid AWS credentials.&lt;/p&gt;

&lt;p&gt;Configure the git client with username and email, so your commits have an author defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Replace with your name"&lt;/span&gt;
~ git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"replace_with_your_email@example.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#push-the-code"&gt;
  &lt;/a&gt;
  PUSH THE CODE
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ignore-the-build-artifacts"&gt;
  &lt;/a&gt;
  Ignore the build artifacts
&lt;/h3&gt;

&lt;p&gt;Copy/paste the following lines at the end of the sam-app/.gitgnore file. &lt;/p&gt;

&lt;p&gt;There is no need to track the .aws-sam directory or the packaged.yaml under version control as they are re-generated on every build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.aws-sam/
packaged.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the root directory of your sam-app project, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
~ git init
~ git add &lt;span class="nb"&gt;.&lt;/span&gt;
~ git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Initial commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#push-the-code"&gt;
  &lt;/a&gt;
  Push the code
&lt;/h3&gt;

&lt;p&gt;Add your CodeCommit repository URL as a remote on your local git project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ git remote add origin codecommit://sam-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, push the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#verify-in-codecommit"&gt;
  &lt;/a&gt;
  Verify in CodeCommit
&lt;/h3&gt;

&lt;p&gt;Navigate to the AWS CodeCommit console, find your sam-app repository and click on it to view its contents. &lt;/p&gt;

&lt;p&gt;Make sure your code is there. You should see a screen like the following: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1dC8_by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jprcw6vudgsa7z3epl5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1dC8_by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jprcw6vudgsa7z3epl5x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-pipeline"&gt;
  &lt;/a&gt;
  HOW TO BUILD A PIPELINE
&lt;/h2&gt;

&lt;p&gt;The best way to automate the creation of CI/CD pipelines is by provisioning them programmatically via Infrastructure as Code. &lt;/p&gt;

&lt;p&gt;This is specially useful in a microservices environment, where you have a pipeline per microservice, which potentially means dozens of pipelines, if not more. &lt;/p&gt;

&lt;p&gt;Having an automated way to create these pipelines enables developers to create as many as necessary without building them manually from the console every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-ways-to-create-pipelines"&gt;
  &lt;/a&gt;
  Different ways to create pipelines
&lt;/h2&gt;

&lt;p&gt;Different mechanisms are used for creating pipelines programmatically. Nowadays developers have many choices to pick from, but the most common ones we see are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS CloudFormation&lt;/li&gt;
&lt;li&gt;AWS CDK&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;AWS Serverless App Repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introducing-the-aws-cdk"&gt;
  &lt;/a&gt;
  Introducing the AWS CDK
&lt;/h3&gt;

&lt;p&gt;In this workshop, we are going to use the AWS Cloud Development Kit (also known as CDK), as the pipeline vending mechanism. &lt;/p&gt;

&lt;p&gt;The AWS CDK is a software development framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation.&lt;/p&gt;

&lt;p&gt;That‚Äôs right! You can describe your infrastructure by writing code in TypeScript, C#, Python or Java. &lt;/p&gt;

&lt;p&gt;Your code is then synthesized into CloudFormation and using the CDK CLI you can deploy it to an AWS account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-sam-and-cdk-play-together"&gt;
  &lt;/a&gt;
  How do SAM and CDK play together?
&lt;/h3&gt;

&lt;p&gt;Serverless developers use the SAM framework to define their applications, SAM CLI to build them and deploy them and AWS CDK to provision any infrastructure related resources, like their CI/CD Pipeline. &lt;/p&gt;

&lt;p&gt;The nice thing about these tools is that they all share a common ground: CloudFormation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-cdk-project"&gt;
  &lt;/a&gt;
  SETUP A CDK PROJECT
&lt;/h2&gt;

&lt;p&gt;Now, let‚Äôs create a folder within our sam-app directory where the pipeline code will reside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; ~ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
 ~ &lt;span class="nb"&gt;mkdir &lt;/span&gt;pipeline
 ~ &lt;span class="nb"&gt;cd &lt;/span&gt;pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize a new CDK project within the pipeline folder by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cdk init &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now install the CDK modules that we will be using to build a pipeline:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @aws-cdk/aws-codedeploy @aws-cdk/aws-codebuild
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @aws-cdk/aws-codecommit @aws-cdk/aws-codepipeline-actions
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @aws-cdk/aws-s3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h3&gt;

&lt;p&gt;At this point, your project should have the structure below (only the most relevant files and folders are shown). &lt;/p&gt;

&lt;p&gt;Within the CDK project, the main file you will be interacting with is the pipeline-stack.ts. Don‚Äôt worry about the rest of the files for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sam-app                         # SAM application root
‚îú‚îÄ‚îÄ hello-world                 # Lambda code
‚îú‚îÄ‚îÄ samconfig.toml              # Config file for manual deployments
‚îú‚îÄ‚îÄ template.yaml               # SAM template
‚îî‚îÄ‚îÄ pipeline                    # CDK project root
    ‚îî‚îÄ‚îÄ lib
        ‚îî‚îÄ‚îÄ pipeline-stack.ts   # Pipeline definition
    ‚îî‚îÄ‚îÄ bin
        ‚îî‚îÄ‚îÄ pipeline.ts         # Entry point for CDK project
    ‚îú‚îÄ‚îÄ cdk.json
    ‚îú‚îÄ‚îÄ tsconfig.json
    ‚îú‚îÄ‚îÄ package.json
    ‚îî‚îÄ‚îÄ jest.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pipeline-as-code"&gt;
  &lt;/a&gt;
  PIPELINE AS CODE
&lt;/h3&gt;

&lt;p&gt;Open the file lib/pipeline-stack.ts in your Cloud9 workspace. It is empty at the moment, but here is where you will be adding code to build your CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3Pun8wF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o861v08ju83nyw78oc72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3Pun8wF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o861v08ju83nyw78oc72.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-the-cdk-project"&gt;
  &lt;/a&gt;
  Build the CDK project
&lt;/h4&gt;

&lt;p&gt;Even though we haven‚Äôt wrote any code yet, let‚Äôs get familiar with how to build and deploy a CDK project, as you will be doing it multiple times in this workshop and you should get comfortable with the process. Start by building the project with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app/pipeline
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deploy-a-cdk-project"&gt;
  &lt;/a&gt;
  Deploy a CDK project
&lt;/h4&gt;

&lt;p&gt;After the build has finished, go ahead and deploy the pipeline project by using the CDK CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--569sf_XQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl9l2gv8gfdg1a0bqi3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--569sf_XQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl9l2gv8gfdg1a0bqi3n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new CloudFormation stack was created in your account, but because your CDK project is empty, the only resource that was created was an AWS::CDK::Metadata.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#artifacts-bucket"&gt;
  &lt;/a&gt;
  ARTIFACTS BUCKET
&lt;/h3&gt;

&lt;p&gt;Every Code Pipeline needs an artifacts bucket, also known as Artifact Store. CodePipeline will use this bucket to pass artifacts to the downstream jobs and its also where SAM will upload the artifacts during the build process.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started and write the code for creating this bucket:&lt;/p&gt;

&lt;p&gt;Make sure you are editing the pipeline-stack file with .ts extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/pipeline-stack.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-s3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;codecommit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-codecommit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;codepipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-codepipeline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;codepipeline_actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-codepipeline-actions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;codebuild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-codebuild&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PipelineStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The code that defines your stack goes here&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;artifactsBucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ArtifactsBucket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy right? Now build and deploy the project like you did it earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt; Note &lt;/b&gt; &lt;/p&gt;

&lt;p&gt;If you get a build error, check that all the @aws-cdk dependencies in the package.json file have the same version number, if not, fix it, delete the node_modules folder and run npm install.&lt;/p&gt;

&lt;p&gt;The output will show that the S3 bucket got created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjB3u1vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mldpb3y4euvnh9a6oze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjB3u1vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mldpb3y4euvnh9a6oze.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-stage"&gt;
  &lt;/a&gt;
  SOURCE STAGE
&lt;/h3&gt;

&lt;p&gt;The Source Stage is the first step of any CI/CD pipeline and it represents your source code. This stage is in charge of triggering the pipeline based on new code changes (i.e. git push or pull requests). In this workshop, we will be using AWS CodeCommit as the source provider, but CodePipeline also supports S3, GitHub and Amazon ECR as source providers.&lt;/p&gt;

&lt;p&gt;Append the following code snippet after your bucket definition in the pipeline-stack.ts file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import existing CodeCommit sam-app repository&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;codeRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;codecommit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromRepositoryName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AppRepository&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Logical name within CloudFormation&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Repository name&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Pipeline creation starts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pipeline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;artifactBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;artifactsBucket&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Declare source code as an artifact&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourceOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Artifact&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add source stage to pipeline&lt;/span&gt;
&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Source&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline_actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CodeCommitSourceAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CodeCommit_Source&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;codeRepo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sourceOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we define an object sourceOutput as a pipeline artifact; this is necessary for any files that you want CodePipeline to pass to downstream stages. &lt;/p&gt;

&lt;p&gt;In this case, we want our source code to be passed to the Build stage.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Info &lt;/b&gt;  &lt;/p&gt;

&lt;p&gt;Don‚Äôt do a cdk deploy just yet, because a pipeline needs to have at least 2 stages to be created. Lets continue to the next page to add a Build stage first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-stage"&gt;
  &lt;/a&gt;
  BUILD STAGE
&lt;/h3&gt;

&lt;p&gt;The Build Stage is where your Serverless application gets built and packaged by SAM. We are going to use AWS CodeBuild as the Build provider for our pipeline. &lt;/p&gt;

&lt;p&gt;It is worth mentioning that CodePipeline also supports other providers like Jenkins, TeamCity or CloudBees.&lt;/p&gt;

&lt;p&gt;AWS CodeBuild is a great option because you only pay for the time where your build is running, which makes it very cost effective compared to running a dedicated build server 24 hours a day when you really only build during office hours. &lt;/p&gt;

&lt;p&gt;It is also container-based which means that you can bring your own Docker container image where your build runs, or use a managed image provided by CodeBuild.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-the-build-stage"&gt;
  &lt;/a&gt;
  Add the build stage
&lt;/h4&gt;

&lt;p&gt;Let‚Äôs go ahead and add a Build stage to you pipeline-stack.ts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Declare build output as artifacts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Artifact&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a new CodeBuild project&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildProject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codebuild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PipelineProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;buildImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;codebuild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LinuxBuildImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AMAZON_LINUX_2_2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;environmentVariables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PACKAGE_BUCKET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;artifactsBucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bucketName&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Add the build stage to our pipeline&lt;/span&gt;
&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline_actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CodeBuildAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;buildProject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sourceOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;buildOutput&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deploy-the-pipeline"&gt;
  &lt;/a&gt;
  Deploy the pipeline
&lt;/h4&gt;

&lt;p&gt;From your terminal, run the following commands to deploy the pipeline:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#verify-pipeline-creation"&gt;
  &lt;/a&gt;
  Verify pipeline creation
&lt;/h4&gt;

&lt;p&gt;Navigate to the AWS CodePipeline Console and click on your newly created pipeline!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_sWXgZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jniy880thoacbtj0x86z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_sWXgZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jniy880thoacbtj0x86z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Build step should have failed. Don‚Äôt worry! this is expected because we haven‚Äôt specified what commands to run during the build yet, so AWS CodeBuild doesn‚Äôt know how to build our Serverless application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-HxVhCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2guqcsxt2mz1o4ck24go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-HxVhCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2guqcsxt2mz1o4ck24go.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's fix it! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buildspec-file"&gt;
  &lt;/a&gt;
  BUILDSPEC FILE
&lt;/h3&gt;

&lt;p&gt;A Buildspec File is a series of commands in YAML format that CodeBuild executes to build your application. &lt;/p&gt;

&lt;p&gt;This file is placed in the root folder of a SAM application and CodeBuild will automatically find it and run it during build time.&lt;/p&gt;

&lt;p&gt;In the root folder of app, create file named "buildspec.yml" and paste the following in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~/environment/sam-app/buildspec.yml&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;
&lt;span class="na"&gt;phases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runtime-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;nodejs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
    &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Install packages or any pre-reqs in this phase.&lt;/span&gt;
      &lt;span class="c1"&gt;# Upgrading SAM CLI to latest version&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pip3 install --upgrade aws-sam-cli&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sam --version&lt;/span&gt;
      &lt;span class="c1"&gt;# Installing project dependencies&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cd hello-world&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;

  &lt;span class="na"&gt;pre_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Run tests, lint scripts or any other pre-build checks.&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm run test&lt;/span&gt;

  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Use Build phase to build your artifacts (compile, etc.)&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cd ..&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sam build&lt;/span&gt;

  &lt;span class="na"&gt;post_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Use Post-Build for notifications, git tags, upload artifacts to S3&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sam package --s3-bucket $PACKAGE_BUCKET --output-template-file packaged.yaml&lt;/span&gt;

&lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;discard-paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yes&lt;/span&gt;
  &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# List of local artifacts that will be passed down the pipeline&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;packaged.yaml&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a moment to understand the structure of the file and feel free to read the Buildsec Reference here: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html"&gt;https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Commit your changes and push them to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added buildspec.yml"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to your CodePipeline again, and wait for it to trigger automatically. This time the build will succeed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFGDa2aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm54fo2lj0iz1780a6vd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFGDa2aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm54fo2lj0iz1780a6vd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-stage"&gt;
  &lt;/a&gt;
  DEPLOY STAGE
&lt;/h3&gt;

&lt;p&gt;The Deploy Stage is where your SAM application and all its resources are created an in an AWS account. &lt;/p&gt;

&lt;p&gt;The most common way to do this is by using CloudFormation ChangeSets to deploy. This means that this stage will have 2 actions: the CreateChangeSet and the ExecuteChangeSet.&lt;/p&gt;

&lt;p&gt;Add the Deploy stage to your pipeline-stack.ts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Deploy stage&lt;/span&gt;
&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addStage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline_actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CloudFormationCreateReplaceChangeSetAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CreateChangeSet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;templatePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;buildOutput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;atPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;packaged.yaml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;stackName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;adminPermissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;changeSetName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam-app-dev-changeset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline_actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CloudFormationExecuteChangeSetAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deploy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stackName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;changeSetName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam-app-dev-changeset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploy-the-pipeline"&gt;
  &lt;/a&gt;
  Deploy the pipeline
&lt;/h3&gt;

&lt;p&gt;On your terminal, run the following commands from within the pipeline directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app/pipeline
npm run build
cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to your pipeline and you will see the Deploy stage has been added, however, it is currently grayed out because it hasn‚Äôt been triggered. Let‚Äôs just trigger a new run of the pipeline manually by clicking the Release Change buttton.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzqnFQrL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eaqfpw7z3kv096jui75n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzqnFQrL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eaqfpw7z3kv096jui75n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the terminal, run the following commands from the root directory of your sam-app project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"CI/CD Pipeline definition"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt; Congratulations! You have created a CI/CD pipeline for a Serverless application! &lt;/b&gt; &lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
      <category>node</category>
    </item>
    <item>
      <title>Add GitHub SSH-Key</title>
      <author>M. Akbar Nugroho</author>
      <pubDate>Thu, 12 Aug 2021 17:03:09 +0000</pubDate>
      <link>https://dev.to/thexdev/add-github-ssh-key-19pe</link>
      <guid>https://dev.to/thexdev/add-github-ssh-key-19pe</guid>
      <description>&lt;p&gt;GitHub is my favorite cloud repository and I've used it for a long time. It allows use to collaborate with other developers and also integrates our project with awesome tools like Travis CI, Heroku, etc to make our project easy to manage and deploy.&lt;/p&gt;

&lt;p&gt;To connect with GitHub and doing some actions like &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pull&lt;/code&gt;, we have two options. Via HTTPS and SSH.&lt;/p&gt;

&lt;p&gt;HTTPS using HTTP protocol to transfer changes to GitHub and requires us to input our username and password every time we do those actions.&lt;/p&gt;

&lt;p&gt;While SSH using SSH protocol to transfer changes to GitHub and requires us to input our passphrase (if your provide it) and it more secure.&lt;/p&gt;

&lt;p&gt;This article will guide you to add SSH-Key on your GitHub account. Let's try it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SSH agent (installed on your computer)&lt;/li&gt;
&lt;li&gt;GitHub account (&lt;a href="https://github.com/signup"&gt;sign-up here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE&lt;br&gt;
In this article I use Ubuntu 20.04 and I will not cover about how to install SSH agent if you are using Windows. You can search it on google and back here again.&lt;/p&gt;

&lt;p&gt;If you are using Linux or Mac OS, then you're all set because they have SSH installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-generate-sshkey"&gt;
  &lt;/a&gt;
  1. Generate SSH-Key
&lt;/h3&gt;

&lt;p&gt;Open your terminal and type command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen &lt;span class="nt"&gt;-t&lt;/span&gt; ed25519 &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="s2"&gt;"your_email@example.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will asked where you want to put your key. If you not sure, just leave it and enter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter file in which to save the key (/home/you/.ssh/id_rsa):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
If you already have any SSH-Key with same name, it will override the old SSH-Key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, you will asked about passphrase. Passphrase is like password. It will prompt you to input your passphrase whenever you want to connect with another host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy our public key. You can use tools like &lt;code&gt;xclip&lt;/code&gt;. You can also use &lt;code&gt;cat&lt;/code&gt; command and copy the key manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /home/you/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-login-to-github-and-go-to-settings"&gt;
  &lt;/a&gt;
  2. Login to GitHub and go to settings
&lt;/h3&gt;

&lt;p&gt;Login to your GitHub account. You will see your profile photo at the right top corner. Click it and go to settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62H54jml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zatahzirqabzj34teg1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62H54jml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zatahzirqabzj34teg1r.png" alt="Go to settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-go-to-ssh-and-gpg-keys-setting"&gt;
  &lt;/a&gt;
  3. Go to SSH and GPG keys setting
&lt;/h3&gt;

&lt;p&gt;On left menu, click SSH and GPG keys.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHjFw0Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gh3fn881jgtbnn52cc9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHjFw0Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gh3fn881jgtbnn52cc9r.png" alt="Go to SSH and GPG keys setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-new-sshkey"&gt;
  &lt;/a&gt;
  4. Add new SSH-Key
&lt;/h3&gt;

&lt;p&gt;On this page you will see all of your SSH-Keys. To add new one, click the &lt;code&gt;New SSH key&lt;/code&gt; button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ0wWcal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mj63a41bad3hymtc2it.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ0wWcal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mj63a41bad3hymtc2it.png" alt="Add new ssh key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill the title and key. Remember to copy the public key on your local computer. Not the private key.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdAmeqbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdpqawe22jdkxygiawyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdAmeqbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdpqawe22jdkxygiawyt.png" alt="Add title and key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the key and you're ready to push your changes to GitHub using SSH connection. Congrats! ü•≥&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Structuring a Node.js and Express Backend</title>
      <author>Samar Mohan</author>
      <pubDate>Thu, 12 Aug 2021 16:55:01 +0000</pubDate>
      <link>https://dev.to/samarmohan/structuring-a-node-js-and-express-backend-23h</link>
      <guid>https://dev.to/samarmohan/structuring-a-node-js-and-express-backend-23h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;There are so many ways to structure a Node.js and Express API and each one has its own pros and cons. In this post I'll detail the two main ways, MVC and modules.&lt;/p&gt;

&lt;p&gt;Note: I'm not going to keep adding "Easy to understand" and related pros becausethis is all based on opinion, pick one and stick to it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structures"&gt;
  &lt;/a&gt;
  The structures
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#inspired-by-djangos-apps"&gt;
  &lt;/a&gt;
  Inspired by Django's apps
&lt;/h6&gt;

&lt;p&gt;One way to structure an app is with modules. Each module contains all the code for a certain part of the app like &lt;code&gt;auth&lt;/code&gt; or &lt;code&gt;posts&lt;/code&gt;. Each folder will have the controllers, routes, entities, and middleware.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab-kblv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb3gt02dfx5jdlncxavf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab-kblv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb3gt02dfx5jdlncxavf.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
An example of the &lt;code&gt;auth&lt;/code&gt; module is above. You structure the &lt;code&gt;auth&lt;/code&gt; module your own way, this is just mine. You could use an MVC pattern inside the module and some people may want to strip out the middleware and entities.&lt;/p&gt;

&lt;p&gt;Pros: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to work on a certain feature, everything is in one place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may not want everything bundled up like that.&lt;/li&gt;
&lt;li&gt;You'll have to use &lt;code&gt;fileName.typeOfFile.extension&lt;/code&gt; instead of just &lt;code&gt;fileName.extension&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mvc"&gt;
  &lt;/a&gt;
  MVC
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#used-in-phoenix-rails-and-aspnet-core"&gt;
  &lt;/a&gt;
  Used in Phoenix, Rails, and ASP.NET Core
&lt;/h6&gt;

&lt;p&gt;This is by far the most common way to structure a backend project and many popular frameworks use it. You have your controllers (logic, handling requests), views (ui), and models (database schemas, business logic).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFNzgPqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oosx5cl6v1cmko2lwhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFNzgPqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oosx5cl6v1cmko2lwhg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
An example of MVC in action. The &lt;code&gt;auth&lt;/code&gt; controller will have the register, login, and logout methods. The model will have the database entity fields, and the view will be what the end user sees.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You know how everything interacts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple folders&lt;/li&gt;
&lt;li&gt;Repetitive&lt;/li&gt;
&lt;li&gt;You need to understand the why behind MVC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! I hope this cleared up some things for you.&lt;/p&gt;

</description>
      <category>node</category>
      <category>backend</category>
      <category>blacklivesmatter</category>
    </item>
    <item>
      <title>How to Burst the "Tutorial Phase" When Becoming a Developer</title>
      <author>Michael Mangialardi</author>
      <pubDate>Thu, 12 Aug 2021 16:49:46 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/how-to-burst-the-tutorial-phase-when-becoming-a-developer-gk</link>
      <guid>https://dev.to/michaelmangial1/how-to-burst-the-tutorial-phase-when-becoming-a-developer-gk</guid>
      <description>&lt;p&gt;Teaching is essentially a transfer of knowledge.&lt;/p&gt;

&lt;p&gt;In this sense, every developer is a teacher.&lt;/p&gt;

&lt;p&gt;Every developer has to instruct (transfer knowledge to) the computer so that an application does what it is supposed to.&lt;/p&gt;

&lt;p&gt;Now, imagine if a teacher's knowledge was limited to only knowing the right textbook to read and follow, without any awareness of the reasoning behind the subject. Picture a chemistry teacher who doesn't grasp the fundamental concepts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZN8I3oV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1509062522246-3755977927d7%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1104%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZN8I3oV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1509062522246-3755977927d7%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1104%26q%3D80" alt="teacher"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same is true for developers.&lt;/p&gt;

&lt;p&gt;Many new, aspiring developers become so fixated on understanding a particular framework, following tutorials, video courses, etc. without grasping the fundamental concepts.&lt;/p&gt;

&lt;p&gt;After doing a video course, they can make a React movie app, but they don't know where to begin if asked to make a Twitter clone.&lt;/p&gt;

&lt;p&gt;Now, I don't mean to sound discouraging.&lt;/p&gt;

&lt;p&gt;I've been there. Impostor syndrome creeps in. You begin to think that you must not be cut out for the field, etc. etc.&lt;/p&gt;

&lt;p&gt;That's tough.&lt;/p&gt;

&lt;p&gt;But, I think pointing all of this out works towards encouragement.&lt;/p&gt;

&lt;p&gt;Here's why. I think that there are tangible, practical ways to get out of the "tutorial phase" and understand the concepts behind the particular discipline of software development that you are trying to learn.&lt;/p&gt;

&lt;p&gt;So, what are those practical ways to grasp the fundamental concepts and move beyond the "tutorial phase?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-teach-the-material-to-others"&gt;
  &lt;/a&gt;
  1) Teach the material to others
&lt;/h2&gt;

&lt;p&gt;This could go for anything that you are learning, but it is especially helpful for those who are just learning to code.&lt;/p&gt;

&lt;p&gt;As we've mentioned, good teaching requires understanding the fundamental concepts. So, to write an article on a subject (for example), you will be forced to understand it in such a manner that you can effectively communicate it to someone else.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's impossible to teach and not learn in the process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take whatever you're trying to learn and post articles, videos, etc. explaining it to someone else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2kAP5K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1605711285791-0219e80e43a3%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2kAP5K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1605711285791-0219e80e43a3%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="teach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not only will this help you learn, but you communicate in a manner that is more sympathetic and comprehensible to those who are also in the middle of learning something new.&lt;/p&gt;

&lt;p&gt;Sure. It takes time.&lt;/p&gt;

&lt;p&gt;But I'm persuaded it will take less time than the vicious cycle of the "tutorial phase."&lt;/p&gt;

&lt;p&gt;Oh, and by the way, you can also make some profit from your time.&lt;/p&gt;

&lt;p&gt;I applied the teaching method earlier this year when I wanted to learn how to build a Shopify-like design system from scratch using design tokens. I wrote &lt;a href="https://www.michaelmang.dev/blog/introduction-to-design-tokens"&gt;blog posts&lt;/a&gt; as I was learning.&lt;/p&gt;

&lt;p&gt;After mastering the subject through my teaching, I rewrote all my thoughts on the subject into &lt;a href="https://leanpub.com/designsystemsfordevelopers"&gt;an ebook&lt;/a&gt;. I don't make a lot from it, but it's a nice bonus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-use-the-source-luke"&gt;
  &lt;/a&gt;
  2) Use the Source, Luke
&lt;/h2&gt;

&lt;p&gt;I once recorded a podcast episode called &lt;a href="https://www.michaelmang.dev/blog/use-the-source-luke"&gt;Use the Source, Luke&lt;/a&gt; that explains this concept to Star Wars fans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MwQCpQRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1472457897821-70d3819a0e24%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1049%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwQCpQRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1472457897821-70d3819a0e24%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1049%26q%3D80" alt="star-wars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The gist is that the way to "take it to the next level" as a developer is to look at the source code of frameworks and libraries that you are using.&lt;/p&gt;

&lt;p&gt;After all, a library's documentation is just an author of the library's attempt to explain their code.&lt;/p&gt;

&lt;p&gt;Sometimes reading the code itself gives clues to the original intent as to how things work.&lt;/p&gt;

&lt;p&gt;Libraries are created to solve problems. If you read the code of a library, you "tracing the breadcrumbs" as to how the problem was solved.&lt;/p&gt;

&lt;p&gt;If you read carefully, you will 1) understand how it solves the problem and 2) be able to employ similar ideas to solve your own problems.&lt;/p&gt;

&lt;p&gt;The point of all of this is to build confidence so that when you get stuck in writing code, you will know how to get to the bottom of it. Sometimes this requires looking at source code. Even if it doesn't, looking at source code enhances the same "debugging" mindset.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-assign-yourself-a-project"&gt;
  &lt;/a&gt;
  3) Assign yourself a project
&lt;/h2&gt;

&lt;p&gt;Too often, aspiring developers start doing what tutorials tell them to do (i.e. a Twitter/Slack/Twitch clone).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T6eRcJrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1566241477600-ac026ad43874%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1030%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6eRcJrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1566241477600-ac026ad43874%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1030%26q%3D80" alt="twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those are good projects, to be sure. However, the issue is when you are more focused on following a tutorial than learning the concepts.&lt;/p&gt;

&lt;p&gt;A good way to learn is to force yourself to have to do it on your own. So, you should assign yourself a project.&lt;/p&gt;

&lt;p&gt;Also, doing a project that someone else finds motivating won't be too motivating for yourself. To put it positively, doing a project that you are super interested in will provide the stamina to continue through the troubles that arise when trying to build something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, tutorials are a good start for aspiring developers. I still use them today.&lt;/p&gt;

&lt;p&gt;However, they can be a stumbling block. Consider following any of these three means that I have provided to get out of the "tutorial phase."&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>learning</category>
    </item>
    <item>
      <title>Implementing Reactivity from scratch</title>
      <author>Siddharth</author>
      <pubDate>Thu, 12 Aug 2021 16:09:52 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/implementing-reactivity-from-scratch-51op</link>
      <guid>https://dev.to/siddharthshyniben/implementing-reactivity-from-scratch-51op</guid>
      <description>&lt;p&gt;Reactivity is at the heart of many web interfaces. It makes programming robust and interactive web apps much, much easier. Although most frameworks have reactivity as a built in feature, there will always be a point when you need reactivity in plain JavaScript. So, here I will show you how to implement reactivity in JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-what-is-reactivity"&gt;
  &lt;/a&gt;
  Wait... What is reactivity?
&lt;/h3&gt;

&lt;p&gt;There are a bunch of explanations out there, the best one so far being &lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"&gt;this&lt;/a&gt;. But here, I'll show you a code sample, which is easier to understand.&lt;/p&gt;

&lt;p&gt;Suppose you have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Siddharth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;who&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Later, you change &lt;code&gt;who&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;who&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Somebody&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But the content in the H1 does not change until we call &lt;code&gt;document.querySelector('h1').innerText = who;&lt;/code&gt; again. This is where reactivity comes in. It automatically reruns the code (in our case &lt;code&gt;document.querySelector('h1').innerText = who;&lt;/code&gt;) when the referred variables change. So, when we change the variable, the change is automatically reflected in the code.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-engine"&gt;
  &lt;/a&gt;
  The engine
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: to keep this tutorial simple (and fun!), I won't implement error handling, objects, and all the boring checks. The next parts of this tutorial will go in detail on some of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, let's build an object which we need to react to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;One way to make it reactive would be to have setters/getters to listen for events, and &lt;em&gt;react&lt;/em&gt; to that.&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;em&gt;A quick note on setters/getters.&lt;/em&gt; &lt;br&gt;&lt;br&gt; &lt;a href="https://mdn.io/getter"&gt;Getters&lt;/a&gt; and &lt;a href="https://mdn.io/setter"&gt;setters&lt;/a&gt; are functions which are called when an object's property is called/set. Here's a simple example:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 1, 2, 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setters and getters are really helpful when building reactivity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;p&gt;So, we would need to change the object to be like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO notify&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And code using it would look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name was changed to &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Siddharth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; name was changed to Siddharth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, let's first build the &lt;code&gt;Reactive&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Reactive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* TODO */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* TODO */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the constructor is quite simple, just set the data and start observing:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// Will be explained later&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we'll implement &lt;code&gt;makeReactive&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePropReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we'll implement &lt;code&gt;makePropReactive&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makePropReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Cache&lt;/span&gt;

    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we use &lt;code&gt;Object.defineProperty&lt;/code&gt; to set getters on an the object.&lt;/p&gt;

&lt;p&gt;Next thing to do is set up a notifier and an listener. The listener is pretty simple:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we set listeners on an object as values in an array. &lt;/p&gt;

&lt;p&gt;Next, to notify:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's the end! Here's the full code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Reactive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;makeReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePropReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;makePropReactive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Gotta be careful with this here&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Simple, isn't it? Here's a repl:&lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
  &lt;/code&gt;
  &lt;code&gt;
    
// Setup code
class Reactive {
    constructor (obj) {
        this.contents = obj;
        this.listeners = {};
        this.makeReactive(obj);
    }
makeReactive(obj) {
    Object.keys(obj).forEach(prop =&amp;gt; this.makePropReactive(obj, prop));
}

makePropReactive(obj, key) {
    let value = obj[key];

    // Gotta be careful with this here
    const that = this;

    Object.defineProperty(obj, key, {
        get () {
                return value;
        },
        set (newValue) {
            value = newValue;
            that.notify(key)
        }
    });
}

listen(prop, handler) {
    if (!this.listeners[prop]) this.listeners[prop] = [];

    this.listeners[prop].push(handler);
}

notify(prop) {
    this.listeners[prop].forEach(listener =&amp;gt; listener(this.contents[prop]));
}

}
const data = new Reactive({
    foo: 'bar'
});

data.listen('foo', (change) =&amp;gt; console.log('Change: ' + change));

data.contents.foo = 'baz';

  &lt;/code&gt;
&lt;/div&gt;






&lt;p&gt;Thanks for reading! In the next parts, we'll get a bit more into how we can enhance this.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to build a Vue Meditation App with Vue.js [ Series - Portfolio Apps  ]</title>
      <author>Sith Norvang</author>
      <pubDate>Thu, 12 Aug 2021 15:48:54 +0000</pubDate>
      <link>https://dev.to/sithcode/how-to-build-a-vue-meditation-app-with-vue-js-series-portfolio-apps-278n</link>
      <guid>https://dev.to/sithcode/how-to-build-a-vue-meditation-app-with-vue-js-series-portfolio-apps-278n</guid>
      <description>&lt;p&gt;This is the first episode of "Apps For Your Portfolio" series. In this post, we are going to build a Meditation App with my favorite front-end framework Vue.js.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-setup"&gt;
  &lt;/a&gt;
  1.0 / Setup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#vue-3-installation"&gt; 1.1 | Install Vue &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vue-3-new-project"&gt; 1.2 | Creating a new project &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vue-3-vuex-sasss-loader"&gt; 1.3 | Install Vuex &amp;amp; Sass Loader &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#20-assets"&gt;
  &lt;/a&gt;
  2.0 / Assets
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#assets-images"&gt; 2.1 | Images &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assets-sounds"&gt; 2.2 | Sounds &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assets-svg"&gt; 2.3 | Svg &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assets-videos"&gt; 2.4 | Videos &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#30-components"&gt;
  &lt;/a&gt;
  3.0 / Components
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#container-background"&gt; 3.1 | ContainerBackground.vue &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#container-pop-up"&gt; 3.2 | ContainerPopUp.vue &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sound"&gt; 3.3 | Sound.vue &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#container-timer"&gt; 3.4 | ContainerTimer.vue &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#container-links"&gt; 3.5 | ContainerLinks.vue &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-11-vue-3-config"&gt;
  &lt;/a&gt;
  [ 1.1 ] Vue 3 Config &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Install latest stable of Vue

yarn global add @vue/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-12-creating-a-new-project"&gt;
  &lt;/a&gt;
  [ 1.2 ] Creating a new project &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create a New Vue Application name 'meditation-app'

vue create meditation-app
cd meditation-app
yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-13-install-vuex-amp-sass-loader"&gt;
  &lt;/a&gt;
  [ 1.3 ] Install Vuex &amp;amp; Sass Loader &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We also need to install sass-loader pre-processors to animate easily our future timer. If you don't know Sass is an extension of CSS that enables you to use things like variables, nested rules, inline imports and more. &lt;/p&gt;

&lt;p&gt;You can find more information on the official documentation :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sass-lang.com/documentation"&gt;https://sass-lang.com/documentation&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D sass-loader sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To help my code organized in this application. I decide to use the state management pattern Vuex.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add vuex@next --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use Vuex, we need also to change main.js and create a new folder name "store" with four files :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.js&lt;/li&gt;
&lt;li&gt;actions.js&lt;/li&gt;
&lt;li&gt;mutations.js&lt;/li&gt;
&lt;li&gt;getters.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/main.js

import { createApp } from 'vue';

import App from './App.vue';
import store from './store/index.js'

const app = createApp(App);

app.use(store);

app.mount('#app');

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
|
|-- store |-- actions.js
          |-- getters.js 
          |-- index.js
          |-- mutations.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To build our meditation application, let's initialize all states, actions, mutations and getters as following :&lt;/p&gt;

&lt;p&gt;'isPlaying'&lt;br&gt;
'timeSelected'&lt;br&gt;
'vibeSelected'&lt;br&gt;
'step'&lt;br&gt;
'choices'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../store/index.js

import { createStore } from 'vuex'

import rootMutations from './mutations.js'
import rootActions from './actions.js'
import rootGetters from './getters.js'

const store = createStore({
  state() {
    return {
      isPlaying: false,
      timeSelected: 0,
      vibeSelected: { value: 'bird'},
      step: 0,
      choices: [
        { 
          id: 1,
          name: '10 minutes',
          imgSrc: require("@/assets/images/Bouton_10_minutes.png"),
          category: 'timer',
          value: 600,
        },
        { 
          id: 2,
          name: '20 minutes',
          imgSrc: require("@/assets/images/Bouton_20_minutes.png"),
          category: 'timer',
          value: 1200,
        },
        { 
          id: 3,
          name: '30 minutes',
          imgSrc: require("@/assets/images/Bouton_30_minutes.png"),
          category: 'timer',
          value: 1800,
        },
        {
          id: 4,
          name: 'In The Space',
          imgSrc: require("@/assets/images/Bouton_Space.png"),
          category: 'vibe',
          value: 'space',
        },
        {
          id: 5,
          name: 'On The Beach',
          imgSrc: require("@/assets/images/Bouton_Beach.png"),
          category: 'vibe',
          value: 'beach',
        },
        {
          id: 6,
          name: 'Under The Rain',
          imgSrc: require("@/assets/images/Bouton_Rain.png"),
          category: 'vibe',
          value: 'rain',
        },
      ]
    }
  },
  mutations: rootMutations,
  actions: rootActions,
  getters: rootGetters,
});

export default store;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/store/actions.js

export default {
  changeTimer(context, time) {
    context.commit('changeTimer', time)
  },
  changeVibe(context, vibe) {
    context.commit('changeVibe', vibe)
  },
  changeStep(context) {
    context.commit('changeStep')
  },
  activeIsPlaying(context) {
    context.commit('activeIsPlaying')
  },
  togglePlayPause(context) {
    context.commit('togglePlayPause')
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/store/mutations.js

export default {
  changeTimer(state, time) {
    state.timeSelected = time
  },
  changeVibe(state, vibe) {
    state.vibeSelected = vibe 
  },
  changeStep(state) {
    state.step++
  },
  activeIsPlaying(state) {
    state.isPlaying = true
  },
  togglePlayPause(state) {
    state.isPlaying = !state.isPlaying
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/store/getters.js

export default {
  timeSelected(state) {
    return state.timeSelected
  },
  vibeSelected(state) {
    return state.vibeSelected
  },
  step(state) {
    return state.step
  },
  choices(state) {
    return state.choices
  },
  isPlaying(state) {
    return state.isPlaying
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great ! The next step is importing all assets.&lt;/p&gt;

&lt;p&gt;Let's create four new folders in assets :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;images,&lt;/li&gt;
&lt;li&gt;sounds,&lt;/li&gt;
&lt;li&gt;svg,&lt;/li&gt;
&lt;li&gt;videos,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
|
|-- assets --|-- images
             |-- sounds
             |-- svg
             |-- videos

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-21-assets-images"&gt;
  &lt;/a&gt;
  [ 2.1 ] Assets Images &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Maybe you didn't notice but the state 'choices' is an array of objects. Each object has an attribute 'imgSrc' as this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  id: 6,
  name: 'Under The Rain',
  imgSrc: require("@/assets/images/Bouton_Rain.png"),
  category: 'vibe',
  value: 'rain',
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it &lt;strong&gt;'require("@/assets/images/Bouton_Rain.png")'&lt;/strong&gt; is the path to import the file 'Bouton_Rain.png'&lt;/p&gt;

&lt;p&gt;You need to create six illustrations relative to timer and to background video as following :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_3WQo1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3tdx1inhr5vsa4u0d9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_3WQo1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3tdx1inhr5vsa4u0d9d.png" alt="Button Timer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3eXeTojl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej5l86150te6ey5fir6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eXeTojl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej5l86150te6ey5fir6j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I took some image from &lt;a href="https://unsplash.com/"&gt;https://unsplash.com/&lt;/a&gt; and resizing it to 375px width | 250px height.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
|
|-- assets --|-- images -- Bouton_10_minutes.png
                       |-- Bouton_20_minutes.png
                       |-- Bouton_30_minutes.png
                       |-- Bouton_Beach.png
                       |-- Bouton_Rain.png
                       |-- Bouton_Space.png

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-22-assets-sounds"&gt;
  &lt;/a&gt;
  [ 2.2 ] Assets Sounds &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ri1rdXz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn5c7kdccrnl1rsnk0f6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ri1rdXz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn5c7kdccrnl1rsnk0f6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download four sound effects from &lt;a href="https://www.videvo.net/"&gt;https://www.videvo.net/&lt;/a&gt; and import them in sounds folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
|
|-- assets -- sounds -- beach.mp3
                       |-- calmSpace.mp3
                       |-- rain.mp3
                       |-- songOfBirds.mp3

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-23-assets-svg"&gt;
  &lt;/a&gt;
  [ 2.3 ] Assets Svg &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Create eight components in svg folder :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
|
|-- assets -- svg -- BeachSvg.vue
                 |-- GithubSvg.vue
                 |-- LinkedInSvg.vue
                 |-- PauseSvg.vue
                 |-- PlaySvg.vue
                 |-- PraySvg.vue
                 |-- RainSvg.vue
                 |-- SpaceSvg.vue

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/BeachSvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" :fill="defaultColor" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;path d="M115.4 200.8L217.5 238.15C252.63 156.53 303.75 93.75 356.5 64.45C260.62 59.575 167.7 101.41 108 176.15C101.2 184.6 105.2 197.2 115.4 200.8ZM247.6 249L486.1 335.87C521.85 214.47 504.72 104.27 443.47 81.97C436.095 79.345 428.35 77.908 420.35 77.908C362.4 77.88 292.1 147.13 247.6 249ZM521.5 124.51C527.75 140.76 532.25 159.13 534.63 179.76C540.38 229.63 533.254 287.86 515.75 346.66L618.35 384.03C628.48 387.78 639.6 380.655 639.85 369.91C642.3 274.1 598 182.4 521.5 124.51ZM528 512H321L386 333.5L325.87 311.63L252.99 512.03H48C21.49 512 0 533.5 0 560C0 568.8 7.163 576 16 576H560C568.837 576 576 568.837 576 560.9C576 533.5 554.5 512 528 512Z" :fill="defaultColor"/&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/GithubSvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" fill="none" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;path fill-rule="evenodd" clip-rule="evenodd" d="M320 140C220.4 140 140 220.4 140 320C140 399.2 191.6 466.4 263.6 490.4C273.2 491.6 275.6 486.8 275.6 482V450.8C225.2 461.6 214.4 426.8 214.4 426.8C206 406.4 194 400.4 194 400.4C177.2 389.6 195.2 389.6 195.2 389.6C213.2 390.8 222.8 407.6 222.8 407.6C238.4 435.2 264.8 426.8 275.6 422C276.8 410 281.6 402.8 287.6 398C248 393.2 206 377.6 206 309.2C206 290 213.2 273.2 224 261.2C221.6 256.4 215.6 238.4 225.2 213.2C225.2 213.2 240.8 208.4 274.4 231.2C288.8 227.6 304.4 225.2 320 225.2C335.6 225.2 351.2 227.6 365.6 231.2C400.4 208.4 414.8 213.2 414.8 213.2C424.4 238.4 418.4 256.4 416 261.2C428 273.2 434 290 434 309.2C434 378.8 392 393.2 352.4 398C358.4 404 364.4 414.8 364.4 431.6V480.8C364.4 485.6 368 491.6 376.4 489.2C448.4 465.2 498.8 398 498.8 318.8C500 220.4 419.6 140 320 140Z" :fill="defaultColor"/&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/LinkedInSvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" fill="none" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;path d="M512 96H127.9C110.3 96 96 110.5 96 128.3V511.7C96 529.5 110.3 544 127.9 544H512C529.6 544 544 529.5 544 511.7V128.3C544 110.5 529.6 96 512 96ZM231.4 480H165V266.2H231.5V480H231.4ZM198.2 237C176.9 237 159.7 219.7 159.7 198.5C159.7 177.3 176.9 160 198.2 160C219.4 160 236.7 177.3 236.7 198.5C236.7 219.8 219.5 237 198.2 237V237ZM480.3 480H413.9V376C413.9 351.2 413.4 319.3 379.4 319.3C344.8 319.3 339.5 346.3 339.5 374.2V480H273.1V266.2H336.8V295.4H337.7C346.6 278.6 368.3 260.9 400.6 260.9C467.8 260.9 480.3 305.2 480.3 362.8V480V480Z" :fill="defaultColor"/&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/PauseSvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" :fill="defaultColor" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;path d="M432 127.1H400C373.49 127.1 352 148.59 352 174.2V462.2C352 488.71 373.49 510.2 400 510.2L432 512C458.51 512 480 490.51 480 464V176C480 149.49 458.5 127.1 432 127.1ZM240 127.1H208C181.49 127.1 160 148.59 160 175.1V463.1C160 490.5 181.49 512 208 512H240C266.51 512 288 490.51 288 464V176C288 149.49 266.5 127.1 240 127.1Z" :fill="defaultColor"/&amp;gt;
  &amp;lt;/svg&amp;gt;

&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/PlaySvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" :fill="defaultColor" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;path d="M176 543.98C148.6 543.98 128 521.58 128 495.98V143.98C128 118.6 148.4 96 176.01 96C184.696 96 193.36 98.352 201.03 103.031L489.03 279.031C503.3 287.78 512 303.28 512 319.98C512 336.68 503.297 352.21 489.03 360.93L201.03 536.93C193.4 541.58 184.7 543.98 176 543.98Z" :fill="defaultColor"/&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/PraySvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" :fill="defaultColor" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;g clip-path="url(#clip0)"&amp;gt;
    &amp;lt;path d="M272 255.9C254.38 255.9 240 270.25 240 287.87V367.9C240 376.775 232.875 383.9 224 383.9C215.125 383.9 208 376.775 208 367.9V291.4C208 274.03 212.75 256.9 221.75 242.03L299.5 112.41C308.5 97.29 303.625 77.65 288.5 68.53C273.1 59.775 255.8 64.1289 246.1 77.63C245.1 77.88 245.5 77.88 245.4 78.13L128.1 254C117.5 269.9 112 288.3 112 307.3V387.54L21.87 416.64C8.75 421.9 0 434.1 0 447.9V543.89C0 554.77 8.5 574.99 32 574.99C34.75 574.99 37.375 574.74 40 573.99L219.3 527.37C269.1 514 304 467.8 304 415.9V287.9C304 270.3 289.6 255.9 272 255.9ZM618.1 417.6L528 387.6V307.4C528 288.4 522.5 270.03 511.88 254.15L394.58 78.25C394.455 78 393.955 78.0013 393.83 77.7513C384.205 64.2513 365.95 59.9013 351.45 68.5223C336.33 77.6473 331.45 97.2823 340.45 112.532L418.2 242.032C427.3 257 432 274 432 291.5V367.99C432 376.865 424.875 383.99 416 383.99C407.125 383.99 400 376.865 400 367.99V287.1C400 269.48 385.62 255.13 368 255.13C350.38 255.13 336 269.51 336 286.23V413.33C336 465.2 370.88 511.45 420.75 525.73L600 575C602.6 575.6 605.4 576 608 576C631.5 576 640 554.75 640 544.9V448.91C640 434.3 631.3 422 618.1 417.6Z" :fill="defaultColor"/&amp;gt;
    &amp;lt;/g&amp;gt;
    &amp;lt;defs&amp;gt;
    &amp;lt;clipPath id="clip0"&amp;gt;
    &amp;lt;rect width="640" height="512" fill="white" transform="translate(0 64)"/&amp;gt;
    &amp;lt;/clipPath&amp;gt;
    &amp;lt;/defs&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/RainSvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" :fill="defaultColor" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;path d="M146.56 295.9C127.79 327.4 96 384.6 96 411.4C96 449.3 124.65 480 160 480C195.35 480 224 449.27 224 411.36C224 384.64 192.21 327.4 173.44 295.96C167.14 285.4 152.86 285.4 146.56 295.9ZM320 219.4C320 192.68 288.21 135.44 269.44 104C263.133 93.43 248.86 93.43 242.55 104C223.8 135.4 192 192.6 192 219.4C192 257.3 220.7 288 256 288C291.3 288 320 257.3 320 219.4ZM430.6 199.5C423.684 189.49 408.33 189.49 401.41 199.5C367.8 248.1 288 369.2 288 422.3C288 489.5 345.3 544 416 544C486.7 544 544 489.5 544 422.3C544 369.2 464.2 248.1 430.6 199.5Z" :fill="defaultColor"/&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/assets/svg/SpaceSvg.vue

&amp;lt;template&amp;gt;
  &amp;lt;svg :width="defaultWidth" :height="defaultHeight" viewBox="0 0 640 640" :fill="defaultColor" xmlns="http://www.w3.org/2000/svg"&amp;gt;
    &amp;lt;g clip-path="url(#clip0)"&amp;gt;
    &amp;lt;path d="M323.7 150L373.36 170.63L393.98 220.3C395.105 222.675 397.478 224.007 399.978 224.007C402.478 224.007 404.854 222.675 405.979 220.3L426.599 170.63L476.219 150C478.594 148.875 479.967 146.499 479.967 143.998C479.967 141.497 478.594 139.124 476.219 137.999L426.6 117.38L405.98 67.75C404.9 65.375 402.5 64 400 64C397.5 64 395.128 65.375 394.003 67.75L373.383 117.38L323.723 138.01C321.348 139.135 320.011 141.509 320.011 144.009C320.011 146.509 321.3 148.88 323.7 150ZM428.2 331.2L323.4 315.92L276.6 220.7C268.225 203.7 243.88 203.57 235.38 220.7L188.5 315.1L83.71 331.2C64.8322 333.1 57.258 357.2 71.007 370.5L146.877 444.5L129.777 549.1C126.652 567.98 146.477 582.15 163.097 573.28L256.887 523.9L350.627 573.28C358.377 577.405 367.757 576.666 374.877 571.541C380.977 566.416 385.497 557.631 383.996 549.131L365.2 444.5L441.12 370.5C454.7 357.3 447.1 333.1 428.2 331.2ZM573 283.3L533.38 266.67L516.76 227.04C515.885 225.165 514.009 224.037 512.009 224.037C510.009 224.037 508.135 225.165 507.26 227.04L490.64 266.67L451 283.3C449.125 284.175 447.998 286.046 447.998 288.046C447.998 290.046 449.125 291.925 451 292.8L490.62 309.43L507.24 349.06C508.115 350.935 509.989 352.055 511.989 352.055C513.989 352.055 515.865 350.935 516.74 349.06L533.36 309.43L572.98 292.8C574.9 291.9 576 290 576 288C576 286 574.9 284.1 573 283.3Z" :fill="defaultColor"/&amp;gt;
    &amp;lt;/g&amp;gt;
    &amp;lt;defs&amp;gt;
    &amp;lt;clipPath id="clip0"&amp;gt;
    &amp;lt;rect width="512" height="512" fill="white" transform="translate(64 64)"/&amp;gt;
    &amp;lt;/clipPath&amp;gt;
    &amp;lt;/defs&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: {
    size: {
      type: String,
      required: false,
    },
    color: {
      type: String,
      required: false,
    }
  },
  computed: {
    defaultWidth() {
      return this.size
    },
    defaultHeight() {
      return this.size
    },
    defaultColor() {
      return this.color
    }
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-24-assets-videos"&gt;
  &lt;/a&gt;
  [ 2.4 ] Assets Videos &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9PWxGRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxte3hnczxvws039jq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9PWxGRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxte3hnczxvws039jq4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://www.videvo.net/"&gt;https://www.videvo.net/&lt;/a&gt; download and import 4 background videos in assets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
|
|-- assets -- videos -- bird.mp4
                    |-- rain.mp4
                    |-- space-galaxy.mp4
                    |-- sunny-beach.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All assets are imported now ! Let's create all components üôÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-31-containerbackgroundvue"&gt;
  &lt;/a&gt;
  [ 3.1 ] ContainerBackground.vue &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Add a new folder "container" in "../src/components" and create a new component "ContainerBackground.vue"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/container/ContainerBackground.vue

&amp;lt;template&amp;gt;
  &amp;lt;div class="video-container"&amp;gt;
    &amp;lt;video
      v-if="vibeSelected === 'space'"
      class="video-wrapper"
      autoplay
      muted
      loop
    &amp;gt;
      &amp;lt;source
        :src="updateBackground"
        type="video/mp4"
        rel='preload'
      /&amp;gt;
    &amp;lt;/video&amp;gt;
    &amp;lt;video
      v-if="vibeSelected === 'beach'"
      class="video-wrapper"
      autoplay
      muted
      loop
    &amp;gt;
      &amp;lt;source
        :src="updateBackground"
        type="video/mp4"
        rel='preload'
      /&amp;gt;
    &amp;lt;/video&amp;gt;
    &amp;lt;video
      v-if="vibeSelected === 'rain'"
      class="video-wrapper"
      autoplay
      muted
      loop
    &amp;gt;
      &amp;lt;source
        :src="updateBackground"
        type="video/mp4"
        rel='preload'
      /&amp;gt;
    &amp;lt;/video&amp;gt;
    &amp;lt;video
      v-if="vibeSelected === 'bird'"
      class="video-wrapper"
      autoplay
      muted
      loop
    &amp;gt;
      &amp;lt;source
        :src="updateBackground"
        type="video/mp4"
        rel='preload'
      /&amp;gt;
    &amp;lt;/video&amp;gt;
  &amp;lt;/div&amp;gt;  
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  computed: {
    updateBackground() {
      if (
          this.vibeSelected === 'space' || 
          this.vibeSelected === null
        ) 
      {
        return require("@/assets/videos/space-galaxy.mp4")
      } else if (this.vibeSelected === 'beach') {
        return require("@/assets/videos/sunny-beach.mp4")
      } else if (this.vibeSelected === 'rain') {
        return require("@/assets/videos/rain.mp4")
      } else {
        return require("@/assets/videos/bird.mp4")
      }
    },
    vibeSelected() {
      return this.$store.getters['vibeSelected'].value
    }
  },
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.video-container {
  position: absolute;
  z-index: -5;
  display: flex;
  width: 100vw;
  height: 100vh;
}

.video-wrapper {
  position: absolute;
  width: 100%;
  height: auto;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: -10;
  overflow: none;
}

@media (min-aspect-ratio: 16/9) {
  .video-wrapper {
    width:100%;
    height: auto;
  }
}

@media (max-aspect-ratio: 16/9) {
  .video-wrapper { 
    width:auto;
    height: 100%;
  }
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component change background video depending of user choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-32-containerpopupvue"&gt;
  &lt;/a&gt;
  [ 3.2 ] ContainerPopUp.vue &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Unlike the 'ContainerBackground.vue' 'ContainerPopUp.vue' is a nested component. It allow us to encapsulate functionality and easily reuse them in multiple places in this application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a_biQo_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll30fotjc1inv9aw25s4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a_biQo_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll30fotjc1inv9aw25s4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ContainerPopUp.vue
   |-- ContainerSelector.vue
                     |-- Selector.vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly, Let's create 'ContainerPopUp.vue'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/container/ContainerPopUp.vue

&amp;lt;template&amp;gt;
  &amp;lt;div v-if="step &amp;lt; 2" class="overlay"&amp;gt;
    &amp;lt;div class="popup"&amp;gt;
      &amp;lt;PraySvg
        size="80"
        color="white"
      /&amp;gt;
      &amp;lt;h1&amp;gt;Welcome to&amp;lt;br&amp;gt; Vibe Meditation App&amp;lt;/h1&amp;gt;
      &amp;lt;ContainerSelector
        :question="questionDisplaying"
      &amp;gt;
        &amp;lt;Selector
          v-if="step === 0"
          :size="'normal'"
          :mode="'timer'"
        /&amp;gt;
        &amp;lt;Selector 
           v-if="step &amp;gt; 0"
          :size="'normal'"
          :mode="'vibe'"
        /&amp;gt;
      &amp;lt;/ContainerSelector&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'

import PraySvg from '@/assets/svg/PraySvg'
import ContainerSelector from '@/components/container/ContainerSelector'
import Selector from '@/components/Selector'

export default {
  components: {
    PraySvg,
    ContainerSelector,
    Selector
  },
  computed: {
    questionDisplaying() {
      if (this.step === 0) {
        return 'How long do you want to meditate ?' 
      } else {
        return 'Where do you want to meditate ?'
      }
    },
    ...mapGetters([
      'timeSelected',
      'vibeSelected',
      'step'
    ])
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.overlay {
  position: absolute;
  width: 100vw;
  height: 100vh;
}

.popup {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: absolute;
  width: 600px;
  height: 600px;
  top: 50%; 
  right: 50%;
  transform: translate(50%,-50%);
  background-color: rgba(5, 5, 5, 0.900);
  border-radius: 15px;
  box-shadow: 1px 1px rgba(255, 255, 255, 0.200);
  color: white;
}

.bouton-primary {
  width: 200px;
  line-height: 30px;
  border-radius: 5px;
  margin: 30px;
  background-color: rgba(193, 99, 89, 0.800);
  border: rgba(193, 99, 89, 0.800);
  color: aliceblue;
}

.bouton-off {
  width: 200px;
  line-height: 30px;
  border-radius: 5px;
  margin: 30px;
  background-color: rgba(35, 35, 35, 0.500);
  border: white;
  color: aliceblue;
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second step is creating 'ContainerSelector.vue'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/container/ContainerSelector.vue

&amp;lt;template&amp;gt;
  &amp;lt;section class="selector-container"&amp;gt;
    &amp;lt;h3&amp;gt;{{ question }}&amp;lt;/h3&amp;gt;
    &amp;lt;div class="selector-wrapper"&amp;gt;
      &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  props: ['question']
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.selector-container {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 500px;
  justify-content: center;
}

h3, .selector-container {
  margin-bottom: 50px;
}

.selector-wrapper {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row; 
  justify-content: space-around;
  width: 100%;
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third step is creating 'Selector.vue'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/Selector.vue

&amp;lt;template&amp;gt;
  &amp;lt;div
    v-for="choice in filteredChoices"
    :key="choice.id"
    @click="selectChoice(choice.id)"
    class="choice-card"
    :class="hideUnselectedImg(choice.id)"
  &amp;gt;
    &amp;lt;img
      :src="choice.imgSrc"
      :alt="choice.name"
    &amp;gt;
    &amp;lt;label 
      :for="choice.name"
      :style="fontSizeDynamic(choice.id)"
    &amp;gt;
      {{ choice.name }}
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'

export default {
  props: ['size', 'mode'],
  methods: {
    hideUnselectedImg(id) {
       if (this.vibeSelected.id === id) {
        return 'img-selected'
       }
       else {
         return 'img-unselected'
       }
    },
    selectChoice(id) {
      let index = this.choices.findIndex(x =&amp;gt; x.id === id);
      if (this.step === 0) {
        let timeSelecting = {
          id: this.choices[index].id,
          value: this.choices[index].value
        }
        this.$store.dispatch('changeTimer', timeSelecting)
        this.$store.dispatch('changeStep')
      } else {
        let vibeSelecting = {
          id: this.choices[index].id,
          value: this.choices[index].value
        }
        this.$store.dispatch('changeVibe', vibeSelecting)
        this.$store.dispatch('changeStep')
        this.$store.dispatch('activeIsPlaying')
      }
    },
    fontSizeDynamic(id) {
       if (this.timeSelected.id === id || this.vibeSelected.id === id) {
        return 'font-weight: bold;'
       }
       else {
         return 'font-weight: normal;'
       }
    },
  },
  computed: {
    filteredChoices() {
      return this.choices.filter(choice =&amp;gt; 
        {
          if 
            ( 
              this.mode === 'timer' &amp;amp;&amp;amp;
              choice.category.includes('timer')
            )
          {
            return true
          }
          if 
            (
              this.mode === 'vibe' &amp;amp;&amp;amp;
              choice.category.includes('vibe')
            ) 
          {
            return true;
          }
        }
      )
    },
    ...mapGetters([
      'timeSelected',
      'vibeSelected',
      'step',
      'choices'
    ])
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.choice-card {
  cursor: pointer;
  display: flex;
  flex-direction: column;
}

.img-selected {
  display: none;
}

img:hover {
  opacity: 1;
}

img {
  opacity: 0.5;
  height: 100px; 
  width: 150;
}

.img-unselected {
 border-style: none;
}

label {
  margin-top: 10px;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect ! With this first nested component, the user can select time of meditation and the virtual area where he wants to meditate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRHkHOf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v83yr7ao7qau537ru76w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRHkHOf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v83yr7ao7qau537ru76w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-33-soundvue"&gt;
  &lt;/a&gt;
  [ 3.3 ] Sound.vue &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Previously, we created files which allow us to change background video. For a better User Experience, we need to implement sound effects !&lt;/p&gt;

&lt;p&gt;Let's create a new simple component 'Sound.vue'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/Sound.vue

&amp;lt;template&amp;gt;
  &amp;lt;audio :src="updateSound" preload="auto" autoplay loop ref="audioPlayer" /&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  computed: {
    updateSound() {
      if (this.vibeSelected === 'space') {
        return require("@/assets/sounds/calmSpace.mp3")
      } else if (this.vibeSelected === 'beach') {
        return require("@/assets/sounds/beach.mp3")
      } else if (this.vibeSelected === 'rain') {
        return require("@/assets/sounds/rain.mp3")
      } else {
        return require("@/assets/sounds/songOfBirds.mp3")
      }
    },
    vibeSelected() {
      return this.$store.getters['vibeSelected'].value
    }
  },
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-34-containertimervue"&gt;
  &lt;/a&gt;
  [ 3.4 ] ContainerTimer.vue &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Background Video, sound effects so what's next ? Timer Animation of course.&lt;/p&gt;

&lt;p&gt;Let's create a new nested component 'ContainerTimer.vue'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ContainerTimer.vue
   |-- TimerHeader.vue
   |-- Timer.vue
   |-- TimerRemaining.vue
   |-- VibeSwitcher.vue

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/container/ContainerTimer.vue

&amp;lt;template&amp;gt;
  &amp;lt;section
    v-if="step === 2"
    class="container"
  &amp;gt;
    &amp;lt;TimerHeader /&amp;gt;
    &amp;lt;Timer
      :timeLeft="timeLeft"
      :timeSelected="timeSelected.value"
    /&amp;gt;
    &amp;lt;TimerRemaining
      :timeLeft="timeLeft"
    /&amp;gt;
    &amp;lt;VibeSwitcher /&amp;gt;
  &amp;lt;/section&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'
import Timer from '@/components/Timer.vue'
import TimerRemaining from '@/components/TimerRemaining'
import TimerHeader from '@/components/TimerHeader'
import VibeSwitcher from '@/components/VibeSwitcher'

export default {
  components: {
    Timer,
    TimerRemaining,
    TimerHeader,
    VibeSwitcher
  },
  data() {
    return {
      timeLimit: 0,
      timePassed: 0,
      timerInterval : 0,
    };
  },
  computed: {
    ...mapGetters([
      'timeSelected',
      'vibeSelected',
      'step',
      'isPlaying'
    ]),
    timeLeft() { 
      if (this.timerInterval === null) {
        return 0
      } else if (this.timePassed === this.timeSelected.value) {
        clearInterval(this.timerInterval)
        this.$store.dispatch('changeVibe', { value: 'bird' })
        this.$store.dispatch('changeStep')
        console.log('step : ', this.step)
        return 0
      } else {
        return this.timeSelected.value - this.timePassed
      }
    },
  },
  watch: {
    isPlaying(isInProgress) {
      if (isInProgress) {
        this.timerInterval = setInterval(() =&amp;gt; (this.timePassed += 1), 1000);
      } else {
        clearInterval(this.timerInterval)
      }
    }
  },
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 80%;
  width: 400px;
  background-color: rgba(5, 5, 5, 0.700);
  border-radius: 15px;
  box-shadow: 1px 1px rgba(255, 255, 255, 0.500);
}

h1, .container {
  color: white;
  font-size: 25px;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/TimerHeader.vue

&amp;lt;template&amp;gt;
  &amp;lt;div 
    v-show="vibeSelected === 'space'"
    class="icon-header"
  &amp;gt;
    &amp;lt;SpaceSvg
      size="40"
      color="white"
    /&amp;gt;
    &amp;lt;h1&amp;gt;Meditation &amp;lt;br&amp;gt; In The Space&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div 
    v-show="vibeSelected === 'beach'"
    class="icon-header"
  &amp;gt;
    &amp;lt;BeachSvg
      size="40"
      color="white"
    /&amp;gt;
    &amp;lt;h1&amp;gt;Meditation &amp;lt;br&amp;gt; In On Beach&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div 
    v-show="vibeSelected === 'rain'"
    class="icon-header"
  &amp;gt;
    &amp;lt;RainSvg
      size="40"
      color="white"
    /&amp;gt;
    &amp;lt;h1&amp;gt;Meditation &amp;lt;br&amp;gt; Under The Rain&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div 
    v-show="vibeSelected === 'alarm'"
    class="icon-header"
  &amp;gt;
    &amp;lt;RainSvg
      size="40"
      color="white"
    /&amp;gt;
    &amp;lt;h1&amp;gt;Meditation &amp;lt;br&amp;gt; Finished&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import SpaceSvg from '@/assets/svg/SpaceSvg'
import BeachSvg from '@/assets/svg/BeachSvg'
import RainSvg from '@/assets/svg/RainSvg'

export default {
  name: 'HeaderTimer',
  components: {
    SpaceSvg,
    BeachSvg,
    RainSvg,
  },
  computed: {
    vibeSelected() {
      return this.$store.getters['vibeSelected'].value
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.icon-header {
  min-height: 40px;
}

h1 {
  margin-bottom: 30px;
  margin-top: 0px;
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/Timer.vue

&amp;lt;template&amp;gt;
  &amp;lt;div class="base-timer"&amp;gt;
    &amp;lt;svg
      class="base-timer__svg"
      viewBox="0 0 100 100"
      xmlns="http://www.w3.org/2000/svg"
    &amp;gt;
      &amp;lt;g class="base-timer__circle"&amp;gt;
        &amp;lt;circle
          class="base-timer__path-elapsed"
          cx="50"
          cy="50"
          r="45"
        /&amp;gt;
        &amp;lt;path
          :stroke-dasharray="circleDasharray"
          :class="remainingPathColor"
          class="base-timer__path-remaining"
          d="
            M 50, 50
            m -45, 0
            a 45,45 0 1,0 90,0
            a 45,45 0 1,0 -90,0
          "&amp;gt;
        &amp;lt;/path&amp;gt;
      &amp;lt;/g&amp;gt;
    &amp;lt;/svg&amp;gt;
    &amp;lt;span class="base-timer__label"&amp;gt;
      &amp;lt;PlaySvg
        @click="togglePlayPause"
        v-show="!isPlaying"
        size="80"
        color="white"
      /&amp;gt;
      &amp;lt;PauseSvg
        @click="togglePlayPause"
        v-show="isPlaying"
        size="80"
        color="white"
      /&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import PlaySvg from '@/assets/svg/PlaySvg'
import PauseSvg from '@/assets/svg/PauseSvg'
import { mapGetters } from 'vuex'

export default {
  components: {
    PlaySvg,
    PauseSvg
  },
  props: {
    timeLeft: {
      type: Number,
      required: true
    },
    timeSelected: {
      type: Number,
      required: true
    },
    alertThreshold: {
      type: Number,
      default: 5
     },
    warningThreshold: {
      type: Number,
      default: 10
    },
  },
  methods: {
    togglePlayPause() {
      this.$store.dispatch('togglePlayPause')
    }
  },
  computed: {
    ...mapGetters([
      'isPlaying',
    ]),
    circleDasharray() {
      return `${(this.timeFraction * 283).toFixed(0)} 283`;
    },
    timeFraction() {
      const rawTimeFraction = this.timeLeft / this.timeSelected
      return rawTimeFraction -
        (1 / this.timeSelected) * (1 - rawTimeFraction)
    },
    formattedTimeLeft() {
      const timeLeft = this.timeLeft
      let minutes = Math.floor(timeLeft / 60)
      const hours = Math.floor(minutes / 60)
      let seconds = timeLeft % 60
      if (seconds &amp;lt; 10) {
        seconds = `0${seconds}`
      }
      if (minutes === 60) {
        minutes = `00`
      }
      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
    },
    colorCodes() {
      return {
        info: {
          color: "green"
        },
        warning: {
          color: "orange",
          threshold: this.warningThreshold
        },
        alert: {
          color: "red",
          threshold: this.alertThreshold
        }
      }
    },
    remainingPathColor() {
       const { alert, warning, info } = this.colorCodes;
       if (this.timeLeft &amp;lt;= alert.threshold) {
         return alert.color;
       } else if (this.timeLeft &amp;lt;= warning.threshold) {
         return warning.color;
       } else {
         return info.color;
       }
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang="scss"&amp;gt;
.base-timer {
  position: relative;
  width: 250px;
  height: 250px;

  &amp;amp;__path-remaining {
    stroke-width: 7px;
    stroke-linecap: round;
    transform: rotate(90deg);
    transform-origin: center;
    transition: 1s linear all;
    fill-rule: nonzero;
    stroke: currentColor;
    &amp;amp;.green {
      color: rgb(65, 184, 131);
    }
    &amp;amp;.orange {
      color: orange;
    }
    &amp;amp;.red {
      color: rgba(193, 99, 89, 1.000);
    }
  }
  &amp;amp;__svg {
    /* Flips the svg and makes the animation to move left-to-right
    transform: scaleX(-1); */
  }
  &amp;amp;__circle {
    fill: rgba(35, 35, 35, 0.500);
    stroke: rgba(35, 35, 35, 0.500);
  }
  &amp;amp;__path-elapsed {
    stroke-width: 7px;
    stroke: none;
  }

    &amp;amp;__label {
    position: absolute;    
    width: 250px;
    height: 250px;
    top: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 48px;
    color: white;
    cursor: pointer;
  }
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/componnents/TimerRemaining.vue

&amp;lt;template&amp;gt;
  &amp;lt;span class="time-remaining"&amp;gt;Remaining Time&amp;lt;/span&amp;gt;
  &amp;lt;span 
    class="timer-flow"
    :style="isPlaying ? 'opacity: 1.0;' : 'opacity: 0.5'"
  &amp;gt;
    {{ formattedTimeLeft }}
  &amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'

export default {
  props: {
    timeLeft: {
      type: Number,
      required: true
    },
  },
  computed: {
    formattedTimeLeft() {
      const timeLeft = this.timeLeft
      let minutes = Math.floor(timeLeft / 60)
      const hours = Math.floor(minutes / 60)
      let seconds = timeLeft % 60
      if (seconds &amp;lt; 10) {
        seconds = `0${seconds}`
      }
      if (minutes === 60) {
        minutes = `00`
      }
      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`
    },
    ...mapGetters([
      'timeSelected',
      'vibeSelected',
      'step',
      'isPlaying'
    ]),
  },
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.time-remaining {
  margin-top: 10px;
  font-weight: bold;
}

.timer-flow {
  font-size: 40px
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/VibeSwitcher.vue

&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Would You Like Mediate Elsewhere ?&amp;lt;/p&amp;gt;
  &amp;lt;div class="switcher"&amp;gt;
    &amp;lt;span @click="selectPreviousVibe"&amp;gt;{{ previousVibe }}&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;  |  &amp;lt;/span&amp;gt;
    &amp;lt;span @click="selectNextVibe"&amp;gt;{{ nextVibe }}&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'

export default {
  methods: {
    selectPreviousVibe() {
      if (this.vibeSelected.value === 'space') {
        this.$store.dispatch('changeVibe', { value: 'rain'})
      } else if (this.vibeSelected.value === 'beach') {
        this.$store.dispatch('changeVibe', { value: 'space'})
      } else {
        this.$store.dispatch('changeVibe', { value: 'beach'})
      }
    },
    selectNextVibe() {
      if (this.vibeSelected.value === 'space') {
        this.$store.dispatch('changeVibe', { value: 'beach'})
      } else if (this.vibeSelected.value === 'beach') {
        this.$store.dispatch('changeVibe', { value: 'rain'})
      } else {
        this.$store.dispatch('changeVibe', { value: 'space'})
      }
    }
  },
  computed: {
    ...mapGetters([
      'vibeSelected'
    ]),
    previousVibe() {
      if (this.vibeSelected.value === 'space') {
        return 'Under The Rain'
      } else if (this.vibeSelected.value === 'beach') {
        return 'In The Space'
      } else {
        return 'On The Beach'
      }
    },
    nextVibe() {
      if (this.vibeSelected.value === 'space') {
        return  'On The Beach'
      } else if (this.vibeSelected.value === 'beach') {
        return 'Under The Rain'
      } else {
        return 'In The Space'
      }
    }
  },
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.switcher {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

span {
  display: flex;
  cursor: pointer;
  font-size: 18px;
  margin: 10px;
}

p {
  font-size: 18px;
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AdhbIRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0krygkezdctdx35ttx5o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AdhbIRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0krygkezdctdx35ttx5o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think ? Nice view right ?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-35-containerlinksvue"&gt;
  &lt;/a&gt;
  [ 3.5 ] ContainerLinks.vue &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When Timer is over, I prepared a last view with my linkedIn, Github and my Portfolio.&lt;/p&gt;

&lt;p&gt;You just need to replace links and Svg in this last component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/components/container/ContainerLinks.vue

&amp;lt;template&amp;gt;
  &amp;lt;div 
    v-if="step === 3"
    class="container-end"
  &amp;gt;
    &amp;lt;PraySvg :size="'60'" :color="'white'"/&amp;gt;
    &amp;lt;h2&amp;gt;Your Meditation Is Over !&amp;lt;/h2&amp;gt;
    &amp;lt;span&amp;gt;Made With Love&amp;lt;br&amp;gt; ‚ù§Ô∏è By Sith Norvang ‚ù§Ô∏è&amp;lt;/span&amp;gt;
    &amp;lt;div class="container-network"&amp;gt;
      &amp;lt;a
        class="icon-network"
        href="https://github.com/slaoprp"
        target="_blank"
      &amp;gt;
        &amp;lt;GithubSvg :size="'80'" :color="'white'" /&amp;gt;
        &amp;lt;span&amp;gt;Github&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;a
        class="icon-network"
        href="https://www.linkedin.com/in/sith-norvang-3a72501a5"
        target="_blank"
      &amp;gt;
        &amp;lt;LinkedInSvg  :size="'80'" :color="'white'"  /&amp;gt;
        &amp;lt;span&amp;gt;LinkedIn&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;a 
        class="icon-network"
        href="https://www.eliyote.com"
        target="_blank"
      &amp;gt;
        &amp;lt;span&amp;gt;Portfolio&amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'
import PraySvg from '@/assets/svg/PraySvg'
import GithubSvg from '@/assets/svg/GithubSvg'
import LinkedInSvg from '@/assets/svg/LinkedInSvg'

export default {
  components: {
    PraySvg,
    GithubSvg, 
    LinkedInSvg
  },
  methods: {
    linkTo() {
      this.$router.push('www.eliyote.com')
    }
  },
  computed: {
    ...mapGetters([
      'step',
    ]),
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.container-end {
  color: white;
  width: auto;
  height: auto;
  padding: 50px;
  background-color: rgba(5, 5, 5, 0.900);
  border-radius: 15px;
  box-shadow: 1px 1px rgba(255, 255, 255, 0.200);
}

.container-network {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin: 20px;
}

.icon-network {
  display: flex;
  flex-direction: column;
  cursor: pointer;
}

a {
  text-decoration: none;
  color: white;
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything is already now ! We need to import all components in App.vue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ../src/App.vue

&amp;lt;template&amp;gt;
  &amp;lt;main class="app"&amp;gt;
    &amp;lt;ContainerPopUp /&amp;gt;
    &amp;lt;ContainerBackground /&amp;gt;
    &amp;lt;Sound /&amp;gt;
    &amp;lt;ContainerTimer /&amp;gt;
    &amp;lt;ContainerLinks /&amp;gt;
  &amp;lt;/main&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import ContainerPopUp from '@/components/container/ContainerPopUp'
import ContainerBackground from '@/components/container/ContainerBackground'
import ContainerTimer from '@/components/container/ContainerTimer'
import ContainerLinks from '@/components/container/ContainerLinks'
import Sound from '@/components/Sound'

export default {
  name: "App",
  components: {
    ContainerPopUp,
    ContainerBackground,
    ContainerTimer,
    ContainerLinks,
    Sound
  },
};
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
}

body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  overflow: hidden;
}

.app {
  height: 100vh;
  width: 100vw;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kb8VKSI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nn86kdb4pban99ujfy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kb8VKSI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nn86kdb4pban99ujfy3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are so many other way to build this meditation application.&lt;/p&gt;

&lt;p&gt;I hope this will help a beginner in Vue. See you in the next post of this series "Portfolio Apps".&lt;/p&gt;

&lt;p&gt;You can try this meditation-app here :&lt;/p&gt;

&lt;p&gt;&lt;a href="http://vibe-meditation.me/"&gt;http://vibe-meditation.me/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>JavaScript Array Methods made easy : array.filter() (Part 1)</title>
      <author>Parnika-Gupta</author>
      <pubDate>Thu, 12 Aug 2021 15:12:33 +0000</pubDate>
      <link>https://dev.to/parnikagupta/javascript-array-methods-you-need-to-know-right-now-array-filter-part-1-21nn</link>
      <guid>https://dev.to/parnikagupta/javascript-array-methods-you-need-to-know-right-now-array-filter-part-1-21nn</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is an Array?&lt;/strong&gt;&lt;br&gt;
An array is a variable that allows us to hold multiple values at a time. In normal situations we use variables to store single values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Butter&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Bread&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But who‚Äôs grocery list is ever that small? And what if it‚Äôs not a grocery list with limited items but a list of transactions made by your bank account and you want to search for one particular transaction among hundreds? It would not be feasible to assign a designated variable for each transaction and then iterate over them when required.&lt;br&gt;
Whether you want to make a grocery list, or need to list down things to do in a day, an array is your answer!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//Creating an Array&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grocery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Butter&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Bread&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//Array of grocery items&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Array Methods&lt;/strong&gt;&lt;br&gt;
JavaScript provides multiple methods that make functioning with arrays easier. Here are a few that you will surely find yourself using quite often.&lt;br&gt;
Here is an example of an Array that we will be using to understand the array methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Butter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Curd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eggs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;br&gt;
The filter() method filters an array based on a test function and returns the resultant array. In simpler terms, it takes in an array, passes the elements of the array through a function, and only returns an array of the elements that return true.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;filter() doesn‚Äôt work for empty array items&lt;/li&gt;
&lt;li&gt;filter() doesn‚Äôt change the initial array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;thisValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters (* represents required parameters)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;function*&lt;/strong&gt;: Callback function, tests each element in an array. Returns true to keep the element and false to skip the element. It further takes 3 arguments:&lt;br&gt;
&lt;strong&gt;currentValue*&lt;/strong&gt;: Value of current element&lt;br&gt;
&lt;strong&gt;index&lt;/strong&gt;: Index of the current element&lt;br&gt;
&lt;strong&gt;arr&lt;/strong&gt;: Array object the current element belongs to&lt;br&gt;
&lt;strong&gt;thisValue&lt;/strong&gt;: Value to be used as ‚Äúthis‚Äù when executing the function. If the parameter is empty, ‚Äúundefined‚Äù is passed as ‚Äúthis‚Äù value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; : &lt;em&gt;filteredItems&lt;/em&gt; Array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;Prototype&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like it worked! All the items that did not have price under 35 are not included in our &lt;em&gt;filteredItems&lt;/em&gt; array.&lt;br&gt;
Now let‚Äôs see if there is any change to our &lt;em&gt;items&lt;/em&gt; array!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; : &lt;em&gt;items&lt;/em&gt; array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Butter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Curd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eggs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;Prototype&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;em&gt;items&lt;/em&gt; array is just as it was in the beginning.&lt;br&gt;
This was about the filter() array method. Here is a little illustration I made to help you understand it better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ebyfEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7acv3lpxzv1damp99lwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ebyfEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7acv3lpxzv1damp99lwq.png" alt="array.filter() illustration" title="array.filter(): illustration by Parnika Gupta"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about filter() method, here are a few references:&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=0qsFDFC2oEE"&gt;https://www.youtube.com/watch?v=0qsFDFC2oEE&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/js-filter-array-method"&gt;https://www.digitalocean.com/community/tutorials/js-filter-array-method&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Github Web editor: Edit any repo with just a press</title>
      <author>projectashik</author>
      <pubDate>Thu, 12 Aug 2021 15:08:47 +0000</pubDate>
      <link>https://dev.to/projectashik/github-web-editor-edit-any-repo-with-just-a-press-5glj</link>
      <guid>https://dev.to/projectashik/github-web-editor-edit-any-repo-with-just-a-press-5glj</guid>
      <description>&lt;p&gt;Do you want to have your mind blown?  ü§Ø&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check this new feature of Github&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Just go to any of the repo you like and just press .. Yeah, you have seen it right. Just press on the period (.) sign on the keyboard and your mind will blow. This will open the code editor in the browser with the files of Github Repo.&lt;/p&gt;

&lt;p&gt;Don't forgot to watch this video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/1940c85408444269bb1a90b84df71ab2"&gt;https://www.loom.com/share/1940c85408444269bb1a90b84df71ab2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>code</category>
      <category>vscode</category>
      <category>git</category>
    </item>
    <item>
      <title>Como ser o programador j√∫nior que toda empresa quer contratar?</title>
      <author>Elio Fernandes</author>
      <pubDate>Thu, 12 Aug 2021 15:05:29 +0000</pubDate>
      <link>https://dev.to/eliofernandes28/como-ser-o-programador-junior-que-toda-empresa-quer-contratar-3nb1</link>
      <guid>https://dev.to/eliofernandes28/como-ser-o-programador-junior-que-toda-empresa-quer-contratar-3nb1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Primeiro Post ‚ö†Ô∏è&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sobre-mim"&gt;
  &lt;/a&gt;
  Sobre mim
&lt;/h3&gt;

&lt;p&gt;Prazer sou Elio Fernandes, sou desenvolvedor Full-Stack e tenho 20 anos, comecei a minha carreira profissional (Estagi√°rio) com 17 anos de idade, como o titulo sugere esse post cont√©m algumas dicas de coisas que aprendi ao longo de 3 anos como Desenvolvedor. Inspirado pelo &lt;em&gt;William Oliveira&lt;/em&gt;, tenho um grande respeito por esse cara, muito top. Raz√£o pela qual decidi partilhar esse post para o pessoal de c√°.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Como conseguir se destacar no mercado logo como iniciante em programa√ß√£o, como ser o programador ou programadora junior que toda empresa quer contratar.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O que mais ouvimos falar √© que o mercado de programa√ß√£o est√° muito aquecido, que existem muitas vagas e que os programadores e programadoras est√£o escolhendo emprego. OK, √© verdade. Mas onde est√£o as vagas para pessoas iniciantes?&lt;/p&gt;

&lt;p&gt;Depois de estudar tanto, praticar e n√£o aguentar mais de ansiedade de saber o quanto ainda precisamos aprender para sermos considerados bons no que fazemos, o maior problema que enfrentamos na √°rea de desenvolvimento de software √© conseguir o primeiro emprego. Depois do primeiro emprego, tudo ficar√° mais f√°cil.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kUSlP-B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzejqd2h8ej68rhbijpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kUSlP-B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzejqd2h8ej68rhbijpk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Por√©m as empresas nos colocam naquele velho paradigma:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Como conseguir o primeiro emprego sem nunca ter trabalhado na √°rea se as empresas buscam pessoas para o primeiro emprego COM experi√™ncia?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isso quando n√£o procuram um estagi√°rio s√™nior. Aquele profissional que √© iniciante, mas domina 15 linguagens de programa√ß√£o, 35 frameworks JavaScript, 212 maneiras de subir uma aplica√ß√£o para produ√ß√£o e ainda faz o caf√© da turma.&lt;/p&gt;

&lt;p&gt;Realmente o mercado nos coloca em uma situa√ß√£o desesperadora quando somos pessoas iniciantes na √°rea. Existem maneiras de n√£o nos perdermos nesse universo de requisitos e entrevistas estranhas: manter nosso foco e aprender a nos valorizarmos como profissionais, n√£o como ‚Äúprofissionais iniciantes‚Äù.&lt;/p&gt;

&lt;p&gt;Para ser uma pessoa em n√≠vel j√∫nior que toda empresa quer contratar vamos precisar arrega√ßar as mangas e sair da nossa zona de conforto, al√©m de conhecer bem o que as empresas querem. Os conselhos que dou neste artigo s√£o para pessoas que querem conseguir o emprego rapidamente e/ou um bom emprego e, para isso, √© necess√°rio nos esfor√ßarmos (√†s vezes um pouco/muito mais dependendo do seu contexto social atual). Nada de bom em nossa carreira vir√° sem esfor√ßo, ent√£o voc√™ vai precisar ler estas dicas e assumir o protagonismo de sua vida, vai ter que tomar as r√©deas do seu futuro profissional.&lt;/p&gt;

&lt;p&gt;Eu come√ßo dando conselhos de vida para voc√™ e depois eu foco na parte t√©cnica. Espero que, depois destas dicas, voc√™ consiga seu sonhado emprego como dev. Saiba que j√° estou torcendo por voc√™.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cuidado-com-o-desespero"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cuidado com o desespero&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;O desespero √© seu inimigo. N√£o importa a situa√ß√£o que nos deparamos, se perdemos a calma podemos cair em uma armadilha terr√≠vel ou fazer coisas que vamos nos arrepender depois.&lt;/p&gt;

&lt;p&gt;N√£o pe√ßa para trabalhar de gra√ßa, cuidado ao pedir uma oportunidade para aprender, onde a empresa vai te colocar na menor posi√ß√£o, com o menor sal√°rio de todos e com as ‚Äútarefas mais f√°ceis‚Äù.&lt;/p&gt;

&lt;p&gt;O que pode acontecer em uma situa√ß√£o dessas √© a empresa se aproveitar da sua situa√ß√£o para ter mais um bra√ßo, mais um recurso, em sua equipe pagando pouco pela produ√ß√£o. N√£o se esque√ßa: a empresa n√£o √© sua amiga. Apesar da boa inten√ß√£o de algumas pessoas que trabalham nela, a empresa precisa do melhor ou maior resultado com baixo custo e √© s√≥. Depois que voc√™ entra em um emprego com um sal√°rio abaixo do mercado ou abaixo dos demais da equipe ser√° muito dif√≠cil conseguir equiparar sua faixa aos demais e da√≠ voc√™ pode cair no fluxo de ter que trocar de emprego para ent√£o ter um sal√°rio decente para o que voc√™ faz.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-a-expor-seus-pontos-fortes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Aprenda a expor seus pontos fortes&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;J√° percebi nas mentorias e em entrevistas com pessoas em n√≠vel iniciante (estagi√°rios(as) e juniores) que o que elas mais fazem √© dizer o que ainda n√£o sabem.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eu sei Python, mais ainda n√£o sei Orienta√ß√£o a Objetos&lt;/li&gt;
&lt;li&gt;J√° fa√ßo aplica√ß√µes com JavaScript, mas ainda n√£o domino PWAs&lt;/li&gt;
&lt;li&gt;Eu uso Elixir, mas apenas com framework Phoenix.&lt;/li&gt;
&lt;li&gt;Eu uso AWS, mas ainda n√£o sei criar um pipeline no Jenkins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Olha, eu fico bem feliz de saber que voc√™ tem no√ß√£o da import√¢ncia da orienta√ß√£o a objetos, de que est√° antenado(a) com o mercado e conhece as PWAs e que j√° deve ter ouvido falar de continuous integration e o uso do Jenkins ou outras ferramentas do tipo, mas o que eu quero ouvir mesmo de voc√™ √© o que voc√™ sabe fazer.&lt;/p&gt;

&lt;p&gt;Se voc√™ sabe Python, o que voc√™ j√° fez com a linguagem? Se voc√™ faz aplica√ß√µes com JavaScript, quais aplica√ß√µes voc√™ fez? Se usa AWS, o que foi que voc√™ usou da plataforma?&lt;/p&gt;

&lt;p&gt;Voc√™ tem muito para falar sobre seu conhecimento, voc√™ s√≥ n√£o se valoriza. Na hora da entrevista a maioria das pessoas em n√≠vel j√∫nior se auto-sabotam. At√© mesmo depois de algum tempo de √°rea n√≥s fazemos isso, mas no in√≠cio de carreira √© extremamente recorrente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voc%C3%AA-precisa-saber-uma-linguagem-de-programa%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Voc√™ precisa saber uma linguagem de programa√ß√£o&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Como existem muitas linguagens, muitas ferramentas e muitas vagas com requisitos absurdos, pessoas iniciantes se perdem em ‚Äúo que eu devo saber?‚Äù.&lt;/p&gt;

&lt;p&gt;Voc√™ deve buscar um foco. Analise o mercado e veja quais s√£o as tecnologias que voc√™ vai precisar estudar e foque nelas. Com certeza voc√™ vai ver uma lista imensa de linguagens e frameworks, mas todas essas coisas s√£o apenas ferramentas para um mesmo objetivo.&lt;/p&gt;

&lt;p&gt;Se voc√™ quer trabalhar com backend, temos Python, PHP, Java, C# e JavaScript como linguagens com muita oportunidade de mercado, mas sabendo bem qualquer uma delas voc√™ consegue aprender outra com menos dificuldades. Se voc√™ quiser aprender todas de uma s√≥ vez, vai cair na armadilha da paralisia por an√°lise e n√£o vai sair do lugar. Voc√™ nunca ter√° um portf√≥lio (comento sobre isso mais para frente) para apresentar em uma entrevista ou no seu curr√≠culo.&lt;/p&gt;

&lt;p&gt;Foque naquilo que mais te interessa: a empresa ou a √°rea de atua√ß√£o onde voc√™ gostaria de trabalhar est√° usando o que?&lt;/p&gt;

&lt;p&gt;Se voc√™ quer trabalhar em uma ag√™ncia que utiliza WordPress e estudar Java, n√£o vai dar muito certo. O mesmo vai acontecer se voc√™ quiser trabalhar em uma startup focada em dados e n√£o estudar Python.&lt;/p&gt;

&lt;p&gt;O que voc√™ precisa √© encontrar uma linguagem ou um nicho (web, mobile, back, front, o que for) e aprender muito sobre aquilo. Ent√£o voc√™ estar√° se preparando bem para a entrevista t√©cnica, onde ser√° cobrado conhecimento neste nicho, n√£o em tudo o que existe na √°rea de computa√ß√£o.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-testes-de-unidade"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Aprenda testes de unidade&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unit tests&lt;/strong&gt;, ou &lt;em&gt;testes de unidade&lt;/em&gt;, n√£o eram t√£o importantes para uma pessoa iniciante a algum tempo atr√°s, mas hoje, como existe muito material dispon√≠vel na internet e como √© muito mais f√°cil fazer isso hoje em dia, isso se tornar√° um diferencial no seu curr√≠culo.&lt;/p&gt;

&lt;p&gt;Se voc√™ n√£o perder tempo com a falta de foco, conseguir√° tempo para aprender testes de unidade e garantir um diferencial valioso de mercado que √© a qualidade de software logo no come√ßo da sua carreira.&lt;/p&gt;

&lt;p&gt;A maioria das empresas que trabalham com produtos grandes (ou mesmo as que est√£o come√ßando) possuem uma massa de testes bem grande para garantir que n√£o ter√£o problemas ao adicionar algo novo ou mesmo deletar uma funcionalidade antiga do sistema. Se voc√™ chegar em uma entrevista demonstrando este conhecimento ir√° detonar!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#versionamento-de-c%C3%B3digo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Versionamento de c√≥digo&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Voc√™ precisa aprender versionamento de c√≥digo e, hoje, principalmente aprender a usar o Git.&lt;/p&gt;

&lt;p&gt;N√£o √© necess√°rio decorar tudo o que o Git nos possibilita fazer, pois temos artigos que listam os comandos mais utilizados e √© s√≥ o que ser√° necess√°rio para o primeiro emprego, mas √© importante que voc√™ saiba versionar c√≥digo e que voc√™ mande o teste pr√°tico com o m√≠nimo de carinho (commits com mensagens bem descritivas, um README decente e um hist√≥rico organizado).&lt;/p&gt;

&lt;p&gt;O Git ainda ser√° necess√°rio para o pr√≥ximo passo das minhas dicas: a cria√ß√£o do portf√≥lio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-um-portf%C3%B3lio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Crie um portf√≥lio&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;√â estranho ouvirmos para criarmos um portf√≥lio sendo que somos uma pessoa em in√≠cio de carreira, n√£o?&lt;/p&gt;

&lt;p&gt;Mas isso √© poss√≠vel!&lt;/p&gt;

&lt;p&gt;Quando estamos aprendendo qualquer coisa na √°rea programa√ß√£o (mesmo quando estamos aprendendo programa√ß√£o de fato), sempre criamos c√≥digos e projetos que poderiam ser expostos em algum lugar. No nosso caso este lugar √© o GitHub ou qualquer plataforma de hospedagem de c√≥digo onde voc√™ possa colocar seus projetos e deix√°-los p√∫blicos.&lt;/p&gt;

&lt;p&gt;E n√£o somente os projetos de tecnologias que estamos estudando, podemos tamb√©m contribuir com open source quando somos iniciantes: contribuindo para projetos open source mesmo sendo iniciante.&lt;/p&gt;

&lt;p&gt;Este portf√≥lio √© extremamente importante, pois mais valer√° ver o que voc√™ j√° fez do que voc√™ somente dizer que fez x ou y. N√£o tem como confiar 100% na palavra de um candidato a uma vaga na empresa, pois as pessoas, infelizmente, podem mentir.&lt;/p&gt;

&lt;p&gt;E assim vai‚Ä¶ Quando voc√™ estiver estudando algo, crie um reposit√≥rio e suba seu c√≥digo para l√°. Se for um projeto de software, app, sistema, etc., melhor ainda.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#participe-de-comunidades-de-programa%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Participe de comunidades de programa√ß√£o&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Comunidades s√£o meios muito √∫teis de garantirmos nosso foco, de encontrarmos as melhores vagas e, o melhor, conseguir apoio para nossa caminhada no universo da programa√ß√£o.&lt;/p&gt;

&lt;p&gt;Nas comunidades temos pessoas que podem te mentorar, podem tirar suas d√∫vidas e ainda podem te indicar nas empresas onde trabalham.&lt;/p&gt;

&lt;p&gt;Mas lembre-se: comunidades s√£o locais onde n√≥s procuramos fazer amizades com as pessoas. Eu conheci pessoas em comunidades a 5 anos atr√°s que hoje s√£o meus melhores amigos. A pior coisa que voc√™ faz √© querer se aproximar de algu√©m com segundas inten√ß√µes. Fa√ßa amigos e se eles gostarem de voc√™ v√£o querer te ter por perto onde trabalham e v√£o te indicar. Se n√£o puderem te ajudar assim, v√£o te ajudar de outra maneira, mas porque s√£o seus amigos e √© isso que fazemos uns pelos outros.&lt;/p&gt;

&lt;p&gt;Visite essas comunidades como:, &lt;a href="https://rocketseat.com.br"&gt;&lt;em&gt;Rocketseat&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://dev.to/"&gt;&lt;em&gt;DevComunity&lt;/em&gt;&lt;/a&gt;, .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fa%C3%A7a-um-bom-curr%C3%ADculo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Fa√ßa um bom curr√≠culo&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Por mais que o velho papel perdeu espa√ßo para os meios digitais, ainda temos empresas e plataformas de vagas que pedem um curr√≠culo formal.&lt;/p&gt;

&lt;p&gt;Voc√™ precisa ter um arquivo preparado para essas horas. Neste documento √© importante listar algumas coisas na sequ√™ncia:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uma breve descri√ß√£o do seu perfil&lt;/li&gt;
&lt;li&gt;suas habilidades t√©cnicas e n√£o t√©cnicas&lt;/li&gt;
&lt;li&gt;links para seu portf√≥lio, LinkedIn e o que mais voc√™ quiser/puder mostrar&lt;/li&gt;
&lt;li&gt;se voc√™ fala outras l√≠nguas, possui cursos na √°rea, se tem gradua√ß√£o, se trabalha de forma volunt√°ria, se j√° fez interc√¢mbio&lt;/li&gt;
&lt;li&gt;liste somente as √∫ltimas tr√™s experi√™ncias e coloque uma boa descri√ß√£o do que voc√™ fazia nesse emprego.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isso, claro, depois de seus dados pessoais, como endere√ßo, um email atualizado e telefones para contato. Por favor, jovem, n√£o v√° perder oportunidades colocando um email que voc√™ nunca abre ou um telefone que est√° sempre fora de √°rea. Se voc√™, assim como eu, mora ou morou em um lugar com o sinal p√©ssimo, deixe o telefone de algu√©m que pode anotar recado para voc√™, como um parente ou mesmo algu√©m da vizinhan√ßa que topa te ajudar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mantenha-seu-linkedin-atualizado"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Mantenha seu LinkedIn atualizado&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Assim como o &lt;strong&gt;curr√≠culo formal&lt;/strong&gt;, mantenha seu LinkedIn muito bem atualizado. Se voc√™ ainda n√£o criou um perfil na plataforma, por favor, corre fazer isso agora!&lt;/p&gt;

&lt;p&gt;Voc√™ precisa aparecer nas pesquisas quando os recrutadores e recrutadoras pesquisarem por profissionais na plataforma. E essa √© uma das plataformas mais utilizadas no mundo para essa pesquisa de perfis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclus√£o&lt;/strong&gt; üöÄ
&lt;/h3&gt;

&lt;p&gt;Vamos recapitular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a empresa n√£o √© sua amiga&lt;/li&gt;
&lt;li&gt;voc√™ precisa se valorizar e cobrar o correto pelo seu trabalho&lt;/li&gt;
&lt;li&gt;voc√™ precisa ter foco&lt;/li&gt;
&lt;li&gt;voc√™ precisa refor√ßar e entender os seus pontos fortes&lt;/li&gt;
&lt;li&gt;pare de se auto-sabotar&lt;/li&gt;
&lt;li&gt;aprenda bem a tecnologia que voc√™ vai utilizar no trabalho&lt;/li&gt;
&lt;li&gt;aprenda testes de unidade&lt;/li&gt;
&lt;li&gt;aprenda algum framework&lt;/li&gt;
&lt;li&gt;aprenda versionamento de c√≥digo&lt;/li&gt;
&lt;li&gt;crie um portf√≥lio&lt;/li&gt;
&lt;li&gt;participe de comunidades de programa√ß√£o&lt;/li&gt;
&lt;li&gt;fa√ßa um bom curr√≠culo e mantenha seu LinkedIn atualizado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perceba que, da parte t√©cnica, temos somente alguns pontos: uma tecnologia (linguagem de programa√ß√£o ou o que for seu nicho), testes de unidade, algum framework, versionamento de c√≥digo. No nosso dia-a-dia tamb√©m √© assim: n√£o passamos todas as horas de trabalho batendo tecla, a maior parte do tempo estamos pensando em como resolver um problema da melhor maneira poss√≠vel.&lt;/p&gt;

&lt;p&gt;Todo esse caminho que voc√™ vai percorrer servir√° para que voc√™ aprenda a resolver problemas, cada vez da melhor maneira e assim se tornar√° um profissional mais valioso para o mercado, mas voc√™ est√° come√ßando agora‚Ä¶ N√£o queira colocar o carro na frente dos bois, procure controlar sua ansiedade e em todo caso conte com as comunidades de programa√ß√£o para te ajudar. &lt;/p&gt;

&lt;p&gt;Partilha o post para os demais devs, com o intuito de ajudar os que pretendem come√ßar uma carreira.&lt;/p&gt;

&lt;p&gt;Estou preparando mais cont√©udos de valor como este, ent√£o siga-me nas redes s√≥cias para n√£o perder nenhuma delas.&lt;/p&gt;

&lt;p&gt;Obrigado. üôè&lt;br&gt;
Vamos ser amigos, criar: &lt;a href="https://linktr.ee/elio.fernandes28"&gt;Redes socias&lt;/a&gt;&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>HarperDB: More Than a Database</title>
      <author>Margo McCabe</author>
      <pubDate>Thu, 12 Aug 2021 15:05:06 +0000</pubDate>
      <link>https://dev.to/margo_hdb/harperdb-more-than-a-database-11o9</link>
      <guid>https://dev.to/margo_hdb/harperdb-more-than-a-database-11o9</guid>
      <description>&lt;p&gt;I recently had a very interesting conversation &lt;a href="https://rss.com/podcasts/harperdb-select-star/242298/"&gt;on our podcast&lt;/a&gt; with Ron Lewis, the Director of Innovation and Engineering at Lumen Technologies. Ron brought up the notion that HarperDB is more than just a database, and for certain users or projects, HarperDB is not serving as a database at all. How can this be possible? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-explained"&gt;
  &lt;/a&gt;
  Database, Explained
&lt;/h3&gt;

&lt;p&gt;Well, what really is a database? &lt;a href="https://en.wikipedia.org/wiki/Database"&gt;Wikipedia&lt;/a&gt; states that, ‚ÄúIn computing, a database is an organized collection of data stored and accessed electronically from a computer system.‚Äù &lt;a href="https://www.guru99.com/introduction-to-database-sql.html"&gt;Another site&lt;/a&gt; simply states that ‚Äú‚Äã‚ÄãA database is a systematic collection of data. They support electronic storage and manipulation of data. Databases make data management easy.‚Äù &lt;/p&gt;

&lt;p&gt;So at its core, yes, &lt;a href="https://harperdb.io/?utm_source=devto"&gt;HarperDB&lt;/a&gt; is certainly a database and can fulfill this functionality (after all, that‚Äôs what the DB stands for). But it can do so much more. For example, there are many cases where organizations keep their existing database system(s) in place, and use HarperDB to extend their current functionality or for a different capability altogether. Especially when it comes to solving complex enterprise data management challenges, the answer rarely (if ever) comes down to this database vs. that database. There‚Äôs much more to it. There are many different moving parts related to capturing the right data, getting data to where it needs to be in a timely manner, analyzing and acting on that data, etc. This is really where HarperDB shines. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#harperdb-a-runway-for-launching-industry-40-technology"&gt;
  &lt;/a&gt;
  HarperDB: A Runway for Launching Industry 4.0 Technology
&lt;/h3&gt;

&lt;p&gt;Ron mentioned in our podcast discussion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúThe reason I see HarperDB as a disruptive technology is because you often call HarperDB a database, but it‚Äôs not really a database. It‚Äôs maybe what some people call a data mesh or data fabric... I see HarperDB more as a data surface, especially with Functions. The whole idea is to be able to converge and contextualize data to support decision making.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The new &lt;a href="https://harperdb.io/docs/custom-functions/"&gt;Custom Functions&lt;/a&gt; Ron refers to will enable users to define their own API endpoints within HarperDB, ultimately expanding HarperDB from a distributed database to a distributed application development platform with integrated persistence. So, now we‚Äôre thinking of HarperDB as a data mesh, fabric, or surface instead of a database. That‚Äôs a lot of buzzwords! Let‚Äôs take a step back. &lt;/p&gt;

&lt;p&gt;When I asked Ron what initially drew him and his team to HarperDB, he provided some great insight. Ron mentioned that they were working on a project for the Department of Defense (DoD) that required moving, contextualizing, and converging of data, and they needed something super fast and intuitive. They were essentially looking for something easy to use and easy to deploy that‚Äôs also flexible and scalable. Once HarperDB and Ron connected, he discovered that HarperDB could be deployed on devices as small as microprocessors like a Raspberry Pi or Tinker Board, all the way up to large scale servers, cloud machines, or supercomputers. This piqued his interest, as he needed the ability to do large scale analytics and move the data between devices in a simple manner. &lt;/p&gt;

&lt;p&gt;At a basic level, we quickly realized that Ron and the HarperDB team were asking the same questions: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we look at how much data has to move, how much is being created on an hourly basis from OT data onsite etc., how do we manage, transport, and take advantage of all of that data? &lt;/li&gt;
&lt;li&gt;How do we get the data to where it needs to be in the most efficient manner possible? &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#extended-functionality"&gt;
  &lt;/a&gt;
  Extended Functionality
&lt;/h3&gt;

&lt;p&gt;Ron said that with HarperDB, he and his team could ‚Äúdefine the data movement and do all these crazy cool things.‚Äù As they were looking at different military adaptations they were able to take data that is running integrated into a controller environment (OT) and expose that data without needing to have a human machine interface (HMI). They could securely move that OT data into the cloud, into a highly scalable enterprise analytics domain powered by HarperDB in the cloud on compute nodes. &lt;/p&gt;

&lt;p&gt;There are many use cases similar to this, where HarperDB can provide a holistic solution that makes data sync and management easy. In the defense space, HarperDB‚Äôs bidirectional data movement enables the collection and movement of data and logic in real time, shifting decision making throughout the network as needed. Gaming and media industries benefit from HarperDB‚Äôs high performance and low latency, with clear implications for both the organization and the end-user. Retail and ticketing can recognize and block bad bots in real time with HarperDB‚Äôs global replication and edge persistence. The list goes on! You can read more about &lt;a href="https://dev.to/harperdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4"&gt;industries that benefit from a high performing, low latency, geo-distributed database here&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-harperdb"&gt;
  &lt;/a&gt;
  Why HarperDB?
&lt;/h3&gt;

&lt;p&gt;Ron explained, ‚ÄúWe started looking at all the different databases that are scalable like Couchbase and a bunch of others, but we ended up focusing on HarperDB because of the flexibility. Then, Stephen came up with the idea of Functions because a lot of what we did required us to put an API proxy in front of the data engine. He said, how about I make your life simpler? It‚Äôs just amazing how HarperDB checks all the boxes.‚Äù &lt;/p&gt;

&lt;p&gt;Ron continued, ‚ÄúIf you think about how databases communicate and the different models, I love the way HarperDB does it through the native integration of all of these components. No matter what it‚Äôs running on or where, HarperDB is disruptive because I‚Äôm able to move the different types of data, and different types of assets like functionality, from place to place seamlessly without having to worry about the interoperability of different data engines, nor do I have to worry about the size and scale. Databases are not typically designed as persistent vs. non-persistent, they tend to be scaled vertically instead of horizontally. HarperDB scales beautifully; a containerized version of HarperDB tied to persistent storage allows me to scale HarperDB to meet my performance goals. The workload it can perform is amazing, and the ability to actually scale horizontally is amazing as well because it‚Äôs not typical for database engines.‚Äù   &lt;/p&gt;

&lt;p&gt;Therefore, HarperDB is a unique solution for complex enterprise data challenges because the database engine is small and flexible enough to run on a microcontroller running on an onboard system, that can also be extended to edge bare metal or some kind of edge compute environment for higher fidelity analysis, and can also be moved to the cloud -- all at the speed of the Internet. HarperDB can scale vertically &lt;em&gt;and&lt;/em&gt; horizontally while meeting performance needs. It really is more than just a database. &lt;/p&gt;

&lt;p&gt;To sum it up, Ron stated: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúFrom a data driven ecosystem, HarperDB is paving the path forward moving from mesh to fabric to actual data surface and providing that contextualization of data right out of the database engine, which will be key to a fundamental shift in application behavior.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#predictions-for-the-future"&gt;
  &lt;/a&gt;
  Predictions for the Future
&lt;/h3&gt;

&lt;p&gt;To wrap up our conversation, I asked Ron about the future of technology. He mentioned a few key things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The move from cloud to edge is almost certain. &lt;/li&gt;
&lt;li&gt;The nature of applications will change to take on a more distributed nature, along the lines of distributed functionality with edge workloads managed and deployed from some type of cloud orchestrator.&lt;/li&gt;
&lt;li&gt;As we look at the nature of apps changing, data will be more contextualized from a database engine or persistence layer perspective rather than an application or business layer, and HarperDB is leading the charge on that. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There you have it folks. The future is all about data. There is a constant need for organizations to have their data where they need it, with the ability to orchestrate data where it‚Äôs both being created and consumed. If you‚Äôre not evaluating your data and how you‚Äôre handling your data assets, where will you be in 1, 5, or 10 years from now? &lt;/p&gt;

</description>
      <category>database</category>
      <category>productivity</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
