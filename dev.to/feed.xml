<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Look At GreenHatFiles Games</title>
      <author>AWs Architektur</author>
      <pubDate>Mon, 23 Aug 2021 18:29:58 +0000</pubDate>
      <link>https://dev.to/awsarchitektur/look-at-greenhatfiles-games-32c2</link>
      <guid>https://dev.to/awsarchitektur/look-at-greenhatfiles-games-32c2</guid>
      <description>&lt;p&gt;Green Hat Files is a fun and exciting game for iPhone, iPod Touch and iPad. This innovative and addictive game is based on the classic game "Hide and Seek". The game has been remade in the form of Green Hat Fortunes and is free to download. The first of the five characters is the most active in the game and therefore you will have to save her from all kinds of danger.&lt;/p&gt;

&lt;p&gt;The exciting part of the game is that you can choose to be either the green character or the cat. The green avatar looks very realistic and is thus very easy to get along with. You will definitely need some time to get to know this interesting character. The other six characters have different characteristics and are therefore not as easy to get along with.&lt;/p&gt;

&lt;p&gt;GreenHatFiles Games Review&lt;/p&gt;

&lt;p&gt;The main story line in the game revolves around the exploration of a strange planet and the search for the green character. The avatar starts at the bottom of the screen and needs to travel up to the top to find the green object. There are several levels to the game. The further you progress, the more difficult the puzzles become.&lt;/p&gt;

&lt;p&gt;The iPhone version of Green Hat Fortunes has the usual obstacle course type layout. You need to use the maps available in the App in order to direct your ways to the goal. You will have a few options available when you select maps. The first choice determines the level design. Next you can choose the difficulty level. The last two choices will set the mood of the game and provide you with the options for the next level.&lt;/p&gt;

&lt;p&gt;If you want to play the puzzle games on the iPad, the iPhone version of Green Hat Files is very enjoyable &lt;a href="https://en.wikipedia.org/wiki/Game"&gt;games&lt;/a&gt;. It has the same graphics and storyline as the iPhone version. However, there is an option provided in the iPhone app that enables you to turn off the motion detection. This was a feature I did not like on the competing iPhone games.&lt;/p&gt;

&lt;p&gt;The game is free, so it doesn't take much of your time. You can also track your progress in the game and the next level automatically. The controls are smooth and responsive, but it can be difficult at times to aim your shots. Fortunately, the various hints and tips are plentiful on the iPad version, so the game will be more fun if you enjoy playing with the motion detector.&lt;/p&gt;

&lt;p&gt;While the iPhone version has the similar obstacle course type layout, the iPad version adds a whole new dimension by allowing you to race against the clock. The game is split into chapters, and you move from one chapter to another by tapping on the map. The landscape changes each time, so you must keep track of the changing landscape in order to be successful. You also get to track your times online. This helps you see how you are improving and what you need to learn.&lt;/p&gt;

&lt;p&gt;The iPhone version of Green Hat Fortunes is the least interactive, but it does have more of the addictive quality that makes the games so popular in the first place &lt;a href="https://greenhatfiles.com/"&gt;greenhatfiles games&lt;/a&gt;. Whether you like simple games or more complex ones, you are sure to find something you enjoy playing with the iPad versions of Green Hat Fortunes. It is a fun time and an excellent way to improve your skills as a real player.&lt;/p&gt;

&lt;p&gt;If you prefer something that you can play with friends while driving to and from work, the iPad version of Green Hat Fortunes gives you that. You can race against the computer or another player, and once you beat the computer you move on to the next level. You even have the option of racing against other people who sign up to the game using your iPad. If you want to try that out, all you have to do is log on and find an open seat on the game and click on the game icon to begin. That is about all there is to it.&lt;/p&gt;

&lt;p&gt;In addition to racing and winning, you can also choose to play other challenges through the iPad version of the game. Some of these include trying to get the lowest total score possible, the longest amount of levels and the quickest time. You can also find two other games that are similar to Green Hat Fortunes in the App Store. The first one is called Treasure Isle and the second is called Blast Island. Both are very popular games and you might find yourself playing them more than you already do.&lt;/p&gt;

&lt;p&gt;Final Words&lt;/p&gt;

&lt;p&gt;For those who prefer to play the games online, they should go to the official website for the game and sign up for a free account. Once you have signed up, you will be able to access all of the features. Once you have logged in and started playing, you can select which type of game you would like to play and then select a screen name and a password to protect your account. Once you have protected your account, you can then log on at any time to play.&lt;/p&gt;

</description>
      <category>greenhatfiles</category>
      <category>greenhatfilesgames</category>
      <category>software</category>
    </item>
    <item>
      <title>Create a coloring book in canvas: Developed an app that you can create and enjoy your own original coloring from an image.</title>
      <author>Yuiko Ito</author>
      <pubDate>Mon, 23 Aug 2021 18:26:30 +0000</pubDate>
      <link>https://dev.to/yuikoito/create-a-coloring-book-in-canvas-developed-an-app-that-you-can-create-and-enjoy-your-own-original-coloring-from-an-image-429o</link>
      <guid>https://dev.to/yuikoito/create-a-coloring-book-in-canvas-developed-an-app-that-you-can-create-and-enjoy-your-own-original-coloring-from-an-image-429o</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;I developed an app that you can create and enjoy your own original coloring book from an image.&lt;/p&gt;

&lt;p&gt;Look this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlRcI8P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwlhx47dxrwv4gi8xanm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlRcI8P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwlhx47dxrwv4gi8xanm.jpg" alt="Angry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also play coloring in this app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gyazo.com/604295b7558d5d63d1031e95465cb29c"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0EHP1rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/604295b7558d5d63d1031e95465cb29c.gif" alt="Image from Gyazo"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The part about turning the image into a coloring book is almost the same as &lt;a href="https://dev.to/yuikoito/using-opencv-developed-a-web-app-to-convert-images-to-manga-style-23p0"&gt;this article&lt;/a&gt; I wrote before.&lt;/p&gt;

&lt;p&gt;So, in this article, I will explain how to develop this coloring functions using canvas.&lt;/p&gt;

&lt;p&gt;DEMO→&lt;a href="https://nurie-maker.com/"&gt;https://nurie-maker.com/&lt;/a&gt;&lt;br&gt;
github→&lt;a href="https://github.com/yuikoito/nurie-creator"&gt;https://github.com/yuikoito/nurie-creator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※I'm using Nuxt.js here. Please replace it as necessary.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#draw-a-background-image-on-the-canvas"&gt;
  &lt;/a&gt;
  Draw a background image on the canvas
&lt;/h2&gt;

&lt;p&gt;First, we need to prepare a canvas element and draw a background image on the canvas.&lt;/p&gt;

&lt;p&gt;It takes a little time to draw the background image on the canvas, and I want to make sure to emit loading during that time.&lt;br&gt;
Therefore, I wait here for the image to be fully loaded in Promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nurie/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_IMAGE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nurie/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpg`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;twitterImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_IMAGE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nurie/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpg`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;noPicture&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/assets/img/noPic.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;naturalWidth&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;naturalWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;scale&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;naturalHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;scale&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noPicture&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can draw an image on canvas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-retina-canvas-support"&gt;
  &lt;/a&gt;
  Use Retina Canvas Support
&lt;/h2&gt;

&lt;p&gt;If you look at the image drawn above, you will see that the resolution is a little rough, so we will fix that part.&lt;/p&gt;

&lt;p&gt;Specifically, when loading an image in canvas, load it at twice the size and set the canvas style to 1/2. The actual canvas drawing size will be the same as above, but the resolution will be finer and the image will be drawn beautifully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;naturalWidth&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;naturalWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;naturalHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implement-a-drawing-function"&gt;
  &lt;/a&gt;
  Implement a drawing function.
&lt;/h2&gt;

&lt;p&gt;When a user clicks on the screen, the event can be detected by &lt;code&gt;mousedown&lt;/code&gt; on a PC, &lt;code&gt;mousemove&lt;/code&gt; for dragging, and &lt;code&gt;mouseup&lt;/code&gt; (or &lt;code&gt;mouseout&lt;/code&gt;) for the timing when the dragging is finished.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mousedown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragStart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mouseup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mouseout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mousemove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;draw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/canvas&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;※The &lt;code&gt;lineWidth&lt;/code&gt; and &lt;code&gt;currentColor&lt;/code&gt; can be changed by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;dragStart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDrag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDrag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineCap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineJoin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentColor&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;dragEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDrag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isErase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-color-of-the-line"&gt;
  &lt;/a&gt;
  Change color of the line
&lt;/h2&gt;

&lt;p&gt;I used &lt;a href="https://www.npmjs.com/package/vue-color"&gt;vue-color&lt;/a&gt; to change color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add vue-color
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;vueColor.js&lt;/code&gt; under plugins.&lt;br&gt;
In this case, we are using a design called &lt;code&gt;Sketch&lt;/code&gt;, so we are only loading Sketch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Sketch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sketch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Sketch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add in nuxt.config.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/plugins/vueColor.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then draw this component in the page.&lt;br&gt;
The drawing is fine as it is, but you will get a warning, so move it inside &lt;code&gt;&amp;lt;client-only&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sketch&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;updateValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Sketch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/client-only&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set a default value for colors.&lt;br&gt;
When a user change color, you will get the color by the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hex&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This library is easy and useful!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-the-canvas"&gt;
  &lt;/a&gt;
  Download the canvas
&lt;/h2&gt;

&lt;p&gt;Then, we will implement a function to download the canvas when the button is clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nurie-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... However, we can't download canvas at this point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-of-todataurl-fails-due-to-cors"&gt;
  &lt;/a&gt;
  Execution of toDataURL fails due to CORS.
&lt;/h2&gt;

&lt;p&gt;In fact, this time, for the background image of canvas, I was referring to the URL stored in s3 from uuid, so the error occurred due to CORS in that part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_IMAGE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nurie/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpg`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the image is loaded as shown above, the domain of the current URL and the domain of the image URL are different, causing the following error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tainted canvases may not be exported
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I used &lt;a href="https://github.com/nuxt-community/proxy-module"&gt;@nuxtjs/proxy&lt;/a&gt; to fix this problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nuxtjs/proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;code&gt;nuxt.config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/proxy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/nurie/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AWS_IMAGE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;changeOrigin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can replace &lt;code&gt;${process.env.AWS_IMAGE_URL}/nurie/${params.id}.jpg&lt;/code&gt; with the URL of your site.&lt;br&gt;
Change the image part to the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/nurie/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpg`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#enable-to-play-coloring-on-the-phone"&gt;
  &lt;/a&gt;
  Enable to play coloring on the phone
&lt;/h2&gt;

&lt;p&gt;As it is, we can't do coloring on the phone, so we will also add events for the phone.&lt;br&gt;
On the phone, you can detect events with &lt;code&gt;touchstart&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, and &lt;code&gt;touchend&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mousedown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragStart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;touchstart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragStart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;touchend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mouseup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mouseout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dragEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mousemove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;draw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;touchmove&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;spDraw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/canvas&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The events that can be detected on a smartphone differ from those on a PC only for the part where the line is drawn, so adjust the following.&lt;br&gt;
The point is that on a PC you can get the location of the touch by &lt;code&gt;e.clientX&lt;/code&gt;, etc., but on a smartphone it is &lt;code&gt;e.changedTouches[0].clientX&lt;/code&gt;. (In the case of a single finger)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;spDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changedTouches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changedTouches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finish!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
I am very happy if you enjoy it!&lt;/p&gt;

&lt;p&gt;🍎🍎🍎🍎🍎🍎&lt;/p&gt;

&lt;p&gt;Please send me a message if you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="mailto:yuiko.dev@gmail.com"&gt;yuiko.dev@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/yui_active"&gt;https://twitter.com/yui_active&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🍎🍎🍎🍎🍎🍎&lt;/p&gt;

</description>
      <category>canvas</category>
      <category>webdev</category>
      <category>nuxt</category>
    </item>
    <item>
      <title>Developers - Free learning resources &amp; get certified</title>
      <author>Aashish Panthi</author>
      <pubDate>Mon, 23 Aug 2021 17:08:59 +0000</pubDate>
      <link>https://dev.to/aashishpanthi/developers-free-learning-resources-get-certified-4kn1</link>
      <guid>https://dev.to/aashishpanthi/developers-free-learning-resources-get-certified-4kn1</guid>
      <description>&lt;p&gt;Many people get stuck while learning &lt;strong&gt;how to code&lt;/strong&gt; cause they don't find good resources. &lt;em&gt;And I was also in the same position few years ago.&lt;/em&gt; So, here are few free resources to learn how to code and some of them even offer free certificate while some charges(for certificate only).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-webdev"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://web.dev/learn/css/"&gt;Web.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Official google developers teach you CSS with great examples. They even do CSS podcasts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-harvardx"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://online-learning.harvard.edu/subject/programming"&gt;HarvardX&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here you find great tutorials from Harvard professors for free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-codecademycom"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.codecademy.com/courses/introduction-to-javascript/"&gt;Codecademy.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Learn javascript from introduction to asynchronous JavaScript for free. You get a integrated code editor while learning and you get some quizes also to test what you've learned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-mit-openlearning-library"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://openlearning.mit.edu/courses-programs/open-learning-library"&gt;MIT Openlearning library&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another top university offering free courses ranging from Mathematics for CS to Machine Learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-freecodecamp"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A great learning resource that is completely free. Get courses from learning responsive web design to data visualization and machine learning. They even have &lt;a href="https://www.youtube.com/c/Freecodecamp/videos"&gt;YouTube channel&lt;/a&gt; with over 4M subscribers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-theodinproject"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.theodinproject.com/"&gt;TheOdinProject&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Their full stack curriculum is free and supported by a passionate open source community. Learn fullstack web development with JavaScript and Ruby on Rails.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-stanford-online"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://web.stanford.edu/class/cs253/"&gt;Stanford online&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another well known top university for Computer Science located near Silicon Valley. Definitely worth a visit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-khanacademy"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://Khanacademy.org"&gt;Khanacademy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Khan Academy is an American non-profit educational organization that provides free courses for learners who wants to learn Computer programming, Science, Maths and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-edxorg"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.edx.org/"&gt;Edx.org&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Yeah, they do provide courses from Harvard, MIT, Stanford but they also provide courses from other great universities. Like this one &lt;a href="https://www.edx.org/course/introduction-to-linux"&gt;Introduction to linux&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-courseraorg"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.coursera.org/collections/popular-free-courses"&gt;Coursera.org&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;They collaborate with 200+ leading universities and companies and provide great contents and programs. You can audit most courses for free but you have to pay for certificate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-end-i-want-to-mention-3-more"&gt;
  &lt;/a&gt;
  At end I want to mention 3 more:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackreactor.com/"&gt;Hackreactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openclassrooms.com/en/courses"&gt;Openclassrooms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hope you liked these resources.&lt;/strong&gt; If you know other resources then &lt;em&gt;let me know about them in comment&lt;/em&gt;. And what will you do with certificate - &lt;em&gt;nothing&lt;/em&gt;. So I recommend getting valuable knowledge.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Guia básico de configuração do Redux com React ⚛️</title>
      <author>Thiago Felipe </author>
      <pubDate>Mon, 23 Aug 2021 17:06:05 +0000</pubDate>
      <link>https://dev.to/tfeliperibeiro/guia-basico-de-configuracao-do-redux-com-react-25f0</link>
      <guid>https://dev.to/tfeliperibeiro/guia-basico-de-configuracao-do-redux-com-react-25f0</guid>
      <description>&lt;p&gt;Este é um guia básico que sigo para configurar o Redux com React, entender o fluxo do Redux para um iniciante como eu é bem desafiador, por este motivo desenvolvi este passo a passo para facilitar este entendimento.&lt;/p&gt;

&lt;p&gt;Se você ainda não conhece sobre o Redux vou deixar aqui o link da &lt;a href="https://redux.js.org/introduction/getting-started"&gt;documentação.&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#criando-nossa-aplica%C3%A7%C3%A3o-react"&gt;
  &lt;/a&gt;
  Criando nossa aplicação React
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Primeiro criaremos nossa aplicação React com o seguinte&lt;br&gt;
comando &lt;code&gt;npx create-react-app my-app-redux&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Agora iremos instalar o redux e o react-redux com o seguinte comando &lt;code&gt;npm install --save redux react-redux&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#criando-estrutura-de-pastas-redux"&gt;
  &lt;/a&gt;
  Criando estrutura de pastas Redux
&lt;/h2&gt;

&lt;p&gt;Cada um pode seguir sua estrutura de pastas, vou utilizar uma organização que gosto na criação de um projeto.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro crie um diretório store e dentro dele um arquivo store.js&lt;/li&gt;
&lt;li&gt;Depois crie um diretório reducers e dentro dele um arquivo combineReducers.js e myFirstReducer.js&lt;/li&gt;
&lt;li&gt;E por último crie um diretório actions e dentro dele um arquivo actions.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lembrando que esta é uma organização que gosto de seguir, porém você está livre para organizar da forma que achar melhor! 😀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#importando-provider-e-a-store"&gt;
  &lt;/a&gt;
  Importando Provider e a Store
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro de tudo no arquivo &lt;code&gt;index.js&lt;/code&gt; do React iremos começar importando o Provider e também o arquivo store que será nosso próximo passo, ficando desta maneira:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../src/store/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#criando-store"&gt;
  &lt;/a&gt;
  Criando Store
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Próximo passo é criarmos a Store que importamos no passo anterior, dentro do diretório store crie um arquivo &lt;code&gt;store.js&lt;/code&gt; , é aqui onde os componentes da nossa aplicação vai acessar nosso estado global, copie o código a seguir:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../reducers/index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__REDUX_DEVTOOLS_EXTENSION__&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__REDUX_DEVTOOLS_EXTENSION__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Esta linha de código &lt;code&gt;window.__REDUX_DEVTOOLS_EXTENSION__ &amp;amp;&amp;amp; window.__REDUX_DEVTOOLS_EXTENSION__()&lt;/code&gt; é a configuração do React Devtools &lt;a href="https://github.com/reduxjs/redux-devtools"&gt;veja mais neste link.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#criando-reducers"&gt;
  &lt;/a&gt;
  Criando Reducers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nesta estapa iremos criar nossos Reducers os Reducers serão nosso estado global da nossa aplicação, neste exemplo iremos criar somente um Reducer para imprimir o nome &lt;code&gt;Redux&lt;/code&gt; na nossa tela, então só iremos ler o nosso estado global, não criaremos actions para modificar este estado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;primeiro iremos criar nosso arquivo &lt;code&gt;myFirstReducer.js&lt;/code&gt;, este arquivo será o nosso estado global onde vai armazenar o nome &lt;code&gt;Redux&lt;/code&gt;, ficando da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFirstReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;INITIAL_STATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;myFirstReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#criando-o-combine-reducers"&gt;
  &lt;/a&gt;
  Criando o Combine Reducers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Nesta etapa criaremos o combine Reducers, combineReducers é uma função do redux que retorna um objeto com todos os nossos reducers,
nessa hora você está se perguntando: &lt;strong&gt;mais espera!!! a gente tem somente 1 reducer, pra que fazer está combinação de reducers?&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mesmo tendo somente 1 Reducer temos que pensar na escalabilidade da nossa aplicação, por este motivo já estamos criando esta combinação de Reducers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dentro do diretório reducers crie um arquivo chamado &lt;code&gt;index.js&lt;/code&gt; e adicione o seguinte código:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;myFirstReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myFirstReducer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;redux&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myFirstReducer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#lendo-nosso-estado-global"&gt;
  &lt;/a&gt;
  Lendo nosso estado Global
&lt;/h2&gt;

&lt;p&gt;Agora é a hora de lermos nosso estado global e mostrar a palavra &lt;code&gt;Redux&lt;/code&gt; na tela.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dentro do aquivo &lt;code&gt;App.js&lt;/code&gt; do React usaremos uma função para acessar nosso estado global esta função é o &lt;code&gt;mapStateToProps&lt;/code&gt; ou poderia ser qualquer outro nome, copie o código a seguir e cole no arquivo &lt;code&gt;App.js&lt;/code&gt; :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;chave&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;chave&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;chave&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;No &lt;code&gt;App.js&lt;/code&gt; importamos o &lt;code&gt;connect&lt;/code&gt; do react-redux, ele que vai fazer está conexão entre o react e o redux ligando assim todo esse quebra-cabeça do redux, a função &lt;code&gt;mapStateToProps&lt;/code&gt; vai receber nosso estado global no parâmetro &lt;code&gt;state&lt;/code&gt;, esta função retorna um objeto com chave e valor, nossa chave será &lt;code&gt;chave:&lt;/code&gt; ou poderia ser qualquer outro nome, e o nosso valor será o que a gente quer acessar no nosso estado, por exemplo o name utilizando &lt;code&gt;state.redux.name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pronto-acabamos-de-utilizar-nosso-primeiro-redux-juntos-rocket"&gt;
  &lt;/a&gt;
  Pronto acabamos de utilizar nosso primeiro Redux juntos 🚀
&lt;/h2&gt;

</description>
    </item>
    <item>
      <title>5 ms Global Redis Latency with Edge Caching</title>
      <author>Enes Akar</author>
      <pubDate>Mon, 23 Aug 2021 16:54:33 +0000</pubDate>
      <link>https://dev.to/enesakar/5-ms-global-redis-latency-with-edge-caching-3d17</link>
      <guid>https://dev.to/enesakar/5-ms-global-redis-latency-with-edge-caching-3d17</guid>
      <description>&lt;p&gt;1 ms latency is easy with Redis when the database and clients are in the same region. But if you want the clients to be globally distributed then the latency rises over 100 ms. We built Edge Caching to overcome this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edge-caching"&gt;
  &lt;/a&gt;
  Edge Caching
&lt;/h2&gt;

&lt;p&gt;With edge caching, REST responses are cached at edge locations all over the world, just like the CDN. We see 5ms global latency at average when edge caching is enabled. See &lt;a href="https://edge-benchmark.vercel.app/"&gt;our benchmark application&lt;/a&gt; where we record latency numbers from the clients located in 10 different regions. We compare the latency between the requests that are made to edge url and plain REST url. As the distance between the server and the client increases, the impact of edge caching increases. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://edge-benchmark.vercel.app/"&gt;Click here&lt;/a&gt; to run the test yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mTzOtFw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3d3nul1mvzhbcxdi7zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mTzOtFw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3d3nul1mvzhbcxdi7zx.png" alt="Edge caching Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#webmobile-backendless-clients"&gt;
  &lt;/a&gt;
  Web/mobile (backendless) clients
&lt;/h3&gt;

&lt;p&gt;Upstash provides read only authentication tokens to enable users to access the database without any backend. You can directly access the Redis from the web or mobile application. In this architecture, clients can be anywhere. It makes a lot of sense to cache the data in locations closest to your users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multi-region-serverless-architectures"&gt;
  &lt;/a&gt;
  Multi region serverless architectures
&lt;/h3&gt;

&lt;p&gt;You can run your AWS Lambda function in multiple regions to lower global latency. Vercel/Netlify functions run in different regions in some configurations. Serverless Redis with edge caching will give you fast data wherever your serverless functions are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#edge-functions"&gt;
  &lt;/a&gt;
  Edge functions
&lt;/h3&gt;

&lt;p&gt;Edge computing (Cloudflare workers etc) is becoming a popular way of building globally fast applications. The challenge with edge functions is that you do not have many options to keep your data. Redis with edge caching is a great fit for edge functions with its low latency and lightweightness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h2&gt;

&lt;p&gt;You can enable edge caching, in the Upstash console. Beware that edge caching has &lt;a href="https://docs.upstash.com/account/pricing#edge-caching"&gt;an extra cost.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once edge caching is enabled, you can find the Edge URL in the REST API dialog. Edge caching is available only for GET calls. For updates (POST), you can still use the plain REST API.&lt;/p&gt;

&lt;p&gt;By default, the cached responses expire in 30 seconds. You can control this with the &lt;code&gt;Cache-Control: max-age=&amp;lt;seconds&amp;gt;&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://us1-smart-bunny-32732.edge-c.upstash.io/get/foo &lt;span class="se"&gt;\&lt;/span&gt;

&lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: Bearer 2dfgf98elrg0w009c842z2adfdde9132"&lt;/span&gt;

&lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Cache-Control: max-age=50"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first request to the above URL will fetch the response from the origin. The next requests will be fetched from edge locations. The cached responses will expire after 50 seconds at each edge location.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edge-caching-vs-global-database"&gt;
  &lt;/a&gt;
  Edge Caching vs Global Database
&lt;/h2&gt;

&lt;p&gt;Building a global database by replicating Redis to multiple regions is in our roadmap. Global databases will give you better consistency guarantees and write latency by replicating the writes too. But it can be very costly to replicate the database to all regions. Still you may need caching to minimize latency in all locations. So Edge caching and Global replication are solutions that complete each other rather than compete. If your use case tolerates eventually consistent reads, edge caching is already a great solution which provides global fast data.&lt;/p&gt;

&lt;p&gt;Looking forward to hearing from you about our efforts on serverless and edge data. Talk to us on &lt;a href="https://twitter.com/upstash"&gt;twitter&lt;/a&gt; and &lt;a href="https://discord.com/invite/w9SenAtbme"&gt;discord&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>redis</category>
      <category>edge</category>
      <category>aws</category>
    </item>
    <item>
      <title>🦋Pacman Reading Progressbar</title>
      <author>Luciano Jung</author>
      <pubDate>Mon, 23 Aug 2021 16:41:05 +0000</pubDate>
      <link>https://dev.to/lucianojung/pacman-reading-progressbar-354m</link>
      <guid>https://dev.to/lucianojung/pacman-reading-progressbar-354m</guid>
      <description>&lt;p&gt;Hi there dev community,&lt;/p&gt;

&lt;p&gt;I've recently been thinking about creating a Pacman-style reading progress indicator with Flutter.&lt;br&gt;
I'll be happy to provide the code in the coming days upon request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqz5MRys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxqx0cd25lm99qn391y1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqz5MRys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxqx0cd25lm99qn391y1.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/lucianojung"&gt;Buy me a Sunny Day&lt;/a&gt; if you want to support this kind of content.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>flutter</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>Understanding User Management and Authentication in LitmusChaos</title>
      <author>Saranya Jena</author>
      <pubDate>Mon, 23 Aug 2021 16:05:04 +0000</pubDate>
      <link>https://dev.to/litmus-chaos/understanding-user-management-and-authentication-in-litmuschaos-575o</link>
      <guid>https://dev.to/litmus-chaos/understanding-user-management-and-authentication-in-litmuschaos-575o</guid>
      <description>&lt;p&gt;In this post, I will be explaining how user management and authentication are done in &lt;a href="https://litmusdocs-beta.netlify.app/docs/introduction/what-is-litmus"&gt;LitmusChaos&lt;/a&gt;. LitmusChaos is a Cross-Cloud Chaos Orchestration framework for practicing chaos engineering in cloud-native environments.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#litmuschaos-20-is-out-now"&gt;
  &lt;/a&gt;
  LitmusChaos 2.0 is out now!🚀
&lt;/h2&gt;

&lt;p&gt;LitmusChaos 2.0 provides a new way of chaos engineering performed by the users. Litmus itself is composed of microservices. And we made sure that adding the features for 2.0 seamlessly integrates the additional microservices in conjunction with the existing one. Litmus 2.0 is completely backward compatible. No features are deprecated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All features of Litmus 1.x&lt;/li&gt;
&lt;li&gt;Addition of Chaos Workflow creation&lt;/li&gt;
&lt;li&gt;User Management &amp;amp; Teaming&lt;/li&gt;
&lt;li&gt;Introduction of ChaosCenter (The central chaos management center)&lt;/li&gt;
&lt;li&gt;Monitoring and Observability&lt;/li&gt;
&lt;li&gt;Resilience Score Calculation&lt;/li&gt;
&lt;li&gt;Manage Workflows using GitOps, Custom Image Registry&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-roles-and-accessibility"&gt;
  &lt;/a&gt;
  User Roles and Accessibility
&lt;/h2&gt;

&lt;p&gt;First of all let me explain the different user level roles and their privileges. LitmusChaos also has project-level roles which come under the &lt;a href="https://dev.to/litmus-chaos/introducing-teaming-in-litmuschaos-to-ease-your-chaos-engineering-experience-5alo"&gt;teaming section&lt;/a&gt;. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Admin:&lt;/strong&gt; The admin user is created by default on the initial portal &lt;a href="https://litmusdocs-beta.netlify.app/docs/getting-started/installation"&gt;setup&lt;/a&gt; and can log into the portal using the credentials &lt;code&gt;admin/litmus&lt;/code&gt; once the server pods are up and running. The admin can access every feature with exclusive access to the &lt;code&gt;User-management&lt;/code&gt; feature for user creation and management. Admin users can also view the overall usage statistics of the portal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Non-Admins:&lt;/strong&gt; The non-admin users, created by the admin, have access to all the features except &lt;code&gt;User-management&lt;/code&gt; and &lt;code&gt;Usage statistics&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usermanagement"&gt;
  &lt;/a&gt;
  User-management
&lt;/h3&gt;

&lt;p&gt;Admin can access the following features through the &lt;code&gt;User management&lt;/code&gt; section:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create a User:&lt;/strong&gt; Admin can create a user by assigning a unique username and password and other optional details like name email-id.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;View Users list:&lt;/strong&gt; Once the user is created, it will be listed in the table along with other details such as current status(active or deactivated), name, username, email-id, date, and time of the user creation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Activate/Deactivate users:&lt;/strong&gt; Admin can toggle the current status of the user. Once a particular user is deactivated he/she won't be able to access any APIs of the LitmusChaos but all the previous data will be stored, which can be accessed back once the user gets reactivated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Edit profile:&lt;/strong&gt; Here, Admin can reset the password of other users.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#authentication-and-getting-started"&gt;
  &lt;/a&gt;
  Authentication and Getting Started
&lt;/h3&gt;

&lt;p&gt;Once a user is created, the user will be able to login into the portal with non-admin privileges. In case a user forgets the credentials, he/she can contact the portal admin to reset the credentials.&lt;br&gt;
On successful authentication, the user will be redirected to &lt;code&gt;/getStarted&lt;/code&gt; route. For the initial login, users will be asked to change the password and use the updated password for subsequent logins. One can also skip the option to change the password. Users can update their password anytime through the &lt;code&gt;My Account&lt;/code&gt; section. In either case, a default project will be created for you under which you can do your chaos testing!&lt;/p&gt;

&lt;p&gt;Here's a short GIF explaining all the basic features of User-management:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6DelQltq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cszirn87nigozzlfdscm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6DelQltq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cszirn87nigozzlfdscm.gif" alt="ezgif.com-gif-maker (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-noteworthy-points"&gt;
  &lt;/a&gt;
  Some noteworthy points
&lt;/h2&gt;

&lt;p&gt;I have noticed, people are often confused between the types of roles. There are two layers of privilege levels:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oksuF1A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xr93kg5v1qh3obznur1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oksuF1A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xr93kg5v1qh3obznur1l.png" alt="UserPriviledges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Portal Level:&lt;/strong&gt; This is the first layer of privilege levels where user roles are assigned during user creation. As of now, one who installs the LitmusChaos and logs in with &lt;code&gt;admin/litmus&lt;/code&gt; credentials is assigned the role &lt;code&gt;admin&lt;/code&gt;, and all other users created by admin are assigned the role &lt;code&gt;user&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Project Level:&lt;/strong&gt; This is the second layer of the privilege level, where roles are assigned to the project members while sending an invitation. If you want to know more about Projects and Teaming, you can find it &lt;a href="https://dev.toteaming%20blog%20link"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all, folks. Thank you for reading it till the end. I hope you had a productive time learning about LitmusChaos, and we hope you are as excited as we are about the upcoming features/additions! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you an SRE or a Kubernetes enthusiast? Does Chaos Engineering excite you?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Join Our Community On Slack For Detailed Discussion, Feedback &amp;amp; Regular Updates On Chaos Engineering For Kubernetes: &lt;a href="https://slack.litmuschaos.io"&gt;https://slack.litmuschaos.io&lt;/a&gt; (#litmus channel on the Kubernetes workspace)&lt;/p&gt;

&lt;p&gt;Check out the Litmus Chaos GitHub repo and do share your feedback: &lt;a href="https://github.com/litmuschaos/litmus/issues"&gt;https://github.com/litmuschaos/litmus/issues&lt;/a&gt;&lt;br&gt;
Submit a pull request if you identify any necessary changes.&lt;br&gt;
Show your ❤️ with a ⭐ on our Github. To learn more about Litmus, check out the Litmus &lt;a href="https://litmusdocs-beta.netlify.app/docs/introduction/what-is-litmus"&gt;documentation&lt;/a&gt;. Cheers✌🏼&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>sre</category>
      <category>litmuschaos</category>
      <category>chaosengineering</category>
    </item>
    <item>
      <title>Securing Serverless Applications with Critical Logging</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Mon, 23 Aug 2021 16:02:55 +0000</pubDate>
      <link>https://dev.to/dashbird/securing-serverless-applications-with-critical-logging-5a6l</link>
      <guid>https://dev.to/dashbird/securing-serverless-applications-with-critical-logging-5a6l</guid>
      <description>&lt;p&gt;We've seen time and again how serverless architecture can benefit your application; graceful scaling, cost efficiency, and a fast production time are just some of the things you think of when talking about serverless. But what about serverless security? What do I need to do to ensure my application is not prone to attacks?&lt;/p&gt;

&lt;p&gt;One of the many companies that do serverless security, Protego, came up with an analogy I really like.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It's a bit like riding in an Uber vs. taking your own car. Sure, the drivers are probably more professional and perhaps better trained. And the flexibility of paying for a car only when you need it is great. At the same time, you don't get to choose which safety features the car has or how many airbags you'll have around you."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From a developer perspective serverless architecture, switching to serverless is a great move as it allows them to focus on the product itself. At the same time, the platform on which the code executes is run by the province provider. What this means for security is that the patches themselves are being applied on time every time, which is one of the biggest "challenges" for traditional servers. Basically, the people responsible for the security updates either forget or just ignore said updates, leaving you and your data at great risk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-not-all-fun-and-games"&gt;
  &lt;/a&gt;
  It's not all fun and games!
&lt;/h2&gt;

&lt;p&gt;While the architecture has some clear advantages over its traditional counterpart, serverless has some security disadvantages. I'll quickly go over a few, but you can read &lt;a href="https://dashbird.io/blog/well-architected-framework-security/"&gt;our Serverless Security article&lt;/a&gt; based on AWS Well-Architected Framework if you want to go into details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Event injection &lt;/strong&gt;--- Solved with input validation and predefined database layer logic, such as an ORM or stored procedures.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Broken authentication&lt;/strong&gt; --- Solved with built-in authentication/authorization solutions and avoiding dangerous deployment settings.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Insecure deployment settings &lt;/strong&gt;--- Solved with never using public read ACLs and keeping files encrypted.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Misuse of permissions and roles&lt;/strong&gt; --- Solved with the "least privilege principle."&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Insecure storing of app secrets&lt;/strong&gt; --- Solved by using AWS KMS to encrypt your application secrets.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;DoS attacks and financial exhaustion&lt;/strong&gt; --- Solved with writing efficient code, using timeouts, and throttling.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Improper exception handling&lt;/strong&gt; --- Solved by logging stack traces only to the console or dedicated log files. Never send stack traces back to the end-user.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Insufficient logging&lt;/strong&gt; --- Solved with 3rd party tools such as Dashbird or becoming well versed in using CloudWatch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Especially the last point, insufficient logging can lead to huge issues later. How do you know everything is going well if you can't see what's going on?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-logging-helps-secure-your-serverless-application"&gt;
  &lt;/a&gt;
  How Logging Helps Secure Your Serverless Application?
&lt;/h2&gt;

&lt;p&gt;Having critical logs will help us, for example, understand which serverless security flaws attackers explored and how to fix them, or build a block list of IP addresses, or identify compromised customer accounts. Even though we can help ourselves without logs in some cases, they'll buy us precious time and provide valuable insights that may save our business a lot of money -- and, most importantly, our hard-earned reputation!&lt;/p&gt;

&lt;p&gt;Remember: we are always at a disadvantage against an attacker. They planned everything and have been studying our app for some time. We receive no warning and know nothing about who we're fighting against. Every bit of information helps us level the playing field.&lt;/p&gt;

&lt;p&gt;Below are some examples of information we could classify as critical for logging in to a serverless app. It's not an exhaustive list but will give us a good head start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invocationevent-inputs"&gt;
  &lt;/a&gt;
  Invocation/Event Inputs
&lt;/h3&gt;

&lt;p&gt;When analyzing or acting on a possible security breach, it's helpful to retrace the attacker's steps. Since the very start, we've got to log the inputs received by every function. You will lean towards logging only inputs from external sources, but logging every function invocation event would be beneficial.&lt;/p&gt;

&lt;p&gt;Say you receive a request from an external source, which triggers a chain of processing steps involving multiple internal functions (not publicly facing). Even though you may have input validations on the publicly exposed function, parts of the input will probably make their way to the internal functions. The input could trigger unexpected behavior or unwanted side effects. In this case, it would be interesting to know what exactly reached the internal functions and what the results were in order to act accordingly in securing your app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#response-payload"&gt;
  &lt;/a&gt;
  Response Payload
&lt;/h3&gt;

&lt;p&gt;Similar to invocation inputs, logging response payloads is also helpful to analyze and mitigate security breaches. In the worst-case scenario of not stopping an attack, we will at least want to know what information is now in possession of the attackers. &lt;/p&gt;

&lt;p&gt;A positive side effect of having response payloads inside logs is identifying possible bugs or unexpected behavior in our application by comparing expected and actual responses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-levels"&gt;
  &lt;/a&gt;
  Performance Levels
&lt;/h3&gt;

&lt;p&gt;If our app starts suffering from bad performance in traditional server infrastructure, users might get mad, but we won't be surprised by scary bills. Costs are usually variable in a serverless stack: the more we use, the more we pay.&lt;/p&gt;

&lt;p&gt;If we plan that a function would run on average for three seconds and start taking thirty seconds, we need to act quickly not to burn our precious resources for nothing.&lt;/p&gt;

&lt;p&gt;Knowing in which cases our app performs badly will help us improve our code and avoid financial headaches. What exactly you should be logging for this purpose will depend heavily on the use case and context, but in any case, it's vital to have this in mind when planning the application critical logs.&lt;/p&gt;

&lt;p&gt;Services like &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; not only make logging and debugging a breeze but also monitors your functions' performance. Having every bit of information in one place will certainly save you time and money. A service like that can easily pay for itself; it's really worth checking it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0oBKYrKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2019/04/invocation-logs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0oBKYrKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2019/04/invocation-logs.png" alt="invocation logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-requests"&gt;
  &lt;/a&gt;
  Authentication Requests
&lt;/h3&gt;

&lt;p&gt;If our app has a protected area, it's critical to log authentication requests, especially the failed ones. Make sure you also log everything you possibly can from the request, such as the IP address.&lt;/p&gt;

&lt;p&gt;Look for odd requests or patterns. For example, you might see a spike in failed requests and find out that many of the usernames or email addresses aren't even in your customer base. That could be someone scanning a list of leaked credentials to check potentially vulnerable accounts in your app. Since it's fairly common for people to reuse passwords, they will likely find honey in our beehive. Take care of your bees; you've grown them with hard work. &lt;/p&gt;

&lt;p&gt;Authentication logging can alert that someone is scouting our app for weak spots. It will allow us to take proactive measures to prevent unauthorized account access. Sources like &lt;a href="https://dashbird.io/blog/securing-serverless-with-critical-logs/"&gt;Have I Been Pwned&lt;/a&gt; could be very helpful. In our example, knowing the usernames/emails in the attacker's possession would help identify which leaked credentials list(s) they're scanning. We can then search which of our customers had credentials exposed and preventively block their accounts, asking for a password reset.&lt;/p&gt;

&lt;p&gt;Despite the little hassle, our customers will love to receive a preventive serverless security alert. Much better than &lt;em&gt;"We're sorry, but your account has -- already -- been violated, and we couldn't do a thing to prevent it"!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/docs/"&gt;Dashbird&lt;/a&gt; provides you with the number of occurrences of a given error over time. And it can alert by email and/or Slack. Imagine receiving a proactive alert: "34,985 authentication errors". It can't smell good and deserves attention, right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-usage-indicators"&gt;
  &lt;/a&gt;
  Service Usage Indicators
&lt;/h3&gt;

&lt;p&gt;In the scenario of a paid service, possibly exposed through an API, it's good to log service usage indicators.&lt;/p&gt;

&lt;p&gt;Consider we carefully planned our costs and pricing structures so that our business has a fair chance of financial success. Customers start doing the so much expected, magical thing: entering credit cards and using our app! Cheers! Sometime later, we get an invoice from our cloud provider, and the number isn't what we expected.&lt;/p&gt;

&lt;p&gt;How could we spend so much if we had half of it in revenue during the same period? Did we make a mistake dimensioning our costs and pricing? Maybe someone found a way to bypass our access authorization logic and is free-riding on our backs? What happened exactly?&lt;/p&gt;

&lt;p&gt;In a scenario like that, it would be terrific to have detailed logs so that we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Narrow down to which services contributed most to our losses;&lt;/li&gt;
&lt;li&gt;  Who was actually using these services, and when?&lt;/li&gt;
&lt;li&gt;  Were these users actually supposed to be using those services?&lt;/li&gt;
&lt;li&gt;  Was anyone abusing the service in a way we didn't expect?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-4-ws"&gt;
  &lt;/a&gt;
  The 4 W's
&lt;/h3&gt;

&lt;p&gt;Based on &lt;a href="https://www.owasp.org/index.php/Logging_Cheat_Sheet"&gt;the OWASP Logging Cheat Sheet recommendations&lt;/a&gt;, we should be logging: When, Where, Who, and What in every function invocation. That applies to all items we discussed above and any other logging scenario in our serverless app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; gives you the observability you lack in your serverless environment while providing monitoring and alerting to help you get the most of your new serverless application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4smr9sK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2019/02/Screenshot-2021-08-20-at-17.39.19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4smr9sK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2019/02/Screenshot-2021-08-20-at-17.39.19.png" alt="Dashbird main dashboard new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#careful-what-you-should-not-be-logging"&gt;
  &lt;/a&gt;
  Careful: What You Should NOT be Logging
&lt;/h2&gt;

&lt;p&gt;We discussed only what we should include in our logs, but we also need to consider what should be excluded.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Hey, hey, not so fast logging the entire user object, buddy!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;User-related information, in many cases, will contain personal or sensitive data that should never go into our logs. Make sure you filter this data out; otherwise, we might have problems with the European data privacy lords or worse! Wait, are there worse? Well, you get the point.&lt;/p&gt;

&lt;p&gt;This article was inspired by &lt;a href="https://www.sans.edu/cyber-research/security-laboratory/article/6toplogs"&gt;The 6 Categories of Critical Log Information&lt;/a&gt;; you might want to check it out as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/log-based-monitoring-for-aws-lambda/"&gt;Log-based monitoring for AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/lambda-metrics-monitoring-what-matters/"&gt;AWS Lambda metrics that you should be monitoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/getting-started-with-dashbird/"&gt;How Dashbird works&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>What makes a package useless, or "When should I reinvent the wheel"?</title>
      <author>lionel-rowe</author>
      <pubDate>Mon, 23 Aug 2021 15:57:43 +0000</pubDate>
      <link>https://dev.to/lionelrowe/what-makes-a-package-useless-or-when-should-i-reinvent-the-wheel-4j5n</link>
      <guid>https://dev.to/lionelrowe/what-makes-a-package-useless-or-when-should-i-reinvent-the-wheel-4j5n</guid>
      <description>&lt;p&gt;This is a response to a couple of comments in the discussion below this article:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jyotishman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aHy7yeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oKf5-ihw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184148/99527a9f-2324-4916-8438-450ce2210cbb.jpeg" alt="jyotishman"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jyotishman/10-useless-npm-package-with-millions-of-downloads-de9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 useless NPM Package with millions of downloads &lt;/h2&gt;
      &lt;h3&gt;Jyotishman Saikia ・ Aug 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#npm&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/ansile"&gt;@ansile&lt;/a&gt;
 wrote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;array-includes is a polyfill, first published 7 years ago.&lt;br&gt;
array-flatten is kinda the same. It's not a polyfill, in a technical sense, but Array.prototype.flat is a new feature and the package pre-dates it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Arguably, that makes &lt;code&gt;array-flatten&lt;/code&gt; "useless" for new projects, because it's better to polyfill a standard API, as you can remove the dependency later on if you stop supporting legacy browsers. You can't do this if you're using a non-standard API.&lt;/p&gt;

&lt;p&gt;Of course, that doesn't mean the package was useless when it was written, nor even that older projects should instantly switch to the standard API. Any such change requires some amount of additional work, so there's a trade-off between rework and technical debt.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ismobilejs is a device os/type/etc detector. Some apps definitely need that.&lt;/p&gt;

&lt;p&gt;And store2 is a wrapper with a huge amount of features, some convenience-based (e.g. modifying currently stored value instead of manually doing get+set), and some unique (e.g. checking how many space is left).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Difficult to argue with either of these. Both of these packages fulfill usefull purposes, and reinventing the wheel here not only takes additional work but also won't be as well battle-tested as a public, open-source package with thousands of GitHub stars.&lt;/p&gt;

&lt;p&gt;The main reasons &lt;em&gt;not&lt;/em&gt; to use these would be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Preference for a different package that covers the same use case. For example, instead of a wrapper for the somewhat outdated &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; APIs such as &lt;code&gt;store2&lt;/code&gt;, you could use the excellent &lt;a href="https://github.com/jakearchibald/idb-keyval"&gt;&lt;code&gt;idb-keyval&lt;/code&gt;&lt;/a&gt;, which wraps the &lt;code&gt;IndexedDB&lt;/code&gt; API instead, giving significant performance and other advantages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce bundle size by using a custom yet very simple, small, yet hacky alternative. For example, maybe you don't need all of &lt;code&gt;ismobilejs&lt;/code&gt;'s features. Per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#:~:text=In%20summary%2C%20we%20recommend%20looking%20for%20the%20string%20Mobi%20anywhere%20in%20the%20User%20Agent%20to%20detect%20a%20mobile%20device."&gt;MDN's recommendation&lt;/a&gt;, if you simply need to know whether a UA is mobile and don't care about other details, you can get a pretty damn good approximation with just 1 line:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mobi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meanwhile, &lt;a class="mentioned-user" href="https://dev.to/mcmath"&gt;@mcmath&lt;/a&gt;
 argues:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I’m going to go out on a limb and say that none of these are useless. Take upper-case, for example. I imagine it’s supposed to be useless because we already have toUpperCase(). But sometimes we want to do this:&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;upperCaseStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
   &lt;span class="nx"&gt;lowerCaseStrings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;... Yes, it's easy to implement yourself. In fact, I have (many times). Maybe I'll download upper-case next time instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'd argue that importing the &lt;code&gt;upper-case&lt;/code&gt; package for this purpose would be a huge mistake and lead to increased tech debt for virtually no benefit. For extremely simple features such as this, even if you frequently need a &lt;code&gt;map&lt;/code&gt;-able version, it'd be much better to have a custom file somewhere in &lt;em&gt;your own&lt;/em&gt; codebase, rather than an external dependency. Perhaps it'd be called something like &lt;code&gt;/src/utils/string-formats.ts&lt;/code&gt; and look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upperCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lowerCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Importing an external package for such simple features would be a mistake, for a few reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Many developers will assume the package is doing something special and unique, rather than just calling &lt;code&gt;String#toUpperCase()&lt;/code&gt;. They'll end up wasting time poring over GitHub repos, trying to figure out why someone has bothered to include this package as a dependency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meanwhile, other developers will just ignore it and treat the package as a "black box". They won't be quite certain what it does, but they'll assume it does something vaguely similar to &lt;code&gt;String#toUpperCase()&lt;/code&gt;. Instead of a standardized, tried-and-tested, well-known, painstakingly specified, well-documented API, they'll be left wondering. Does it work on Greek or Cyrillic text? Is it locale-sensitive, and if so, does that mean it may have different results in different user agents? Is calling &lt;code&gt;upperCase(lowerCase(upperCase(str)))&lt;/code&gt; always identical to calling &lt;code&gt;upperCase(str)&lt;/code&gt; for every possible value of &lt;code&gt;str&lt;/code&gt;? Who freakin' knows!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breaking changes might be introduced to the package, which would never (or &lt;a href="https://dev.to/richharris/stay-alert-d"&gt;very rarely&lt;/a&gt;) happen with native web platform features. In general, you want to keep packages up to date, for security reasons if nothing else; but you also don't want your project to break thanks to the updates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;In general, I'd suggest the following heuristics in determining when to use a third-party package or when to "reinvent the wheel":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Can I implement the feature myself trivially and reliably?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How well is this functionality supported by existing Web (or Node) APIs?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Will updates to this package typically be an advantage or a disadvantage?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is this a critical part of the app for which I want to be sure the solution is robust and battle-tested?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does the benefit the package brings justify the increased bundle size?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Would you agree with these heuristics? What other ones would you add/remove?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>Team Topologies 2: Organizing Business and Technology Teams </title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 23 Aug 2021 15:55:02 +0000</pubDate>
      <link>https://dev.to/linearb/team-topologies-2-organizing-business-and-technology-teams-dgm</link>
      <guid>https://dev.to/linearb/team-topologies-2-organizing-business-and-technology-teams-dgm</guid>
      <description>&lt;p&gt;Today, we premiere the second and final episode in our two-part series with DevOps experts Matthew Skelton and Manuel Pais, authors of the new book &lt;a href="https://teamtopologies.com/book"&gt;Team Topologies: Organizing Business and Technology Teams for Fast Flow.&lt;/a&gt; If you haven’t listened to the first episode, I highly recommend checking it out.&lt;/p&gt;

&lt;p&gt;In episode 2 we discuss strategies for reducing the cognitive load on a team, how to build organizational trust to allow for fast change, and the theory behind reversing Conway’s Law to produce sustainable system architecture.&lt;/p&gt;

&lt;p&gt;Also be sure to check out the &lt;a href="https://academy.teamtopologies.com/"&gt;Team Topologies Academy&lt;/a&gt; for more insights and custom-built courses.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0nnEAZEWVRy9UNPjept476"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is “Conway’s Law” and its relation to system architecture&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reducing cognitive load to improve productivity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How a high degree of trust allows for fast change&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The optimal number of people to put on a team&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Patterns to help teams discover success&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flow efficiency is the 5th key metric&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tnnePBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3w8a1hz1i2wtcigszwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tnnePBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3w8a1hz1i2wtcigszwu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT:&lt;/strong&gt; An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0DNmje9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/0%2Awut45_ZDwqsc279f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0DNmje9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/0%2Awut45_ZDwqsc279f.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*Originally published at [&lt;a href="https://devinterrupted.com"&gt;https://devinterrupted.com&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>devops</category>
      <category>techtalks</category>
      <category>productivity</category>
      <category>systems</category>
    </item>
    <item>
      <title>A simple Color-Picker using CSS5 color-contrast() and color-mix()</title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 23 Aug 2021 15:46:30 +0000</pubDate>
      <link>https://dev.to/madsstoumann/a-simple-color-picker-using-css5-color-contrast-and-color-mix-384p</link>
      <guid>https://dev.to/madsstoumann/a-simple-color-picker-using-css5-color-contrast-and-color-mix-384p</guid>
      <description>&lt;p&gt;Safari is often blamed for being “the new IE of web-browsers”. That's not fair, because Safari has recently been a “first-mover” in a lot of areas. For instance, &lt;em&gt;Safari Technology Preview&lt;/em&gt; has implemented a lot of the stuff from the &lt;a href="https://www.w3.org/TR/css-color-5"&gt;CSS Color Module Level 5&lt;/a&gt; specification – &lt;code&gt;color-contrast()&lt;/code&gt; and &lt;code&gt;color-mix()&lt;/code&gt; among them.&lt;/p&gt;

&lt;p&gt;Let's build a simple &lt;em&gt;Color Picker&lt;/em&gt; using these cool new features! We'll add some JavaScript, using &lt;code&gt;CSS.supports&lt;/code&gt;, to make it work in other browsers as well.&lt;/p&gt;

&lt;p&gt;The markup is a simple &lt;code&gt;fieldset&lt;/code&gt; with radio-buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;fieldset&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="c"&gt;&amp;lt;!-- start iterate colors --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--bgc:hsl(168, 41%, 65%)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"cp"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"hsl(168, 41%, 65%)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- end iterate colors --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll set a custom property, &lt;code&gt;--bgc&lt;/code&gt;, for each color, and with a dash of CSS, this it how it renders in Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mxbzbhq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhjnvntv0l34qluacfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mxbzbhq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhjnvntv0l34qluacfl.png" alt="Chrome Basic"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-a-raw-mask-endraw-for-selected-color"&gt;
  &lt;/a&gt;
  Using a &lt;code&gt;mask()&lt;/code&gt; for selected color
&lt;/h2&gt;

&lt;p&gt;We'll add a mask with a checkmark-icon to the &lt;code&gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt;-element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.color&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ico-w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ico&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ico-w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ico&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Chrome, it now looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvjSuSmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy46gylh4s3cs4vairsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvjSuSmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy46gylh4s3cs4vairsy.png" alt="Chrome checked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better – but the icon will have the &lt;strong&gt;same color&lt;/strong&gt;, even if the &lt;code&gt;background-color&lt;/code&gt; is dark, like the example above. It's also a bit annoying, that the &lt;code&gt;border-color&lt;/code&gt; is the same for all colors.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#colormix"&gt;
  &lt;/a&gt;
  color-mix()
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;color-mix&lt;/code&gt;-function, we can add a colored border, based on the custom property, &lt;code&gt;--bgc&lt;/code&gt;, mixing in 10% of black:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bdw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.125rem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;color-mix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bgc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#colorcontrast"&gt;
  &lt;/a&gt;
  color-contrast()
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;color-contrast&lt;/code&gt;-function, we can change the color of the icon, based on the custom property, &lt;code&gt;--bgc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.color&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color-contrast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bgc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;vs&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Safari, it now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRJoZZOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp82gi6zu4200q3qwfl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRJoZZOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp82gi6zu4200q3qwfl8.png" alt="Safari"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool! See those beautiful, dynamic border-colors! The checkmark-icon is white on dark colors, and black on light colors. &lt;/p&gt;

&lt;p&gt;And absolutely &lt;strong&gt;no JavaScript&lt;/strong&gt; is required!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fixing-issues-in-chrome-amp-co"&gt;
  &lt;/a&gt;
  Fixing issues in Chrome &amp;amp; Co.
&lt;/h2&gt;

&lt;p&gt;In non-Safari browsers, we'll have to use some JavaScript in order to achieve the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;supports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not (color: color-contrast(red vs black, white))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code here */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add a method that'll iterate the labels of the &lt;code&gt;fieldset&lt;/code&gt;, and set a custom property, &lt;code&gt;--ico-c&lt;/code&gt;, to either &lt;em&gt;black&lt;/em&gt; or &lt;em&gt;white&lt;/em&gt;, depending on the brightness of the iterated color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setLuminance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getComputedStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getPropertyValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;background-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\d&lt;/span&gt;&lt;span class="sr"&gt;,&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;299&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--ico-c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#FFF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#111&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet will return the color of the &lt;code&gt;label&lt;/code&gt; as &lt;code&gt;rgb&lt;/code&gt;, no matter if it's hex, hsl or rgb to start with, then check it's brightness, and set the &lt;code&gt;--ico-c&lt;/code&gt;-property.&lt;/p&gt;

&lt;p&gt;In Chrome, it now looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eooeJDac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpim57uausfaomg5ag0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eooeJDac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpim57uausfaomg5ag0x.png" alt="Chrome final"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better! The border-colors are still a bit dull in “non-Safari”-browsers, though, but I'm going to ignore that 😁&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#enabling-raw-colorcontrast-endraw-and-raw-colormix-endraw-"&gt;
  &lt;/a&gt;
  Enabling &lt;code&gt;color-contrast&lt;/code&gt; and &lt;code&gt;color-mix&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In &lt;em&gt;Safari Technology Preview&lt;/em&gt;, go to &lt;code&gt;Develop &amp;gt; Experimental Features&lt;/code&gt; and enable them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWmLSILb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emw5rvm8t3a42dh1z9by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWmLSILb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emw5rvm8t3a42dh1z9by.png" alt="Safari Tech Preview"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/OJgJXZP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's not working yet in – wait for it — &lt;em&gt;mobile Safari&lt;/em&gt;, but I'll look into that!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;I tried to use &lt;code&gt;color-mix&lt;/code&gt; &lt;strong&gt;within&lt;/strong&gt; &lt;code&gt;color-contrast&lt;/code&gt; – but that didn't work!&lt;/p&gt;

&lt;p&gt;I guess the implementation is not completely done, and thus a little buggy – but I'm looking forward to being able to mix in 80% white or black with the background-color, so the icon-color blends in more “softly” with the background-color.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codepen</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build Your Own Lint Rules for Terraform with Shisho</title>
      <author>Takashi Yoneuchi</author>
      <pubDate>Mon, 23 Aug 2021 15:44:38 +0000</pubDate>
      <link>https://dev.to/y0n3uchy/build-your-own-lint-rules-for-terraform-with-shisho-5fb7</link>
      <guid>https://dev.to/y0n3uchy/build-your-own-lint-rules-for-terraform-with-shisho-5fb7</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr: Shisho is an open-source static code analyzer that lets you build your own lint rules for Terraform codes. You can find and refactor specific code patterns easily with a handy configuration language.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-linter-static-analyzer-is-too-hard"&gt;
  &lt;/a&gt;
  Building Linter / Static Analyzer is Too Hard
&lt;/h2&gt;

&lt;p&gt;Every developer wants to avoid embedding issues in their software, while finding issues tends to be boring. So here's where a linter / a static analyzer come: they will be a great supporter of you and your team by detecting common bugs with pre-defined rules &lt;em&gt;before&lt;/em&gt; the bugs are shipped to the world.&lt;/p&gt;

&lt;p&gt;Sometimes, you will want to enforce custom rules for your code to standardize best practices specific to your team. When you want to prevent your team members from using &lt;code&gt;uniform_bucket_level_access = true&lt;/code&gt; in  &lt;code&gt;google_storage_bucket&lt;/code&gt; resources like the following snippet, for example, you hope there's a flexible linter that lets you add custom rules quickly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource "google_storage_bucket" "test" {
  project  = var.project
  name     = "${var.project}-test"
  location = var.location
  uniform_bucket_level_access = true
  force_destroy               = true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;However, &lt;strong&gt;adding and maintaining custom rules is quite hard&lt;/strong&gt;! You need to learn how to write custom rules for &lt;em&gt;each&lt;/em&gt; programming language your team use, although different programming languages have different linters or analyzers, with different DSLs and APIs. This difficulty is one of the severe problems of standard linters / static analyzers. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#shisho-a-customizable-static-code-analyzer"&gt;
  &lt;/a&gt;
  Shisho: A Customizable Static Code Analyzer
&lt;/h2&gt;

&lt;p&gt;Shisho, a lightweight static code analyzer, will help you build custom lint rules for your codebase. I'll explain what and how it is.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/flatt-security"&gt;
        flatt-security
      &lt;/a&gt; / &lt;a href="https://github.com/flatt-security/shisho"&gt;
        shisho
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Lightweight static analyzer for several programming languages
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
shisho&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/flatt-security/shisho./docs/public/images/header.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSgJcDGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/flatt-security/shisho./docs/public/images/header.png" alt="shisho"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/flatt-security/shisho/actions/workflows/test.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rocw0lnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/flatt-security/shisho/actions/workflows/test.yml/badge.svg%3Fbranch%3Dmain" alt="Run tests"&gt;&lt;/a&gt; &lt;a href="https://github.com/flatt-security/shisho/actions/workflows/lint.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zrzsB6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/flatt-security/shisho/actions/workflows/lint.yml/badge.svg%3Fbranch%3Dmain" alt="Run lint"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shisho is a lightweight static analyzer for developers.&lt;/p&gt;
&lt;h3&gt;
Please see &lt;a href="https://docs.shisho.dev" rel="nofollow"&gt;the usage documentation&lt;/a&gt; for further information.&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/flatt-security/shisho./docs/content/images/shisho-demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P7WA_SBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/flatt-security/shisho./docs/content/images/shisho-demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Try with Docker&lt;/h2&gt;
&lt;p&gt;You can try shisho in your machine as follows:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;func test(v []string) int { return len(v) + 1; }&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; docker run -i ghcr.io/flatt-security/shisho-cli:latest find &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;len(:[...])&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; --lang=go&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;func test(v []string) int { return len(v) + 1; }&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; file.go
docker run -i -v &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;PWD&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;:/workspace ghcr.io/flatt-security/shisho-cli:latest find &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;len(:[...])&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; --lang=go /workspace/file.go&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Install with pre-built binaries&lt;/h2&gt;
&lt;p&gt;When you'd like to run shisho outside docker containers, please follow the instructions below:&lt;/p&gt;
&lt;h3&gt;
Linux / macOS&lt;/h3&gt;
&lt;p&gt;Run the following command(s):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Linux&lt;/span&gt;
wget https://github.com/flatt-security/shisho/releases/latest/download/build-x86_64-unknown-linux-gnu.zip -O shisho.zip
unzip shisho.zip
chmod +x ./shisho
mv ./shisho /usr/local/bin/shisho
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; macOS&lt;/span&gt;
wget https://github.com/flatt-security/shisho/releases/latest/download/build-x86_64-apple-darwin.zip -O shisho.zip
unzip shisho.zip
chmod +x ./shisho
mv ./shisho /usr/local/bin/shisho&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then you'll see a shisho's executable in &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
Windows&lt;/h3&gt;
&lt;p&gt;Download the prebuild binary from…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/flatt-security/shisho"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-codes"&gt;
  &lt;/a&gt;
  Find Codes
&lt;/h3&gt;

&lt;p&gt;First of all, Shisho enables us to run AST-aware code search over your code. Here's an example command which finds the occurence of &lt;code&gt;uniform_bucket_level_access = true&lt;/code&gt; inside &lt;code&gt;google_storage_bucket&lt;/code&gt; resource:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -i -v $(pwd):/workspace ghcr.io/flatt-security/shisho-cli:latest find "
resource \"google_storage_bucket\" :[_] {
  :[...]
  uniform_bucket_level_access = true
  :[...]
}
" --lang hcl ./code.tf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command will make the following outputs in your console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cjxNRV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgpx0xaqkxejfqzmlghj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cjxNRV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgpx0xaqkxejfqzmlghj.png" alt="nYvlJB6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;:[_]&lt;/code&gt; is an &lt;strong&gt;anonymous metavariable&lt;/strong&gt;, which matches an arbitrary single node in AST (like a function call, identifier, and so on). Similarly, &lt;code&gt;:[...]&lt;/code&gt; is an &lt;strong&gt;anonymous ellipsis metavariable&lt;/strong&gt;, which matches zero or more nodes in AST. These operators are something like capture groups in regular expressions. They let you search over your code in a structured but flexible manner.&lt;/p&gt;

&lt;p&gt;You can also define a &lt;em&gt;rule&lt;/em&gt;, which includes a pattern and the explaination for it. The following YAML snippet is an example of rules describing the use of &lt;code&gt;uniform_bucket_level_access&lt;/code&gt; is prohibited:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "1"
rules:
  - id: sample-policy
    language: hcl
    pattern: |
      resource "google_storage_bucket" :[_] {
        :[...X]
        uniform_bucket_level_access = true
        :[...Y]
      }
    message: |
      Our team policy prohibits the use of uniform bucket-level access.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find patterns by executing &lt;code&gt;shisho find path/to/rule.yaml path/to/search&lt;/code&gt; command, resulting in the following outputs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWSc4V2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vque1zjoxh4rd8cv8pmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWSc4V2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vque1zjoxh4rd8cv8pmb.png" alt="Screenshot from 2021-08-23 19-08-44"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is how Shisho makes it possible to build your own lint rules for Terraform codes. You can use Shisho in the CI pipeline with your own rules, let alone your local machine. Please see &lt;a href="https://docs.shisho.dev/learn-shisho/03-constraint"&gt;Learn Shisho&lt;/a&gt; for further details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refactor-codes"&gt;
  &lt;/a&gt;
  Refactor Codes
&lt;/h3&gt;

&lt;p&gt;Additionally, Shisho rules can include how detected code patterns should be fixed. The following YAML snippet describes a custom lint rule that suggests the use of &lt;code&gt;uniform_bucket_level_access = true&lt;/code&gt; should be deleted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "1"
rules:
  - id: sample-policy
    language: hcl
    pattern: |
      resource "google_storage_bucket" :[NAME] {
        :[...X]
        uniform_bucket_level_access = true
        :[...Y]
      }
    message: |
      Our team policy prohibits use of uniform bucket-level access.
    rewrite: |
      resource "google_storage_bucket" :[NAME] {
        :[X]
        :[Y]
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this rule is run over your codes and the use of &lt;code&gt;uniform_bucket_level_access = true&lt;/code&gt; is detected, Shisho suggests changes following the rule's &lt;code&gt;rewrite&lt;/code&gt; section like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M995Jinm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fnmb3zlkc84hup3977q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M995Jinm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fnmb3zlkc84hup3977q.png" alt="Screenshot from 2021-08-23 19-07-30"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usecases"&gt;
  &lt;/a&gt;
  Usecases
&lt;/h2&gt;

&lt;p&gt;You can use Shisho &lt;strong&gt;for standardizing your codebase&lt;/strong&gt;. In addition, it could be a means of conducting &lt;strong&gt;"security-as-code"&lt;/strong&gt; or &lt;strong&gt;"policy-as-code"&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;For instance, when you want to keep your team's &lt;a href="https://aws.amazon.com/ebs/"&gt;EBS volumes&lt;/a&gt; encrypted, you can define a rule as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '1'
rules:
  - id: 'unencrypted-ebs-volume'
    language: hcl
    message: |
      There was unencrypted EBS module.
    pattern: |
      resource  "aws_ebs_volume" :[NAME] {
        :[...X]
      }
    constraints:
      - target: X
        should: not-match
        pattern: |
          encrypted = true
    rewrite: |
      resource "aws_ebs_volume" :[NAME] {
        :[X]
        encrypted = true
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you want your colleagues to follow the naming convention for resources, the following rule will work well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "1"
rules:
  - id: "invalid-resource-name"
    language: hcl
    message: |
      A resource was named badly.
    pattern: |
      resource  :[_] :[NAME] {
        :[...]
      }
    constraints:
      - target: NAME
        should: not-match-regex
        pattern: '"team1-.*"'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rule will report the result like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i6FIE27v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbrr64fr1piubmwz6ty4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6FIE27v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbrr64fr1piubmwz6ty4.png" alt="Screenshot from 2021-08-24 00-34-46"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-shisho"&gt;
  &lt;/a&gt;
  Why Shisho?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://devd.me/log/posts/static-analysis/"&gt;"Modern Static Analysis: how the best tools empower creativity"&lt;/a&gt; explains that good code analyzers or linters are often &lt;em&gt;interoperable, moldable, efficient, and community-driven&lt;/em&gt; and that &lt;a href="https://semgrep.dev/"&gt;Semgrep&lt;/a&gt; works well from these viewpoints. Semgrep is also grep-like (or sed-like) software that lets us find bugs with useful DSLs. &lt;/p&gt;

&lt;p&gt;As for Shisho, it is at least interoperable (since it's open-sourced), moldable (though some efforts are needed; see issue &lt;a href="https://github.com/flatt-security/shisho/issues/7"&gt;#7&lt;/a&gt;). Moreover, &lt;strong&gt;Shisho is surprisingly efficient&lt;/strong&gt;! Here's the result of a micro-benchmark of &lt;a href="https://semgrep.dev/"&gt;Semgrep&lt;/a&gt;, &lt;a href="https://comby.dev/"&gt;Comby&lt;/a&gt; (a similar tool), and Shisho&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Comby (1.7.0)&lt;/td&gt;
&lt;td&gt;263.1 ms&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time comby 'len(...)' '' parser.go -match-only &amp;amp;&amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semgrep (0.62.0)&lt;/td&gt;
&lt;td&gt;530.0ms&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time semgrep -e 'len(...)' --lang=go parser.go &amp;amp;&amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Shisho (0.1.2-alpha.2)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;22.8ms&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;time shisho find 'len(:[...])' --lang=go parser.go &amp;amp;&amp;gt; /dev/null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In fact, Shisho aims to refine the existing tools and to make it more feasible to run for large projects. You can use Shisho for your monorepo without hesitation. For your information, this speed is supported by &lt;a href="https://rust-lang.org"&gt;Rust&lt;/a&gt; &lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, it's true that Shisho lacks some features of Semgrep and Comby. For instance, Semgrep has &lt;a href="https://semgrep.dev/docs/writing-rules/pattern-syntax/#typed-metavariables"&gt;a feature to match patterns with type information&lt;/a&gt; while Shisho doesn't. Semgrep also has &lt;a href="https://semgrep.dev/explore"&gt;Semgrep Registry&lt;/a&gt;, in which you can share your own lint rules for the worldwide community. Now I'm making efforts to design and implement these features. Stay tuned!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-what"&gt;
  &lt;/a&gt;
  Now What?
&lt;/h2&gt;

&lt;p&gt;This article explained the usage of Shisho for Terraform codes, but Shisho is extending other language supports! Especially Dockerfile support will be shipped soon. You can follow &lt;a href="https://twitter.com/y0n3uchy"&gt;@y0n3uchy&lt;/a&gt; to see the news on Shisho and star &lt;a href="https://github.com/flatt-security/shisho"&gt;our GitHub project&lt;/a&gt; to encourage us :-)&lt;/p&gt;

&lt;p&gt;Additionally, I'll release a SaaS which supports your Terraform development workflows with this engine. See &lt;a href="https://shisho.dev/"&gt;https://shisho.dev/&lt;/a&gt; for further details.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Time is the average of 20 consecutive command executions. The measurement was run on Ubuntu 20.04.2 LTS with AMD Ryzen 5 3600 / 64GB RAM. The scan target was &lt;a href="https://sourcegraph.com/github.com/golang/go@5a267c840ae16c1cc7352caa14da5f500d03d338/-/blob/src/go/parser/parser.go"&gt;parser.go&lt;/a&gt;. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;Both Semgrep and Comby is written in OCaml. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>terraform</category>
      <category>security</category>
      <category>devops</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
