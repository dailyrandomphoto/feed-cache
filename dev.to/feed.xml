<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My journey creating my first saas /startup in a few months pt.1</title>
      <author>Hrn Svncハルン Харун Севиндж</author>
      <pubDate>Tue, 14 Dec 2021 23:20:53 +0000</pubDate>
      <link>https://dev.to/harsvnc/my-journey-creating-my-first-saas-startup-in-a-few-months-pt1-fjk</link>
      <guid>https://dev.to/harsvnc/my-journey-creating-my-first-saas-startup-in-a-few-months-pt1-fjk</guid>
      <description>&lt;p&gt;Hi everyone, it's me again. Today I wanted to start sharing my journey, how I built my first saas startup in a few months (we started about 4 month ago)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-a-cofounder"&gt;
  &lt;/a&gt;
  Finding a co-founder
&lt;/h2&gt;

&lt;p&gt;Let's face it. You can't do everything. Or at least not efficiently in time. And time is one of the most valuable resources you have. That's why many founders will tell you to find a co-founder for your idea. In most cases a mix of technical and sales based skillset would be very helpful. &lt;/p&gt;

&lt;p&gt;Since I work as a developer, it seems easy to find someone else with a technical background. And that's how I met your... my co-founder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solving-a-real-problem"&gt;
  &lt;/a&gt;
  Solving a real problem
&lt;/h2&gt;

&lt;p&gt;There probably are a ton of todo apps out there. And thats okay. Everyone has its own preferences and tastes when choosing a new product. In many cases you will use the most famous product which seems to solve 80 % of the problem you face. With that said, a problem can also be solved in many different ways sometimes.&lt;/p&gt;

&lt;p&gt;We did find something that would be worth creating even if there are a lot of competition out there. We don't wanted to build just another products but one that solved a problem with a different approach.&lt;/p&gt;

&lt;p&gt;So why not building a todo app with KI or make it more fun to use by using it in a different way? I think you get the point. If you are able to create your unique selling point than do it. But don't forget to solve a real problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-overengineer-your-mvp"&gt;
  &lt;/a&gt;
  Don't overengineer your MVP
&lt;/h2&gt;

&lt;p&gt;Stop building more features. Focus on one or two main features which create great results and release your product as soon as it is stable enough to serve. You always should weigh in if the time you spend for a new feature is worth it or just go ahead to the next one wich should generate value.&lt;/p&gt;

&lt;p&gt;We first started with an other product which we already discarded after we spend too much time thinking about it developing the first version. After reevaluating our product we knew we needed to move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-habbits"&gt;
  &lt;/a&gt;
  Build habbits
&lt;/h2&gt;

&lt;p&gt;I heard that if you do a task for 21 days repeatedly it turns into a habbit. When you build a product you need to be determined to finish it as soon as possible. That includes a lot of work, in my case programming sessions. I started one day and since we put our code on github, I can track how many commits I did in the past weeks. If I forget to code the other day, I feel bad and so I try to at least improve something small.&lt;/p&gt;

&lt;p&gt;This was my first part on how I startet building my first saas startup. If you liked this post you could follow me on &lt;a href="https://mobile.twitter.com/harsvnc"&gt;Twitter&lt;/a&gt; or here in Dev. I will continue posting about my process and hope I can provide you with my experience.&lt;/p&gt;

&lt;p&gt;Thanks for reading &lt;/p&gt;

</description>
      <category>saas</category>
      <category>devjournal</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Setup Tailwind with Create React App without craco.</title>
      <author>Cheralathan</author>
      <pubDate>Tue, 14 Dec 2021 22:41:57 +0000</pubDate>
      <link>https://dev.to/cheralathann/setup-tailwind-with-create-react-app-without-craco-ph7</link>
      <guid>https://dev.to/cheralathann/setup-tailwind-with-create-react-app-without-craco-ph7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-tailwind"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://tailwindcss.com/"&gt;tailwind&lt;/a&gt;?
&lt;/h3&gt;

&lt;p&gt;A utility-first CSS framework that can be composed to build any design, directly in your markup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDfKCM1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a71vmjh9mk547rr0r61n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDfKCM1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a71vmjh9mk547rr0r61n.png" alt="Tailwind" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tailwind-css"&gt;
  &lt;/a&gt;
  Setting up Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;In this guide, we’ll cover a simple installation of Setting up Tailwind CSS in a Create React App project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uninstall-createreactapp-recommended"&gt;
  &lt;/a&gt;
  Uninstall create-react-app (recommended)
&lt;/h3&gt;

&lt;p&gt;If you've previously installed create-react-app globally. we recommend you uninstall the package using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm uninstall -g create-react-app&lt;/code&gt; or &lt;code&gt;yarn global remove create-react-app&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#existing-react-project"&gt;
  &lt;/a&gt;
  Existing React Project
&lt;/h3&gt;

&lt;p&gt;Bump "react-scripts" in package.json to 5.0.0 and run &lt;code&gt;npm install&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-react-project"&gt;
  &lt;/a&gt;
  New React Project
&lt;/h3&gt;

&lt;p&gt;To create a new app use the following commands&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt; or &lt;code&gt;yarn create react-app my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once new app is intialized go to the app directory, In our case &lt;code&gt;cd my-app&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-tailwind-css"&gt;
  &lt;/a&gt;
  Install Tailwind CSS
&lt;/h3&gt;

&lt;p&gt;Install tailwindcss and its peer dependencies via npm&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -D tailwindcss postcss autoprefixer&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-config"&gt;
  &lt;/a&gt;
  Generate Config
&lt;/h3&gt;

&lt;p&gt;Then run the init command to generate both &lt;code&gt;tailwind.config.js&lt;/code&gt; and &lt;code&gt;postcss.config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx tailwindcss init -p&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-your-template-paths"&gt;
  &lt;/a&gt;
  Configure your template paths
&lt;/h3&gt;

&lt;p&gt;Add the paths to all of your template files in your &lt;code&gt;tailwind.config.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  content: [
    "./src/**/*.{js,jsx}",
  ],
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-the-tailwind-directives-to-your-css"&gt;
  &lt;/a&gt;
  Add the Tailwind directives to your CSS
&lt;/h3&gt;

&lt;p&gt;Add the tailwind directives for each of Tailwind’s layers to your &lt;code&gt;./src/index.css&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#start-your-dev-process"&gt;
  &lt;/a&gt;
  Start your dev process
&lt;/h3&gt;

&lt;p&gt;Run your build process with &lt;code&gt;npm run start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's all. Enjoy.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tailwindcss</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 14 Dec 2021 22:36:27 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1lpg</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1lpg</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorial-time"&gt;
  &lt;/a&gt;
  Tutorial time
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/uche_azubuko"&gt;@uche_azubuko&lt;/a&gt;
, this is such a fantastic and simple-to-navigate tutorial on using Strapi to build an API. Great work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/uche_azubuko" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HZe95Y---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---rZY5ZOi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/503344/e06f7d57-97eb-4963-936f-403317dc18e6.jpg" alt="uche_azubuko"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/uche_azubuko/how-to-build-an-api-using-strapi-3ibf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Build an API using Strapi&lt;/h2&gt;
      &lt;h3&gt;Uchechukwu Azubuko ・ Dec 7 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lets-end-the-software-fear-and-discouragement"&gt;
  &lt;/a&gt;
  Let's end the software fear and discouragement
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jordan_smith"&gt;@jordan_smith&lt;/a&gt;
's post is a fantastic look inside some of the ways that early-career developers are frequently discouraged from pursuing a career in software. Let's inform ourselves together so we can make these myths a thing of the past. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jordan_smith" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKkucfrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_MW5o2yi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/770485/2fbaed74-ccd3-4b53-82e4-b9cad28d197d.jpg" alt="jordan_smith"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jordan_smith/6-myths-keeping-you-from-becoming-a-software-engineer-4gf5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Myths Keeping You From Becoming a Software Engineer&lt;/h2&gt;
      &lt;h3&gt;Jordan Smith ・ Dec 8 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#optimizing-sloooooow-websites"&gt;
  &lt;/a&gt;
  Optimizing sloooooow websites
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alexsan28195851"&gt;@alexsan28195851&lt;/a&gt;
 came through with a super-helpful annotated list of reasons why you are able to cook breakfast and run a few laps around the block while your website loads. Let's fix it!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexsan28195851" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzyyMC4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oXYDEFB8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/454969/4e2dc667-a386-4849-884d-533ca3d5dab3.png" alt="alexsan28195851"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexsan28195851/why-your-website-is-loading-so-slowly-2ihl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Your Website Is Loading So Slowly&lt;/h2&gt;
      &lt;h3&gt;Alex Sanders ・ Dec 10 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#everyone-on-the-same-page"&gt;
  &lt;/a&gt;
  Everyone on the same page
&lt;/h2&gt;

&lt;p&gt;That's &lt;a class="mentioned-user" href="https://dev.to/amyoulton"&gt;@amyoulton&lt;/a&gt;
's goal when it comes to coders and non-coders! In this post, you'll find advice on "effectively explain[ing] your projects to non-coding members of your team" so that the entire org can feel unified and on the same side. 🏆  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/amyoulton" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URMcwv1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rz8uVdo6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618716/985cdde0-41c2-4924-9c59-23cd90ce5294.jpeg" alt="amyoulton"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amyoulton/how-to-explain-coding-projects-to-a-team-of-non-coders-36eg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To: Explain Coding Projects To A Team Of Non-Coders&lt;/h2&gt;
      &lt;h3&gt;Amy Oulton ・ Dec 8 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#no-job-is-perfect"&gt;
  &lt;/a&gt;
  No job is perfect
&lt;/h2&gt;

&lt;p&gt;Including software development. &lt;a class="mentioned-user" href="https://dev.to/vibalijoshi"&gt;@vibalijoshi&lt;/a&gt;
 takes a look at some of the downsides of working in this field so we can work together to overcome them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vibalijoshi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HS_Sh1nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uNPcFSS5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/484969/b46c134b-9635-443c-9adc-a80d19a36420.jpeg" alt="vibalijoshi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vibalijoshi/the-dark-side-of-software-development-441e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Dark Side of Software Development &lt;/h2&gt;
      &lt;h3&gt;vibalijoshi ・ Dec 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#big-takeaways-from-react-conf-2021"&gt;
  &lt;/a&gt;
  Big takeaways from React Conf 2021
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alexeagleson"&gt;@alexeagleson&lt;/a&gt;
 attended React Conf 2021 and put together a list of some of the new topics they found most compelling. Take a look!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexeagleson" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuW2O9GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5rt-l1WO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/657194/09849883-a2f7-471a-8ef0-f5e3a5236849.png" alt="alexeagleson"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexeagleson/learnings-from-react-conf-2021-17lg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learnings from React Conf 2021&lt;/h2&gt;
      &lt;h3&gt;Alex Eagleson ・ Dec 9 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#gametime"&gt;
  &lt;/a&gt;
  Gametime
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/zippcodder"&gt;@zippcodder&lt;/a&gt;
 shares their process and methods for creating games from scratch using HTML Canvas. You'll find a lot of great info in here that will help you design your own!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/zippcodder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sODuhnVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xItTDIQA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/678971/150bdcfc-9da5-4068-9153-1e91597ef2dc.jpeg" alt="zippcodder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zippcodder/complete-guide-to-building-games-in-the-browser-kp6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt; Complete Guide to Building Games in the Browser &lt;/h2&gt;
      &lt;h3&gt;Deon Rich ・ Dec 9 ・ 30 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#gamedev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Connecting High School Students to Internships - Interniac</title>
      <author>Christian Stefaniw</author>
      <pubDate>Tue, 14 Dec 2021 22:20:43 +0000</pubDate>
      <link>https://dev.to/christianstefaniw/connecting-high-school-students-to-internships-interniac-1m1g</link>
      <guid>https://dev.to/christianstefaniw/connecting-high-school-students-to-internships-interniac-1m1g</guid>
      <description>&lt;p&gt;Given how competitive University admissions are and how often the average University student changes majors due to career confusion, getting a high school internship is more valuable than ever before. However, pre-university work experience is difficult to come by and oftentimes opportunities are given to students who have strong networks (either through a parent or their school). Today, there is no platform through which high school students all over the country can find an internship on their own. We aim to build a platform that supports high schoolers attending public schools and empowers businesses in hiring bright students. Interniac fills the gap in our education system by simplifying the process for employers to start internship programs and source candidates who are eager to gain valuable out-of-the-classroom work experience. &lt;/p&gt;

&lt;p&gt;Our mission is to bring you opportunities, whether that be an internship or a chance to speak to professionals in the field you are interested in. We strive to help you build your future. Join our platform to learn more about what opportunities Interniac can offer you!&lt;/p&gt;

&lt;p&gt;Please check out this OPENSOURCE project here and don’t forget to leave a star!&lt;br&gt;
&lt;a href="https://www.github.com/interniac/Interniac-website"&gt;https://www.github.com/interniac/Interniac-website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>The human toll of log4j maintenance</title>
      <author>Yawar Amin</author>
      <pubDate>Tue, 14 Dec 2021 21:48:25 +0000</pubDate>
      <link>https://dev.to/yawaramin/the-human-toll-of-log4j-maintenance-35ap</link>
      <guid>https://dev.to/yawaramin/the-human-toll-of-log4j-maintenance-35ap</guid>
      <description>&lt;p&gt;BY NOW, most of the internet knows about the famous Log4Shell exploit, and if you don't, it's easy to &lt;a href="https://www.google.com/search?q=log4shell&amp;amp;oq=log4shell&amp;amp;aqs=chrome..69i57j0i3l4j0i3i10j0i3l2j0i3i10l2.1502j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;get a sense&lt;/a&gt; of how disastrous it's been. To drive the point home: the US Department of Homeland Security is &lt;a href="https://www.cnn.com/2021/12/11/politics/dhs-log4j-software-flaw-warning/index.html"&gt;warning&lt;/a&gt; people about it.&lt;/p&gt;

&lt;p&gt;There's been a lot of hand-wringing about how open source software, the lifeblood of many businesses today, is often totally unpaid and unthanked work, with some hot takes like &lt;a href="https://twitter.com/FiloSottile/status/1469441477642178561"&gt;'Open source needs to grow the hell up.'&lt;/a&gt; and &lt;a href="https://christine.website/blog/open-source-broken-2021-12-11"&gt;'Open source' is broken&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I want to touch on is something that's been bothering me for the past few days, and solidified after seeing &lt;a href="https://www.bloomberg.com/news/articles/2021-12-13/how-apache-raced-to-fix-a-potentially-disastrous-software-flaw?sref=ylv224K8"&gt;Bloomberg's piece&lt;/a&gt;–the fact that the log4j developers had this massive security issue dumped in their laps, with the expectation that they were supposed to fix it. How did that happen? How did a group of smart, hard-working people get roped into a thankless, high-pressure situation with absolutely no upside for themselves?&lt;/p&gt;

&lt;p&gt;Rough idea of the timeline:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At 2:51 p.m. on Nov. 24, members of an open-source software project received an alarming email.... “I want to report a security bug,” wrote Chen Zhaojun, an employee on Alibaba Group Holding Ltd.’s cloud-security team, adding “the vulnerability has a major impact.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This triggered a frantic rush in the log4j team to fix the issue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He described the conversations among the Log4j group as dispassionate and earnest. “I know these people -- they all have families and things they have to do. But they put everything aside and just sat down for the whole weekend and worked on that,” he said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They worked liked a professional team of security-focused engineers, except with zero pay or recognition. They gave up a weekend with their families to do this for almost the entire internet. They were criticized and harassed, and their every action scrutinized: &lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aI5rfPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1276094582434955264/sLfJ7Vki_normal.jpg" alt="Volkan Yazıcı profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Volkan Yazıcı
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @yazicivo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Log4j maintainers have been working sleeplessly on mitigation measures; fixes, docs, CVE, replies to inquiries, etc. Yet nothing is stopping people to bash us, for work we aren't paid for, for a feature we all dislike yet needed to keep due to backward compatibility concerns. &lt;a href="https://t.co/W2u6AcBUM8"&gt;twitter.com/shipilev/statu…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:55 PM - 10 Dec 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Aleksey Shipilëv
          &lt;/span&gt;
          @shipilev
        &lt;/div&gt;
        Sending hugs to Log4J people. This must be an extraordinarily shitty Friday for them. https://t.co/eLW36sILG7
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1469349956880408583" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1469349956880408583" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1469349956880408583" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And after all that, they delivered a fix that people have been swiftly upgrading to and breathing a sigh of relief.&lt;/p&gt;

&lt;p&gt;Now again I ask, how did these unpaid open source maintainers get roped into this high-pressure, exploitative situation? How is it that the entire internet treated them like their personal paid security engineering department, only with no pay and no thanks? What went wrong that they got from the explicit &lt;a href="https://github.com/apache/logging-log4j2/blob/master/LICENSE.txt"&gt;license terms&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;7&lt;/code&gt;. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...to slaving away to fix it for everyone like their very lives depended on it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-great-open-source-brainwash"&gt;
  &lt;/a&gt;
  The great open source brainwash
&lt;/h2&gt;

&lt;p&gt;Let's look at the Open Source Institute's &lt;a href="https://opensource.org/osd"&gt;Open Source Definition&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Open source doesn't just mean access to the source code. The distribution terms of open-source software must comply with the following criteria:...(bunch of criteria that the license must satisfy to be considered open source)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's read Rich Hickey's (creator of Clojure) &lt;a href="https://gist.github.com/richhickey/1563cddea1002958f96e7ba9519972d9"&gt;small note&lt;/a&gt; about being an open source maintainers after people in the Clojure community wrote posts like 'Fuck Clojure':&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Open source is a licensing and delivery mechanism, period. It means you get the source for software and the right to use and modify it. All social impositions associated with it, including the idea of 'community-driven-development' are part of a recently-invented mythology with little basis in how things actually work, a mythology that embodies, cult-like, both a lack of support for diversity in the ways things can work and a pervasive sense of communal entitlement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is this communal mythology I want to talk about, this great open source brainwashing that makes maintainers feel like they need to go above and beyond publishing source code under an open source license–that they need to manage and grow a community, accept contributions, fix issues, follow vulnerability disclosure best practices, and many other things.&lt;/p&gt;

&lt;p&gt;The Alibaba software engineer who reported the issue to the log4j team subsequently (on Dec. 8th) followed up with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Some WeChat security chat groups are already discussing the details of the vulnerability, and some security researchers already have the vulnerability,” Chen wrote. “We promise to keep it secret until your official release version comes out. Please hurry up.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point everyone is fully bought in to the idea that the log4j team &lt;em&gt;must&lt;/em&gt; urgently fix this because everyone is relying on them. There's not even a question about doing otherwise. Why? Again–because we have this pervasive open source mythology that open source is about open community, governance, security, and all those nice-sounding ideas. I've had discussions where people have told me with a straight face:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well I'm pretty sure there is an entire industry of open source developers that would stand behind me in saying that open source is about more than a license, but feel free to stick your fingers in your ears and ignore all of us if that makes you happy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They are &lt;em&gt;incredibly&lt;/em&gt; bought into this mythology, and you can't argue against it. It's like a religion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-wakeup-call"&gt;
  &lt;/a&gt;
  The wake-up call
&lt;/h2&gt;

&lt;p&gt;In reality what is happening, is that open source maintainers are effectively unpaid outsourcing teams for giant corporations. The Alibaba engineer told the log4j team: 'Please hurry up'. Meanwhile, let's remember that Alibaba has a &lt;a href="https://finance.yahoo.com/quote/BABA/"&gt;market cap&lt;/a&gt; of $348 billion (that's USD).&lt;/p&gt;

&lt;p&gt;So what's the answer here? Seems like a lot of people are saying that corporations should fund open source. Others are pointing out that it's not that simple, because apparently corporations don't want to do that (for some reason). Yet they are totally fine with 'embracing open source' and continuing to use the software and pressure the maintainers. There must be a middle ground.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-suggestion"&gt;
  &lt;/a&gt;
  The suggestion
&lt;/h2&gt;

&lt;p&gt;Here's my suggestion–let's imagine what happens if the scenario plays out like this: the Alibaba engineer sends the warning to the log4j team, and then &lt;em&gt;nothing happens.&lt;/em&gt; The log4j team does &lt;em&gt;nothing&lt;/em&gt; about it, because they have lives and families, because they're busy, they're not feeling productive, whatever. Alibaba follows up and requests the fix &lt;em&gt;urgently.&lt;/em&gt; The team then sends a quote for the fix (to be made open source, of course), for $50,000. That's peanuts to Alibaba. Their market cap alone is nearly &lt;em&gt;7 million times&lt;/em&gt; that quote. They stand to lose untold amounts of money with a vulnerability like Log4Shell.&lt;/p&gt;

&lt;p&gt;I invite you to think on how this would play out. Let's break the brainwashing and reveal the mythology as a hoax and false idol. Open source does not equate free vulnerability fixes, security best practices, open community, or any of the other nice-sounding layers that people add on top of it. Maintainers' lives don't depend on doing free labour for megacorps. It's time corporations (and everybody else) took a step back, dug their claws out of the backs of maintainers, and accepted the risks and responsibilities (and yes, expenses) that come with using open source.&lt;/p&gt;

</description>
      <category>java</category>
      <category>log4j</category>
      <category>opensource</category>
    </item>
    <item>
      <title>String Operations On Phone Numbers In SQL</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 14 Dec 2021 21:14:23 +0000</pubDate>
      <link>https://dev.to/arctype/string-operations-on-phone-numbers-in-sql-4p1j</link>
      <guid>https://dev.to/arctype/string-operations-on-phone-numbers-in-sql-4p1j</guid>
      <description>&lt;p&gt;When dealing with SQL databases, users will have to interact with different data types and schemas depending on the project's requirements. Since databases are used in many different applications and support multiple platforms, devices, and users, there may be differences in how data is entered, even in a simple field like a phone number.&lt;/p&gt;

&lt;p&gt;For example, one set of users will enter the phone number with the country code, while the others may simply ignore the country code. Therefore, it is essential for database users to know how to clean data in a SQL database. In this post, we will see how to utilize SQL string operations on phone number fields to properly clean, format, and extract data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-care-about-data-cleaning"&gt;
  &lt;/a&gt;
  Why do we care about data cleaning?
&lt;/h2&gt;

&lt;p&gt;Data comes in all forms and sizes. Most of the time, it will be raw data, without proper formatting. Data cleaning allows users to filter, sort, and format this raw data to extract meaningful information from it. Data cleaning also makes data analysis a much more efficient process as an additional benefit.&lt;/p&gt;

&lt;p&gt;Let's assume we have a text field that captures user information and asks users to enter valuable information like phone numbers. We need to clean this text field to make the phone numbers usable. How would we go about doing that? To begin with, we need to understand SQL string operations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-sql-string-operations"&gt;
  &lt;/a&gt;
  What are SQL string operations?
&lt;/h2&gt;

&lt;p&gt;String operations are functions that can be used to manipulate strings. These string operators (also called string functions) take a string as input, process it according to the specified function, and return a string as the output. The availability of these functions will differ depending on the database. For example, the following is a list of commonly used string functions in MySQL:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-types-of-string-operations"&gt;
  &lt;/a&gt;
  Common Types of String Operations
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LEFT / RIGHT&lt;/td&gt;
&lt;td&gt;Extract a specified number of characters from a string (starting from left or right)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRIM&lt;/td&gt;
&lt;td&gt;Remove leading or trailing spaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSITION / STRPOS&lt;/td&gt;
&lt;td&gt;Analogous to the Location function, where a numerical value of the position of the specified substring is provided.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUBSTR&lt;/td&gt;
&lt;td&gt;Extract the specified substring from a specific location to match the specified length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONCAT&lt;/td&gt;
&lt;td&gt;Combine two or more strings to make a single string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COALESCE&lt;/td&gt;
&lt;td&gt;Replace null values with a specified value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FORMAT&lt;/td&gt;
&lt;td&gt;Formats the value to the specified format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REGEXP&lt;/td&gt;
&lt;td&gt;Matches string to a regular expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REGEXP_SUBSTR&lt;/td&gt;
&lt;td&gt;Extracts value for the matching regular expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STR&lt;/td&gt;
&lt;td&gt;Convert numerical value to string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REVERSE&lt;/td&gt;
&lt;td&gt;Reverses the specified string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REPLACE&lt;/td&gt;
&lt;td&gt;Replaces the specified string with the given value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The full list of available string &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html"&gt;functions and operators&lt;/a&gt; is available in the official documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-string-operations-with-phone-numbers"&gt;
  &lt;/a&gt;
  How to use string operations with phone numbers
&lt;/h3&gt;

&lt;p&gt;Now we have a basic understanding of string operations and related functions in SQL! So, let's look at how exactly we can utilize some of these functions on phone numbers to extract and format data. For all the examples provided here, we will be using the &lt;a href="https://arctype.com/"&gt;Arctype SQL client&lt;/a&gt; with a MySQL database in a Windows environment with the following dataset.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dCIHFog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GthFAsfTQXMYTIToeauZ_WryC_tXjYRix9ltU1H6OpCDyiuyJRY4PZbH7Ipbwd-Nk85S1cIJak2nHpezbi83n0UV3goHHxCXGcdrWo3Mo7JXPs5yQlxlwWNhErxMcrXGtL85q15Y" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dCIHFog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GthFAsfTQXMYTIToeauZ_WryC_tXjYRix9ltU1H6OpCDyiuyJRY4PZbH7Ipbwd-Nk85S1cIJak2nHpezbi83n0UV3goHHxCXGcdrWo3Mo7JXPs5yQlxlwWNhErxMcrXGtL85q15Y" alt="" width="589" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#properly-format-a-phone-number"&gt;
  &lt;/a&gt;
  Properly format a phone number
&lt;/h2&gt;

&lt;p&gt;We can utilize the &lt;code&gt;SUBSTR&lt;/code&gt; command to format phone numbers. It will extract parts of the number and use the &lt;code&gt;CONCAT&lt;/code&gt; to join the specific parts together. In the following example, we have broken down the phone number into three distinct sections and combined them together with the formatting as a new field called &lt;code&gt;num_formatted&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    phone_num,
    CONCAT(
        '(',
        SUBSTR(phone_num, 1, 3),
        ') ',
        SUBSTR(phone_num, 4, 3),
        '-',
        SUBSTR(phone_num, 7)
    ) AS num_formatted
FROM
    EmpDetails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of the operation is show below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJyq0_oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/6nBWFvsiL1HDeJAjs1MtImDFOjdPospXcEgT59Cn_abDUKNKSsmy4IlLXe3fSYMMLMiIpEQ4dDmxRX8D093xBmtcuNtuRlUetyjSiP-IPIKKcckQkrh98HycVXFD03VvbQQi6MbS" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJyq0_oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/6nBWFvsiL1HDeJAjs1MtImDFOjdPospXcEgT59Cn_abDUKNKSsmy4IlLXe3fSYMMLMiIpEQ4dDmxRX8D093xBmtcuNtuRlUetyjSiP-IPIKKcckQkrh98HycVXFD03VvbQQi6MbS" alt="Cleaning phone numbers - output of example." width="880" height="857"&gt;&lt;/a&gt;&lt;br&gt;
You can create a new column to save the formatted number using the &lt;code&gt;ALTER TABLE&lt;/code&gt; command. It will create a new column and update it with the formatted numbers.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE EmpDetails
ADD formatted_number VARCHAR(255);

UPDATE
    EmpDetails
SET
    formatted_number = (
        SELECT
            CONCAT(
                '(',
                SUBSTR(phone_num, 1, 3),
                ') ',
                SUBSTR(phone_num, 4, 3),
                '-',
                SUBSTR(phone_num, 7)
            ) AS num_formatted
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of the above operation is shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V06t5tNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/x4oAVtlgD7slhbO8FNutYG522dQ-HQ1QsqnyKAjm_k-7YE-KJMoVwqrQ9WZ-I7YaAu80VlAMO37EMezP8OK2ibd25nbt61xwUZFXpOjdU62pvlSK2n1e3eV7PU6fMU-adQmQIZkK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V06t5tNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/x4oAVtlgD7slhbO8FNutYG522dQ-HQ1QsqnyKAjm_k-7YE-KJMoVwqrQ9WZ-I7YaAu80VlAMO37EMezP8OK2ibd25nbt61xwUZFXpOjdU62pvlSK2n1e3eV7PU6fMU-adQmQIZkK" alt="Screeshot of a query in Arctype." width="880" height="857"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--630II7DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lFXRuKYPsQbKejsrdMAKuF0jUk-SFjWruI0RY9NHuZgw-DWBRw2y92YYDr8o8u27rnn5q2wQG0u3QpQ6AAj2xiSGTB_3tJom_dkTRpwHoN6UVeQHJhjhWbMneznBT6DMg9ZLozcL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--630II7DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lFXRuKYPsQbKejsrdMAKuF0jUk-SFjWruI0RY9NHuZgw-DWBRw2y92YYDr8o8u27rnn5q2wQG0u3QpQ6AAj2xiSGTB_3tJom_dkTRpwHoN6UVeQHJhjhWbMneznBT6DMg9ZLozcL" alt="Screenshot of data from a query to convert phone numbers to formatted data." width="723" height="333"&gt;&lt;/a&gt;&lt;br&gt;
We can modify our SQL command to include the &lt;code&gt;REPLACE&lt;/code&gt; function if there are additional characters in the phone number field, such as dashes and brackets. This function can be used to remove unnecessary characters and whitespaces in a string. Now let's further format the &lt;code&gt;formmated_number&lt;/code&gt; field to include the country code.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    formatted_number,
    CONCAT(
        '+1 '
        '(',
        SUBSTR(num_cleansed, 1, 3),
        ') ',
        SUBSTR(num_cleansed, 5, 3),
        '-',
        SUBSTR(num_cleansed, 7)
    ) AS num_formatted
FROM
    (
        SELECT
            formatted_number,
            REPLACE(REPLACE(REPLACE(REPLACE(formatted_number, '(', ''), ')', ''), '-', ''), ' ','') as num_cleansed
        FROM
            EmpDetails
    ) FormattedPhoneNumbers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the above statement, the &lt;code&gt;REPLACE&lt;/code&gt; function is used to remove the brackets, dashes, and whitespaces from the &lt;code&gt;formatted_number&lt;/code&gt; field before undergoing the formatting process.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbK-jDwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/SHyamdLWcG-XUUs9EDR-YmfYiPqop-4EUo_eLfVBajvannfaLs-Rs0DYrUEi8zOJCcZMBhAn-q9azYBgDRNyXkmYMgi1-EaYJbJa-oOzKfg-H43MzFKe8DBMDDfrxFP9AOmbU3DH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbK-jDwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/SHyamdLWcG-XUUs9EDR-YmfYiPqop-4EUo_eLfVBajvannfaLs-Rs0DYrUEi8zOJCcZMBhAn-q9azYBgDRNyXkmYMgi1-EaYJbJa-oOzKfg-H43MzFKe8DBMDDfrxFP9AOmbU3DH" alt="Screenshot of query results." width="880" height="857"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-parts-of-a-phone-number"&gt;
  &lt;/a&gt;
  Extracting parts of a phone number
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;code&gt;LEFT&lt;/code&gt; and &lt;code&gt;RIGHT&lt;/code&gt; functions to specify and extract different parts of the phone number. In the following example, we will extract the area code of the phone number using the &lt;code&gt;LEFT&lt;/code&gt; function and the last four digits using the &lt;code&gt;RIGHT&lt;/code&gt; function based on the &lt;code&gt;num_formatted&lt;/code&gt; field.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    REPLACE(LEFT(formatted_number, 4), '(', '') As 'Area Code',
    RIGHT(formatted_number, 4) AS 'Last Four Digits'
FROM
    EmpDetails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the &lt;code&gt;REPLACE&lt;/code&gt; function is used to remove the bracket from the selected number block. The result of the query is shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0diCTznr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/q9y3zhnilW5anfcrCd7vma9yv2A9mqWqDPj9Mep7RJGt6P7KqtdgQFZkXu_3J_Qsvn3NA6bJc8oAvor_KlutuPM_Mxnw_LUocIUJAerLsENLFNPR4LoVratj3JxeGpYXOU9PiWYY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0diCTznr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/q9y3zhnilW5anfcrCd7vma9yv2A9mqWqDPj9Mep7RJGt6P7KqtdgQFZkXu_3J_Qsvn3NA6bJc8oAvor_KlutuPM_Mxnw_LUocIUJAerLsENLFNPR4LoVratj3JxeGpYXOU9PiWYY" alt="Query result in Arctype." width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-phone-numbers-from-a-text-block"&gt;
  &lt;/a&gt;
  Extracting phone numbers from a text block
&lt;/h3&gt;

&lt;p&gt;One of the most common tasks in the world of data cleaning is extracting phone numbers from a text block. The complexity and feasibility of this task will mostly depend on the composition of the text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-a-phone-number-with-regular-expressions"&gt;
  &lt;/a&gt;
  Extracting a phone number with regular expressions
&lt;/h3&gt;

&lt;p&gt;The easiest way to extract phone numbers is to utilize regular expressions to target the specific phone number formats. Extracting data has become far simpler with the introduction of functions like &lt;code&gt;REGEXP_SUBSTR&lt;/code&gt; in MySQL 8.0. We will be populating the details column with some phone numbers in different formats, as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWzFo69---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/URH-eI47WujCbzOd-iMSDw6pjIeZ_jrInGRqdAY40duKgLBohwoddkocn7m0ORZXjULHFLLU5VC0FDhlKPnMols0JZCvaZLN6BMJjb_cSzl0Nd-iGSOg5KKUMm-vKbeTuYGVMBqe" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWzFo69---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/URH-eI47WujCbzOd-iMSDw6pjIeZ_jrInGRqdAY40duKgLBohwoddkocn7m0ORZXjULHFLLU5VC0FDhlKPnMols0JZCvaZLN6BMJjb_cSzl0Nd-iGSOg5KKUMm-vKbeTuYGVMBqe" alt="Arctype showing query results." width="850" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifying-rows-with-matching-phone-numbers"&gt;
  &lt;/a&gt;
  Identifying Rows with Matching Phone Numbers
&lt;/h2&gt;

&lt;p&gt;First, we need to figure out which rows consist of data matching our requirements. In this case, the following regular expressions will be used on the details field.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any consecutive 10 digits&lt;/li&gt;
&lt;li&gt;Formatted number (XXX-XXX-XXXX)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    *
FROM
    EmpDetails
WHERE
    # Any 10 Digits
    details REGEXP '[[:digit:]]{10}'
    # Formatted Number (XXX-XXX-XXXX)
    OR details REGEXP '[0-9]{3}-[0-9]{3}-[0-9]{4}';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results of the query can be seen below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--359BAnyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/gr0M_4Igenf8SpYo-UipkxLodEw7Oj2Dbdv5RqQEjjqCUFsx7E9WFNMu7zp3dGBj9n_xLotlL2xioEWgGyRPok3HcFi6SG6SjH8xSfGWtxJCBqiIjXt5q-RESodCEAcVKOcVh0Y6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--359BAnyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/gr0M_4Igenf8SpYo-UipkxLodEw7Oj2Dbdv5RqQEjjqCUFsx7E9WFNMu7zp3dGBj9n_xLotlL2xioEWgGyRPok3HcFi6SG6SjH8xSfGWtxJCBqiIjXt5q-RESodCEAcVKOcVh0Y6" alt="Regexp query results screenshot." width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-the-phone-numbers"&gt;
  &lt;/a&gt;
  Extracting the phone numbers
&lt;/h2&gt;

&lt;p&gt;Since we have identified the rows, the next step is to extract the phone numbers. It can be done using the &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-substr"&gt;REGEXP_SUBSTR&lt;/a&gt; function to extract the substring which matches the given regular expression. As we need to query two different regular expressions, we will be using the &lt;a href="https://www.w3schools.com/sql/func_mysql_concat_ws.asp"&gt;CONCAT_WS&lt;/a&gt; function to combine the results of both expressions into a single column.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    emp_id,
    name,
    email,
    CONCAT_WS(
        '',
        REGEXP_SUBSTR(details, '^[0-9]+$', 1, 1, 'm'),
        REGEXP_SUBSTR(details, '[0-9]{3}-[0-9]{3}-[0-9]{4}', 1, 1, 'm')
    ) AS extracted_phone_numbers
FROM
    (
        SELECT
            *
        FROM
            EmpDetails
        WHERE
            details REGEXP '[[:digit:]]{10}'
            OR details REGEXP '[0-9]{3}-[0-9]{3}-[0-9]{4}'
) ExtractedDetails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of this operation can be seen below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2krFoSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/4H4EhB8hHKMbg39_i5NjVLPCMChbR797f76HxJ-LeXI2OxIHqOBpWNsgFzTIWh9R5KmkllxiEaMLt_LpqwQAGgXIVwA9mJkuUKN4Op10zQ9UXH5Ytbr9lG5AWCDqwGeoIUEZZ6pv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2krFoSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/4H4EhB8hHKMbg39_i5NjVLPCMChbR797f76HxJ-LeXI2OxIHqOBpWNsgFzTIWh9R5KmkllxiEaMLt_LpqwQAGgXIVwA9mJkuUKN4Op10zQ9UXH5Ytbr9lG5AWCDqwGeoIUEZZ6pv" alt="Screenshot of phone number extraction." width="880" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-multiple-phone-numbers-in-a-single-field"&gt;
  &lt;/a&gt;
  Handling multiple phone numbers in a single field
&lt;/h2&gt;

&lt;p&gt;To query results from a single field with multiple numbers, we need to create a stored procedure that loops through the desired field to capture all matching regex patterns. For instance, let's see how to extract multiple phone numbers from the details field of emp_id 1702 (Dan).&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELIMITER $$
CREATE PROCEDURE get_number_of_matches_full()
BEGIN
  DECLARE regex_match INT DEFAULT 1;
  DECLARE current_number INT DEFAULT 1;
  WHILE regex_match &amp;gt;= 1 DO
    CREATE TABLE IF NOT EXISTS extracted_numbers_table (
        `emp_id` int NOT NULL,
        `name` varchar(255) DEFAULT NULL,
        `email` varchar(255) DEFAULT NULL,
        `extracted_phone_num` varchar(255) DEFAULT NULL
    );
    INSERT INTO extracted_numbers_table (emp_id, name, email, extracted_phone_num)
    SELECT emp_id, name, email, REGEXP_SUBSTR(details, '[0-9]{3}-[0-9]{3}-[0-9]{4}', 1, current_number, 'm') FROM EmpDetails WHERE emp_id = 1702;
    SET current_number = current_number + 1;
    IF ((SELECT REGEXP_SUBSTR(details, '[0-9]{3}-[0-9]{3}-[0-9]{4}', 1, current_number, 'm') FROM EmpDetails WHERE emp_id = 1702) IS NULL) THEN
        SET regex_match = 0;
    END IF;
  END WHILE;
END $$

DELIMITER;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The result of this operation is shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeYKT-Bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/RFQF8Zl9riqJCxvQy7ITeuTb578Xd3Px2IodqkvWD3JT1E3Xw-kKPzWKUQIIF5zovG-CEo-LuG8QKtXOcKvov394gxQGLciADWU2Az_xVcogJI633S8D6pkGB187sB38gYhBbTeZ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeYKT-Bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/RFQF8Zl9riqJCxvQy7ITeuTb578Xd3Px2IodqkvWD3JT1E3Xw-kKPzWKUQIIF5zovG-CEo-LuG8QKtXOcKvov394gxQGLciADWU2Az_xVcogJI633S8D6pkGB187sB38gYhBbTeZ" alt="Query result in Arctype." width="880" height="703"&gt;&lt;/a&gt;&lt;br&gt;
In the above code block, we have created a stored procedure called &lt;code&gt;get_number_of_matches_full&lt;/code&gt;, which loops through the details field until all the regex matches are found on the specified row of the EmpDetails table. We are using the &lt;code&gt;REGEXP_SUBSTR&lt;/code&gt; function with the position argument to extract different matches. It updates by one at each loop run and saves the results on a newly created &lt;code&gt;extracted_numbers_table&lt;/code&gt;. Finally, the loop exits when a &lt;code&gt;NULL&lt;/code&gt; result is found.&lt;/p&gt;

&lt;p&gt;We can call this procedure and view the results by querying the &lt;code&gt;extracted_numbers_table&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CALL get_number_of_matches_full;

SELECT * FROM extracted_numbers_table;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And, shown again in Arctype:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usoirx-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/pv5RA9WI2JI2nQBdJhjscm-FLGzACvPQ2BtsynSSrFnrUPx3-MnQm-a1JiGmMLbwA3ge2Js22lptfat9YsueycFuzbybZSCc6s8lYeHtdQMwqYFbFTZ90b8n0uXmThiwKR2x_u5y" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usoirx-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/pv5RA9WI2JI2nQBdJhjscm-FLGzACvPQ2BtsynSSrFnrUPx3-MnQm-a1JiGmMLbwA3ge2Js22lptfat9YsueycFuzbybZSCc6s8lYeHtdQMwqYFbFTZ90b8n0uXmThiwKR2x_u5y" alt="Query results in Arctype." width="880" height="703"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;String operations in SQL are vital functions to clean and format data within a database. Moreover, string operations are the core component when dealing with valuable information such as phone numbers as they allow users to extract or manipulate phone numbers according to their requirements. However, it's important to remember that the exact functions available will change depending on the database type and version. Therefore, always remember to refer to the documentation to find out the available string operations and implement them to your heart's content. &lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
    </item>
    <item>
      <title>Build a data warehouse quickly with Amazon Redshift - Part 3 -  The final layer cake</title>
      <author>Wendy Wong</author>
      <pubDate>Tue, 14 Dec 2021 21:01:43 +0000</pubDate>
      <link>https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-part-3-the-final-layer-cake-5798</link>
      <guid>https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-part-3-the-final-layer-cake-5798</guid>
      <description>&lt;h2&gt;
  &lt;a href="#building-a-cloud-data-warehouse-and-business-intelligence-modernization"&gt;
  &lt;/a&gt;
  Building a cloud data warehouse and business intelligence modernization
&lt;/h2&gt;

&lt;p&gt;In this final tutorial for AWS Redshift I will explain how we can bake our cake and eat it too by loading data into the Redshift cluster through to creating data visualizations with AWS QuickSight.&lt;/p&gt;

&lt;p&gt;If you are reading this post for the first time, you may wish to read the last three tutorials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aws-builders/getting-started-with-aws-a-sweet-journey-5cjj"&gt;Getting Started with AWS - On the way to cloud&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-2op8"&gt;Build a data warehouse with AWS Redshift - Part 1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aws-builders/build-a-data-warehouse-quickly-with-amazon-redshift-create-an-amazon-redshift-cluster-part-2-3f64"&gt;Build a data warehouse with AWS Redshift - Part 2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quick Introduction&lt;/li&gt;
&lt;li&gt;Synopsis&lt;/li&gt;
&lt;li&gt;High level architecture&lt;/li&gt;
&lt;li&gt;Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNrbMV0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxxjry5t090xk0nx94v4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNrbMV0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxxjry5t090xk0nx94v4.png" alt="CB" width="150" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am an AWS Community Builder in data, a data scientist and also a Business Performance Analyst at Service NSW. I have consulted and instructed in data analytics and data science for government, financial services and startups for 6 years. It was at an AI startup and in Public Sector that I used Amazon services including Amazon S3, Amazon Sagemaker, AWS Glue, Amazon Redshift and Amazon QuickSight.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service NSW is part of Department of Customer Service&lt;/li&gt;
&lt;li&gt;A One stop shop NSW government agency&lt;/li&gt;
&lt;li&gt;Our vision to become the world’s most customer-centric government agency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#synopsis"&gt;
  &lt;/a&gt;
  Synopsis
&lt;/h2&gt;

&lt;p&gt;We built a well-architected modern data analytics pipeline with a fully-managed, petabyte-scale cloud data warehouse using Amazon Redshift under the Department of Customer Service using AWS Organization.&lt;/p&gt;

&lt;p&gt;With lake house architecture we integrated a data lake, data warehouse and business intelligence with security,  performance, elasticity, data velocity, cost effectiveness and governance to design a unified analytics platform for our organization-wide data architecture roadmap.&lt;/p&gt;

&lt;p&gt;Amazon Redshift has massively parallel processing (MPP) for fast and complex queries and can analyze all our data.&lt;/p&gt;

&lt;p&gt;The AWS services used to build our analytics roadmap were:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE2zNtfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnz2o5th3xe4vu4uwp0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE2zNtfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnz2o5th3xe4vu4uwp0g.png" alt="services used" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-level-architecture"&gt;
  &lt;/a&gt;
  High level architecture
&lt;/h2&gt;

&lt;p&gt;In a busy contact centre we serve customers and generate petabytpes of data in structured and un-structured data formats. One of our initial questions on the journey with AWS included how do we store all of this data? How do we create a data lake to also bring in external data from another data lake?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8euCuFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26r7owwmy6yqkoco8m68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8euCuFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26r7owwmy6yqkoco8m68.png" alt="Challenge" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Working in a sprint fashion, this greenfield government project included test, build and deploy. By understanding the current state we wanted to create a vision of the end state and how to improve customer experience for NSW citizens.&lt;/p&gt;

&lt;p&gt;Using a Miro board to sketch the high level architecture (it's ok to draw what you think might be the final solution and then consult and iterate) collaborating with platform teams and also consulting with AWS to develop a solution using AWS Cloud Formation template.&lt;/p&gt;

&lt;p&gt;With this greenfield project using my consulting hat, I helped our stakeholders develop the first use case, iterate and develop the next one and so forth. What is our minimum viable product? What are our blockers? IAM permissions and stopping and starting. Reading the database developer guide, testing with a sandbox environment and also working in a production environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-h7z9YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj37i4ek3py20c7rke1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-h7z9YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj37i4ek3py20c7rke1o.png" alt="high level solution" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-amazon-s3-data-ingestion-layer"&gt;
  &lt;/a&gt;
  1. Amazon S3 - Data Ingestion Layer
&lt;/h4&gt;

&lt;p&gt;In building a solution for the first business use case to ingest  data extracted from an external cloud and upload the csv files into folders within our Amazon S3 bucket (our data lake). Our team were given access to AWS S3 via IAM user roles under our AWS account.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-amazon-glue-studio-data-processing-layer"&gt;
  &lt;/a&gt;
  2. Amazon Glue Studio - Data Processing Layer
&lt;/h4&gt;

&lt;p&gt;Amazon Glue Studio was used to pre-process data from the 'source' Amazon S3 bucket stored in a csv file to extract, transform and load data back into a 'target' Amazon S3 bucket.&lt;/p&gt;

&lt;p&gt;Amazon Glue Studio is a great data manipulation tool or ETL to visually inspect data pre-processing steps and them if there are errors, and Python code is scripted by updating nodes and successfully completing information at each check point. There are AWS Glue Studio tutorials to get started and you may also watch on-demand sessions from AWS re:invent 2021.&lt;/p&gt;

&lt;p&gt;Dates can be updated from a string to a date data format quickly using AWS Glue Studio. At the time of writing this blog we are testing automated scripts to clean data from AWS S3 as our 'source'and AWS Redshift cluster as our 'target' and we are testing a sample table before a production solution is created.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-amazon-redshift-data-consumption-layer"&gt;
  &lt;/a&gt;
  3. Amazon Redshift - Data Consumption Layer
&lt;/h4&gt;

&lt;p&gt;A data engineer granted permissions to the AWS Redshift cluster role. Using the Query Editor, a connection to the database was created and a table was created using SQL.&lt;/p&gt;

&lt;p&gt;At the data consumption layer, data was loaded from an AWS S3 bucket into the AWS Redshift cluster using the COPY command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-amazon-quicksight-business-intelligence-and-dashboards"&gt;
  &lt;/a&gt;
  4. Amazon QuickSight - Business Intelligence and Dashboards
&lt;/h4&gt;

&lt;p&gt;Connect to the data stored in the Amazon Redshift cluster by connecting to the database using the credentials and import the data into Amazon QuickSight using SPICE(super-fast, parallel, in-memory calculation engine).&lt;/p&gt;

&lt;p&gt;Once data is loaded into SPICE, you may inspect the data using a preview feature. Once data is loaded you may create custom visualizations such as a bar chart and Amazon QuickSight will provide business intelligence informing you of the Top 10 and Bottom 10 insights of the selected data fields with a short narrative which is very useful to help you understand your data.&lt;/p&gt;

&lt;p&gt;Amazon QuickSight allows you to share your dashboard and schedule reports via email to select audiences and download the dashboard a a PDF.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-use-a-lake-house-approach"&gt;
  &lt;/a&gt;
  Why use a Lake house approach?
&lt;/h4&gt;

&lt;p&gt;We have the task to improve customer experience to understand NSW citizens by building a data architecture roadmap to include business intelligence, reporting with structured, semi-structured and unstructured data and building machine learning capability for sentiment analysis and topic modelling&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0DPqZMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr00vfcg232f6nhm2ntk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0DPqZMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr00vfcg232f6nhm2ntk.png" alt="Lake house" width="880" height="839"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of using a lake house approach included: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyze all our data, unified data access &lt;/li&gt;
&lt;li&gt;Cost-effective&lt;/li&gt;
&lt;li&gt;Scalable workloads&lt;/li&gt;
&lt;li&gt;Run fast and complex queries&lt;/li&gt;
&lt;li&gt;Access to analytical services for ETL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A checklist of business requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tableau Server and Amazon Redshift connectors&lt;/li&gt;
&lt;li&gt;Fast SQL query performance&lt;/li&gt;
&lt;li&gt;Unstructured data can be stored in Amazon S3 data lake&lt;/li&gt;
&lt;li&gt;Fully managed enterprise data warehouse on AWS&lt;/li&gt;
&lt;li&gt;Based on PostgreSQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#amazon-redshift-architecture"&gt;
  &lt;/a&gt;
  Amazon Redshift Architecture
&lt;/h4&gt;

&lt;p&gt;Amazon Redshift is an enterprise data warehouse fully managed on AWS. Customer thinks about servers. How much RAM? How much CPU is needed?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deployment Considerations: Good data model, Optimize Amazon Redshift Cluster. Columnar storage, fewer joins, denormalizing table schemas and keeping columns sizes in tables as narrow as possible. All of these will improve query performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-XSlcgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gl0xma4hbpevjkmg8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-XSlcgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gl0xma4hbpevjkmg8r.png" alt="archi" width="618" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client applications:  Amazon Redshift integrates with ETL and BI&lt;/li&gt;
&lt;li&gt;Connections: Amazon Redshift communicates with client applications using JDBC and ODBC drivers for PostgreSQL e.g. Tableau and Pentaho.&lt;/li&gt;
&lt;li&gt;Leader Node: Communicates with compute nodes to perform database operations.&lt;/li&gt;
&lt;li&gt;Compute Nodes: Leader node compiles code the execution plan and assigns the code to individual compute nodes.&lt;/li&gt;
&lt;li&gt;Node Slices: A compute node is partitioned into slices. Each node processes a portion of the workload assigned to the node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Columnar storage for tables optimizes analytic query performance to drastically reduces the overall disk I/O requirements and the amount of data you need to load from disk.&lt;/p&gt;

&lt;p&gt;With massively parallel processing (MPP), Amazon Redshift distributes the rows of a table to the compute nodes so data can be processed in parallel.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#amazon-redshift-cluster"&gt;
  &lt;/a&gt;
  Amazon Redshift Cluster
&lt;/h4&gt;

&lt;p&gt;The Amazon Redshift cluster was launched and configured using Cloud Formation template.&lt;br&gt;
The component details of the cluster included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 cluster, 1 leader node and 3 compute nodes&lt;/li&gt;
&lt;li&gt;Node type: dc2.large with storage 160 GB/node. $0.25/node/hour &lt;/li&gt;
&lt;li&gt;DC2 high performance&lt;/li&gt;
&lt;li&gt;Cluster permissions: IAM role created for the Amazon Redshift role for our IAM User Group&lt;/li&gt;
&lt;li&gt;Cluster Details:  Database details created with database port number 5439&lt;/li&gt;
&lt;li&gt;Network and security: Two subnets created in two different Availability zones to improve fault tolerance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--un1KTF7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paedf7kbaeo48ztdc09o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--un1KTF7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paedf7kbaeo48ztdc09o.png" alt="redshift solution" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-create-an-amazon-redshift-cluster"&gt;
  &lt;/a&gt;
  Demo - create an Amazon Redshift cluster
&lt;/h2&gt;

&lt;p&gt;Step 1: Login in to AWS Management Console&lt;br&gt;
In the Amazon Management Console you may type Amazon Redshift in the search bar.&lt;/p&gt;

&lt;p&gt;Step 2: Navigate to Amazon Redshift home page&lt;br&gt;
 Click on Create cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XC4aFigm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grj9eh0z0c4dvubqopt0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XC4aFigm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grj9eh0z0c4dvubqopt0.png" alt="slide 1" width="880" height="1152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3: In Cluster configuration provide a name for your cluster&lt;br&gt;
If your organization has never created an Amazon Redshift cluster you may access the Free Tier, otherwise  click Production&lt;/p&gt;

&lt;p&gt;Step 4: Configure cluster:&lt;br&gt;
Cluster identifier&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node type: dc2.large&lt;/li&gt;
&lt;li&gt;Nodes: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 5: Database configuration:&lt;br&gt;
Master username:&lt;br&gt;
Master password: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--buU1PwVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dixsllq85zf5zvtuqkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buU1PwVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dixsllq85zf5zvtuqkr.png" alt="slide 2" width="880" height="907"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 6: Configure Cluster Permissions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In order for Amazon Redshift to have access to Amazon S3 to load data an IAM role is created to access to cluster via a Redshift role&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 7: Security Group&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPC and security group attached to the VPC will be created by your administrator&lt;/li&gt;
&lt;li&gt;Subnet Group is also created by your administrator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQqgzqse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohvezt137penimjtuy8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQqgzqse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohvezt137penimjtuy8p.png" alt="slide 3" width="880" height="807"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 8: Click close to create cluster&lt;br&gt;
It will take a few minutes for the  cluster to be provisioned and you can check the status of the blue banner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yRD2Rx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s49veyh0yblgyga9tbbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRD2Rx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s49veyh0yblgyga9tbbl.png" alt="slide 4" width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 9:  Cluster created&lt;br&gt;
After your cluster has successfully been created, the banner message will turn green and the created cluster will have a green tick with the wording 'available'.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eKbccW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfbeaukh2y5l8ai8shbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eKbccW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfbeaukh2y5l8ai8shbp.png" alt="slide 5" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 10: Inspect the properties of  your Redshift cluster&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may even download any JDBC and ODBC drivers&lt;/li&gt;
&lt;li&gt;You may resize the cluster if required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xo8DG9Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scm2mktliyx3rbvz93av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xo8DG9Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scm2mktliyx3rbvz93av.png" alt="slide 6" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 11: Click Query Editor&lt;br&gt;
Connect to the database&lt;br&gt;
Enter the database credentials that were used to create the Amazon Redshift cluster&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvXh2W_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0fyt5kybxu2nq8xnn71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvXh2W_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0fyt5kybxu2nq8xnn71.png" alt="slide 7" width="880" height="842"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 12: Create a Table&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Query Editor uses standard SQL commands to create a table.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQn9nwjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fscae7knu2it5gbl3kns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQn9nwjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fscae7knu2it5gbl3kns.png" alt="slide 8" width="880" height="679"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 13: Load data from Amazon S3 into Amazon Redshift &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the COPY command. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gYZJGjM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/851ujqq3xplbo46nv3cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gYZJGjM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/851ujqq3xplbo46nv3cm.png" alt="slide 9" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 14: Fast Querying&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL queries may be saved and scheduled&lt;/li&gt;
&lt;li&gt;SQL queries can return results in milliseconds&lt;/li&gt;
&lt;li&gt;Export results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbXlooin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1ptymejg7m5oeozvp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbXlooin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1ptymejg7m5oeozvp5.png" alt="slide 10" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 15: Connect to Amazon Redshift database&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upload data by connecting to the Amazon Redshift cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 16: Review the data &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preview and format data in Amazon QuickSight before it is loaded into SPICE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXqHQ1Xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkfkubx4kwd1binxa6l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXqHQ1Xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkfkubx4kwd1binxa6l2.png" alt="slide 11" width="880" height="881"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 17: SPICE and Amazon QuickSight&lt;/p&gt;

&lt;p&gt;Once data is stored in SPICE, data visualizations can be created for reporting dashboards to provide business insights.&lt;/p&gt;

&lt;p&gt;Amazon QuickSight can provide the Top 10 and Bottom 10 insights and a narrative using machine learning to help you understand your data.&lt;/p&gt;

&lt;p&gt;Dashboards can be easily shared via email and reports may be scheduled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hL8vQOBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuhidr2b5hdcypfyuxct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hL8vQOBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuhidr2b5hdcypfyuxct.png" alt="slide 12" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may also watch on-demand from AWS re:Invent to learn more about the new add-on enterpise feature for AWS QuickSight Q that can help you author dashboards based on topics using natural language processing which is very exciting!&lt;/p&gt;

&lt;p&gt;You can read the blog &lt;a href="https://aws.amazon.com/blogs/aws/amazon-quicksight-q-business-intelligence-using-natural-language-questions/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXq7XW3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e48td82bx3cs7qxc4lbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXq7XW3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e48td82bx3cs7qxc4lbj.png" alt="slide 13" width="880" height="707"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/mgmt/query-databases.html"&gt;Query the database&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/redshift-dg.pdf"&gt;Amazon Redshift Database Developer Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/c_loading-data-best-practices.html"&gt;Amazon Redshift best practices for loading data&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/c_high_level_system_architecture.html"&gt;Data warehouse system architecture&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay informed with the latest AWS product updates from AWS Re:invent 2021:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Re-invent 2021 announcements &lt;a href="https://aws.amazon.com/blogs/aws/top-announcements-of-aws-reinvent-2021/"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until next time, happy learning!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>analytics</category>
      <category>aws</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I come up with project ideas (and never faced tutorial hell)</title>
      <author>𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻</author>
      <pubDate>Tue, 14 Dec 2021 20:33:03 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287</link>
      <guid>https://dev.to/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287</guid>
      <description>&lt;p&gt;I often read the term &lt;strong&gt;"tutorial hell "&lt;/strong&gt; and I always wonder why so many people get stuck while I have so many ideas in my head for my own projects. Let me explain why I've never ended up in tutorial hell and how I come up with so many different ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorials"&gt;
  &lt;/a&gt;
  Tutorials
&lt;/h2&gt;

&lt;p&gt;Of course, I watched a lot of tutorials during my learning journey, and I still do to gain more knowledge about certain things and improve my skills on a daily basis.&lt;/p&gt;

&lt;p&gt;But even as I'm watching and following along with the tutorial, I'm already taking in the good things I could use from that tutorial in my head and thinking about how I could use them in one of my own projects.&lt;/p&gt;

&lt;p&gt;A good example is the &lt;strong&gt;To Do List&lt;/strong&gt; tutorial, which everyone seems to have enough of already. And actually, I don't quite understand. If you watch a really good tutorial on how to create a to-do list, you learn one of the most important programming skills you need to understand to get a job in tech: CRUD. &lt;/p&gt;

&lt;p&gt;And since everyone knows how a to-do list works, this is the best way to learn and understand CRUD functionality.&lt;/p&gt;

&lt;p&gt;In case you don't know what &lt;strong&gt;CRUD&lt;/strong&gt; is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create (a task)&lt;/li&gt;
&lt;li&gt;Read (view/read the task)&lt;/li&gt;
&lt;li&gt;Update (the task)&lt;/li&gt;
&lt;li&gt;Delete (delete the task)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This logic appears in so many applications that I was happy to learn about it while creating a to-do list and later use it in my own projects (like &lt;a href="https://github.com/YuriDevAT/nikki-my-diary"&gt;Nikki - the online diary&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-ideas"&gt;
  &lt;/a&gt;
  Project ideas
&lt;/h2&gt;

&lt;p&gt;I'm sure everyone has a hobby or interest in certain things. My interests are Japanese language and culture and music. I studied musicology and Japanese studies, with a focus on movies/video games and their music.&lt;/p&gt;

&lt;p&gt;I therefore draw all my ideas from these hobbies, and there are many. Here are some examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a name converter from latin letters to kanji&lt;/li&gt;
&lt;li&gt;a memory game with kanji&lt;/li&gt;
&lt;li&gt;a zodiac calculator&lt;/li&gt;
&lt;li&gt;logo creation of a fictional company I saw in an anime&lt;/li&gt;
&lt;li&gt;a Pokédex with the PokeApi for the 25th anniversary of Pokémon&lt;/li&gt;
&lt;li&gt;a tribute page with various features of my favorite directors&lt;/li&gt;
&lt;li&gt;an online diary where users can pin their thoughts, using internationalization&lt;/li&gt;
&lt;li&gt;and many more&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a React Developer I was able to use many different features and logics in my projects and therefore discuss them in interviews, from useState/useEffect to ContextAPI, CRUD (localStorage and Google Firebase), internationalization, SEO, PWA, various API (data fetching), UI design, a11y, thumbnail creation, and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, all these projects are an inspiration and a result of my hobbies. They have many different functions and represent my personality. They make my projects look unique to recruiters and that's what everyone out there says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stop cloning Netflix or Instagram (except for learning purposes) and start creating your own projects that show your personality and make you stand out, make you memorable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So think about what you are interested in, what your personality looks like and start creating projects that you love to talk about because they are unique and created by you.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>1 + '2'? 3? 12! </title>
      <author>Tom Smykowski</author>
      <pubDate>Tue, 14 Dec 2021 20:02:52 +0000</pubDate>
      <link>https://dev.to/tomaszs2/1-2-3-12-fl2</link>
      <guid>https://dev.to/tomaszs2/1-2-3-12-fl2</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-8m3emUdL7M"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Automate Text Message Reminders with Airtable, Twilio Studio, and JavaScript</title>
      <author>Lizzie Siegle</author>
      <pubDate>Tue, 14 Dec 2021 20:01:42 +0000</pubDate>
      <link>https://dev.to/twilio/automate-text-message-reminders-with-airtable-twilio-studio-and-javascript-i7e</link>
      <guid>https://dev.to/twilio/automate-text-message-reminders-with-airtable-twilio-studio-and-javascript-i7e</guid>
      <description>&lt;p&gt;In my last blog post on Airtable, &lt;a href="https://www.twilio.com/blog/send-sms-from-airtable-in-1-minute"&gt;I showed how to send a text message in under one minute with no code using the Send SMS Airtable App&lt;/a&gt;--but did you know that you can also &lt;a href="https://www.airtable.com/developers/scripting"&gt;write scripts in Airtable&lt;/a&gt; and &lt;a href="https://support.airtable.com/hc/en-us/articles/360050974153-Automations-overview"&gt;make automations that run in a variety of intervals&lt;/a&gt;? In this post you’ll learn to automate text messages from Airtable using &lt;a href="https://www.twilio.com/studio"&gt;Twilio Studio&lt;/a&gt; and JavaScript.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJk_-NVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Screen_Shot_2021-12-13_at_1.06.40_PM.width-1600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJk_-NVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Screen_Shot_2021-12-13_at_1.06.40_PM.width-1600.png" alt="SMS image example in 15min intervals" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A Twilio account - &lt;a href="http://www.twilio.com/referral/iHsJ5D"&gt;sign up for a free one here and receive an extra $10 if you upgrade through this link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Your Twilio Account SID and Auth Token: &lt;a href="https://www.twilio.com/console"&gt;find it in your account console here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;API Key SID and API Key Secret: &lt;a href="https://www.twilio.com/console/runtime/api-keys"&gt;generate them here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Twilio number with SMS capabilities (this &lt;a href="https://www.twilio.com/docs/conversations/quickstart#sign-up-for-twilio-and-provision-your-first-sms-enabled-number"&gt;quickstart will help you get going&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://airtable.com/"&gt;Airtable account&lt;/a&gt; with a Pro or Enterprise plan–&lt;a href="https://support.airtable.com/hc/en-us/articles/360042806493-How-does-the-Pro-trial-work-"&gt;more on the Pro Trial here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re going to need the &lt;strong&gt;Airtable API key&lt;/strong&gt; and a &lt;strong&gt;base ID&lt;/strong&gt; to access the base from your app. You will get the API key from &lt;a href="https://airtable.com/account"&gt;your account page&lt;/a&gt;. You will get the base ID from the &lt;a href="https://airtable.com/api"&gt;auto-generated API documentation&lt;/a&gt; when you click on the base that you want to use (&lt;em&gt;Airtable x Twilio blog&lt;/em&gt; if you are using the &lt;a href="https://airtable.com/invite/l?inviteId=inv016fVue6nLssoQ&amp;amp;inviteToken=9ff959fd77cd32ecc337d07521bdd02264e5ffc82ca3a23a86d8227edc8fab4e&amp;amp;utm_source=email"&gt;copy of this project's Airtable base&lt;/a&gt;). You can retrieve it from either the URL or the &lt;em&gt;introduction&lt;/em&gt; section.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LR16XaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/waVOdYnKKxj4eUpUJKpL76FkOg8wmmI5ESz7Sg1pKIcJZ.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LR16XaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/waVOdYnKKxj4eUpUJKpL76FkOg8wmmI5ESz7Sg1pKIcJZ.width-1000.png" alt="get Airtable base ID" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup-your-twilio-studio-flow"&gt;
  &lt;/a&gt;
  Setup your Twilio Studio Flow
&lt;/h3&gt;

&lt;p&gt;In your &lt;a href="https://console.twilio.com/us1/develop/studio/flows?frameUrl=/console/studio/flows"&gt;Twilio Studio Console&lt;/a&gt;, make a new Studio Flow. When asked to use a template, select &lt;em&gt;from scratch&lt;/em&gt;. I called mine &lt;em&gt;Hydrate&lt;/em&gt;. From the widget library in the Studio Canvas, drag and drop a &lt;strong&gt;Send Message&lt;/strong&gt; widget and connect it to the &lt;strong&gt;Rest API&lt;/strong&gt; trigger. Click the widget and set its &lt;strong&gt;Config's Message Body&lt;/strong&gt; to be&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;{{trigger.request.parameters.msg}}&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
--this will be a message that we send from Airtable.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtK5iot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/MXrQYjpY4s61qHnyLupzXzYW3cnBqlWmmEAWOVdhPHdzK.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtK5iot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/MXrQYjpY4s61qHnyLupzXzYW3cnBqlWmmEAWOVdhPHdzK.width-1000.png" alt="twilio studio flow to send message" width="880" height="483"&gt;&lt;/a&gt;&lt;br&gt;
Save and publish your Airtable flow, and take note of its SID. This can be found next to each flow in your &lt;a href="https://console.twilio.com/us1/develop/studio/flows?frameUrl=/console/studio/flows"&gt;list of flows&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup-your-airtable"&gt;
  &lt;/a&gt;
  Setup your Airtable
&lt;/h3&gt;

&lt;p&gt;Copy this &lt;a href="https://airtable.com/invite/l?inviteId=inv016fVue6nLssoQ&amp;amp;inviteToken=9ff959fd77cd32ecc337d07521bdd02264e5ffc82ca3a23a86d8227edc8fab4e&amp;amp;utm_source=email"&gt;ready-made Airtable base here&lt;/a&gt; and select the &lt;em&gt;Hydr9&lt;/em&gt; tab. It contains a &lt;em&gt;Message&lt;/em&gt; column containing messages reminding you to drink water. It also includes their corresponding &lt;em&gt;Sent&lt;/em&gt; booleans of &lt;a href="https://support.airtable.com/hc/en-us/articles/360042311954-Checkbox-field"&gt;type Checkbox&lt;/a&gt;. To begin, make sure all the records here do not have any checkmarks. After a message is sent, the corresponding record will contain a checkmark in the &lt;em&gt;Sent&lt;/em&gt; column.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gNe0NImd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/_5gP2NkVj9D6iRay0nNCxFTFEkaco38dUZSJSpeqUFvA0.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gNe0NImd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/_5gP2NkVj9D6iRay0nNCxFTFEkaco38dUZSJSpeqUFvA0.width-1000.png" alt="Airtable table with columns, messages, sent bool" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#make-your-airtable-automation"&gt;
  &lt;/a&gt;
  Make your Airtable Automation
&lt;/h3&gt;

&lt;p&gt;Airtable automations "allow you to configure custom trigger-action workflows directly within your Airtable base", letting you automate repetitive tasks. For &lt;a href="https://support.airtable.com/hc/en-us/articles/360050974153-Automations-overview"&gt;more information on automations in Airtable, read this page&lt;/a&gt;. To get started, click &lt;em&gt;Automations&lt;/em&gt; in the top right corner&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVBjKgw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/3zyYMZuDXcOBTFSTtT44ugmVoDSvOQGOuUlaIHB4Gfbvg2.width-500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVBjKgw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/3zyYMZuDXcOBTFSTtT44ugmVoDSvOQGOuUlaIHB4Gfbvg2.width-500.png" alt="Automations button in top right corner" width="494" height="114"&gt;&lt;/a&gt;&lt;br&gt;
followed by “Create a custom automation” in the &lt;em&gt;Suggested automations&lt;/em&gt; section.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7GDHemK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/mYhfA1MykAJxNGgaNA4ToeqIgaEqdY-y0_RqSvXkPYD4a.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7GDHemK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/mYhfA1MykAJxNGgaNA4ToeqIgaEqdY-y0_RqSvXkPYD4a.width-1000.png" alt="suggested automations button" width="654" height="288"&gt;&lt;/a&gt;&lt;br&gt;
Give your automation a name (something like &lt;em&gt;hydration reminder&lt;/em&gt;). For the trigger that will initiate the automation, click &lt;strong&gt;At a scheduled time&lt;/strong&gt;. This will run the automation every x-number of minutes, hours, days, weeks...it's up to you!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzw2HQrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/KGc1UeH7HNuU4q1pcpInTOkYJgJvtS5B7T47xCgpJmoyl.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzw2HQrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/KGc1UeH7HNuU4q1pcpInTOkYJgJvtS5B7T47xCgpJmoyl.width-1000.png" alt="trigger at a scheduled time" width="880" height="719"&gt;&lt;/a&gt;&lt;br&gt;
For the purposes of this tutorial, under &lt;em&gt;Interval type&lt;/em&gt;Minutes and for &lt;em&gt;Timing&lt;/em&gt; pick &lt;strong&gt;every 15 minutes&lt;/strong&gt;. You could have the automation start maybe 10 minutes from the current time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4OK5foI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Wd9pGqA0T5sUU68aJ5r8DXpVM6ilX-HE4nyud1i8Ybhj3.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4OK5foI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Wd9pGqA0T5sUU68aJ5r8DXpVM6ilX-HE4nyud1i8Ybhj3.width-1000.png" alt="trigger timing properties" width="880" height="569"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#add-actions-to-your-automations"&gt;
  &lt;/a&gt;
  Add Actions to your Automations
&lt;/h3&gt;

&lt;p&gt;After the Airtable automation is triggered, we're going to add some &lt;a href="https://support.airtable.com/hc/en-us/sections/360009376134-Automation-actions"&gt;actions&lt;/a&gt;. Click &lt;em&gt;Add action&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvYozkK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/1F5bylqHcr0rz9KAa-cXNRsKquqEQsyMpUd2Ds-9UdFUc.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvYozkK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/1F5bylqHcr0rz9KAa-cXNRsKquqEQsyMpUd2Ds-9UdFUc.width-1000.png" alt="add action" width="880" height="360"&gt;&lt;/a&gt;&lt;br&gt;
First, select &lt;em&gt;Find records&lt;/em&gt; to search for records in our Airtable base &lt;em&gt;hydr9&lt;/em&gt; of messages. Select the &lt;strong&gt;Hydr9&lt;/strong&gt; table, and then under &lt;em&gt;Find records based on&lt;/em&gt;, choose &lt;strong&gt;Condition&lt;/strong&gt; where &lt;em&gt;Sent&lt;/em&gt; is unchecked.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6f2m3qfT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/dK8vFWAa-GjiVjr2ivnqCKr5yv6KjWOs_u-8u9hzO7OOO.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6f2m3qfT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/dK8vFWAa-GjiVjr2ivnqCKr5yv6KjWOs_u-8u9hzO7OOO.width-1000.png" alt="find records where sent is unchecked" width="880" height="633"&gt;&lt;/a&gt;&lt;br&gt;
Each time the automation runs, it will search the Airtable base for records that have not been sent yet. You can test this action and see that six records were found matching that condition:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtRO78ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/-oEW9JZXfmNXOrOtC-8K6CtJc9m4u_G_HuaACEcKXySUE.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtRO78ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/-oEW9JZXfmNXOrOtC-8K6CtJc9m4u_G_HuaACEcKXySUE.width-1000.png" alt="finds records" width="820" height="400"&gt;&lt;/a&gt;&lt;br&gt;
Now add another action–this time, it's &lt;strong&gt;Run a script&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;strong&gt;You need a Pro or Enterprise Airtable account to run a script in Airtable.&lt;/strong&gt;: &lt;br&gt;
Before we write some JavaScript, we need to add some &lt;strong&gt;Input variables&lt;/strong&gt; on the left. Click &lt;strong&gt;+ Add input variable&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---XTNAB07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/GRFHs88H3niMihmITPGfKWIEGtu-OfkfnLQUvovGU5-Fe.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XTNAB07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/GRFHs88H3niMihmITPGfKWIEGtu-OfkfnLQUvovGU5-Fe.width-1000.png" alt="add input vars" width="828" height="704"&gt;&lt;/a&gt;&lt;br&gt;
The input variables we're going to add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name: &lt;strong&gt;TWILIO_STUDIO_SID&lt;/strong&gt;, Value: &lt;em&gt;{your Twilio Studio Flow SID from when we setup your Twilio Studio Flow}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;TWILIO_API_KEY&lt;/strong&gt;, Value: &lt;em&gt;{your Twilio API SID Key generated under Prerequisites}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;TWILIO_API_SECRET&lt;/strong&gt;, Value: &lt;em&gt;{your Twilio API Secret Key generated under Prerequisites}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;TWILIO_PHONE_NUMBER&lt;/strong&gt;, Value: &lt;em&gt;{your Twilio Phone Number}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;TWILIO_ACCOUNT_SID&lt;/strong&gt;, Value: &lt;em&gt;{your Twilio Account SID}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;TWILIO_AUTH_TOKEN&lt;/strong&gt;, Value: &lt;em&gt;{your Twilio Auth Token}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;AIRTABLE_BASE_ID&lt;/strong&gt;, Value: &lt;em&gt;{your Airtable base ID from Prerequisites}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;AIRTABLE_API_KEY&lt;/strong&gt;, Value: &lt;em&gt;{your Airtable API key from Prerequisites}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;MY_PHONE_NUMBER&lt;/strong&gt;, Value: &lt;em&gt;{your personal phone number}&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;numRecordsFound&lt;/strong&gt;, Value: &lt;em&gt;{click the blue plus button next to Value, click Continue next to Records (from Step 2: Find records), again click Continue next to Records, and then click Insert next to &amp;lt;&amp;gt;length under list properties.&lt;em&gt;&lt;/em&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;recordsFoundMsgList&lt;/strong&gt;, Value: &lt;em&gt;{click the blue plus button next to Value, click Continue next to Records (from Step 2: Find records), again click Continue next to Records, then click Continue next to &amp;lt;&amp;gt;Field values under Make a new list of, and finally click Insert next to &amp;lt;&amp;gt;Message.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Name: &lt;strong&gt;recordsFoundIds&lt;/strong&gt;, Value: &lt;em&gt;{click the blue plus button next to Value, click Continue next to Records (from Step 2: Find records), again click Continue next to Records, then click Insert next to Airtable Record ID under Make a new list of...}&lt;/em&gt;
That's a lot of input variables! We’ll import them into our Airtable script so we can use them by adding onto line one:
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AIRTABLE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AIRTABLE_BASE_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_STUDIO_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MY_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundMsgList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numRecordsFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundIds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Beneath that line, let's make a function to create a Studio Execution. We also include a helper function &lt;em&gt;b2a&lt;/em&gt; to help with encoding and decoding base64.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;studioCreateExecution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twilioStudioSid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twilioAccountSid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twilioAuthToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b2a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twilioAccountSid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twilioAuthToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CREATE_EXECUTION_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://studio.twilio.com/v2/Flows/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twilioStudioSid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Executions`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CREATE_EXECUTION_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/x-www-form-urlencoded;charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Basic &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Credits: https://gist.github.com/oeon/0ada0457194ebf70ec2428900ba76255&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b2a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we want to get the Airtable table (&lt;em&gt;Hydr9&lt;/em&gt;), check the &lt;em&gt;Sent&lt;/em&gt; field to see if there are any checkmarks, and make an array called &lt;code&gt;recordMsgsentIdArr&lt;/code&gt; full of the IDs of the records containing messages we send.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hydr9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectRecordsAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;recordMsgSentIdArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we make the &lt;em&gt;driver()&lt;/em&gt; method which contains the meat of our Airtable script. If no records are found where &lt;em&gt;Sent&lt;/em&gt; is unchecked in the last step/action (meaning all the messages have been sent once), we reset the table so that all the records in &lt;em&gt;Sent&lt;/em&gt; are unchecked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`numRecordsFound &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;numRecordsFound&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numRecordsFound&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateRecordAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;    
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Else, we’ll want to get the first record in the array whose messages have not been sent yet (this will be the message sent) and create a payload to return. The payload contains information needed to send a SMS in Twilio: a &lt;code&gt;to&lt;/code&gt; phone number, a &lt;code&gt;from&lt;/code&gt; Twilio phone number, and a message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundMsgList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//first in array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;To&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MY_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;From&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Parameters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we grab the ID of the record sent and add it to the &lt;code&gt;recordMsgSentIdArr&lt;/code&gt; array, create the Studio Execution, and return both those variables so they can be used in the next Airtable automation action with &lt;code&gt;output.set&lt;/code&gt;. You can &lt;a href="https://www.airtable.com/developers/scripting/api/output"&gt;learn more about outputting information in Airtable automations here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;recordMsgSentId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//first in array&lt;/span&gt;
    &lt;span class="nx"&gt;recordMsgSentIdArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recordMsgSentId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;studioCreateExecution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_STUDIO_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recordMsgSentId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recordMsgSentId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete script code is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AIRTABLE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AIRTABLE_BASE_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_STUDIO_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MY_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundMsgList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numRecordsFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundIds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;studioCreateExecution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twilioStudioSid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twilioAccountSid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;twilioAuthToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basicAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b2a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twilioAccountSid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twilioAuthToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CREATE_EXECUTION_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://studio.twilio.com/v2/Flows/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twilioStudioSid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Executions`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CREATE_EXECUTION_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/x-www-form-urlencoded;charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Basic &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;basicAuth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Credits: https://gist.github.com/oeon/0ada0457194ebf70ec2428900ba76255&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b2a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hydr9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectRecordsAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;recordMsgSentIdArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`numRecordsFound &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;numRecordsFound&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numRecordsFound&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateRecordAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;    
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundMsgList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//first in array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;To&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MY_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;From&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Parameters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;recordMsgSentId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recordsFoundIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//first in array&lt;/span&gt;
    &lt;span class="nx"&gt;recordMsgSentIdArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recordMsgSentId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;studioCreateExecution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_STUDIO_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_ACCOUNT_SID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recordMsgSentId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recordMsgSentId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you click the blue &lt;em&gt;Test&lt;/em&gt; button in the upper-right corner, you should see an output like this containing the &lt;em&gt;numRecordsFound&lt;/em&gt;, &lt;em&gt;recordsFoundMsgList&lt;/em&gt;, &lt;em&gt;recordsFoundIds&lt;/em&gt;, &lt;em&gt;Result&lt;/em&gt;, and &lt;em&gt;recordMsgsentId&lt;/em&gt; and you should also get a text message containing the first Record message with no checkmark:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3V6RP53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/RFZTHD4MFS_mlXGe7cZJPoaC3TO0sXaHWehFK47LPPoWI.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3V6RP53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/RFZTHD4MFS_mlXGe7cZJPoaC3TO0sXaHWehFK47LPPoWI.width-1000.png" alt="test output" width="821" height="795"&gt;&lt;/a&gt;&lt;br&gt;
This is all good and fun–a text message was sent! However, what happens when all the messages are sent and &lt;em&gt;numRecordsFound&lt;/em&gt; hits 0? Add another action below &lt;em&gt;Run a script&lt;/em&gt; of type &lt;em&gt;Update record&amp;gt;/em&amp;gt;. Select the &lt;em&gt;Hydr9&lt;/em&gt; &lt;strong&gt;Table&lt;/strong&gt; and under &lt;strong&gt;Record&lt;/strong&gt; id click the blue plus button and follow the steps in the gif below to select &lt;em&gt;recordMsgSentId&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEAdnu4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/FTYfo2vGGu6gsTU6_QgpnzBnM-IWWDSgX1OZAnpQHLTDiZNFiMLFzqvwlH-6_PDD10pXAOgy1cPbh1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEAdnu4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/original_images/FTYfo2vGGu6gsTU6_QgpnzBnM-IWWDSgX1OZAnpQHLTDiZNFiMLFzqvwlH-6_PDD10pXAOgy1cPbh1" alt="get record id from Airtable in an Action" width="822" height="278"&gt;&lt;/a&gt;&lt;br&gt;
Under &lt;em&gt;Fields&lt;/em&gt;, click &lt;strong&gt;+ Choose field&lt;/strong&gt; followed by &lt;strong&gt;Sent&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XgVhVLIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/e-jKIMMmobwYm-_kvYSYT37q7kiqbxQ_EefpyKQXH-pai.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XgVhVLIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/e-jKIMMmobwYm-_kvYSYT37q7kiqbxQ_EefpyKQXH-pai.width-1000.png" alt="select Sent" width="810" height="164"&gt;&lt;/a&gt;&lt;br&gt;
In the box, type in &lt;em&gt;true&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eyaOiSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/7fPmnzIxoBkA-iWeyf6GQe8mhzoMsd7zcBzIacz7aAQMa.width-1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eyaOiSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/7fPmnzIxoBkA-iWeyf6GQe8mhzoMsd7zcBzIacz7aAQMa.width-1000.png" alt="true typed into box" width="810" height="83"&gt;&lt;/a&gt;&lt;br&gt;
If all the messages have been sent (each record contains a check), the table will update the records so that none will contain a check and the automation can start over. Now you should get text messages every 15 minutes or until you turn off your automation! You can of course change the frequency in which the automation runs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJk_-NVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Screen_Shot_2021-12-13_at_1.06.40_PM.width-1600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJk_-NVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://twilio-cms-prod.s3.amazonaws.com/images/Screen_Shot_2021-12-13_at_1.06.40_PM.width-1600.png" alt="SMS sent at 15 mins intervals" width="880" height="502"&gt;&lt;/a&gt;&lt;br&gt;
Do you prefer learning via video more? &lt;a href="https://www.tiktok.com/@lizziepikachu/video/7038420979147656495"&gt;Check out this TikTok summarizing this tutorial&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Airtable automations make it easy to automate actions and scripts. Instead of hitting a Twilio Studio Flow, you could write a script to hit a &lt;a href="https://console.twilio.com/us1/develop/twiml-bins/twiml-bins?"&gt;TwiML bin&lt;/a&gt; or a &lt;a href="https://console.twilio.com/us1/develop/functions/overview"&gt;Twilio Function&lt;/a&gt;, and send bulk automated &lt;a href="https://www.twilio.com/sms"&gt;text messages&lt;/a&gt; to multiple phone numbers (instead of being an input variable, the &lt;a href="https://www.twilio.com/blog/send-sms-from-airtable-in-1-minute"&gt;phone number to text could be in the Airtable base as shown in this Twilio blog post&lt;/a&gt;!) Let me know online what you're building with Airtable and Twilio. Stay tuned for more Airtable content on the Twilio blog like this tutorial on &lt;a href="https://www.twilio.com/blog/airtable-twilio-python-survey-app"&gt;building a survey app with Python&lt;/a&gt; or &lt;a href="https://www.twilio.com/blog/airtable-database-read"&gt;how to use Airtable as a database for your Twilio app&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>airtable</category>
      <category>javascript</category>
      <category>sms</category>
      <category>twilio</category>
    </item>
    <item>
      <title>How to find log4j vulnerable dependencies quickly across your codebase</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Tue, 14 Dec 2021 19:59:57 +0000</pubDate>
      <link>https://dev.to/sourcegraph/how-to-find-log4j-vulnerable-dependencies-quickly-across-your-codebase-32oj</link>
      <guid>https://dev.to/sourcegraph/how-to-find-log4j-vulnerable-dependencies-quickly-across-your-codebase-32oj</guid>
      <description>&lt;p&gt;To quickly determine which of your projects depend on the vulnerable versions of log4j, run these queries on Sourcegraph:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gradle"&gt;
  &lt;/a&gt;
  Gradle
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j' 2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)(\.[0-9]+))
lang:gradle patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+lang:gradle+org%5C.apache%5C.logging%5C.log4j%5B%27%22%5D+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%7C15%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp"&gt;Gradle&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mavin"&gt;
  &lt;/a&gt;
  Mavin
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;log4j\.version&amp;gt;2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)(\.[0-9]+))&amp;lt;/log4j\.version&amp;gt;
file:pom\.xml patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:pom.xml+%3Clog4j%5C.version%3E2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%7C15%29%28%5C.%5B0-9%5D%2B%29%3C/log4j%5C.version%3E&amp;amp;patternType=regexp"&gt;Mavin&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivy"&gt;
  &lt;/a&gt;
  Ivy
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org="org\.apache\.logging\.log4j".*rev="2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)(\.[0-9]+))"
file:ivy\.xml patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:ivy.xml+org%3D%22org%5C.apache%5C.logging%5C.log4j%22+rev%3D%222%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%7C15%29%28%5C.%5B0-9%5D%2B%29%22&amp;amp;patternType=regexp"&gt;Ivy&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sbtscala"&gt;
  &lt;/a&gt;
  SBT(Scala)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org.apache.logging.log4j" % "2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)(\.[0-9]+))
file:\.sbt$ patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:%5C.sbt%24+%22org.apache.logging.log4j%22+%25+%222%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%7C15%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp"&gt;Scala&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bazel"&gt;
  &lt;/a&gt;
  Bazel
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j: 2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)(\.[0-9]+))
lang:bazel patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+lang:bazel+org%5C.apache%5C.logging%5C.log4j:+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%7C15%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp"&gt;Bazel&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#any-file-containing-orgapachelogginglog4j-followed-by-a-vulnerable-version-number"&gt;
  &lt;/a&gt;
  Any file containing org.apache.logging.log4j followed by a vulnerable version number
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j 2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)(\.[0-9]+))
patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+org%5C.apache%5C.logging%5C.log4j+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%7C15%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp"&gt;Any file containing org.apache.logging.log4j followed by a vulnerable version number&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-your-organizations-private-code"&gt;
  &lt;/a&gt;
  Search your organization’s private code
&lt;/h3&gt;

&lt;p&gt;On &lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt;, run the queries linked above in your user search context &lt;strong&gt;(context:@username)&lt;/strong&gt;, after you’ve synced all of the org repositories you want to search &lt;strong&gt;(in Settings &amp;gt; Account &amp;gt; Your repositories)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On a &lt;a href="https://docs.sourcegraph.com/?_ga=2.15375984.777352015.1639448382-1702082279.1639448382&amp;amp;_gac=1.153587914.1636895801.Cj0KCQiAhMOMBhDhARIsAPVml-GU6W22T_XZ_khgKhGR4BWZj1Bq85dwPR4AfI1Ju6PKl17Dt7qWnc0aAihpEALw_wcB#quick-install"&gt;self-hosted Sourcegraph instance&lt;/a&gt;, copy and paste those queries above into the search box on your instance. After pasting, ensure the .* (regexp search) button is on for queries that contain regular expressions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indepth-log4j-0day-fixes-and-mitigations"&gt;
  &lt;/a&gt;
  In-depth Log4j 0-day fixes and mitigations
&lt;/h2&gt;

&lt;p&gt;For in-depth info on Log4j Log4Shell 0-day, check out this &lt;a href="https://about.sourcegraph.com/blog/log4j-log4shell-0-day/?utm_medium=social&amp;amp;utm_source=twitter&amp;amp;utm_campaign=blog"&gt;excellent article on finding, fixing, and track affected codebase.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Finding and fixing vulnerabilities in your codebase can be challenging, but with the right tools, you can speed up the process and secure your codebase in minimal time.&lt;/p&gt;




&lt;p&gt;Have suggestions or questions? Leave a comment, or join our &lt;a href="https://about.sourcegraph.com/community/?utm_medium=social&amp;amp;utm_source=devto&amp;amp;utm_campaign=slacklaunch"&gt;Community Slack Space&lt;/a&gt; where our team will be happy to answer any questions you may have about Sourcegraph.&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why all the Suspense? Understanding Async Consistency in JavaScript Frameworks</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 14 Dec 2021 19:54:19 +0000</pubDate>
      <link>https://dev.to/this-is-learning/why-all-the-suspense-understanding-async-consistency-in-javascript-frameworks-3kdp</link>
      <guid>https://dev.to/this-is-learning/why-all-the-suspense-understanding-async-consistency-in-javascript-frameworks-3kdp</guid>
      <description>&lt;p&gt;I had someone recently reach out to me to ask "What is Suspense in the general sense?" They said all they could find was &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; resources. And I told them that made sense they coined the term. But looking around I realized it was more than that.&lt;/p&gt;

&lt;p&gt;When I look at the topic as explained in most articles it talks about the symptoms of the Suspense component but not really what it is. So I'm going to try to show today why it is so much more than a component that renders placeholders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-in-user-interfaces"&gt;
  &lt;/a&gt;
  Consistency in User Interfaces
&lt;/h2&gt;

&lt;p&gt;Consistent display of information is a fundamental expectation of a good user interface. If you show users inconsistent information within the same page(without indicating it) it erodes trust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AxcE-zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxd9x6okpctcrs8j04kh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AxcE-zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxd9x6okpctcrs8j04kh.png" alt="Inconsistent Avatar" width="700" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From Michel Westrate's &lt;a href="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254"&gt;Becoming Fully Reactive: An in-depth explanation of MobX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your avatar is updated in one place and not another can you trust that what you are reading is up to date? You might be tempted to reload the browser page just in case. If the count of comments doesn't match the number of comments you see, even if the number is smaller you might assume you are missing something. But there are more consequential glitches, what about prices on products not matching?&lt;/p&gt;

&lt;p&gt;This goes beyond what you can see. What happens if the internal state of our web app doesn't match what we are displaying to the end-user. Could that cause them to make decisions they otherwise would not make? Decisions of consequence? And could they not even be aware of it if you are showing them one thing and doing another?&lt;/p&gt;

&lt;p&gt;Sure on the web, we are accustomed to the fact that what we see might not be the latest. There is always a delay to send it over the wire compared to the current state of the backend. While this can lead to things being out of date and certain requests we make being rejected, but inconsistent interfaces could put us in a scenario where the application believes it is doing the right thing and passes validation and it is only the end user left unaware.&lt;/p&gt;

&lt;p&gt;Luckily, we have tools built for this. Generally, modern UI libraries and frameworks are all built with consistency in mind.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#consistency-in-frameworks"&gt;
  &lt;/a&gt;
  Consistency in Frameworks
&lt;/h2&gt;

&lt;p&gt;The simplest form of consistency is ensuring that derived state stays in sync with its source state. For instance if you had a state &lt;code&gt;count&lt;/code&gt; a state &lt;code&gt;doubleCount&lt;/code&gt; would always be in fact double that count. In a reactive library we often refer to this as &lt;code&gt;glitch-free&lt;/code&gt; execution. It might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different frameworks have different ways to ensure this relationship holds. In &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; state updates aren't applied immediately in so you continue to see the previous state until a time that &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; applies all the state at the same time. Reactive libraries like Vue or &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt; tend to more aggressively update so that on the next line after an update not only is the source data updated but all derived data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// React&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2&lt;/span&gt;

&lt;span class="c1"&gt;// Solid&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 20, 40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, the difference is inconsequential as in both cases they are consistent. In the end, it has a similar result. Looking from the outside state updates are atomic, applying in all places at the same time.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#async-consistency"&gt;
  &lt;/a&gt;
  Async Consistency
&lt;/h2&gt;

&lt;p&gt;The thing is with glitch-free libraries whether the updates happen now or sometime later they all get applied synchronously. All updates are with the same tick and they all see each other. This is essential to have consistency guarantees. But what happens if everything cannot be calculated synchronously?&lt;/p&gt;

&lt;p&gt;This is a pretty hard problem and it's been the subject of many academic papers. Even stuff related to JavaScript ecosystem like &lt;a href="http://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf"&gt;this paper on Elm from 2013&lt;/a&gt;. But to illustrate the problem consider our &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;doubleCount&lt;/code&gt; again but pretend we need to go to the server to calculate &lt;code&gt;doubleCount&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Not real React code, just for illustrative purposes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchDoubleCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// somewhere else:&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our &lt;code&gt;count&lt;/code&gt; would start at 1 and &lt;code&gt;doubleCount&lt;/code&gt; would initially be undefined while it was fetching putting us in an inconsistent state. At some point later when it resolved &lt;code&gt;doubleCount&lt;/code&gt; would be 2 and we would be consistent again. This happens later when we set &lt;code&gt;count&lt;/code&gt; to 20. &lt;code&gt;doubleCount&lt;/code&gt; would be value 1 until it settled at 40. If you were logging this in a &lt;code&gt;useEffect&lt;/code&gt; you might see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That isn't unexpected but it isn't consistent. And here lies the problem. There are only 3 possible outcomes to prevent our users from seeing this inconsistent state:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-bail-out"&gt;
  &lt;/a&gt;
  1. Bail out
&lt;/h3&gt;

&lt;p&gt;Show something instead of the inconsistent state. Some sort of loading indicator to hide the inconsistency from the end-user and let things settle in the background until it is ready to be displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-stay-in-the-past"&gt;
  &lt;/a&gt;
  2. Stay in the Past
&lt;/h3&gt;

&lt;p&gt;Don't apply any of the changes and continue to show things as they were until the new content is ready to be displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-predict-the-future"&gt;
  &lt;/a&gt;
  3. Predict the Future
&lt;/h3&gt;

&lt;p&gt;Apply the changes immediately and show the future value while the asynchronous state is updating, and then when it is done replace it (but it should already be the same thing).&lt;/p&gt;




&lt;p&gt;Well, the first one is relatively easy compared to the others as a general solution. We do it all the time. We might apply the source changes right away and then show a loading indicator until we are ready to show updated content. And many people and libraries saw Suspense and stopped there.&lt;/p&gt;

&lt;p&gt;But what if we wanted to do more. Removing content and replacing it after some time can be a rather jarring user experience. I think all of us would love to live in the future but there is a certain unpracticality in this unless the user is performing a mutation. These "optimistic updates" are a great tool but they aren't perfect and aren't always applicable. If you are just trying to fetch the latest data, well you don't have what you haven't received yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKOYsB3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t438cxofqb58i1zrf2bi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKOYsB3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t438cxofqb58i1zrf2bi.jpg" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's stay in the past. The tricky part is how do we trigger the upcoming async requests if we don't apply any data changes?&lt;/p&gt;

&lt;p&gt;Well, we can make a copy of the state we wish to update in the future. Like we can have &lt;code&gt;count&lt;/code&gt;, and &lt;code&gt;futureCount&lt;/code&gt; and have &lt;code&gt;doubleCount&lt;/code&gt; be derived from &lt;code&gt;futureCount&lt;/code&gt; instead and only apply &lt;code&gt;futureCount&lt;/code&gt;'s value back to &lt;code&gt;count&lt;/code&gt; when everything has resolved. But this gets tricky. What if there are more than one thing fetching and multiple different sources. We'd need to clone everything downstream of that change.&lt;/p&gt;

&lt;p&gt;And that's what is being done more or less with &lt;a href="https://github.com/reactwg/react-18/discussions/41"&gt;Transitions&lt;/a&gt; in &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; or &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;. Concurrent Rendering exists so that the app can stay in one state while we are safe to render a new updated reality and only commit those changes when everything is settled. It is a systematic way of staying consistent in the past until we are ready.&lt;/p&gt;

&lt;p&gt;Why concurrency though? Well, you are still displaying UI to the end-user so you don't want it to just stop working completely. Things like animations and other non-destructive interactions. It means more work reconciling the changes in the end but ultimately this is an end-user experience feature.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all Together
&lt;/h2&gt;

&lt;p&gt;Suddenly &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s decision for &lt;code&gt;setState&lt;/code&gt; to stay in the past doesn't look so unusual. You don't know what might cause asynchronous derived state downstream so you would need to hedge on the side of not updating until you know. That being said these frameworks still have explicit opt-in to concurrent rendering for the same reason.&lt;/p&gt;

&lt;p&gt;Picturing writing a component that creates and updates some state. It would be very unusual if some downstream child component that received the props was responsible for isolating your state change in a Concurrent Transition by virtue of that state being a dependency. This behavior needs to be opt-in.&lt;/p&gt;

&lt;p&gt;And similarly, it may be important to be able to opt out of this behavior. Sometimes some amount of inconsistency is warranted or even desirable. For example, if you need to see the data as fast as possible.&lt;/p&gt;

&lt;p&gt;All in all, Suspense and Transitions provide very useful tools for handling the problem of making our user interfaces consistent. That's a big benefit to end-users. It isn't about performance. It isn't just about data fetching. It's about making it easier to create UIs that users can trust, that behave in expected ways, and that offer a smooth experience no matter how they navigate your web application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>solidjs</category>
    </item>
  </channel>
</rss>
