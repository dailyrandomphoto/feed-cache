<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Some Powerful Js One-liners</title>
      <author>Ajithmadhan</author>
      <pubDate>Wed, 11 Aug 2021 07:34:49 +0000</pubDate>
      <link>https://dev.to/ajithmadhan11/some-powerful-js-one-liners-600</link>
      <guid>https://dev.to/ajithmadhan11/some-powerful-js-one-liners-600</guid>
      <description>&lt;p&gt;Javascript is one of the most powerful language in this modern world.In this article we will go through some of the useful js one-liners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remove-duplicates-in-an-array"&gt;
  &lt;/a&gt;
  Remove Duplicates in an Array.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Â [12, 23, 54, 69, 4, 12, 23]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RemoveDuplicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RemoveDuplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// [12, 23, 54, 69, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generate-a-random-id"&gt;
  &lt;/a&gt;
  Generate a random Id
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ituzp41cq08&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shuffle-an-array"&gt;
  &lt;/a&gt;
  shuffle an Array
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;E&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["A", "B", "C", "D", "E", "F"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// ["B", "A", "C", "E", "F", "D"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swapping-two-variables"&gt;
  &lt;/a&gt;
  Swapping two variables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 10 5&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assign-multiple-variables"&gt;
  &lt;/a&gt;
  Assign Multiple variables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ajith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//4 0.5 "Ajith" Â ["a", "b"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reverse-a-string"&gt;
  &lt;/a&gt;
  Reverse a String
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reverseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I love to code in javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//tpircsavaj ni edoc ot evol I&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#merge-multiple-arrays"&gt;
  &lt;/a&gt;
  Merge multiple arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;go&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frameworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ruby on rails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;larvel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;combined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frameworks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;combined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//["js", "c", "go", "java", "react", "angular", "ruby on rails", "larvel"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#do-like-and-save-this-post-for-future-reference"&gt;
  &lt;/a&gt;
  Do like and save this post for future reference ğğ¯
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>array</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Buenas practicas en CSS</title>
      <author>Marcial Ambriz</author>
      <pubDate>Wed, 11 Aug 2021 07:26:13 +0000</pubDate>
      <link>https://dev.to/marskdev/buenas-practicas-en-css-4a8d</link>
      <guid>https://dev.to/marskdev/buenas-practicas-en-css-4a8d</guid>
      <description>&lt;p&gt;Esta es una recopilaciÃ³n que considero como buenas prÃ¡cticas en la codificaciÃ³n de estilos en CSS. &lt;/p&gt;

&lt;p&gt;A lo largo de mi camino como desarrollador frontend he tratado de llevar un uso de prÃ¡cticas que me ayuden a optimizar y mejorar cada proyecto que hago.&lt;/p&gt;

&lt;p&gt;Estas son las actuales prÃ¡cticas que uso en mis proyectos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#reinicio-de-estilos"&gt;Reinicio de estilos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incluir-informacion-descriptiva"&gt;Incluir informaciÃ³n descriptiva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#definir-variables"&gt;Definir variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#organizar-elementos"&gt;Organizar elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agrupar-selectores"&gt;Agrupar selectores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-anotaciones-en-componentes"&gt;Usar anotaciones en componentes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combinar-elementos"&gt;Combinar elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-valores-relativos"&gt;Usar valores relativos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-shorthands"&gt;Usar shorthands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conocer-el-display-inicial-de-los-elementos"&gt;Conocer el display inicial de los elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crear-primero-la-estructura-html"&gt;Crear primero la estructura HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modularizar-los-estilos"&gt;Modularizar los estilos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-metodologias-css"&gt;Usar metodologÃ­as CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usar-prefijos-de-los-navegadores"&gt;Usar prefijos de los navegadores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#validar-el-codigo"&gt;Validar el codigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#minificar-el-codigo"&gt;Minificar el codigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilizar-preprocesadores"&gt;Utilizar preprocesadores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utilizar-post-procesadores"&gt;Utilizar post procesadores&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#reinicio-de-estilos"&gt;
  &lt;/a&gt;
  Reinicio de estilos
&lt;/h2&gt;

&lt;p&gt;La mayor meta de un archivo de reinicio de estilos es reducir las incompatibilidades de los diferentes navegadores. Provee estilos generales que hacen mÃ¡s fÃ¡cil editar y personalizar elementos.&lt;/p&gt;

&lt;p&gt;El reinicio es esencial para eliminar las inconsistencias comunes de los navegadores tales como heights, headings, margins, font sizes, etc.&lt;/p&gt;

&lt;p&gt;El mayor reto en el desarrollo web frontend es la compatibilidad de los estilos entre los diferentes navegadores. AquÃ­ es donde toma partido un reinicio de estilos.&lt;/p&gt;

&lt;p&gt;Un ejemplo de este tipo de hojas de reinicio es &lt;a href="https://github.com/necolas/normalize.css"&gt;Normalize.css de Nicolas Gallagher&lt;/a&gt;, es una forma moderna de reiniciar CSS. Este preserva los valores iniciales Ãºtiles, a diferencia de otras hojas de reinicio de estilos. AdemÃ¡s de eliminar las inconsistencias comunes de los navegadores tambiÃ©n corrige algunos errores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incluir-informacion-descriptiva"&gt;
  &lt;/a&gt;
  Incluir informacion descriptiva
&lt;/h2&gt;

&lt;p&gt;Es Ãºtil incluir informaciÃ³n que nos permita conocer mÃ¡s sobre el proyecto, datos tales como el autor, tÃ­tulos, descripciÃ³n, URLs informativas y otros de talles dentro de la hoja de estilos. Si el usuario o el desarrollador requiere una referencia o mÃ¡s detalles en el futuro, le serÃ¡ sencillo encontrar el contacto de la persona asÃ­ como otros detalles que buscan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*
Project: Portfolio
Description: Portafolio web personal
Project URI: https://github.com/marskdev/portfolio
Author: Marcial Ambriz
Author URI: https://marskdev.netlify.app
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#definir-variables"&gt;
  &lt;/a&gt;
  Definir variables
&lt;/h2&gt;

&lt;p&gt;CSS ahora cuenta con &lt;a href="https://developer.mozilla.org/es/docs/Web/CSS/Using_CSS_custom_properties"&gt;propiedades personalizadas&lt;/a&gt; (variables) que podemos utilizar para guardar valores especÃ­ficos como typefaces, tamaÃ±os, colores, incluso hasta configuraciones de propiedades.&lt;/p&gt;

&lt;p&gt;En sitios y proyectos donde hay una gran cantidad de estilos, en general con muchos valores repetidos. Como ejemplo, un color puede ser usado por distintos elementos que sin el uso de la variables serÃ­a una tarea tediosa cambiarlo en el futuro, por otro lado las variables nos permitirÃ¡ reemplazar el valor del color en todos los elementos que hagan referencia a la variable.&lt;/p&gt;

&lt;p&gt;Otro beneficio son los identificadores semÃ¡nticos haciendo que sea mÃ¡s fÃ¡cil de entender y nos permite identificar con mayor precisiÃ³n cada valor que usemos en los estilos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* theme */&lt;/span&gt;
    &lt;span class="py"&gt;--dark-base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#282A3E&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2B2D42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--slate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#A8A8C7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--light-slate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#C7C7DB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Branding */&lt;/span&gt;
    &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F6BE5F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;109.8deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#F6BE5F&lt;/span&gt; &lt;span class="m"&gt;-6.35%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#FA9875&lt;/span&gt; &lt;span class="m"&gt;105.29%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c"&gt;/* Typeface */&lt;/span&gt;
    &lt;span class="py"&gt;--font-headline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Lato'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--font-body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Open Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--font-headline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#organizar-elementos"&gt;
  &lt;/a&gt;
  Organizar elementos
&lt;/h2&gt;

&lt;p&gt;Organizar elementos en la hoja de estilos de arriba hacia abajo no es tan fÃ¡cil como podrÃ­a serlo. Sin una estructura que organice los elementos podrÃ­a ser difÃ­cil localizar un elemento dentro de un desorden. &lt;/p&gt;

&lt;p&gt;AdemÃ¡s crea una legibilidad increÃ­ble que hace mucho mÃ¡s sencillo mantener en el futuro, permitirÃ¡ encontrar elementos mÃ¡s rÃ¡pidos. AdemÃ¡s no sabes quien en el futuro podrÃ­a necesitar mirar el cÃ³digo.&lt;/p&gt;

&lt;p&gt;Una buena estructura puede iniciar incluyendo los estilos generales, seguidos por un comentario que divide un componente de otro e indicando el nombre dentro del comentario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/****** General Styles *********/&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/****** Header Style *********/&lt;/span&gt;
&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/****** Navigation Style *********/&lt;/span&gt;
&lt;span class="nf"&gt;#nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/****** Footer Style *********/&lt;/span&gt;
&lt;span class="nf"&gt;#footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#agrupar-selectores"&gt;
  &lt;/a&gt;
  Agrupar selectores
&lt;/h2&gt;

&lt;p&gt;Si tienes diferentes selectores para un mismo componente, serÃ­a ideal agruparlos todos juntos para que parezca mÃ¡s organizado. Esto te ayudarÃ¡ a localizar errores fÃ¡cilmente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Cylinder */&lt;/span&gt;

&lt;span class="nc"&gt;.cylinder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;960px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cylinder&lt;/span&gt; &lt;span class="nf"&gt;#new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cylinder&lt;/span&gt; &lt;span class="nf"&gt;#tagline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Verdana&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-anotaciones-en-componentes"&gt;
  &lt;/a&gt;
  Usar anotaciones en componentes
&lt;/h2&gt;

&lt;p&gt;Es recomendable colocar detalles sobre el cÃ³digo CSS que se estÃ¡ utilizando que revelen el propÃ³sito o describan el comportamiento de las propiedades en donde sea difÃ­cil a la vista entenderlo. SerÃ¡ de mucha ayuda en componentes muy complejos.&lt;/p&gt;

&lt;p&gt;La mejor manera de hacerlo es colocar un comentario para cada grupo o componente. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combinar-elementos"&gt;
  &lt;/a&gt;
  Combinar elementos
&lt;/h2&gt;

&lt;p&gt;Algunos elementos algunas veces comparten propiedades, en lugar de asignar propiedades a cada uno de forma independiente puedes optar por asignar las mismas propiedades a diferentes elementos, de esta forma evitarÃ¡s la repeticiÃ³n de cÃ³digo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.headline&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tahoma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-valores-relativos"&gt;
  &lt;/a&gt;
  Usar valores relativos
&lt;/h2&gt;

&lt;p&gt;El uso de valores relativos como &lt;strong&gt;em&lt;/strong&gt; (font-size element) o &lt;strong&gt;rem&lt;/strong&gt; (root font-size element) en lugar de valores absolutos como &lt;strong&gt;px&lt;/strong&gt; (pÃ­xeles) permite que los tamaÃ±os sean mÃ¡s flexibles en diferentes tamaÃ±os de pantalla.&lt;/p&gt;

&lt;p&gt;Las unidades &lt;strong&gt;em&lt;/strong&gt; toman el valor de font-size del elemento donde se declara y &lt;strong&gt;rem&lt;/strong&gt; toma el valor del elemento raÃ­z.&lt;/p&gt;

&lt;p&gt;Para cambiar los valores de los elementos para diferentes tamaÃ±os de pantalla solo necesitarÃ¡s redefinir el valor de font-size del elemento raÃ­z a travÃ©s de una media query cuando el tamaÃ±o de la pantalla cambie y en consecuencia se ajustaran los demas tamaÃ±os.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Default body font-size 16px

  Screen size | body | headline
     400px    | 19px |   42px
     800px    | 21px |   46px
*/&lt;/span&gt;

&lt;span class="nc"&gt;.headline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*35px*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;118.8%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;131.3%&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-shorthands"&gt;
  &lt;/a&gt;
  Usar shorthands
&lt;/h2&gt;

&lt;p&gt;Puedes reducir la cantidad de cÃ³digo considerablemente usando shorthands. Para elementos como padding, margin, font, etc, puedes combinar estilos en una sola lÃ­nea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.noShorthand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.withShorthand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conocer-el-display-inicial-de-los-elementos"&gt;
  &lt;/a&gt;
  Conocer el display inicial de los elementos
&lt;/h2&gt;

&lt;p&gt;Cada elemento HTML tiene un display inicial, dependiendo el tipo de  elemento, el valor inicial serÃ¡ diferente por ello es importante entender el valor inicial de cada uno.&lt;/p&gt;

&lt;p&gt;Tener en cuenta este dato nos permitirÃ¡ saber cuÃ¡ndo cambiar el display dependiendo el contexto. Algunas propiedades requieren de un display especÃ­fico como block para ser aplicadas.&lt;/p&gt;

&lt;p&gt;Estos son los elementos mÃ¡s comunes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*Default display: inline*/&lt;/span&gt;
&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;abbr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;acronym&lt;/span&gt;

&lt;span class="c"&gt;/*Default display: block*/&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nc"&gt;.h6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Encuentra la lista completa de los elementos &lt;a href="https://www.w3schools.com/htmL/html_blocks.asp"&gt;aquÃ­.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crear-primero-la-estructura-html"&gt;
  &lt;/a&gt;
  Crear primero la estructura HTML
&lt;/h2&gt;

&lt;p&gt;Algunos desarrolladores crean los estilos al mismo tiempo que van creando la estructura HTML. &lt;/p&gt;

&lt;p&gt;Es lÃ³gico crear ambos al mismo tiempo, pero actualmente podrÃ­as ahorrar tiempo si primero creas la estructura. La razÃ³n de esto es que ya tienes en mente la estructura de todos los elementos del sitio. &lt;/p&gt;

&lt;p&gt;Crear primero la estructura te permite visualizar el sitio entero. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modularizar-los-estilos"&gt;
  &lt;/a&gt;
  Modularizar los estilos
&lt;/h2&gt;

&lt;p&gt;Dependiendo de la complejidad del diseÃ±o y el tamaÃ±o del sitio es recomendable separar los estilos en mÃ³dulos en diferentes archivos que despuÃ©s se incorporan en uno solo importando los mÃ³dulos, serÃ¡ mÃ¡s sencillo de mantener y editar que una Ãºnica hoja gigante. &lt;/p&gt;

&lt;p&gt;PermitirÃ¡ gestionar los estilos que solo necesita una pagina especifica y evitarÃ¡ cargar estilos innecesarios para las diferentes vistas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* This file: main.css */&lt;/span&gt;

&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("components.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("layout.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("header.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("footer.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usar-metodologias-css"&gt;
  &lt;/a&gt;
  Usar metodologias CSS
&lt;/h2&gt;

&lt;p&gt;Las &lt;a href="https://dev.to/marskdev/metodologias-css-2pg2"&gt;metodologÃ­as CSS&lt;/a&gt; son una serie de indicaciones para escribir, modularizar, escalar y reutilizar cÃ³digo que permiten resolver problemas de implementaciÃ³n. Usarlo te ayudarÃ¡ a escalar el proyecto y mantenerlo en un futuro. Algunas metodologÃ­as son BEM, ITCSS, OOCSS, SMACSS, etc.&lt;/p&gt;

&lt;p&gt;Incluso podemos combinar metodologÃ­as tomando lo mejor de cada una.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usar-prefijos-de-los-navegadores"&gt;
  &lt;/a&gt;
  Usar prefijos de los navegadores
&lt;/h2&gt;

&lt;p&gt;Usar los prefijos crearÃ¡ mejor compatibilidad en el despliegue del sitio entre los diferentes navegadores. Omitir los prefijos es encontrarse con problemas de compatibilidad de las caracterÃ­sticas implementadas en navegadores especÃ­ficos.&lt;/p&gt;

&lt;p&gt;Algunas de las propiedades no son compatibles con ciertos navegadores, las cuales necesitan de prefijos para ser usadas en algunos navegadores. Para ello tenemos que definir mÃºltiples lÃ­neas a la vez para una misma propiedad.&lt;/p&gt;

&lt;p&gt;Estos son los prefijos de los navegadores mÃ¡s comunes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;iOS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-&lt;/span&gt;

&lt;span class="nt"&gt;Safari&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-&lt;/span&gt;

&lt;span class="nt"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-moz-&lt;/span&gt;

&lt;span class="nt"&gt;Chrome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-&lt;/span&gt;

&lt;span class="nt"&gt;Opera&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-o-&lt;/span&gt;

&lt;span class="nt"&gt;IE-Microsoft-Edge&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-ms-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#validar-el-codigo"&gt;
  &lt;/a&gt;
  Validar el codigo
&lt;/h2&gt;

&lt;p&gt;Siempre puedes usar &lt;a href="https://jigsaw.w3.org/css-validator/validator.html.en"&gt;W3C free CSS Validator&lt;/a&gt; para examinar si tu cÃ³digo ha sido organizado y estructurado apropiadamente. Otro beneficio de usarlo es ayudarte a encontrar errores dentro del cÃ³digo. Esto te ahorrarÃ¡ todo el tiempo que gastarÃ­as encontrando el problema de manera manual.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minificar-el-codigo"&gt;
  &lt;/a&gt;
  Minificar el codigo
&lt;/h2&gt;

&lt;p&gt;Si sientes que va lento mientras se cargan los estilos en los navegadores. Entonces es momento de intentar comprimir el tamaÃ±o del archivo css. Muchos elementos incluyen saltos de lÃ­nea y espacios en blanco, que nos permiten hacer de la hoja de estilos legible no son necesarios, estos podrÃ­an crear un retraso al momento de cargar el sitio. &lt;/p&gt;

&lt;p&gt;Una forma de sacar el mÃ¡ximo potencial de una hoja de estilos es eliminando esos elementos que a nosotros como desarrolladores nos permite leer con facilidad los estilos, al navegador no le importara si no se encuentran. Una forma de hacerlo es minificar el cÃ³digo, esto harÃ¡ que la carga de estilos sea mÃ¡s rÃ¡pida.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilizar-preprocesadores"&gt;
  &lt;/a&gt;
  Utilizar preprocesadores
&lt;/h2&gt;

&lt;p&gt;El uso de un procesador puede ser beneficioso de varias maneras. Un procesador es una herramienta que te deja usar caracterÃ­sticas avanzadas que no existen en CSS. Estas pueden ser variables, loops e incluso funciones.&lt;/p&gt;

&lt;p&gt;Los preprocesadores ayudan a organizar tu hoja de estilos de mejor manera. Tienen la habilidad de romper los estilos en pequeÃ±os archivos reutilizables. Los cuales pueden ser importados dentro de otros o implementarlos de forma separada.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anidar-selectores"&gt;
  &lt;/a&gt;
  Anidar selectores
&lt;/h3&gt;

&lt;p&gt;Otra gran ventaja es que mejora la legibilidad anidando los selectores. Es una simple y poderosa caracterÃ­stica que CSS no tiene. La jerarquÃ­a estructural hace mÃ¡s sencillo de visualizar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.sidebar&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.collapsed&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;...&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.list&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-item&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;...&lt;/span&gt;
                &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--active&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;...&lt;/span&gt;
                &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vendor-prefix-autom%C3%A1ticos"&gt;
  &lt;/a&gt;
  Vendor prefix automÃ¡ticos
&lt;/h3&gt;

&lt;p&gt;Esta es una caracterÃ­stica experimental. Como mÃ¡s arriba explico, algunas propiedades no son compatibles con algunos navegadores.&lt;/p&gt;

&lt;p&gt;Para que nuestros estilos tengan soporte para la mayorÃ­a de los navegadores, tenemos que definir mÃºltiples lÃ­neas a la vez para una misma propiedad.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.gradient&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-moz-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-webkit-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;137&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#utilizar-post-procesadores"&gt;
  &lt;/a&gt;
  Utilizar post procesadores
&lt;/h2&gt;

&lt;p&gt;Una mejor opciÃ³n es un port-procesador. Este puede crear un paso de optimizaciÃ³n adicional una vez que el CSS fue generado por un preprocesador. Unos de los mÃ¡s populares post-preprocesadores son &lt;a href="https://postcss.org"&gt;postCSS&lt;/a&gt; o &lt;a href="https://cssnano.co"&gt;CSSnano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Puedes usarlo para colocar prefijos automÃ¡ticamente a las propiedades, ya no tendrÃ¡s que preocuparte por dar soporte a todos los navegadores. Ya no habrÃ¡ excusas de "Eso no lo puedo usar".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  ConclusiÃ³n
&lt;/h2&gt;

&lt;p&gt;El uso de estas prÃ¡cticas te ayudarÃ¡n a optimizar y escribir estilos CSS que te brindarÃ¡n ventajas y beneficios aumentando la calidad de tus proyectos. AdemÃ¡s evitarÃ¡n malas prÃ¡cticas que podrÃ­an perjudicar tu proyecto.&lt;/p&gt;

&lt;p&gt;Entre los beneficios se encuentran: una escritura rÃ¡pida y lectura legible, mayor soporte entre navegadores, optimizaciÃ³n de cÃ³digo, mejor escalabilidad y mantenimiento sencillo en el futuro.&lt;/p&gt;

&lt;p&gt;Dime que opinas y si tienes otra buena prÃ¡ctica compartela.&lt;/p&gt;

&lt;p&gt;Puedes encontrarme en otros sitios como &lt;a href="https://twitter.com/marskdev/"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/marskdev/"&gt;Instagram&lt;/a&gt; y &lt;a href="https://www.linkedin.com/in/marskdev/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>html</category>
    </item>
    <item>
      <title>ğ¥ React Hooks.ğ</title>
      <author>Shaik Dawood</author>
      <pubDate>Wed, 11 Aug 2021 07:23:38 +0000</pubDate>
      <link>https://dev.to/dawoodxp97/react-hooks-5eop</link>
      <guid>https://dev.to/dawoodxp97/react-hooks-5eop</guid>
      <description>&lt;p&gt;Hello everyone,ğ&lt;/p&gt;

&lt;p&gt;In this article we'll discuss about React Hooks. Before the release of React Hooks, its functional components were a bit limited in usage. I mean, when it comes to working with State, context API, and some Lifecycle methods there was nothing we could do.&lt;br&gt;
But, starting from React 16.8, we have a lot more flexibility to reuse an existing piece of code.&lt;/p&gt;

&lt;p&gt;â¨Hooks are the new feature introduced in the React 16.8 version. It allows you to use state and other React features without writing a class. Hooks are the functions which "hook into" React state and lifecycle features from function components.&lt;/p&gt;

&lt;p&gt;â¨ Hooks don't work inside class components. They let you use React without the class.&lt;/p&gt;

&lt;p&gt;â¨ Hooks will reduce your component size significantly and have many other benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rules-of-using-hooks"&gt;
  &lt;/a&gt;
  ğ¥ 3 Rules of using Hooks:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can use hooks only inside a &lt;strong&gt;function components&lt;/strong&gt;. Not inside class components because classes already have features what hooks enable you to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should call hooks only at the &lt;strong&gt;Top Level&lt;/strong&gt; of the function. Don't call Hooks inside loops, conditions, or nested functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is just one other valid place to call Hooks is your &lt;strong&gt;Custom Hooks&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get Started with the top most great React Hooks.ğ¥&lt;/p&gt;

&lt;p&gt;â¡ 1. &lt;strong&gt;useState( ) Hook:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ğ The useState( ) hook lets you add react state to function components. So function components are &lt;strong&gt;no longer&lt;/strong&gt; stateless.&lt;/p&gt;

&lt;p&gt;ğ The useState( ) is the most commonly used Hook that allows you to &lt;strong&gt;create, read and update&lt;/strong&gt; simple internal state variables in your react function component.&lt;/p&gt;

&lt;p&gt;Sounds great right, Stay tuned then.ğ&lt;/p&gt;

&lt;p&gt;ğ¤·ââï¸ Why useState( ) is not named as createState( ) ?ğ¤&lt;/p&gt;

&lt;p&gt;ğ &lt;strong&gt;Create&lt;/strong&gt; would imply that the state was created for the first time when the component renders. But the useState( ) executes every time the function component re-renders.&lt;/p&gt;

&lt;p&gt;ğ During the subsequent re-renders, the useState( ) hook will give  us the &lt;strong&gt;Current State.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ğ So &lt;strong&gt;"use"&lt;/strong&gt;State( ) is appropriate name.&lt;/p&gt;

&lt;p&gt;Let's look at the syntax of &lt;strong&gt;useState( ):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgyZo5qu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i27cloa2u8pyyvzwqy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgyZo5qu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i27cloa2u8pyyvzwqy5.png" alt="useState"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ğ useState hook always returns an array with 2 values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The State variable itself.&lt;/li&gt;
&lt;li&gt;A function to update the state variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ğ If you use this state variable inside JSX, the component re-renders every time the value changes.&lt;/p&gt;

&lt;p&gt;ğ The &lt;strong&gt;setVariable&lt;/strong&gt; function is used to update the state variable whenever needed in the component.&lt;/p&gt;

&lt;p&gt;ğ The &lt;strong&gt;"setVariable"&lt;/strong&gt; name doesn't really matter. You can name it anything you want.&lt;/p&gt;

&lt;p&gt;Let's look at few examples of the useState( ):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Een6moCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3yr1p1z00857jbwapn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Een6moCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3yr1p1z00857jbwapn.png" alt="examples of useState"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;â¡ 1. &lt;strong&gt;useEffect( ) Hook:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ğ The Effect Hook lets you perform side effects in function components. If youâre familiar with React class lifecycle methods, you can think of &lt;strong&gt;useEffect&lt;/strong&gt; Hook as &lt;strong&gt;componentDidMount&lt;/strong&gt;, &lt;strong&gt;componentDidUpdate&lt;/strong&gt;, and &lt;strong&gt;componentWillUnmount&lt;/strong&gt; combined.&lt;/p&gt;

&lt;p&gt;ğ It is like a Functional programming concept, where we try to encapsulate side effects in other functions so that other Functions can stay pure/unaffected.&lt;/p&gt;

&lt;p&gt;ğ &lt;strong&gt;useEffect&lt;/strong&gt; hook must declare inside the component (top-level, don't declare them in the block), it will give several advantages (Thanks to closure):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It will have accessibility to those data that are required to use in side effects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can also update the data later, based on the dependencies and changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax of Effect hook is below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8S_y3rTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb3sa645fa36mmnsxqrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8S_y3rTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb3sa645fa36mmnsxqrs.png" alt="useEffect Syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first argument in &lt;em&gt;useEffect&lt;/em&gt; is to give side effects function.&lt;/li&gt;
&lt;li&gt;The second argument is the dependencies array which gives instructions to &lt;em&gt;useEffect&lt;/em&gt; hook when to run and when to not. Let's see this more closely:

&lt;ul&gt;
&lt;li&gt;If you don't give dependences array, only pass the first argument, then &lt;em&gt;useEffect&lt;/em&gt; runs whenever your component renders/re-renders.&lt;/li&gt;
&lt;li&gt;If you give an empty dependences array, then &lt;em&gt;useEffect&lt;/em&gt; runs once(when your component renders the first time, after that, it will not run unless you refresh the page).&lt;/li&gt;
&lt;li&gt;If you give something in the dependencies array, then &lt;em&gt;useEffect&lt;/em&gt; will run once by default after the component finish rendering. After that, whenever the value of elements in the dependences array change, then &lt;em&gt;useEffect&lt;/em&gt; will run again. Example: [isItemHidden].&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ğ Well, whenever your components finish rendering, useEffects run unless you specified dependencies in the dependencies array.&lt;/p&gt;

&lt;p&gt;ğ¤·ââï¸ &lt;strong&gt;Why should we use useEffects( )?&lt;/strong&gt; ğ¤&lt;/p&gt;

&lt;p&gt;There are several cases where you should consider useEffects. Some of them are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Suppose you are fetching some data online to display movie titles, ratings &amp;amp; you have used handler(Function with the synthetic event) or used inline Functions to get that data. So, what will happen is your component rendering will be stuck when the thread of execution reaches this point until you get the data from outside of the world.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By seeing the first point, we can move those side effects to the useEffect hook so that our components can load/render. After completing the rendering process, React Engine will fire the useEffect hook to run the side effects code and update the component data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We should useEffect, when your component depends on the outside world data, and we can not guarantee that data will come or not (maybe the server is down there). So, Instead of throwing errors and stop other components from being rendered, move them into useEffect hook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you are using browser API (including Timer function, fetch API, local storage and for more browser API, refer to this: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;MDN Browser API&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ğ &lt;strong&gt;Some use cases of React useEffect hook:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always run whenever component renders/re-renders.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7OI9Y-xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/accnnrp4iarrvg6rkg1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7OI9Y-xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/accnnrp4iarrvg6rkg1h.png" alt="usecase1"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run once after that if component re-renders, then it will not run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3LhY4DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcnpsqytok5wmxffehub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3LhY4DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcnpsqytok5wmxffehub.png" alt="usecase2"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run once by default after that if prop values changes, then run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAEReVNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsynsti2ejohwmlzqxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAEReVNO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsynsti2ejohwmlzqxyi.png" alt="usecase3"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run once by default after that if state changes than run.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a84omf0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9407rzaewb61dp7h8ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a84omf0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9407rzaewb61dp7h8ga.png" alt="usecase4"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-much-more"&gt;
  &lt;/a&gt;
  And Much Moreâ¦ğ¥ğ
&lt;/h2&gt;

&lt;p&gt;ğ There are other Hooks as well in React. Will try to continue it as series. Stay Tuned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-liked-this-post-please-react-and-let-me-know-what-you-think-in-the-comments-see-you-in-next-article-goodbye"&gt;
  &lt;/a&gt;
  If you liked this post, please react and let me know what you think in the comments! See you in next Article. Goodbye.
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Java Question Bank with Solutions</title>
      <author>Mansi Saxena</author>
      <pubDate>Wed, 11 Aug 2021 07:09:42 +0000</pubDate>
      <link>https://dev.to/saxenamansi/java-question-bank-with-solutions-30o3</link>
      <guid>https://dev.to/saxenamansi/java-question-bank-with-solutions-30o3</guid>
      <description>&lt;p&gt;Want to practice those newly learned Java concepts, but do not have a question bank with solutions? Look no further! &lt;a href="https://github.com/saxenamansi/Java-Beginner-To-Intermediate"&gt;This&lt;/a&gt;  GitHub repository has it all!&lt;/p&gt;

&lt;p&gt;The concepts covered are - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic Java Questions&lt;/li&gt;
&lt;li&gt;Arrays &lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Object Oriented Questions - Classes and Objects&lt;/li&gt;
&lt;li&gt;Object Oriented Questions - Interfaces, Inheritance, Abstract Classes, Packages&lt;/li&gt;
&lt;li&gt;Exception Handling Questions &lt;/li&gt;
&lt;li&gt;Multi-Threading Questions&lt;/li&gt;
&lt;li&gt;File Handling Questions&lt;/li&gt;
&lt;li&gt;Collections - ArrayList&lt;/li&gt;
&lt;li&gt;JDBC Concepts&lt;/li&gt;
&lt;li&gt;JavaFX Questions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If these solutions help you, do star the repository. Reach out to me for any help/doubts. Happy Learning!&lt;/p&gt;

</description>
      <category>java</category>
      <category>learning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Step Functions Workflow Studio with Serverless Framework</title>
      <author>Sebastian Bille</author>
      <pubDate>Wed, 11 Aug 2021 07:02:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m</link>
      <guid>https://dev.to/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.serverless.com/plugins/serverless-step-functions"&gt;serverless-step-functions plugin&lt;/a&gt; is a nifty &lt;a href="https://github.com/serverless/serverless"&gt;Serverless Framework&lt;/a&gt; extension that allows you to define step functions directly within the &lt;code&gt;serverless.yml&lt;/code&gt;. However, the definitions for step functions tend to get messy fast and it's hard to visualize how a workflow actually looks and flows just from looking at the YAML. The &lt;a href="https://aws.amazon.com/blogs/aws/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/"&gt;Step Functions Workflow Studio&lt;/a&gt; helps you with exactly this by allowing you to interactively sketch out your state machine. In this post, I'll give you a brief walkthrough of how we can use the Workflow Studio together with the Step Functions plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-state-machine"&gt;
  &lt;/a&gt;
  Creating a State Machine
&lt;/h2&gt;

&lt;p&gt;To get started, navigate to the &lt;a href="//console.aws.amazon.com/states/"&gt;Step Functions&lt;/a&gt; page in the AWS Console and press "&lt;strong&gt;Create state machine&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnrF9fxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrou3d3cevtvwxhjwex0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnrF9fxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrou3d3cevtvwxhjwex0.png" alt="image-20210716221315868"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, choose "&lt;strong&gt;Design your workflow visually&lt;/strong&gt;", then go to &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QP3m_yqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhz8uwx9rugwt8gxo05f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QP3m_yqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhz8uwx9rugwt8gxo05f.png" alt="image-20210716221446618"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you can drag and drop &lt;em&gt;Actions&lt;/em&gt; and &lt;em&gt;Flows&lt;/em&gt;, tinker with the properties, flow, and error handling until you're happy with the design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaeHp2kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xdounm9kcb24jtrjdr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaeHp2kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xdounm9kcb24jtrjdr1.png" alt="image-20210716221527803"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set any resources that you want to eventually define in your serverless app to refer to a made-up value in the meantime - setting the Lambda &lt;em&gt;Function name&lt;/em&gt; to just a string name for example. Once you're done, click "&lt;strong&gt;Next&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KE-5-Tr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k45mi92v2fkiwxljuse6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KE-5-Tr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k45mi92v2fkiwxljuse6.png" alt="image-20210811082837045"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At last, we have our generated JSON schema for the state machine! But wait. Our Serverless template is in YAML, not JSON - how do we translate this into something that we can actually use? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aI5fDpht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhrgz7numjjne5bujv7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aI5fDpht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhrgz7numjjne5bujv7g.png" alt="image-20210716221635101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it turns out, &lt;a href="https://www.geeksforgeeks.org/what-is-the-difference-between-yaml-and-json/"&gt;YAML is just a superset of JSON&lt;/a&gt;, meaning all JSON is valid YAML. The JSON that was generated is in the form of &lt;a href="https://states-language.net/spec.html"&gt;Amazon State Languages spec&lt;/a&gt;, and that same spec is used by our serverless-step-functions plugin. This means that we can translate our JSON snippet to YAML using an online tool, such as &lt;a href="https://codebeautify.org/json-to-yaml"&gt;Code Beatify&lt;/a&gt;, or a CLI tool such as &lt;a href="https://mikefarah.gitbook.io/yq/usage/convert"&gt;yq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eT2Qy4e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeoq7f9h7giuu206p9nz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eT2Qy4e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeoq7f9h7giuu206p9nz.png" alt="image-20210716221957330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got the state machine defined in YAML, all we need to do is actually use it in the &lt;code&gt;serverless.yml&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-together"&gt;
  &lt;/a&gt;
  Putting it together
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't already have a serverless project set up, check out my &lt;a href="https://dev.to/aws-builders/lightning-fast-simple-typescript-serverless-builds-33ed"&gt;guide to a simple esbuild setup&lt;/a&gt; or just run &lt;code&gt;serverless&lt;/code&gt; in your terminal to choose from one of the boilerplates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The serverless-step-functions plugin extends the &lt;code&gt;serverless.yml&lt;/code&gt; format with a root &lt;code&gt;stepFunctions&lt;/code&gt; property. We'll use that to define our step function by pasting in our YAML snippet as the definition of the state machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// serverless.yml&lt;/span&gt;
&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;...&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;stepFunctions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stateMachines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;myStateMachine&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyStateMachine&lt;/span&gt;
        &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;your generated state machine goes here&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that any references to Lambda functions or other services that we used placeholder references for needs to be updated to refer to the actual resources we want them to point to. As an example, a Lambda definition might look like this when generated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;FirstFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
  &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:states:::lambda:invoke&lt;/span&gt;
  &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$.Payload&lt;/span&gt;
  &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$&lt;/span&gt;
    &lt;span class="na"&gt;FunctionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;firstFunction&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can change that to instead refer to a &lt;code&gt;firstFunction&lt;/code&gt; Lambda defined in our stack by changing it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;FirstFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
  &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;firstFunction.Arn&lt;/span&gt;
  &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$.Payload"&lt;/span&gt;
  &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the workflow from the examples above, this is what the full &lt;code&gt;serverless.yml&lt;/code&gt; might look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;step-functions-demo&lt;/span&gt;

&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;serverless-step-functions&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;

&lt;span class="na"&gt;stepFunctions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stateMachines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;myStateMachine&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyStateMachine&lt;/span&gt;
      &lt;span class="na"&gt;definition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This is your state machine&lt;/span&gt;
        &lt;span class="na"&gt;StartAt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;First function&lt;/span&gt;
        &lt;span class="na"&gt;States&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;First function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;firstFunction.Arn&lt;/span&gt;
            &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$.Payload"&lt;/span&gt;
            &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;
            &lt;span class="na"&gt;Retry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ErrorEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.ServiceException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.AWSLambdaException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.SdkClientException&lt;/span&gt;
              &lt;span class="na"&gt;IntervalSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
              &lt;span class="na"&gt;MaxAttempts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
              &lt;span class="na"&gt;BackoffRate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
            &lt;span class="na"&gt;Next&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wait&lt;/span&gt;
          &lt;span class="na"&gt;Wait&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wait&lt;/span&gt;
            &lt;span class="na"&gt;Seconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
            &lt;span class="na"&gt;Next&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Second function&lt;/span&gt;
          &lt;span class="na"&gt;Second function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;secondFunction.Arn&lt;/span&gt;
            &lt;span class="na"&gt;OutputPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$.Payload"&lt;/span&gt;
            &lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Payload.$&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;
            &lt;span class="na"&gt;Retry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ErrorEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.ServiceException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.AWSLambdaException&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Lambda.SdkClientException&lt;/span&gt;
              &lt;span class="na"&gt;IntervalSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
              &lt;span class="na"&gt;MaxAttempts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;
              &lt;span class="na"&gt;BackoffRate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
            &lt;span class="na"&gt;End&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;firstFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/functions/first.handler&lt;/span&gt;
  &lt;span class="na"&gt;secondFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/functions/second.handler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;If you enjoyed this post and want to see more&lt;/strong&gt;, follow me on Twitter at &lt;a href="https://twitter.com/tastefulelk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity! ğ&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>tutorial</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 6, Math Exercises </title>
      <author>Aatmaj</author>
      <pubDate>Wed, 11 Aug 2021 06:49:38 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-6-math-exercises-12ge</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-6-math-exercises-12ge</guid>
      <description>&lt;h2&gt;
  &lt;a href="#in-the-last-part-we-covered-the-math-module-in-this-part-we-will-solve-some-questions-related-to-it"&gt;
  &lt;/a&gt;
  In the last part we covered the math module. In this part, we will solve some questions related to it.
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#sample-questions"&gt;
  &lt;/a&gt;
  Sample questions.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write a program to check if a number is an &lt;a href="https://en.wikipedia.org/wiki/Narcissistic_number"&gt;"Armstrong number"&lt;/a&gt; or not
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#convert int to string to make it iteratable
&lt;/span&gt;    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1723&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#alternative"&gt;
  &lt;/a&gt;
  Alternative
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#shorthand for if Sum==x return True else return False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;armstrong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1723&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Write the function power which returns the number raise to a power without using the math function &lt;code&gt;pow()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8
8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Logic&lt;/strong&gt; The function power is a function which makes use of recursion in Python. The power is raised using recursive multiplication. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#alternative"&gt;
  &lt;/a&gt;
  Alternative-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;81
81
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise.
&lt;/h3&gt;

&lt;p&gt;Write the following functions without using their predefined math versions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hypot()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asinh()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers in the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python Repository&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So friends that's all for this part. ğ Hope you all are enjoying.ğ Please let me know in the comment section if you liked it or not. ğ§ And don't forget to like the post if you did. ğ I am open to any suggestions or doubts. ğ¤  Just post in the comments below or Gmail me. ğ&lt;br&gt;
Thank you for being so patient.ğ&lt;br&gt;
Also please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made especially for this course and don't forget to star it too!!!&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>ğ Posts on Javascript features ğ</title>
      <author>Akash Shah</author>
      <pubDate>Wed, 11 Aug 2021 06:31:45 +0000</pubDate>
      <link>https://dev.to/akash_dev/posts-on-javascript-features-3kgd</link>
      <guid>https://dev.to/akash_dev/posts-on-javascript-features-3kgd</guid>
      <description>&lt;p&gt;You might be using Javascript development for a long time but sometimes you might not be updated with newest beautiful features that it offers which can solve your issues without writing extra codes. These techniques can help you write clean and optimized JavaScript Code. Moreover, these topics can help you to prepare yourself for JavaScript interviews in 2021.&lt;/p&gt;

&lt;p&gt;JavaScript is the front-hand language as we know. JavaScript is using for web designing, mobile apps, game development, crate web servers, and JavaScript is Client Site Scripting Language(CSSL). That's one of the most used languages by developers, programmers, and coders.&lt;/p&gt;

&lt;p&gt;In 2021, JavaScript has more updated new features that can help to make your work easier. Some of them are most used in development or programming. Here, I've listed them below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/07/5-best-features-of-javascript-2021-that.html"&gt;5 Best Features of JavaScript 2021-That You Should Know About&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/06/useful-tips-in-javascript.html"&gt;Useful Tips &amp;amp; Tricks In JavaScript &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://apoorvtyagi.tech/javascript-tips-and-best-practices"&gt;JavaScript Tips and Best Practices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/blessingartcreator/17-javascript-optimization-tips-3gil"&gt;17 Javascript optimization tips to know in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>programming</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Adding a snackbar in Flutter</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 11 Aug 2021 06:19:28 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/adding-a-snackbar-in-flutter-57ma</link>
      <guid>https://dev.to/dailydevtips1/adding-a-snackbar-in-flutter-57ma</guid>
      <description>&lt;p&gt;I don't mean the Dutch word snackbar (see image below), but a toast-like message that we can use to feedback to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiQEwcW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628058626323/VYl8ytH-w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiQEwcW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628058626323/VYl8ytH-w.jpeg" alt="Adding a snackbar in Flutter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using snackbars in mobile apps is very common as they are a perfect way to provide valuable feedback.&lt;/p&gt;

&lt;p&gt;For today's article, I will be using my &lt;a href="https://daily-dev-tips.com/posts/flutter-how-it-works-hello-world/"&gt;Flutter hello world app&lt;/a&gt; as the starting point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements-for-a-flutter-snackbar"&gt;
  &lt;/a&gt;
  Requirements for a Flutter snackbar
&lt;/h2&gt;

&lt;p&gt;The cool part is that the only requirement for using a snackbar in Flutter is wrapping our application in a scaffold.&lt;br&gt;
Something we do most of the time anyway.&lt;/p&gt;

&lt;p&gt;We can then use something called the &lt;code&gt;ScaffoldMessenger&lt;/code&gt; to send a message on specific actions.&lt;/p&gt;

&lt;p&gt;Snackbars themselves can have options in return which we'll also have a look at.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#invoking-a-snackbar-in-flutter"&gt;
  &lt;/a&gt;
  Invoking a snackbar in Flutter
&lt;/h2&gt;

&lt;p&gt;Let's add a button to our application so we can use that to invoke our snackbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ElevatedButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{},&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Open the snackbar'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will give us an empty button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sj9L30Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628059222702/vCg2a5pOS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sj9L30Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628059222702/vCg2a5pOS.png" alt="Button on Flutter application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside this button, we have the &lt;code&gt;onPressed&lt;/code&gt; method, which we'll use to bind our action sheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;snackbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SnackBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;content:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello world, Snackbar here!'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ScaffoldMessenger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;showSnackBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snackbar&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we click our button, the snackbar will show at the bottom of our screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKcyqxrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628059391687/gtvPR2MN1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKcyqxrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628059391687/gtvPR2MN1.png" alt="Flutter snackbar in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-action-to-the-flutter-snackbar"&gt;
  &lt;/a&gt;
  Adding an action to the Flutter snackbar
&lt;/h2&gt;

&lt;p&gt;We can also use the snackbar to give the user action.&lt;br&gt;
This might be to undo something they just did.&lt;/p&gt;

&lt;p&gt;For instance: User changes a row, the snackbar will show: Successfully modified row x. Then we can have an undo button to revert this change again.&lt;/p&gt;

&lt;p&gt;That code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;snackbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SnackBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;content:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Successfully modified row x'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;action:&lt;/span&gt; &lt;span class="n"&gt;SnackBarAction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;label:&lt;/span&gt; &lt;span class="s"&gt;'Undo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Add your undo code here&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ScaffoldMessenger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;showSnackBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snackbar&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to implement the code that will undo the action you just did in the onPressed callback.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: A snackbar is designed only to have one action. For multiple actions, we should &lt;a href="https://daily-dev-tips.com/posts/build-a-todo-list-app-with-flutter/"&gt;use a dialog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVhhzfTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628059546081/JPf0hqZhx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVhhzfTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628059546081/JPf0hqZhx.png" alt="Flutter snackbar actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see the source code, you can find that on &lt;a href="https://github.com/rebelchris/flutter/tree/snackbar"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>Patterns of Conflict: Understand blitzkrieg with 4 German words</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 11 Aug 2021 06:06:06 +0000</pubDate>
      <link>https://dev.to/sandordargo/patterns-of-conflict-understand-blitzkrieg-with-4-german-words-6nl</link>
      <guid>https://dev.to/sandordargo/patterns-of-conflict-understand-blitzkrieg-with-4-german-words-6nl</guid>
      <description>&lt;p&gt;I shared recently a &lt;a href="https://devreads.sandordargo.com/boyd-by-robert-coram/"&gt;book review with you&lt;/a&gt;. It was about the biography of Colonel John Boyd. In case you haven't heard about him, he was a fighter pilot, an engineer who changed how aircrafts are designed and a military strategist who contributed a lot to the doctrines of modern warfare.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLbLzn61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zueijhr98h8h65xdw30.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLbLzn61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zueijhr98h8h65xdw30.jpg" alt="Colonel John Boyd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a military strategist, he was obviously interested in why &lt;a href="https://en.wikipedia.org/wiki/Blitzkrieg"&gt;blitzkrieg&lt;/a&gt; was so successful. This interest led him to research earlier German generals and then as he dug deeper and studied the history of warfare back until &lt;a href="https://en.wikipedia.org/wiki/Sun_Tzu"&gt;Sun Tzu&lt;/a&gt; and &lt;a href="https://www.amazon.com/gp/product/1599869772/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1599869772&amp;amp;linkId=9cac1ca368bfee4bbbfce0c03a26d8d8"&gt;The Art of War&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I'm not going to go that far. I want to present you four German words with their meaning, four concepts that Boyd found decisive in understanding the German strategy used during the beginning of WWII. &lt;/p&gt;

&lt;p&gt;We'll also start to discuss how they are related to our craft, software development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fingerspitzengef%C3%BChl-fingertip-feeling"&gt;
  &lt;/a&gt;
  FingerspitzengefÃ¼hl / Fingertip Feeling
&lt;/h2&gt;

&lt;p&gt;Don't worry if you find it difficult to read out this word. &lt;em&gt;FingerspitzengefÃ¼hl&lt;/em&gt; stands for fingertip feeling. In an army, at each level starting from the smallest unit to the largest ones, soldiers and officers must be able to quickly understand what is going on in their respective environments.&lt;/p&gt;

&lt;p&gt;They have to implicitly know, even to feel what is happening around them. This deep understanding can only be achieved with the help of extensive training, deliberate practice and battlefield experience.&lt;/p&gt;

&lt;p&gt;We all operate within our own &lt;a href="https://en.wikipedia.org/wiki/OODA_loop"&gt;OODA loops&lt;/a&gt; and it is extremely important that we can observe our surroundings as fast as possible, faster than our enemies or our competitors so that we can react in timely manners and adjust our plans if needed.&lt;/p&gt;

&lt;p&gt;If you think about it, this ability to adjust quickly is what is behind agile and the frequent iterations of Scrum. &lt;a href="https://devreads.sandordargo.com/scrum-by-jeff-sutherland/"&gt;According to one of the founding fathers of Scrum, Jeff Sutherland&lt;/a&gt;, a fighter pilot himself, it was the OODA loop that inspired the creation of Scrum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mp6ahwHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uecra1s2kukz0myrziph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mp6ahwHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uecra1s2kukz0myrziph.png" alt="OODA loop by John Boyd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#einheit-unity"&gt;
  &lt;/a&gt;
  Einheit / Unity
&lt;/h2&gt;

&lt;p&gt;While it's important to have a fingertip feeling of your environment, if you want to exploit it on a team or on an organizational level, you need something that is called &lt;em&gt;Einheit&lt;/em&gt; in German. The closest word in English is unity.&lt;/p&gt;

&lt;p&gt;Let's get back to the success of blitzkrieg.&lt;/p&gt;

&lt;p&gt;In the Wehrmacht, starting from a certain level, every officer graduated from the same system, they had the same military training. Many knew each other very well, but even if it was not the case, they knew exactly what kind of education their subordinates and their superiors received. They knew exactly what they could expect from the others.&lt;/p&gt;

&lt;p&gt;Obviously, it's not possible to replicate this in a business context. You cannot have people coming from the same schools with the same education. Moreover, in a business context, it's probably not even desirable, a healthy diversity helps to deliver better solutions.&lt;/p&gt;

&lt;p&gt;At the same time, having a common vocabulary, having a common understanding of certain areas is necessary so that a team can function on a high level. This unity can be only achieved by time.&lt;/p&gt;

&lt;p&gt;Given that the time is not allocated during education - like in the army -, teams have to form their unity in "wartime" while delivering projects, fighting production incidents. It's immensely destructive to constantly rearrange teams. Rearranging groups in an army is probably still destructive, but they have their common grounds way beyond their units which is not true to modern project teams.&lt;/p&gt;

&lt;p&gt;The more you reshuffle, the less people will know each other, the less they will understand what they can expect from others. In fact, the more you toss them around, the less they will understand their environment. Change the setting enough, they will even lose their ability to implicitly understand their surroundings - until they can learn it once again unless they are moved around one more time before they could adapt. &lt;/p&gt;

&lt;p&gt;On a team level, they also lose their unity. Building up trust among team members takes time and with each reorganization, the trust levels are pretty much reset to zero.&lt;/p&gt;

&lt;p&gt;The more you rearrange teams, the less they will have fingertip control of their environment, the less they will have the implicit understanding of what another will do in critical situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auftragstaktik-mission-tactics"&gt;
  &lt;/a&gt;
  Auftragstaktik / Mission Tactics
&lt;/h2&gt;

&lt;p&gt;If an army, an organization wants to exploit the benefits of having a &lt;em&gt;fingertip feeling&lt;/em&gt; of their environment and &lt;em&gt;unity&lt;/em&gt; in their units, it's necessary that everyone has a broad understanding of the mission. Everyone should understand what has to be accomplished.&lt;/p&gt;

&lt;p&gt;These concepts of the mission or mission tactics are behind the word "auftragstaktik".&lt;/p&gt;

&lt;p&gt;Note that we talk about concepts, we talk about a broad understanding. If you have read &lt;a href="https://devreads.sandordargo.com/extreme-ownership/"&gt;Extreme Ownership&lt;/a&gt;, you are probably familiar with the concept of decentralized command.&lt;/p&gt;

&lt;p&gt;The main idea is that the units are not directed by explicit commands. The leaders share the primary goal that must be achieved, they share their intents and the decision making is pushed down to the lowest level that makes sense. By pushing down decision making in the organization, those will decide who implicitly understand their environment, those who have the &lt;em&gt;fingertip feeling&lt;/em&gt;, those who have the &lt;em&gt;unity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In theory, that's also what agile aims for. Making the teams understanding their main goals. Making their own decisions instead of micromanaging the teams, in order to achieve their and their organization's goals.&lt;/p&gt;

&lt;p&gt;Hence, understanding the strategic goals and set that on an organizational level is important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schwerpunkt-main-effort"&gt;
  &lt;/a&gt;
  Schwerpunkt / Main Effort
&lt;/h2&gt;

&lt;p&gt;Schwerpunkt is the main effort, the primary focus. It is what the organization wants to achieve at a given point. All the previous items, the &lt;em&gt;fingertip feeling&lt;/em&gt; of the environment, &lt;em&gt;unity&lt;/em&gt; and &lt;em&gt;understanding the mission&lt;/em&gt; should serve the main goal.&lt;/p&gt;

&lt;p&gt;They are all paramount parts of successful execution. &lt;/p&gt;

&lt;p&gt;Having our primary focus well-defined at every moment is a must. Otherwise, the different units might go into slightly different diretions which would still be valid, right moves. They would still represent a broad understanding of the mission. But together, the different efforts make the organization go thin. If the strategic goal is underpinned with what should be the main focus, what should be the main effort, everyone can act in their own areas in the same direction.&lt;/p&gt;

&lt;p&gt;If you think about war, there might be different successful ways to achieve the goal of a campaign, but if those are all tried at the same time, they will likely all fail. But if the leadership defines what should be in the focus of the different units, then all of them can decide based on their knowledge how to support that main focus and unite all their strengths.&lt;/p&gt;

&lt;p&gt;If you think about software development, if the business unit defines that the mission is to provide the best software to their clients, the teams might have different ideas. Some will think about solving the incoming incidents the fastest way in the industry, while others will think about various innovative new features. Maybe others will think about the highest possible availability. If the different units go in all these different directions, nothing will be achieved. But if the leadership also define that at first high availability must be achieved, that should be the main effort, all the teams can work in unity towards the main goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As a follow to Boyd's biography, today we discussed his findings on the effectiveness of blitzkrieg and how it relates to software development.&lt;/p&gt;

&lt;p&gt;We saw that fingertip feeling, unity, mission tactics and main effort are similarly important parts of the equation that guarantees the flawless and successful execution of a mission.&lt;/p&gt;

&lt;p&gt;Later, I'll examine the above points one by one in detail in regards to software development management practices.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>agile</category>
      <category>management</category>
      <category>history</category>
    </item>
    <item>
      <title>Learning Go by examples: part 5 - Create a Game Boy Advance (GBA) game in Go</title>
      <author>AurÃ©lie Vache</author>
      <pubDate>Wed, 11 Aug 2021 05:58:45 +0000</pubDate>
      <link>https://dev.to/aurelievache/learning-go-by-examples-part-5-create-a-game-boy-advance-gba-game-in-go-5944</link>
      <guid>https://dev.to/aurelievache/learning-go-by-examples-part-5-create-a-game-boy-advance-gba-game-in-go-5944</guid>
      <description>&lt;p&gt;After created an &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-2-create-an-http-rest-api-server-in-go-1cdm"&gt;HTTP REST API server&lt;/a&gt;, our &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;first CLI (Command Line Interface) application in Go&lt;/a&gt; and our &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-4-create-a-bot-for-discord-in-go-43cf"&gt;Bot for Discord&lt;/a&gt;, what can we do now?&lt;/p&gt;

&lt;p&gt;What about coding your own Game Boy Advance game?!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-a-game-boy-advance-appgame"&gt;
  &lt;/a&gt;
  Why a Game Boy Advance app/game?
&lt;/h2&gt;

&lt;p&gt;As you may have already noticed in my &lt;a href="https://www.youtube.com/c/AurelieVache"&gt;"Understanding Kubernetes in a visual way"&lt;/a&gt; video serie on YouTube (in the background) I am a retrogamer fan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6vNsOeMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oslecltinyyompk9jctc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vNsOeMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oslecltinyyompk9jctc.png" alt="Understanding Kubernetes in a visual wa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a Developer (and Ops) for more than 15 years, I love retrogaming and I love to play with Go.&lt;/p&gt;

&lt;p&gt;But we can only code a game for GBA in C, isn't it? Well, it's not perfectly true, with &lt;strong&gt;TinyGo&lt;/strong&gt; we can code in Go and build for a lot of microcontrollers, WebAssembly... and Game Boy Advance (GBA) machine! Go is really cool, we can do many things with this language!&lt;/p&gt;

&lt;p&gt;And, for fun!&lt;/p&gt;

&lt;p&gt;So what about creating a game for one of my favorite portable console?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-boy-advance"&gt;
  &lt;/a&gt;
  Game Boy Advance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kUn7mMtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yqug66ekx7ldkd6lbil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kUn7mMtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yqug66ekx7ldkd6lbil.png" alt="Game Boy Advance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Game Boy Advance (GBA) was one of the handheld video games console produced by Nintendo released in 2001. In this console you can find a 240x160 (3:2 aspect ratio) 15-bit color LCD display, a multidirectional pad (&lt;a href="https://en.wikipedia.org/wiki/D-pad"&gt;D-pad&lt;/a&gt;), "A", "B", "L", "R", "START" &amp;amp; "SELECT" buttons for actions.&lt;/p&gt;

&lt;p&gt;The GBA CPU is based on a 32-bit ARM7TDMI core with embedded memory.&lt;/p&gt;

&lt;p&gt;One of the strength of this console is to be backward compatible with Game Boy and Game Boy Color games.&lt;/p&gt;

&lt;p&gt;GBA games are loaded in a game cartridge:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rn8BRFdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nclkp61yqyk78od13m9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rn8BRFdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nclkp61yqyk78od13m9.png" alt="GBA game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested about the technical specification of this console, you can find a lot of useful information in this &lt;a href="https://www.reinterpretcast.com/writing-a-game-boy-advance-game"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialization"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h2&gt;

&lt;p&gt;We created our &lt;a href="https://github.com/scraly/learning-go-by-examples"&gt;Git repository&lt;/a&gt; in the previous article, so now we just have to retrieve it locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/scraly/learning-go-by-examples.git
$ cd learning-go-by-examples
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will create a folder &lt;code&gt;go-gopher-gba&lt;/code&gt; for our CLI application and go into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir go-gopher-gba
$ cd go-gopher-gba
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have to initialize Go modules (dependency management):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init github.com/scraly/learning-go-by-examples/go-gopher-gba
go: creating new go.mod: module github.com/scraly/learning-go-by-examples/go-gopher-gba
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;go.mod&lt;/code&gt; file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraly&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;learning&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gopher&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gba&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before to start our super Game Boy Advance (GBA) application, as good practice, we will create a simple code organization.&lt;/p&gt;

&lt;p&gt;Create the following folders organization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
âââ README.md
âââ bin
âââ go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it? Yes, the rest of our code organization will be created shortly ;-).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tinygo"&gt;
  &lt;/a&gt;
  TinyGo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYHqJy0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf7fbx866zfcb6zuaeiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYHqJy0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf7fbx866zfcb6zuaeiw.png" alt="TinyGo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tinygo.org/"&gt;TinyGo&lt;/a&gt; is a Go compiler for embedded systems and to the modern web.&lt;br&gt;
You can compile and run TinyGo programs on a lot of microcontroller boards such as the BBC micro:bit, the Arduino Uno, the Nintendo Switch and the &lt;a href="https://tinygo.org/docs/reference/microcontrollers/gameboy-advance/"&gt;Game Boy Advance&lt;/a&gt; ;-).&lt;/p&gt;

&lt;p&gt;TinyGo can also produce WebAssembly (WASM) code which is very compact in size. You can compile programs for web browsers, as well as for server and edge computing environments that support the WebAssembly System Interface (WASI) family of interfaces.&lt;/p&gt;

&lt;p&gt;When I discovered TinyGo in the begining of 2020 I was just: WoW, it's awesome!!!!&lt;/p&gt;

&lt;p&gt;First, we will &lt;a href="https://tinygo.org/getting-started/install/"&gt;install TinyGo&lt;/a&gt;. If you have a MacOS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew tap tinygo-org/tools
$ brew install tinygo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check TinyGo is correctly installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tinygo version
tinygo version 0.19.0 darwin/amd64 (using go version go1.16.5 and LLVM version 11.0.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-create-our-app"&gt;
  &lt;/a&gt;
  Let's create our app!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3GVfm3Gi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgot0q55htadv3kd8jsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3GVfm3Gi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgot0q55htadv3kd8jsr.png" alt="Gopher Park"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do we want?&lt;/p&gt;

&lt;p&gt;This simple Game Boy Advance app/game should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display a screen with "Gopher" text and "Press START button"&lt;/li&gt;
&lt;li&gt;Display two gophers&lt;/li&gt;
&lt;li&gt;When you press &lt;strong&gt;START&lt;/strong&gt; button: your Gopher player just appear&lt;/li&gt;
&lt;li&gt;With multidirectional arrows you can move your Gopher at left, right, top or bottom&lt;/li&gt;
&lt;li&gt;When you press &lt;strong&gt;A&lt;/strong&gt; button: your Gopher jump :-D &lt;/li&gt;
&lt;li&gt;When you press &lt;strong&gt;SELECT&lt;/strong&gt; button, you go back to "Start" screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems to be cool for a first start, let's do it!&lt;/p&gt;

&lt;p&gt;OK, so let's start!&lt;/p&gt;

&lt;p&gt;As we can see in the &lt;a href="https://tinygo.org/docs/reference/microcontrollers/gameboy-advance/"&gt;TinyGo website&lt;/a&gt;, the Game Boy Advance is a handheld videogame platform based on the &lt;strong&gt;ARM7TDMI&lt;/strong&gt; microcontroller. It's a useful information and we can find in this page the link to the &lt;code&gt;machine&lt;/code&gt; package for GBA... and that's all, we will talk about the lack of real documentation later :-).&lt;/p&gt;

&lt;p&gt;Nevertheless, a lack of documentation and up-to-date working example will not stop us. So I will show you the code and explain to you step by step.&lt;/p&gt;

&lt;p&gt;As we will display text messages in our app, we will create a &lt;code&gt;fonts&lt;/code&gt; folder and put inside the fonts in Go that we want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fonts
âââ freesansbold24pt7b.go
âââ gophers58pt.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find theses fonts in my &lt;a href="https://github.com/scraly/learning-go-by-examples/tree/main/go-gopher-gba"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After this prerequisite, we will create the code of our app. In order to do this, we will create a &lt;code&gt;gopher.go&lt;/code&gt; file and copy/paste the following code into it.&lt;/p&gt;

&lt;p&gt;First, Go code is organized into packages. So, we initialize the package, called main, and all dependencies/librairies we need to import and use in our main file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"image/color"&lt;/span&gt;
    &lt;span class="s"&gt;"machine"&lt;/span&gt;
    &lt;span class="s"&gt;"runtime/interrupt"&lt;/span&gt;
    &lt;span class="s"&gt;"runtime/volatile"&lt;/span&gt;
    &lt;span class="s"&gt;"unsafe"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-gba/fonts"&lt;/span&gt;
    &lt;span class="s"&gt;"tinygo.org/x/tinydraw"&lt;/span&gt;
    &lt;span class="s"&gt;"tinygo.org/x/tinyfont"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we initialize a list of variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;//KeyCodes / Buttons&lt;/span&gt;
    &lt;span class="n"&gt;keyDOWN&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;895&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyUP&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;959&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyLEFT&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;991&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyRIGHT&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1007&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyLSHOULDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;511&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyRSHOULDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;767&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyA&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1022&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keyB&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1021&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keySTART&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1015&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keySELECT&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1019&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Register display&lt;/span&gt;
    &lt;span class="n"&gt;regDISPSTAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;volatile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Register16&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uintptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x4000004&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="c"&gt;// Register keypad&lt;/span&gt;
    &lt;span class="n"&gt;regKEYPAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;volatile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Register16&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uintptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x04000130&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="c"&gt;// Display from machine&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;

    &lt;span class="c"&gt;// Screen resolution&lt;/span&gt;
    &lt;span class="n"&gt;screenWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Colors&lt;/span&gt;
    &lt;span class="n"&gt;black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;white&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Google colors&lt;/span&gt;
    &lt;span class="n"&gt;gBlue&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;163&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;gRed&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;219&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;gYellow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;gGreen&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;157&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Coordinates&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kt"&gt;int16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="c"&gt;//TODO: horizontally center&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="c"&gt;//TODO: vertically center&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we define several variables that we will use in our code, in order to avoid a code complex to read and in order to not copy/paste RGB colors code in several pieces of code.&lt;/p&gt;

&lt;p&gt;Then, we define our &lt;code&gt;main()&lt;/code&gt; function that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configure and register the display (the console's screen)&lt;/li&gt;
&lt;li&gt;call the function that will draw our texts and Gophers&lt;/li&gt;
&lt;li&gt;plug an &lt;code&gt;update()&lt;/code&gt; function in an interrupt signal&lt;/li&gt;
&lt;li&gt;define an infinite loop to avoid exiting the application
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Set up the display&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Register display status&lt;/span&gt;
    &lt;span class="n"&gt;regDISPSTAT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetBits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Display Gopher text message and draw our Gophers&lt;/span&gt;
    &lt;span class="n"&gt;drawGophers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Creates an interrupt that will call the "update" fonction below, hardware way to display things on the screen&lt;/span&gt;
    &lt;span class="n"&gt;interrupt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IRQ_VBLANK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Infinite loop to avoid exiting the application&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's implement our &lt;code&gt;drawGophers()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;drawGophers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Display a textual message "Gopher" with Google colors&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold24pt7b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gBlue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold24pt7b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'o'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold24pt7b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gYellow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold24pt7b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;126&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gGreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold24pt7b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;154&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gBlue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold24pt7b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gRed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Display a "press START button" message - center&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TomThumb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Press START button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Display two gophers&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;195&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I want to display text messages, I used &lt;strong&gt;TinyFont&lt;/strong&gt; package with fonts we put in &lt;code&gt;fonts&lt;/code&gt; folder... and I used it to display our Gophers too!&lt;br&gt;
For the moment we can't display an image and load a sprite so I had to find a way to display our cute Gophers ;-).&lt;/p&gt;

&lt;p&gt;Then, we need to implement our &lt;code&gt;update()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interrupt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interrupt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Read uint16 from register regKEYPAD that represents the state of current buttons pressed&lt;/span&gt;
    &lt;span class="c"&gt;// and compares it against the defined values for each button on the Gameboy Advance&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;keyValue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regKEYPAD&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;keyValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Start the "game"&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keySTART&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;// Clear display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;// Display gopher&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Go back to Menu&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keySELECT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;drawGophers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;// Gopher go to the right&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keyRIGHT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;// Clear display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
        &lt;span class="c"&gt;// display gopher at right&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Gopher go to the left&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keyLEFT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;// Clear display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
        &lt;span class="c"&gt;// display gopher at right&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Gopher go to the down&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keyDOWN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;// Clear display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Gopher go to the up&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keyUP&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;// Clear display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Gopher jump&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;keyA&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;// Clear display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;// Display the gopher up&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;// Clear the display&lt;/span&gt;
        &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;// Display the gopher down&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
        &lt;span class="n"&gt;tinyfont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DrawChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Regular58pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hum... AurÃ©lie, is it possible to explain to us what you have done in this function?&lt;/p&gt;

&lt;p&gt;In fact, previously we registered to KeyPad so everytime a button and/or a multidirectional arrow is pressed, the &lt;code&gt;update()&lt;/code&gt; function is called so into it. Then I create a &lt;code&gt;switch case&lt;/code&gt; that allow me to execute code depending on the button pressed.&lt;/p&gt;

&lt;p&gt;And, finally, I don't find any existing method that clear screen, or that fill a color in the entire screen, GBA machine TinyGo implementation don't have the needed function. So I use a trick: I create a small function that draw a rectangle with the full size of the screen in black (as black is the background color of the display screen).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;clearScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilledRectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kt"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;screenWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-needed-dependencies"&gt;
  &lt;/a&gt;
  Install needed dependencies
&lt;/h2&gt;

&lt;p&gt;We use external packages/dependencies in &lt;code&gt;gopher.go&lt;/code&gt; file, so we have to install them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get tinygo.org/x/tinydraw
$ go get tinygo.org/x/tinyfont
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tinyfont"&gt;
  &lt;/a&gt;
  TinyFont
&lt;/h2&gt;

&lt;p&gt;TinyGo is not a standalone way to build Go app for microcontrollers and lightweight hardware but the main GitHub repository contains also several useful tools like &lt;a href="https://github.com/tinygo-org/tinyfont"&gt;TinyFont&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69fHK7cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq0cnpwq9famofen5azh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69fHK7cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq0cnpwq9famofen5azh.png" alt="TinyFont"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TinyFont is afont/text package for TinyGo displays (based on Adafruit's GFX library).&lt;/p&gt;

&lt;p&gt;TinyFont repository contains several &lt;a href="https://github.com/tinygo-org/tinyfont"&gt;fonts&lt;/a&gt; you can use in your apps and import like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"tinygo.org/x/tinyfont/freemono"&lt;/span&gt;
    &lt;span class="s"&gt;"tinygo.org/x/tinyfont/freesans"&lt;/span&gt;
    &lt;span class="s"&gt;"tinygo.org/x/tinyfont/freeserif"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to use your personal fonts, you can convert it from BDF format to "TinyGo" compatible format with &lt;a href="https://github.com/tinygo-org/tinyfont/tree/release/cmd/tinyfontgen"&gt;tinyfontgen&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;Usage example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tinyfontgen --package my-font --fontname MyFontRegular12pt MyFont-Regular-12pt.bdf --output MyFont-Regular-12pt.go --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tinydraw"&gt;
  &lt;/a&gt;
  TinyDraw
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/tinygo-org/tinydraw"&gt;TinyDraw&lt;/a&gt; is an useful tool that allow you to draw geometrics figures (based on  Adafruit GFX library).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mC9dRZlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgutmx73jinoe24yngd5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mC9dRZlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgutmx73jinoe24yngd5.png" alt="TinyDraw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to TinyDraw you can easily draw geometrics forms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;white&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RGBA&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;106&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilledRectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilledCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tinydraw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FilledTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;144&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gopher-font"&gt;
  &lt;/a&gt;
  Gopher font
&lt;/h2&gt;

&lt;p&gt;As we can't display images and sprites for the moment in GBA hardware with TinyFont, I needed to find a way to display our favorite Gophers, the trick is to use an awesome existing &lt;a href="http://2ttf.com/HCQ3PvcaQ4U"&gt;Gopher font&lt;/a&gt; created by &lt;a href="https://twitter.com/rakyll"&gt;Jaana Dogan (@rakyll)&lt;/a&gt;, thanks!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_llBITGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e03a21krkk59klhrxnx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_llBITGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e03a21krkk59klhrxnx6.png" alt="Gopher font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can even play with this font in the &lt;a href="http://2ttf.com/typetest.php?id=HCQ3PvcaQ4U"&gt;2ttf playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnVai2U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31cx5b0ikvn6iuzq1wh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnVai2U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31cx5b0ikvn6iuzq1wh9.png" alt="2ttf playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gba-emulator"&gt;
  &lt;/a&gt;
  GBA emulator
&lt;/h2&gt;

&lt;p&gt;It's time to test our app, but if you don't have a real Game Boy Advance (GBA) retro portable videogame console, it's not a problem because several emulator exists.&lt;/p&gt;

&lt;p&gt;TinyGo recommend, and use, &lt;a href="https://mgba.io"&gt;mGBA&lt;/a&gt;, a Game Boy Advance software emulator so we will install it to test our apps.&lt;/p&gt;

&lt;p&gt;First, &lt;a href="https://mgba.io/downloads.html"&gt;download mGBA&lt;/a&gt;, untar it and then copy it in your PATH:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cp ./bin/mgba /usr/local/bin/mgba
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As usual, check the executable is working correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mgba --version
mgba 0.9.2 (f6d5f51d231053cc8a1778b7a139096d2bcf7324)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool!&lt;/p&gt;

&lt;p&gt;You can run mGBA with the command line tool &lt;code&gt;mgba&lt;/code&gt;, (located in &lt;code&gt;bin&lt;/code&gt; folder), but you have also the possibility to run the visual application (located in &lt;code&gt;Applications&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSFe3Pdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x82o8h2ivinw17isvc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSFe3Pdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x82o8h2ivinw17isvc0.png" alt="mGBA app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, controls are mapped to the keyboard like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    A: X
    B: Z
    L: A
    R: S
    Start: Enter
    Select: Backspace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it!
&lt;/h2&gt;

&lt;p&gt;It's time to test our little game!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tinygo run -target=gameboy-advance gopher.go
tinygo:ld.lld: warning: lld uses blx instruction, no object with architecture supporting feature detected
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will compile the code, execute mGBA emulator and load your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGl7bxCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ltxyl6lato4jckwwpl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGl7bxCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ltxyl6lato4jckwwpl9.png" alt="Start menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! &lt;/p&gt;

&lt;p&gt;Now, press the "&lt;strong&gt;START&lt;/strong&gt;" button (the &lt;strong&gt;ENTER&lt;/strong&gt; touch in your keyboard), you should see a green Gopher appear at the center of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--io0ue9Jc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7pchaux6yorgjjiqofe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--io0ue9Jc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7pchaux6yorgjjiqofe.png" alt="green Gopher"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With multidirectional arrows you can move the Gopher at left, right, bottom and top.&lt;/p&gt;

&lt;p&gt;And if you press the "&lt;strong&gt;A&lt;/strong&gt;" button (X in the keyboard by default), Gopher should do a jump :-).&lt;/p&gt;

&lt;p&gt;You can watch the following video with the demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/V-VnFMijaI8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-it"&gt;
  &lt;/a&gt;
  Build it!
&lt;/h2&gt;

&lt;p&gt;Your application is ready, you can build it.&lt;br&gt;
For that, like the previous articles, we will use &lt;a href="https://taskfile.dev/#/"&gt;Taskfile&lt;/a&gt; in order to automate our common tasks.&lt;/p&gt;

&lt;p&gt;So, for this app too, I created a &lt;code&gt;Taskfile.yml&lt;/code&gt; file with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod tinygo run -target=gameboy-advance gopher.go&lt;/span&gt;

    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the GBA app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod tinygo build -size short -o bin/gopher.gba -target=gameboy-advance gopher.go&lt;/span&gt;

    &lt;span class="na"&gt;build-mgba&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the GBA app for mGBA&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod tinygo build -size short -o bin/gopher.elf -target=gameboy-advance gopher.go&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mv bin/gopher.elf bin/gopher.gba&lt;/span&gt;

    &lt;span class="na"&gt;mgba&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Load the game&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mgba bin/gopher.gba&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to this, we can build our app easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ task build
task: [build] GOFLAGS=-mod=mod tinygo build -size short -o bin/gopher.gba -target=gameboy-advance gopher.go
tinygo:ld.lld: warning: lld uses blx instruction, no object with architecture supporting feature detected
   code    data     bss |   flash     ram
   4128   28536    3116 |   32664   31652

$ ll bin/gopher.gba
-rwxr-xr-x  1 aurelievache  staff   229K  7 aoÃ» 18:53 bin/gopher.gba
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;build-mgba&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the GBA app for mGBA&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod tinygo build -size short -o bin/gopher.elf -target=gameboy-advance gopher.go&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mv bin/gopher.elf bin/gopher.gba&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a minute, what is this strange tricks in the &lt;code&gt;build-mgba&lt;/code&gt; task?&lt;/p&gt;

&lt;p&gt;Currently, there is a bug with mGBA: &lt;code&gt;tinygo build&lt;/code&gt; command don't build a correct GBA ROM that mGBA can load and run correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tinygo build -target=gameboy-advance -o bin/gba-display.gba gba-display.go 
tinygo:ld.lld: warning: lld uses blx instruction, no object with architecture supporting feature detected

$ file bin/gba-display.gba
bin/gba-display.gba: data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run it through mGBA emulator, the game crash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mgba bin/gba-display.gba
The game crashed!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0In4XuE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw9z6ijozmzhqq5z0op8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0In4XuE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw9z6ijozmzhqq5z0op8.png" alt="Game crashed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after having a discussion with TinyGo contributors, if I build to an &lt;code&gt;.elf&lt;/code&gt; file and then copy it to a &lt;code&gt;.gba&lt;/code&gt; file, it should working... and it's true.&lt;/p&gt;

&lt;p&gt;So if you have the same bug like me, you know the trick ;-).&lt;/p&gt;

&lt;p&gt;If you want to load it through &lt;strong&gt;VisualBoyAdvance&lt;/strong&gt; app, another GBA emulator, you don't need the trick, the following command will run a working format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tinygo build -size short -o bin/gopher.gba -target=gameboy-advance gopher.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-on-a-real-handset"&gt;
  &lt;/a&gt;
  Test on a real handset!
&lt;/h2&gt;

&lt;p&gt;I don't like emulator, I prefer "physical" retrogaming console so I wanted to test with a real handset. I've got the chance to have one GBA and one GBA SP console in working condition, but how can I transfer my &lt;code&gt;gopher.gba&lt;/code&gt; file into my console?&lt;/p&gt;

&lt;p&gt;In order to do that you can use a "linker", like the &lt;a href="https://www.ezflash.cn/product/omega/"&gt;"EZ Flash Omega"&lt;/a&gt; I bought. It allow you to copy your &lt;code&gt;.gba&lt;/code&gt; files into a microSD card you put in this particular GBA cartridge.&lt;/p&gt;

&lt;p&gt;It's time to test ... crossed fingers!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6svLRP5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8klywi8x6yaepgam5nij.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6svLRP5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8klywi8x6yaepgam5nij.jpg" alt="Gopher on GBA SP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The little Gopher app is working in the Game Boy Advance SP! :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#easy-isnt-it"&gt;
  &lt;/a&gt;
  Easy! Isn't it?
&lt;/h2&gt;

&lt;p&gt;Well ... If I tell you it was very easy to create this game (this simple app with cute Gophers), it's a lie ^^.&lt;/p&gt;

&lt;p&gt;TinyGo is a really good tool but one of the pain point is the documentation and concrete up-to-date and working examples :-(.&lt;/p&gt;

&lt;p&gt;I will be totally honest to you. I knew &amp;amp; know nothing about microcontrollers, electronics and hardware so without concrete examples, without tutorials, without a good documentation, it was not easy to create this app but I'm very happy to created it and I hope with this article will motivate you to test TinyGo in your side :-).&lt;/p&gt;

&lt;p&gt;If you want to test TinyGo, you can play with it through the existing &lt;a href="https://play.tinygo.org/"&gt;playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, with &lt;a href="https://twitter.com/titimoby"&gt;TitiMoby&lt;/a&gt;, we created a fresh new GitLab repository &lt;a href="https://gitlab.com/TitiMoby/tinygo-examples"&gt;tinygo-examples&lt;/a&gt; containing several working and concrete examples in TinyGo with Adafruit PyGamer, GBA... and soon WebAssembly.&lt;br&gt;
Don't hesitate to add your own TinyGo examples! :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsbXNfnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3lz7u4g4iphll9tk6j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsbXNfnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3lz7u4g4iphll9tk6j6.png" alt="TinyGo examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen in this article and previous articles, it's possible to create applications in Go: CLI, REST API, Bot for Discord... and also apps for microcontrollers and retro consoles! :-)&lt;/p&gt;

&lt;p&gt;All the code of our little Gopher GBA app in Go is available in: &lt;a href="https://github.com/scraly/learning-go-by-examples/tree/main/go-gopher-gba"&gt;https://github.com/scraly/learning-go-by-examples/tree/main/go-gopher-gba&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following articles we will create others kind/types of applications in Go.&lt;/p&gt;

&lt;p&gt;Hope you'll like it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>game</category>
    </item>
    <item>
      <title>Money - and how to handle it</title>
      <author>Stuart Jones</author>
      <pubDate>Wed, 11 Aug 2021 05:57:53 +0000</pubDate>
      <link>https://dev.to/horus_kol/money-and-how-to-handle-it-2k4k</link>
      <guid>https://dev.to/horus_kol/money-and-how-to-handle-it-2k4k</guid>
      <description>&lt;p&gt;Many years ago, one of my first tasks as a developer was to make some changes to an application that my company's salesmen used to estimate the price for customer projects.&lt;/p&gt;

&lt;p&gt;After I started digging around, the second thing I noticed (after seeing all the comments were in German) was that the prices of everything (hardware, software, engineering time) were stored as integers and were divided by 10,000 when presented to show the price in Â£ (British pounds).&lt;/p&gt;

&lt;p&gt;I asked my boss about this, and I was told that "this was how sales and accounting software deals with money".&lt;/p&gt;

&lt;p&gt;After learning this, I quickly worked out why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-not-float-or-double-or-real"&gt;
  &lt;/a&gt;
  Why not float (or double, or real)?
&lt;/h2&gt;

&lt;p&gt;Almost all modern computers store data as binary information, and perform binary mathematics. This is fine for whole numbers (up to a limit), since any number can be represented as a combination of various powers of 2. For example, the value 23 is stored in &lt;span&gt;8-bit&lt;/span&gt; memory as &lt;code&gt;00010111&lt;/code&gt;, which is &lt;code&gt;16 + 4 + 2 + 1&lt;/code&gt; or &lt;code&gt;2^4 + 2^2 + 2^1 + 2^0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This would be great if all numbers are whole numbers. However, we needed to be able to perform mathematics and handle numbers that have fractional components - such as, 0.1, 1/3, sin(45Â°), or the square root of 2. There were a few different approaches to this problem, but since the 1980s almost every computer and programming language uses the same solution - the &lt;a href="https://en.wikipedia.org/wiki/IEEE_754"&gt;IEEE 754 standard&lt;/a&gt; - and this is the basis for the float and double types used in various programming languages, also known as floating-point types.&lt;/p&gt;

&lt;p&gt;Floating-point types are not perfect, the limitations of binary storage creates some minor issues, but for most applications they are good enough.&lt;/p&gt;

&lt;p&gt;Consider this, though:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0.3&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0.30000000000000004&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These seem a little harmless, and could be fixed by using rounding functions, although this can be a little cumbersome:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There can also be problems with rounding some numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4999999999999999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.49999999999999999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="mf"&gt;0.4999999999999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0.5&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="mf"&gt;0.49999999999999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4999999999999999&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.49999999999999999&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These discrepancies may seem small, but do enough financial mathematics - add and subtract values, perform discounts and apply tax calculations - and eventually you'll get tripped up, and receive a call or email from your head of finance or clients or customers (or maybe all three). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixedpoint-types"&gt;
  &lt;/a&gt;
  Fixed-point types
&lt;/h2&gt;

&lt;p&gt;Some languages, including SQL, have a fixed-point type. These allow for decimal values that are store with the same precision as integers.&lt;/p&gt;

&lt;p&gt;Unfortunately, if you are using standard PHP or JavaScript (the &lt;code&gt;Number.toFixed()&lt;/code&gt; method is for presentation and outputs a string), these fixed-point types will be cast to floating-point types, and end up with the same precision errors you are trying to avoid.&lt;/p&gt;

&lt;p&gt;They also have limitations in that you have to specify the size and precision of the fixed-point numbers you want to use. For example, in MySQL, setting a column to &lt;code&gt;DECIMAL(5,2)&lt;/code&gt; will let you store values from -999.99 to 999.99, but you will encounter errors if you try to set the field to 10,000 or 0.001. This means that you need to be aware of the range and precision you need before using it.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href="https://pecl.php.net/package/decimal"&gt;PECL package&lt;/a&gt; that provides Decimal support to PHP, and also a &lt;a href="https://mikemcl.github.io/decimal.js/"&gt;library for JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#money-as-an-integer"&gt;
  &lt;/a&gt;
  Money as an integer
&lt;/h2&gt;

&lt;p&gt;So, to avoid all these floating-point precision issues, you should store and work with money values as integers.&lt;/p&gt;

&lt;p&gt;There's a couple of ways to do this, such as having a dollars and cents column (or pounds/pence or whatever). However, the simplest approach is to have a single column/value and use a precision factor to convert the number as a money value for presentation.&lt;/p&gt;

&lt;p&gt;Depending on how you're accessing the database you can cast the value into a simple Money object, which handles the presentation and so on. You could even wrap or extend this with Currency object that would handle currency symbols and localised formatting (sometimes the currency symbol precedes the value, sometimes it comes after - some countries write numbers like &lt;code&gt;1,234.56&lt;/code&gt;, some &lt;code&gt;1 234.56&lt;/code&gt;, and others &lt;code&gt;1.234,56&lt;/code&gt;).&lt;/p&gt;

</description>
      <category>database</category>
      <category>development</category>
      <category>javascript</category>
      <category>php</category>
    </item>
    <item>
      <title>Making digital currency; How to create a new cryptocurrency</title>
      <author>milad</author>
      <pubDate>Wed, 11 Aug 2021 05:56:21 +0000</pubDate>
      <link>https://dev.to/milad75091361/making-digital-currency-how-to-create-a-new-cryptocurrency-42cf</link>
      <guid>https://dev.to/milad75091361/making-digital-currency-how-to-create-a-new-cryptocurrency-42cf</guid>
      <description>&lt;p&gt;In recent years, many startups have made a lot of money by creating a digital currency and selling tokens in the initial public offering. Creating a new digital currency may seem like an impossible process to most people. While making digital currency is possible if you have enough knowledge in this field. In this article, we will introduce you to the methods of making a digital currency and at the end, we will answer some common questions in this regard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-new-digital-currencies-being-created"&gt;
  &lt;/a&gt;
  Why are new digital currencies being created?
&lt;/h2&gt;

&lt;p&gt;Even if virtual money has been available to the public for a long time, Bitcoin is the first known and most successful cryptocurrency in the cryptocurrency market. Many cryptocurrencies have been created today, the most popular of which are Bitcoin, Ripple, and Ethereum.&lt;/p&gt;

&lt;p&gt;Some unique features make companies and individuals think about creating cryptocurrencies. The most important features of digital currency are cryptography, security and confidentiality, no need to monitor a central institution, transparency of transactions, fast transactions, and ease of transfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-difference-between-coins-and-digital-currency-tokens"&gt;
  &lt;/a&gt;
  The difference between coins and digital currency tokens
&lt;/h2&gt;

&lt;p&gt;Some people mistakenly use tokens and quins as synonyms. While Token and Quinn are different. The most important thing that distinguishes a token from a quin is the lack of an independent blockchain. Tokens are created on the platform of other blockchains. But Quinn has an independent blockchain.&lt;/p&gt;

&lt;p&gt;Another important difference between coins and tokens is that coins are used to buy and sell and are considered a method of payment. While most tokens can be used for use in an application or as an asset. Bitcoin, Ethereum, Ripple, and Light Coin are the most popular coins in the digital currency market. Tetra, Chainlink, Dai, and Avi are also in the category of tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-currency-making-training-introducing-3-methods"&gt;
  &lt;/a&gt;
  Digital currency making training; Introducing 3 methods
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#method-one-create-a-new-digital-currency-by-creating-tokens"&gt;
  &lt;/a&gt;
  Method one: Create a new digital currency by creating tokens
&lt;/h3&gt;

&lt;p&gt;One way to make digital currency is to create tokens. As we have said, a token is a digital currency that does not have its independent blockchain and has been created and launched in the context of another blockchain. For this reason, when a token is generated, there is no need to work on the rules of consensus.&lt;/p&gt;

&lt;p&gt;Making tokens is cost-effective for blockchain developers because they do not need the astronomical cost of designing a blockchain to achieve their goals. Of course, it is also important to note that many digital currencies, when in their infancy, are implemented on another blockchain platform to save costs, but once they have been sufficiently developed, a dedicated blockchain for They are used to launch.&lt;/p&gt;

&lt;p&gt;The token can be created on all blockchain platforms that use smart contracts. Ethereum is one of the most popular token-building platforms. At the time of writing, Ethereum has hosted more than 80% of the tokens on the market. Bainenschin, Ias, Kazmas, Thezos, and Theron are other common platforms for making tokens.&lt;/p&gt;

&lt;p&gt;Ethereum's programming language is solidity. Solidarity uses concepts that exist in other programming languages ââsuch as PHP. It is a high-level programming language that has all the capabilities and capabilities needed for blockchain software.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-create-digital-currency-by-copying-and-modifying-current-blockchains"&gt;
  &lt;/a&gt;
  Method 2: Create digital currency by copying and modifying current blockchains
&lt;/h3&gt;

&lt;p&gt;Another way to build digital currency is to use open-source blockchains. Open source blocks are made available to the public with programming code after they are created.&lt;/p&gt;

&lt;p&gt;Ethereum and Bitcoin programming codes are also open source and can be accessed by anyone on GitHub. Many blockchains have been launched following the example of these two digital currencies. For example, by making a few changes to the Bitcoin blockchain, the LightCoin network is created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-3-create-a-digital-currency-by-creating-a-new-blockchain"&gt;
  &lt;/a&gt;
  Method 3: Create a digital currency by creating a new blockchain
&lt;/h3&gt;

&lt;p&gt;Build digital currency through the new blockchain&lt;br&gt;
Building and designing a blockchain network is another way to create a new digital currency. In a blockchain, data is stored in blocks and forms an interconnected chain. This structure creates an immutable storage system. The blocks are connected using hashes.&lt;/p&gt;

&lt;p&gt;Creating a new blockchain requires deep programming knowledge and a lot of time. In the following, the steps of creating a new digital currency through making blockchain are outlined in general.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select the consensus mechanism&lt;br&gt;
Consensus mechanisms are protocols for verifying transactions performed in blockchain without the need for a third party (intermediary). Proof of work and the stock proof is currently the most well-known and basic blockchain consensus mechanisms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the blockchain platform&lt;br&gt;
The correct choice of blockchain platform depends on the consensus mechanism you have chosen. The best blockchain operating systems are:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ethereum&lt;br&gt;
Waves (WAVES)&lt;br&gt;
Hyperledger Fabric&lt;br&gt;
NEM&lt;br&gt;
IBM blockchain&lt;br&gt;
Nxt (NXT)&lt;br&gt;
HydraChain&lt;br&gt;
BlockStarter&lt;br&gt;
BigChainDB&lt;br&gt;
EOS&lt;br&gt;
Quorum&lt;br&gt;
IOTA&lt;br&gt;
CoinList&lt;br&gt;
MultiChain&lt;br&gt;
Open chain&lt;br&gt;
Chain Core&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Design the nodes&lt;br&gt;
You need to decide how the blockchain works and design the nodes accordingly. For example, will the licenses be private or public? Will the hosting be on-premises web systems or cloud systems?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specify the blockchain architecture&lt;br&gt;
Before launching a digital currency, you need to be sure of all aspects; Because you can not change multiple blockchain parameters after startup. For example, you need to specify what address blockchain will follow to track exchanges of different cryptocurrencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design the user interface&lt;br&gt;
If your user interface is not good, the cipher project will fail. You need to make sure you are using the latest version of FTP servers, databases, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#frequently-asked-questions-about-making-new-digital-currencies"&gt;
  &lt;/a&gt;
  Frequently Asked Questions about Making New Digital Currencies
&lt;/h2&gt;

&lt;p&gt;Here are some questions about building a new digital currency.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Does making a digital currency always lead to profitability?&lt;br&gt;
No. More than a few hundred thousand digital currencies have been launched on various platforms, many of which have failed. For this reason, all aspects of work must be well weighed before creating a digital currency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the reason for the failure of some new digital currencies?&lt;br&gt;
Unfortunately, this perspective often causes us to become overwhelmed when it's time to start a new digital currency. That's why we see so many teams being forgotten after spending so much money and energy to create a new digital currency, without gaining popularity. One of the main reasons for their failure is that they failed to do good marketing. Therefore, before any action, the marketing system must be well defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the first step in building a new digital currency?&lt;br&gt;
The first step in creating a new digital currency is to have a well-defined digital currency white paper. White paper in the world of digital currencies means a comprehensive and complete report of the problem that the introduced project seeks to solve. Project objectives should be clearly defined within the white paper. A standard and complete white paper include an abstract, introduction, problem definition, product description, technical details, descriptions of the new digital currency, details of the public offering, and introduction of the development team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How much does it cost to create a new digital currency?&lt;br&gt;
Creating new passwords is not an easy task and will probably require some financial resources; Unless you can handle things like development, documentation, and marketing. The cost of building an encrypted currency depends on several factors, and no specific number can be specified.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding remarks
&lt;/h2&gt;

&lt;p&gt;Creating a new dedicated currency may seem like an attractive and profitable offer at first, but we must not forget that there are many challenges in this direction. For this reason, sufficient market research must be done before any action is taken. On the other hand, the necessary capital must be provided for manufacturing and marketing. Otherwise, the digital currency project is likely to fail in its infancy.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>crypto</category>
      <category>cryptocurrency</category>
    </item>
  </channel>
</rss>
