<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Configure ESLint For Your Project From Scratch</title>
      <author>Yogesh Chavan</author>
      <pubDate>Wed, 25 Aug 2021 05:24:56 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/how-to-configure-eslint-for-your-project-from-scratch-4kg</link>
      <guid>https://dev.to/myogeshchavan97/how-to-configure-eslint-for-your-project-from-scratch-4kg</guid>
      <description>&lt;p&gt;ESLint is a linter that helps to improve the code quality and fix bugs beforehand to avoid them from coming at runtime. It also helps to avoid hard to debug issues in the future.&lt;/p&gt;

&lt;p&gt;Knowing how to use ESLint is very important as most companies are actively using it.&lt;/p&gt;

&lt;p&gt;There are also other linters available like jslint, jshint but ESLint is the most widely used and popular.&lt;/p&gt;

&lt;p&gt;In this article, we will explore what is ESLint is and how to use it.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;ESLint displays warning or error messages when&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use a variable without declaring it&lt;/li&gt;
&lt;li&gt;We re-declare the variable&lt;/li&gt;
&lt;li&gt;We try to change the constant value&lt;/li&gt;
&lt;li&gt;We add unnecessary parenthesis&lt;/li&gt;
&lt;li&gt;When we use the wrong syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ESLint also provides suggestions based on preferred code style and wrong syntaxes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that ESLint just displays warnings or errors so you can fix them but it does not stop the program from running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; website is really nice and well documented which describes each part in detail with various rules and information related to that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation:
&lt;/h2&gt;

&lt;p&gt;Create a new folder with the name &lt;code&gt;eslint-setup&lt;/code&gt; and from inside this folder execute the following command in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt;

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now, Install the &lt;code&gt;eslint&lt;/code&gt; package as dev dependency as it's only used for development and not in production.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt;

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add &lt;code&gt;eslint&lt;/code&gt; entry into &lt;code&gt;devDependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-configuration"&gt;
  &lt;/a&gt;
  Basic Configuration
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;index.js&lt;/code&gt; in your &lt;code&gt;eslint-setup&lt;/code&gt; folder and add the following variable declaration inside it and save it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that, there is no error shown. This is because we need to do two things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the eslint VS Code extension&lt;/li&gt;
&lt;li&gt;Create .eslintrc file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's do that.&lt;/p&gt;

&lt;p&gt;Install the ESLint VS Code Extension as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iKywqMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629857907342/vHZgM9Dry.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iKywqMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629857907342/vHZgM9Dry.gif" alt="eslint.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Create a new file &lt;code&gt;.eslintrc&lt;/code&gt;( doteslintrc) with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extends&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add support for basic recommended ESLint rules. Save the file and if you open &lt;code&gt;index.js&lt;/code&gt;, you will see a red underline for the variable with the message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NrgS39Bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858147007/2y6UzFKDx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NrgS39Bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858147007/2y6UzFKDx.png" alt="no_unused.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the ESLint will make sure that you are not creating unnecessary variables which will never be used. &lt;/p&gt;

&lt;p&gt;The name in brackets in the error message (no-unused-vars) is the name of the rule which we can configure in the &lt;code&gt;.eslintrc&lt;/code&gt; file to either show or hide the message.&lt;/p&gt;

&lt;p&gt;If you don't want to see that red underline, you can disable it in your &lt;code&gt;.eslintrc&lt;/code&gt; file by adding it as a rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extends&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-unused-vars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;With this change, it will not show the red underline but generally, you should not disable the &lt;code&gt;no-unused-vars&lt;/code&gt; rule as it helps to avoid creating unused variables.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now lets use some ES6 features in our &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;index.js&lt;/code&gt; file and add following code inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you will see a red underline for the const keyword.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSZ-yqNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858372825/A21oupeKh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSZ-yqNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858372825/A21oupeKh.png" alt="reserved.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is because by default ESLint runs code in an ES5 environment.&lt;/p&gt;

&lt;p&gt;To specify ES6 and specify that the code can be run in a browser or node environment, we can add that as another property in the &lt;code&gt;.eslintrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extends&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parserOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ecmaVersion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;browser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;es6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in &lt;code&gt;parserOptions&lt;/code&gt;, we specify which ecmaVersion to use.&lt;/p&gt;

&lt;p&gt;If you hover over the number 6, you can see additional information about all available versions to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah7iyrHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858470631/O6UbR5Kli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah7iyrHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858470631/O6UbR5Kli.png" alt="versions.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can change the value as per your need.&lt;/p&gt;

&lt;p&gt;You can see all available environments &lt;a href="https://eslint.org/docs/user-guide/configuring#specifying-environments"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;a href="https://eslint.org/demo"&gt;this URL&lt;/a&gt; and click on the Rules Configuration button and you can check and uncheck the environments and verify the code by typing in the textarea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CB4--ZLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858810955/Pzb-EH2zb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CB4--ZLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629858810955/Pzb-EH2zb.png" alt="eslint_test_areas.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting-as-per-airbnb-style-guide"&gt;
  &lt;/a&gt;
  Linting as per Airbnb Style guide:
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;"extends": "eslint:recommended"&lt;/code&gt; inside &lt;code&gt;.eslintrc&lt;/code&gt; file is fine but it does not cover all styles guidelines. There are more usable and widely used guidelines in all projects provided by Airbnb which you can access &lt;a href="https://github.com/airbnb/javascript"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These guidelines, help us to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid creating objects using a new operator when required.&lt;/li&gt;
&lt;li&gt;Also displays a warning when we use let instead of const if the variable is not going to change.&lt;/li&gt;
&lt;li&gt;Helps to add and avoid extra spacing when using operators or functions.
and much much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Airbnb provides JavaScript and React linting support.&lt;/p&gt;

&lt;p&gt;To use linting for just JavaScript without React, you can install the following dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;airbnb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;latest&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt;

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;airbnb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;latest&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information about it &lt;a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To setup linting for JavaScript with React, install the following dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;airbnb&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;latest&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hooks&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a11y&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt;

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;airbnb&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;latest&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hooks&lt;/span&gt; &lt;span class="nx"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a11y&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information about it &lt;a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;and in &lt;code&gt;.eslintrc&lt;/code&gt; file, change&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extends&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extends&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;airbnb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's write some React code and we can check the linting.&lt;/p&gt;

&lt;p&gt;Now, open &lt;code&gt;index.js&lt;/code&gt; file and add the following code inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you save the file, you will see many red underlines saying:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unable to find packages react, react-dom&lt;/li&gt;
&lt;li&gt;'App' is never reassigned. Use 'const' instead&lt;/li&gt;
&lt;li&gt;JSX not allowed in files with extension 'js'&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--az1JwWIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629859591705/FooqJiTAh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--az1JwWIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629859591705/FooqJiTAh.png" alt="errors_.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fix the first error, install the &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;

&lt;span class="nx"&gt;OR&lt;/span&gt;

&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, for the second error is we need to change &lt;code&gt;let&lt;/code&gt; to &lt;code&gt;const&lt;/code&gt; as it's never changed.&lt;/p&gt;

&lt;p&gt;So it’s always recommended to use &lt;code&gt;const&lt;/code&gt; when its value is not going to change.&lt;/p&gt;

&lt;p&gt;As you can see, linting gives helpful suggestions to write better code.&lt;/p&gt;

&lt;p&gt;If you want to learn more information about what any error means, you can just copy the rule name displayed in brackets when you mouse hover over the red underline and search in google. Like &lt;code&gt;prefer-const eslint&lt;/code&gt; and it will show you all the information about how to fix and what issues it causes.&lt;/p&gt;

&lt;p&gt;To find more information about any rule and how to disable it, you can search for that rule on the rules page &lt;a href="https://eslint.org/docs/rules/"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you mouse over the JSX red underline on line number 6, you can see its rule name "react/jsx-filename-extension".&lt;/p&gt;

&lt;p&gt;If you can't find the rule on the rules page &lt;a href="https://eslint.org/docs/rules/"&gt;HERE&lt;/a&gt;, you can search for it in google as &lt;code&gt;react/jsx-filename-extension&lt;/code&gt; eslint and you will see the result showing how to fix it as shown &lt;a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So to disable this check, we can add a rule in the &lt;code&gt;.eslintrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react/jsx-filename-extension&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p2wT7DlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629860039004/UQQWE2zI9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p2wT7DlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629860039004/UQQWE2zI9.png" alt="disable_extension_error.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The value is generally one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;warn: to show as a warning&lt;/li&gt;
&lt;li&gt;error: to show as an error&lt;/li&gt;
&lt;li&gt;off: to not show the red underline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may find sometimes, error code is used in the documentation, instead of the text warn, error or off.&lt;/p&gt;

&lt;p&gt;0 is for off, 1 is for warn and 2 is for error.&lt;/p&gt;

&lt;p&gt;Now, if you save the &lt;code&gt;.eslintrc&lt;/code&gt; file, you will see that, there are no more red underlines in the &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;That's it about this article. Hope you learned something new.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;You can find Complete Github Source Code for this article with the additional configuration in .eslintrc for better linting &lt;a href="https://github.com/myogeshchavan97/eslint-setup"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will build 3 apps along with food ordering app and you'll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>node</category>
    </item>
    <item>
      <title>Top 5 Best E-Commerce Fulfillment Services Provider Companies in Saudi Arabia
</title>
      <author>prashanthpacchi</author>
      <pubDate>Wed, 25 Aug 2021 04:15:56 +0000</pubDate>
      <link>https://dev.to/prashanthpacchi/top-5-best-e-commerce-fulfillment-services-provider-companies-in-saudi-arabia-2571</link>
      <guid>https://dev.to/prashanthpacchi/top-5-best-e-commerce-fulfillment-services-provider-companies-in-saudi-arabia-2571</guid>
      <description>&lt;p&gt;&lt;strong&gt;1)What is meant by E-Commerce Fulfillment Services Provider Companies in Saudi Arabia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E-commerce fulfillment services provider companies in Saudi Arabia are the backbone of all ecommerce businesses operating within KSA. These are the companies that enable ecommerce businesses to keep track of their inventory, store their stock and then ship their goods to the customers. Ecommerce fulfillment services provider companies handle a wide array of services that are vital to ecommerce growth and success as they can determine the type of delivery experience every customer has. That's why ecommerce enterprises usually take a look at the best in the business before deciding on the carriers of their choice. We’ll be doing the same thing and adding a little more information on how to make your choice of the best ecommerce fulfillment services provider companies in Saudi Arabia specific to your ecommerce venture. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)Top 5 Best E-Commerce Fulfillment Services Provider Companies in Saudi Arabia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E-commerce businesses typically look for a wide range of services that enable effective supply chain management when selecting the best ecommerce fulfillment services provider companies in Saudi Arabia. While the focus is on volume and efficiency in shipping services, additional services also play a huge role in establishing the reputation of an ecommerce fulfillment company. We’ve listed below the &lt;a href="https://www.clickpost.ai/blog/top-10-best-ecommerce-fulfillment-services-companies-in-saudi-arabia"&gt;top 5 best e-commerce fulfillment services provider companies in Saudi Arabia&lt;/a&gt; based on reviews and opinions from ecommerce experts and logistics strategists. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1)Aramex&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Aramex is a leading ecommerce fulfillment services provider company in Saudi Arabia and has been for 4 decades. It offers a wide range of supply chain management services include virtual storefront integrations and technical support for shipment tracking and warehouse management. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2)Fetchr&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Fetchr is known for its highly effective services as an ecommerce fulfillment services provider company, which include a cloud-based platform for order management, logistics optimisation, and order scheduling for customers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.3)SMSA Express&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SMSA Express has been operational in Saudi Arabia for more than 20 years and is considered a top ecommerce fulfillment company when it comes to express transportation services. It offers core shipping services and fulfillment services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.4)FedEx&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FedEx is an international ecommerce fulfillment services provider company that operates in Saudi Arabia and provides specialised handling for heavyweight, high value and dangerous shipments in addition to customs clearance services and real-time tracking. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.5)Naqel Express&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Naqel express is known for providing personalised freight services by land, sea and air as well as offering scheduled deliveries and discounted rates for their shipments with the help of a freight specialist. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)How to Select the Best E-Commerce Fulfillment Services Provider Companies in Saudi Arabia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though the above listed companies are known for providing highly effective high quality ecommerce fulfillment services, they may still not be the right fit for your ecommerce business. And the last thing you want to be dealing with is a late discovery that a carrier you’ve tied up with isn’t right for you. So you need to go beyond looking at industry standards and also look at what your independent business requirements are. You may need a different range of services, specialised handling for different types of goods, or even a partner equipped to handle deliveries to certain hard-to-reach locations. All of the criteria listed below will help you determine the best e-commerce fulfillment services provider companies in Saudi Arabia to uplift your business. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.1)Serviceability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You first need to check whether the ecommerce fulfillment services provider companies you are looking at deliver the volume of orders you require to your locations. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.2)Visibility&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The next thing you need to ensure is that the ecommerce fulfillment services provider company enables fast and real-time visibility of orders in transit. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.3)Use of Resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From warehouses to GPS-enabled devices, there are numerous resources that ecommerce fulfillment companies in Saudi Arabia can utilise. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.4)Variety of Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Services offered by ecommerce fulfillment services provider companies in Saudi Arabia can be vast and varied from inventory management to exchange or returns management. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.5)Price of Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The price of all services should be at least equal to the amount of savings you will receive as a result of utilising the services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)Final Words&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running an e-commerce business requires more than just a great idea. It needs the right resources to balance out logistics needs and customer expectations. This is why your choice of e-commerce fulfillment services provider companies makes such a huge difference. These companies will help ensure your inventory is properly tracked and placed in the necessary warehouses, and from there, they handle picking and packing of your orders as well as first, mid and last mile delivery. Even returns and delivery exceptions are usually handled by these companies, making it especially important that you choose the best e-commerce fulfillment services provider companies in Saudi Arabia when you’re about to scale up your business. &lt;/p&gt;

</description>
      <category>fulfillmentservices</category>
      <category>saudiarabia</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>Simple Immutable Data w/ Spectacles 👓</title>
      <author>Anthony G</author>
      <pubDate>Wed, 25 Aug 2021 04:04:46 +0000</pubDate>
      <link>https://dev.to/anthonyjoeseph/simple-immutable-data-w-spectacles-4nb5</link>
      <guid>https://dev.to/anthonyjoeseph/simple-immutable-data-w-spectacles-4nb5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7xdp9fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f6lyxcav4bct6ie2gum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7xdp9fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f6lyxcav4bct6ie2gum.png" alt="Rose-Colored Spectacles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want to love &lt;a href="https://imfaber.me/javascript-functional-programming-immutability/"&gt;immutable data&lt;/a&gt; but think it's a drag?&lt;/p&gt;

&lt;p&gt;Are you perplexed by the syntax of &lt;a href="https://github.com/kolodny/immutability-helper"&gt;immutability-helper&lt;/a&gt;? Repulsed by &lt;a href="https://immerjs.github.io/immer/produce#example"&gt;immer.js&lt;/a&gt;'s use of assignment? Alarmed by &lt;a href="https://github.com/anthonyjoeseph/spectacles-ts/blob/main/readme-vid.gif"&gt;lodash's&lt;/a&gt; lack of type safety?&lt;/p&gt;

&lt;p&gt;Looking for something a little more intuitive, powerful &amp;amp; flexible? Get some clarity w/ spectacles (&lt;a href="https://github.com/anthonyjoeseph/spectacles-ts"&gt;github repo&lt;/a&gt;)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax-featuring-autocomplete"&gt;
  &lt;/a&gt;
  Syntax (featuring &lt;a href="https://github.com/anthonyjoeseph/spectacles-ts/blob/main/readme-vid.gif"&gt;auto-complete&lt;/a&gt;!)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fp-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// oldObj = { a: { b: 123 } }&lt;/span&gt;
&lt;span class="c1"&gt;// newObj = { a: { b: 999 } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's that simple!&lt;/p&gt;

&lt;p&gt;(If &lt;code&gt;pipe&lt;/code&gt; syntax is unfamiliar checkout this &lt;a href="https://rlee.dev/practical-guide-to-fp-ts-part-1"&gt;quick explanation&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functional-programming-fp"&gt;
  &lt;/a&gt;
  Functional Programming (fp)
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;spectacles-ts&lt;/code&gt; integrates seamlessly with the &lt;a href="https://gcanti.github.io/fp-ts/ecosystem/"&gt;fp-ts ecosystem&lt;/a&gt; (it's built on top of the excellent &lt;a href="https://github.com/gcanti/monocle-ts"&gt;monocle-ts&lt;/a&gt; library)&lt;/p&gt;

&lt;p&gt;Its &lt;a href="https://blogs.halodoc.io/functional-typescript/"&gt;curried functions&lt;/a&gt; fit in nicely w/ a functional style&lt;/p&gt;

&lt;p&gt;That's one reason you might want to use a function like &lt;code&gt;get&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// as = [123]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#array-access"&gt;
  &lt;/a&gt;
  Array access
&lt;/h2&gt;

&lt;p&gt;We can do &lt;code&gt;Array&lt;/code&gt; access using a &lt;code&gt;number&lt;/code&gt; for the index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;Array&lt;/code&gt; access at a given index might fail, we use fp-ts's &lt;code&gt;Option&lt;/code&gt; type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;O&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fp-ts/Option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;//           |&lt;/span&gt;
&lt;span class="c1"&gt;//           v&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;O&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// a = O.some(123)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Option&lt;/code&gt; type is powerful, featuring a &lt;a href="https://rlee.dev/practical-guide-to-fp-ts-part-2"&gt;full set of combinators&lt;/a&gt;. It can be a great, simple intro into the joys of fp-ts&lt;/p&gt;

&lt;p&gt;This also gives us a way to know when a 'set' call has failed, using &lt;code&gt;setOption&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOption&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;silentSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;silentFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// silentSuccess = [999]&lt;/span&gt;
&lt;span class="c1"&gt;// silentFailure = [123]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noisySuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;O&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;setOption&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noisyFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;O&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;setOption&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// noisySuccess = O.some([999])&lt;/span&gt;
&lt;span class="c1"&gt;// noisyFailure = O.none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#traversals"&gt;
  &lt;/a&gt;
  Traversals
&lt;/h2&gt;

&lt;p&gt;We can traverse an &lt;code&gt;Array&lt;/code&gt; to collect its nested data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// equivalent to:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="p"&gt;}].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// a = a2 = [123, 456]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or to make a change across all of its values&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// a = [{ a: 999 }, { a: 999 }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also traverse a &lt;code&gt;Record&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{}&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// a = [123, 456]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modification"&gt;
  &lt;/a&gt;
  Modification
&lt;/h2&gt;

&lt;p&gt;You can modify a value in relation to its old value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;modify&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="nx"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// mod = [{ a: 127 }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can even change a value's type this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;modifyW&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;//         ^&lt;/span&gt;
&lt;span class="c1"&gt;//         |&lt;/span&gt;
&lt;span class="c1"&gt;// The 'W' stands for 'widen'&lt;/span&gt;
&lt;span class="c1"&gt;// as in 'widen the type'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modW&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="nx"&gt;modifyW&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// mod = { a: '127' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also featuring &lt;a href="https://github.com/anthonyjoeseph/spectacles-ts#modifyoption"&gt;modifyOption&lt;/a&gt; and &lt;a href="https://github.com/anthonyjoeseph/spectacles-ts#modifyoptionw"&gt;modifyOptionW&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-object-types"&gt;
  &lt;/a&gt;
  Change Object types
&lt;/h2&gt;

&lt;p&gt;You can change an existing key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;upsert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// obj = { a: { b: 'abc' } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or add a new one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// obj = { a: { b: 123, c: 'abc' } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or remove a few of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removedKeys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// removedKeys = { nest: { b: 'abc' } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or rename a key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renamedKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// renamedKey = { nest: { a2: 123 } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#other-stuff"&gt;
  &lt;/a&gt;
  Other stuff
&lt;/h2&gt;

&lt;p&gt;You can access the index of a tuple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// getIndex = 123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can access the key of a record:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// getKey = 123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can pick a few keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickedKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// pickedKeys = { nest: { a: 999, b: 'abc', c: true } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can refine a union type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refined&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there are &lt;a href="https://github.com/anthonyjoeseph/spectacles-ts#operations"&gt;convenience&lt;/a&gt; operations for working with &lt;code&gt;Option&lt;/code&gt; and &lt;a href="https://rlee.dev/practical-guide-to-fp-ts-part-3"&gt;Either&lt;/a&gt; types&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation"&gt;
  &lt;/a&gt;
  Limitation
&lt;/h2&gt;

&lt;p&gt;You can only use up to four operations at a time (Alas!)&lt;/p&gt;

&lt;p&gt;You can nest functions instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fp-ts/function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modify&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spectacles-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getDeep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setDeep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;321&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesting functions that change their output type looks a little uglier, but it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upsertDeep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;modifyW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-spectaclests-endraw-vs-raw-monoclets-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;spectacles-ts&lt;/code&gt; vs &lt;code&gt;monocle-ts&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;spectacles-ts&lt;/code&gt; is built on top of &lt;a href="https://github.com/gcanti/monocle-ts"&gt;monocle-ts&lt;/a&gt;, which is more powerful and flexible but a little less ergonomic.&lt;/p&gt;

&lt;p&gt;monocle-ts has these advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;spectacles-ts&lt;/code&gt; only works in piped contexts (except for &lt;a href="https://github.com/anthonyjoeseph/spectacles-ts/blob/main/tests/get.spec.ts#L39"&gt;get&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;No limitation on object size&lt;/li&gt;
&lt;li&gt;can &lt;a href="https://github.com/gcanti/monocle-ts/blob/master/test/Lens.ts#L225"&gt;filter&lt;/a&gt; (similar to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;es6's filter&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;can traverse on any arbitrary traversable object (aka &lt;a href="https://github.com/gcanti/fp-ts-contrib/blob/master/test/Zipper.ts"&gt;Zippers&lt;/a&gt; or &lt;a href="https://github.com/gcanti/fp-ts/blob/master/test/Tree.ts"&gt;Rose Trees&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Can define an &lt;a href="https://github.com/gcanti/monocle-ts/blob/master/test/Iso.ts"&gt;isomorphism&lt;/a&gt; between two objects&lt;/li&gt;
&lt;li&gt;works with the &lt;a href="https://github.com/gcanti/monocle-ts/blob/master/test/Ix.ts"&gt;Map&lt;/a&gt; type&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope spectacles-ts can help you modify data both immutably &amp;amp; ergonomically!&lt;/p&gt;




&lt;p&gt;CREDITS:&lt;br&gt;
Logo - &lt;a href="https://www.loveleach.com/"&gt;Stuart Leach&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>functional</category>
    </item>
    <item>
      <title>25 Beginner JavaScript Project Ideas</title>
      <author>Miguel Nunez</author>
      <pubDate>Wed, 25 Aug 2021 03:57:23 +0000</pubDate>
      <link>https://dev.to/codefoxx/25-beginner-javascript-project-ideas-3m9h</link>
      <guid>https://dev.to/codefoxx/25-beginner-javascript-project-ideas-3m9h</guid>
      <description>&lt;p&gt;I previously wrote a blog about 15 JavaScript beginner projects and it was quite popular ( check it out &lt;a href="https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj"&gt;here&lt;/a&gt; ). What many didn't know is those projects were part of a list of 25. Below is the complete list just in case you missed that story. These projects should keep you busy for at least half a year. Assuming, of course, that you figure them out on your own with nothing but good old stackoverflow for tips.&lt;/p&gt;

&lt;p&gt;If you manage to get through all the projects this way, I can virtually guarantee that you'll be a bad ass developer. Don't believe me? When I first started, I could barely handle solving project number one on my own. By the time I was done, well, you see what I built on project 25. &lt;/p&gt;

&lt;p&gt;Once your done with these projects, you'll be more than ready to start with a framework like node.js and do some real damage. For now, build these projects so you can master the front-end. Don't rush yourself to full stack development. I see it happen all to often, aspiring developers trying to learn everything in a month and then looking like a deer that seen headlights when asked to build a decent looking website. Take your time and learn it right.&lt;/p&gt;

&lt;p&gt;I left a link to the GitHub repo for each project but that's only to be peeked at when you have tried everything else. You can also try out the projects live. &lt;/p&gt;

&lt;p&gt;Visit my website sometime at &lt;a href="http://miguelznunez.com/"&gt;Miguel Nunez&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Colors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Colors"&gt;
        Colors
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/BackgroundColor/"&gt;Colors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXZsSTeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7jdawpasw724koi95hg.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXZsSTeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7jdawpasw724koi95hg.JPG" alt="Colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Hex colors gradient&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Hex-Colors-Gradient"&gt;
        Hex-Colors-Gradient
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Hex-Colors-Gradient/"&gt;Hex Colors Gradient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ndATW58m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w45ujsltliudzvtdsic.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ndATW58m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w45ujsltliudzvtdsic.JPG" alt="Hex colors gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Random quote generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Random-Quote-Generator"&gt;
        Random-Quote-Generator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Random-Quote-Generator/"&gt;Random quote generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2L5jvh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiuw69bv592syw5u99tj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2L5jvh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiuw69bv592syw5u99tj.JPG" alt="Random quote generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. The message&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/The-message"&gt;
        The-message
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/The-message/"&gt;The message&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpcpiY_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbn2np63x8kciz9zc9bd.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpcpiY_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbn2np63x8kciz9zc9bd.JPG" alt="The message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Counter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Counter"&gt;
        Counter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Counter/"&gt;Counter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cU5QXZN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmgstlqqxb78tggaqla9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cU5QXZN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmgstlqqxb78tggaqla9.JPG" alt="Counter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Image carousel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/ImageCarousel"&gt;
        ImageCarousel
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/ImageCarousel/"&gt;Image carousel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jv2sM8VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3zjhhh2dir6uqdkl9kk.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jv2sM8VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3zjhhh2dir6uqdkl9kk.JPG" alt="Image carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Digital clock&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/DigitalClock"&gt;
        DigitalClock
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/DigitalClock/"&gt;Digital clock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIlfjov6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffkbvg4esduwo6z3mw9k.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIlfjov6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffkbvg4esduwo6z3mw9k.JPG" alt="Digital clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Calculator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Calculator"&gt;
        Calculator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Calculator/"&gt;Calculator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wtnt0b68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kyap5hpevivj0zbjqd2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wtnt0b68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kyap5hpevivj0zbjqd2.JPG" alt="Calculator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Grocery list&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Grocery-List"&gt;
        Grocery-List
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Grocery-List/"&gt;Grocery list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BxtsSE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv1y5bk5nlk9gpnnzqk7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BxtsSE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv1y5bk5nlk9gpnnzqk7.JPG" alt="Grocery list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Tip calculator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/TipCalculator"&gt;
        TipCalculator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/TipCalculator/"&gt;Tip calculator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6qpjUHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kk81mrjw74aqvd5ejxo.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6qpjUHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kk81mrjw74aqvd5ejxo.JPG" alt="Tip calculator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Flashcards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Flashcards"&gt;
        Flashcards
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Flashcards/"&gt;Flashcards&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bjns5KEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hppqvzrilk1jkyerad76.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bjns5KEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hppqvzrilk1jkyerad76.JPG" alt="Flashcards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. To-do list&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/To-do-list"&gt;
        To-do-list
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/To-do-list/"&gt;To-do list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sD74bT9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3phtlbljypvam45oe810.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sD74bT9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3phtlbljypvam45oe810.JPG" alt="To-do list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Sticky notes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Sticky-Notes"&gt;
        Sticky-Notes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Sticky-Notes/"&gt;Sticky notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Grwww_uB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c5bg5cphziaqemtpzp7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Grwww_uB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c5bg5cphziaqemtpzp7.JPG" alt="Sticky notes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Timer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Timer"&gt;
        Timer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Timer/"&gt;Timer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---wKoKmKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxm3y3v9fddfpw1h29ev.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wKoKmKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxm3y3v9fddfpw1h29ev.JPG" alt="Timer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Math&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Math4Kids"&gt;
        Math4Kids
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Math4kids/"&gt;Math4kids&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3bManqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st2tcvfid5ge1nbmqums.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3bManqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st2tcvfid5ge1nbmqums.JPG" alt="Math4kids"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;16. Unsplash API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/UnsplashAPI"&gt;
        UnsplashAPI
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/UnsplashAPI/"&gt;Unsplash API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDKjj15N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz5vurv05urr1nciz510.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDKjj15N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz5vurv05urr1nciz510.JPG" alt="Unsplash API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;17. Typewriter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Typewriter"&gt;
        Typewriter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Typewriter/"&gt;Typewriter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S6Y-hCEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bwr34temvtxlbz1bz2y.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S6Y-hCEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bwr34temvtxlbz1bz2y.JPG" alt="Typewriter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18. Square cards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/SquareCards"&gt;
        SquareCards
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/SquareCards/"&gt;Square cards&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x1gVktEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzbtrvyy80nyrym0dfpv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1gVktEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzbtrvyy80nyrym0dfpv.JPG" alt="Square cards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;19. Weather application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Weather-Application"&gt;
        Weather-Application
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Weather-Application/"&gt;Weather application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SS8Wf6yy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14fyfwef0ch042dk2zfx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SS8Wf6yy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14fyfwef0ch042dk2zfx.JPG" alt="Weather application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20. Wikipedia API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/WikipediaAPI"&gt;
        WikipediaAPI
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/WikipediaAPI/"&gt;Wikipedia API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIT_Ky63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj375376uhdhkeriy7iv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIT_Ky63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj375376uhdhkeriy7iv.JPG" alt="Wikipedia API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;21. Marvel API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Marvel-API"&gt;
        Marvel-API
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Marvel-API/"&gt;Marvel API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6NuJdoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e87qtey5jj34x7ax1vp6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6NuJdoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e87qtey5jj34x7ax1vp6.JPG" alt="Marvel API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;22. Quiz app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/Quiz-App"&gt;
        Quiz-App
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/Quiz-App/"&gt;Quiz App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQY4gCzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdsqqnzfi7ly4df3a5fl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQY4gCzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdsqqnzfi7ly4df3a5fl.JPG" alt="Quiz App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;23. Recipe API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamcodefoxx"&gt;
        iamcodefoxx
      &lt;/a&gt; / &lt;a href="https://github.com/iamcodefoxx/RecipeAPI"&gt;
        RecipeAPI
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Try it live:&lt;br&gt;
&lt;a href="https://github.com/iamcodefoxx/RecipeAPI/"&gt;Recipe API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-Y9K661--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efy62ry2wgk4ihmcpdvj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-Y9K661--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efy62ry2wgk4ihmcpdvj.JPG" alt="Recipe API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;24. Music player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
n/a&lt;/p&gt;

&lt;p&gt;Try it live:&lt;br&gt;
n/a&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--heoWDojo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2966b16lqwizjir1ume.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--heoWDojo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2966b16lqwizjir1ume.JPG" alt="Music player"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;25. Image editor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub:&lt;br&gt;
n/a&lt;/p&gt;

&lt;p&gt;Try it live:&lt;br&gt;
n/a&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahOsv2YF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l4zpk3wirqt1xtvihg0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahOsv2YF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l4zpk3wirqt1xtvihg0.JPG" alt="Image editor"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>projects</category>
      <category>coding</category>
    </item>
    <item>
      <title>Use AWS EC2 create VPN(SSR)(Chinese nad English description)</title>
      <author>Lei Feng</author>
      <pubDate>Wed, 25 Aug 2021 02:56:31 +0000</pubDate>
      <link>https://dev.to/leifengflying/use-aws-ec2-create-vpn-ssr-5d9e</link>
      <guid>https://dev.to/leifengflying/use-aws-ec2-create-vpn-ssr-5d9e</guid>
      <description>&lt;p&gt;Hi,guys,Today I will show you how to use aws ec2 to create ShadowsocksR&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#firstyou-should-launch-a-server-by-aws-ec2"&gt;
  &lt;/a&gt;
  First,You should launch a server by aws ec2
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1launch-a-ec2-server"&gt;
  &lt;/a&gt;
  1.Launch a ec2 server
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dYMk2zi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amf0cnmtq66tr1vcz2e8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dYMk2zi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amf0cnmtq66tr1vcz2e8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2choose-what-you-want-instance-type"&gt;
  &lt;/a&gt;
  2.Choose what you want instance type
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMAyxmAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etmkbz76ydjjwpxzpaez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMAyxmAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etmkbz76ydjjwpxzpaez.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3open-the-instance-security-group-portssuch-as-22"&gt;
  &lt;/a&gt;
  3.Open the instance security group ports,such as 22
&lt;/h3&gt;

&lt;p&gt;(Notice:When the shadowsocksr is deployed later, the corresponding port will be opened)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YpVZdyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs2vzchfv1aitlix4o9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YpVZdyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs2vzchfv1aitlix4o9q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4connect-to-you-create-ec2instance"&gt;
  &lt;/a&gt;
  4.Connect to you create ec2-instance
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tjs1cFRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rru0k4jyot79m6r0gynb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tjs1cFRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rru0k4jyot79m6r0gynb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#secondinstall-shadowsocksr-script"&gt;
  &lt;/a&gt;
  Second,Install ShadowsocksR Script
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1login-root-user"&gt;
  &lt;/a&gt;
  1.Login root user
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[ec2-user@ip-172-31-95-56 ~]$ sudo -i&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGiOYNOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lx27zejpu7re6zeinj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGiOYNOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lx27zejpu7re6zeinj2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2git-and-run-shadowsocksr-script"&gt;
  &lt;/a&gt;
  2.git and run ShadowsocksR script
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;amp;&amp;amp; chmod +x ssr.sh &amp;amp;&amp;amp; bash ssr.sh&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqavj5dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q73tysmpe8s8fame5j0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqavj5dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q73tysmpe8s8fame5j0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congiure-the-shadowsocksr-config"&gt;
  &lt;/a&gt;
  Congiure the ShadowSocksR config
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1first-you-will-see-this"&gt;
  &lt;/a&gt;
  1.First you will see this
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lveflo00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52asmog58yjxgnojfq1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lveflo00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52asmog58yjxgnojfq1j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-need-type-the-number-raw-1-endraw-to-install-shadowsocksr"&gt;
  &lt;/a&gt;
  You need type the number &lt;code&gt;1&lt;/code&gt; to install ShadowSocksR
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPldIBvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99sq7928w0jr8wko1qvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPldIBvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99sq7928w0jr8wko1qvl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2choose-the-shadowsocksr-server-portand-you-need-open-the-ec2-security-group-inbound-port"&gt;
  &lt;/a&gt;
  2.Choose the ShadowSocksR server port,and you need open the ec2 security group inbound port
&lt;/h3&gt;

&lt;p&gt;(default: 2333)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skPihnhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v78c2zvkqj3sh66bxrff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skPihnhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v78c2zvkqj3sh66bxrff.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3set-the-shadowsocksr-server-connect-password"&gt;
  &lt;/a&gt;
  3.Set the shadowsocksR server connect password
&lt;/h3&gt;

&lt;p&gt;(Default: doub.io)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPjBS-gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4cn8qcmhndwp5pn5oi4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPjBS-gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4cn8qcmhndwp5pn5oi4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4choose-the-encryption-mode"&gt;
  &lt;/a&gt;
  4.Choose the Encryption Mode
&lt;/h3&gt;

&lt;p&gt;[Note] if auth is used_ chain_ A protocol, please select none as the encryption method, and confusion is optional (recommended)&lt;br&gt;
[Note] the salsa20 / chachacha20 - * series encryption method requires additional installation (depends on libsodium, otherwise shadowsocksr cannot be started!)&lt;br&gt;
(Default: 5. aes-128-ctr)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9-Wo6QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2otjdlxbupoxmeo01cp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9-Wo6QI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2otjdlxbupoxmeo01cp5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5choose-protocol-plugin"&gt;
  &lt;/a&gt;
  5.Choose Protocol plug-in
&lt;/h3&gt;

&lt;p&gt;[Note] if auth is used_ chain_ A protocol, please select none as the encryption method, and confusion is optional (recommended)&lt;/p&gt;

&lt;p&gt;(Default: 2. auth_sha1_v4)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOgz_zip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wek57nn9zotqy562j52y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOgz_zip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wek57nn9zotqy562j52y.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6choose-confusion-plugin"&gt;
  &lt;/a&gt;
  6.Choose Confusion plug-in
&lt;/h3&gt;

&lt;p&gt;[note] if you use shadowsocksr to accelerate the game, please select obfuscation compatible with the original or plain obfuscation, and then the client selects plain, otherwise the delay will be increased!&lt;br&gt;
In addition, if you select tls1.2_ ticket_ Auth, then the client can choose tls1.2_ ticket_ Fastauth, so you can disguise without adding delay!&lt;br&gt;
If you are building in popular areas such as Japan and the United States, you may have a lower chance of being blocked by the wall!&lt;/p&gt;

&lt;p&gt;(Default: 1. plain)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JFHWntF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arsqrp3tkmkrvcg9g362.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JFHWntF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arsqrp3tkmkrvcg9g362.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7set-connect-client-numberssingle-thread-speedsingle-port-total-speed"&gt;
  &lt;/a&gt;
  7.Set Connect client numbers,Single thread speed,Single port total speed
&lt;/h3&gt;

&lt;p&gt;Please enter the number of devices (auth) to be limited by the shadowsocksr account to be set_* Series protocols are incompatible (only the original version is valid)&lt;br&gt;
[Note] device number limit: the number of clients that can be linked at the same time on each port (multi port mode, each port is calculated independently). It is recommended that there be at least 2.&lt;br&gt;
(Default: No-limit)&lt;/p&gt;

&lt;p&gt;Please enter the upper limit of single thread speed limit per port to be set (unit: KB / s)&lt;br&gt;
[note] single thread speed limit: the upper limit of single thread speed limit on each port, and multithreading is invalid.&lt;br&gt;
(Default: No-limit)&lt;/p&gt;

&lt;p&gt;Please enter the upper limit of the total speed limit of each port to be set (unit: KB / s)&lt;br&gt;
[note] total speed limit of ports: the upper limit of total speed limit of each port, and the overall speed limit of a single port.&lt;br&gt;
(Default: No-limit)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACCvvsDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28wp39wo4g8n6lewzh4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACCvvsDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28wp39wo4g8n6lewzh4r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8well-doneyou-can-see-this-which-means-you-already-install-and-run-the-shadowsocksr-serverand-you-can-use-ssrclient-to-connect"&gt;
  &lt;/a&gt;
  8.Well done,You can see this ,which means you already install and run the shadowsocksR server,And you can use SSR-client to connect
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sC6ICoFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2dnan6aq51fhnkln9eq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sC6ICoFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2dnan6aq51fhnkln9eq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ec2</category>
      <category>vpn</category>
      <category>ssr</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 30</title>
      <author>Christopher Glikpo</author>
      <pubDate>Wed, 25 Aug 2021 02:31:50 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-30-1a8f</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-30-1a8f</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be creating logout functionalities&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RDiQ5Bid3Wo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>💯 Blur All Sensitive Data While Screen Sharing, Recording Video
</title>
      <author>BlurData</author>
      <pubDate>Wed, 25 Aug 2021 01:29:18 +0000</pubDate>
      <link>https://dev.to/blurdata/blur-all-sensitive-data-while-screen-sharing-recording-video-9pl</link>
      <guid>https://dev.to/blurdata/blur-all-sensitive-data-while-screen-sharing-recording-video-9pl</guid>
      <description>&lt;p&gt;We've all been in a situation where we sometimes want to hide sensitive information while screen sharing, recording video, or live.&lt;/p&gt;

&lt;p&gt;💯 Blur All Sensitive Data (text, image, input, or paragraphs) While Screen Sharing, Recording Video Or Live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1aJ1fkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7sf5fbp8o7ijy7mabg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1aJ1fkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7sf5fbp8o7ijy7mabg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful Features To Save Hours Of Post Video Editing Hassles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Free Lifetime Updates.&lt;/li&gt;
&lt;li&gt; Chrome Extension (Works on Opera too).&lt;/li&gt;
&lt;li&gt; Add Or Remove Blur With One Single Click.&lt;/li&gt;
&lt;li&gt; Blur Part/All Selected Text With One Single Click.&lt;/li&gt;
&lt;li&gt; Draw Blur Area Anywhere The Page.&lt;/li&gt;
&lt;li&gt; Save All Blur Areas Even After Reloading The Page.&lt;/li&gt;
&lt;li&gt; Control Blur Intensity, Hide Tab Title &amp;amp; Favicon, Clear All Blur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grab Blurry Today! 👉👉 &lt;a href="https://blurdata.net/"&gt;https://blurdata.net/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Sharpen your Ruby: Part 3</title>
      <author>Eric The Coder</author>
      <pubDate>Wed, 25 Aug 2021 00:52:33 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-part-3-5gcd</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-part-3-5gcd</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP, and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you have any questions/comments or you are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Numbers Type in Ruby&lt;/h2&gt;

&lt;p&gt;In Ruby the two numbers primary types are Integer and Float.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Integer&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;

&lt;span class="c1"&gt;# Float&lt;/span&gt;
&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;79.99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Attention: In Ruby manipulating integers always end up with an integer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why does this division return 0? Because both numbers are integer and Ruby assumed that you would want a rounded value, so it rounded it to the nearest whole number, which is 0 in this case.&lt;/p&gt;

&lt;p&gt;Ok but what can I get the right value with a decimal? Yes just use a float in the equation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# 0.01&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;String to number&lt;/h2&gt;

&lt;p&gt;Sometimes you will have a string that represents numbers and would like to perform a math operation on those.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;span class="n"&gt;other_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'2'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other_number&lt;/span&gt; &lt;span class="c1"&gt;# 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This operation will return 12. String is not a number.&lt;/p&gt;

&lt;p&gt;To make it work we have to convert string to number using the to_i method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to_i convert string to an integer. You can also use to_f to convert your string to a float number.&lt;/p&gt;

&lt;h2&gt;Arithmetic Order of Operations&lt;/h2&gt;

&lt;p&gt;If we try to run this code what will be the value? In which order the operation will be run?&lt;/p&gt;

&lt;p&gt;In Ruby the order of operation is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parentheses&lt;/li&gt;
&lt;li&gt;Exponent&lt;/li&gt;
&lt;li&gt;Multiplication&lt;/li&gt;
&lt;li&gt;Division&lt;/li&gt;
&lt;li&gt;Addition&lt;/li&gt;
&lt;li&gt;Subtraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An old trick to remember this order is to take the first letter of each item that gives the word PEMDAS&lt;/p&gt;

&lt;p&gt;Let's do example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;# 10330&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the order of operation to make that result possible&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 1. Parentheses&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# 2. Exponent&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# 3. Multiplication&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="c1"&gt;# 4. Division&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="c1"&gt;# 5. Final Addition and Subtraction&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10330&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Numbers methods&lt;/h2&gt;

&lt;p&gt;Here are some numbers manipulation methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Round&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt; &lt;span class="mf"&gt;2.68&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

&lt;span class="c1"&gt;# Round down&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt; &lt;span class="mf"&gt;2.68&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;

&lt;span class="c1"&gt;# Round up&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ceil&lt;/span&gt; &lt;span class="mf"&gt;2.68&lt;/span&gt;   &lt;span class="c1"&gt;# 3&lt;/span&gt;

&lt;span class="c1"&gt;# Next&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

&lt;span class="c1"&gt;# Is number event?&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt;  &lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;span class="c1"&gt;# Is number odd?&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;   &lt;span class="c1"&gt;# false&lt;/span&gt;

&lt;span class="c1"&gt;# Generate a random number&lt;/span&gt;
&lt;span class="n"&gt;random_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate a random number between 1.0 and 100. That will generate a float number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the round method to round your random number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an arithmetic operation using all the PEMDAS items and try to figure out the result without looking at Ruby result.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;span class="c1"&gt;# 74&lt;/span&gt;

&lt;span class="c1"&gt;# Example only&lt;/span&gt;
&lt;span class="n"&gt;number2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="c1"&gt;# 391&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tuned for the next post very soon&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Wed, 25 Aug 2021 00:25:52 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3ea8</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3ea8</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-often"&gt;
  &lt;/a&gt;
  "Interview Often"
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/molly"&gt;@molly&lt;/a&gt;
 for this insightful post about the value of being well-prepared for your next interview — and how exactly to accomplish that. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/molly" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMrAIHhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qARnw-JH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119473/4fe2a414-c5d4-4cfe-b9da-8b9da90fb5e6.jpg" alt="molly"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/molly/setting-yourself-up-for-interview-success-15b7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Setting Yourself Up for Interview Success &lt;/h2&gt;
      &lt;h3&gt;Molly Struve (she/her) ・ Aug 18 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#interviewing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#job&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-road-to-being-a-developer-is-paved-with-mystery-but-it-shouldnt-be"&gt;
  &lt;/a&gt;
  The road to being a developer is paved with mystery — but it shouldn't be!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/ruppysuppy"&gt;@ruppysuppy&lt;/a&gt;
 is here to demystify the oftentimes winding road of becoming a developer. Thanks for these signposts, Tapajyoti!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ruppysuppy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oA7zxE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E69pqyft--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530414/941751d8-06b8-41bd-9de9-6ea056b7199f.png" alt="ruppysuppy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Zero to Hero: Front End Developer Roadmap&lt;/h2&gt;
      &lt;h3&gt;Tapajyoti Bose ・ Aug 22 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-no-one-can-stop-you-when-you-master-the-basics"&gt;
  &lt;/a&gt;
  "#1. No one can stop you when you master the basics."
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/tyaga001"&gt;@tyaga001&lt;/a&gt;
 for this veritable treasure trove of learnings from over a decade in software development. Solid gold!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tyaga001" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLEVy15e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--r5R8g_-j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/350031/8417c751-9076-4e36-a6f5-757c7e279615.jpg" alt="tyaga001"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tyaga001/top-9-lessons-learned-in-12-years-as-a-software-developer-4o9h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 9 Lessons learned in 12 years as a software developer.&lt;/h2&gt;
      &lt;h3&gt;Ankur Tyagi ・ Aug 19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-app-5-ways"&gt;
  &lt;/a&gt;
  1 app, 5 ways.
&lt;/h2&gt;

&lt;p&gt;I can't get over how &lt;em&gt;good&lt;/em&gt; this idea is, &lt;a class="mentioned-user" href="https://dev.to/sammyshear"&gt;@sammyshear&lt;/a&gt;
. Thanks for sharing your learnings of building the same app five different ways! More of this!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sammyshear" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GU1vtoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DuJeoF_H--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/681541/a1aee287-d78d-4e6a-b3f1-f5827877aa87.png" alt="sammyshear"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sammyshear/building-the-same-app-5-times-5d8l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building the Same App 5 Times&lt;/h2&gt;
      &lt;h3&gt;Sammy Shear ・ Aug 18 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#angular&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#defense-against-the-dark-arts"&gt;
  &lt;/a&gt;
  Defense against the dark arts
&lt;/h2&gt;

&lt;p&gt;... of cybersecurity threats! Thanks for sharing your thoughts on how to defend against these attacks and how to secure our online experience, &lt;a class="mentioned-user" href="https://dev.to/ms_74"&gt;@ms_74&lt;/a&gt;
   &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ms_74" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phL9ewEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_OgsWlF5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/663759/4d6b0bd1-c91a-4a82-8f9b-6f4d8822670d.jpg" alt="ms_74"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ms_74/authentication-vulnerabilities-15po" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Authentication vulnerabilities&lt;/h2&gt;
      &lt;h3&gt;Mariam Reba Alexander ・ Aug 21 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#showandtell-app-store-edition"&gt;
  &lt;/a&gt;
  Show-and-Tell: App Store Edition
&lt;/h2&gt;

&lt;p&gt;Huge props to &lt;a class="mentioned-user" href="https://dev.to/patrickweb"&gt;@patrickweb&lt;/a&gt;
 for building their own store for ElectronJS apps. Appreciate the showcase on DEV!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/patrickweb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBVADV87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x-yA7Ww0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386219/2b2f9ab9-9bfe-4677-89b1-91af72e264d6.png" alt="patrickweb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/patrickweb/i-made-an-app-store-283m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I made an App Store &lt;/h2&gt;
      &lt;h3&gt;Patrick Waweru ・ Aug 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#journey-to-the-center-of-vim"&gt;
  &lt;/a&gt;
  Journey to the Center of Vim 🔥
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/phantas0s"&gt;@phantas0s&lt;/a&gt;
 describes their series on Vim as a look "inside the Vim caves, helping you discover the finest diamonds." Sounds &lt;em&gt;pretty&lt;/em&gt; compelling to me! In this installment, you'll get a glimpse at some Vim "treasures for the mind" — specifically for those more advanced with Vim. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/phantas0s" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaZr9Qpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FNc_7DhC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/87901/3099dc70-8d96-41bb-845a-be6c1286e0b5.jpeg" alt="phantas0s"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/phantas0s/a-vim-guide-for-veteran-users-3p50" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Vim Guide for Veteran Users&lt;/h2&gt;
      &lt;h3&gt;Matthieu Cneude ・ Aug 17 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vim&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#terminal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>All Of My Articles Combined</title>
      <author>Bryan C Guner</author>
      <pubDate>Wed, 25 Aug 2021 00:13:49 +0000</pubDate>
      <link>https://dev.to/bgoonz/all-of-my-articles-combined-284m</link>
      <guid>https://dev.to/bgoonz/all-of-my-articles-combined-284m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#absolutely-everything-you-could-need-to-know-about-how-javascript-works"&gt;
  &lt;/a&gt;
  Absolutely Everything You Could Need To Know About How JavaScript Works.
&lt;/h1&gt;

&lt;p&gt;Seriously… this list is utterly exhaustive it covers more core concepts than I can hold the names of in working memory on a very good day.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#absolutely-everything-you-could-need-to-know-about-how-javascript-works"&gt;
  &lt;/a&gt;
  Absolutely Everything You Could Need To Know About How JavaScript Works.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#seriously-this-list-is-utterly-exhaustive-it-covers-more-core-concepts-than-i-can-hold-the-names-of-in-working-memory-on-a-very-good%C2%A0day"&gt;
  &lt;/a&gt;
  Seriously… this list is utterly exhaustive it covers more core concepts than I can hold the names of in working memory on a very good day.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#but-first-a-little-bit-of-mildly-shameful-self-promotion"&gt;
  &lt;/a&gt;
  But first a little bit of mildly shameful self promotion:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;(self promotion ends after the line denoted by a bunch of pictures of my dog🐕 )&lt;/p&gt;

&lt;p&gt;(Followed by a brief introduction to JavaScript for beginners)&lt;/p&gt;

&lt;p&gt;(Finally the main content / resources / imbedded YouTube links)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9h62bAmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AhuxNcspoDvOfqxvn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9h62bAmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AhuxNcspoDvOfqxvn.gif"&gt;&lt;/a&gt;### My Blog:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#discover-more" class="anchor"&gt;
  &lt;/a&gt;
  Discover More:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bgoonz-blog.netlify.app/" title="https://bgoonz-blog.netlify.app/"&gt;&lt;strong&gt;Web-Dev-Hub&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…&lt;/em&gt;bgoonz-blog.netlify.app&lt;/a&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CzzSFcc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/1%2A_J5NcnQmHmPDBvZodMmyaA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CzzSFcc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/1%2A_J5NcnQmHmPDBvZodMmyaA.png"&gt;&lt;/a&gt;&lt;strong&gt;&lt;em&gt;This is a work in progress and may be broken or hosted elsewhere at some time in the future.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Related posts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bgoonz/js-modules-4c4d" title="https://dev.to/bgoonz/js-modules-4c4d"&gt;&lt;strong&gt;JS Modules&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A module is a reusable piece of code that encapsulates implementation details and exposes a public API so it can be…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/bgoonz/js-modules-4c4d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bgoonz/closures-in-javascript-1moc" title="https://dev.to/bgoonz/closures-in-javascript-1moc"&gt;&lt;strong&gt;Closures In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Answer A closure is a function defined inside another function and has access to its lexical scope even when it is…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/bgoonz/closures-in-javascript-1moc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b" title="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;&lt;strong&gt;A list of all of my articles to link to future posts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db" title="https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db"&gt;&lt;strong&gt;The Complete JavaScript Reference Guide&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;You will want to bookmark this&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVYeGENg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2A2FC8D_rbP4cT3jukydhtkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVYeGENg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2A2FC8D_rbP4cT3jukydhtkg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-beginners-guide-to-javascript"&gt;
  &lt;/a&gt;
  The Beginner’s Guide To JavaScript
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a quick intro for complete beginners … skip below for more advanced content and resources! (below the next photo montage of my dog)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#skip-the-following-%E2%86%93-to-get-to-main-content"&gt;
  &lt;/a&gt;
  Skip The Following &lt;strong&gt;↓&lt;/strong&gt; To Get To Main Content!!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtwpJgbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/1%2AHCYn5Uz_jZ6uRjgp_NA5Yw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtwpJgbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/1%2AHCYn5Uz_jZ6uRjgp_NA5Yw.png"&gt;&lt;/a&gt;&lt;strong&gt;If you wanna skip this section you’ll find the main content about 10% of the way down the page… it will look like this:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYLVGSG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/0%2AiHxLNzz1MOZACC5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYLVGSG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/0%2AiHxLNzz1MOZACC5u.png"&gt;&lt;/a&gt;### The Number Data Type&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;number&lt;/strong&gt; data type in JS is used to represent any numerical&lt;br&gt;&lt;br&gt;
values, including integers and decimal numbers. &lt;strong&gt;Basic Arithmetic Operators&lt;/strong&gt; are the symbols that perform particular operations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="205d"&gt;&lt;strong&gt;+&lt;/strong&gt; (addition)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1df4"&gt;&lt;strong&gt;-&lt;/strong&gt; (subtraction)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f17b"&gt;&lt;strong&gt;asterisk&lt;/strong&gt; (multiplication)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ed52"&gt;&lt;strong&gt;/&lt;/strong&gt; (division)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d3a6"&gt;&lt;strong&gt;%&lt;/strong&gt; (modulo)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JS evaluates more complex expressions using the general math order of&lt;br&gt;&lt;br&gt;
operations aka PEMDAS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="4923"&gt;&lt;strong&gt;PEMDAS&lt;/strong&gt; : Parentheses, Exponents, Multiplication, Division, Modulo, Addition, Subtraction.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e245"&gt;&lt;em&gt;To force a specific order of operation, use the group operator ( ) around a part of the expression.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Modulo&lt;/strong&gt; : Very useful operation to check divisibility of numbers,&lt;br&gt;&lt;br&gt;
check for even &amp;amp; odd, whether a number is prime, and much more!&lt;br&gt;&lt;br&gt;
&lt;em&gt;(Discrete Math concept, circular problems can be solved with modulo)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="9608"&gt;Whenever you have a smaller number % a larger number, the answer will just be the initial small number.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3b00"&gt;&lt;code&gt;console.log(7 % 10); // =&amp;amp;gt; 7;&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-string-data%C2%A0type" class="anchor"&gt;
  &lt;/a&gt;
  The String Data Type
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;string&lt;/strong&gt; data type is a primitive data type that used to represent&lt;br&gt;&lt;br&gt;
textual data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="792d"&gt;can be wrapped by either &lt;strong&gt;single&lt;/strong&gt; or &lt;strong&gt;double&lt;/strong&gt; quotation marks, &lt;em&gt;best to choose one and stick with it for consistency&lt;/em&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="4f91"&gt;If your string contains quotation marks inside, can layer single or double quotation marks to allow it to work.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;"That's a great string"; (valid)&lt;br&gt;
'Shakespeare wrote, "To be or not to be"'; (valid)&lt;br&gt;
'That's a bad string'; (invalid)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a54b"&gt;Alt. way to add other quotes within strings is to use template literals.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#this-is-a-template-literal" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;This is a template literal&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;${function} // use ${} to invoke functions within.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;.length&lt;/strong&gt; : property that can be appended to data to return the length.&lt;/p&gt;

&lt;p&gt;&amp;gt; empty strings have a length of zero.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;indices&lt;/strong&gt; : indexes of data that begin at 0, can call upon index by using the bracket notation [ ].&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("bootcamp"[0]); // =&amp;amp;gt; "b"
console.log("bootcamp"[10]); // =&amp;amp;gt; "undefined"
console.log("boots"[1 * 2]); // =&amp;amp;gt; "o"
console.log("boots"["boot".length - 1]); // =&amp;amp;gt; "t"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="bcc3"&gt;we can pass expressions through the brackets as well since JS always evaluates expressions first.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f60b"&gt;The index of the last character of a string is always one less than it’s length.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5329"&gt;&lt;strong&gt;indexOf()&lt;/strong&gt; : method used to find the first index of a given character within a string.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6813"&gt;&lt;code&gt;console.log("bagel".indexOf("b")); // =&amp;amp;gt; 0 console.log("bagel".indexOf("z")); // =&amp;amp;gt; -1&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="262e"&gt;&lt;strong&gt;if the character inside the indexOf() search does not exist in the string, the output will be -1.&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0646"&gt;the indexOf() search will return the first instanced index of the the char in the string.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="15e0"&gt;&lt;strong&gt;concatenate&lt;/strong&gt; : word to describe joining strings together into a single string.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-boolean-data%C2%A0type" class="anchor"&gt;
  &lt;/a&gt;
  The Boolean Data Type
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Boolean&lt;/strong&gt; data type is the simplest data type since there are only&lt;br&gt;&lt;br&gt;
two values: &lt;strong&gt;true&lt;/strong&gt; and &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="62d6"&gt;&lt;strong&gt;Logical Operators&lt;/strong&gt; (Boolean Operators) are used to establish logic in our code.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bae2"&gt;&lt;strong&gt;!&lt;/strong&gt; (not) : reverses a Boolean value.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;console.log(!true); // =&amp;amp;gt; false console.log(!!false); // =&amp;amp;gt; false&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="71d9"&gt;&lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt; (and) &lt;strong&gt;Truth Table&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywGYUDWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AY4qzqSB0C-9AmtXf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywGYUDWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AY4qzqSB0C-9AmtXf.png"&gt;&lt;/a&gt;-   &lt;span id="c706"&gt;&lt;strong&gt;Logical Order of Operations&lt;/strong&gt; : JS will evaluate !, then &amp;amp;&amp;amp;, then ||.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="1e21"&gt;&lt;strong&gt;De Morgan’s Law&lt;/strong&gt; : Common mistake in Boolean logic is incorrectly distributing ! across parentheses.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="2e3e"&gt;&lt;code&gt;!(A || B) === !A &amp;amp;amp;&amp;amp;amp; !B; !(A &amp;amp;amp;&amp;amp;amp; B) === !A || !B;&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="350f"&gt;In summary, to correctly distribute ! across parentheses we must also flip the operation within.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#comparison-operators" class="anchor"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h3&gt;

&lt;p&gt;All comparison operators will result in a Boolean output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The relative comparators&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="0d1c"&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; (greater than)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="77dd"&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; (less than)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2041"&gt;&lt;strong&gt;&amp;gt;=&lt;/strong&gt; (greater than or equal to)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="55fd"&gt;&lt;strong&gt;&amp;lt;=&lt;/strong&gt; (less than or equal to)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1b7c"&gt;&lt;strong&gt;===&lt;/strong&gt; (equal to)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="09a6"&gt;&lt;strong&gt;!==&lt;/strong&gt; (not equal to)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;gt; Fun Fact: “a” &amp;lt; “b” is considered valid JS Code because string&lt;br&gt;&lt;br&gt;
&amp;gt; comparisons are compared lexicographically (meaning dictionary order),&lt;br&gt;&lt;br&gt;
&amp;gt; so “a” is less than “b” because it appears earlier!&lt;/p&gt;

&lt;p&gt;&amp;gt; If there is ever a standstill comparison of two string&lt;br&gt;&lt;br&gt;
&amp;gt; lexicographically (i.e. app vs apple) the comparison will deem the&lt;br&gt;&lt;br&gt;
&amp;gt; shorter string lesser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Difference between == and ===&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="3fec"&gt;&lt;strong&gt;===&lt;/strong&gt; : Strict Equality, will only return true if the two comparisons are entirely the same.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="224d"&gt;&lt;strong&gt;==&lt;/strong&gt; : Loose Equality, will return true even if the values are of a different type, due to coercion. (Avoid using this)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#variables" class="anchor"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Variables are used to store information to be referenced and manipulated&lt;br&gt;&lt;br&gt;
in a program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="e084"&gt;We initialize a variable by using the &lt;strong&gt;let&lt;/strong&gt; keyword and a &lt;strong&gt;=&lt;/strong&gt; single equals sign (assignment operator).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="92ec"&gt;&lt;code&gt;let bootcamp = "Lambda"; console.log(bootcamp); // "Lambda"&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f5af"&gt;JS variable names can contain any alphanumeric characters,&lt;br&gt;
underscores, or dollar signs (cannot being with a number).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5288"&gt;If you do not declare a value for a variable, undefined is&lt;br&gt;
automatically set.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5f49"&gt;&lt;code&gt;let bootcamp; console.log(bootcamp); // undefined&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ea4b"&gt;We can change the value of a previously declared variable (let, not&lt;br&gt;
const) by re-assigning it another value.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ef75"&gt;&lt;strong&gt;let&lt;/strong&gt; is the updated version of &lt;strong&gt;var&lt;/strong&gt;; there are some&lt;br&gt;
differences in terms of hoisting and global/block scope — will be&lt;br&gt;
covered later in the course (common interview question!)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Assignment Shorthand&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num = 0;num += 10; // same as num = num + 10num -= 2; // same as num = num - 2num /= 4; // same as num = num / 4num *= 7; // same as num = num * 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="7ff5"&gt;In general, any nonsensical arithmetic will result in &lt;strong&gt;NaN&lt;/strong&gt; ; usually operations that include undefined.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2798"&gt;&lt;strong&gt;declaration&lt;/strong&gt; : process of simply introducing a variable name.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ad51"&gt;&lt;strong&gt;initialization&lt;/strong&gt; : process of both declaring and assigning a variable on the same line.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#functions" class="anchor"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;A function is a procedure of code that will run when called. Functions&lt;br&gt;&lt;br&gt;
are used so that we do not have to rewrite code to do the same thing&lt;br&gt;&lt;br&gt;
over and over. (Think of them as ‘subprograms’)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="01bb"&gt;&lt;strong&gt;Function Declaration&lt;/strong&gt; : Process when we first initially write our function.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="963b"&gt;Includes three things:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="32df"&gt;Name of the function.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7930"&gt;A list of &lt;em&gt;parameters&lt;/em&gt; ()&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="145e"&gt;The code to execute {}&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="37c0"&gt;&lt;strong&gt;Function Calls&lt;/strong&gt; : We can call upon our function whenever and wherever* we want. (*wherever is only after the initial declaration)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f3cc"&gt;JS evaluates code top down, left to right.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="cf9c"&gt;When we execute a declared function later on in our program we refer to this as &lt;strong&gt;invoking&lt;/strong&gt; our function.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4374"&gt;Every function in JS returns undefined unless otherwise specified.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3bb7"&gt;When we hit a &lt;strong&gt;return&lt;/strong&gt; statement in a function we immediately exit the function and return to where we called the function.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0ce8"&gt;When naming functions in JS always use camelCase and name it something appropriate. &amp;gt; Great code reads like English and almost explains itself. Think: Elegant, readable, and maintainable!&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#parameters-and-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Parameters and Arguments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="38d3"&gt;&lt;strong&gt;Parameters&lt;/strong&gt; : Comma separated variables specified as part of a function’s declaration.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ecef"&gt;&lt;strong&gt;Arguments&lt;/strong&gt; : Values passed to the function when it is invoked.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a836"&gt;&lt;em&gt;If the number of arguments passed during a function invocation is different than the number of parameters listed, it will still work.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a53a"&gt;However, is there are not enough arguments provided for parameters our function will likely yield &lt;strong&gt;Nan&lt;/strong&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVYeGENg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2A2FC8D_rbP4cT3jukydhtkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVYeGENg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2A2FC8D_rbP4cT3jukydhtkg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;END OF INTRO FOR BEGINNERS (MAIN ARTICLE BELOW)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#%E2%86%93%E2%86%93absolutely-everything-you-could-need-to-know-about-javascript%E2%86%93%E2%86%93"&gt;
  &lt;/a&gt;
  ↓↓&lt;strong&gt;Absolutely Everything You Could Need To Know About JavaScript&lt;/strong&gt;↓↓
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MXWQr2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AfOaTsnCJCYc3wD4x" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MXWQr2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AfOaTsnCJCYc3wD4x"&gt;&lt;/a&gt;&lt;a href="https://github.com/leonardomso/33-js-concepts#20-pure-functions-side-effects-and-state-mutation" title="https://github.com/leonardomso/33-js-concepts#20-pure-functions-side-effects-and-state-mutation"&gt;&lt;strong&gt;leonardomso/33-js-concepts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/leonardomso/33-js-concepts#20-pure-functions-side-effects-and-state-mutation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack" title="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"&gt;&lt;strong&gt;Call stack - MDN Web Docs Glossary: Definitions of Web-related terms | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec" title="https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec"&gt;&lt;strong&gt;Understanding Javascript Function Executions — Call Stack, Event Loop , Tasks &amp;amp; more&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web developers or Front end engineers, as that’s what we like to be called, nowadays do everything right from acting as…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4" title="https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4"&gt;&lt;strong&gt;Understanding the JavaScript call stack&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The JavaScript engine (which is found in a hosting environment like the browser), is a single-threaded interpreter…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.archive.org/web/20180701233338/https://www.valentinog.com/blog/js-execution-context-call-stack/" title="https://web.archive.org/web/20180701233338/https://www.valentinog.com/blog/js-execution-context-call-stack/"&gt;&lt;strong&gt;Javascript: What Is The Execution Context? What Is The Call Stack?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What is the Execution Context in Javascript? I bet you don't know the answer. What are the most basic components of a…&lt;/em&gt;web.archive.org&lt;/a&gt;&lt;a href="https://web.archive.org/web/20180701233338/https://www.valentinog.com/blog/js-execution-context-call-stack/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1usw1AD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Ab31hiO4ynbDLRrXWEFF4aQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1usw1AD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Ab31hiO4ynbDLRrXWEFF4aQ.png"&gt;&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0" title="https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0"&gt;&lt;strong&gt;Understanding Execution Context and Execution Stack in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Understanding execution context and stack to become a better Javascript developer.&lt;/em&gt;blog.bitsrc.io&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf" title="https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf"&gt;&lt;strong&gt;How JavaScript works: an overview of the engine, the runtime, and the call stack&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;As JavaScript is getting more and more popular, teams are leveraging its support on many levels in their stack …&lt;/em&gt;blog.sessionstack.com&lt;/a&gt;&lt;a href="https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/scope-closures-context-in-javascript-f126f1523104" title="https://medium.com/codex/scope-closures-context-in-javascript-f126f1523104"&gt;&lt;strong&gt;Breaking Down Scope, Context, And Closure In JavaScript In Simple Terms.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“JavaScript’s global scope is like a public toilet. You can’t avoid going in there, but try to limit your contact with…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/scope-closures-context-in-javascript-f126f1523104"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/" title="https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/"&gt;&lt;strong&gt;The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript - ui.dev&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;It may seem surprising, but in my opinion the most important and fundamental concept to understanding the JavaScript…&lt;/em&gt;tylermcginnis.com&lt;/a&gt;&lt;a href="https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o" title="https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o"&gt;&lt;strong&gt;How JavaScript Works: An Overview of JavaScript Engine, Heap, and Call Stack&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Hello everyone 👋, I hope you are doing great. So, today you are going to learn An Overview of JavaScript Engine, Heap…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4" title="https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4"&gt;&lt;strong&gt;Fundamental Data Structures In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Data structures in JavaScript&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a live code editor where you can mess with any of the examples…&lt;/p&gt;

&lt;p&gt;&lt;span&gt;H&lt;/span&gt;ere’s a live code editor where you can mess with any of the examples…&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#coding-practice" class="anchor"&gt;
  &lt;/a&gt;
  Coding practice
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="824c"&gt;&lt;a href="https://leetcode.com/"&gt;LeetCode&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a528"&gt;&lt;a href="https://www.interviewbit.com/"&gt;InterviewBit&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="fa41"&gt;&lt;a href="https://codility.com/"&gt;Codility&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6c61"&gt;&lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="dff6"&gt;&lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b2dd"&gt;&lt;a href="https://spoj.com/"&gt;Spoj&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c8e8"&gt;&lt;a href="https://code.google.com/codejam/contests.html"&gt;Google Code Jam practice problems&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e8bb"&gt;&lt;a href="https://www.hackerearth.com/"&gt;HackerEarth&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e803"&gt;&lt;a href="https://www.topcoder.com/"&gt;Top Coder&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="294e"&gt;&lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9c05"&gt;&lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="356e"&gt;&lt;a href="https://codesignal.com/"&gt;CodeSignal&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2d20"&gt;&lt;a href="http://codekata.com/"&gt;CodeKata&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d3bf"&gt;&lt;a href="https://www.firecode.io/"&gt;Firecode&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#dependent-on%C2%A0data" class="anchor"&gt;
  &lt;/a&gt;
  Dependent on data
&lt;/h3&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="bc8d"&gt;&lt;strong&gt;The best-case complexity: when the data looks the best&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8b06"&gt;&lt;strong&gt;The worst-case complexity: when the data looks the worst&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="881c"&gt;&lt;strong&gt;The average-case complexity: when the data looks average&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#big-o%C2%A0notation" class="anchor"&gt;
  &lt;/a&gt;
  Big O notation
&lt;/h3&gt;

&lt;p&gt;The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-array-data-structure" class="anchor"&gt;
  &lt;/a&gt;
  The Array data structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SdfGoD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AQk3UYgeqXamRrFLR.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SdfGoD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AQk3UYgeqXamRrFLR.gif"&gt;&lt;/a&gt;### Definition&lt;/p&gt;

&lt;p&gt;An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia&lt;/p&gt;

&lt;p&gt;Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values"&gt;&lt;strong&gt;JavaScript data types and data structures - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Programming languages all have built-in data structures, but these often differ from one language to another. This…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://2ality.com/2012/04/number-encoding.html" title="http://2ality.com/2012/04/number-encoding.html"&gt;&lt;strong&gt;How numbers are encoded in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Edit description&lt;/em&gt;2ality.com&lt;/a&gt;&lt;a href="http://2ality.com/2012/04/number-encoding.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/angular-in-depth/javascripts-number-type-8d59199db1b6" title="https://medium.com/angular-in-depth/javascripts-number-type-8d59199db1b6"&gt;&lt;strong&gt;Here is what you need to know about JavaScript’s Number type&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Why 0.1+0.2 IS NOT equal to 0.3 and 9007199254740992 IS equal to 9007199254740993&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/angular-in-depth/javascripts-number-type-8d59199db1b6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/" title="https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/"&gt;&lt;strong&gt;What Every JavaScript Developer Should Know About Floating Point Numbers&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;After I gave my talk on JavaScript (really, I was there trying to shamelessly plug my book - Underhanded JavaScript and…&lt;/em&gt;blog.chewxy.com&lt;/a&gt;&lt;a href="https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/" title="https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/"&gt;&lt;strong&gt;The Secret Life of JavaScript Primitives&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;You may not know it but, in JavaScript, whenever you interact with string, number or boolean primitives you enter a…&lt;/em&gt;javascriptweblog.wordpress.com&lt;/a&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-primitive-as-an%C2%A0object" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://javascript.info/primitives-methods#a-primitive-as-an-object"&gt;A primitive as an object&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here’s the paradox faced by the creator of JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="95d1"&gt;There are many things one would want to do with a primitive like a string or a number. It would be great to access them using methods.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="10fe"&gt;Primitives must be as fast and lightweight as possible.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution looks a little bit awkward, but here it is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="4506"&gt;Primitives are still primitive. A single value, as desired.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="7880"&gt;The language allows access to methods and properties of strings, numbers, booleans and symbols.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="be72"&gt;In order for that to work, a special “object wrapper” that provides the extra functionality is created, and then is destroyed.&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The “object wrappers” are different for each primitive type and are called: &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt; and &lt;code&gt;Symbol&lt;/code&gt;. Thus, they provide different sets of methods.&lt;/p&gt;

&lt;p&gt;For instance, there exists a string method &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"&gt;str.toUpperCase()&lt;/a&gt; that returns a capitalized &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how it works:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let str = "Hello";

alert( str.toUpperCase() ); // HELLO
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Simple, right? Here’s what actually happens in &lt;code&gt;str.toUpperCase()&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="5a30"&gt;The string &lt;code&gt;str&lt;/code&gt; is a primitive. So in the moment of accessing its property, a special object is created that knows the value of the string, and has useful methods, like &lt;code&gt;toUpperCase()&lt;/code&gt;.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="7659"&gt;That method runs and returns a new string (shown by &lt;code&gt;alert&lt;/code&gt;).&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="8c3f"&gt;The special object is destroyed, leaving the primitive &lt;code&gt;str&lt;/code&gt; alone.&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So primitives can provide methods, but they still remain lightweight.&lt;/p&gt;

&lt;p&gt;The JavaScript engine highly optimizes this process. It may even skip the creation of the extra object at all. But it must still adhere to the specification and behave as if it creates one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flow.org/en/docs/types/primitives/" title="https://flow.org/en/docs/types/primitives/"&gt;&lt;strong&gt;Primitive Types | Flow&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript has a number of different primitive types ( MDN): The primitive types appear in the language as either…&lt;/em&gt;flow.org&lt;/a&gt;&lt;a href="https://flow.org/en/docs/types/primitives/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/d4nyll/not-everything-in-javascript-is-an-object" title="https://dev.to/d4nyll/not-everything-in-javascript-is-an-object"&gt;&lt;strong&gt;(Not) Everything in JavaScript is an Object&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This was originally published on The Brewing Press For those who just wants the answers, feel free to jump to the…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/d4nyll/not-everything-in-javascript-is-an-object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/objects-in-javascript-b212486dade6" title="https://medium.com/codex/objects-in-javascript-b212486dade6"&gt;&lt;strong&gt;Objects In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The object is a data structure that stores other data, similar to how an array stores elements.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/objects-in-javascript-b212486dade6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12" title="https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12"&gt;&lt;strong&gt;Diving Deeper in JavaScripts Objects&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A Closer Look at JavaScript Object Descriptors&lt;/em&gt;blog.bitsrc.io&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c" title="https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c"&gt;&lt;strong&gt;The differences between Object.freeze() vs Const in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ES6 has brought several new features and methods into JavaScript since its release. These features have better improved…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0" title="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;&lt;strong&gt;Explaining Value vs. Reference in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A simple look at computer memory explains what’s happening&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#does-it%C2%A0mutate" class="anchor"&gt;
  &lt;/a&gt;
  DOES IT MUTATE:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://doesitmutate.xyz/"&gt;LINK….&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#concat" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/concat"&gt;.concat&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;no mutation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Array.prototype.concat ( [ item1 [ , item2 [ , … ] ] ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"&gt;&lt;strong&gt;Array.prototype.concat() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var array1 = ['a', 'b', 'c'];
var array2 = ['d', 'e', 'f'];

console.log(array1.concat(array2));
// expected output: Array ["a", "b", "c", "d", "e", "f"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#copywithin" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/copywithin"&gt;.copyWithin()&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;mutates&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;arr.copyWithin(target)
arr.copyWithin(target, start)
arr.copyWithin(target, start, end)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"&gt;&lt;strong&gt;Array.prototype.copyWithin() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The copyWithin() method shallow copies part of an array to another location in the same array and returns it without…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var array1 = ['a', 'b', 'c', 'd', 'e'];

// copy to index 0 the element at index 3
console.log(array1.copyWithin(0, 3, 4));
// expected output: Array ["d", "b", "c", "d", "e"]

// copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// expected output: Array ["d", "d", "e", "d", "e"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#entries" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/entries"&gt;.entries()&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#no-mutation" class="anchor"&gt;
  &lt;/a&gt;
  no mutation
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a.entries()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"&gt;&lt;strong&gt;Array.prototype.entries() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var array1 = ['a', 'b', 'c'];

var iterator1 = array1.entries();

console.log(iterator1.next().value);
// expected output: Array [0, "a"]

console.log(iterator1.next().value);
// expected output: Array [1, "b"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#every" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/every"&gt;.every&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#no-mutation" class="anchor"&gt;
  &lt;/a&gt;
  no mutation
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The every() method tests whether all elements in the array pass the test implemented by the provided function.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Array.prototype.every ( callbackfn [ , thisArg ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"&gt;&lt;strong&gt;Array.prototype.every() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The every() method tests whether all elements in the array pass the test implemented by the provided function. It…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function isBelowThreshold(currentValue) {
  return currentValue &amp;amp;lt; 40;
}

var array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// expected output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#fill" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/fill"&gt;.fill()&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#mutates" class="anchor"&gt;
  &lt;/a&gt;
  mutates
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The fill() method fills all the elements of an array from a start index to an end index with a static value.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;arr.fill(value)
arr.fill(value, start)
arr.fill(value, start, end)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"&gt;&lt;strong&gt;Array.prototype.fill() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  Example :
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var array1 = [1, 2, 3, 4];

// fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// expected output: [1, 2, 0, 0]

// fill with 5 from position 1
console.log(array1.fill(5, 1));
// expected output: [1, 5, 5, 5]

console.log(array1.fill(6));
// expected output: [6, 6, 6, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#filter" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/filter"&gt;.filter&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#no-mutation" class="anchor"&gt;
  &lt;/a&gt;
  no mutation
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The filter() method creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Array.prototype.filter ( callbackfn [ , thisArg ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;&lt;strong&gt;Array.prototype.filter() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The method creates a new array with all elements that pass the test implemented by the provided function. Function is a…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word =&amp;amp;gt; word.length &amp;amp;gt; 6);

console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#find" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://doesitmutate.xyz/find"&gt;.find()&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;no mutation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The find() method returns a value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;arr.find(callback[, thisArg])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;&lt;strong&gt;Array.prototype.find() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The find() method returns the value of the first element in the provided array that satisfies the provided testing…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var array1 = [5, 12, 8, 130, 44];

var found = array1.find(function(element) {
  return element &amp;amp;gt; 10;
});

console.log(found);
// expected output: 12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://medium.com/@_benaston/lesson-1b-javascript-fundamentals-380f601ba851" title="https://medium.com/@_benaston/lesson-1b-javascript-fundamentals-380f601ba851"&gt;&lt;strong&gt;Value types, reference types and scope in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;There are only two things fundamental to JavaScript: objects and functions.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@_benaston/lesson-1b-javascript-fundamentals-380f601ba851"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18" title="https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18"&gt;&lt;strong&gt;Back to roots: JavaScript Value vs Reference&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let’s look at the concept of Value vs Reference. Every JavaScript developer should know this topic as it’s often the…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293" title="https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293"&gt;&lt;strong&gt;Grasp “By Value” and “By Reference” in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;And learn why it’s crucial to know the difference&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0" title="https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0"&gt;&lt;strong&gt;JavaScript Reference and Copy Variables | Hacker Noon&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Each programming language has its own peculiarities (and JavaScript has a lot), and today I'm going to talk about…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/" title="http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/"&gt;&lt;strong&gt;JavaScript Primitive vs. Reference Values&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Summary: in this tutorial, you will learn the differences between primitive and reference values. In JavaScript, a…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.javascripttutorial.net"&gt;www.javascripttutorial.net&lt;/a&gt;&lt;a href="http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value" title="https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value"&gt;&lt;strong&gt;JavaScript by reference vs. by value&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I'm looking for some good comprehensive reading material on when JavaScript passes something by value and when by…&lt;/em&gt;stackoverflow.com&lt;/a&gt;&lt;a href="https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f" title="https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f"&gt;&lt;strong&gt;JavaScript Interview Prep: Primitive vs. Reference Types&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;original article In a JavaScript interview, they might ask if you understand the difference between primitive and…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23" title="https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23"&gt;&lt;strong&gt;What you need to know about Javascript's Implicit Coercion&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Javascript's implicit coercion simply refers to Javascript attempting to coerce an unexpected value type to the…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839" title="https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839"&gt;&lt;strong&gt;JavaScript type coercion explained&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Know your engines&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/javascript-coercion-explained-545c895213d3" title="https://hackernoon.com/javascript-coercion-explained-545c895213d3"&gt;&lt;strong&gt;Javascript Coercion Explained&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Along with some practical examples&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/javascript-coercion-explained-545c895213d3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript" title="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript"&gt;&lt;strong&gt;What exactly is Type Coercion in Javascript?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's start with a short intro to type systems which I think will help you understand the general idea of type…&lt;/em&gt;stackoverflow.com&lt;/a&gt;&lt;a href="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong" title="https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong"&gt;&lt;strong&gt;&lt;a href="https://thedevs.network/"&gt;https://thedevs.network/&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Weak dynamic typing is arguably one of those things everybody likes to pick at about JavaScript. For an elegant dynamic…&lt;/em&gt;thedevs.network&lt;/a&gt;&lt;a href="https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS/tree/1st-ed" title="https://github.com/getify/You-Dont-Know-JS/tree/1st-ed"&gt;&lt;strong&gt;getify/You-Dont-Know-JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A book series on JavaScript. @YDKJS on twitter. Contribute to getify/You-Dont-Know-JS development by creating an…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS/tree/1st-ed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a" title="https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a"&gt;&lt;strong&gt;JavaScript — Double Equals vs. Triple Equals&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn equality in JavaScript in 3 minutes&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bytearcher.com/articles/equality-comparison-operator-javascript/" title="https://bytearcher.com/articles/equality-comparison-operator-javascript/"&gt;&lt;strong&gt;Should I use === or == equality comparison operator in JavaScript?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;You know there are two different equality comparison operators in JavaScript: the === and == operators, or the triple…&lt;/em&gt;bytearcher.com&lt;/a&gt;&lt;a href="https://bytearcher.com/articles/equality-comparison-operator-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript" title="https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript"&gt;&lt;strong&gt;== vs === JavaScript: Double Equals and Coercion | Codementor&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The == (double equals or loose equality) operator is an interesting operator. Many avoid it because they don't know how…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.codementor.io"&gt;www.codementor.io&lt;/a&gt;&lt;a href="https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.impressivewebs.com/why-use-triple-equals-javascipt/" title="https://www.impressivewebs.com/why-use-triple-equals-javascipt/"&gt;&lt;strong&gt;Why Use the Triple-Equals Operator in JavaScript? - Impressive Webs&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;"Determining whether two variables are equivalent is one of the most important operations in programming." That's…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.impressivewebs.com"&gt;www.impressivewebs.com&lt;/a&gt;&lt;a href="https://www.impressivewebs.com/why-use-triple-equals-javascipt/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript" title="https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript"&gt;&lt;strong&gt;What is the difference between == and === in JavaScript?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;On the surface == and === appear to be functionally the same, so why bother typing an extra character? In this video…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.oreilly.com"&gt;www.oreilly.com&lt;/a&gt;&lt;a href="https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object" title="https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object"&gt;&lt;strong&gt;Why javascript's typeof always return "object"?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;To add in with the others, typeof returns both objects and primitives. There are 5 primitive types in javascript…&lt;/em&gt;stackoverflow.com&lt;/a&gt;&lt;a href="https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://tobyho.com/2011/01/28/checking-types-in-javascript/" title="http://tobyho.com/2011/01/28/checking-types-in-javascript/"&gt;&lt;strong&gt;Checking Types in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Have you ever wondered: what is the correct way to check if a Javascript variable is an Array? Do a Google search and…&lt;/em&gt;tobyho.com&lt;/a&gt;&lt;a href="http://tobyho.com/2011/01/28/checking-types-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webbjocke.com/javascript-check-data-types/" title="https://webbjocke.com/javascript-check-data-types/"&gt;&lt;strong&gt;How to better check data types in javascript - Webbjocke&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;To check what data type something has in javascript is not always the easiest. The language itself provides an operator…&lt;/em&gt;webbjocke.com&lt;/a&gt;&lt;a href="https://webbjocke.com/javascript-check-data-types/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html" title="https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html"&gt;&lt;strong&gt;Tomer Aberbach | Checking for the Absence of a Value in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;When I first started learning JavaScript I was confused by the seemingly endless ways developers check for the absence…&lt;/em&gt;tomeraberba.ch&lt;/a&gt;&lt;a href="https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures" title="https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures"&gt;&lt;strong&gt;getify/You-Dont-Know-JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A book series on JavaScript. @YDKJS on twitter. Contribute to getify/You-Dont-Know-JS development by creating an…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99" title="https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99"&gt;&lt;strong&gt;JavaScript Functions — Understanding The Basics&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Explore Functions in JavaScript — declaration, expressions, invocation, and more.&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/" title="http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/"&gt;&lt;strong&gt;ES6: var, let and const - The battle between function scope and block scope&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In the pre-ES6 era, there was only one way of declaring variables in JavaScript - being the usage of var. var has…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.deadcoderising.com"&gt;www.deadcoderising.com&lt;/a&gt;&lt;a href="http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html" title="http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html"&gt;&lt;strong&gt;Emulating Block Scope in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;While there are many issues that trip up developers coming from other languages, variable scoping may be number one…&lt;/em&gt;adripofjavascript.com&lt;/a&gt;&lt;a href="http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://josephcardillo.medium.com/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe" title="https://josephcardillo.medium.com/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe"&gt;&lt;strong&gt;The Difference Between Function and Block Scope in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Back to the basics with the var, let and const variables&lt;/em&gt;josephcardillo.medium.com&lt;/a&gt;&lt;a href="https://josephcardillo.medium.com/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7" title="https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7"&gt;&lt;strong&gt;Function scopes and block scopes in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Is the following line a valid line of JavaScript code?&lt;/em&gt;edgecoders.com&lt;/a&gt;&lt;a href="https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/" title="http://ryanmorr.com/understanding-scope-and-context-in-javascript/"&gt;&lt;strong&gt;Understanding Scope and Context in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Understanding Scope and Context in JavaScript August 16, 2013 JavaScript JavaScript's implementation of scope and…&lt;/em&gt;ryanmorr.com&lt;/a&gt;&lt;a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/javascript-scope-closures/" title="https://css-tricks.com/javascript-scope-closures/"&gt;&lt;strong&gt;JavaScript Scope and Closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Scopes and closures are important in JavaScript. But, they were confusing for me when I first started. Here's an…&lt;/em&gt;css-tricks.com&lt;/a&gt;&lt;a href="https://css-tricks.com/javascript-scope-closures/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/" title="https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/"&gt;&lt;strong&gt;Understanding Scope in JavaScript - Telerik Blogs&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Scope is an important, yet ambiguous concept in JavaScript. Used correctly, it allows you to leverage good design…&lt;/em&gt;developer.telerik.com&lt;/a&gt;&lt;a href="https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://speakingjs.com/es5/ch16.html" title="http://speakingjs.com/es5/ch16.html"&gt;&lt;strong&gt;Chapter 16. Variables: Scopes, Environments, and Closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Chapter 16. Variables: Scopes, Environments, and Closures This chapter first explains how to use variables and then…&lt;/em&gt;speakingjs.com&lt;/a&gt;&lt;a href="http://speakingjs.com/es5/ch16.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/understanding-scope-in-javascript" title="https://scotch.io/tutorials/understanding-scope-in-javascript"&gt;&lt;strong&gt;Understanding Scope in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript has a feature called Scope. Though the concept of scope is not that easy to understand for many new…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/understanding-scope-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0" title="https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0"&gt;&lt;strong&gt;When to use a function declaration vs. a function expression&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The differences between them and when to use one or the other.&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai" title="https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai"&gt;&lt;strong&gt;A JavaScript Fundamentals Cheat Sheet: Scope, Context, and "this"&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Scope Scope refers to where a variable can be accessed within a program. Some variables can be accessed from anywhere…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/function-expressions-vs-declarations/" title="https://www.sitepoint.com/function-expressions-vs-declarations/"&gt;&lt;strong&gt;Quick Tip: Function Expressions vs Function Declarations - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article was peer reviewed by Jeff Mott. Thanks to all of SitePoint's peer reviewers for making SitePoint content…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/function-expressions-vs-declarations/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38" title="https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38"&gt;&lt;strong&gt;JavaScript Function — Declaration vs Expression&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functions are considered as First Class citizen in JavaScript and it is really important to be clear with the concept…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052" title="https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052"&gt;&lt;strong&gt;Function Declarations vs. Function Expressions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What is Function Statement/Declarations in JavaScript?&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/" title="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/"&gt;&lt;strong&gt;Function Declarations vs. Function Expressions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Lets start with a short quiz. What is alerted in each case?: Question 1: Question 2: Question 3: Question 4: If you…&lt;/em&gt;javascriptweblog.wordpress.com&lt;/a&gt;&lt;a href="https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vvkchandra.medium.com/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6" title="https://vvkchandra.medium.com/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6"&gt;&lt;strong&gt;Essential JavaScript: Mastering Immediately-invoked Function Expressions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Understanding functions inside out and then learning how to exploit them to write modern, clean JavaScript code is a…&lt;/em&gt;vvkchandra.medium.com&lt;/a&gt;&lt;a href="https://vvkchandra.medium.com/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0" title="https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0"&gt;&lt;strong&gt;Do ES6 Modules make the case of IIFEs obsolete? - Hashnode&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;IIFE was one of the most used patterns in the ES5 standard, as functions were the only way to declare a scoped block of…&lt;/em&gt;hashnode.com&lt;/a&gt;&lt;a href="https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/" title="https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/"&gt;&lt;strong&gt;A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Modern JavaScript development can be overwhelming. When working on a project, you may wonder why all the modern…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.jvandemo.com"&gt;www.jvandemo.com&lt;/a&gt;&lt;a href="https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://exploringjs.com/es6/ch_modules.html" title="http://exploringjs.com/es6/ch_modules.html"&gt;&lt;strong&gt;16. Modules&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Edit description&lt;/em&gt;exploringjs.com&lt;/a&gt;&lt;a href="http://exploringjs.com/es6/ch_modules.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/" title="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/"&gt;&lt;strong&gt;ES modules: A cartoon deep-dive - Mozilla Hacks - the Web developer blog&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ES modules bring an official, standardized module system to JavaScript. With the release of Firefox 60 in May, all…&lt;/em&gt;hacks.mozilla.org&lt;/a&gt;&lt;a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/understanding-es6-modules/" title="https://www.sitepoint.com/understanding-es6-modules/"&gt;&lt;strong&gt;Understanding ES6 Modules - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Almost every language has a concept of modules - a way to include functionality declared in one file within another…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/understanding-es6-modules/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/" title="https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/"&gt;&lt;strong&gt;An overview of ES6 Modules in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Introduction Until recently if you wanted to take full advantage of modules in JavaScript you needed to make use of…&lt;/em&gt;blog.cloud66.com&lt;/a&gt;&lt;a href="https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ponyfoo.com/articles/es6-modules-in-depth" title="https://ponyfoo.com/articles/es6-modules-in-depth"&gt;&lt;strong&gt;ES6 Modules in Depth&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Welcome back to ES6 - "Oh, good. It's not another article about Unicode" - in Depth series. If you've never been around…&lt;/em&gt;ponyfoo.com&lt;/a&gt;&lt;a href="https://ponyfoo.com/articles/es6-modules-in-depth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b" title="https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b"&gt;&lt;strong&gt;ES6 modules, Node.js and the Michael Jackson Solution&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript’s never had a standard way to import and export functionality from a source file to another. Well, it has…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc" title="https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc"&gt;&lt;strong&gt;JavaScript Modules: A Beginner’s Guide&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you’re a newcomer to JavaScript, jargon like “module bundlers vs. module loaders,” “Webpack vs. Browserify” and “AMD…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/primers/modules" title="https://developers.google.com/web/fundamentals/primers/modules"&gt;&lt;strong&gt;JavaScript modules&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article explains how to use JavaScript modules, how to deploy them responsibly, and how the Chrome team is working…&lt;/em&gt;developers.google.com&lt;/a&gt;&lt;a href="https://developers.google.com/web/fundamentals/primers/modules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5" title="https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5"&gt;&lt;strong&gt;IIFE: Immediately Invoked Function Expressions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;IIFE is a function that is declared and invoked at the same time. You create them by using anonymous functions and…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/front-end-weekly/javascript-event-loop-explained-4cd26af121d4" title="https://medium.com/front-end-weekly/javascript-event-loop-explained-4cd26af121d4"&gt;&lt;strong&gt;JavaScript Event Loop Explained&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“How is JavaScript asynchronous and single-threaded ?” The short answer is that JavaScript language is single-threaded…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/front-end-weekly/javascript-event-loop-explained-4cd26af121d4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/" title="https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/"&gt;&lt;strong&gt;The JavaScript Event Loop: Explained&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;With JavaScript approaching near-ubiquity as the scripting language of the web browser, it benefits you to have a basic…&lt;/em&gt;blog.carbonfive.com&lt;/a&gt;&lt;a href="https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40" title="https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40"&gt;&lt;strong&gt;Understanding JS: The Event Loop&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Due to the amazing quantity of libraries, tools and all kinds of things that make your development easier, a lot of…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop" title="https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop"&gt;&lt;strong&gt;Understanding the JavaScript event loop&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you are someone who has heard about the terms event loop, callback queue, concurrency model and call stack but…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.zeolearn.com"&gt;www.zeolearn.com&lt;/a&gt;&lt;a href="https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.likeagirl.io/what-the-heck-is-event-loop-1e414fccef49" title="https://code.likeagirl.io/what-the-heck-is-event-loop-1e414fccef49"&gt;&lt;strong&gt;Event loop in javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you love javascript you’ve need to learn this. One of the deeper aspects of JavaScript is it’s Event Loop. Its…&lt;/em&gt;code.likeagirl.io&lt;/a&gt;&lt;a href="https://code.likeagirl.io/what-the-heck-is-event-loop-1e414fccef49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flaviocopes.com/javascript-event-loop/" title="https://flaviocopes.com/javascript-event-loop/"&gt;&lt;strong&gt;The JavaScript Event Loop&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Event Loop is one of the most important aspects to understand about JavaScript. I've programmed for years with…&lt;/em&gt;flaviocopes.com&lt;/a&gt;&lt;a href="https://flaviocopes.com/javascript-event-loop/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5" title="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5"&gt;&lt;strong&gt;How JavaScript works: Event loop and the rise of Async programming + 5 ways to better coding with…&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Welcome to post # 4 of the series dedicated to exploring JavaScript and its building components. In the process of…&lt;/em&gt;blog.sessionstack.com&lt;/a&gt;&lt;a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" title="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"&gt;&lt;strong&gt;Tasks, microtasks, queues and schedules&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Edit description&lt;/em&gt;jakearchibald.com&lt;/a&gt;&lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8" title="https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8"&gt;&lt;strong&gt;Visualising the JavaScript Event Loop with a Pizza Restaurant analogy&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Consider a pizza restaurant. There are two types of orders that we currently have from a single customer - one is an…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif" title="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif"&gt;&lt;strong&gt;✨♻️ JavaScript Visualized: Event Loop&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Oh boi the event loop. It's one of those things that every JavaScript developer has to deal with in one way or another…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/settimeout-setinterval" title="https://javascript.info/settimeout-setinterval"&gt;&lt;strong&gt;Scheduling: setTimeout and setInterval&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Edit description&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/settimeout-setinterval"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9" title="https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9"&gt;&lt;strong&gt;Why not to use setInterval&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Recently, I came across a requirement where I had to call a function repeatedly after specific time interval, like…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://develoger.com/settimeout-vs-setinterval-cff85142555b" title="https://develoger.com/settimeout-vs-setinterval-cff85142555b"&gt;&lt;strong&gt;setTimeout VS setInterval&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Intro&lt;/em&gt;develoger.com&lt;/a&gt;&lt;a href="https://develoger.com/settimeout-vs-setinterval-cff85142555b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/using-requestanimationframe/" title="https://css-tricks.com/using-requestanimationframe/"&gt;&lt;strong&gt;Using requestAnimationFrame&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;There used to be just one way to do a timed loop in JavaScript: setInterval(). If you needed to repeat something pretty…&lt;/em&gt;css-tricks.com&lt;/a&gt;&lt;a href="https://css-tricks.com/using-requestanimationframe/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.javascriptkit.com/javatutors/requestanimationframe.shtml" title="http://www.javascriptkit.com/javatutors/requestanimationframe.shtml"&gt;&lt;strong&gt;Understanding JavaScript's requestAnimationFrame() method for smooth animations&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Updated: Nov 1st, 2017 The modern web of today is filled with sights to behold on every page, where menus slide in and…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.javascriptkit.com"&gt;www.javascriptkit.com&lt;/a&gt;&lt;a href="http://www.javascriptkit.com/javatutors/requestanimationframe.shtml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/" title="https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/"&gt;&lt;strong&gt;Handling time intervals in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;While working on an Electron app Pomolectron, I needed to handle different time intervals through setInterval()…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.amitmerchant.com"&gt;www.amitmerchant.com&lt;/a&gt;&lt;a href="https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.softwaremag.com/javascript-engines/" title="http://www.softwaremag.com/javascript-engines/"&gt;&lt;strong&gt;JavaScript Engines -&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;By Jen Looper Writing code for the Web sometimes feels a little magical in that developers write a sequence of…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.softwaremag.com"&gt;www.softwaremag.com&lt;/a&gt;&lt;a href="http://www.softwaremag.com/javascript-engines/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964" title="https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964"&gt;&lt;strong&gt;Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Before diving deep into the core of Chrome’s V8, first, let’s get our fundamentals down. All of our systems consist of…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775" title="https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775"&gt;&lt;strong&gt;Understanding V8’s Bytecode&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;V8 is Google’s open source JavaScript engine. Chrome, Node.js, and many other applications use V8. This article…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/" title="https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/"&gt;&lt;strong&gt;A Brief History of Google's V8 JavaScript Engine&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Javascript has a reputation in developer circles as a terrible language. It's classless, loosely typed, and plagued by…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.mediacurrent.com"&gt;www.mediacurrent.com&lt;/a&gt;&lt;a href="https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553" title="https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553"&gt;&lt;strong&gt;JavaScript essentials: why you should know how the engine works&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article is also available in Spanish.&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathiasbynens.be/notes/shapes-ics" title="https://mathiasbynens.be/notes/shapes-ics"&gt;&lt;strong&gt;JavaScript engine fundamentals: Shapes and Inline Caches&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article describes some key fundamentals that are common to all JavaScript engines - and not just V8, the engine…&lt;/em&gt;mathiasbynens.be&lt;/a&gt;&lt;a href="https://mathiasbynens.be/notes/shapes-ics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathiasbynens.be/notes/prototypes" title="https://mathiasbynens.be/notes/prototypes"&gt;&lt;strong&gt;JavaScript engine fundamentals: optimizing prototypes&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article describes some key fundamentals that are common to all JavaScript engines - and not just V8, the engine…&lt;/em&gt;mathiasbynens.be&lt;/a&gt;&lt;a href="https://mathiasbynens.be/notes/prototypes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v8.dev/blog/elements-kinds" title="https://v8.dev/blog/elements-kinds"&gt;&lt;strong&gt;Elements kinds in V8&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Note: If you prefer watching a presentation over reading articles, then enjoy the video below! JavaScript objects can…&lt;/em&gt;v8.dev&lt;/a&gt;&lt;a href="https://v8.dev/blog/elements-kinds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4" title="https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4"&gt;&lt;strong&gt;Programming with JS: Bitwise Operations&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this series of articles we take a look at different Computer Science topics from the prism of JavaScript. We’ve…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5" title="https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5"&gt;&lt;strong&gt;Using JavaScript’s Bitwise Operators in Real Life&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let’s pretend we’re machine code programmers!&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3resource.com/javascript/operators/bitwise-operator.php" title="https://www.w3resource.com/javascript/operators/bitwise-operator.php"&gt;&lt;strong&gt;JavaScript Bitwise Operators - w3resource&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Bitwise operators perform an operation on the bitwise (0,1) representation of their arguments, rather than as decimal…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.w3resource.com"&gt;www.w3resource.com&lt;/a&gt;&lt;a href="https://www.w3resource.com/javascript/operators/bitwise-operator.php"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3" title="https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3"&gt;&lt;strong&gt;Bitwise Operators in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;So far the two programming languages we have worked with are Ruby and Javascript. There are many differences between…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04" title="https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04"&gt;&lt;strong&gt;A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Bitwise operators, though they take a few minutes to learn, are a fun way to make your code more space and…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript" title="https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript"&gt;&lt;strong&gt;How can I understand Bitwise operation in JavaScript?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Answer: Okay, I was going to just write that bitwise operations in JavaScript are the same as in every other language…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.quora.com"&gt;www.quora.com&lt;/a&gt;&lt;a href="https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eloquentjavascript.net/14_dom.html" title="https://eloquentjavascript.net/14_dom.html"&gt;&lt;strong&gt;The Document Object Model :: Eloquent JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Too bad! Same old story! Once you've finished building your house you notice you've accidentally learned something that…&lt;/em&gt;eloquentjavascript.net&lt;/a&gt;&lt;a href="https://eloquentjavascript.net/14_dom.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/introduction-to-the-dom" title="https://www.digitalocean.com/community/tutorials/introduction-to-the-dom"&gt;&lt;strong&gt;How To Understand and Modify the DOM in JavaScript | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Document Object Model, usually referred to as the DOM, is an essential part of making websites interactive. It is…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.digitalocean.com"&gt;www.digitalocean.com&lt;/a&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/introduction-to-the-dom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d" title="https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d"&gt;&lt;strong&gt;What’s the Document Object Model, and why you should know how to use it.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;So, you’ve studied HTML, you’ve created your first tags, learned about CSS, made beautiful forms, amazing buttons…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html" title="https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html"&gt;&lt;strong&gt;JavaScript DOM Tutorial with Example&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Details JavaScript can access all the elements in a webpage making use of Document Object Model (DOM). In fact, the web…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.guru99.com"&gt;www.guru99.com&lt;/a&gt;&lt;a href="https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/dom/" title="https://css-tricks.com/dom/"&gt;&lt;strong&gt;What is the DOM?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A reader recently wrote in asking me what the DOM was. They said they've heard it mentioned and alluded to, but aren't…&lt;/em&gt;css-tricks.com&lt;/a&gt;&lt;a href="https://css-tricks.com/dom/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://zellwk.com/blog/dom-traversals/" title="https://zellwk.com/blog/dom-traversals/"&gt;&lt;strong&gt;Traversing the DOM with JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A good JavaScript developer needs to know how to traverse the DOM-it's the act of selecting an element from another…&lt;/em&gt;zellwk.com&lt;/a&gt;&lt;a href="https://zellwk.com/blog/dom-traversals/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/dom-nodes" title="https://javascript.info/dom-nodes"&gt;&lt;strong&gt;DOM tree&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The backbone of an HTML document is tags. According to the Document Object Model (DOM), every HTML tag is an object…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/dom-nodes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/how-to-traverse-the-dom-in-javascript-d6555c335b4e" title="https://javascript.plainenglish.io/how-to-traverse-the-dom-in-javascript-d6555c335b4e"&gt;&lt;strong&gt;How to traverse the DOM in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn how to navigate your way through the DOM tree.&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/how-to-traverse-the-dom-in-javascript-d6555c335b4e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" title="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction"&gt;&lt;strong&gt;Render-tree Construction, Layout, and Paint | Web Fundamentals&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The CSSOM and DOM trees are combined into a render tree, which is then used to compute the layout of each visible…&lt;/em&gt;developers.google.com&lt;/a&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitsofco.de/what-exactly-is-the-dom/" title="https://bitsofco.de/what-exactly-is-the-dom/"&gt;&lt;strong&gt;What, exactly, is the DOM?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Document Object Model, or the "DOM", is an interface to web pages. It is essentially an API to the page, allowing…&lt;/em&gt;bitsofco.de&lt;/a&gt;&lt;a href="https://bitsofco.de/what-exactly-is-the-dom/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bouhm/a-vanilla-js-guide-on-mastering-the-dom-3l9b" title="https://dev.to/bouhm/a-vanilla-js-guide-on-mastering-the-dom-3l9b"&gt;&lt;strong&gt;A Vanilla JS Guide On Mastering the DOM&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Note: The contents of this post are intended to be introductory and does not include use of any libraries like jQuery…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/bouhm/a-vanilla-js-guide-on-mastering-the-dom-3l9b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript" title="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript"&gt;&lt;strong&gt;How To Use Classes in JavaScript | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is a prototype-based language, and every object in JavaScript has a hidden internal property called…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.digitalocean.com"&gt;www.digitalocean.com&lt;/a&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677" title="https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677"&gt;&lt;strong&gt;Javascript Classes — Under The Hood&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Javascript classes are nothing but a syntactic sugar over existing prototype based inheritance and constructor…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.javascriptjanuary.com/blog/es6-classes" title="https://www.javascriptjanuary.com/blog/es6-classes"&gt;&lt;strong&gt;ES6 Classes - JavaScript January&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Object-Oriented Programming (OOP) can be a great way to organize your projects. Introduced with ES6, the javascript…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.javascriptjanuary.com"&gt;www.javascriptjanuary.com&lt;/a&gt;&lt;a href="https://www.javascriptjanuary.com/blog/es6-classes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes" title="https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes"&gt;&lt;strong&gt;Better JavaScript with ES6, Pt. II: A Deep Dive into Classes&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Out with the Old, In with the new Let's be clear about one thing from the start: Under the hood, ES6 classes are not…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/front-end-weekly/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd" title="https://medium.com/front-end-weekly/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd"&gt;&lt;strong&gt;Understand the Factory Design Pattern in plain javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The simplest way to understand Factory Design Pattern&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/front-end-weekly/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://atendesigngroup.com/blog/factory-functions-javascript" title="https://atendesigngroup.com/blog/factory-functions-javascript"&gt;&lt;strong&gt;Factory Functions in JavaScript | Aten Design Group&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;As we move from an age of jQuery plugins and script drop-ins to a world of CommonJS and modular architectures it's…&lt;/em&gt;atendesigngroup.com&lt;/a&gt;&lt;a href="https://atendesigngroup.com/blog/factory-functions-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9" title="https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9"&gt;&lt;strong&gt;The Factory Pattern in JS ES6&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I’m trying to get the most out of all the new things in ES6 (ES2015). And I’m writing a new library where I need a…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15" title="https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15"&gt;&lt;strong&gt;Class vs Factory function: exploring the way forward&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ECMAScript 2015 (aka ES6) comes with the class syntax, so now we have two competing patterns for creating objects. In…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a" title="https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a"&gt;&lt;strong&gt;How ES6 classes really work and how to build your own&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The 6th edition of ECMAScript (or ES6 for short) revolutionized the language, adding many new features, including…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jordankasper.com/understanding-super-in-javascript" title="https://jordankasper.com/understanding-super-in-javascript"&gt;&lt;strong&gt;Understanding &lt;code&gt;super&lt;/code&gt; in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;With the adoption of ES6/2015 by nearly all browsers (with one notable exception), developers have access to the new…&lt;/em&gt;jordankasper.com&lt;/a&gt;&lt;a href="https://jordankasper.com/understanding-super-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm" title="https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm"&gt;&lt;strong&gt;An Easy Guide To Understanding Classes In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;1. An Introduction To Classes In JavaScript In the previous article in this series we looked at function constructors…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"&gt;&lt;strong&gt;Function.prototype.call() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The value to use as this when calling . Note: In certain cases, may not be the actual value seen by the method. If the…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind"&gt;&lt;strong&gt;Function.prototype.bind() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"&gt;&lt;strong&gt;Function.prototype.apply() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b" title="https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b"&gt;&lt;strong&gt;Grokking call(), apply() and bind() methods in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;These are very important for every aspiring JavaScript Developer, these are used in almost every JavaScript Library or…&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp" title="https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp"&gt;&lt;strong&gt;How-to: call() , apply() and bind() in JavaScript | Codementor&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this post, we will be discussing the difference between call(), apply(), and bind() methods of JavaScript functions…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.codementor.io"&gt;www.codementor.io&lt;/a&gt;&lt;a href="https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/" title="http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/"&gt;&lt;strong&gt;JavaScript's Apply, Call, and Bind Methods are Essential for JavaScript Professionals&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Prerequisite: - Understand JavaScript's "this" With Ease, and Master It. - JavaScript Objects - Understand JavaScript…&lt;/em&gt;javascriptissexy.com&lt;/a&gt;&lt;a href="http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/" title="https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/"&gt;&lt;strong&gt;Understanding the "this" keyword, call, apply, and bind in JavaScript - ui.dev&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Before diving into the specifics of the this keyword in JavaScript, it's important to take a step back and first look…&lt;/em&gt;tylermcginnis.com&lt;/a&gt;&lt;a href="https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb" title="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb"&gt;&lt;strong&gt;Javascript: call(), apply() and bind()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“this” refresher&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b" title="https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b"&gt;&lt;strong&gt;The difference between call / apply / bind&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is a dynamic language, and is flexible enough to let you do things like multiple inheritance. That’s when an…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce" title="https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce"&gt;&lt;strong&gt;What the hack is call, apply, bind in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Before start looking into call, apply, bind you should understand - how does "this" keyword works in JavaScript. In…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/" title="https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/"&gt;&lt;strong&gt;Mastering 'this' in JavaScript: Callbacks and bind(), apply(), call() - The New Stack&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In Part One of our tutorial on mastering the 'this' keyword in JavaScript, we looked at why the concept of 'this' can…&lt;/em&gt;thenewstack.io&lt;/a&gt;&lt;a href="https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo" title="https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo"&gt;&lt;strong&gt;JavaScript's apply, call, and bind explained by hosting a cookout&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you have ever been in charge of operating the grill at a family event or party, then you can understand apply, call…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb" title="https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb"&gt;&lt;strong&gt;How AND When to use bind, call, and apply in Javascript - Eigen X&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In order for you to fully understand bind, call, and apply you have to understand the Javascript concept of this …&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.eigenx.com"&gt;www.eigenx.com&lt;/a&gt;&lt;a href="https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hacksparrow.com/javascript-bind-vs-apply-and-call.html" title="https://www.hacksparrow.com/javascript-bind-vs-apply-and-call.html"&gt;&lt;strong&gt;JavaScript: bind() vs apply() and call()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;var fruit = { name: 'Apple' }; and this function: function showDetails(size, price) { console.log(this.name + ' ' +…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.hacksparrow.com"&gt;www.hacksparrow.com&lt;/a&gt;&lt;a href="https://www.hacksparrow.com/javascript-bind-vs-apply-and-call.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja" title="https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja"&gt;&lt;strong&gt;Let me explain to you what is &lt;code&gt;this&lt;/code&gt;. (Javascript)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Original post: &lt;a href="https://www.ycmjason.com/blog/2018/06/15.html"&gt;https://www.ycmjason.com/blog/2018/06/15.html&lt;/a&gt; this article assumes 'use strict' in all context this…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8" title="https://betterprogramming.pub/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8"&gt;&lt;strong&gt;Understanding the “this” Keyword in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;How the value of “this” is assigned in different scenarios&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8" title="https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8"&gt;&lt;strong&gt;How to understand the keyword this and context in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;As mentioned in one of my earlier articles, mastering JavaScript fully can be a lengthy journey. You may have come…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1" title="https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1"&gt;&lt;strong&gt;What is "this" in Javascript ?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;While learning JavaScript there are many roadblocks like closures, asynchronous programming, this keywords, etc. These…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam" title="https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam"&gt;&lt;strong&gt;This and Bind In Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you're learning Javascript, you'll no doubt run into the this keyword early on. At first, it appears quite simple…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf" title="https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf"&gt;&lt;strong&gt;3 Techniques for Maintaining Your Sanity Using "This" in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Of JavaScript's many confusing aspects, the keyword this can be one of the most complicated -- Here's a joke about the…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa" title="https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa"&gt;&lt;strong&gt;Mastering the JavaScript "this" Keyword&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The this keyword is a very important concept in JavaScript, and also a particularly confusing one to both new…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n" title="https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n"&gt;&lt;strong&gt;This binding in JavaScript - 4. New binding&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This post ( This binding in JavaScript - 4. New binding) was originally published on Sargalias. In this series we talk…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp" title="https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp"&gt;&lt;strong&gt;A quick intro to 'this' in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Probably one of the most confusing aspects of JavaScript is finding out what 'this' means. In this post, I will try to…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/cat__logic/explaining-javascript-this-to-my-cat-1kig" title="https://dev.to/cat__logic/explaining-javascript-this-to-my-cat-1kig"&gt;&lt;strong&gt;Explaining JavaScript 'this' to my cat&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;My cat is not very good at JavaScript (also at many other things), so today I will try to explain this keyword to him…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/cat__logic/explaining-javascript-this-to-my-cat-1kig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g" title="https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g"&gt;&lt;strong&gt;A conversation with the 'this' keyword in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;'This' is one of the most confusing concepts in Javascript. Here's the sad news. It is just as important to understand…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jscurious.com/what-are-call-apply-and-bind-in-javascript/" title="https://jscurious.com/what-are-call-apply-and-bind-in-javascript/"&gt;&lt;strong&gt;What are call(), apply() and bind() in JavaScript - JS Curious&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In JavaScript this refers to the owner object. If you want to attach some extra properties to a function, then you can…&lt;/em&gt;jscurious.com&lt;/a&gt;&lt;a href="https://jscurious.com/what-are-call-apply-and-bind-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/nerd-for-tech/understanding-this-binding-in-javascript-86687397c76d" title="https://medium.com/nerd-for-tech/understanding-this-binding-in-javascript-86687397c76d"&gt;&lt;strong&gt;Understanding “this” binding in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In order to understand “this” keyword clearly, we need to go through of how the execution context works at first. Every…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/nerd-for-tech/understanding-this-binding-in-javascript-86687397c76d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e" title="https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e"&gt;&lt;strong&gt;JavaScript For Beginners: the ‘new’ operator&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Preface&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c" title="https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c"&gt;&lt;strong&gt;Let’s demystify JavaScript’s ‘new’ keyword&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Over the weekend, I completed Will Sentance’s JavaScript: The Hard Parts. It might not sound like the most glorious way…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/constructor-new" title="https://javascript.info/constructor-new"&gt;&lt;strong&gt;Constructor, operator "new"&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The regular {...} syntax allows to create one object. But often we need to create many similar objects, like multiple…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/constructor-new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/understanding-javascript-constructors/" title="https://css-tricks.com/understanding-javascript-constructors/"&gt;&lt;strong&gt;Understanding JavaScript Constructors&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The following is a guest post by Faraz Kelhini. Some of this stuff is out of my comfort zone, so I asked Kyle Simpson…&lt;/em&gt;css-tricks.com&lt;/a&gt;&lt;a href="https://css-tricks.com/understanding-javascript-constructors/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://2ality.com/2017/08/type-right.html" title="http://2ality.com/2017/08/type-right.html"&gt;&lt;strong&gt;Beyond &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;: simplifying dynamic type checks&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This blog post describes a technique for making instanceof applicable to more values (on the right-hand side)…&lt;/em&gt;2ality.com&lt;/a&gt;&lt;a href="http://2ality.com/2017/08/type-right.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/" title="https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/"&gt;&lt;strong&gt;What Is the Instanceof Operator in JavaScript?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn more about What Is the Instanceof Operator in JavaScript? from DevelopIntelligence. Your trusted developer…&lt;/em&gt;appendto.com&lt;/a&gt;&lt;a href="https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac" title="https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac"&gt;&lt;strong&gt;Function and Object, instances of each other&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Explaining why Function is an instance of Object, and why Object is an instance of Function&lt;/em&gt;javascriptrefined.io&lt;/a&gt;&lt;a href="https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"&gt;&lt;strong&gt;Inheritance and the prototype chain - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b" title="https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b"&gt;&lt;strong&gt;Javascript : Prototype vs Class&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let’s see how classes in JS are not what you think they are.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-prototype-cb29d82b8809"&gt;&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-prototype-cb29d82b8809"&gt;https://codeburst.io/javascript-prototype-cb29d82b8809&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo" title="https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo"&gt;&lt;strong&gt;Prototype in Javascript | Codementor&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;By default every function has a property name as prototype which is EMPTY ( by default). We can add properties and…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.codementor.io"&gt;www.codementor.io&lt;/a&gt;&lt;a href="https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/prototypes-in-javascript-5bba2990e04b" title="https://betterprogramming.pub/prototypes-in-javascript-5bba2990e04b"&gt;&lt;strong&gt;Prototypes in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this post, we will discuss what are prototypes in JavaScript, how they help JavaScript in achieving the concepts of…&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/prototypes-in-javascript-5bba2990e04b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872" title="https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872"&gt;&lt;strong&gt;Prototype in JavaScript: it’s quirky, but here’s how it works&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The following four lines are enough to confuse most JavaScript developers:&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2" title="https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2"&gt;&lt;strong&gt;Understanding JavaScript: Prototype and Inheritance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Due to the amazing quantity of libraries, tools and all kinds of things that make your development easier, a lot of…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d" title="https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d"&gt;&lt;strong&gt;Understanding Classes (ES5) and Prototypal Inheritance in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In a nutshell the above snippet creates a Person class that can have multiple instances. By convention functional…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl" title="https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl"&gt;&lt;strong&gt;prototype, &lt;strong&gt;proto&lt;/strong&gt; and Prototypal inheritance in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This post was originally published on my website If you have spent some time with JavaScript, chances are that you have…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/prototype-inheritance" title="https://javascript.info/prototype-inheritance"&gt;&lt;strong&gt;Prototypal inheritance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In programming, we often want to take something and extend it. For instance, we have a user object with its properties…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/prototype-inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript" title="https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript"&gt;&lt;strong&gt;How To Work with Prototypes and Inheritance in JavaScript | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is a prototype-based language, meaning object properties and methods can be shared through generalized…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.digitalocean.com"&gt;www.digitalocean.com&lt;/a&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e" title="https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e"&gt;&lt;strong&gt;Master JavaScript Prototypes &amp;amp; &lt;em&gt;Inheritance&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Inheritancecodeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4" title="https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4"&gt;&lt;strong&gt;JavaScript’s Prototypal Inheritance Explained Using CSS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Prototypal inheritance is arguably the least understood aspect of JavaScript. Well the good news is that if you…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance" title="https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance"&gt;&lt;strong&gt;Demystifying ES6 Classes And Prototypal Inheritance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In the early history of the JavaScript language, a cloud of animosity formed over the lack of a proper syntax for…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/danny/intro-to-prototypal-inheritance---js-9di" title="https://dev.to/danny/intro-to-prototypal-inheritance---js-9di"&gt;&lt;strong&gt;Intro To Prototypal Inheritance - JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this article I will try to give an introduction to protypal inheritance. As an "optional" pre-requisite, you can…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/danny/intro-to-prototypal-inheritance---js-9di"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm" title="https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm"&gt;&lt;strong&gt;Let's Build Prototypal Inheritance in JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The idea for this post is pretty simple. I want to some extent build and with that, illustrate how prototypes work in…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b" title="https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b"&gt;&lt;strong&gt;Objects, Prototypes and Classes in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is based on a simple object-oriented programming model with objects being a fundamental part of the…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg" title="https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg"&gt;&lt;strong&gt;The magical world of JavaScript prototypes&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;How many times have we heard "JavaScript is not an Object-Oriented language, it's Prototype-oriented"? It turns out…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4" title="https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4"&gt;&lt;strong&gt;Understanding Prototypal Inheritance In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What Is Object-oriented Programming (OOP) Classical vs Prototypal Inheritance The Prototype Object And The Prototype…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"&gt;&lt;strong&gt;Object.create() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Object.create() method creates a new object, using an existing object as the prototype of the newly created object…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;&lt;strong&gt;Object.assign() - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@happymishra66/object-create-in-javascript-fa8674df6ed2" title="https://medium.com/@happymishra66/object-create-in-javascript-fa8674df6ed2"&gt;&lt;strong&gt;Object.create in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Object.create method is one of the methods to create a new object in JavaScript.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@happymishra66/object-create-in-javascript-fa8674df6ed2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html" title="https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html"&gt;&lt;strong&gt;Javascript Objects | A New Way to Create Objects | HTML Goodies&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;There are a lot of ways to create Objects in JavaScript, perhaps even more to integrate inheritance into them. Just…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.htmlgoodies.com"&gt;www.htmlgoodies.com&lt;/a&gt;&lt;a href="https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html" title="http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html"&gt;&lt;strong&gt;Basic Inheritance with Object.create&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A few issues back we looked at how to implement basic inheritance with constructors. In this issue, we'll look at how…&lt;/em&gt;adripofjavascript.com&lt;/a&gt;&lt;a href="http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/object-create-javascript/" title="https://www.geeksforgeeks.org/object-create-javascript/"&gt;&lt;strong&gt;Object.create( ) In JavaScript - GeeksforGeeks&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Object and Object Constructors in JavaScript? In the living world of object-oriented programming we already know the…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.geeksforgeeks.org"&gt;www.geeksforgeeks.org&lt;/a&gt;&lt;a href="https://www.geeksforgeeks.org/object-create-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358" title="https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358"&gt;&lt;strong&gt;Understanding the difference between Object.create() and the new operator.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Why is it important to know the difference?&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/" title="https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/"&gt;&lt;strong&gt;JavaScript Object Creation: Patterns and Best Practices - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Jeff Mott guides you through a step-by-step approach to JavaScript object creation - from object literals to factory…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alligator.io/js/dealing-with-objects/" title="https://alligator.io/js/dealing-with-objects/"&gt;&lt;strong&gt;Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty |…&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This post is a sort of grab bag to help you explore a few very useful methods to help you manage your objects in…&lt;/em&gt;alligator.io&lt;/a&gt;&lt;a href="https://alligator.io/js/dealing-with-objects/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/bar-talk/copying-objects-in-javascript" title="https://scotch.io/bar-talk/copying-objects-in-javascript"&gt;&lt;strong&gt;Copying Objects in JavaScript | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Objects are the fundamental blocks of JavaScript. An object is a collection of properties, and a property is an…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/bar-talk/copying-objects-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-object-assign-bc9696dcbb6e" title="https://codeburst.io/javascript-object-assign-bc9696dcbb6e"&gt;&lt;strong&gt;JavaScript: Object.assign()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Veja nesse artigo como utilizar o Object.assign() do ECMAScript 6&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-object-assign-bc9696dcbb6e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flaviocopes.com/how-to-clone-javascript-object/" title="https://flaviocopes.com/how-to-clone-javascript-object/"&gt;&lt;strong&gt;How to deep clone a JavaScript object&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Copying objects in JavaScript can be tricky. Some ways perform a shallow copy, which is the default behavior in most of…&lt;/em&gt;flaviocopes.com&lt;/a&gt;&lt;a href="https://flaviocopes.com/how-to-clone-javascript-object/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/vzing/object-create-when-and-why-to-use-20m9" title="https://dev.to/vzing/object-create-when-and-why-to-use-20m9"&gt;&lt;strong&gt;Object.create(): When and Why to Use&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Object.create() is a method available on all JavaScript objects. It takes two arguments: the object you want to copy…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/vzing/object-create-when-and-why-to-use-20m9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bojangbusiness/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d" title="https://medium.com/@bojangbusiness/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d"&gt;&lt;strong&gt;JavaScript Functional Programming — map, filter and reduce&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Even if you don’t know what functional programming is you’ve probably been using map, filter and reduce just because…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@bojangbusiness/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4" title="https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4"&gt;&lt;strong&gt;Learn map, filter and reduce in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The perfect toolset for your venture in Functional Programming&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter" title="https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter"&gt;&lt;strong&gt;JavaScript's Map, Reduce, and Filter * Dan Martensen&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;As engineers we build and manipulate arrays holding numbers, strings, booleans and objects almost everyday. We use them…&lt;/em&gt;danmartensen.svbtle.com&lt;/a&gt;&lt;a href="https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209" title="https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209"&gt;&lt;strong&gt;How to Use Map, Filter, and Reduce in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functional programming has been making quite a splash in the development world these days. And for good reason…&lt;/em&gt;code.tutsplus.com&lt;/a&gt;&lt;a href="https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4" title="https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4"&gt;&lt;strong&gt;JavaScript — Learn to Chain Map, Filter, and Reduce&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn how to chain map, filter, and reduce in JavaScript&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464" title="https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464"&gt;&lt;strong&gt;Understanding map, filter and reduce in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;When working on Javascript projects you inevitably come across situations where you have to do some data manipulation…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f" title="https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f"&gt;&lt;strong&gt;Functional Programming in JS: map, filter, reduce (Pt. 5)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Note: This is part of the “Javascript and Functional Programming” series on learning functional programming techniques…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wsvincent.com/functional-javascript-map-filter-reduce/" title="https://wsvincent.com/functional-javascript-map-filter-reduce/"&gt;&lt;strong&gt;JavaScript: Map, Filter, Reduce&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript's built-in map, filter, and reduce array methods are invaluable to a modern JavaScript developer. First…&lt;/em&gt;wsvincent.com&lt;/a&gt;&lt;a href="https://wsvincent.com/functional-javascript-map-filter-reduce/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/" title="https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/"&gt;&lt;strong&gt;JavaScript Arrow Functions: Fat and Concise Syntax in ES6&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this article, you'll learn all about JavaScript's arrow function syntax - including some of the gotchas you need to…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc" title="https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc"&gt;&lt;strong&gt;JavaScript: Arrow Functions for Beginners&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Last week I published this post on the keyword this for beginners. One of the topics that wasn’t covered in that…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26" title="https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26"&gt;&lt;strong&gt;When (and why) you should use ES6 arrow functions — and when you shouldn’t&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Arrow functions (also called “fat arrow functions”) are undoubtedly one of the more popular features of ES6. They…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946" title="https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946"&gt;&lt;strong&gt;JavaScript — Learn &amp;amp; Understand Arrow Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A beginners guide to Arrow Functions in JavaScript&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83" title="https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83"&gt;&lt;strong&gt;(JavaScript )=&amp;gt; Arrow functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This post is meant to summarise some of the things someone new to JavaScript and arrow functions needs to know. I do…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://andepaulj.medium.com/javascript-reduce-79aab078da23" title="https://andepaulj.medium.com/javascript-reduce-79aab078da23"&gt;&lt;strong&gt;Javascript.reduce()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Mutli-Tool of JS&lt;/em&gt;andepaulj.medium.com&lt;/a&gt;&lt;a href="https://andepaulj.medium.com/javascript-reduce-79aab078da23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gofore.com/en/why-you-should-replace-foreach/" title="https://gofore.com/en/why-you-should-replace-foreach/"&gt;&lt;strong&gt;Why you should replace forEach with map and filter in JavaScript - Gofore&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;TL;DR Prefer map and filter over forEach when you need to copy an array or part of it to a new one. One of the best…&lt;/em&gt;gofore.com&lt;/a&gt;&lt;a href="https://gofore.com/en/why-you-should-replace-foreach/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d" title="https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d"&gt;&lt;strong&gt;Simplify your JavaScript – Use .map(), .reduce(), and .filter()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you haven’t heard of .map(), .reduce(), and .filter() in JavaScript, you might want to learn to use it!&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/" title="https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/"&gt;&lt;strong&gt;JavaScript's Reduce Method Explained By Going On a Diet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The reduce method in JavaScript gives you a simple way to take an array of values and combine them into one value, or…&lt;/em&gt;blog.codeanalogies.com&lt;/a&gt;&lt;a href="https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160" title="https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160"&gt;&lt;strong&gt;Difference between map, filter and reduce in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I’ve seen a lot of JS beginners struggle when using map, filter or reduce and don’t know the different use cases of…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/map-filter-reduce-ebbed4be4201" title="https://hackernoon.com/map-filter-reduce-ebbed4be4201"&gt;&lt;strong&gt;Map⇄Filter⇄Reduce↻ | Hacker Noon&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Share it on LinkedIn! Due to that reason we were introduced with these three higher order functions, namely 🗺️Map…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/map-filter-reduce-ebbed4be4201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6" title="https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6"&gt;&lt;strong&gt;Finding Your Way With .Map()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;At the end of the article is a CodePen that demonstrates the concepts presented here.&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26" title="https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26"&gt;&lt;strong&gt;How to write your own map, filter and reduce functions in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A sneak peek into functional programming and higher order functions in Javascript.&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/" title="https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/"&gt;&lt;strong&gt;How to Manipulate Arrays in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;An important part of any programming language. Most times we need to do several operations on arrays, hence this…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.freecodecamp.org"&gt;www.freecodecamp.org&lt;/a&gt;&lt;a href="https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/pickleat/map-filter-and-reduce-2efb" title="https://dev.to/pickleat/map-filter-and-reduce-2efb"&gt;&lt;strong&gt;.map(), .filter(), and .reduce()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Originally posted on my blog For the last several weeks I've been applying for jobs. Sadly, the startup I was working…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/pickleat/map-filter-and-reduce-2efb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jstutorial.medium.com/map-filter-and-reduce-animated-7fe391a35a47" title="https://jstutorial.medium.com/map-filter-and-reduce-animated-7fe391a35a47"&gt;&lt;strong&gt;Map, Filter and Reduce – Animated&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Map, filter and reduce have been around for a long time. They are often seen as part of Functional Programming style.&lt;/em&gt;jstutorial.medium.com&lt;/a&gt;&lt;a href="https://jstutorial.medium.com/map-filter-and-reduce-animated-7fe391a35a47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209" title="https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209"&gt;&lt;strong&gt;Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this article we are going to take a close look at some arrays iterators like , , or others methods that use…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24" title="https://betterprogramming.pub/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24"&gt;&lt;strong&gt;How to Use JavaScript’s .map, .filter, and .reduce&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;How to use these three useful JavaScript functions&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7" title="https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7"&gt;&lt;strong&gt;Javascript performance test - for vs for each vs (map, reduce, filter, find).&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;We all know that for loop are faster than for each or javascript function since under the hood of javascript functions…&lt;/em&gt;towardsdatascience.com&lt;/a&gt;&lt;a href="https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/using-map-filter-and-reduce-properly-50e07f80c8b2" title="https://javascript.plainenglish.io/using-map-filter-and-reduce-properly-50e07f80c8b2"&gt;&lt;strong&gt;Using .map(), .filter() and .reduce() properly 👩🏽‍💻&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Map, reduce, and filter are all array methods in JavaScript. Each one will iterate over an array and perform a…&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/using-map-filter-and-reduce-properly-50e07f80c8b2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c" title="https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c"&gt;&lt;strong&gt;Javascript and Functional Programming — Pt. 3: Pure Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Purity&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976" title="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976"&gt;&lt;strong&gt;Master the JavaScript Interview: What is a Pure Function?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Pure functions are essential for a variety of purposes, including functional programming, reliable concurrency, and…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c" title="https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c"&gt;&lt;strong&gt;JavaScript: What Are Pure Functions And Why Use Them?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The first time I heard the term “Pure Function” I was confused. What was wrong with a regular function? Why does it…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/" title="http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/"&gt;&lt;strong&gt;Pure functions in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A pure function doesn't depend on and doesn't modify the states of variables out of its scope. Concretely, that means a…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.nicoespeon.com"&gt;www.nicoespeon.com&lt;/a&gt;&lt;a href="http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/functional-programming-pure-functions/" title="https://www.sitepoint.com/functional-programming-pure-functions/"&gt;&lt;strong&gt;Functional Programming: Pure Functions - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This is the second part of a two part series on functional programming in Ruby. Before we explored immutable values…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/functional-programming-pure-functions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appdividend.com/2017/04/10/pure-functions-in-javascript/" title="https://appdividend.com/2017/04/10/pure-functions-in-javascript/"&gt;&lt;strong&gt;Pure Functions In Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Pure functions in Javascript are kind of Functions where the return value is determined by its parameter passed at call…&lt;/em&gt;appdividend.com&lt;/a&gt;&lt;a href="https://appdividend.com/2017/04/10/pure-functions-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alistapart.com/article/making-your-javascript-pure" title="https://alistapart.com/article/making-your-javascript-pure"&gt;&lt;strong&gt;Making your JavaScript Pure&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Once your website or application goes past a small number of lines, it will inevitably contain bugs of some sort. This…&lt;/em&gt;alistapart.com&lt;/a&gt;&lt;a href="https://alistapart.com/article/making-your-javascript-pure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa" title="https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa"&gt;&lt;strong&gt;Arrays, Objects and Mutations&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Here are some thoughts on how to avoid mutations when working with arrays and objects in JavaScript by treating them as…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310" title="https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310"&gt;&lt;strong&gt;The State of Immutability&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Immutability is a hot subject in modern JavaScript. The reason why this topic is so popular now is of course the…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/" title="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/"&gt;&lt;strong&gt;How to deal with dirty side effects in your pure functional JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you start learning about functional programming, it won't be long before you come across the idea of pure functions…&lt;/em&gt;jrsinclair.com&lt;/a&gt;&lt;a href="https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://davidwalsh.name/preventing-sideeffects-javascript" title="https://davidwalsh.name/preventing-sideeffects-javascript"&gt;&lt;strong&gt;Preventing Side Effects in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is very dynamic these days but I still see a lot of legacy code, whether it be for optimal backward…&lt;/em&gt;davidwalsh.name&lt;/a&gt;&lt;a href="https://davidwalsh.name/preventing-sideeffects-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition" title="https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition"&gt;&lt;strong&gt;Wielding Pure Functions in JavaScript and Function Composition&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Today, I'd like to share some thoughts on two fundamental concepts in functional programming: Pure functions and…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wsvincent.com/javascript-pure-functions/" title="https://wsvincent.com/javascript-pure-functions/"&gt;&lt;strong&gt;JavaScript: Pure Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Pure functions are fundamental to functional programming, concurrency, writing testable code, and having deterministic…&lt;/em&gt;wsvincent.com&lt;/a&gt;&lt;a href="https://wsvincent.com/javascript-pure-functions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1" title="https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1"&gt;&lt;strong&gt;Functional programming paradigms in modern JavaScript: Pure functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is one of the most popular programming languages out there. It runs in the browser, on desktop, on mobile…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3" title="https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3"&gt;&lt;strong&gt;Understanding Javascript Mutation and Pure Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Boost your app performance by better understanding Mutation and Pure Functions in JS&lt;/em&gt;blog.bitsrc.io&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bluepnume.medium.com/functional-ish-javascript-205c05d0ed08" title="https://bluepnume.medium.com/functional-ish-javascript-205c05d0ed08"&gt;&lt;strong&gt;Functional-ish JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functional programming is a great discipline to learn and apply when writing JavaScript. Writing stateless, idempotent…&lt;/em&gt;bluepnume.medium.com&lt;/a&gt;&lt;a href="https://bluepnume.medium.com/functional-ish-javascript-205c05d0ed08"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events" title="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;&lt;strong&gt;Introduction to events - Learn web development | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Events are actions or occurrences that happen in the system you are programming, which the system tells you about so…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/bubbling-and-capturing" title="https://javascript.info/bubbling-and-capturing"&gt;&lt;strong&gt;Bubbling and capturing&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's start with an example. This handler is assigned to , but also runs if you click any nested tag like or : Isn't it…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/bubbling-and-capturing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Jh_Uzqzz_wM"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/watch?v=Jh_Uzqzz_wM"&gt;https://www.youtube.com/watch?v=Jh_Uzqzz_wM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://javascript.info/closure"&gt;&lt;/a&gt;&lt;a href="https://javascript.info/closure"&gt;https://javascript.info/closure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8" title="https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8"&gt;&lt;strong&gt;I never understood JavaScript closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Until someone explained it to me like this …&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/" title="http://javascriptissexy.com/understand-javascript-closures-with-ease/"&gt;&lt;strong&gt;Understand JavaScript Closures With Ease&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Closures allow JavaScript programmers to write better code. Creative, expressive, and concise. We frequently use…&lt;/em&gt;javascriptissexy.com&lt;/a&gt;&lt;a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/understanding-javascript-closures-da6aab330302" title="https://codeburst.io/understanding-javascript-closures-da6aab330302"&gt;&lt;strong&gt;Understanding JavaScript Closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;When you’re first learning JavaScript, terms like “closures” may make the language appear mystical and hard to…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/understanding-javascript-closures-da6aab330302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/understand-closures-in-javascript-d07852fa51e7"&gt;&lt;/a&gt;&lt;a href="https://codeburst.io/understand-closures-in-javascript-d07852fa51e7"&gt;https://codeburst.io/understand-closures-in-javascript-d07852fa51e7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4" title="https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4"&gt;&lt;strong&gt;A simple guide to help you understand closures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Closures in JavaScript are one of those concepts that many struggle to get their heads around. In the following…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach" title="https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach"&gt;&lt;strong&gt;Understanding JavaScript Closures: A Practical Approach&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learning a new language involves a series of steps, whereas its mastery is a product of patience, practice, mistakes…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b" title="https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b"&gt;&lt;strong&gt;Understanding JavaScript: Closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Why learn JavaScript in depth?&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b" title="https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b"&gt;&lt;strong&gt;How to use JavaScript closures with confidence&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Using closures will be a piece of (chocolate) cake&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example" title="https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example"&gt;&lt;strong&gt;JavaScript Closures by Example&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;At some point you may have run into a problem when executing functions from within a for loop. The first time it…&lt;/em&gt;howchoo.com&lt;/a&gt;&lt;a href="https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-closures-and-scope-3784c75b9290" title="https://codeburst.io/javascript-closures-and-scope-3784c75b9290"&gt;&lt;strong&gt;JavaScript — Closures and Scope&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Looking at JavaScript today, it can be scary as a beginner. People talk about watching out for all the little quirks or…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-closures-and-scope-3784c75b9290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7" title="https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7"&gt;&lt;strong&gt;Discover the power of closures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Discover Functional JavaScript was named one of the best new Functional Programming books by BookAuthority! A closure…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.likeagirl.io/simplified-javascript-getting-started-with-closures-f40f65317d00" title="https://code.likeagirl.io/simplified-javascript-getting-started-with-closures-f40f65317d00"&gt;&lt;strong&gt;Simplified JavaScript: Getting Started with Closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Eric Elliot, in his Medium article Master the JavaScript Interview: What is a Closure?, explains that when he…&lt;/em&gt;code.likeagirl.io&lt;/a&gt;&lt;a href="https://code.likeagirl.io/simplified-javascript-getting-started-with-closures-f40f65317d00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://reallifejs.com/the-meat/getting-closure/" title="http://reallifejs.com/the-meat/getting-closure/"&gt;&lt;strong&gt;Javascript Closures 101 - Explaining how closures work&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;So, "closures", right? That's a fun one that tends to cause confusion all around. It's pretty much a given that at some…&lt;/em&gt;reallifejs.com&lt;/a&gt;&lt;a href="http://reallifejs.com/the-meat/getting-closure/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9" title="https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9"&gt;&lt;strong&gt;Closure, Currying and IIFE in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;These are some of the concepts of JavaScript where everyone struggle in beginning. Lets try to simplify them bit by…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda" title="https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda"&gt;&lt;strong&gt;Understanding Closures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn How Closures Really Work in JavaScript: hands-on guide&lt;/em&gt;blog.bitsrc.io&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e" title="https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e"&gt;&lt;strong&gt;A basic guide to Closures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Closure is a collection of all variables in scope at the time of function creation. To use closure create a…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/steelvoltage/closures-using-memoization-3597" title="https://dev.to/steelvoltage/closures-using-memoization-3597"&gt;&lt;strong&gt;Closures: Using Memoization&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the core tenets of Functional Programming is that a function should return the same value if given the same…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/steelvoltage/closures-using-memoization-3597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232" title="https://betterprogramming.pub/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232"&gt;&lt;strong&gt;A Brief Introduction to Closures and Lexical Scoping in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“Writing in ECMAScript language without understanding closure is like writing Java without understanding classes”&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/stereobooster/demystify-closures-5g42" title="https://dev.to/stereobooster/demystify-closures-5g42"&gt;&lt;strong&gt;Demystify Closures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In the previous post we implemented functions, but not about closures. Let's fix this. Without closures following code…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/stereobooster/demystify-closures-5g42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj" title="https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj"&gt;&lt;strong&gt;Scope - JavaScript Concepts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This is part of a series where I try to explain through each of 33 JS Concepts. Originally written on my blog with…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d" title="https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d"&gt;&lt;strong&gt;Understanding Closures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;When you declare a function inside another function, a closure is the new environment created by combining the inner…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://whatthefuck.is/closure" title="https://whatthefuck.is/closure"&gt;&lt;strong&gt;What the fuck is a closure? ・ Dan's JavaScript Glossary&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Closures are confusing because they are an "invisible" concept. When you use an object, a variable, or a function, you…&lt;/em&gt;whatthefuck.is&lt;/a&gt;&lt;a href="https://whatthefuck.is/closure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/brandonleboeuf/closure-in-javascript-49n7" title="https://dev.to/brandonleboeuf/closure-in-javascript-49n7"&gt;&lt;strong&gt;Closures in JavaScript can...&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I gain more understanding of a topic when I get to talk/write about it... much to my wife's horror as she has zero…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/brandonleboeuf/closure-in-javascript-49n7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1JsJx1x35c0"&gt;&lt;/a&gt;&lt;a href="https://www.youtube.com/watch?v=1JsJx1x35c0"&gt;https://www.youtube.com/watch?v=1JsJx1x35c0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eloquentjavascript.net/05_higher_order.html" title="https://eloquentjavascript.net/05_higher_order.html"&gt;&lt;strong&gt;Higher-Order Functions :: Eloquent JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Tzu-li and Tzu-ssu were boasting about the size of their latest programs. 'Two-hundred thousand lines,' said Tzu-li…&lt;/em&gt;eloquentjavascript.net&lt;/a&gt;&lt;a href="https://eloquentjavascript.net/05_higher_order.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/higher-order-functions-javascript/" title="https://www.sitepoint.com/higher-order-functions-javascript/"&gt;&lt;strong&gt;Higher-Order Functions in JavaScript - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Continuing his look at functional programming in JavaScript, M. David Green examines higher-order functions and how…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/higher-order-functions-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528" title="https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528"&gt;&lt;strong&gt;Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Higher order functions can help you to step up your JavaScript game by making your code more declarative. That is…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a" title="https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a"&gt;&lt;strong&gt;First-class and Higher Order Functions: Effective Functional JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functions: the killer JavaScript feature we never talk about.&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.lullabot.com/articles/higher-order-functions-in-javascript" title="https://www.lullabot.com/articles/higher-order-functions-in-javascript"&gt;&lt;strong&gt;Higher Order Functions in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Higher-order functions can be intimidating at first, but they're not that hard to learn. A higher-order function is…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.lullabot.com"&gt;www.lullabot.com&lt;/a&gt;&lt;a href="https://www.lullabot.com/articles/higher-order-functions-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javascriptissexy.com/tag/higher-order-functions/" title="http://javascriptissexy.com/tag/higher-order-functions/"&gt;&lt;strong&gt;Higher-order Functions - JavaScript Is Sexy&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In JavaScript, functions are first-class objects; that is, functions are of the type Object and they can be used in a…&lt;/em&gt;javascriptissexy.com&lt;/a&gt;&lt;a href="http://javascriptissexy.com/tag/higher-order-functions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/" title="https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/"&gt;&lt;strong&gt;Fun With Higher Order Functions In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is often referred to as a language with functional programming capabilities because of it's "higher order…&lt;/em&gt;derickbailey.com&lt;/a&gt;&lt;a href="https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pedroapfilho/high-order-functions" title="https://github.com/pedroapfilho/high-order-functions"&gt;&lt;strong&gt;pedroapfilho/array-methods&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Just a reminder on how to use array methods. Contribute to pedroapfilho/array-methods development by creating an…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/pedroapfilho/high-order-functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad" title="https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad"&gt;&lt;strong&gt;Understanding Higher-Order Functions in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn What Higher-Order Functions are and how to use them in JavaScript&lt;/em&gt;blog.bitsrc.io&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb" title="https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb"&gt;&lt;strong&gt;Higher Order Functions - A pragmatic approach&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Its a common saying that functions are the bread and butter of programming, and the basic unit for building reusable…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f" title="https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f"&gt;&lt;strong&gt;Recursion in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I’m just gonna get this out of the way right up front, because people get really angry otherwise:&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03" title="https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03"&gt;&lt;strong&gt;Understanding Recursion in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the many things that JavaScript has going for it is the ability to recursively call functions. This feature is…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea" title="https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea"&gt;&lt;strong&gt;Learn and Understand Recursion in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I’ll walk you through two popular JS recursion examples in 10 minutes so you can finally understand how recursion works…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/recursion-functional-javascript/" title="https://www.sitepoint.com/recursion-functional-javascript/"&gt;&lt;strong&gt;Recursion in Functional JavaScript - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;M. David Green demonstrates the powerful, but dizzying concept of recursion by refactoring normal for and while loops…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/recursion-functional-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/programming-with-js-recursion-31371e2bf808" title="https://hackernoon.com/programming-with-js-recursion-31371e2bf808"&gt;&lt;strong&gt;Programming with JS: Recursion&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Understanding data structures, algorithms and basic programming concepts is essential for one to become a better…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/programming-with-js-recursion-31371e2bf808"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/simov/anonymous-recursion-in-javascript" title="https://dev.to/simov/anonymous-recursion-in-javascript"&gt;&lt;strong&gt;Anonymous Recursion in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Yes, there is such thing, and I thought it would be an interesting example to share. It features: closures…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/simov/anonymous-recursion-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/" title="http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/"&gt;&lt;strong&gt;Recursion, iteration and tail calls in JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you've been on the business for some time, you have, most likely, come across the definition of recursion, for which…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.jstips.co"&gt;www.jstips.co&lt;/a&gt;&lt;a href="http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b" title="https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b"&gt;&lt;strong&gt;Intro to Recursion&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Recursion can be a difficult concept to wrap your head around, but its definition is rather simple: recursion is when a…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.datadriveninvestor.com/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3" title="https://medium.datadriveninvestor.com/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3"&gt;&lt;strong&gt;Accio Recursion!: Your New Favorite JavaScript Spell&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The spell “Accio” allows a witch or wizard to summon something to them. Casting Accio is just like accessing a value in…&lt;/em&gt;medium.datadriveninvestor.com&lt;/a&gt;&lt;a href="https://medium.datadriveninvestor.com/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m" title="https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m"&gt;&lt;strong&gt;Recursion Explained (with Examples)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;"To understand recursion, one must first understand recursion" - Unknown Recursion is a method of solving problems…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"&gt;&lt;strong&gt;Generator - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This object cannot be instantiated directly. Instead, a Generator instance can be returned from a generator function…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hacks.mozilla.org/2015/06/es6-in-depth-collections/" title="https://hacks.mozilla.org/2015/06/es6-in-depth-collections/"&gt;&lt;strong&gt;ES6 In Depth: Collections - Mozilla Hacks - the Web developer blog&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ES6 In Depth is a series on new features being added to the JavaScript programming language in the 6th Edition of the…&lt;/em&gt;hacks.mozilla.org&lt;/a&gt;&lt;a href="https://hacks.mozilla.org/2015/06/es6-in-depth-collections/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/" title="https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/"&gt;&lt;strong&gt;ES6 Collections: Using Map, Set, WeakMap, WeakSet - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Most major programming languages have several types of data collections. Python has lists, tuples, and dictionaries…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alligator.io/js/maps-introduction/" title="https://alligator.io/js/maps-introduction/"&gt;&lt;strong&gt;Introduction to Maps in JavaScript | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;While this tutorial has content that we believe is of great benefit to our community, we have not yet tested or edited…&lt;/em&gt;alligator.io&lt;/a&gt;&lt;a href="https://alligator.io/js/maps-introduction/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/map-set-weakmap-weakset" title="https://javascript.info/map-set-weakmap-weakset"&gt;&lt;strong&gt;Map and Set&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Till now, we've learned about the following complex data structures: Objects are used for storing keyed collections…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/map-set-weakmap-weakset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk" title="https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk"&gt;&lt;strong&gt;Maps in ES6 - A Quick Guide&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Maps and Sets often get lumped together in articles. They're both new ES6 collection types with similar interfaces but…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/front-end-weekly/es6-set-vs-array-what-and-when-efc055655e1a" title="https://medium.com/front-end-weekly/es6-set-vs-array-what-and-when-efc055655e1a"&gt;&lt;strong&gt;ES6 — Set vs Array — What and when?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What is Set and what is Array?&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/front-end-weekly/es6-set-vs-array-what-and-when-efc055655e1a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/front-end-weekly/es6-map-vs-object-what-and-when-b80621932373" title="https://medium.com/front-end-weekly/es6-map-vs-object-what-and-when-b80621932373"&gt;&lt;strong&gt;ES6 — Map vs Object — What and when?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;You may wonder — why Map vs Object but not Map vs Array, or Object vs Set? Well, you can also compare between any of…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/front-end-weekly/es6-map-vs-object-what-and-when-b80621932373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.deadcoderising.com/es6-working-with-sets-in-javascript/" title="http://www.deadcoderising.com/es6-working-with-sets-in-javascript/"&gt;&lt;strong&gt;ES6: Working with Sets in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this post we're continuing to look at features introduced in ES6. Amongst all the cool things happening in ES6, we…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.deadcoderising.com"&gt;www.deadcoderising.com&lt;/a&gt;&lt;a href="http://www.deadcoderising.com/es6-working-with-sets-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b" title="https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b"&gt;&lt;strong&gt;Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The internet is a great place to find information, but there is one teeny-tiny problem. You are on a boat in the middle…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6" title="https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6"&gt;&lt;strong&gt;How to create an array of unique values in JavaScript using Sets&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Sorry for the verbose title - sometimes things can be explained better with a code example. Imagine you have a…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e" title="https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e"&gt;&lt;strong&gt;What You Should Know About ES6 Maps&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript ES6 introduces a new data structure, called maps. Maps are designed as an alternative to using Object…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ponyfoo.com/articles/es6-maps-in-depth" title="https://ponyfoo.com/articles/es6-maps-in-depth"&gt;&lt;strong&gt;ES6 Maps in Depth&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A very common abuse case of JavaScript objects is hash-maps, where we map string keys to arbitrary values.&lt;/em&gt;ponyfoo.com&lt;/a&gt;&lt;a href="https://ponyfoo.com/articles/es6-maps-in-depth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e" title="https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e"&gt;&lt;strong&gt;What are JavaScript Generators and how to use them&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this article, we’re going to take a look at the generators that were introduced in ECMAScript 6. We’ll see what it…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5" title="https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5"&gt;&lt;strong&gt;Understanding Generators in ES6 JavaScript with Examples&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ES6 introduced a new way of working with functions and iterators in the form of Generators (or generator functions). A…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://davidwalsh.name/es6-generators" title="https://davidwalsh.name/es6-generators"&gt;&lt;strong&gt;The Basics Of ES6 Generators&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the most exciting new features coming in JavaScript ES6 is a new breed of function, called a generator. The name…&lt;/em&gt;davidwalsh.name&lt;/a&gt;&lt;a href="https://davidwalsh.name/es6-generators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224" title="https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224"&gt;&lt;strong&gt;An Introduction to JavaScript Generators&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the fundamentals of JavaScript is that it is single-threaded, meaning that two pieces of code cannot run at the…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;&lt;strong&gt;Promise - JavaScript | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/javascript-promises-for-dummies" title="https://scotch.io/tutorials/javascript-promises-for-dummies"&gt;&lt;strong&gt;Understanding JavaScript Promises | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Javascript Promises can be challenging to understand. Therefore, I would like to write down the way I understand…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/javascript-promises-for-dummies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1" title="https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1"&gt;&lt;strong&gt;Understanding Promises in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;An in-depth look at creating and handling Promises&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261" title="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261"&gt;&lt;strong&gt;Master the JavaScript Interview: What is a Promise?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“Master the JavaScript Interview” is a series of posts designed to prepare candidates for common questions they are…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/overview-javascript-promises/" title="https://www.sitepoint.com/overview-javascript-promises/"&gt;&lt;strong&gt;An Overview of JavaScript Promises - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article explores JavaScript's new Promises API, showing how you can leverage promises in your JavaScript…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/overview-javascript-promises/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de" title="https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de"&gt;&lt;strong&gt;How to use Promises in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Promises in JavaScript are a way to handle async calls. Before Promises were introduced in JavaScript ES6, async calls…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51" title="https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51"&gt;&lt;strong&gt;Implementing Promises In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The thing I love most about programming is the aha! moment when you start to fully understand a concept. Even though it…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138" title="https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138"&gt;&lt;strong&gt;JavaScript: Promises explained with simple real life analogies&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Talking about promises in layman terms&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://exploringjs.com/es6/ch_promises.html" title="http://exploringjs.com/es6/ch_promises.html"&gt;&lt;strong&gt;25. Promises for asynchronous programming&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This chapter is an introduction to asynchronous programming via Promises in general and the ECMAScript 6 Promise API in…&lt;/em&gt;exploringjs.com&lt;/a&gt;&lt;a href="http://exploringjs.com/es6/ch_promises.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/" title="https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/"&gt;&lt;strong&gt;JavaScript Promises Explained By Gambling At A Casino&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;We all love the asynchronous capabilities of JavaScript. In fact, we love them so much that sometimes, we overindulge…&lt;/em&gt;blog.codeanalogies.com&lt;/a&gt;&lt;a href="https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918" title="https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918"&gt;&lt;strong&gt;ES6 Promises: Patterns and Anti-Patterns&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;When I first got started with NodeJS a few years ago, I was mortified by what is now affectionately known as “callback…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a" title="https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a"&gt;&lt;strong&gt;A Simple Guide to ES6 Promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The woods are lovely, dark and deep. But I have promises to keep, and miles to go before I sleep. — Robert Frost&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/the-es6-promises-87a979ab27e4" title="https://codeburst.io/the-es6-promises-87a979ab27e4"&gt;&lt;strong&gt;The ES6 Promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A very helpful feature in ES6&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/the-es6-promises-87a979ab27e4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ponyfoo.com/articles/es6-promises-in-depth" title="https://ponyfoo.com/articles/es6-promises-in-depth"&gt;&lt;strong&gt;ES6 Promises in Depth&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Promises are a very involved paradigm, so we'll take it slow. Here's a table of contents with the topics we'll cover in…&lt;/em&gt;ponyfoo.com&lt;/a&gt;&lt;a href="https://ponyfoo.com/articles/es6-promises-in-depth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3" title="https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3"&gt;&lt;strong&gt;Javascript Promises: An In-Depth Approach&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“Write down the syntax for promises on this sheet of paper”, is enough to give nightmares to a lot of junior and even…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8" title="https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8"&gt;&lt;strong&gt;How to Write a JavaScript Promise&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What is a promise?&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/swlh/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c" title="https://medium.com/swlh/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c"&gt;&lt;strong&gt;A Coding Writer’s Guide: An Introduction To ES6 Promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Welcome back to the ‘A Coding Writer’s Guide’ series! If you have been keeping up with this series, you’d know that I…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/swlh/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/itnext/reverse-engineering-understand-promises-1jfc" title="https://dev.to/itnext/reverse-engineering-understand-promises-1jfc"&gt;&lt;strong&gt;Reverse engineering - Understanding Promises in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;We will reverse engineer Promises in JavaScript together with some 90s nostalgia. Tagged with showdev, tutorial…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/itnext/reverse-engineering-understand-promises-1jfc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/zellwk/converting-callbacks-to-promises-nhn" title="https://dev.to/zellwk/converting-callbacks-to-promises-nhn"&gt;&lt;strong&gt;Converting callbacks to promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;It's easier to work with Promises (or Async/await) compared to callbacks. This is especially true when you work in…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/zellwk/converting-callbacks-to-promises-nhn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa" title="https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa"&gt;&lt;strong&gt;JavaScript Promises: Zero To Hero Plus Cheat Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;It’s time, friend. Native JavaScript promises explained how I wish they were explained to me — plus a handy cheat…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/boywithsilverwings/promises-javascript-concepts-293c" title="https://dev.to/boywithsilverwings/promises-javascript-concepts-293c"&gt;&lt;strong&gt;Promises - JavaScript concepts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This is part of a series where I try to explain through each of 33 JS Concepts. This part corresponds to Promises…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/boywithsilverwings/promises-javascript-concepts-293c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/iggredible/javascript-promise-101-3idl" title="https://dev.to/iggredible/javascript-promise-101-3idl"&gt;&lt;strong&gt;Javascript Promise 101&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Knowing how Promise works in javascript will boost your development skill exponentially. Here I will share: I promise…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/iggredible/javascript-promise-101-3idl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/sunnysingh/simplify-javascript-promises-4djb" title="https://dev.to/sunnysingh/simplify-javascript-promises-4djb"&gt;&lt;strong&gt;Simplify JavaScript Promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I love promises. Not from people, but from JavaScript. Tweet Quote I love promises. Not from people, but from…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/sunnysingh/simplify-javascript-promises-4djb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/madhash/the-low-down-on-promises-af4a96bbb95f" title="https://medium.com/madhash/the-low-down-on-promises-af4a96bbb95f"&gt;&lt;strong&gt;The Lowdown on Promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A quick and concise guide on how Promises work in JavaScript&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/madhash/the-low-down-on-promises-af4a96bbb95f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke" title="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke"&gt;&lt;strong&gt;⭐️🎀 JavaScript Visualized: Promises &amp;amp; Async/Await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Ever had to deal with JS code that just... didn't run the way you expected it to? Maybe it seemed like functions got…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/peterklingelhofer/promises-in-javascript-3h5k" title="https://dev.to/peterklingelhofer/promises-in-javascript-3h5k"&gt;&lt;strong&gt;Promises in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Callbacks are functions that run after something happens or something completes. If you have to make an asynchronous…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/peterklingelhofer/promises-in-javascript-3h5k"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/somedood/best-practices-for-es6-promises-36da" title="https://dev.to/somedood/best-practices-for-es6-promises-36da"&gt;&lt;strong&gt;Best Practices for ES6 Promises&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ES6 promises are great! Yet... they are still quite painful to deal with. In this article, I share the best practices I…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/somedood/best-practices-for-es6-promises-36da"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/async-await" title="https://javascript.info/async-await"&gt;&lt;strong&gt;Async/await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;There's a special syntax to work with promises in a more comfortable fashion, called "async/await". It's surprisingly…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/async-await"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eloquentjavascript.net/11_async.html" title="https://eloquentjavascript.net/11_async.html"&gt;&lt;strong&gt;Asynchronous Programming :: Eloquent JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Who can wait quietly while the mud settles?Who can remain still until the moment of action? Laozi, Tao Te Ching The…&lt;/em&gt;eloquentjavascript.net&lt;/a&gt;&lt;a href="https://eloquentjavascript.net/11_async.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://exploringjs.com/es6/ch_async.html" title="http://exploringjs.com/es6/ch_async.html"&gt;&lt;strong&gt;24. Asynchronous programming (background)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This chapter explains foundations of asynchronous programming in JavaScript. It provides background knowledge for the…&lt;/em&gt;exploringjs.com&lt;/a&gt;&lt;a href="http://exploringjs.com/es6/ch_async.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c" title="https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c"&gt;&lt;strong&gt;Understanding async-await in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Rules of thumb and examples for when and how to use async and await&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alligator.io/js/async-functions/" title="https://alligator.io/js/async-functions/"&gt;&lt;strong&gt;Exploring Async/Await Functions in JavaScript | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Promises give us an easier way to deal with asynchrony in our code in a sequential manner. Considering that our brains…&lt;/em&gt;alligator.io&lt;/a&gt;&lt;a href="https://alligator.io/js/async-functions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/tutorials/asynchronous-javascript-using-async-await" title="https://scotch.io/tutorials/asynchronous-javascript-using-async-await"&gt;&lt;strong&gt;Asynchronous Javascript using Async - Await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Async/await is a relatively new way to write asynchronous code in Javascript. Before we used callbacks and promises…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/tutorials/asynchronous-javascript-using-async-await"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flaviocopes.com/javascript-async-await/" title="https://flaviocopes.com/javascript-async-await/"&gt;&lt;strong&gt;Modern Asynchronous JavaScript with Async and Await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript evolved in a very short time from callbacks to promises (ES2015), and since ES2017 asynchronous JavaScript…&lt;/em&gt;flaviocopes.com&lt;/a&gt;&lt;a href="https://flaviocopes.com/javascript-async-await/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial" title="https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial"&gt;&lt;strong&gt;Asynchronous JavaScript: From Callback Hell to Async and Await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the keys to writing a successful web application is being able to make dozens of AJAX calls per page. This is a…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.toptal.com"&gt;www.toptal.com&lt;/a&gt;&lt;a href="https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a" title="https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a"&gt;&lt;strong&gt;Javascript — ES8 Introducing &lt;code&gt;async/await&lt;/code&gt; Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;To gain some perspective on why folks are so excited about the ES8 async/await functions, you have to be familiar with…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c" title="https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c"&gt;&lt;strong&gt;How to escape async/await hell&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;async/await freed us from callback hell, but people have started abusing it — leading to the birth of async/await hell.&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ponyfoo.com/articles/understanding-javascript-async-await" title="https://ponyfoo.com/articles/understanding-javascript-async-await"&gt;&lt;strong&gt;Understanding JavaScript's async await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's suppose we had code like the following. Here I'm wrapping an HTTP request in a Promise. The promise fulfills with…&lt;/em&gt;ponyfoo.com&lt;/a&gt;&lt;a href="https://ponyfoo.com/articles/understanding-javascript-async-await"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techbrij.com/javascript-async-await-parallel-sequence" title="https://techbrij.com/javascript-async-await-parallel-sequence"&gt;&lt;strong&gt;JavaScript Async/Await: Serial, Parallel and Complex Flow - TechBrij&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you have experience on ASP.NET MVC then probably you are familiar with async/await keywords in C#. The same thing is…&lt;/em&gt;techbrij.com&lt;/a&gt;&lt;a href="https://techbrij.com/javascript-async-await-parallel-sequence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.pusher.com/promises-async-await/" title="https://blog.pusher.com/promises-async-await/"&gt;&lt;strong&gt;From JavaScript Promises to Async/Await: why bother?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this tutorial, we will cover why we need async/await when we could achieve the same fit with JavaScript Promises, to…&lt;/em&gt;blog.pusher.com&lt;/a&gt;&lt;a href="https://blog.pusher.com/promises-async-await/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/flow-control-callbacks-promises-async-await/" title="https://www.sitepoint.com/flow-control-callbacks-promises-async-await/"&gt;&lt;strong&gt;Flow Control in Modern JS: Callbacks to Promises to Async/Await - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript is regularly claimed to be asynchronous. What does that mean? How does it affect development? How has the…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/flow-control-callbacks-promises-async-await/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba" title="https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba"&gt;&lt;strong&gt;JavaScript: Promises and Why Async/Await Wins the Battle - DZone Performance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Calling the validatePassword() function: The code snippet below shows a full end to end check for validating a password…&lt;/em&gt;dzone.com&lt;/a&gt;&lt;a href="https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda" title="https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda"&gt;&lt;strong&gt;How to Improve Your Asynchronous JavaScript Code With Async and Await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you’ve had the chance to observe modern JavaScript code, there are high chances that you’ve seen the async and await…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6" title="https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6"&gt;&lt;strong&gt;Making Fetches Easy With Async Await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Asynchronous requests are the source of many common and frustrating bugs in otherwise clean code. Because most of…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9" title="https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9"&gt;&lt;strong&gt;7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises (Tutorial)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Async/await was introduced in NodeJS 7.6 and is currently supported in all modern browsers. I believe it has been the…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b" title="https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b"&gt;&lt;strong&gt;Asynchronous Operations in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JavaScript comes from a legacy of peril with asynchronous operations. It began with callbacks to make Ajax calls for…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/joeyhub/async-await-a-slight-design-flaw-2h2j" title="https://dev.to/joeyhub/async-await-a-slight-design-flaw-2h2j"&gt;&lt;strong&gt;Async/await: A slight design flaw.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;My experience with async/await is that it's amazing for simple cases and fulfils expectations. If your use cases are…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/joeyhub/async-await-a-slight-design-flaw-2h2j"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/should-i-use-promises-or-async-await-126ab5c98789" title="https://betterprogramming.pub/should-i-use-promises-or-async-await-126ab5c98789"&gt;&lt;strong&gt;JavaScript: Promises or async-await&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A set of rules for when to use which&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/should-i-use-promises-or-async-await-126ab5c98789"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22" title="https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22"&gt;&lt;strong&gt;Async / Await: From Zero to Hero&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I had absolutely no idea what async / await was and learning it was hard as: There's 27 minutes worth of text to read…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c" title="https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c"&gt;&lt;strong&gt;Data Structures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;For Frontend Software Engineers&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb" title="https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb"&gt;&lt;strong&gt;Algorithms and Data Structures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Algorithms and data structures implemented in JavaScript with explanations and links to further readings and YouTube…&lt;/em&gt;itnext.io&lt;/a&gt;&lt;a href="https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays" title="https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays"&gt;&lt;strong&gt;Data Structures: Objects and Arrays&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Ever seen some data in square brackets and curly brackets in JavaScript? These are Arrays and Objects respectively. //…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/" title="http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/"&gt;&lt;strong&gt;Data structures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The #data-structures series is a collection of posts about reimplemented data structures in JavaScript. If you are not…&lt;/em&gt;blog.benoitvallon.com&lt;/a&gt;&lt;a href="http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d" title="https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d"&gt;&lt;strong&gt;Playing with data structures in Javascript — Stack&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Javascript is evolving each day. With the rapid growth of frameworks and platforms like React, Angular, Vue, NodeJS…&lt;/em&gt;blog.cloudboost.io&lt;/a&gt;&lt;a href="https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9" title="https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9"&gt;&lt;strong&gt;The Little Guide of Queue in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A queue is a simple data structure that allows elements to be inserted from one end, called the rear (also called…&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/barretlee/algorithms" title="https://github.com/barretlee/algorithms"&gt;&lt;strong&gt;barretlee/algorithms&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Detail &amp;amp; Discusion (讨论和细节) All algorithms writing with JavaScript in book ' Algorithms Fourth Edition'. Run…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/barretlee/algorithms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nzakas/computer-science-in-javascript" title="https://github.com/nzakas/computer-science-in-javascript"&gt;&lt;strong&gt;humanwhocodes/computer-science-in-javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Collection of classic computer science paradigms, algorithms, and approaches written in JavaScript. …&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/nzakas/computer-science-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jamiebuilds/itsy-bitsy-data-structures" title="https://github.com/jamiebuilds/itsy-bitsy-data-structures"&gt;&lt;strong&gt;jamiebuilds/itsy-bitsy-data-structures&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Welcome to Itsy Bitsy Data Structures! In here are super simplified examples of many of the common data structures…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/jamiebuilds/itsy-bitsy-data-structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/miku86/series/3259" title="https://dev.to/miku86/series/3259"&gt;&lt;strong&gt;About DEV - DEV Community&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;DEV is a community of software developers getting together to help one another out. The software industry relies on…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/miku86/series/3259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/data-structures-understanding-graphs-82509d35e6b5" title="https://javascript.plainenglish.io/data-structures-understanding-graphs-82509d35e6b5"&gt;&lt;strong&gt;Data Structures: Understanding Graphs&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What is a graph? Graphs are used to represents relationships and hierarchies and are composed of nodes and edges.&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/data-structures-understanding-graphs-82509d35e6b5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61" title="https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61"&gt;&lt;strong&gt;Data Structures Two Ways: Linked List (Pt 1)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I work primarily with JavaScript, but the place I work is using Java on the backend. Always being fascinated with…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60" title="https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60"&gt;&lt;strong&gt;Data Structures Two Ways: Linked List (Pt2)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you are new- well hello! check out part one if you like to start at the beginning or just jump straight in Right on…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn" title="https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn"&gt;&lt;strong&gt;Graph Data Structures Explained in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In this post, we are going to explore non-linear data structures like graphs. Also, we'll cover the central concepts…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b" title="https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b"&gt;&lt;strong&gt;Big O Notation in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Get ready for your tech job interview&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b" title="https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b"&gt;&lt;strong&gt;Time Complexity/Big O Notation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Scaling Algorithms Instead of Applications&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051" title="https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051"&gt;&lt;strong&gt;Big O in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Like many new developers before me, Big O went straight over my head the first time I heard about it. It was a topic…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html"&gt;&lt;/a&gt;&lt;a href="http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html"&gt;http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jenniferbland.com/time-complexity-analysis-in-javascript/" title="https://www.jenniferbland.com/time-complexity-analysis-in-javascript/"&gt;&lt;strong&gt;Time Complexity Analysis in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;An algorithm is a self-contained step-by-step set of instructions to solve a problem. It takes time for these steps to…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.jenniferbland.com"&gt;www.jenniferbland.com&lt;/a&gt;&lt;a href="https://www.jenniferbland.com/time-complexity-analysis-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c" title="https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c"&gt;&lt;strong&gt;Algorithms in plain English: time complexity and Big-O notation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Every good developer has time on their mind. They want to give their users more of it, so they can do all those things…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o" title="https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o"&gt;&lt;strong&gt;An Introduction to Big O Notation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Big O notation is a big topic, and its universal importance stems from the fact that it describes the efficiency of…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Crizstian/data-structure-and-algorithms-with-ES6" title="https://github.com/Crizstian/data-structure-and-algorithms-with-ES6"&gt;&lt;strong&gt;Crizstian/data-structure-and-algorithms-with-ES6&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Num Type Exercises Description 10.- Graph Data Structure 2 A graph consists of a set of vertices and a set of edges. A…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/Crizstian/data-structure-and-algorithms-with-ES6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms" title="https://github.com/trekhleb/javascript-algorithms"&gt;&lt;strong&gt;trekhleb/javascript-algorithms&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This repository contains JavaScript based examples of many popular algorithms and data structures. Each algorithm and…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.thatjsdude.com/interview/js1.html" title="http://www.thatjsdude.com/interview/js1.html"&gt;&lt;strong&gt;JS: Algorithm&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;More Questions CSS Interview Questions , HTML Interview Questions if you are little more comfortable or claim to be…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.thatjsdude.com"&gt;www.thatjsdude.com&lt;/a&gt;&lt;a href="http://www.thatjsdude.com/interview/js1.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038" title="https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038"&gt;&lt;strong&gt;Algorithms in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;40 Problems, Solutions, and Explanations&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158" title="https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158"&gt;&lt;strong&gt;JavaScript Objects, Square Brackets and Algorithms&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the most powerful aspects of JavaScript is being able to dynamically refer to properties of objects. In this…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/felipernb/algorithms.js" title="https://github.com/felipernb/algorithms.js"&gt;&lt;strong&gt;felipernb/algorithms.js&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Classic algorithms and data structures implemented in JavaScript, you know... FOR SCIENCE.&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/felipernb/algorithms.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yangshun/lago" title="https://github.com/yangshun/lago"&gt;&lt;strong&gt;yangshun/lago&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;📕 Data Structures and Algorithms library in TypeScript - yangshun/lago&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/yangshun/lago"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/idosela/algorithms-in-javascript" title="https://github.com/idosela/algorithms-in-javascript"&gt;&lt;strong&gt;idosela/algorithms-in-javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Collection of computer science algorithms and data structures written in JavaScript. Run the sort performence test…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/idosela/algorithms-in-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3" title="https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3"&gt;&lt;strong&gt;Algorithms and Data Structures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Hello Readers! I've recently launched JavaScript Algorithms and Data Structures repository on GitHub with a collection…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance" title="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance"&gt;&lt;strong&gt;Inheritance in JavaScript - Learn web development | MDN&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article has covered the remainder of the core OOJS theory and syntax that we think you should know now. At this…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/class-inheritance" title="https://javascript.info/class-inheritance"&gt;&lt;strong&gt;Class inheritance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Class inheritance is a way for one class to extend another class. So we can create new functionality on top of the…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/class-inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@happymishra66/inheritance-in-javascript-21d2b82ffa6f" title="https://medium.com/@happymishra66/inheritance-in-javascript-21d2b82ffa6f"&gt;&lt;strong&gt;Inheritance in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Detailed walk thorough of inheritance in JavaScript&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@happymishra66/inheritance-in-javascript-21d2b82ffa6f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/simple-inheritance-javascript/"&gt;&lt;/a&gt;&lt;a href="https://www.sitepoint.com/simple-inheritance-javascript/"&gt;https://www.sitepoint.com/simple-inheritance-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/javascript-inheritance-25fe61ab9f85" title="https://codeburst.io/javascript-inheritance-25fe61ab9f85"&gt;&lt;strong&gt;JavaScript — Inheritance, delegation patterns and Object linking&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn about inheritance in JavaScript (prototypal inheritance), behavior/object delegation pattern and objects linked…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/javascript-inheritance-25fe61ab9f85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/" title="https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/"&gt;&lt;strong&gt;Object Oriented JavaScript: Polymorphism with examples&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Again this is not the advance topic of JavaScript but it relies under Object Oriented JavaScript &amp;amp; polymorphism is one…&lt;/em&gt;blog.knoldus.com&lt;/a&gt;&lt;a href="https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/yld-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2" title="https://medium.com/yld-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2"&gt;&lt;strong&gt;Program Like Proteus — A beginner’s guide to polymorphism in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
medium.com&lt;/a&gt;&lt;a href="https://medium.com/yld-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/" title="https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/"&gt;&lt;strong&gt;Object-oriented JavaScript: A Deep Dive into ES6 Classes - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Often we need to represent an idea or concept in our programs - maybe a car engine, a computer file, a router, or a…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" title="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;&lt;strong&gt;Learning JavaScript Design Patterns&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;An open-source book on JavaScript Design Patterns&lt;/em&gt;addyosmani.com&lt;/a&gt;&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know" title="https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know"&gt;&lt;strong&gt;JavaScript Design Patterns | DigitalOcean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;There are many times when one part of the application changes, other parts needs to be updated. In AngularJS, if the…&lt;/em&gt;scotch.io&lt;/a&gt;&lt;a href="https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/javascript-design-patterns-25f0faaaa15" title="https://betterprogramming.pub/javascript-design-patterns-25f0faaaa15"&gt;&lt;strong&gt;JavaScript Design Patterns&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The ultimate guide to the most useful design patterns&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/javascript-design-patterns-25f0faaaa15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/front-end-weekly/javascript-design-patterns-ed9d4c144c81" title="https://medium.com/front-end-weekly/javascript-design-patterns-ed9d4c144c81"&gt;&lt;strong&gt;JavaScript Design Patterns&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Constructor Pattern&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/front-end-weekly/javascript-design-patterns-ed9d4c144c81"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seesparkbox.com/foundry/javascript_design_patterns" title="https://seesparkbox.com/foundry/javascript_design_patterns"&gt;&lt;strong&gt;Javascript Design Patterns: What They Are &amp;amp; How To Use Them&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Developers often encounter coding problems in JavaScript that can be solved by using well-established design patterns…&lt;/em&gt;seesparkbox.com&lt;/a&gt;&lt;a href="https://seesparkbox.com/foundry/javascript_design_patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd" title="https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd"&gt;&lt;strong&gt;Understanding Design Patterns in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Learn About Various Design Patterns in JavaScript&lt;/em&gt;blog.bitsrc.io&lt;/a&gt;&lt;a href="https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fbeline/Design-Patterns-JS" title="https://github.com/fbeline/Design-Patterns-JS"&gt;&lt;strong&gt;fbeline/design-patterns-JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Here you will find the 23 (GoF) design patterns implemented in JavaScript using both prototype and ES6 classes. You can…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/fbeline/Design-Patterns-JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8" title="https://betterprogramming.pub/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8"&gt;&lt;strong&gt;The Power of the Module Pattern in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Embellish your app with the module pattern&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e" title="https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e"&gt;&lt;strong&gt;Design Patterns for Developers using JavaScript - Part One&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Most developers using JavaScript strives to write code that is readable, maintainable, and reusable because writing…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39" title="https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39"&gt;&lt;strong&gt;Design Patterns for Developers using JavaScript - Part Two&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In the previous article, we had a look at design patterns, its definition, history, and the incorporation into software…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca" title="https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca"&gt;&lt;strong&gt;Design patterns in modern JavaScript development&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Thoughts on effective communication in the design of software projects&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd" title="https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd"&gt;&lt;strong&gt;Understanding Design Patterns: Iterator using Dev.to and Medium social networks!&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;There are 23 classic design patterns, which are described in the original book, Design Patterns: Elements of Reusable…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p" title="https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p"&gt;&lt;strong&gt;JavaScript Design Patterns - Factory Pattern&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Welcome to my new development series where I try my best to explain design patterns by using JavaScript! In software…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/javascript-design-pattern-module-pattern-555737eccecd" title="https://javascript.plainenglish.io/javascript-design-pattern-module-pattern-555737eccecd"&gt;&lt;strong&gt;JavaScript Design Pattern — Module Pattern&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One of the most common patterns in JavaScript&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/javascript-design-pattern-module-pattern-555737eccecd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/design-patterns-null-object-5ee839e37892" title="https://betterprogramming.pub/design-patterns-null-object-5ee839e37892"&gt;&lt;strong&gt;Design Patterns: Null Object&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Avoid conditional complexity using this pattern&lt;/em&gt;betterprogramming.pub&lt;/a&gt;&lt;a href="https://betterprogramming.pub/design-patterns-null-object-5ee839e37892"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/francescoxx/strategy-pattern-5oh" title="https://dev.to/francescoxx/strategy-pattern-5oh"&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;GitHub Link: &lt;a href="https://github.com/FrancescoXX/Design-Patterns-Strategy-Javascript"&gt;https://github.com/FrancescoXX/Design-Patterns-Strategy-Javascript&lt;/a&gt; The Strategy pattern, also called…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/francescoxx/strategy-pattern-5oh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/francescoxx/adapter-pattern-5bjk" title="https://dev.to/francescoxx/adapter-pattern-5bjk"&gt;&lt;strong&gt;Adapter Pattern&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Github link: &lt;a href="https://github.com/FrancescoXX/Design-Pattern-Adapter-Javascript"&gt;https://github.com/FrancescoXX/Design-Pattern-Adapter-Javascript&lt;/a&gt; The Adapter pattern is used to allow a…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/francescoxx/adapter-pattern-5bjk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732" title="https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732"&gt;&lt;strong&gt;The Power of Composite Pattern in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Find me on medium In this post, we will be going over the Composite Design Pattern in JavaScript. In... Tagged with…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bytebodger/in-defense-of-defensive-programming-k45" title="https://dev.to/bytebodger/in-defense-of-defensive-programming-k45"&gt;&lt;strong&gt;In Defense of Defensive Programming&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;NOTE: In this article I reference a validation library that I wrote called allow. It's now in an NPM package that can…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/bytebodger/in-defense-of-defensive-programming-k45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udacity.com/course/javascript-design-patterns--ud989" title="https://www.udacity.com/course/javascript-design-patterns--ud989"&gt;&lt;strong&gt;JavaScript Design Patterns | Udacity Free Courses&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Free Course Organizing Code in a Disorganized World Start Free Course About this Course This course covers methods for…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.udacity.com"&gt;www.udacity.com&lt;/a&gt;&lt;a href="https://www.udacity.com/course/javascript-design-patterns--ud989"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md" title="https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md"&gt;&lt;strong&gt;getify/Functional-Light-JS&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Chapter 2 explored the core nature of JS functions, and laid the foundation for what makes a function an FP function…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj" title="https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj"&gt;&lt;strong&gt;Use function composition in JavaScript | Codementor&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Prerequisite: I use currying in this post, so if you don't know about that, I encourage you to read my previous post…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.codementor.io"&gt;www.codementor.io&lt;/a&gt;&lt;a href="https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400" title="https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400"&gt;&lt;strong&gt;Currying in JavaScript ES6&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Currying can give you a deeper understanding to JavaScript. Let’s see how it can be done with arrow functions!&lt;/em&gt;blog.benestudio.co&lt;/a&gt;&lt;a href="https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b" title="https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b"&gt;&lt;strong&gt;Writing Middleware —Composition and Currying Elegance in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Javascript is an elegant and beautiful language which allows the developers to have the flexibility to move between the…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/hackernoon/javascript-functional-composition-for-every-day-use-22421ef65a10" title="https://medium.com/hackernoon/javascript-functional-composition-for-every-day-use-22421ef65a10"&gt;&lt;strong&gt;Functional JavaScript: Function Composition For Every Day Use.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Function composition has got to be my favorite part of functional programming. I hope to provide you with a good real…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/hackernoon/javascript-functional-composition-for-every-day-use-22421ef65a10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f" title="https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f"&gt;&lt;strong&gt;What I Learned Today 💡 July 2, 2017&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functional Composition: compose() and pipe()&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://busypeoples.github.io/post/functional-composing-javascript/" title="http://busypeoples.github.io/post/functional-composing-javascript/"&gt;&lt;strong&gt;Why The Hipsters Compose Everything: Functional Composing In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Lodash and Underscore are everywhere and still there is this one supper efficient method that actually only those…&lt;/em&gt;busypeoples.github.io&lt;/a&gt;&lt;a href="http://busypeoples.github.io/post/functional-composing-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/" title="https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/"&gt;&lt;strong&gt;A Gentle Introduction to Functional JavaScript: Part 3&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This is part three of a four-part series introducing 'functional' programming in JavaScript. In the last article we saw…&lt;/em&gt;jrsinclair.com&lt;/a&gt;&lt;a href="https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/" title="https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/"&gt;&lt;strong&gt;Curry And Compose (why you should be using something like ramda in your code)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;When it comes to functional programming, the main cornerstone is composability, the ability to create new functions…&lt;/em&gt;jsleao.wordpress.com&lt;/a&gt;&lt;a href="https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vanslaars.io/post/create-pipe-function/" title="https://vanslaars.io/post/create-pipe-function/"&gt;&lt;strong&gt;Function Composition in JavaScript with Pipe&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;December 13, 2016 This post uses ES6 syntax. The same things can be accomplished with ES5, but it would require more…&lt;/em&gt;vanslaars.io&lt;/a&gt;&lt;a href="https://vanslaars.io/post/create-pipe-function/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.telerik.com/featured/practical-functional-javascript-ramda/" title="https://developer.telerik.com/featured/practical-functional-javascript-ramda/"&gt;&lt;strong&gt;Practical Functional Javascript with Ramda - Telerik Blogs&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Article co-authored by: Andrew D'Amelio and Yuri Takhteyev At rangle.io we've been fans of the functional programming…&lt;/em&gt;developer.telerik.com&lt;/a&gt;&lt;a href="https://developer.telerik.com/featured/practical-functional-javascript-ramda/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574" title="https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574"&gt;&lt;strong&gt;The beauty in Partial Application, Currying, and Function Composition.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Story Time&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8" title="https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8"&gt;&lt;strong&gt;Curry or Partial Application?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The Difference Between&lt;br&gt;&lt;br&gt;
Partial Application and Curry&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://benalman.com/news/2012/09/partial-application-in-javascript/" title="http://benalman.com/news/2012/09/partial-application-in-javascript/"&gt;&lt;strong&gt;Partial Application in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Unless you've used another functional programming language such as ML or Haskell, concepts such as partial application…&lt;/em&gt;benalman.com&lt;/a&gt;&lt;a href="http://benalman.com/news/2012/09/partial-application-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/partial-application-of-functions-dbe7d9b80760" title="https://hackernoon.com/partial-application-of-functions-dbe7d9b80760"&gt;&lt;strong&gt;Partial Application of Functions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Providing function with fewer arguments than it expects is called Partial Application of functions.&lt;/em&gt;hackernoon.com&lt;/a&gt;&lt;a href="https://hackernoon.com/partial-application-of-functions-dbe7d9b80760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://towardsdatascience.com/javascript-currying-vs-partial-application-4db5b2442be8" title="https://towardsdatascience.com/javascript-currying-vs-partial-application-4db5b2442be8"&gt;&lt;strong&gt;Javascript- Currying VS Partial Application&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A lot of people get confused in between currying and partial application and many of us do not know what, where and…&lt;/em&gt;towardsdatascience.com&lt;/a&gt;&lt;a href="https://towardsdatascience.com/javascript-currying-vs-partial-application-4db5b2442be8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://raganwald.com/2015/04/01/partial-application.html" title="http://raganwald.com/2015/04/01/partial-application.html"&gt;&lt;strong&gt;Partial Application in ECMAScript 2015&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Some of this material originally appeared in What's the difference between Currying and Partial Application? Here it is…&lt;/em&gt;raganwald.com&lt;/a&gt;&lt;a href="http://raganwald.com/2015/04/01/partial-application.html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://joecortopassi.com/articles/functional-composition-in-javascript/" title="https://joecortopassi.com/articles/functional-composition-in-javascript/"&gt;&lt;strong&gt;Functional Composition in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functional composition is when you take two or more functions, and make one a single function out of them. When you…&lt;/em&gt;joecortopassi.com&lt;/a&gt;&lt;a href="https://joecortopassi.com/articles/functional-composition-in-javascript/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536" title="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536"&gt;&lt;strong&gt;So You Want to be a Functional Programmer (Part 1)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most…&lt;/em&gt;cscalfani.medium.com&lt;/a&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a" title="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a"&gt;&lt;strong&gt;So You Want to be a Functional Programmer (Part 2)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most…&lt;/em&gt;cscalfani.medium.com&lt;/a&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7" title="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7"&gt;&lt;strong&gt;So You Want to be a Functional Programmer (Part 3)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most…&lt;/em&gt;cscalfani.medium.com&lt;/a&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49" title="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49"&gt;&lt;strong&gt;So You Want to be a Functional Programmer (Part 4)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most…&lt;/em&gt;cscalfani.medium.com&lt;/a&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a" title="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a"&gt;&lt;strong&gt;So You Want to be a Functional Programmer (Part 5)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Taking that first step to understanding Functional Programming concepts is the most important and sometimes the most…&lt;/em&gt;cscalfani.medium.com&lt;/a&gt;&lt;a href="https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84" title="https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84"&gt;&lt;strong&gt;An Introduction to the basic principles of Functional Programming&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;After a long time learning and working with object-oriented programming, I took a step back to think about system…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa" title="https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa"&gt;&lt;strong&gt;Concepts of Functional Programming in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;After a long time learning and working with object-oriented programming, I took a step back to think about system…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064" title="https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064"&gt;&lt;strong&gt;An Introduction to Functional Programming Style in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In recent years there has been a tectonic shift happening between traditional programming and Functional Programming…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71" title="https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71"&gt;&lt;strong&gt;A practical guide to writing more functional JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Functional programming is great. With the introduction of React, more and more JavaScript front-end code is being…&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href="https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj" title="https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj"&gt;&lt;strong&gt;A simple explanation of functional pipe in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Sometimes I'm asked why we don't have "dot-chaining" in RxJS anymore, or why RxJS made the switch to use pipe. There…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript" title="https://github.com/ryanmcdermott/clean-code-javascript"&gt;&lt;strong&gt;ryanmcdermott/clean-code-javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Software engineering principles, from Robert C. Martin's book , adapted for JavaScript. This is not a style guide. It's…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/" title="https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/"&gt;&lt;strong&gt;JavaScript Clean Coding Best Practices | @RisingStack&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Writing clean code is what you must know and do in order to call yourself a professional developer. There is no…&lt;/em&gt;blog.risingstack.com&lt;/a&gt;&lt;a href="https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kevin-peters.medium.com/function-parameters-in-javascript-clean-code-4caac109159b" title="https://kevin-peters.medium.com/function-parameters-in-javascript-clean-code-4caac109159b"&gt;&lt;strong&gt;Function parameters in JavaScript — Clean Code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In my time as a web developer I have to deal a lot with JavaScript Code. I love JavaScript, no question asked. But…&lt;/em&gt;kevin-peters.medium.com&lt;/a&gt;&lt;a href="https://kevin-peters.medium.com/function-parameters-in-javascript-clean-code-4caac109159b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeburst.io/keeping-your-code-clean-d30bcffd1a10" title="https://codeburst.io/keeping-your-code-clean-d30bcffd1a10"&gt;&lt;strong&gt;Keeping your code clean&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I settled down in my sit, cranking the solution with my team members. “We must win this” I said, burying myself deep…&lt;/em&gt;codeburst.io&lt;/a&gt;&lt;a href="https://codeburst.io/keeping-your-code-clean-d30bcffd1a10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/modern-javascript-best-practices/" title="https://www.sitepoint.com/modern-javascript-best-practices/"&gt;&lt;strong&gt;Best Practices for Using Modern JavaScript Syntax - SitePoint&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article is featured in our book, Modern JavaScript is evolving quickly to meet the changing needs of new…&lt;/em&gt;&lt;/a&gt;&lt;a href="http://www.sitepoint.com"&gt;www.sitepoint.com&lt;/a&gt;&lt;a href="https://www.sitepoint.com/modern-javascript-best-practices/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cross-js/cross-js" title="https://github.com/cross-js/cross-js"&gt;&lt;strong&gt;cross-js/cross-js&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Adopting CrossJS style means your javascript can work in any environment without being dependent on any core…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/cross-js/cross-js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ganderzz/on-writing-clean-code-57cm" title="https://dev.to/ganderzz/on-writing-clean-code-57cm"&gt;&lt;strong&gt;Writing Clean Code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;We can all agree that writing clean code is important. It makes it easier to work in a team, and even if we're a single…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/ganderzz/on-writing-clean-code-57cm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k" title="https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k"&gt;&lt;strong&gt;Writing Clean Code and The Practice of Programming: Actionable advice for beginners&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;"The purpose of style is to make the code easy to read for yourself and others, and good style is crucial to good…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm" title="https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm"&gt;&lt;strong&gt;Clean code, dirty code, human code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Last week, Dan Abramov posted a very personal and humbling blog post entitled Goodbye, Clean Code. I saw a tweet about…&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4" title="https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4"&gt;&lt;strong&gt;Practical Ways to Write Better JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Solid methods of improving your JS. Tagged with javascript, webdev, beginners, react.&lt;/em&gt;dev.to&lt;/a&gt;&lt;a href="https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;≡&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/633549469528"&gt;July 3, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/absolutely-everything-you-could-need-to-know-about-how-javascript-works-633549469528"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#a-collection-of-my-most-useful-gist-entries" class="anchor"&gt;
  &lt;/a&gt;
  A Collection of my most useful Gist Entries
&lt;/h1&gt;

&lt;p&gt;This list is in no particular order!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#a-collection-of-my-most-useful-gist%C2%A0entries" class="anchor"&gt;
  &lt;/a&gt;
  A Collection of my most useful Gist Entries
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This list is in no particular order!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bgoonz-blog.netlify.app/" title="https://bgoonz-blog.netlify.app/"&gt;&lt;strong&gt;Web-Dev-Hub&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…&lt;/em&gt;bgoonz-blog.netlify.app&lt;/a&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ubuntu-setup" class="anchor"&gt;
  &lt;/a&gt;
  Ubuntu Setup:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#markdown-notes-template" class="anchor"&gt;
  &lt;/a&gt;
  Markdown Notes Template:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#jquery-cheat%C2%A0sheet" class="anchor"&gt;
  &lt;/a&gt;
  Jquery Cheat Sheet:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#useful-bash-commands" class="anchor"&gt;
  &lt;/a&gt;
  Useful Bash Commands:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#python-cheat%C2%A0sheet" class="anchor"&gt;
  &lt;/a&gt;
  Python Cheat Sheet:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#html-cheat%C2%A0sheet" class="anchor"&gt;
  &lt;/a&gt;
  Html Cheat Sheet:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#git-cheat%C2%A0sheet" class="anchor"&gt;
  &lt;/a&gt;
  Git Cheat Sheet:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#deploy-react-app-to%C2%A0heroku" class="anchor"&gt;
  &lt;/a&gt;
  Deploy React App To Heroku:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#bash-aliases" class="anchor"&gt;
  &lt;/a&gt;
  Bash Aliases:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#js-cheat%C2%A0sheet" class="anchor"&gt;
  &lt;/a&gt;
  JS Cheat Sheet:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#css-cheat%C2%A0sheet" class="anchor"&gt;
  &lt;/a&gt;
  CSS Cheat Sheet:
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#if-you-found-this-guide-helpful-feel-free-to-checkout-my-githubgists-where-i-host-similar%C2%A0content" class="anchor"&gt;
  &lt;/a&gt;
  If you found this guide helpful feel free to checkout my github/gists where I host similar content:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/bgoonz"&gt;bgoonz’s gists · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bgoonz" title="https://github.com/bgoonz"&gt;&lt;strong&gt;bgoonz — Overview&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/bgoonz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or Checkout my personal Resource Site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;&lt;/a&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;https://bgoonz-blog.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/f4314f3ba3ab"&gt;March 6, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#a-comprehensive-deep-dive-into-react" class="anchor"&gt;
  &lt;/a&gt;
  A Comprehensive Deep Dive into React
&lt;/h1&gt;

&lt;p&gt;An in-depth look into the world of React.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#react-in-depth-a-comprehensive-guide" class="anchor"&gt;
  &lt;/a&gt;
  React in Depth: A Comprehensive Guide
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#a-deep-dive-into-the-world-of%C2%A0react" class="anchor"&gt;
  &lt;/a&gt;
  A deep dive into the world of React.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nMter0e5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ALnugLVhKbiGfSSHr" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nMter0e5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ALnugLVhKbiGfSSHr" alt="Photo by Ferenc Almasi on Unsplash"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@flowforfrank?utm_source=medium&amp;amp;utm_medium=referral"&gt;Ferenc Almasi&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b" title="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;&lt;strong&gt;ALLOFMYOTHERARTICLES&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#random-things-to%C2%A0remember" class="anchor"&gt;
  &lt;/a&gt;
  Random Things to Remember
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1e39"&gt;Using &lt;code&gt;()&lt;/code&gt; implictly returns components.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a547"&gt;Role of &lt;code&gt;index.js&lt;/code&gt; is to &lt;em&gt;render&lt;/em&gt; your application.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c38f"&gt;The reference to &lt;code&gt;root&lt;/code&gt; comes from a div in the body of your public HTML file.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a364"&gt;State of a component is simply a regular JS Object.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d64b"&gt;Class Components require &lt;code&gt;render()&lt;/code&gt; method to return JSX.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="fa3d"&gt;Functional Components directly return JSX.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4928"&gt;&lt;code&gt;Class&lt;/code&gt; is &lt;code&gt;className&lt;/code&gt; in React.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e51a"&gt;When parsing for an integer just chain &lt;code&gt;Number.parseInt("123")&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="2924"&gt;Use ternary operator if you want to make a conditional inside a fragment.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;{ x === y ? Naisu : Not Naisu; }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="ccda"&gt;Purpose of &lt;code&gt;React.Fragment&lt;/code&gt; is to allow you to create groups of children without adding an extra dom element.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#frontend-history" class="anchor"&gt;
  &lt;/a&gt;
  Front-End History
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="904c"&gt;React makes it easier for you to make front-end elements. A front-end timeline&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="646a"&gt;Some noteworthy front end libraries that have been used in the past few years:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="febf"&gt;2005: Script.aculo.us&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d5ae"&gt;2005: Dojo&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0657"&gt;2006: YUI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c1f9"&gt;2010: Knockout&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e742"&gt;2011: AngularJS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ed7b"&gt;2012: Elm&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="06e4"&gt;2013: React (Considered the standard front-end library)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4ff0"&gt;React manages the creation and updating of DOM nodes in your Web page.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="53cd"&gt;All it does is dynamically render stuff into your DOM.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c393"&gt;What it doesn’t do:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3088"&gt;Ajax&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="54ee"&gt;Services&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5e4a"&gt;Local Storage&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a437"&gt;Provide a CSS framework&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="06e5"&gt;React is unopinionated&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="721c"&gt;Just contains a few rules for developers to follow, and it just works.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e2c0"&gt;JSX : Javascript Extension is a language invented to help write React Applications (looks like a mixture of JS and HTML)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="916b"&gt;Here is an overview of the difference between rendering out vanilla JS to create elements, and JSX:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;fetch("&lt;a href="https://example.com/api/people%22"&gt;https://example.com/api/people"&lt;/a&gt;)&lt;br&gt;
  .then((response) =&amp;gt; response.json())&lt;br&gt;
  .then((people) =&amp;gt; {&lt;br&gt;
    const html = "&lt;/p&gt;
&lt;ul&gt;";
    for (let person of data.people) {
      html += &lt;code&gt;&amp;lt;li&amp;gt;${person.lastName}, ${person.firstName}&amp;lt;/li&amp;gt;&lt;/code&gt;;
    }
    html += "&lt;/ul&gt;";
    document.querySelector("#people-list").innerHTML = html;
  });

&lt;p&gt;function PeopleList(props) {&lt;br&gt;
  return (&lt;br&gt;
    &lt;/p&gt;
&lt;ul&gt;
      $
      {props.people.map((person) =&amp;gt; (
        &lt;li&gt;
          {person.lastName}, {person.firstName}
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  );
}
const peopleListElement = document.querySelector("#people-list");
fetch("&lt;a href="https://example.com/api/people%22"&gt;https://example.com/api/people"&lt;/a&gt;)
  .then((response) =&amp;gt; response.json())
  .then((people) =&amp;gt; {
    const props = { people };
    ReactDOM.render(, peopleListElement);
  });&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="7ea4"&gt;This may seem like a lot of code but when you end up building many components, it becomes nice to put each of those functions/classes into their own files to organize your code. Using tools with React&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="e220"&gt;&lt;code&gt;React DevTools&lt;/code&gt; : New tool in your browser to see ow React is working in the browser&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="9051"&gt;&lt;code&gt;create-react-app&lt;/code&gt; : Extensible command-line tool to help generate standard React applications.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="af96"&gt;&lt;code&gt;Webpack&lt;/code&gt; : In between tool for dealing with the extra build step involved.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nEwqJ2MX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ALHVHf7SPZ1t0UVAj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nEwqJ2MX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ALHVHf7SPZ1t0UVAj"&gt;&lt;/a&gt;-   &lt;span id="e0ad"&gt;HMR : (Hot Module Replacement) When you make changes to your source code the changes are delivered in real-time.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="923a"&gt;React Developers created something called &lt;code&gt;Flux Architecture&lt;/code&gt; to moderate how their web page consumes and modifies data received from back-end API's.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQYA0hFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AwR-lbD4zf45-IHoQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQYA0hFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AwR-lbD4zf45-IHoQ"&gt;&lt;/a&gt;-   &lt;span id="b16e"&gt;Choosing React&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="eefd"&gt;Basically, React is super important to learn and master.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-concepts-and%C2%A0features" class="anchor"&gt;
  &lt;/a&gt;
  React Concepts and Features
&lt;/h3&gt;

&lt;p&gt;There are many benefits to using React over just Vanilla JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="8107"&gt;&lt;code&gt;Modularity&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="15ac"&gt;To avoid the mess of many event listeners and template strings, React gives you the benefit of a lot of modularity.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c1c5"&gt;&lt;code&gt;Easy to start&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="90ce"&gt;No specials tools are needed to use Basic React.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9ec9"&gt;You can start working directly with &lt;code&gt;createElement&lt;/code&gt; method in React.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="dd3c"&gt;&lt;code&gt;Declarative Programming&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d3e6"&gt;React is declarative in nature, utilizing either it’s built-in createElement method or the higher-level language known as JSX.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ba8b"&gt;&lt;code&gt;Reusability&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a3c2"&gt;Create elements that can be re-used over and over. One-flow of data&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="27d2"&gt;React apps are built as a combination of parent and child components.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6da8"&gt;Parents can have one or more child components, all children have parents.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="26d8"&gt;Data is never passed from child to the parent.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="86be"&gt;&lt;code&gt;Virtual DOM&lt;/code&gt; : React provides a Virtual DOM that acts as an agent between the real DOM and the developer to help debug, maintain, and provide general use.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6747"&gt;Due to this usage, React handles web pages much more intelligently; making it one of the speediest Front End Libraries available.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#es6-refresher" class="anchor"&gt;
  &lt;/a&gt;
  ES6 Refresher
&lt;/h3&gt;

&lt;p&gt;Exporting one item per file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="5538"&gt;Use &lt;code&gt;export default&lt;/code&gt; statement in ES6 to export an item. ES6&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;export default class Wallet {&lt;br&gt;
  // ...&lt;br&gt;
}&lt;br&gt;
// sayHello will not be exported&lt;br&gt;
function sayHello() {&lt;br&gt;
  console.log("Hello!");&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CommonJS (Equivalent)&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Wallet {
  // ...
}
// sayHello will not be exported
function sayHello() {
  console.log("Hello!");
}
module.exports = Wallet;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Exporting multiple items per file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="9a6e"&gt;Use just thw &lt;code&gt;export&lt;/code&gt; keyword (without default) to export multiple items per file. ES6 (Better to export them individually like this, rather than bunching them all into an object)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;export class Wallet {&lt;br&gt;
  // ...&lt;br&gt;
}&lt;br&gt;
export function sayHello() {&lt;br&gt;
  console.log("Hello!");&lt;br&gt;
}&lt;br&gt;
export const sayHi = () =&amp;gt; {&lt;br&gt;
  console.log("Hi!");&lt;br&gt;
};&lt;br&gt;
class Wallet {&lt;br&gt;
  // ...&lt;br&gt;
}&lt;br&gt;
function sayHello() {&lt;br&gt;
  console.log("Hello!");&lt;br&gt;
}&lt;br&gt;
const sayHi = () =&amp;gt; {&lt;br&gt;
  console.log("Hi!");&lt;br&gt;
};&lt;br&gt;
export { Wallet, sayHello, sayHi };&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CommonJS (Equivalent)&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Wallet {
  // ...
}
function sayHello() {
  console.log("Hello!");
}
const sayHi = () =&amp;amp;gt; {
  console.log("Hi!");
};
module.exports = {
  Wallet,
  sayHello,
  sayHi,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Importing with ES6 vs CommonJS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8s7_l2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A7EZESKf0XPbncXAY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8s7_l2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A7EZESKf0XPbncXAY"&gt;&lt;/a&gt;-   &lt;span id="18b1"&gt;Import statements in ES6 modules must always be at the top of the file, because all imports must occur before the rest of the file’s code runs. ES6&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Wallet } from "./wallet";
import * as fs from "fs";
const wallet = new Wallet();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;CommonJS&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let { Wallet } = require("./wallet");
const wallet = new Wallet();
let fs = require("fs");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Unnamed default imports&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="75e2"&gt;You can name unnamed items exported with export default any name when you import them.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// exporting&lt;br&gt;
export default class Wallet {&lt;br&gt;
  // ...&lt;br&gt;
}&lt;br&gt;
// importing&lt;br&gt;
import Money from "wallet.js";&lt;br&gt;
const wallet = new Money();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="5042"&gt;Just remember if you use &lt;code&gt;export&lt;/code&gt; instead of &lt;code&gt;export default&lt;/code&gt; then your import is already named and cannot be renamed.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// exporting&lt;br&gt;
export class Wallet {&lt;br&gt;
  // ...&lt;br&gt;
}&lt;br&gt;
// importing&lt;br&gt;
import { Wallet } from "wallet.js";&lt;br&gt;
const wallet = new Wallet();&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aliasing imports&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="3535"&gt;Use as asterisk to import an entire module’s contents.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="3f1c"&gt;Keep in mind you must use an &lt;code&gt;as&lt;/code&gt; keyword to refer to it later.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// export&lt;br&gt;
export function sayHello() {&lt;br&gt;
  console.log("Hello!");&lt;br&gt;
}&lt;br&gt;
export const sayHi = () =&amp;gt; {&lt;br&gt;
  console.log("Hi!");&lt;br&gt;
};&lt;br&gt;
//import&lt;br&gt;
import * as Greetings from "greetings.js";&lt;br&gt;
Greetings.sayHello(); // Hello!&lt;br&gt;
Greetings.sayHi(); // Hi!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="bfbc"&gt;You can also name identically named functions or items from different files.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import { Wallet as W1 } from "./wallet1";&lt;br&gt;
import { Wallet as W2 } from "./wallet2";&lt;br&gt;
const w1 = new W1();&lt;br&gt;
const w2 = new W2();&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Browser support for ES6 Modules&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="69b4"&gt;ES6 Modules can only be used when a JS file is specified as a module. ``&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4f5c"&gt;You can get browser support for ES6 modules by adding module into your script tag.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#jsx-in%C2%A0depth" class="anchor"&gt;
  &lt;/a&gt;
  JSX In Depth
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2a0d"&gt;Remember that JSX is just syntactic sugar for the built in &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1532"&gt;React Library must always be in scope from your JSX code.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="72b2"&gt;Use Dot Notation for JSX Type&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0cbc"&gt;User-Defined Components Must Be Capitalized &lt;code&gt;vs&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="553a"&gt;Cannot use a general expression as the React element type. (&lt;code&gt;Incorrect&lt;/code&gt;)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;function Story(props) {&lt;br&gt;
  // Wrong! JSX type can't be an expression.&lt;br&gt;
    return ;&lt;br&gt;
  };&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;code&gt;Corrected&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Story(props) {
  // Correct! JSX type can be a capitalized variable.
  const SpecificStory = components[props.storyType];
  return ;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Props in JSX&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="e549"&gt;Several ways to specify props in JSX.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="257d"&gt;&lt;code&gt;Javascript Expressions as Props&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="57f8"&gt;&lt;code&gt;String Literals&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="48df"&gt;&lt;code&gt;Props Default to “True”&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="2072"&gt;&lt;code&gt;Spread Attributes&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;function App1() { return ; } function App2() { const props = { firstName: "Ben", lastName: "Hector" }; return ; }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Children in JSX&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="2238"&gt;&lt;code&gt;props.children&lt;/code&gt; : The content between opening and closing tag. JavaScript Expressions as Children&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;function Item(props) {&lt;br&gt;
  return &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;{props.message}&lt;/li&gt;;
}
function TodoList() {
  const todos = ["finish doc", "submit pr", "nag dan to review"];
  return (
    &lt;ul&gt;
      {todos.map((message) =&amp;gt; (
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  ))}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;);&lt;br&gt;
}&lt;/p&gt;
&lt;/ul&gt;

&lt;p&gt;Functions as Children&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="bf0a"&gt;&lt;code&gt;props.children&lt;/code&gt; works like any other prop, meaning it can pass any sort of data.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// Calls the children callback numTimes to produce a repeated component&lt;br&gt;
function Repeat(props) {&lt;br&gt;
  let items = [];&lt;br&gt;
  for (let i = 0; i &amp;lt; props.numTimes; i++) {&lt;br&gt;
    items.push(props.children(i));&lt;br&gt;
  }&lt;br&gt;
  return {items};&lt;br&gt;
}&lt;br&gt;
function ListOfTenThings() {&lt;br&gt;
  return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {(index) =&amp;amp;gt; This is item {index} in the list}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;);&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Booleans, Null, and Undefined Are Ignored&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="7017"&gt;&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;true&lt;/code&gt; are all valid children.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5af2"&gt;They will not render.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="10dc"&gt;You can use these to conditionally render items.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;{showHeader &amp;amp;&amp;amp; }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="fa28"&gt;In this example, the component will only render if &lt;code&gt;showHeader&lt;/code&gt; evals to True.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// Before work-around&lt;/p&gt;

&lt;p&gt;{props.messages.length &amp;amp;&amp;amp;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// After work-around&lt;/p&gt;

&lt;p&gt;{props.messages.length &amp;gt; 0 &amp;amp;&amp;amp;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3701"&gt;Note that certain falsy values such as zero will still be rendered by React, you can work around this by ensuring situations like the above eval. into a boolean.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="9586"&gt;In the times you want booleans to be rendered out, simply convert it into a string first.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;My JavaScript variable is {String(myVariable)}.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#reconciliation" class="anchor"&gt;
  &lt;/a&gt;
  Reconciliation
&lt;/h3&gt;

&lt;p&gt;The Diffing Algorithm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="76c4"&gt;&lt;code&gt;Diffing&lt;/code&gt; : When the state of a component changes React creates a new virtual DOM tree.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9a73"&gt;Elements of Different Types&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d680"&gt;Every time the root elements have different types, React tears down the old tree and builds the new tree from scratch.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="84a6"&gt;DOM Elements Of the Same Type&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="4b94"&gt;When comparing two DOM elements of the same type, React keeps the same underlying DOM node and only updates the changes attributes.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="0a0c"&gt;Component Elements Of The Same Type&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="cf3a"&gt;When components update, instances will remain the same, so that state maintains across renders.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b8ab"&gt;React will only update the props, to match the new element.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="82f3"&gt;Recursing On Children&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="4a59"&gt;React will iterate both lists of children and generate a mutation whenever there’s a difference.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="74a8"&gt;This is why we use &lt;code&gt;keys&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="381c"&gt;Makes it easier for React to match children in the original tree with children in the subsequent tree.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="f1f5"&gt;Tradeoffs&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="e98a"&gt;Important to remember that reconciliation algorithm is an &lt;em&gt;implementation detail&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="7f57"&gt;Re-rendering only to apply the differences following the rules stated in the previous sections.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#typechecking-with-proptypes" class="anchor"&gt;
  &lt;/a&gt;
  Typechecking With PropTypes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="0bc0"&gt;As your application grows, you can use React’s &lt;code&gt;typechecking&lt;/code&gt; to catch bugs.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="638c"&gt;&lt;code&gt;propTypes&lt;/code&gt; is a special property to run typechecking.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e725"&gt;exports range of built in validators to ensure your received data is valid.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="f590"&gt;propTypes is only checked in development mode.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import PropTypes from "prop-types";&lt;br&gt;
class Greeting extends React.Component {&lt;br&gt;
  render() {&lt;br&gt;
    return &lt;/p&gt;
&lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;
  }
}
Greeting.propTypes = {
  name: PropTypes.string,
};&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Requiring Single Child&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="e2db"&gt;Use &lt;code&gt;PropTypes.element&lt;/code&gt; to specify only a single child can be passed to a component as children.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import PropTypes from "prop-types";&lt;br&gt;
class MyComponent extends React.Component {&lt;br&gt;
  render() {&lt;br&gt;
    // This must be exactly one element or it will warn.&lt;br&gt;
    const children = this.props.children;&lt;br&gt;
    return {children};&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
MyComponent.propTypes = {&lt;br&gt;
  children: PropTypes.element.isRequired,&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Default Prop Values&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="7d3d"&gt;Use &lt;code&gt;defaultProps&lt;/code&gt; to assign default values for props.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;class Greeting extends React.Component {&lt;br&gt;
  render() {&lt;br&gt;
    return &lt;/p&gt;
&lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;
  }
}
// Specifies the default values for props:
Greeting.defaultProps = {
  name: "Stranger",
};
// Renders "Hello, Stranger":
ReactDOM.render(, document.getElementById("example"));

&lt;p&gt;class Greeting extends React.Component {&lt;br&gt;
  static defaultProps = {&lt;br&gt;
    name: 'stranger'&lt;br&gt;
  }&lt;br&gt;
  render() {&lt;br&gt;
    return (&lt;br&gt;
      Hello, {this.props.name}&lt;br&gt;
    )&lt;br&gt;
  }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#react-router-introduction" class="anchor"&gt;
  &lt;/a&gt;
  React Router Introduction
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="48a7"&gt;&lt;code&gt;React Router&lt;/code&gt; is the answer for rendering different components for different pages.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="78b3"&gt;A front-end library that allows you to control which components to display using the browser location.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="aa2a"&gt;&lt;code&gt;Client-side Routing&lt;/code&gt; Getting started with routing&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0940"&gt;Install React Router with:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="742a"&gt;npm install — save react-router-dom@⁵.1.2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f07f"&gt;Import &lt;code&gt;Browser Router&lt;/code&gt; from package.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9e4e"&gt;import { BrowserRouter } from “react-router-dom”;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="cb01"&gt;&lt;code&gt;BrowserRouter&lt;/code&gt; is the primary component of the router that wraps your route hierarchy.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="adfa"&gt;Wrap it around components.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0276"&gt;Creates a &lt;code&gt;React Context&lt;/code&gt; that passes routing information down to all its descendant components.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="dd45"&gt;You can also use &lt;code&gt;HashRouter&lt;/code&gt;, where it would generate a hash before the endpoint. Creating frontend routes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="37c2"&gt;React Router helps your app render specific components based on the URL.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="54c4"&gt;The most common component is ``&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="500a"&gt;Wrapped around another component, causing the comp. to only render if the a certain URL is matched.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5a94"&gt;&lt;code&gt;Props&lt;/code&gt; : path, component, exact, and [render]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9f06"&gt;Browser Router can only have a single child component.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="6305"&gt;The Browser Router wraps all routes within a parent div element.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const Root = () =&amp;gt; {&lt;br&gt;
  const users = {&lt;br&gt;
    1: { name: "Andrew" },&lt;br&gt;
    2: { name: "Raymond" },&lt;br&gt;
  };&lt;br&gt;
  return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;h1&amp;gt;Hi, I'm Root!&amp;lt;/h1&amp;gt;

     &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;amp;gt;
     } /&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;);&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="c057"&gt;component&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="2dcc"&gt;Indicates component to render.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="740c"&gt;path&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3030"&gt;Indicates path to render a specific component.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="0741"&gt;exact&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="52cb"&gt;Tells route to not pattern match and only render a certain route exclusively to it’s associated component.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="cb93"&gt;render&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="c702"&gt;Optional prop that takes in a function to be called.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="594b"&gt;Causes extra work for React.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="5320"&gt;Preferred for inline rendering of simple functional components.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="0d3e"&gt;Difference between &lt;code&gt;component&lt;/code&gt; and &lt;code&gt;render&lt;/code&gt; is that component returns new JSX that be re-mounted, but render returns the JSX that will be mounted only once.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="4a08"&gt;// This inline rendering will work, but is unnecessarily slow. &amp;lt;Route path=”/hello” component={() =&amp;gt; &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;gt; // This is the preferred way for inline rendering. &amp;lt;Route path=”/hello” render={() =&amp;gt; &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a2d3"&gt;Also useful if you need to pass in specific props to a component.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="e09f"&gt;// `users` to be passed as a prop: const users = { 1: { name: “Andrew” }, 2: { name: “Raymond” }, }; &amp;lt;Route path=”/users” render={() =&amp;gt; &amp;lt;Users users={users} /&amp;gt;} /&amp;gt;;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Route path params&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="3d09"&gt;Your component’s props can hold information about URL’s parameters.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="52f3"&gt;Will match segments starting at &lt;code&gt;:&lt;/code&gt; to the next &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
/&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="f2b4"&gt;&lt;code&gt;{...props}&lt;/code&gt; spreads out the router's props.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="1edb"&gt;&lt;code&gt;props.match.params&lt;/code&gt; is used to access the match prop's parameters.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b6a9"&gt;Useful keys on the &lt;code&gt;match&lt;/code&gt; object:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="290f"&gt;&lt;code&gt;isExact&lt;/code&gt; : boolean that tells you whether or not the URL exactly matches the path.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="27ea"&gt;&lt;code&gt;url&lt;/code&gt; : the currentURL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b979"&gt;&lt;code&gt;path&lt;/code&gt; : Route path it matched against (w/o wildcards)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="6c59"&gt;&lt;code&gt;params&lt;/code&gt; : Matches for the individual wildcard segments.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#navigation" class="anchor"&gt;
  &lt;/a&gt;
  Navigation
&lt;/h3&gt;

&lt;p&gt;React Router Navigation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="a548"&gt;&lt;code&gt;Link&lt;/code&gt;, &lt;code&gt;NavLink&lt;/code&gt;, &lt;code&gt;Redirect&lt;/code&gt;, &lt;code&gt;history&lt;/code&gt; props of React Router are used to help your user navigate routes. Adding links for navigation&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="643f"&gt;Issues on-click navigation event to a route defined in app.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="949d"&gt;Usage renders an anchor tag with a correctly set &lt;code&gt;href&lt;/code&gt; attribute.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import { BrowserRouter, Route, Link } from "react-router-dom";&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b5a5"&gt;&lt;code&gt;Link&lt;/code&gt; takes two properties: &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;onClick&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="995b"&gt;&lt;code&gt;to&lt;/code&gt; : route location that points to an absolute path.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="978c"&gt;&lt;code&gt;onClick&lt;/code&gt; : clickHandler.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b8c0"&gt;&lt;code&gt;NavLink&lt;/code&gt; works just like &lt;code&gt;Link&lt;/code&gt; but has a bit of extra functionality.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="6334"&gt;Adds extra styling, when the path it links to matches the current path.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="07b8"&gt;As it’s name suggests, it is used to Nav Bars.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="8a33"&gt;Takes three props:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="e501"&gt;&lt;code&gt;activeClassName&lt;/code&gt; : allows you to set a CSS class name for styling. (default set to 'active')&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="81da"&gt;&lt;code&gt;activeStyle&lt;/code&gt; : style object that is applied inline when it's &lt;code&gt;to&lt;/code&gt; prop. matches the current URL.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="8c71"&gt;&lt;code&gt;exact&lt;/code&gt; prop is a boolean that defaults to false; you can set it to true to apply requirement of an exact URL match.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="755b"&gt;exact can also be used as a flag instead of a reg. property value.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="dd12"&gt;benefit of adding this is so that you don’t trigger other matches. Switching between routes&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="4fb6"&gt;`` : Component allows you to only render one route even if several match the current URL.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="7be7"&gt;You may nest as many routes as you wish but only the first match of the current URL will be rendered.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3f8a"&gt;Very useful if we want a default component to render if none of our routes match.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b901"&gt;&lt;code&gt;DefaultComponent&lt;/code&gt; will only render if none of the other URLs match up.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="21a3"&gt;`` : Helps redirect users.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="ee88"&gt;Only takes a single prop: &lt;code&gt;to&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;(this.props.currentUser ?  : )}&lt;br&gt;
/&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;History&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="6456"&gt;&lt;code&gt;History&lt;/code&gt; allows you to update the URL programmatically.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bac6"&gt;Contains two useful methods:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9b00"&gt;&lt;code&gt;push&lt;/code&gt; : Adds a new URL to the end of the history stack.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="d539"&gt;&lt;code&gt;replace&lt;/code&gt; : Replaces the current URL on the history stack, so the back button won't take you to it.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// Pushing a new URL (and adding to the end of history stack):&lt;br&gt;
const handleClick = () =&amp;gt; this.props.history.push("/some/url");&lt;br&gt;
// Replacing the current URL (won't be tracked in history stack):&lt;br&gt;
const redirect = () =&amp;gt; this.props.history.replace("/some/other/url");&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#nested-routes" class="anchor"&gt;
  &lt;/a&gt;
  Nested Routes
&lt;/h3&gt;

&lt;p&gt;Why nested routes?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="6403"&gt;Create routes that tunnel into main components vs getting rendered on the main page as it’s own thing. What are nested routes?&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const Profile = (props) =&amp;gt; {&lt;br&gt;
  // Custom call to database to fetch a user by a user ID.&lt;br&gt;
  const user = fetchUser(props.match.params.userId);&lt;br&gt;
  const { name, id } = user;&lt;br&gt;
  return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;h1&amp;gt;Welcome to the profile of {name}!&amp;lt;/h1&amp;gt;
  {name}'s Posts
  {name}'s Photos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;);&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alt. version using &lt;code&gt;props.match&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Destructure `match` prop
const Profile = ({ match: { url, path, params }) =&amp;amp;gt; {
  // Custom call to database to fetch a user by a user ID.
  const user = fetchUser(params.userId);
  const { name, id } = user;
  return (

      &amp;lt;h1&amp;gt;Welcome to the profile of {name}!&amp;lt;/h1&amp;gt;
      {name}'s Posts
      {name}'s Photos


    }
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="03fb"&gt;As you can see above, our end URL isn’t even defined until we apply those flexible values in.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-builds" class="anchor"&gt;
  &lt;/a&gt;
  React Builds
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="0fae"&gt;&lt;code&gt;Build&lt;/code&gt; : Process of converting code into something that can actually execute or run on the target platform.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6fdb"&gt;In regards to React, the minimum a build should do is convert JSX to something that browsers can understand. Reviewing common terminology&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="779d"&gt;&lt;code&gt;Linting&lt;/code&gt; : Process of using a tool to analyze your code to catch common errors, bugs, inconsistencies etc...&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f1e5"&gt;&lt;code&gt;Transpilation&lt;/code&gt; : Process of converting source code, like JS, from one version to another.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9f9f"&gt;&lt;code&gt;Minification&lt;/code&gt; : Process of removing all unnecessary characters in your code.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="57df"&gt;&lt;code&gt;Bundling&lt;/code&gt; : Process of combining multiple code files into a single file.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d052"&gt;&lt;code&gt;Tree Shaking&lt;/code&gt; : Process of removing unused or dead code from your application before it's bundled. Configuration or code?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ce13"&gt;&lt;code&gt;Configuration&lt;/code&gt; allows developers to create build tasks by declaring either JSON, XML, or YAML without explicitly writing every step in the process.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="16a6"&gt;&lt;code&gt;Coding&lt;/code&gt; or &lt;code&gt;Scripting&lt;/code&gt; simply requires code. Babel and webpack (yes, that's intentionally a lowercase 'w')&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4363"&gt;&lt;code&gt;Babel&lt;/code&gt; : Code Transpiler that allows you to use all of the latest features and syntax wihtout worrying about what browsers support what.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="804b"&gt;&lt;code&gt;webpack&lt;/code&gt; : Allows developers to use JS modules w/o requiring users to use a browser that natively supports ES modules.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="77f2"&gt;Create React App uses webpack and Babel under the hood to build applications. The Create React App build process&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="222f"&gt;What happens when you run &lt;code&gt;npm start&lt;/code&gt;:&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt; &lt;span id="d245"&gt;.env variables are loaded.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="6209"&gt;list of browsers to support are checked.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="1c34"&gt;config’d HTTP port checked for availability.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="950b"&gt;application compiler is configured and created.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="8e30"&gt;&lt;code&gt;webpack-dev-starter&lt;/code&gt; is started&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="48cc"&gt;&lt;code&gt;webpack-dev-starter&lt;/code&gt; compiles app.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="68ad"&gt;&lt;code&gt;index.html&lt;/code&gt; is loaded into browser&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="e670"&gt;file watcher is started to watch for changes. Ejecting&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="428b"&gt;There is a script in Create React App called &lt;code&gt;eject&lt;/code&gt; that allows you to 'eject' your application and expose all the hidden stuff. Preparing to deploy a React application for production&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="eb79"&gt;Defining Env Variables&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;REACT_APP_FOO: some value&lt;br&gt;
REACT_APP_BAR: another value&lt;/p&gt;

&lt;p&gt;console.log(process.env.REACT_APP_FOO);&lt;/p&gt;

&lt;p&gt;Can be referenced in your index.html like so: %REACT_APP_BAR%&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configuring the supported browsers&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "browserslist": {
    "production": [
      "&amp;amp;gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="8a03"&gt;If you specify older browsers it will affect how your code get’s transpiled. Creating a production build&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="fee3"&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to create a production build.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bdaf"&gt;Bundles React in production mode and optimizes the build for the best performance.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#introduction-to%C2%A0react" class="anchor"&gt;
  &lt;/a&gt;
  Introduction to React
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="7224"&gt;Simply a nice library that turns data into DOM.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a9de"&gt;&lt;code&gt;Tree Diffing&lt;/code&gt; : Fast comparison and patching of data by comparing the current virtual DOM and new virtual DOM - updating only the pieces that change.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1bbc"&gt;&lt;code&gt;It's just a tree with some fancy diffing&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#create-element" class="anchor"&gt;
  &lt;/a&gt;
  Create Element
&lt;/h3&gt;

&lt;p&gt;From JavaScript To DOM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="cae8"&gt;The &lt;code&gt;React.createElement&lt;/code&gt; function has the following form:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React.createElement(type, [props], [...children]);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="1688"&gt;&lt;code&gt;Type&lt;/code&gt; : Type of element to create, i.e. a string for an HTML element or a reference to a function or class that is a React component.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3249"&gt;&lt;code&gt;Props&lt;/code&gt; : Object that contains data to render the element.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="56ab"&gt;&lt;code&gt;Children&lt;/code&gt; : Children of the elemet, as many as you want. Creating elements&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="ee64"&gt;Our rendering goal:&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href="/pets"&gt;Pets&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/owners"&gt;Owners&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="eb8b"&gt;There are five tags to create:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="ea28"&gt;One &lt;code&gt;ul&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a4ba"&gt;Two &lt;code&gt;li&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="de01"&gt;Two &lt;code&gt;a&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="90b5"&gt;There are certain attributes we want to appear in the DOM for these tags as well:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="dab5"&gt;Each &lt;code&gt;li&lt;/code&gt; has a &lt;code&gt;class&lt;/code&gt; (or &lt;code&gt;className&lt;/code&gt; in React)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="e88e"&gt;Both &lt;code&gt;a&lt;/code&gt; ele's have &lt;code&gt;href&lt;/code&gt; attributes&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="fd8c"&gt;Also keep in mind the parent child relationships happening between the tags.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="9893"&gt;&lt;code&gt;ul&lt;/code&gt; is the parent of both &lt;code&gt;li&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="eafa"&gt;Each &lt;code&gt;li&lt;/code&gt; has an &lt;code&gt;a&lt;/code&gt; element as a child&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="84cc"&gt;Each &lt;code&gt;a&lt;/code&gt; has a &lt;code&gt;text content&lt;/code&gt; child&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZH8LBCT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A8ls0PmtREELbf5Wm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZH8LBCT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A8ls0PmtREELbf5Wm"&gt;&lt;/a&gt;React.createElement(&lt;br&gt;
      "ul",&lt;br&gt;
      null,&lt;br&gt;
      React.createElement(&lt;br&gt;
        "li",&lt;br&gt;
        { className: "selected" },&lt;br&gt;
        React.createElement("a", { href: "/pets" }, "Pets")&lt;br&gt;
      ),&lt;br&gt;
      React.createElement(&lt;br&gt;
        "li",&lt;br&gt;
        null,&lt;br&gt;
        React.createElement("a", { href: "/owners" }, "Owners")&lt;br&gt;
      )&lt;br&gt;
    );&lt;/p&gt;

&lt;p&gt;Converting to virtual DOM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="e7d4"&gt;After you set up your &lt;code&gt;React.createElement&lt;/code&gt;, you use &lt;code&gt;React.render&lt;/code&gt; to take the value returned from cE and a DOM node to insert into the conversion of the real DOM.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// Put the element tree in a variable&lt;br&gt;
const navList = React.createElement(&lt;br&gt;
  "ul",&lt;br&gt;
  null,&lt;br&gt;
  React.createElement(&lt;br&gt;
    "li",&lt;br&gt;
    { className: "selected" },&lt;br&gt;
    React.createElement("a", { href: "/pets" }, "Pets")&lt;br&gt;
  ),&lt;br&gt;
  React.createElement(&lt;br&gt;
    "li",&lt;br&gt;
    null,&lt;br&gt;
    React.createElement("a", { href: "/owners" }, "Owners")&lt;br&gt;
  )&lt;br&gt;
);&lt;br&gt;
// Get a DOM node for React to render to&lt;br&gt;
const mainElement = document.querySelector("main");&lt;br&gt;
// Give React the element tree and the target&lt;br&gt;
ReactDOM.render(navList, mainElement);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="2cbc"&gt;JS Code =&amp;gt; Virtual DOM =&amp;gt; Real Dom Updates&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="25d5"&gt;If you call React.render a second or multiple times it just checks the existing Virtual DOM and it knows which smaller areas to change. Thinking in Components&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="fe61"&gt;Components are pieces of reusable front-end pieces.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="bffa"&gt;Components should be Single Responsibility Principle compliant.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#create-element" class="anchor"&gt;
  &lt;/a&gt;
  Create Element
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;React.createElement Demo&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="a288"&gt;Can import non-local dependencies with &lt;code&gt;import 'package-link'&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const App = () =&amp;gt; React.createElement("h1", null, "Hello, Programmers!");&lt;br&gt;
const target = document.querySelector("main");&lt;br&gt;
const app = React.createElement(App, null);&lt;br&gt;
// Give React the element tree and the target&lt;br&gt;
ReactDOM.render(app, target);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="0693"&gt;Remember when importing modules from other files you have to denote the file type in the import statement. HTML Original&lt;/span&gt;&lt;/p&gt;


&lt;h1&gt;Clue$ 268530&lt;/h1&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  2009: I dreamed a Dream

  &amp;amp;lt;&amp;amp;gt;

  $800
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React Version&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Clue = () =&amp;amp;gt;
  React.createElement(
    "section",
    { className: "clue" },
    React.createElement("h1", { className: "clue__title" }, "Title"),
    React.createElement("div", { className: "clue__question" }, "?"),
    React.createElement("div", { className: "clue__category" }, "Category"),
    React.createElement("div", { className: "clue__amount" }, "$800")
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="f587"&gt;Because &lt;code&gt;class&lt;/code&gt; is a reserved keyword in JS, in React we can use &lt;code&gt;className&lt;/code&gt; to assign a class to an element.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4d51"&gt;Remember the data that goes into createElement: element type, data to pass into the element, and then children.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8199"&gt;&lt;code&gt;props&lt;/code&gt; : Properties;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="6b53"&gt;To handle certain values that are initially undefined, we can use &lt;code&gt;defaultProps&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Clue.defaultProps = {&lt;br&gt;
  category: {},&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="4abe"&gt;You can change in the devTools Network tab the internet speed to check for values that may be undefined to hangle with defaultProps.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="79e3"&gt;If we fetch multiple pieces of data, we can render many things by using &lt;code&gt;map&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="06f2"&gt;You need to assign a unique key to each of the clues.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="c12e"&gt;We need to keep track of them individually so that React can easily refer to a specific one if there is an issue. &lt;code&gt;clue =&amp;amp;gt; { key:clue.id, ...clue }&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const App = (props) =&amp;gt;&lt;br&gt;
  React.createElement(&lt;br&gt;
    "h1",&lt;br&gt;
    null,&lt;br&gt;
    props.clues.map((clue) =&amp;gt;&lt;br&gt;
      React.createElement(Clue, { key: clue.id, ...clue })&lt;br&gt;
    )&lt;br&gt;
  );&lt;br&gt;
export default App;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="1dd5"&gt;Note: JSX is preferred over React.createElement;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#notes-from-hello-programmer-exercise" class="anchor"&gt;
  &lt;/a&gt;
  Notes from Hello Programmer Exercise
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1fb8"&gt;When you import modules from websites they must have CORs activated.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1ef6"&gt;These import statements, import &lt;code&gt;global variables&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="6613"&gt;When we want to move our code into production we need to change the imports into the production minified versions.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import "&lt;a href="https://unpkg.com/react@16/umd/react.production.min.js"&gt;https://unpkg.com/react@16/umd/react.production.min.js&lt;/a&gt;";&lt;br&gt;
import "&lt;a href="https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js"&gt;https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js&lt;/a&gt;";&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="0046"&gt;While we will never actually be creating full apps with just React.createElement =&amp;gt; it is the enginer that is running under the hood!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import "&lt;a href="https://unpkg.com/react@16/umd/react.development.js"&gt;https://unpkg.com/react@16/umd/react.development.js&lt;/a&gt;";&lt;br&gt;
import "&lt;a href="https://unpkg.com/react-dom@16/umd/react-dom.development.js"&gt;https://unpkg.com/react-dom@16/umd/react-dom.development.js&lt;/a&gt;";&lt;br&gt;
const Links = () =&amp;gt;&lt;br&gt;
  React.createElement(&lt;br&gt;
    "ul",&lt;br&gt;
    { id: "nav-links" },&lt;br&gt;
    React.createElement(&lt;br&gt;
      "li",&lt;br&gt;
      { className: "is-selected" },&lt;br&gt;
      React.createElement("a", { href: "&lt;a href="http://appacademy.io"&gt;http://appacademy.io&lt;/a&gt;" }, "App Academy")&lt;br&gt;
    ),&lt;br&gt;
    React.createElement(&lt;br&gt;
      "li",&lt;br&gt;
      null,&lt;br&gt;
      React.createElement("a", { href: "&lt;a href="https://aaonline.io"&gt;https://aaonline.io&lt;/a&gt;" }, "a/A Open")&lt;br&gt;
    )&lt;br&gt;
  );&lt;br&gt;
// Set up React Element: Type, Imported Data, Child (Child is Text in this Scenario)&lt;br&gt;
// HelloWorld is a function based component&lt;br&gt;
const HelloWorld = () =&amp;gt; React.createElement("h1", null, "Hello, Programmers");&lt;br&gt;
const AllTogether = () =&amp;gt;&lt;br&gt;
  React.createElement(&lt;br&gt;
    "div",&lt;br&gt;
    null,&lt;br&gt;
    React.createElement(HelloWorld, null),&lt;br&gt;
    React.createElement(Links, null)&lt;br&gt;
  );&lt;br&gt;
// Target the Element to append new Ele&lt;br&gt;
const target = document.querySelector("main");&lt;br&gt;
// Assign your 'App' to your created Elements&lt;br&gt;
// We are creating an element from the HelloWorld function.&lt;br&gt;
const app = React.createElement(AllTogether, null);&lt;br&gt;
// Render from the Virtual Dom to the Actual Dom&lt;br&gt;
ReactDOM.render(app, target);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#introduction-to%C2%A0jsx" class="anchor"&gt;
  &lt;/a&gt;
  Introduction to JSX
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="a5ee"&gt;&lt;code&gt;JSX&lt;/code&gt; : Javascript Extension, a new language created by React developers to have an easier way of interacting with the React API. How to use JSX&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="24bf"&gt;We will use &lt;code&gt;babel&lt;/code&gt; to convert version of modern JS into an older version of JS. React Create Element&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const ExampleComponent = (props) =&amp;gt;&lt;br&gt;
  React.createElement(&lt;br&gt;
    React.Fragment,&lt;br&gt;
    null,&lt;br&gt;
    React.createElement("h1", null, "Hello!"),&lt;br&gt;
    React.createElement("img", { src: "&lt;a href="https://via.placeholder.com/150"&gt;https://via.placeholder.com/150&lt;/a&gt;" }),&lt;br&gt;
    React.createElement("a", { href: props.searchUrl }, props.searchText)&lt;br&gt;
  );&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSX Version&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ExampleComponent = (props) =&amp;amp;gt; (

    &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
    &amp;lt;img src="https://via.placeholder.com/150"&amp;gt;
    &amp;lt;a href="%7Bprops.searchUrl%7D"&amp;gt;{props.searchText}&amp;lt;/a&amp;gt;

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="b00d"&gt;Keep in mind that self closing tags in React must have a &lt;code&gt;forward slash&lt;/code&gt; to close it.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LgBRWf0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANNxuFMF-sOL8Wvdl" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LgBRWf0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANNxuFMF-sOL8Wvdl"&gt;&lt;/a&gt;-   &lt;span id="346d"&gt;Properties and Data&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="https://via.placeholder.com/150"&amp;gt;;
// becomes..
React.createElement("img", { src: "https://via.placeholder.com/150" });
// if we want to pass in data vs just a string literal
&amp;lt;a href="%7Bprops.searchUrl%7D"&amp;gt;{props.searchText}&amp;lt;/a&amp;gt;;
// so it becomes..
React.createElement("a", { href: props.searchUrl }, props.searchText);
// if you want the text search uppercase..
&amp;lt;a href="%7Bprops.searchUrl%7D"&amp;gt;{props.searchText.toUpperCase()}&amp;lt;/a&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="467c"&gt;Comments in JSX have the following syntax:&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;This is JSX&lt;/h2&gt;
  {/* This is a comment in JSX */}&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="8cb8"&gt;&lt;code&gt;Property Names&lt;/code&gt;:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="837b"&gt;&lt;code&gt;checked&lt;/code&gt; : Attribute of input components such as checkbox or radio, use it to set whether the component is checked or not.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="aec0"&gt;&lt;code&gt;className&lt;/code&gt; : Used to specify a CSS class.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="2f92"&gt;&lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; : React's equivalent of innerHTML because it is risky to cross-site scripting attacks.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3eab"&gt;&lt;code&gt;htmlFor&lt;/code&gt; : Because &lt;code&gt;for&lt;/code&gt; is protected keyword, React elements use this instead.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="9194"&gt;&lt;code&gt;onChange&lt;/code&gt; : Event fired whenever a form field is changed.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="014a"&gt;&lt;code&gt;style&lt;/code&gt; : Accepts a JS object with camelCase properties rather than a CSS string.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="76d8"&gt;&lt;code&gt;value&lt;/code&gt; : Supported by Input, Select, and TextArea components; use it to set the value of the component.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="22c2"&gt;Note: React uses camel-case!!! The JSX semicolon gotcha&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;function App() {&lt;br&gt;
  return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
  Welcome to JSX.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;);&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;create Element equivalent&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;is equivalent to
function App() {
  return (
    React.createElement(
      'div',
      null,
      React.createElement('h1', null, 'Hello!'),
      React.createElement('div', null, 'Welcome to JSX.'),
    )
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="dbc1"&gt;We wrap what want to return in parenthesis so JS doesn’t auto add semi-colons after every line and run the code incorrectly.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="62c0"&gt;Just remember if you decided to use the return keyword in a function to ‘return some JSX’, then make sure you wrap the JSX in parenthesis.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="8ad9"&gt;Single line used to initiate a React application.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3cb1"&gt;React has a great toolchain where you can see changes live as you’re editing your application.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c1d0"&gt;React errors will be rendered directly onto the browser window.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1365"&gt;A downside is that it installs a lot of bloat files.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="aaed"&gt;Examples of React create Element and JSX equivalent&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React.createElement(&lt;br&gt;
  "a",&lt;br&gt;
  {&lt;br&gt;
    className: "active",&lt;br&gt;
    href: "&lt;a href="https://appacademy.io"&gt;https://appacademy.io&lt;/a&gt;",&lt;br&gt;
  },&lt;br&gt;
  "App Academy"&lt;br&gt;
);&lt;br&gt;
// JSX Version&lt;br&gt;
&lt;a href="https://appacademy.io"&gt;&lt;br&gt;
  App Academy&lt;br&gt;
&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;React.createElement(&lt;br&gt;
  OwnerDetails,&lt;br&gt;
  {&lt;br&gt;
    owner: props.data.owner,&lt;br&gt;
    number: props.index + 1,&lt;br&gt;
  },&lt;br&gt;
  props.name&lt;br&gt;
);&lt;br&gt;
// JSX Version&lt;/p&gt;

&lt;p&gt;{props.name}&lt;br&gt;
;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More Complex JSX Example&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const BookPanel = (props) =&amp;amp;gt; {

    &amp;lt;h1&amp;gt;{props.title}&amp;lt;/h1&amp;gt;
    &amp;lt;img src="%7Bprops.coverUrl%7D"&amp;gt;
    {props.description}
  ;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#using-custom-cra-templates" class="anchor"&gt;
  &lt;/a&gt;
  Using Custom CRA Templates
&lt;/h3&gt;

&lt;p&gt;Using a Custom Template &lt;code&gt;npx create-react-app my-app --template @appacademy/simple&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="9607"&gt;Keep in mind that using &lt;code&gt;create-react-app&lt;/code&gt; automatically initializes a git repository for you!&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f0fe"&gt;App Academy custom template for creating a react app.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1b4e"&gt;If using the default react create project you can delete the following files:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ef1c"&gt;favicon.ico&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="627b"&gt;robots.txt&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3b34"&gt;logo192.png&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9b50"&gt;logo512.png&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8101"&gt;manifest.json&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="77db"&gt;You can also simplify the &lt;code&gt;html&lt;/code&gt; file into:&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;React App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simplifying the src folder&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="ac69"&gt;Remove: App.css App.test.js logo.svg serviceWorker.js setupTests.js&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="064f"&gt;Update the Following Files:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/App.js&lt;br&gt;
import React from "react";&lt;br&gt;
function App() {&lt;br&gt;
  return &lt;/p&gt;
&lt;h1&gt;Hello world!&lt;/h1&gt;;
}
export default App;
``;

&lt;p&gt;// ./src/index.js&lt;br&gt;
import React from "react";&lt;br&gt;
import ReactDOM from "react-dom";&lt;br&gt;
import "./index.css";&lt;br&gt;
import App from "./App";&lt;br&gt;
ReactDOM.render(&lt;/p&gt;

&lt;p&gt;,&lt;br&gt;
  document.getElementById("root")&lt;br&gt;
);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-class-components" class="anchor"&gt;
  &lt;/a&gt;
  React Class Components
&lt;/h3&gt;

&lt;p&gt;Class Components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="b5e6"&gt;You can write React components using ES2015 Classes: Function Component&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/Message.js&lt;br&gt;
import React from "react";&lt;br&gt;
const Message = (props) =&amp;gt; {&lt;br&gt;
  return {props.text};&lt;br&gt;
};&lt;br&gt;
export default Message;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ES2015 Version&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/Message.js
import React from "react";
class Message extends React.Component {
  render() {
    return {this.props.text};
  }
}
export default Message;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="ae33"&gt;We can access props within a &lt;code&gt;class component&lt;/code&gt; by using &lt;code&gt;this.props&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="0b60"&gt;Keep in mind Class Components are used just like function components.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/index.js&lt;br&gt;
import React from "react";&lt;br&gt;
import ReactDOM from "react-dom";&lt;br&gt;
import Message from "./Message";&lt;br&gt;
ReactDOM.render(&lt;/p&gt;

&lt;p&gt;,&lt;br&gt;
  document.getElementById("root")&lt;br&gt;
);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting and accessing props&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Message extends React.Component {
  constructor(props) {
    super(props);
    // TODO Initialize state, etc.
  }
  render() {
    return {this.props.text};
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="cd5a"&gt;If we define a constructor method in our Class Component, we have to define the &lt;code&gt;super&lt;/code&gt; method with &lt;code&gt;props&lt;/code&gt; passed through it.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8bf7"&gt;Side Note: Before React used ES2015 Classes, it used &lt;code&gt;React.createclass&lt;/code&gt; function, if you ever need to use this antiquated method make sure you install a module called &lt;code&gt;create-react-class&lt;/code&gt; Stateful components&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4b12"&gt;One of the major reasons why you would choose to use a Class Component over a Function Component is to add and manage local or internal state to your component.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8e82"&gt;Second of the major reasons is to be able to use a Class Component’s lifecycle methods. What is state?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7fab"&gt;Props are data that are provided by the consumer or caller of the component.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="98f4"&gt;Not meant to be changed by a component.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c6a9"&gt;State is data that is &lt;code&gt;internal&lt;/code&gt; to the component.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3e89"&gt;Intended to be updated or mutated. When to use state&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c03f"&gt;&lt;em&gt;Only Use State when it is absolutely necessary&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="204b"&gt;If the data never changes, or if it’s needed through an entire application use props instead.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0b53"&gt;State is more often used when creating components that retrieve data from APIs or render forms.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1b6b"&gt;The general rule of thumb: If a component doesn’t need to use state or lifecyle methods, it should be prioritized as a &lt;code&gt;function component&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d708"&gt;Functional:Stateless || Class:Stateful Initializing state&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="e5d5"&gt;Use a class constructor method to initialize &lt;code&gt;this.state&lt;/code&gt; object. // Application Entry Point&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/index.js&lt;br&gt;
import React from 'react'&lt;br&gt;
import ReactDOM from 'react-dom';&lt;br&gt;
import RandomQuote from './RandomQuote';&lt;br&gt;
ReactDOM.render(&lt;/p&gt;

&lt;p&gt;document.getElementById('root');&lt;br&gt;
)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// Class Component: RandomQuote&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
class RandomQuote extends React.Component {
  constructor() {
    super();
    const quotes = [
      "May the Force be with you.",
      "There's no place like home.",
      "I'm the king of the world!",
      "My mama always said life was like a box of chocolates.",
      "I'll be back.",
    ];
    this.state = {
      quotes,
      currentQuoteIndex: this.getRandomInt(quotes.length);
    }
  }
  getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
  }
  render() {
    return (

        &amp;lt;h2&amp;gt;Random Quote&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;{this.state.quotes[this.state.currentQuoteIndex]}&amp;lt;/p&amp;gt;

    )
  }
}
export default RandomQuote;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Updating State&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="3fdc"&gt;Let’s say we want to update our state with a new quote.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="eddc"&gt;We can set up event listeners in React similarly to how we did them before.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="106c"&gt;&amp;lt;button type=”button” onClick={this.changeQuote}&amp;gt; Change Quote &amp;lt;/button&amp;gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a77a"&gt;&lt;code&gt;onClick&lt;/code&gt; is the event listener.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f406"&gt;&lt;code&gt;{this.changeQuote}&lt;/code&gt; is the event handler method.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="7dca"&gt;Our Class Component File should now look like this with the new additions:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import React from "react";&lt;br&gt;
class RandomQuote extends React.Component {&lt;br&gt;
  constructor() {&lt;br&gt;
    super();&lt;br&gt;
    const quotes = [&lt;br&gt;
      "May the Force be with you.",&lt;br&gt;
      "There's no place like home.",&lt;br&gt;
      "I'm the king of the world!",&lt;br&gt;
      "My mama always said life was like a box of chocolates.",&lt;br&gt;
      "I'll be back.",&lt;br&gt;
    ];&lt;br&gt;
    this.state = {&lt;br&gt;
      quotes,&lt;br&gt;
      currentQuoteIndex: this.getRandomInt(quotes.length);&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
  changeQuote = () =&amp;gt; {&lt;br&gt;
    const newIndex = this.getRandomInt(this.state.quotes.length);&lt;br&gt;
    // Setting the 'new state' of currentQuoteIndex state property&lt;br&gt;
    // to newly generated random index #.&lt;br&gt;
    this.setState({&lt;br&gt;
      currentQuoteIndex: newIndex;&lt;br&gt;
    })&lt;br&gt;
  }&lt;br&gt;
  getRandomInt(max) {&lt;br&gt;
    return Math.floor(Math.random() * Math.floor(max));&lt;br&gt;
  }&lt;br&gt;
  render() {&lt;br&gt;
    return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;h2&amp;gt;Random Quote&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;{this.state.quotes[this.state.currentQuoteIndex]}&amp;lt;/p&amp;gt;

      Change Quote

)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
export default RandomQuote;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t modify state directly&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="ca27"&gt;It is important to &lt;code&gt;never&lt;/code&gt; modify your state directly!&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="780d"&gt;ALWAYS use &lt;code&gt;this.setState&lt;/code&gt; method to update state.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1581"&gt;This is because when you only use this.state to re-assign, no re-rendering will occur =&amp;gt; leaving our component out of sync. Properly updating state from the previous state&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="dc5a"&gt;In our current example, the way we have &lt;code&gt;changeQuote&lt;/code&gt; set up leaves us with occasionally producing the same index twice in a row.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0bff"&gt;One solution is to design a loop but keep in mind that state updates are handled asynchronously in React (your current value is not guaranteed to be the latest)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="39f9"&gt;A safe method is to pass an anonymous method to &lt;code&gt;this.setState&lt;/code&gt; (instead of an object literal) Previous&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;changeQuote = () =&amp;gt; {&lt;br&gt;
    const newIndex = this.getRandomInt(this.state.quotes.length);&lt;br&gt;
    this.setState({&lt;br&gt;
      currentQuoteIndex: newIndex;&lt;br&gt;
    })&lt;br&gt;
  }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passing w/ Anon Method&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;changeQuote = () =&amp;amp;gt; {
  this.setState((state, props) =&amp;amp;gt; {
    const { quotes, currentQuoteIndex } = state;
    let newIndex = -1;
    do {
      newIndex = this.getRandomInt(quote.length);
    } while (newIndex === currentQuoteIndex);
    return {
      currentQuoteIndex: newIndex,
    };
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Providing default values for props&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="7e8c"&gt;In our current example, we pass in a static array of predefined quotes in our constructor.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3e8f"&gt;The way it is set up right now leaves our list of quotes unchanged after initialization.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="add0"&gt;We can make quotes more dynamic by replacing our static array with a &lt;code&gt;props&lt;/code&gt; argument passed into &lt;code&gt;super&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="53d6"&gt;constructor(props) { super(props); }&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="918a"&gt;We can now move our quotes array to our application entry point and pass it in as a prop. // Application Entry Point&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/index.js&lt;br&gt;
import React from 'react'&lt;br&gt;
import ReactDOM from 'react-dom';&lt;br&gt;
import RandomQuote from './RandomQuote';&lt;br&gt;
// Re-assign our array here and pass it in as a prop in Render.&lt;br&gt;
const quotes = [&lt;br&gt;
      "May the Force be with you.",&lt;br&gt;
      "There's no place like home.",&lt;br&gt;
      "I'm the king of the world!",&lt;br&gt;
      "My mama always said life was like a box of chocolates.",&lt;br&gt;
      "I'll be back.",&lt;br&gt;
      "This way I can define more quotes",&lt;br&gt;
    ];&lt;br&gt;
ReactDOM.render(&lt;/p&gt;

&lt;p&gt;document.getElementById('root');&lt;br&gt;
)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="a0bb"&gt;One thing to note about this workaround is that the caller of the component &lt;em&gt;must&lt;/em&gt; set the quotes prop or the component will throw an error =&amp;gt; so use &lt;code&gt;defaultProps&lt;/code&gt;!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// At the bottom of RandomQuote.js...&lt;br&gt;
RandomQuote.defaultProps = {&lt;br&gt;
  quotes: [&lt;br&gt;
    "May the Force be with you.",&lt;br&gt;
    "There's no place like home.",&lt;br&gt;
    "I'm the king of the world!",&lt;br&gt;
    "My mama always said life was like a box of chocolates.",&lt;br&gt;
    "I'll be back.",&lt;br&gt;
    "This way I can define more quotes",&lt;br&gt;
  ],&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="c575"&gt;A good safety net in case the consumer/caller doesn’t provide a value for the quotes array.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3be6"&gt;We can even remove it from our index.js now and an error will not be thrown.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#handling-events" class="anchor"&gt;
  &lt;/a&gt;
  Handling Events
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="a82e"&gt;To add an event listener to an element, just define a method to handle the event and associate that method with the element event you are listening for. Example&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import React from "react";&lt;br&gt;
class AlertButton extends React.Component {&lt;br&gt;
  showAlert = () =&amp;gt; {&lt;br&gt;
    window.alert("Button Clicked!");&lt;br&gt;
  };&lt;br&gt;
  render() {&lt;br&gt;
    return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Submit

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a852"&gt;Note that when refering the handler method in onClick we’re not invoking showAlert simply just passing a reference. Preventing default behavior&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="5cb0"&gt;HTML Elements in the browser often have a lot of default behavior.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="df4d"&gt;I.E. Clicking on an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element navigates so a resource denoted by `` property.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="952c"&gt;Here is an example of where using &lt;code&gt;e.preventDefault()&lt;/code&gt; could come in handy.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import React from "react";&lt;br&gt;
class NoDefaultSubmitForm extends React.Component {&lt;br&gt;
  submitForm = (e) =&amp;gt; {&lt;br&gt;
    e.preventDefault();&lt;br&gt;
    window.alert("Handling form submission...");&lt;br&gt;
  };&lt;br&gt;
  render() {&lt;br&gt;
    return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Submit
;
)}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b149"&gt;The button contained within the form will end up refreshing the page before &lt;code&gt;this.submitForm&lt;/code&gt; method can be completed.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a034"&gt;We can stick an &lt;code&gt;e.preventDefault()&lt;/code&gt; into the actual method to get around this problem.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="004a"&gt;&lt;code&gt;e&lt;/code&gt; : Parameter that references a &lt;code&gt;Synthetic Event&lt;/code&gt; object type. Using &lt;code&gt;this&lt;/code&gt; in event handlers&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/AlertButton.js&lt;br&gt;
import React from "react";&lt;br&gt;
class AlertButton extends React.Component {&lt;br&gt;
  showAlert = () =&amp;gt; {&lt;br&gt;
    window.alert("Button clicked!");&lt;br&gt;
    console.log(this);&lt;br&gt;
  };&lt;br&gt;
  render() {&lt;br&gt;
    return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Click Me

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
export default AlertButton;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3c8f"&gt;When we console log &lt;code&gt;this&lt;/code&gt; we see the AlertButton object.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="42a0"&gt;If we were to write the showAlert method with a regular class method like:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;showAlert() {&lt;br&gt;
  console.log(this);&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="c081"&gt;We would get &lt;code&gt;undefined&lt;/code&gt; =&amp;gt; remember that fat arrow binds to the current context! Reviewing class methods and the &lt;code&gt;this&lt;/code&gt; keyword&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="e98e"&gt;Let’s refresh on binding.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;class Boyfriend {&lt;br&gt;
  constructor() {&lt;br&gt;
    this.name = "Momato Riruru";&lt;br&gt;
  }&lt;br&gt;
  displayName() {&lt;br&gt;
    console.log(this.name);&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
const Ming = new Boyfriend();&lt;br&gt;
Ming.displayName(); // =&amp;gt; Momato Riruru&lt;br&gt;
const displayAgain = Ming.displayName;&lt;br&gt;
displayAgain(); // =&amp;gt; Result in a Type Error: Cannot read property 'name' of undefined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="fb85"&gt;The first time we use our &lt;code&gt;displayMethod&lt;/code&gt; call, it is called directly on the instance of the boyfriend class, which is why &lt;code&gt;Momato Riruru&lt;/code&gt; was printed out.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="3a9b"&gt;The second time it was called, the ref of the method is stored as a variable and method is called on that variable instead of the instance; resulting in a type error (it has lost it’s context)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="0a2c"&gt;Remember we can use the &lt;code&gt;bind&lt;/code&gt; method to rebind context!&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="d6d9"&gt;We can refactor to get the second call working like this:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="7ead"&gt;const displayAgain = Ming.displayName.bind(Ming); displayAgain(); // =&amp;gt; Now Momato Riruru will be printed out.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="a8b0"&gt;To continue using function declarations vs fat arrow we can assign context in a constructor within a class component.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import React from "react";&lt;br&gt;
class AlertButton extends React.Component {&lt;br&gt;
  constructor() {&lt;br&gt;
    super();&lt;br&gt;
    this.showAlert = this.showAlert.bind(this); // binding context&lt;br&gt;
  }&lt;br&gt;
  showAlert() {&lt;br&gt;
    console.log(this);&lt;br&gt;
  }&lt;br&gt;
  render() {&lt;br&gt;
    return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Submit

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
export default AlertButton;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a4e6"&gt;&lt;code&gt;Experimental Syntax&lt;/code&gt; : Syntax that has been proposed to add to ECMAScript but hasn't officially been added to the language specification yet.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="801d"&gt;It’s good to pick one approach and use it consistently, either:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="2e3e"&gt;Class Properties &amp;amp; Arrow Functions&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="cc27"&gt;Bind Method &amp;amp; This Keyword The &lt;code&gt;SyntheticEvent&lt;/code&gt; object&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="f177"&gt;Synthetic Event Objects: Cross Browser wrappeds around the browser’s native event.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="418f"&gt;Includes the use of stopPropagation() and preventDefault();&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b94f"&gt;Attributes of the Synthetic Event Object:Attributesboolean bubblesboolean cancelableDOMEventTarget currentTargetboolean defaultPreventednumber eventPhaseboolean isTrustedDOMEvent nativeEventvoid preventDefault()boolean isDefaultPrevented()void stopPropagation()boolean isPropagationStopped()void persist()DOMEventTarget targetnumber timeStampstring type&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7484"&gt;&lt;code&gt;nativeEvent&lt;/code&gt; : property defined in a synthetic event object that gives you access to the underlying native browser event (rarely used!)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#forms-in%C2%A0react" class="anchor"&gt;
  &lt;/a&gt;
  Forms in React
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Exercise being done in a separate file&lt;/em&gt; Random Notes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="45ec"&gt;&lt;code&gt;onChange&lt;/code&gt; : detects when a value of an input element changes.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9ca4"&gt;Assigning &lt;code&gt;onChange&lt;/code&gt; to our input fields makes our component's state update in real time during user input.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="eb83"&gt;Dont forget to add &lt;code&gt;preventDefault&lt;/code&gt; onto form submissions to deal with the default behavior of the browser refreshing the page!&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c413"&gt;&lt;code&gt;submittedOn: new Date(),&lt;/code&gt; Can be added to a form, most likely will persist into a DB.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b97f"&gt;Controlled Components&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ac48"&gt;We use the &lt;code&gt;onChange&lt;/code&gt; event handlers on form fields to keep our component's state as the &lt;code&gt;"one source of truth"&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4685"&gt;Adding an &lt;code&gt;onChange&lt;/code&gt; event handler to every single input can massively bloat your code.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="448c"&gt;Try assiging it to it’s own method to apply everywhere.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="f229"&gt;&lt;code&gt;textarea&lt;/code&gt; is handled differently in react: it takes in a value property to handle what the inner text will be.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/ContactUs.js&lt;br&gt;
import React from "react";&lt;br&gt;
class ContactUs extends React.Component {&lt;br&gt;
  constructor() {&lt;br&gt;
    super();&lt;br&gt;
    this.state = {&lt;br&gt;
      name: "",&lt;br&gt;
      email: "",&lt;br&gt;
      phone: "",&lt;br&gt;
      phoneType: "",&lt;br&gt;
      comments: "",&lt;br&gt;
      validationErrors: [],&lt;br&gt;
    };&lt;br&gt;
  }&lt;br&gt;
  onChange = (e) =&amp;gt; {&lt;br&gt;
    const { name, value } = e.target;&lt;br&gt;
    this.setState({ [name]: value });&lt;br&gt;
  };&lt;br&gt;
  // Vanilla JS Function for validating inputs&lt;br&gt;
  validate(name, email) {&lt;br&gt;
    const validationErrors = [];&lt;br&gt;
    if (!name) {&lt;br&gt;
      validationErrors.push("Please provide a Name");&lt;br&gt;
    }&lt;br&gt;
    if (!email) {&lt;br&gt;
      validationErrors.push("Please provide an Email");&lt;br&gt;
    }&lt;br&gt;
    return validationErrors;&lt;br&gt;
  }&lt;br&gt;
  onSubmit = (e) =&amp;gt; {&lt;br&gt;
    // Prevent the default form behavior&lt;br&gt;
    // so the page doesn't reload.&lt;br&gt;
    e.preventDefault();&lt;br&gt;
    // Retrieve the contact us information from state.&lt;br&gt;
    const { name, email, phone, phoneType, comments } = this.state;&lt;br&gt;
    // Get Validation Errors - proceeding destructuring values from this.state.&lt;br&gt;
    const validationErrors = this.validate(name, email);&lt;br&gt;
    // If we have errors...&lt;br&gt;
    if (validationErrors.length &amp;gt; 0) {&lt;br&gt;
      this.setState({ validationErrors });&lt;br&gt;
    } else {&lt;br&gt;
      // Proceed normally&lt;br&gt;
      // Create a new object for the contact us information.&lt;br&gt;
      const contactUsInformation = {&lt;br&gt;
        name,&lt;br&gt;
        email,&lt;br&gt;
        phone,&lt;br&gt;
        phoneType,&lt;br&gt;
        comments,&lt;br&gt;
        submittedOn: new Date(),&lt;br&gt;
      };&lt;br&gt;
      console.log(contactUsInformation);&lt;br&gt;
      // Reset the form state.&lt;br&gt;
      this.setState({&lt;br&gt;
        name: "",&lt;br&gt;
        email: "",&lt;br&gt;
        phone: "",&lt;br&gt;
        phoneType: "",&lt;br&gt;
        comments: "",&lt;br&gt;
        validationErrors: [],&lt;br&gt;
      });&lt;br&gt;
    }&lt;br&gt;
  };&lt;br&gt;
  render() {&lt;br&gt;
    const { name, email, phone, phoneType, comments, validationErrors } =&lt;br&gt;
      this.state;&lt;br&gt;
    return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;h2&amp;gt;Contact Us&amp;lt;/h2&amp;gt;
    {validationErrors.length &amp;amp;gt; 0 &amp;amp;amp;&amp;amp;amp; (

        The following errors were found:
        &amp;lt;ul&amp;gt;
          {validationErrors.map((error) =&amp;amp;gt; (
            &amp;lt;li&amp;gt;{error}&amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/ul&amp;gt;

    )}

        Name:

        Email:

        Phone:

          Select a phone type...
          {this.props.phoneTypes.map((phoneType) =&amp;amp;gt; (
            {phoneType}
          ))}

        Comments:

        Submit

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
ContactUs.defaultProps = {&lt;br&gt;
  phoneTypes: ["Home", "Work", "Mobile"],&lt;br&gt;
};&lt;br&gt;
export default ContactUs;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="a2da"&gt;We can use validation libraries like &lt;code&gt;validate&lt;/code&gt; to make our validation functions more complex.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;import isEmail from "validator/es/lib/isEmail";&lt;br&gt;
  validate(name, email) {&lt;br&gt;
    const validationErrors = [];&lt;br&gt;
    if (!name) {&lt;br&gt;
      validationErrors.push("Please provide a Name");&lt;br&gt;
    }&lt;br&gt;
    if (!email) {&lt;br&gt;
      validationErrors.push("Please provide an Email");&lt;br&gt;
    } else if (!isEmail(email)) {&lt;br&gt;
      validationErrors.push("Please provide a valid Email");&lt;br&gt;
    }&lt;br&gt;
    return validationErrors;&lt;br&gt;
  }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note About Client-side vs server-side validation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="5808"&gt;Server-side validation is not optional.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3bb8"&gt;Tech-savvy users can manipulate client-side validations.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="311f"&gt;Sometimes the ‘best approach’ is to skip implementing validations on the client-side and rely completely on the server-side validation.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#component-lifecycle" class="anchor"&gt;
  &lt;/a&gt;
  Component Lifecycle
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akOXJt4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Ac24XQBvqBBg0Eztz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akOXJt4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Ac24XQBvqBBg0Eztz"&gt;&lt;/a&gt;-   &lt;span id="e1d9"&gt;Component Lifecycle is simply a way of describing the key moments in the lifetime of a component.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="8e64"&gt;Loading (Mounting)&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="7e94"&gt;Updating&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="2cd3"&gt;Unloading (Unmounting) The lifecycle of a React component&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="7740"&gt;Each &lt;code&gt;Class Component&lt;/code&gt; has several &lt;code&gt;lifecycle methods&lt;/code&gt; that you can add to run code at specific times.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e7d0"&gt;&lt;code&gt;componentDidMount&lt;/code&gt; : Method called after your component has been added to the component tree.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6d92"&gt;&lt;code&gt;componentDidUpdate&lt;/code&gt; : Method called after your component has been updated.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9ee2"&gt;&lt;code&gt;componentWillUnmount&lt;/code&gt; : Method called just before your component is removed from the component tree.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7bd8"&gt;&lt;code&gt;Mounting&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="6f9e"&gt;&lt;code&gt;constructor&lt;/code&gt; method is called&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="e9c7"&gt;&lt;code&gt;render&lt;/code&gt; method is called&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="eef3"&gt;React updates the &lt;code&gt;DOM&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="19bb"&gt;&lt;code&gt;componentDidMount&lt;/code&gt; is called&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="85f1"&gt;&lt;code&gt;Updating&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="94f5"&gt;When component receives new &lt;code&gt;props&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="e635"&gt;&lt;code&gt;render&lt;/code&gt; method is called&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="70f9"&gt;React updates the &lt;code&gt;DOM&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="9507"&gt;&lt;code&gt;componentDidUpdate&lt;/code&gt; is called&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="b00a"&gt;When &lt;code&gt;setState&lt;/code&gt; is called&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="6864"&gt;&lt;code&gt;render&lt;/code&gt; method is called&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="e13b"&gt;React updates the &lt;code&gt;DOM&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="c459"&gt;&lt;code&gt;componentDidUpdate&lt;/code&gt; is called&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="bfdd"&gt;&lt;code&gt;Unmounting&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="10c1"&gt;The moment before a class component is removed from the component tree:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c214"&gt;&lt;code&gt;componentDidMount&lt;/code&gt; will be called. Avoiding the legacy lifecycle methods&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d438"&gt;Occasionally you will encounter some deprecated lifecycle methods:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1f6b"&gt;UNSAFE_componentWillMount&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="48ac"&gt;UNSAFE_componentWillReceiveProps&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="df27"&gt;UNSAFE_componentWillUpdate&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="af07"&gt;Just know they will be removed soon from React’s API, peace. Using the class component lifecycle methods &lt;em&gt;Exercise done in sep. directory&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="344c"&gt;Assorted Notes:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d6b1"&gt;Common Use for &lt;code&gt;componentDidMount&lt;/code&gt; lifecycle method is for fetching data from an API.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;—&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#react-context" class="anchor"&gt;
  &lt;/a&gt;
  React Context
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="e968"&gt;You can use &lt;code&gt;React Context&lt;/code&gt; to pass data through a component tree without having to manually thread props.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="89d9"&gt;Convenient way to share &amp;amp; update &lt;code&gt;global data&lt;/code&gt;. Creating a Context&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// PupContext.js&lt;br&gt;
import { createContext } from "react";&lt;br&gt;
const PupContext = createContext();&lt;br&gt;
export default PupContext;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a8bf"&gt;We use &lt;code&gt;React.createContext&lt;/code&gt; to create context.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="98b9"&gt;Keep in mind if you invoke this method with aruguments, those arguments will be set as default context. Adding a Provider to the App component&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a919"&gt;In order to pass context over to child components we need to wrap them in a provider component.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="9afc"&gt;The provider component takes in a value property that points to the information that needs to be passed to the children.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting up a Consumer&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {(value) =&amp;amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="2693"&gt;Keep in mind that &lt;code&gt;Context.Consumer&lt;/code&gt; expects a function as a child.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="19fc"&gt;The function has a value prop passed in from &lt;code&gt;Context.Provider&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#redux-explained" class="anchor"&gt;
  &lt;/a&gt;
  Redux Explained
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="eab4"&gt;JS Framework for managing the frontend state of a web application.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3c8b"&gt;Gives us ability to store information in an organized manner in a web app and quickly retrieve that information from anywhere in the app.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="695d"&gt;&lt;code&gt;Redux&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="00d5"&gt;Client Side Data Management&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="dd41"&gt;Controls “Frontend State”&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d828"&gt;NOT Your Database&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="855a"&gt;NOT Component State&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4c1a"&gt;Just used for managing Data&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmZqVlvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AN7KFfhOZZ7UrY8s4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmZqVlvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AN7KFfhOZZ7UrY8s4"&gt;&lt;/a&gt;-   &lt;span id="04c0"&gt;Visual of how an app without React manages it’s data.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="bae2"&gt;A lot of prop threading happening.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="989f"&gt;Data stored in a sep. location — &lt;code&gt;global data&lt;/code&gt;. The Anatomy of Redux&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="cd66"&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="9453"&gt;Holds the Frontend State&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="cea4"&gt;Provides an API for the Frontend State&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="c653"&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="7fb4"&gt;POJOs&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="69a1"&gt;Outline Changes to Frontend State&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="1a0a"&gt;&lt;code&gt;Reducers&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="a372"&gt;Functions&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="8bb8"&gt;Make Changes to Frontend State Where did Redux come from?&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="6d0b"&gt;There are three central philosophies of Redux:&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="12ac"&gt;&lt;code&gt;A Single Source of Truth&lt;/code&gt; : state is stored in a POJO&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="d178"&gt;&lt;code&gt;State is Read Only&lt;/code&gt; : State is immutable, modified by dispatching actions.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="51c5"&gt;&lt;code&gt;Changes are Made with Pure Functions&lt;/code&gt; : Reducers that receive the actions and return updated state are pure functions of the old state and action. When is it appropriate to use Redux?&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="117f"&gt;When doing a project with simpler global state requirements, it may be better to choose React’s Context API over Redux.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5d3d"&gt;Redux offers more flexibility and support for middleware along with richer developer tools. Vocabulary&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1ceb"&gt;&lt;code&gt;State&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="49e7"&gt;&lt;em&gt;Redux is a State Manager&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5018"&gt;State is all the information stored by that program at a particular point in time.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8fdb"&gt;Redux’s main job is to store the state and make it directly available to your entire app.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8bbd"&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f027"&gt;&lt;em&gt;Redux stores state in a single store&lt;/em&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c97e"&gt;Redux store is a single JS object with a couple of methods (not a class!)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="199d"&gt;Methods include: &lt;code&gt;getState&lt;/code&gt;, &lt;code&gt;dispatch(action)&lt;/code&gt;, and &lt;code&gt;subscribe(listener)&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8bcf"&gt;&lt;code&gt;Actions&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2049"&gt;&lt;em&gt;Redux store is updated by dispatching actions&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="cbac"&gt;Action is just a POJO that includes a mandatory &lt;code&gt;type&lt;/code&gt; property.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f2d5"&gt;Contain info to update the store.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1bd9"&gt;We dispatch actions in response to User actions or AJAX requests.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1b78"&gt;&lt;code&gt;Pure Functions&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c436"&gt;&lt;em&gt;Redux Reducers are Pure Functions&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e204"&gt;Functions are pure when their behavior depends only on it’s arguments as has no side effects.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="450b"&gt;Simply takes in an argument and outputs a value.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e146"&gt;&lt;code&gt;Reducer&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9721"&gt;&lt;em&gt;Redux handles actions using reducers&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c312"&gt;A function that is called each time an action is dispatched.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="84d8"&gt;Takes in an &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;current state&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="90a3"&gt;Required to be pure functions so their behavior is predictable.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5c36"&gt;&lt;code&gt;Middleware&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6b22"&gt;&lt;em&gt;Customize response to dispatch actions by using Middleware&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9287"&gt;Middleware is an optional component of Redus that allows custom responses to dispatched actions.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f953"&gt;Most common use is to dispatch async requests to a server.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="773e"&gt;&lt;code&gt;Time Traveling Dev Tools&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d703"&gt;&lt;em&gt;Redux can time travel wow&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7187"&gt;Time travel refers to Redux’s ability to revert to a previous state because reducers are all pure functions.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ada3"&gt;&lt;code&gt;Thunks&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ee0f"&gt;&lt;em&gt;Convenient format for taking async actions in Redux&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="586e"&gt;General concept in CS referring to a function who’s primary purpose is to call another function.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6f45"&gt;Most commonly used to make async API requests.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#flux-and%C2%A0redux" class="anchor"&gt;
  &lt;/a&gt;
  Flux and Redux
&lt;/h3&gt;

&lt;p&gt;What is Flux?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="06d1"&gt;Front-end application architecutre.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8311"&gt;A pattern in which to structure an application.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="05e6"&gt;Unidirectional Data Flow — offers more predictability.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="751c"&gt;&lt;code&gt;Actions&lt;/code&gt; : Begins the data flow of data, simple object that contains a type; type indicates the type of change to be performed.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e8e7"&gt;&lt;code&gt;Dispatcher&lt;/code&gt; : Mechanism for distributing actions to the store.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="af4f"&gt;&lt;code&gt;Store&lt;/code&gt; : The entire state of the application, responsible for updating the state of your app.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d7ff"&gt;&lt;code&gt;View&lt;/code&gt; : Unit of code that's responsible for rendering the user interface. Used to re-render the application when actions and changes occur.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---lNLd-vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AywV6dO4a4QcGJxK5" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lNLd-vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AywV6dO4a4QcGJxK5"&gt;&lt;/a&gt;-   &lt;span id="af94"&gt;Redux&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsJxcNhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANd73GjTY1PVQtjtQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsJxcNhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANd73GjTY1PVQtjtQ"&gt;&lt;/a&gt;-   &lt;span id="dc16"&gt;Library that facilitates the implementation of Flux.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="623a"&gt;Redux Three Principles&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="2ac6"&gt;&lt;code&gt;Single Source of Truth&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="a2b9"&gt;&lt;code&gt;State is Read-Only&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="897b"&gt;&lt;code&gt;Only Pure Functions Change State&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#store" class="anchor"&gt;
  &lt;/a&gt;
  Store
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="cd1e"&gt;Simply an object that holds the application state wrapped in an API.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f57c"&gt;&lt;code&gt;Three methods&lt;/code&gt;:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="354c"&gt;&lt;code&gt;getState()&lt;/code&gt; : Returns the store's current state.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="537c"&gt;&lt;code&gt;dispatch(action)&lt;/code&gt; : Passes an action into the store's reducer to tell it what info to update.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="4539"&gt;&lt;code&gt;subscribe(callback)&lt;/code&gt; : Registers a callback to be triggered whenever the store updates. Updating the Store&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;store.dispatch(action);&lt;br&gt;
// Add Orange Action&lt;br&gt;
const addOrange = {&lt;br&gt;
  type: "ADD_FRUIT",&lt;br&gt;
  fruit: "orange",&lt;br&gt;
};&lt;br&gt;
// Reducer for Orange Action&lt;br&gt;
const fruitReducer = (state = [], action) =&amp;gt; {&lt;br&gt;
  switch (action.type) {&lt;br&gt;
    case "ADD_FRUIT":&lt;br&gt;
      return [...state, action.fruit];&lt;br&gt;
    default:&lt;br&gt;
      return state;&lt;br&gt;
  }&lt;br&gt;
};&lt;br&gt;
// Run the Dispatch&lt;br&gt;
console.log(store.getState()); // []&lt;br&gt;
store.dispatch(addOrange);&lt;br&gt;
console.log(store.getState()); // [ 'orange' ]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Subscribing to the store&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1a02"&gt;Whenever a store process a dispatch(), it triggers all its subscribers.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="e667"&gt;&lt;code&gt;Subscribers&lt;/code&gt; : callbacks that can be added to the store via subscribe().&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const display = () =&amp;gt; {&lt;br&gt;
  console.log(store.getState());&lt;br&gt;
};&lt;br&gt;
const unsubscribeDisplay = store.subscribe(display);&lt;br&gt;
store.dispatch(addOrange); // [ 'orange', 'orange' ]&lt;br&gt;
// display will no longer be invoked after store.dispatch()&lt;br&gt;
unsubscribeDisplay();&lt;br&gt;
store.dispatch(addOrange); // no output&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reviewing a simple example&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// app.js
const { createStore } = require("redux");
// Define the store's reducer.
const fruitReducer = (state = [], action) =&amp;amp;gt; {
  switch (action.type) {
    case "ADD_FRUIT":
      return [...state, action.fruit];
    default:
      return state;
  }
};
// Create the store.
const store = createStore(fruitReducer);
// Define an 'ADD_FRUIT' action for adding an orange to the store.
const addOrange = {
  type: "ADD_FRUIT",
  fruit: "orange",
};
// Log to the console the store's state before and after
// dispatching the 'ADD_FRUIT' action.
console.log(store.getState()); // []
store.dispatch(addOrange);
console.log(store.getState()); // [ 'orange' ]
// Define and register a callback to listen for store updates
// and console log the store's state.
const display = () =&amp;amp;gt; {
  console.log(store.getState());
};
const unsubscribeDisplay = store.subscribe(display);
// Dispatch the 'ADD_FRUIT' action. This time the `display` callback
// will be called by the store when its state is updated.
store.dispatch(addOrange); // [ 'orange', 'orange' ]
// Unsubscribe the `display` callback to stop listening for store updates.
unsubscribeDisplay();
// Dispatch the 'ADD_FRUIT' action one more time
// to confirm that the `display` method won't be called
// when the store state is updated.
store.dispatch(addOrange); // no output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#reducers" class="anchor"&gt;
  &lt;/a&gt;
  Reducers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="98f3"&gt;Reducer function receives the current &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt;, updates the state appropriately based on the &lt;code&gt;action.type&lt;/code&gt; and returns the following state.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="4cee"&gt;You can bundles different action types and ensuing logic by using a switch/case statement.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const fruitReducer = (state = [], action) =&amp;gt; {&lt;br&gt;
  switch (action.type) {&lt;br&gt;
    case "ADD_FRUIT":&lt;br&gt;
      return [...state, action.fruit];&lt;br&gt;
    case "ADD_FRUITS":&lt;br&gt;
      return [...state, ...action.fruits];&lt;br&gt;
    case "SELL_FRUIT":&lt;br&gt;
      const index = state.indexOf(action.fruit);&lt;br&gt;
      if (index !== -1) {&lt;br&gt;
        // remove first instance of action.fruit&lt;br&gt;
        return [...state.slice(0, index), ...state.slice(index + 1)];&lt;br&gt;
      }&lt;br&gt;
      return state; // if action.fruit is not in state, return previous state&lt;br&gt;
    case "SELL_OUT":&lt;br&gt;
      return [];&lt;br&gt;
    default:&lt;br&gt;
      return state;&lt;br&gt;
  }&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reviewing how Array#slice works&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fruits = ["apple", "apple", "orange", "banana", "watermelon"];
// The index of the 'orange' element is 2.
const index = fruits.indexOf("orange");
// `...fruits.slice(0, index)` returns the array ['apple', 'apple']
// `...fruits.slice(index + 1)` returns the array ['banana', 'watermelon']
// The spread syntax combines the two array slices into the array
// ['apple', 'apple', 'banana', 'watermelon']
const newFruits = [...fruits.slice(0, index), ...fruits.slice(index + 1)];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="f322"&gt;Approach that can be used to remove an element without mutating the original array. Avoiding state mutations&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="f862"&gt;Your reducer must always return a new object if the state changes. GOOD&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const goodReducer = (state = { count: 0 }, action) =&amp;gt; {&lt;br&gt;
  switch (action.type) {&lt;br&gt;
    case "INCREMENT_COUNTER":&lt;br&gt;
      const nextState = Object.assign({}, state);&lt;br&gt;
      nextState.count++;&lt;br&gt;
      return nextState;&lt;br&gt;
    default:&lt;br&gt;
      return state;&lt;br&gt;
  }&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BAD&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const badReducer = (state = { count: 0 }, action) =&amp;amp;gt; {
  switch (action.type) {
    case "INCREMENT_COUNTER":
      state.count++;
      return state;
    default:
      return state;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#actions" class="anchor"&gt;
  &lt;/a&gt;
  Actions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="64b4"&gt;Actions are the only way to trigger changes to the store’s state. Using action creators&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const addOrange = {&lt;br&gt;
  type: "ADD_FRUIT",&lt;br&gt;
  fruit: "orange",&lt;br&gt;
};&lt;br&gt;
store.dispatch(addOrange);&lt;br&gt;
console.log(store.getState()); // [ 'orange' ]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="c39d"&gt;fruit is the &lt;code&gt;payload key&lt;/code&gt; and orange is the &lt;code&gt;state data&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="43e2"&gt;&lt;code&gt;Action Creators&lt;/code&gt; : Functions created from extrapolating the creation of an action object.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const addFruit = (fruit) =&amp;gt; ({&lt;br&gt;
  type: "ADD_FRUIT",&lt;br&gt;
  fruit,&lt;br&gt;
});&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="11fd"&gt;Use parenthesis for implicit return value.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="eea8"&gt;We can now add whatever fruit we’d like.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;store.dispatch(addFruit("apple"));&lt;br&gt;
store.dispatch(addFruit("strawberry"));&lt;br&gt;
store.dispatch(addFruit("lychee"));&lt;br&gt;
console.log(store.getState()); // [ 'orange', 'apple', 'strawberry', 'lychee' ]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preventing typos in action type string literals&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ADD_FRUIT = "ADD_FRUIT";
const ADD_FRUITS = "ADD_FRUITS";
const SELL_FRUIT = "SELL_FRUIT";
const SELL_OUT = "SELL_OUT";
const addFruit = (fruit) =&amp;amp;gt; ({
  type: ADD_FRUIT,
  fruit,
});
const addFruits = (fruits) =&amp;amp;gt; ({
  type: ADD_FRUITS,
  fruits,
});
const sellFruit = (fruit) =&amp;amp;gt; ({
  type: SELL_FRUIT,
  fruit,
});
const sellOut = () =&amp;amp;gt; ({
  type: SELL_OUT,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="ae86"&gt;Using constant variables helps reduce simple typos in a reducer’s case clauses.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#debugging-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Debugging Arrow Functions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="43c6"&gt;It is important to learn how to use debugger statements with arrow functions to effectively debug Redux cycle. Understanding the limitations of implicit return values&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;const addFruit = (fruit) =&amp;gt; {&lt;br&gt;
  return {&lt;br&gt;
    type: "ADD_FRUIT",&lt;br&gt;
    fruit,&lt;br&gt;
  };&lt;br&gt;
};&lt;br&gt;
const addFruit = (fruit) =&amp;gt; {&lt;br&gt;
  debugger;&lt;br&gt;
  return {&lt;br&gt;
    type: "ADD_FRUIT",&lt;br&gt;
    fruit,&lt;br&gt;
  };&lt;br&gt;
};&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="2806"&gt;You must use explicit return statement arrow function to use a debugger.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-router-introduction" class="anchor"&gt;
  &lt;/a&gt;
  React Router Introduction
&lt;/h3&gt;

&lt;p&gt;Now that you know how to render components in a React app, how do you handle rendering different components for different website pages? React Router is the answer!&lt;/p&gt;

&lt;p&gt;Think of how you have created server-side routes in Express. Take the following URL and server-side route. Notice how the &lt;code&gt;/users/:userId&lt;/code&gt; path corresponds with the &lt;code&gt;http://localhost:3000/users/2&lt;/code&gt; URL to render a specific HTML page.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// http://localhost:3000/users/2
app.get('/users/:userId', (req, res) =&amp;amp;gt; {
  res.render('userProfile.pug');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;In the default React setup, you lose the ability to create routes in the same manner as in Express. This is what React Router aims to solve!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ReactTraining/react-router"&gt;React Router&lt;/a&gt; is a frontend routing library that allows you to control which components to display using the browser location. A user can also copy and paste a URL and email it to a friend or link to it from their own website.&lt;/p&gt;

&lt;p&gt;When you finish this article, you should be able to use the following from the &lt;code&gt;react-router-dom&lt;/code&gt; library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="e5d3"&gt;`&lt;code&gt;to provide your application access to the&lt;/code&gt;react-router-dom` library; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e1cd"&gt;`` to connect specific URL paths to specific components you want rendered; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bf15"&gt;`&lt;code&gt;to wrap several&lt;/code&gt;Route` elements, rendering only one even if several match the current URL; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0318"&gt;React Router’s &lt;code&gt;match&lt;/code&gt; prop to access route path parameters.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#getting-started-with%C2%A0routing" class="anchor"&gt;
  &lt;/a&gt;
  Getting started with routing
&lt;/h3&gt;

&lt;p&gt;Since you are writing single page apps, you don’t want to refresh the page each time you change the browser location. Instead, you want to update the browser location and your app’s response using JavaScript. This is known as client-side routing. You are using React, so you will use React Router to do this.&lt;/p&gt;

&lt;p&gt;Create a simple react project template:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app --template @appacademy/simple
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then install React Router:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save react-router-dom@^5.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now import &lt;code&gt;BrowserRouter&lt;/code&gt; from &lt;code&gt;react-router-dom&lt;/code&gt; in your entry file:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter } from 'react-router-dom`;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#browserrouter" class="anchor"&gt;
  &lt;/a&gt;
  BrowserRouter
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BrowserRouter&lt;/code&gt; is the primary component of the router that wraps your route hierarchy. It creates a React context that passes routing information down to all its descendent components. For example, if you want to give &lt;code&gt;and all its children components access to React Router, you would wrap&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

const Root = () =&amp;amp;gt; {
  return (



  );
};

ReactDOM.render(


  ,
  document.getElementById('root'),
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now you can route the rendering of certain components to certain URLs (i.e &lt;code&gt;https://www.website.com/profile&lt;/code&gt;&lt;a href="https://www.website.com/profile%29."&gt;).&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hashrouter" class="anchor"&gt;
  &lt;/a&gt;
  HashRouter
&lt;/h3&gt;

&lt;p&gt;Alternatively, you could import and use &lt;code&gt;HashRouter&lt;/code&gt; from &lt;code&gt;react-router-dom&lt;/code&gt;. Links for applications that use `&lt;code&gt;would look like&lt;/code&gt;&lt;a href="https://www.website.com/#/profile%60"&gt;https://www.website.com/#/profile`&lt;/a&gt; (with an &lt;code&gt;#&lt;/code&gt; between the domain and path).&lt;/p&gt;

&lt;p&gt;You’ll focus on using the ``.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-frontend%C2%A0routes" class="anchor"&gt;
  &lt;/a&gt;
  Creating frontend routes
&lt;/h3&gt;

&lt;p&gt;React Router helps your React application render specific components based on the URL. The React Router component you’ll use most often is ``.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;component is used to wrap another component, causing that component to only be rendered if a certain URL is matched. The behavior of the&lt;/code&gt; component is controlled by the following props: &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;component&lt;/code&gt;, &lt;code&gt;exact&lt;/code&gt;, and &lt;code&gt;render&lt;/code&gt; (optional).&lt;/p&gt;

&lt;p&gt;Create a simple &lt;code&gt;Users&lt;/code&gt; component that returns &lt;code&gt;&amp;lt;h1&amp;gt;This is the users index!&amp;lt;/h1&amp;gt;&lt;/code&gt;. Now let's refactor your &lt;code&gt;index.js&lt;/code&gt; file so that you can create your routes within the component:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter, Route } from 'react-router-dom';
import App from './App';
import Users from './Users';

const Root = () =&amp;amp;gt; {
  return (


        {/* TODO: Routes */}


  );
};

ReactDOM.render(


  ,
  document.getElementById('root'),
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;BrowserRouter&lt;/code&gt; can only have a single child component, so the snippet above wraps all routes within parent a `` element. Now let's create some routes!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#component" class="anchor"&gt;
  &lt;/a&gt;
  component
&lt;/h3&gt;

&lt;p&gt;Begin with the &lt;code&gt;component&lt;/code&gt; prop. This prop takes a reference to the component to be rendered. Let's render your &lt;code&gt;App&lt;/code&gt; component:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Root = () =&amp;amp;gt; {
  return (





  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now you’ll need to connect a path to the component!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#path" class="anchor"&gt;
  &lt;/a&gt;
  path
&lt;/h3&gt;

&lt;p&gt;The wrapped component will only be rendered when the path is matched. The path matches the URL when it matches some initial portion of the URL. For example, a path of &lt;code&gt;/&lt;/code&gt; would match both of the following URLs: &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/users&lt;/code&gt;. (Because &lt;code&gt;/users&lt;/code&gt; begins with a &lt;code&gt;/&lt;/code&gt; it matches the path &lt;code&gt;/&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Take a moment to navigate to &lt;code&gt;http://localhost:3000/users&lt;/code&gt; to see how both the &lt;code&gt;App&lt;/code&gt; component and &lt;code&gt;Users&lt;/code&gt; component are rendering.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#exact" class="anchor"&gt;
  &lt;/a&gt;
  exact
&lt;/h3&gt;

&lt;p&gt;If this &lt;code&gt;exact&lt;/code&gt; flag is set, the path will only match when it exactly matches the URL. Then browsing to the &lt;code&gt;/users&lt;/code&gt; path would no longer match &lt;code&gt;/&lt;/code&gt; and only the &lt;code&gt;Users&lt;/code&gt; component will be rendered (instead of both the &lt;code&gt;App&lt;/code&gt; component and &lt;code&gt;Users&lt;/code&gt; component).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#render" class="anchor"&gt;
  &lt;/a&gt;
  render
&lt;/h3&gt;

&lt;p&gt;This is an optional prop that takes in a function to be called. The function will be called when the path matches. The function’s return value is rendered. You could also define a functional component inside the &lt;code&gt;component&lt;/code&gt; prop, but this results in extra, unnecessary work for React. The &lt;code&gt;render&lt;/code&gt; prop is preferred for inline rendering of simple functional components.&lt;/p&gt;

&lt;p&gt;The difference between using &lt;code&gt;component&lt;/code&gt; and &lt;code&gt;render&lt;/code&gt; is that &lt;code&gt;component&lt;/code&gt; returns new JSX to be re-mounted every time the route renders, while &lt;code&gt;render&lt;/code&gt; simply returns to JSX what will be mounted once and re-rendered. For any given route, you should only use either the &lt;code&gt;component&lt;/code&gt; prop, or the &lt;code&gt;render&lt;/code&gt; prop. If both are supplied, only the &lt;code&gt;component&lt;/code&gt; prop will be used.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This inline rendering will work, but is unnecessarily slow.
 &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;amp;gt;

// This is the preferred way for inline rendering.
 &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;It can be helpful to use &lt;code&gt;render&lt;/code&gt; instead of &lt;code&gt;component&lt;/code&gt; in your `&lt;code&gt;when you need to pass props into the rendered component. For example, imagine that you needed to pass the&lt;/code&gt;users&lt;code&gt;object as a prop to your&lt;/code&gt;Users&lt;code&gt;component. Then you could pass in props from&lt;/code&gt;Root&lt;code&gt;to&lt;/code&gt;Users&lt;code&gt;by returning the&lt;/code&gt;Users` component like so:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// `users` to be passed as a prop:
const users = {
  1: { name: 'Andrew' },
  2: { name: 'Raymond' }
};

 } /&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;As a reminder, &lt;code&gt;BrowserRouter&lt;/code&gt; can only have a single child component. That's why you have wrapped all your routes within parent a `` element.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Root = () =&amp;amp;gt; {
  const users = {
    1: { name: 'Andrew' },
    2: { name: 'Raymond' }
  };

  return (


        &amp;lt;h1&amp;gt;Hi, I'm Root!&amp;lt;/h1&amp;gt;

         &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;amp;gt;
         } /&amp;amp;gt;


  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;With this &lt;code&gt;Root&lt;/code&gt; component, you will always render the &lt;code&gt;&amp;lt;h1&amp;gt;Hi, I'm Root!&amp;lt;/h1&amp;gt;&lt;/code&gt;, regardless of the path. Because of the first &lt;code&gt;, you will only render the `App` component if the path exactly matches `/`. Because of the second&lt;/code&gt;, you will only render the &lt;code&gt;Users&lt;/code&gt; component if the path matches &lt;code&gt;/users&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#route-path%C2%A0params" class="anchor"&gt;
  &lt;/a&gt;
  Route path params
&lt;/h3&gt;

&lt;p&gt;A component’s props can also hold information about a URL’s parameters. The router will match route segments starting at &lt;code&gt;:&lt;/code&gt; up to the next &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;#&lt;/code&gt;. Those matched values are then passed to components via their props. Such segments are &lt;em&gt;wildcard&lt;/em&gt; values that make up your route parameters.&lt;/p&gt;

&lt;p&gt;For example, take the route below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; } /&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The router would break down the full &lt;code&gt;/users/:userId/photos&lt;/code&gt; path to two parts: &lt;code&gt;/users&lt;/code&gt;, &lt;code&gt;:userId&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Profile&lt;/code&gt; component's props would have access to the &lt;code&gt;:userId&lt;/code&gt; part of the &lt;code&gt;http://localhost:3000/users/:userId/photos&lt;/code&gt; URL through the &lt;code&gt;props&lt;/code&gt; with router parameter information. You would access the the &lt;code&gt;match&lt;/code&gt; prop's parameters (&lt;code&gt;props.match.params&lt;/code&gt;). If you are using the &lt;code&gt;render&lt;/code&gt; prop of the &lt;code&gt;Route&lt;/code&gt; component, make sure to spread the props back into the component if you want it to know about the "match" parameters.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Route's `render` prop allows you to pass the `users`
// prop and spread the router `props`.
render={(props) =&amp;amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; object would then have a property of &lt;code&gt;userId&lt;/code&gt; which would hold the value of the &lt;code&gt;:userId&lt;/code&gt; &lt;em&gt;wildcard&lt;/em&gt; value. Let's render the &lt;code&gt;userId&lt;/code&gt; parameter in a user profile component. Take a moment to create a &lt;code&gt;Profile.js&lt;/code&gt; file with the following code:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/Profile.js
import React from "react";

const Profile = (props) =&amp;amp;gt; (

    The user's id is {props.match.params.userId}.

);

export default Profile;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Notice how it uses the &lt;code&gt;match&lt;/code&gt; prop to access the &lt;code&gt;:userId&lt;/code&gt; parameter from the URL. You can use this wildcard to make and AJAX call to fetch the user information from the database and render the return data in the &lt;code&gt;Profile&lt;/code&gt; component. Recall that your &lt;code&gt;Profile&lt;/code&gt; component was rendered at the path &lt;code&gt;/users/:userId&lt;/code&gt;. Thus you can use your &lt;code&gt;userId&lt;/code&gt; parameters from &lt;code&gt;match.params&lt;/code&gt; to fetch a specific user:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/Profile.js
import React from "react";

const Profile = ({ users, match: { params } }) =&amp;amp;gt; {

  // In a real-world scenario, you'd make a call to an API to fetch the user,
  // instead of passing down and keying into a `users` prop.
  const user = users[params.userId];

  return (

      The user's id is {params.userId} and the user's name is {user.name}.

  );
};

export default Profile;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#match" class="anchor"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;Now that you’ve seen your React Router’s &lt;code&gt;match&lt;/code&gt; prop in action, let's go over more about &lt;a href="https://reacttraining.com/react-router/web/api/Route/route-props"&gt;route props&lt;/a&gt;! React Router passes information to the components as route props, accessible to all components with access to the React Router. The three props it makes available are &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt;. You've learned about &lt;code&gt;props.match.params&lt;/code&gt;, but now let's review the other properties of the &lt;code&gt;match&lt;/code&gt; prop!&lt;/p&gt;

&lt;p&gt;This is an object that contains important information about how the current URL matches the route path. Here are some of the more useful keys on the &lt;code&gt;match&lt;/code&gt; object:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1d2c"&gt;&lt;code&gt;isExact&lt;/code&gt;: a boolean that tells you whether or not the URL exactly matches the path&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b558"&gt;&lt;code&gt;url&lt;/code&gt;: the current URL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ab28"&gt;&lt;code&gt;path&lt;/code&gt;: the route path it matched against (without wildcards filled in)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="be5b"&gt;&lt;code&gt;params&lt;/code&gt;: the matches for the individual wildcard segments, nested under their names&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you use React Router, the browser &lt;code&gt;location&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt; are a part of the state of your app. You can store information about which component should be displayed, which user profile you are currently viewing, or any other piece of state, in the browser location. You can then access that information from anywhere your Router props are passed to in your app.&lt;/p&gt;

&lt;p&gt;Now that you’ve learned about parameters and route props, let’s revisit your &lt;code&gt;Root&lt;/code&gt; component to add an &lt;code&gt;exact&lt;/code&gt; flag to your &lt;code&gt;/users&lt;/code&gt; route so that it does not render with your &lt;code&gt;/users/:userId&lt;/code&gt; route. Your component should look something like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Root = () =&amp;amp;gt; {
  const users = {
    1: { name: 'Andrew' },
    2: { name: 'Raymond' }
  };

  return (

      &amp;lt;h1&amp;gt;Hi, I'm Root!&amp;lt;/h1&amp;gt;


         &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;amp;gt;

        {/* Render the `Users` page if no ID is included. */}
         } /&amp;amp;gt;

        {/* Otherwise, render the profile page for that userId. */}
         } /&amp;amp;gt;


  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#what-you%C2%A0learned" class="anchor"&gt;
  &lt;/a&gt;
  What you learned
&lt;/h3&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="92fc"&gt;Use components from the React Router library; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="19b5"&gt;Create routes to render specific components; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="fc9d"&gt;Manage the order of rendered routes; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3281"&gt;Use the &lt;code&gt;exact&lt;/code&gt; flag to ensure that a specific path renders a specific component; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3949"&gt;Use the React Router &lt;code&gt;match&lt;/code&gt; prop to access Router params.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-router-navigation" class="anchor"&gt;
  &lt;/a&gt;
  React Router Navigation
&lt;/h3&gt;

&lt;p&gt;Now that you know how to create front-end routes with React Router, you’ll need to implement a way for your users to navigate the routes! This is what using React Router’s &lt;code&gt;Link&lt;/code&gt;, &lt;code&gt;NavLink&lt;/code&gt;, &lt;code&gt;Redirect&lt;/code&gt;, and &lt;code&gt;history&lt;/code&gt; prop can help you do.&lt;/p&gt;

&lt;p&gt;In this article, you’ll be working off of the demo project you built in the React Router Intro reading. When you finish this article, you should be able to use the following components from the &lt;code&gt;react-router-dom&lt;/code&gt; library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="76bc"&gt;&lt;code&gt;or&lt;/code&gt; to create links with absolute paths to routes in your application (like "/users/1"); and,&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="cdc2"&gt;`` to redirect a user to another path (i.e. a login page when the user is not logged in); and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d8a7"&gt;React Router’s &lt;code&gt;history&lt;/code&gt; prop to update a browser's URL programmatically.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#adding-links-for-navigation" class="anchor"&gt;
  &lt;/a&gt;
  Adding links for navigation
&lt;/h3&gt;

&lt;p&gt;React Router’s &lt;code&gt;is one way to simplify navigation around your app. It issues an on-click navigation event to a route defined in your app's router. Using&lt;/code&gt; renders an anchor tag with a correctly set &lt;code&gt;href&lt;/code&gt; attribute.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link" class="anchor"&gt;
  &lt;/a&gt;
  Link
&lt;/h3&gt;

&lt;p&gt;To use it, update your imports from the &lt;code&gt;react-router-dom&lt;/code&gt; package to include &lt;code&gt;Link&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter, Route, Link } from 'react-router-dom';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Note that `&lt;code&gt;can take two props:&lt;/code&gt;to&lt;code&gt;and&lt;/code&gt;onClick`.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;to&lt;/code&gt; prop is a route location description that points to an absolute path, (i.e. &lt;code&gt;/users&lt;/code&gt;). Add the following &lt;code&gt;Link&lt;/code&gt; components in your &lt;code&gt;index.js&lt;/code&gt; file above your routes:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;App
Users
Andrew's Profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;onClick&lt;/code&gt; prop is just like any other JSX click handler. You can write a function that takes in an &lt;code&gt;event&lt;/code&gt; and handles it. Add the following &lt;code&gt;Link&lt;/code&gt; before your routes and the following click handler function within your &lt;code&gt;Root&lt;/code&gt; component:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Link with onClick prop
App with click handler

// Click handler function
const handleClick = () =&amp;amp;gt; {
  console.log('Thanks for clicking!')
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now, test your routes and links! If you inspect the page, you’ll see that your links are now rendered as &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements. Notice that clicking the &lt;code&gt;App with click handler&lt;/code&gt; link logs a message in your console while directing your browser to render the &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#navlink" class="anchor"&gt;
  &lt;/a&gt;
  NavLink
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;works just like a&lt;/code&gt;, but with a little extra functionality. It has the ability to add extra styling when the path it links to matches the current path. This makes it an ideal choice for a navigation bar, hence the name. This styling can be controlled by three extra props: &lt;code&gt;activeClassName&lt;/code&gt;, &lt;code&gt;activeStyle&lt;/code&gt;, and &lt;code&gt;exact&lt;/code&gt;. To begin using &lt;code&gt;NavLink&lt;/code&gt;, update your imports from the &lt;code&gt;react-router-dom&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter, Route, NavLink } from 'react-router-dom';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;activeClassName&lt;/code&gt; prop of the &lt;code&gt;NavLink&lt;/code&gt; component allows you to set a CSS class name for styling the &lt;code&gt;NavLink&lt;/code&gt; when its route is active. By default, the &lt;code&gt;activeClassName&lt;/code&gt; is already set to &lt;code&gt;active&lt;/code&gt;. This means that you simply need to add an &lt;code&gt;.active&lt;/code&gt; class to your CSS file to add active styling to your link. A &lt;code&gt;NavLink&lt;/code&gt; will be active if its &lt;code&gt;to&lt;/code&gt; prop path matches the current URL.&lt;/p&gt;

&lt;p&gt;Let’s change your “Users”, “Hello”, and “Andrew’s Profile” links to be different colors and have a larger font size when active.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;App
Users
Hello
Andrew's Profile
App with click handler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For example, this is what the rendered HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag would look like when when the browser is navigated to the &lt;code&gt;/&lt;/code&gt; path or the &lt;code&gt;/users&lt;/code&gt; path:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;/a&amp;gt;&amp;lt;a href="/"&amp;gt;App&amp;lt;/a&amp;gt;


&amp;lt;a href="/"&amp;gt;App&amp;lt;/a&amp;gt;


&amp;lt;a href="/users"&amp;gt;Users&amp;lt;/a&amp;gt;


&amp;lt;a href="/users"&amp;gt;Users&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Import &lt;code&gt;NavLink&lt;/code&gt; into your &lt;code&gt;index.js&lt;/code&gt; file and take a moment to update all your &lt;code&gt;Link&lt;/code&gt; elements to &lt;code&gt;NavLink&lt;/code&gt; elements. Set an &lt;code&gt;activeClassName&lt;/code&gt; prop to an &lt;code&gt;active&lt;/code&gt; class. Add the following &lt;code&gt;.active&lt;/code&gt; class to your &lt;code&gt;index.css&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.active {
  font-weight: bold;
}

.red {
  color: red;
  font-size: 30px;
}

.blue {
  color: blue;
  font-size: 30px;
}

.green {
  color: green;
  font-size: 30px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Test your styled links! Notice how the &lt;code&gt;App&lt;/code&gt; and &lt;code&gt;App with click handler&lt;/code&gt; links are always bolded. This is because all of your links include the &lt;code&gt;/&lt;/code&gt; path, meaning that the link to &lt;code&gt;/&lt;/code&gt; will be active when browsing to &lt;code&gt;/users&lt;/code&gt; and &lt;code&gt;/users/1&lt;/code&gt; because of how &lt;code&gt;users&lt;/code&gt; and &lt;code&gt;users/1&lt;/code&gt; are both prefaced by a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;activeStyle&lt;/code&gt; prop is a style object that will be applied inline to the &lt;code&gt;NavLink&lt;/code&gt; when its &lt;code&gt;to&lt;/code&gt; prop matches the current URL. Add the following &lt;code&gt;activeStyle&lt;/code&gt; to your &lt;code&gt;App&lt;/code&gt; link and comment out the &lt;code&gt;.active&lt;/code&gt; class in your CSS file.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The following html is rendered when at the &lt;code&gt;/&lt;/code&gt; path:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="/"&amp;gt;App&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Notice how your &lt;code&gt;App with click handler&lt;/code&gt; is not bolded anymore. This is because the default &lt;code&gt;active&lt;/code&gt; class being applied does not have any CSS stylings set to the class. Uncomment your &lt;code&gt;.active&lt;/code&gt; class in your CSS file to bring back bolding to this NavLink.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;exact&lt;/code&gt; prop is a boolean that defaults to &lt;code&gt;false&lt;/code&gt;. If set to &lt;code&gt;true&lt;/code&gt;, then the &lt;code&gt;activeStyle&lt;/code&gt; and &lt;code&gt;activeClassName&lt;/code&gt; props will only be applied when the current URL exactly matches the &lt;code&gt;to&lt;/code&gt; prop. Update your &lt;code&gt;App&lt;/code&gt; and &lt;code&gt;App with click handler&lt;/code&gt; links with an &lt;code&gt;exact&lt;/code&gt; prop set. Just like in your routes, you can use the &lt;code&gt;exact&lt;/code&gt; flag instead of &lt;code&gt;exact={true}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;App
App with click handler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now your &lt;code&gt;App&lt;/code&gt; and &lt;code&gt;App with click handler&lt;/code&gt; links will only be bolded when you have navigated precisely to the &lt;code&gt;/&lt;/code&gt; path.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#switching-between%C2%A0routes" class="anchor"&gt;
  &lt;/a&gt;
  Switching between routes
&lt;/h3&gt;

&lt;p&gt;You came across styling issues when the &lt;code&gt;/users&lt;/code&gt; and &lt;code&gt;/users/1&lt;/code&gt; paths matched the &lt;code&gt;/&lt;/code&gt; path. Routing can have this issue as well. This is why you need to control the switching between routes.&lt;/p&gt;

&lt;p&gt;React Router’s &lt;code&gt;component allows you to only render one&lt;/code&gt; even if several match the current URL. You can nest as many &lt;code&gt;Route&lt;/code&gt;s as you wish between the opening and closing &lt;code&gt;Switch&lt;/code&gt; tags, but only the first one that matches the current URL will be rendered.&lt;/p&gt;

&lt;p&gt;This is particularly useful if you want a default component that will only render if none of our other routes match. View the example below. Without the Switch, &lt;code&gt;DefaultComponent&lt;/code&gt; would always render. Since there isn't set a path in the &lt;code&gt;DefaultComponent&lt;/code&gt; route, it will simply use the default path of &lt;code&gt;/&lt;/code&gt;. Now the &lt;code&gt;DefaultComponent&lt;/code&gt; will only render when neither of the preceding routes match.&lt;/p&gt;

&lt;p&gt;Import &lt;code&gt;Switch&lt;/code&gt; from &lt;code&gt;react-router-dom&lt;/code&gt; and add `&lt;code&gt;tags around your routes to take care of ordering and switching between your routes! Begin by adding the following route to the bottom of your routes to render that a&lt;/code&gt;404: Page not found` message:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;h1&amp;gt;404: Page not found&amp;lt;/h1&amp;gt;} /&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This is what your &lt;code&gt;Root&lt;/code&gt; component should look like at this point:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Root = () =&amp;amp;gt; {
  const users = [
    { name: 'andrew' },
    { name: 'raymond' }
  ];

  const handleClick = () =&amp;amp;gt; {
    console.log('Thanks for clicking!')
  };

  return (

      &amp;lt;h1&amp;gt;Hi, I'm Root!&amp;lt;/h1&amp;gt;


        App
        Users
        Hello
        Andrew's Profile
        App with click handler


           } /&amp;amp;gt;
           } /&amp;amp;gt;
           &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;} /&amp;amp;gt;

           &amp;lt;h1&amp;gt;404: Page not found&amp;lt;/h1&amp;gt;} /&amp;amp;gt;



  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now you have control over the precedence of rendered components! Try navigating to &lt;code&gt;http://localhost:3000/asdf&lt;/code&gt; or any other route you have not defined. The &lt;code&gt;&amp;lt;h1&amp;gt;404: Page not found&amp;lt;/h1&amp;gt;&lt;/code&gt; JSX of the last `` will be rendered whenever the browser attempts to visit an undefined route.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#redirecting-users" class="anchor"&gt;
  &lt;/a&gt;
  Redirecting users
&lt;/h3&gt;

&lt;p&gt;But what if you want to redirect users to a login page when they aren’t logged in? The `` component from React Router helps you redirect users!&lt;/p&gt;

&lt;p&gt;The component takes only one prop: &lt;code&gt;to&lt;/code&gt;. When it renders, it replaces the current URL with the value of its &lt;code&gt;to&lt;/code&gt; prop. Typically you conditionally render &lt;code&gt;to redirect the user away from some page you don't want them to visit. The example below checks whether there is a defined `currentUser` prop. If so, the&lt;/code&gt; will render the &lt;code&gt;Home&lt;/code&gt; component. Otherwise, it will redirect the user to the &lt;code&gt;/login&lt;/code&gt; path.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; (this.props.currentUser ?  : )}
/&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Note: you will learn how to use a more flexible auth pattern — don’t directly imitate this example.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#history" class="anchor"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;You know how to redirect users with a `&lt;code&gt;component, but what if you need to redirect users programmatically? You've learned about the React Router's&lt;/code&gt;match&lt;code&gt;prop, but now let's go over another one of the &amp;lt;a href="https://reacttraining.com/react-router/web/api/Route/route-props"&amp;gt;route props&amp;lt;/a&amp;gt;:&lt;/code&gt;history`!&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Pushing a new URL (and adding to the end of history stack):
const handleClick = () =&amp;amp;gt; this.props.history.push('/some/url');

// Replacing the current URL (won't be tracked in history stack):
const redirect = () =&amp;amp;gt; this.props.history.replace('/some/other/url');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This prop lets you update the URL programmatically. For example, suppose you want to push a new URL when the user clicks a button. It has two useful methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="31f3"&gt;&lt;code&gt;push&lt;/code&gt; - This adds a new URL to the end of the history stack. That means that clicking the back button will take the browser to the previous URL. Note that pushing the same URL multiple times in a row will have no effect; the URL will still only show up on the stack once. In development mode, pushing the same URL twice in a row will generate a console warning. This warning is disabled in production mode.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="90c1"&gt;&lt;code&gt;replace&lt;/code&gt; - This replaces the current URL on the history stack, so the back button won't take you to it. For example:&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-you%C2%A0learned" class="anchor"&gt;
  &lt;/a&gt;
  What you learned
&lt;/h3&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="169b"&gt;Create navigation links for your route paths; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d108"&gt;Redirect users through using the `` component; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d090"&gt;Update a browser’s URL programmatically by using React Router’s &lt;code&gt;history&lt;/code&gt; prop.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-router-nested%C2%A0routes" class="anchor"&gt;
  &lt;/a&gt;
  React Router Nested Routes
&lt;/h3&gt;

&lt;p&gt;Now you know how to create front-end routes and add navigation with React Router. When initializing Express projects, you declare static routes. Static routes are routes that are declared when an application is initialized. When using React Router in your application’s initialization, you can declare dynamic routes. React Router introduces dynamic routing, where your routes are created as your application is rendering. This allows you to create nested routes within components!&lt;/p&gt;

&lt;p&gt;In this article, let’s dive into &lt;a href="https://reacttraining.com/react-router/core/guides/philosophy/nested-routes"&gt;nested routes&lt;/a&gt;! When you finish the article, you should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="38ee"&gt;Describe what nested routes are; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0559"&gt;Be able to use React Router to create and navigate nested routes; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ce4a"&gt;Know how to use the React Router &lt;code&gt;match&lt;/code&gt; prop to generate links and routes.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#why-nested%C2%A0routes" class="anchor"&gt;
  &lt;/a&gt;
  Why nested routes?
&lt;/h3&gt;

&lt;p&gt;Let’s begin with why you might need nested routes. As you remember, you are using React to create a single-page application. This means that you’ll be organizing your application into different components and sub-components.&lt;/p&gt;

&lt;p&gt;For example, imagine creating a simple front-end application with three main pages: a home welcome page (path of &lt;code&gt;/&lt;/code&gt;), a users index page (path of &lt;code&gt;/users&lt;/code&gt;), and user profile pages (path of &lt;code&gt;/users/:userId&lt;/code&gt;). Now imagine if every user had links to separate &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;photos&lt;/code&gt; pages.&lt;/p&gt;

&lt;p&gt;You can create those routes and links within the user profile component, instead of creating the routes and links where the main routes are defined.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-nested%C2%A0routes" class="anchor"&gt;
  &lt;/a&gt;
  What are nested routes?
&lt;/h3&gt;

&lt;p&gt;Now let’s dive into a user profile component to understand what are nested routes! Imagine you have a route in your application’s entry file to each user’s profile like so:&lt;/p&gt;

&lt;p&gt;This means that upon navigating to &lt;code&gt;http://localhost:3000/users/1&lt;/code&gt;, you would render the following &lt;code&gt;Profile&lt;/code&gt; component and the &lt;code&gt;userId&lt;/code&gt; parameter within &lt;code&gt;props.match.params&lt;/code&gt; would have the value of &lt;code&gt;"1"&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Profile = (props) =&amp;amp;gt; {
  // Custom call to database to fetch a user by a user ID.
  const user = fetchUser(props.match.params.userId);
  const { name, id } = user;

  return (

      &amp;lt;h1&amp;gt;Welcome to the profile of {name}!&amp;lt;/h1&amp;gt;

      {/* Links to a specific user's posts and photos */}
      {name}'s Posts
      {name}'s Photos

      {/* Routes to a specific user's posts and photos */}



  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Since this route is not created until the &lt;code&gt;Profile&lt;/code&gt; component is rendered, you are dynamically creating your nested &lt;code&gt;/users/:userId/posts&lt;/code&gt; and &lt;code&gt;/users/:userId/photos&lt;/code&gt; routes. Remember that your &lt;code&gt;match&lt;/code&gt; prop also has other helpful properties. You can use &lt;code&gt;match.url&lt;/code&gt; instead of &lt;code&gt;/users/${id}&lt;/code&gt; in your profile links. You can also use &lt;code&gt;match.path&lt;/code&gt; instead of &lt;code&gt;/users/:userId&lt;/code&gt; in your profile routes. Remember that you can destructure &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, and &lt;code&gt;params&lt;/code&gt; from your &lt;code&gt;match&lt;/code&gt; prop!&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Destructure `match` prop
const Profile = ({ match: { url, path, params }) =&amp;amp;gt; {

  // Custom call to database to fetch a user by a user ID.
  const user = fetchUser(params.userId);
  const { name, id } = user;

  return (

      &amp;lt;h1&amp;gt;Welcome to the profile of {name}!&amp;lt;/h1&amp;gt;

      {/* Replaced `/users/${id}` URL with `props.match.url` */}
      {name}'s Posts
      {name}'s Photos

      {/* Replaced `/users/:userId` path with `props.match.path` */}


    }
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;In tomorrow’s project, you’ll build a rainbow of routes as well as define nested routes. In the future, you may choose to implement nested routes to keep your application’s routes organized within related components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-you%C2%A0learned" class="anchor"&gt;
  &lt;/a&gt;
  What you learned
&lt;/h3&gt;

&lt;p&gt;In this article, you learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2378"&gt;What nested routes are; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e072"&gt;About creating and navigating nested routes with React Router; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c8b8"&gt;How to use the React Router props to generate nested links and routes.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-builds" class="anchor"&gt;
  &lt;/a&gt;
  React Builds
&lt;/h3&gt;

&lt;p&gt;A “build” is the process of converting code into something that can actually execute or run on the target platform. A “front-end build” is a process of preparing a front-end or client-side application for the browser.&lt;/p&gt;

&lt;p&gt;With React applications, that means (at a minimum) converting JSX to something that browsers can actually understand. When using Create React App, the build process is automatically configured to do that and a lot more.&lt;/p&gt;

&lt;p&gt;When you finish this article, you should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2448"&gt;Describe what front-end builds are and why they’re needed;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="efab"&gt;Describe at a high level what happens in a Create React App when you run &lt;code&gt;npm start&lt;/code&gt;; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="502f"&gt;Prepare to deploy a React application into a production environment.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#understanding-frontend-builds" class="anchor"&gt;
  &lt;/a&gt;
  Understanding front-end builds
&lt;/h3&gt;

&lt;p&gt;The need for front-end builds predates React. Over the years, developers have found it helpful to extend the lowest common denominator version of JavaScript and CSS that they could use.&lt;/p&gt;

&lt;p&gt;Sometimes developers extend JavaScript and CSS with something like &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; or &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt;. Using these non-standard languages and syntaxes require you to use a build process to convert your code into standard JavaScript and CSS that can actually run in the browser.&lt;/p&gt;

&lt;p&gt;Browser-based applications also require a fair amount of optimization to deliver the best, or at least acceptable, experience to end users. Front-end build processes could be configured to lint code, run unit tests, optimize images, minify and bundle code, and more — all automatically at the press of a button (i.e. running a command at the terminal).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-versions-and-the-growth-of-frontend-builds" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript versions and the growth of front-end builds
&lt;/h3&gt;

&lt;p&gt;Developers are generally an impatient lot. When new features are added to JavaScript, we don’t like to wait for browsers to widely support those features before we start to use them in our code. And we &lt;em&gt;really&lt;/em&gt; don’t like when we have to support older, legacy versions of browsers.&lt;/p&gt;

&lt;p&gt;In recent years, JavaScript has been updated on a yearly basis and browser vendors do a decent job of updating their browsers to support the new features as they’re added to the language. Years ago though, there was an infamous delay between versions 5 and 6 of JavaScript. It took &lt;em&gt;years&lt;/em&gt; before ES6 (or ES2015 as it eventually was renamed to) to officially be completed and even longer before browsers supported all of its features.&lt;/p&gt;

&lt;p&gt;In the period of time before ES2015 was broadly supported by browsers, developers used front-end builds to convert or &lt;em&gt;transpile&lt;/em&gt; ES2015 features and syntax to an older version of the language that was more broadly supported by browsers (typically ES5). The transpilation from ES2015/ES6 down to ES5 was one of the major drivers for developers to add front-end builds to their client-side projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reviewing-common-terminology" class="anchor"&gt;
  &lt;/a&gt;
  Reviewing common terminology
&lt;/h3&gt;

&lt;p&gt;When learning about front-end or React builds, you’ll encounter a lot of terminology that you may or may not be familiar with. Here’s some of the terminology that you’ll likely encounter:&lt;/p&gt;

&lt;p&gt;Linting is process of using a tool to analyze your code to catch common programming errors, bugs, stylistic inconsistencies, and suspicious coding patterns. &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; is a popular JavaScript linting tool.&lt;/p&gt;

&lt;p&gt;Transpilation is the process of converting source code, like JavaScript, from one version to another version. Usually this means converting newer versions of JavaScript, &lt;a href="https://www.ecma-international.org/ecma-262/10.0/index.html"&gt;ES2019&lt;/a&gt; or &lt;a href="https://tc39.es/ecma262/"&gt;ES2021&lt;/a&gt;, to a version that’s more widely supported by browsers, like &lt;a href="http://www.ecma-international.org/ecma-262/6.0/"&gt;ES2015&lt;/a&gt;, or even &lt;a href="https://www.ecma-international.org/ecma-262/5.1/"&gt;ES5&lt;/a&gt; or &lt;a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf"&gt;ES3&lt;/a&gt; (if you need to support the browser that your parents or grandparents use).&lt;/p&gt;

&lt;p&gt;Minification is the process of removing all unnecessary characters in your code (e.g. white space characters, new line characters, comments) to produce an overall smaller file. Minification tools will often also rename identifers in your code (i.e. parameter and variable names) in the quest for smaller and smaller file sizes. Source maps can also be generated to allow debugging tools to cross reference between minified code and the original source code.&lt;/p&gt;

&lt;p&gt;Bundling is the process of combining multiple code files into a single file. Creating a bundle (or a handful of bundles) reduces the number of requests that a client needs to make to the server.&lt;/p&gt;

&lt;p&gt;Tree shaking is the process of removing unused (or dead) code from your application before it’s bundled. Tree shaking external dependencies can sometimes have a dramatic positive impact on overall bundled file sizes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuration-or%C2%A0code" class="anchor"&gt;
  &lt;/a&gt;
  Configuration or code?
&lt;/h3&gt;

&lt;p&gt;Front-end build tools have come and gone over the years; sometimes very quickly, which helped bring about the phenomenon known as &lt;a href="https://sdtimes.com/softwaredev/is-the-javascript-fatigue-real/"&gt;JavaScript fatigue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Configuration based tools allow you to create your build tasks by declaring (usually using JSON, XML, or YAML) what you want to be done, without explicitly writing every step in the process. In contrast, coding or scripting based tools allow you to, well, write code to create your build tasks. Configuration based tools &lt;em&gt;can&lt;/em&gt; sometimes feel simpler to use while giving up some control (at least initially) while coding based tools &lt;em&gt;can&lt;/em&gt; feel more familiar and predictable (since you’re describing tasks procedurally). Every generalization is false though (including this one), so there are plenty of exceptions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; is a JSON configuration based task runner that can be used to orchestrate the various tasks that make up your front-end build. Grunt was very quickly supplanted by &lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt;, which allowed developers to write JavaScript to define front-end build tasks. After Gulp, the front-end tooling landscape became a bit more muddled. Some developers preferred the simplicity of using &lt;a href="https://docs.npmjs.com/misc/scripts"&gt;npm scripts&lt;/a&gt; to define build tasks while others preferred the power of configuration based bundlers like &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#babel-and-webpack-yes-thats-intentionally-a-lowercase-w" class="anchor"&gt;
  &lt;/a&gt;
  Babel and webpack (yes, that’s intentionally a lowercase ‘w’)
&lt;/h3&gt;

&lt;p&gt;As front-end or client-side applications grew in complexity, developers found themselves wanting to leverage more advanced JavaScript features and newer syntax like classes, arrow functions, destructuring, async/await, etc. Using a code transpiler, like &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;, allows you to use all of the latest and greatest features and syntax without worrying about what browsers support what.&lt;/p&gt;

&lt;p&gt;Module loaders and bundlers, like &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;, also allowed developers to use JavaScript modules without requiring users to use a browser that natively supports ES modules. Also, module bundling (along with minification and tree-shaking) helps to reduce the bandwidth that’s required to deliver the assets for your application to the client.&lt;/p&gt;

&lt;p&gt;[Create React App][cra] uses webpack (along with Babel) under the covers to build your React applications. Even if you’re not using Create React App, webpack and Babel are still very popular choices for building React applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pulling-back-the-covers-a-bit-on-the-create-react-app-build%C2%A0process" class="anchor"&gt;
  &lt;/a&gt;
  Pulling back the covers (a bit) on the Create React App build process
&lt;/h3&gt;

&lt;p&gt;Running an application created by Create React App using &lt;code&gt;npm start&lt;/code&gt; can feel magical. Some stuff happens in the terminal and your application opens into your default browser. Even better, when you make changes to your application, your changes will (usually) automatically appear in the browser!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-create-react-app-build%C2%A0process" class="anchor"&gt;
  &lt;/a&gt;
  The Create React App build process
&lt;/h3&gt;

&lt;p&gt;At a high level, here’s what happens when you run &lt;code&gt;npm start&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2808"&gt;Environment variables are loaded (more about this in a bit);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f272"&gt;The list of browsers to support are checked (more about this too in a bit);&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="71b2"&gt;The configured HTTP port is checked to ensure that it’s available;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f826"&gt;The application compiler is configured and created;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c605"&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; is started;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a696"&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; compiles your application;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c66e"&gt;The &lt;code&gt;index.html&lt;/code&gt; file is loaded into the browser; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6add"&gt;A file watcher is started to watch your files, waiting for changes.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#ejecting" class="anchor"&gt;
  &lt;/a&gt;
  Ejecting
&lt;/h3&gt;

&lt;p&gt;Create React App provides a script that you can run to “eject” your application from the Create React App tooling. When you eject your application, all of the hidden stuff is exposed so that you can review and customize it.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;The need to customize Create React App rarely happens. Also, don’t eject an actual project as it’s a one-way trip! Once a Create React App project has been ejected, there’s no going back (though you could always undo the ejection process by reverting to an earlier commit if you’re using source control).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To eject your application from Create React App, run the command &lt;code&gt;npm run eject&lt;/code&gt;. You'll be prompted if you want to continue; type "y" to continue with the ejection process. Once the ejection process has completed, you can review the files that were previously hidden from you.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;package.json&lt;/code&gt; file, you'll see the following npm scripts:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "scripts": {
    "start": "node scripts/start.js",
    "build": "node scripts/build.js",
    "test": "node scripts/test.js"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can open the &lt;code&gt;./scripts/start.js&lt;/code&gt; file to see the code that's executed when you run &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re curious about the webpack configuration, you can open and review the &lt;code&gt;./config/webpack.config.js&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#preparing-to-deploy-a-react-application-for-production" class="anchor"&gt;
  &lt;/a&gt;
  Preparing to deploy a React application for production
&lt;/h3&gt;

&lt;p&gt;Before you deploy your application to production, you’ll want to make sure that you’ve replaced static values in your code with environment variables and considered what browsers you need to support.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defining-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  Defining environment variables
&lt;/h3&gt;

&lt;p&gt;Create React App supports defining environment variables in an &lt;code&gt;.env&lt;/code&gt; file. To define an environment variable, add an &lt;code&gt;.env&lt;/code&gt; file to your project and define one or more variables that start with the prefix &lt;code&gt;REACT_APP_&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_FOO: some value
REACT_APP_BAR: another value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Environment variables can be used in code like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(process.env.REACT_APP_FOO);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can also reference environment variables in your &lt;code&gt;index.html&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;%REACT_APP_BAR%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&amp;gt; &lt;em&gt;Important: Environment variables are embedded into your HTML, CSS, and JavaScript bundles during the build process. Because of this, it’s&lt;/em&gt; very important &lt;em&gt;to not store any secrets, like API keys, in your environment variables as anyone can view your bundled code in the browser by inspecting your files.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-the-supported-browsers" class="anchor"&gt;
  &lt;/a&gt;
  Configuring the supported browsers
&lt;/h3&gt;

&lt;p&gt;In your project’s &lt;code&gt;package.json&lt;/code&gt; file, you can see the list of targeted browsers:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "browserslist": {
    "production": [
      "&amp;amp;gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Adjusting these targets affect how your code will be transpiled. Specifying older browser versions will result in your code being transpiled to older versions of JavaScript in order to be compatible with the specified browser versions. The &lt;code&gt;production&lt;/code&gt; list specifies the browsers to target when creating a production build and the &lt;code&gt;development&lt;/code&gt; list specifics the browsers to target when running the application using &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://browserl.ist/"&gt;browserl.ist&lt;/a&gt; website can be used to see the browsers supported by your configured &lt;code&gt;browserslist&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-production-build" class="anchor"&gt;
  &lt;/a&gt;
  Creating a production build
&lt;/h3&gt;

&lt;p&gt;To create a production build, run the command &lt;code&gt;npm run build&lt;/code&gt;. The production build process bundles React in production mode and optimizes the build for the best performance. When the command completes, you'll find your production ready files in the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Now your application is ready to be deployed!&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;For more information about how to deploy a Create React App project into production, see&lt;/em&gt; &lt;a href="https://facebook.github.io/create-react-app/docs/deployment"&gt;&lt;em&gt;this page&lt;/em&gt;&lt;/a&gt; &lt;em&gt;in the official documentation.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-you%C2%A0learned" class="anchor"&gt;
  &lt;/a&gt;
  What you learned
&lt;/h3&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1ff3"&gt;Describe what front-end builds are and why they’re needed;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1fc3"&gt;Describe at a high level what happens in a Create React App when you run &lt;code&gt;npm start&lt;/code&gt;; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6adc"&gt;Prepare to deploy a React application into a production environment.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#react-router-documentation" class="anchor"&gt;
  &lt;/a&gt;
  React Router Documentation
&lt;/h3&gt;

&lt;p&gt;Now that you’ve had an introduction to React Router, feel free to explore the official documentation to learn more! As you become a full-fledged software engineer, remember that documentation is your friend. You can take a brief overview for now, as the documentation might include a lot of information at first. The more you learn about React, the more you should revisit the official documentation and learn!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-react%C2%A0router" class="anchor"&gt;
  &lt;/a&gt;
  Setting up React Router
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="bfa4"&gt;&lt;a href="https://reacttraining.com/react-router/web/guides/quick-start"&gt;React Router Quick Start&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b0cb"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/HashRouter"&gt;HashRouter&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f48b"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/BrowserRouter"&gt;BrowserRouter&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#routes-and%C2%A0links" class="anchor"&gt;
  &lt;/a&gt;
  Routes and Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="72bd"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/Route"&gt;Route&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e256"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/Link"&gt;Link&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1d9d"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/NavLink"&gt;NavLink&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#switch-and%C2%A0redirect" class="anchor"&gt;
  &lt;/a&gt;
  Switch and Redirect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="5240"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/Switch"&gt;Switch&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b405"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/Redirect"&gt;Redirect&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#react-router-params-ownprops" class="anchor"&gt;
  &lt;/a&gt;
  React Router Params (ownProps)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="e0d6"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/history"&gt;props.history&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5f4a"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/location"&gt;props.location&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bd15"&gt;&lt;a href="https://reacttraining.com/react-router/web/api/match"&gt;props.match&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#rainbow-routes%C2%A0project" class="anchor"&gt;
  &lt;/a&gt;
  Rainbow Routes Project
&lt;/h3&gt;

&lt;p&gt;Today you’re going to get our first experience using React Router. The goal is to create a basic app that displays the colors of the rainbow. This rainbow, however, has something special about it — some of the colors are nested within others.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-0%C2%A0setup" class="anchor"&gt;
  &lt;/a&gt;
  Phase 0: Setup
&lt;/h3&gt;

&lt;p&gt;Begin by creating a new React project:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app rainbow-routes --template @appacademy/simple
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now you’ll remove all the contents of your &lt;code&gt;src&lt;/code&gt; and all the contents from your &lt;code&gt;public&lt;/code&gt; directory to build the application architecture from scratch! After you have deleted all your files within the directories, create a new &lt;code&gt;index.html&lt;/code&gt; file in your &lt;code&gt;public&lt;/code&gt; folder. Use the &lt;code&gt;html:5&lt;/code&gt; emmet shortcut to generate an HTML template. Title your page "Rainbow Routes" and create a &lt;code&gt;div&lt;/code&gt; with an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;root&lt;/code&gt; in your DOM's `&lt;code&gt;element. Create an&lt;/code&gt;index.css&lt;code&gt;file in your&lt;/code&gt;src` directory with the following code. Now let's create your entry file!&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h4 {
  color: darkblue;
  cursor: pointer;
}

h4:hover {
  text-decoration: underline;
}

#rainbow {
  position: absolute;
  top: 0;
  left: 300px;
}

h3 {
  position: absolute;
  top: 1px;
}

.red {
  background-color: red;
  width: 100px;
  height: 100px;
}

.orange {
  background-color: orange;
  width: 100px;
  height: 50px;
}

.yellow {
  background-color: yellow;
  width: 100px;
  height: 50px;
}

.green {
  background-color: green;
  width: 100px;
  height: 100px;
}

.blue {
  background-color: blue;
  width: 100px;
  height: 100px;
}

.indigo {
  background-color: mediumslateblue;
  width: 100px;
  height: 50px;
}

.violet {
  background-color: darkviolet;
  width: 100px;
  height: 100px;
}

a {
  display: block;
  margin-bottom: 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt; entry file in the &lt;code&gt;src&lt;/code&gt; directory. At the top of the file, make sure to import &lt;code&gt;React&lt;/code&gt; from the &lt;code&gt;react&lt;/code&gt; package and &lt;code&gt;ReactDOM&lt;/code&gt; from the &lt;code&gt;react-dom&lt;/code&gt; package. Make sure to also import your the &lt;code&gt;index.css&lt;/code&gt; file you just created! This will take care of styling your &lt;em&gt;rainbow routes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now you can use the &lt;code&gt;ReactDOM.render()&lt;/code&gt; method to render a `&lt;code&gt;component instead of the DOM element with an&lt;/code&gt;id&lt;code&gt;of&lt;/code&gt;root&lt;code&gt;. Lastly, wrap your render function with a&lt;/code&gt;DOMContentLoaded` event listener, like so:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener('DOMContentLoaded', () =&amp;amp;gt; {
  ReactDOM.render(
    ,
    document.getElementById('root'),
  );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Let’s create your &lt;code&gt;Root&lt;/code&gt; component right in your entry file! Your &lt;code&gt;Root&lt;/code&gt; component will take care of applying your &lt;code&gt;BrowserRouter&lt;/code&gt; to the application. Applying the &lt;code&gt;BrowserRouter&lt;/code&gt; to your &lt;code&gt;Root&lt;/code&gt; component allows all the child components rendering within `&lt;code&gt;tags to use and access the&lt;/code&gt;Route&lt;code&gt;,&lt;/code&gt;Link&lt;code&gt;, and&lt;/code&gt;NavLink&lt;code&gt;components within the&lt;/code&gt;react-router-dom` package.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Root = () =&amp;amp;gt; (
  // TODO: Apply BrowserRouter
  // TODO: Render rainbow
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Install the &lt;code&gt;react-router-dom&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-router-dom@^5.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now import &lt;code&gt;BrowserRouter&lt;/code&gt; from the &lt;code&gt;react-router-dom&lt;/code&gt; package, like so:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter } from 'react-router-dom';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You’re going to be rendering a lot of components, so let’s keep your &lt;code&gt;src&lt;/code&gt; directory organized by creating a &lt;code&gt;components&lt;/code&gt; directory within. Within your new &lt;code&gt;./src/components&lt;/code&gt; directory, create a &lt;code&gt;Rainbow.js&lt;/code&gt; file for your &lt;code&gt;Rainbow&lt;/code&gt; component with the following code:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/components/Rainbow.js
import React from 'react';
import { Route, Link, NavLink } from 'react-router-dom';

const Rainbow = () =&amp;amp;gt; (

    &amp;lt;h1&amp;gt;Rainbow Router!&amp;lt;/h1&amp;gt;
    {/* Your links should go here */}


      {/* Your routes should go here */}


);

export default Rainbow;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Your &lt;code&gt;Rainbow&lt;/code&gt; component will act as the home page or default path (&lt;code&gt;/&lt;/code&gt;) of your application. Import the &lt;code&gt;Rainbow&lt;/code&gt; component into your entry file and have your &lt;code&gt;Root&lt;/code&gt; component render &lt;code&gt;wrapped within&lt;/code&gt; tags, like so:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Root = () =&amp;amp;gt; (



);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Within your &lt;code&gt;Rainbow&lt;/code&gt; component, you'll be rendering &lt;code&gt;and&lt;/code&gt; components to add different navigation paths to different components. Let's create all the components you will render!&lt;/p&gt;

&lt;p&gt;Create files for the following components in your &lt;code&gt;./src/components&lt;/code&gt; directory:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1c8e"&gt;&lt;code&gt;Red&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a8dd"&gt;&lt;code&gt;Blue&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6ca3"&gt;&lt;code&gt;Green&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8e44"&gt;&lt;code&gt;Indigo&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f8f2"&gt;&lt;code&gt;Orange&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0f47"&gt;&lt;code&gt;Violet&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8a89"&gt;&lt;code&gt;Yellow&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your &lt;code&gt;Red&lt;/code&gt; and &lt;code&gt;Blue&lt;/code&gt; components will look something like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import { Route, Link, NavLink } from 'react-router-dom';

const Color = () =&amp;amp;gt; (

    &amp;lt;h2&amp;gt;Color&amp;lt;/h2&amp;gt;
    {/* Links here */}

    {/* Routes here */}

);

export default Color;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Your &lt;code&gt;Green&lt;/code&gt;, &lt;code&gt;Indigo&lt;/code&gt;, &lt;code&gt;Orange&lt;/code&gt;, &lt;code&gt;Violet&lt;/code&gt;, and &lt;code&gt;Yellow&lt;/code&gt; components will look something like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

const Color = () =&amp;amp;gt; (

    &amp;lt;h3&amp;gt;Color&amp;lt;/h3&amp;gt;

);

export default Color;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now start your server and verify you can see the “Rainbow Router!” header from your &lt;code&gt;Rainbow&lt;/code&gt; component. Currently there is no functionality. Let's fix that!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-1%C2%A0routes" class="anchor"&gt;
  &lt;/a&gt;
  Phase 1: Routes
&lt;/h3&gt;

&lt;p&gt;As a reminder, wrapping the &lt;code&gt;Rainbow&lt;/code&gt; component in `&lt;code&gt;tags makes the router available to all descendent React Router components. Now open the&lt;/code&gt;Rainbow.js` file. You're going to render some of your color components from here. Ultimately you want your routes to look like this.&lt;/p&gt;

&lt;p&gt;URLComponents&lt;code&gt;/Rainbow/redRainbow -&amp;amp;gt; Red/red/orangeRainbow -&amp;amp;gt; Red -&amp;amp;gt; Orange/red/yellowRainbow -&amp;amp;gt; Red -&amp;amp;gt; Yellow/greenRainbow -&amp;amp;gt; Green/blueRainbow -&amp;amp;gt; Blue/blue/indigoRainbow -&amp;amp;gt; Blue -&amp;amp;gt; Indigo/violetRainbow -&amp;amp;gt; Violet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This means that the &lt;code&gt;Red&lt;/code&gt;, &lt;code&gt;Green&lt;/code&gt;, &lt;code&gt;Blue&lt;/code&gt;, and &lt;code&gt;Violet&lt;/code&gt; components need to render in the &lt;code&gt;Rainbow&lt;/code&gt; component, but only when you are at the corresponding URL. You'll do this with &lt;code&gt;Route&lt;/code&gt; components. Begin by importing the &lt;code&gt;Red&lt;/code&gt;, &lt;code&gt;Green&lt;/code&gt;, &lt;code&gt;Blue&lt;/code&gt;, and &lt;code&gt;Violet&lt;/code&gt; components into your &lt;code&gt;Rainbow.js&lt;/code&gt; file. Then add the necessary &lt;code&gt;Route&lt;/code&gt; components inside the &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;id="rainbow"&lt;/code&gt; in the &lt;code&gt;Rainbow&lt;/code&gt; component. For example to render the &lt;code&gt;Red&lt;/code&gt; component with the &lt;code&gt;/red&lt;/code&gt; path, you would use the following &lt;code&gt;Route&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;Test that your code works! Manually type in each URL you just created, and you should see the color component pop up. Remember, these are React Routes, so the paths you created will come after the &lt;code&gt;/&lt;/code&gt;. For example, your default rainbow route will look like &lt;code&gt;http://localhost:3000/&lt;/code&gt; while your red route will look like &lt;code&gt;http://localhost:3000/red&lt;/code&gt;&lt;a href="http://localhost:3000/red."&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You want to nest the &lt;code&gt;Orange&lt;/code&gt; and &lt;code&gt;Yellow&lt;/code&gt; components inside the &lt;code&gt;Red&lt;/code&gt; component, and the &lt;code&gt;Indigo&lt;/code&gt; component inside the &lt;code&gt;Blue&lt;/code&gt; component. Remember to import your components to use them in a &lt;code&gt;Route&lt;/code&gt; tag. You'll have to go add the corresponding &lt;code&gt;Route&lt;/code&gt; tags to the &lt;code&gt;Red.js&lt;/code&gt; and &lt;code&gt;Blue.js&lt;/code&gt; files. Make sure to use the correct nested paths, such as &lt;code&gt;"/red/orange"&lt;/code&gt; for the orange &lt;code&gt;Route&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-2%C2%A0links" class="anchor"&gt;
  &lt;/a&gt;
  Phase 2: Links
&lt;/h3&gt;

&lt;p&gt;Manually navigating to our newly created routes is tiresome, so let’s add functionality to take care of this process for us. React Router provides the &lt;code&gt;Link&lt;/code&gt; and &lt;code&gt;NavLink&lt;/code&gt; components for this purpose.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;Link&lt;/code&gt;s to the paths &lt;code&gt;/red&lt;/code&gt;, &lt;code&gt;/green&lt;/code&gt;, &lt;code&gt;/blue&lt;/code&gt;, and &lt;code&gt;/violet&lt;/code&gt; in the &lt;code&gt;Rainbow&lt;/code&gt; component. For example, your red link should look like&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Red
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;When you are at &lt;code&gt;blue&lt;/code&gt; you want to be able to get to &lt;code&gt;/blue/indigo&lt;/code&gt;, and then back to &lt;code&gt;/blue&lt;/code&gt;. Add the corresponding &lt;code&gt;Link&lt;/code&gt;s to the &lt;code&gt;Blue&lt;/code&gt; component like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Blue only
Add indigo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Similarly, add &lt;code&gt;Link&lt;/code&gt;s to &lt;code&gt;/red&lt;/code&gt;, &lt;code&gt;/red/orange&lt;/code&gt; and &lt;code&gt;/red/yellow&lt;/code&gt; to the &lt;code&gt;Red&lt;/code&gt; component. Test all your links. Navigation is so much easier now!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-3%C2%A0navlinks" class="anchor"&gt;
  &lt;/a&gt;
  Phase 3: NavLinks
&lt;/h3&gt;

&lt;p&gt;It would be nice if our links gave us some indication of which route you were at. Fortunately, React Router has a special component for that very purpose: &lt;code&gt;NavLink&lt;/code&gt;. NavLinks get an extra CSS class when their &lt;code&gt;to&lt;/code&gt; prop matches the current URL. By default this class is called &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go ahead and switch all your &lt;code&gt;Link&lt;/code&gt;s to &lt;code&gt;NavLink&lt;/code&gt;s. If you open the app you won't see any change yet. That's because you haven't added any special styling to the &lt;code&gt;active&lt;/code&gt; class. Go ahead and open the &lt;code&gt;index.css&lt;/code&gt; file. Create an &lt;code&gt;.active&lt;/code&gt; class and add the line &lt;code&gt;font-weight: 700&lt;/code&gt;. Now your active links will be bold. Isn't that nice!&lt;/p&gt;

&lt;p&gt;The only problem is that now the &lt;code&gt;Blue only&lt;/code&gt; link is active even when the path is &lt;code&gt;/blue/indigo&lt;/code&gt;. That doesn't make a lot of sense. Let's add the &lt;code&gt;exact&lt;/code&gt; flag to that link so it will only be active when its &lt;code&gt;to&lt;/code&gt; exactly matches the current path. Now it should look like:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Blue only
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Do the same for the &lt;code&gt;Red only&lt;/code&gt; link. Everything should be working now.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-4%E2%80%8A%E2%80%8Achanging-navlinks-active%C2%A0class" class="anchor"&gt;
  &lt;/a&gt;
  Phase 4 — Changing NavLink’s Active Class
&lt;/h3&gt;

&lt;p&gt;You’ve already set up &lt;code&gt;NavLink&lt;/code&gt; to bold the link text using the &lt;code&gt;.active&lt;/code&gt; class in &lt;code&gt;src/index.css&lt;/code&gt;. But what if you wanted this class to be something else? For instance, what if you want your main color links (Red, Green, Blue, Violet) to be styled differently when active than your sub-route links (Red Only, Add Orange, Add Yellow, etc.).&lt;/p&gt;

&lt;p&gt;You can set the class that React Router sets to an active &lt;code&gt;NavLink&lt;/code&gt; by adding the &lt;code&gt;activeClassName&lt;/code&gt; prop.&lt;/p&gt;

&lt;p&gt;For instance, when we are at a route matching the below &lt;code&gt;NavLink&lt;/code&gt;'s &lt;code&gt;to&lt;/code&gt; prop, the component will have a class of &lt;code&gt;.parent-active&lt;/code&gt; applied:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Blue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This allows much more flexibility to style an active &lt;code&gt;NavLink&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Using the example above, add an &lt;code&gt;activeClassName&lt;/code&gt; prop to each of your &lt;code&gt;NavLink&lt;/code&gt;s in &lt;code&gt;src/components/Rainbow.js&lt;/code&gt;. Now, add some CSS styling for that class in your &lt;code&gt;src/index.css&lt;/code&gt; to distinguish your main and your sub-route links.&lt;/p&gt;

&lt;p&gt;Compare your work to the solution and make sure the behavior is the same. Time to celebrate! ✨ 🌈 ✨&lt;/p&gt;

&lt;p&gt;You can also learn more about using the React Router at &lt;a href="https://reacttraining.com/react-router/web/guides/quick-start"&gt;reacttraining.com&lt;/a&gt;!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#exploring-react-builds%C2%A0project" class="anchor"&gt;
  &lt;/a&gt;
  Exploring React Builds Project
&lt;/h3&gt;

&lt;p&gt;In this project, you’ll use Create React App to create a simple React application. You’ll experiment with some of the features that Create React App provides and deploy a production build of your application to a standalone Express application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-0%C2%A0setup" class="anchor"&gt;
  &lt;/a&gt;
  Phase 0: Setup
&lt;/h3&gt;

&lt;p&gt;Begin by using the &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; package to create a React application:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app exploring-react-builds --template @appacademy/simple
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&amp;gt; &lt;em&gt;Remember that using the&lt;/em&gt; &lt;code&gt;create-react-app&lt;/code&gt; &lt;em&gt;command initializes your project as a Git repository. If you use the&lt;/em&gt; &lt;code&gt;ls -a&lt;/code&gt; &lt;em&gt;to view the hidden files in your project, you'll see the &lt;/em&gt;&lt;code&gt;.git&lt;/code&gt; &lt;em&gt;file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;App&lt;/code&gt; component:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="9186"&gt;Wrap the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element with a `` element; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="5e97"&gt;Change the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element content to something like "Exploring React Builds".&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;// ./src/App.js&lt;/p&gt;

&lt;p&gt;import React from 'react';&lt;/p&gt;

&lt;p&gt;function App() {&lt;br&gt;
  return (&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;h1&amp;gt;Exploring React Builds&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export default App;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#phase-1-using-css%C2%A0modules" class="anchor"&gt;
  &lt;/a&gt;
  Phase 1: Using CSS modules
&lt;/h3&gt;

&lt;p&gt;You’ve already seen an example of using the &lt;code&gt;import&lt;/code&gt; keyword to import a stylesheet into a module so that it'll be included in your application build. That's the technique being used to include the global &lt;code&gt;index.css&lt;/code&gt; stylesheet:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(


  ,
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can also leverage &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS modules&lt;/a&gt; in your Create React App projects. CSS Modules scope stylesheet class names so that they are unique to a specific React component. This allows you to create class names without having to worry if they might collide with class names used in another component.&lt;/p&gt;

&lt;p&gt;Add a new &lt;code&gt;css-modules&lt;/code&gt; folder to the &lt;code&gt;src&lt;/code&gt; folder. Within that folder, add the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2912"&gt;&lt;code&gt;HeadingA.js&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3aa3"&gt;&lt;code&gt;HeadingA.module.css&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2ea3"&gt;&lt;code&gt;HeadingB.js&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ca2b"&gt;&lt;code&gt;HeadingB.module.css&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then update the contents of each file to the following:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/css-modules/HeadingA.js

import React from 'react';
import styles from './HeadingA.module.css';

function HeadingA() {
  return (
    &amp;lt;h1&amp;gt;Heading A&amp;lt;/h1&amp;gt;
  );
}

export default HeadingA;

/* ./src/css-modules/HeadingA.module.css */

.heading {
  color: green;
}

// ./src/css-modules/HeadingB.js

import React from 'react';
import styles from './HeadingB.module.css';

function HeadingB() {
  return (
    &amp;lt;h1&amp;gt;Heading B&amp;lt;/h1&amp;gt;
  );
}

export default HeadingB;

/* ./src/css-modules/HeadingB.module.css */

.heading {
  color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Notice how the &lt;code&gt;.heading&lt;/code&gt; CSS class name is being used within each component to set the color of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element. For the &lt;code&gt;HeadingA&lt;/code&gt; component, the color is &lt;code&gt;green&lt;/code&gt;, and for the &lt;code&gt;HeadingB&lt;/code&gt; component, the color is &lt;code&gt;red&lt;/code&gt;. Using the file naming convention &lt;code&gt;[name].module.css&lt;/code&gt; let's Create React App know that we want these stylesheets to be processed as CSS Modules. Using CSS Modules allows the &lt;code&gt;.heading&lt;/code&gt; class name to be reused across components without any issue.&lt;/p&gt;

&lt;p&gt;To see this feature in action, update your &lt;code&gt;App&lt;/code&gt; component to render both of your new components:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import HeadingA from './css-modules/HeadingA';
import HeadingB from './css-modules/HeadingB';

function App() {
  return (

      &amp;lt;h1&amp;gt;Exploring React Builds&amp;lt;/h1&amp;gt;



  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then run your application (&lt;code&gt;npm start&lt;/code&gt;) to see "Heading A" and "Heading B" displayed respectively in green and red. If you use the browser's developer tools to inspect "Heading A", you'll see that the &lt;code&gt;.heading&lt;/code&gt; class name has been modified so that it's unique to the &lt;code&gt;HeadingA&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;CSS Modules is an example of how a front-end build process can be used to modify code to enable a feature that’s not natively supported by browsers.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-2-using-an-image-in-a-component" class="anchor"&gt;
  &lt;/a&gt;
  Phase 2: Using an image in a component
&lt;/h3&gt;

&lt;p&gt;Create React App configures webpack with support for loading images (as well as CSS, fonts, and other file types). What this means, for you as the developer, is that you can add an image file to your project, import it directly into a module, and render it in a React component.&lt;/p&gt;

&lt;p&gt;Download any image of off the Web or &lt;a href="https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-cat.png"&gt;click here&lt;/a&gt; to download the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2_13i1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A233dNJ6vfgAmEVCD" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2_13i1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A233dNJ6vfgAmEVCD"&gt;&lt;/a&gt;Then within the &lt;code&gt;src&lt;/code&gt; folder add a new folder named &lt;code&gt;image&lt;/code&gt;. Within that folder add a new component file named &lt;code&gt;Image.js&lt;/code&gt;. Also add your downloaded image file to the &lt;code&gt;image&lt;/code&gt; folder (so it's a sibling to the &lt;code&gt;Image.js&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;Update the contents of the &lt;code&gt;Image.js&lt;/code&gt; file to this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/image/Image.js

import React from 'react';
import cat from './react-builds-cat.png';

console.log(cat); // /static/media/react-builds-cat.45f7f4d2.png

function Image() {
  // Import result is the URL of your image.
  return &amp;lt;img src="%7Bcat%7D" alt="images/images/Cat"&amp;gt;;
}

export default Image;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can import an image into a component using the &lt;code&gt;import&lt;/code&gt; keyword. This tells webpack to include the image in the build. Notice that when you import an image into a module, you'll get a path to the image's location within the build. You can use this path to set the &lt;code&gt;src&lt;/code&gt; attribute on an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Be sure to update the image&lt;/em&gt; &lt;code&gt;import&lt;/code&gt; &lt;em&gt;statement to the correct file name if you're using your own image!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now update the &lt;code&gt;App&lt;/code&gt; component to import and render the &lt;code&gt;Image&lt;/code&gt; component:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/App.js

import React from 'react';
import HeadingA from './css-modules/HeadingA';
import HeadingB from './css-modules/HeadingB';
import Image from './image/Image';

function App() {
  return (

      &amp;lt;h1&amp;gt;Exploring React Builds&amp;lt;/h1&amp;gt;




  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If you run your application (&lt;code&gt;npm start&lt;/code&gt;) you'll see your image displayed on the page! You can also open your browser's developer tools and view the "Sources" for the current page. If you can expand the &lt;code&gt;localhost:3000&lt;/code&gt; &amp;gt; &lt;code&gt;static&lt;/code&gt; &amp;gt; &lt;code&gt;media&lt;/code&gt; node on the left, you can see the image file that webpack copied to your build.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#images-in-stylesheets" class="anchor"&gt;
  &lt;/a&gt;
  Images in stylesheets
&lt;/h3&gt;

&lt;p&gt;You can also reference images in your CSS files too. Add a CSS file named &lt;code&gt;Image.css&lt;/code&gt; to the &lt;code&gt;./src/image&lt;/code&gt; folder and update its contents to this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* ./src/image/Image.css */

.cat {
  background-image: url(./react-builds-cat.png);
  width: 400px;
  height: 400px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then update the &lt;code&gt;Image&lt;/code&gt; component to this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/image/Image.js

import React from 'react';
import './Image.css';
import cat from './react-builds-cat.png';

console.log(cat); // /static/media/react-builds-cat.45f7f4d2.png

function Image() {
  return (

      {/* Import result is the URL of your image. */}
      &amp;lt;img src="%7Bcat%7D" alt="Cat"&amp;gt;


  );
}

export default Image;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now you’ll see the image displayed twice on the page!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-3-updating-the-supported-browsers-and-its-affect-on-code-transpilation" class="anchor"&gt;
  &lt;/a&gt;
  Phase 3: Updating the supported browsers (and its affect on code transpilation)
&lt;/h3&gt;

&lt;p&gt;Earlier you learned about the &lt;code&gt;browerslist&lt;/code&gt; setting in the &lt;code&gt;package.json&lt;/code&gt; file and now adjusting these targets affect how your code will be transpiled:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "browserslist": {
    "production": [
      "&amp;amp;gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;production&lt;/code&gt; list specifies the browsers to target when creating a production build and the &lt;code&gt;development&lt;/code&gt; list specifics the browsers to target when running the application using &lt;code&gt;npm start&lt;/code&gt;. Currently, you're targeting relatively recent versions of the major browsers when creating a development build. Targeting older browser versions results in your code being transpiled to an older version of JavaScript.&lt;/p&gt;

&lt;p&gt;To experiment with this configuration option, let’s add a class component to the project. Add a new folder named &lt;code&gt;class-component&lt;/code&gt; to the &lt;code&gt;src&lt;/code&gt; folder. Within that folder, add a file named &lt;code&gt;ClassComponent.js&lt;/code&gt; containing the following code:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/class-component/ClassComponent.js

import React from 'react';

class ClassComponent extends React.Component {
  render() {
    return (
      &amp;lt;h1&amp;gt;Class Component&amp;lt;/h1&amp;gt;
    );
  }
}

export default ClassComponent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Don’t forget to update your &lt;code&gt;App&lt;/code&gt; component to render the new component:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/App.js

import React from 'react';
import HeadingA from './css-modules/HeadingA';
import HeadingB from './css-modules/HeadingB';
import Image from './image/Image';
import ClassComponent from './class-component/ClassComponent';

function App() {
  return (

      &amp;lt;h1&amp;gt;Exploring React Builds&amp;lt;/h1&amp;gt;





  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now run your application using &lt;code&gt;npm start&lt;/code&gt;. Open your browser's developer tools and view the "Sources" for the current page. Expand the &lt;code&gt;localhost:3000&lt;/code&gt; &amp;gt; &lt;code&gt;static&lt;/code&gt; &amp;gt; &lt;code&gt;js&lt;/code&gt; node on the left and select the &lt;code&gt;main.chunk.js&lt;/code&gt; file. Press &lt;code&gt;CMD+F&lt;/code&gt; on macOS or &lt;code&gt;CTRL+F&lt;/code&gt; on Windows to search the file for "Class Component". Here's what the transpiled code looks like for the &lt;code&gt;ClassComponent&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class ClassComponent extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {
  render() {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 7,
        columnNumber: 7
      }
    }, "Class Component");
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&amp;gt; &lt;em&gt;Have you wondered yet why you need to use the developer tools to view the bundles generated by Create React App? Remember that when you run&lt;/em&gt; &lt;code&gt;npm start&lt;/code&gt;&lt;em&gt;, Create React App builds your application using&lt;/em&gt; &lt;code&gt;webpack-dev-server&lt;/code&gt;&lt;em&gt;. To keep things as performant as possible, the bundles generated by&lt;/em&gt; &lt;code&gt;webpack-dev-server&lt;/code&gt; &lt;em&gt;are stored in memory instead of writing them to the file system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The JSX in the component’s &lt;code&gt;render&lt;/code&gt; method has been converted to JavaScript but the &lt;code&gt;ClassComponent&lt;/code&gt; ES2015 class is left alone. This makes sense though as JSX isn't natively supported by any browser while ES2015 classes have been natively supported by browsers for awhile now.&lt;/p&gt;

&lt;p&gt;But what if you need to target a version of a browser that doesn’t support ES2015 classes? You can use the &lt;a href="https://caniuse.com/#feat=es6-class"&gt;“Can I use…”&lt;/a&gt; website to see when browsers started supporting ES2105 (or ES6) classes. Starting with version 49, Chrome natively supported classes. But imagine that you need to support Chrome going back to version 30, a version of Chrome that doesn’t support classes.&lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;browserslist.development&lt;/code&gt; property in the &lt;code&gt;package.json&lt;/code&gt; file to this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "browserslist": {
    "production": [
      "&amp;amp;gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "chrome &amp;amp;gt;= 30",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The query &lt;code&gt;chrome &amp;amp;gt;= 30&lt;/code&gt; specifies that you want to target Chrome version 30 or newer.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;The&lt;/em&gt; &lt;a href="https://browserl.ist/"&gt;&lt;em&gt;browserl.ist&lt;/em&gt;&lt;/a&gt; &lt;em&gt;website can be used to see the browsers supported by your configured&lt;/em&gt; &lt;code&gt;browserslist&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stop your application if it’s currently running. Delete the &lt;code&gt;./node_modules/.cache&lt;/code&gt; folder and run &lt;code&gt;npm start&lt;/code&gt; again. Then view the &lt;code&gt;main.chunk.js&lt;/code&gt; bundle again in the developer tools:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8p9kWnkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ATKBUkpbL5aSm5PTQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p9kWnkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ATKBUkpbL5aSm5PTQ"&gt;&lt;/a&gt;Now your ES2015 class component is being converted to a constructor function! Here’s the transpiled code for reference:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ClassComponent = /*#__PURE__*/function (_React$Component) {
  Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(ClassComponent, _React$Component);

  var _super = Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_3__["default"])(ClassComponent);

  function ClassComponent() {
    Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, ClassComponent);

    return _super.apply(this, arguments);
  }

  Object(_Users_jameschurchill_Documents_GitHub_Modular_Curriculum_content_react_redux_topics_react_builds_projects_exploring_react_builds_solution_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(ClassComponent, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h1", {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 7,
          columnNumber: 7
        }
      }, "Class Component");
    }
  }]);

  return ClassComponent;
}(react__WEBPACK_IMPORTED_MODULE_4___default.a.Component);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Luckily it’s very rare that you’ll need to read the code in your generated bundles. webpack, by default, is configured to generate sourcemaps. Sourcemaps are a mapping of the code in a generated file, like a bundle file, to the original source code. This gives you access to your original source code in the browser’s developer tools:&lt;/p&gt;

&lt;p&gt;You can even set a breakpoint in your source within the developer tools to stop execution on a specific line of code!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-4-adding-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  Phase 4: Adding environment variables
&lt;/h3&gt;

&lt;p&gt;Earlier you learned that Create React App supports defining environment variables in an &lt;code&gt;.env&lt;/code&gt; file. This gives you a convenient way to avoid hard coding values that vary across environments.&lt;/p&gt;

&lt;p&gt;Let’s experiment with this feature so that you can see how the Create React App build process embeds environment variables into your HTML, CSS, and JavaScript bundles.&lt;/p&gt;

&lt;p&gt;Add an &lt;code&gt;.env&lt;/code&gt; file to the root of your Create React App project. Define an environment variable named &lt;code&gt;REACT_APP_TITLE&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_TITLE=Exploring React Builds
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Remember that environment variables need to be prefixed with &lt;code&gt;REACT_APP_&lt;/code&gt; for Create React App to process them. After defining your environment variable, you can refer to it within JSX using an expression and &lt;code&gt;process.env&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/App.js

import React from 'react';
import HeadingA from './css-modules/HeadingA';
import HeadingB from './css-modules/HeadingB';
import Image from './image/Image';
import ClassComponent from './class-component/ClassComponent';

function App() {
  return (

      &amp;lt;h1&amp;gt;{process.env.REACT_APP_TITLE}&amp;lt;/h1&amp;gt;





  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Environment variables can also be referred to in regular JavaScript code:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(process.env.REACT_APP_TITLE);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can also reference environment variables in your &lt;code&gt;./public/index.html&lt;/code&gt; file like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    %REACT_APP_TITLE%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Run your application again using &lt;code&gt;npm start&lt;/code&gt;. Open your browser's developer tools and view the "Sources" for the current page. Expand the &lt;code&gt;localhost:3000&lt;/code&gt; node on the left and select &lt;code&gt;(index)&lt;/code&gt;. Notice that the text &lt;code&gt;%REACT_APP_TITLE%&lt;/code&gt; within the `&lt;code&gt;element has been converted to the text literal&lt;/code&gt;Exploring React Builds`:&lt;/p&gt;

&lt;p&gt;If you expand the &lt;code&gt;localhost:3000&lt;/code&gt; &amp;gt; &lt;code&gt;static&lt;/code&gt; &amp;gt; &lt;code&gt;js&lt;/code&gt; node on the left and select the &lt;code&gt;main.chunk.js&lt;/code&gt; file, you can see how the &lt;code&gt;App&lt;/code&gt; component's JSX has been converted to JavaScript:&lt;/p&gt;

&lt;p&gt;Here’s a closer look at the relevant &lt;code&gt;React.createElement&lt;/code&gt; method call:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", {
    __self: this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 7
    }
  }, "Exploring React Builds")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Again, notice how the environment variable has been replaced with a text literal. This has important security implications for you to consider. Because environment variables are embedded into your HTML, CSS, and JavaScript bundles during the build process, it’s &lt;em&gt;very important&lt;/em&gt; to not store any secrets, like API keys, in your environment variables. Remember, anyone can view your bundled code in the browser by inspecting your files!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#phase-5-deploying-a-production-build" class="anchor"&gt;
  &lt;/a&gt;
  Phase 5: Deploying a production build
&lt;/h3&gt;

&lt;p&gt;In the last phase of this project, let’s add routing to the React application, create a production build, and deploy the build to an Express application!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-routing" class="anchor"&gt;
  &lt;/a&gt;
  Adding routing
&lt;/h3&gt;

&lt;p&gt;To add React Router to the application, start by installing the &lt;code&gt;react-router-dom&lt;/code&gt; npm package:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-router-dom@^5.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then update the &lt;code&gt;App&lt;/code&gt; component to this code:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./src/App.js

import React from 'react';
import {
  BrowserRouter,
  Switch,
  Route,
  Link
} from 'react-router-dom';
import HeadingA from './css-modules/HeadingA';
import HeadingB from './css-modules/HeadingB';
import Image from './image/Image';
import ClassComponent from './class-component/ClassComponent';

function App() {
  return (


        &amp;lt;h1&amp;gt;{process.env.REACT_APP_TITLE}&amp;lt;/h1&amp;gt;

          &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;
              Home
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              Image
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
              Class Component
            &amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;















  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Be sure to run and test your application to ensure that the defined routes work as expected:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="151a"&gt;&lt;code&gt;/&lt;/code&gt; - Should display the &lt;code&gt;HeadingA&lt;/code&gt; and &lt;code&gt;HeadingB&lt;/code&gt; components;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1e2b"&gt;&lt;code&gt;/image&lt;/code&gt; - Should display the &lt;code&gt;Image&lt;/code&gt; component; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7f3a"&gt;&lt;code&gt;/class-component&lt;/code&gt; - Should display the &lt;code&gt;ClassComponent&lt;/code&gt; component.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-production-build" class="anchor"&gt;
  &lt;/a&gt;
  Creating a production build
&lt;/h3&gt;

&lt;p&gt;To create a production build, run the command &lt;code&gt;npm run build&lt;/code&gt; from the root of your project. The output in the terminal should look something like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;amp;gt; solution@0.1.0 build [absolute path to your project]
&amp;amp;gt; react-scripts build

Creating an optimized production build...
Compiled successfully.

File sizes after gzip:

  47.83 KB  build/static/js/2.722c16c4.chunk.js
  773 B     build/static/js/runtime-main.b7d1e5ee.js
  745 B     build/static/js/main.12299197.chunk.js
  197 B     build/static/css/main.e9a0d1f8.chunk.css

The project was built assuming it is hosted at /.
You can control this with the homepage field in your package.json.

The build folder is ready to be deployed.
You may serve it with a static server:

  npm install -g serve
  serve -s build

Find out more about deployment here:

  bit.ly/CRA-deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Ignore the comments about using &lt;code&gt;serve&lt;/code&gt; to deploy your application (i.e. &lt;code&gt;npm install -g serve&lt;/code&gt; and &lt;code&gt;serve -s build&lt;/code&gt;). In the next step, you'll create a simple Express application to server your React application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#serving-a-react-application-using%C2%A0express" class="anchor"&gt;
  &lt;/a&gt;
  Serving a React application using Express
&lt;/h3&gt;

&lt;p&gt;Create a new folder for your Express application outside of the Create React App project folder.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;For example, from the root of your project, use&lt;/em&gt; &lt;code&gt;cd ..&lt;/code&gt; &lt;em&gt;to go up a level and then create a new folder named&lt;/em&gt; &lt;code&gt;express-server&lt;/code&gt; &lt;em&gt;by running the command&lt;/em&gt; &lt;code&gt;mkdir express-server&lt;/code&gt;&lt;em&gt;. This makes the&lt;/em&gt; &lt;code&gt;express-server&lt;/code&gt; &lt;em&gt;folder a sibling to your Create React App project folder.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Browse into the &lt;code&gt;express-server&lt;/code&gt; folder and initialize it to use npm (i.e. &lt;code&gt;npm init -y&lt;/code&gt;). Then install Express by running the command &lt;code&gt;npm install express@^4.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;App a file named &lt;code&gt;app.js&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./app.js

const express = require('express');
const path = require('path');

const app = express();

app.use(express.static(path.join(__dirname, 'public')));

app.get('*', function(req, res) {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

const port = 9000;

app.listen(port, () =&amp;amp;gt; console.log(`Listening on port ${port}...`));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This simple Express application will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="31ba"&gt;Attempt to match incoming requests to static files located in the &lt;code&gt;public&lt;/code&gt; folder; and&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="16e6"&gt;If a matching static file isn’t found, then the &lt;code&gt;./public/index.html&lt;/code&gt; file will be served for all other requests.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now add a folder named &lt;code&gt;public&lt;/code&gt; to the root of your Express project. Copy the files from the &lt;code&gt;build&lt;/code&gt; folder in your Create React App project to the &lt;code&gt;public&lt;/code&gt; folder in the Express application project. Then run your application using the command &lt;code&gt;node app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open a browser and browse to the URL &lt;code&gt;http://localhost:9000/&lt;/code&gt;. You should see your React application served from your Express application! Be sure to click the navigation links to verify that all of your configured routes work as expected.&lt;/p&gt;

&lt;p&gt;Also, because you configured Express to serve the &lt;code&gt;./public/index.html&lt;/code&gt; file for any request that doesn't match a static file, you can "deep link" to any of your React application's routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="58e7"&gt;&lt;a href="http://localhost:9000/image"&gt;&lt;/a&gt;&lt;a href="http://localhost:9000/image"&gt;http://localhost:9000/image&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3fa9"&gt;&lt;a href="http://localhost:9000/class-component"&gt;&lt;/a&gt;&lt;a href="http://localhost:9000/class-component"&gt;http://localhost:9000/class-component&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;More content at&lt;/em&gt; &lt;a href="http://plainenglish.io/"&gt;&lt;strong&gt;&lt;em&gt;plainenglish.io&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/1965dcde8d4f"&gt;July 15, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/react-in-depth-1965dcde8d4f"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adding-css-to-your-html" class="anchor"&gt;
  &lt;/a&gt;
  Adding CSS To Your HTML
&lt;/h1&gt;

&lt;p&gt;For beginners … very picture heavy since CSS is such a visual discipline!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#adding-css-to-your%C2%A0html" class="anchor"&gt;
  &lt;/a&gt;
  Adding CSS To Your HTML
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#for-beginners%C2%A0-very-picture-heavy-since-css-is-such-a-visual-discipline" class="anchor"&gt;
  &lt;/a&gt;
  For beginners … very picture heavy since CSS is such a visual discipline!
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dw68DA8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3hnCIyXstRSHgYO5-z-51g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw68DA8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3hnCIyXstRSHgYO5-z-51g.png"&gt;&lt;/a&gt;### Getting CSS Into Your HTML&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="36f1"&gt;&lt;em&gt;To connect your CSS sheet to your HTML page, use the link tag like so.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f743"&gt;Many developers use External pre-written CSS stylesheets for consistent design.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="af3f"&gt;You can connect multiple stylesheets.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#css-selectors" class="anchor"&gt;
  &lt;/a&gt;
  CSS Selectors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2d5b"&gt;&lt;code&gt;CSS Selector&lt;/code&gt; : Applies styles to a specific DOM element(s), there are various types:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="29cd"&gt;&lt;code&gt;Type Selectors&lt;/code&gt; : Matches by node name.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04fM4cDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AGOzh0U_yFtsOo9Hq" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04fM4cDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AGOzh0U_yFtsOo9Hq"&gt;&lt;/a&gt;-   &lt;span id="e624"&gt;&lt;code&gt;Class Selectors&lt;/code&gt; : Matches by class name.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGq-p_JT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AWMQXdyBA2MeUYoVvY0Kjew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGq-p_JT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AWMQXdyBA2MeUYoVvY0Kjew.png"&gt;&lt;/a&gt;-   &lt;span id="8c31"&gt;&lt;code&gt;ID Selectors&lt;/code&gt; : Matches by ID name.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qee4hjzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuyRa6tM8Jlg648Rl" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qee4hjzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuyRa6tM8Jlg648Rl"&gt;&lt;/a&gt;-   &lt;span id="d011"&gt;&lt;code&gt;Universal Selectors&lt;/code&gt; : Selects all HTML elements on a page.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQRJ4s5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ALfKazZMelOZrcOsp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQRJ4s5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ALfKazZMelOZrcOsp.jpg"&gt;&lt;/a&gt;-   &lt;span id="e143"&gt;&lt;code&gt;Attribute Selectors&lt;/code&gt; : Matches elements based on the prescence or value of a given attribute. (i.e. a[title] will match all a elements with a title attribute)&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Type selector */
div {
  background-color: #000000;
}

/* Class selector */
.active {
  color: #ffffff;
}

/* ID selector */
#list-1 {
  border: 1px solid gray;
}

/* Universal selector */
* {
  padding: 10px;
}

/* Attribute selector */
a[title] {
  font-size: 2em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#class-selectors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Class Selectors&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="45c5"&gt;Used to select all elements of a certain class denoted with a &lt;code&gt;.[class name]&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f9e4"&gt;You can assign multiple classes to a DOM element by separating them with a space.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#compound-class-selectors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Compound Class Selectors&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1Yhbq4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AiIOiP-ML_k6g0yTxZQyQ4A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1Yhbq4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AiIOiP-ML_k6g0yTxZQyQ4A.png"&gt;&lt;/a&gt;-   &lt;span id="bcf1"&gt;To get around accidentally selecting elements with multiple classes beyond what we want to grab we can chain dots.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="a54c"&gt;TO use a compound class selector just append the classes together when referencing them in the CSS.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="e8ca"&gt;i.e. .box.yellow will select only the first element.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="34a4"&gt;&lt;strong&gt;KEEP IN MIND&lt;/strong&gt; that if you do include a space it will make the selector into a &lt;em&gt;descendant selector&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;h1#heading,&lt;br&gt;
h2.subheading {&lt;br&gt;
  font-style: italic;&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="b382"&gt;When we want to target all &lt;code&gt;h1&lt;/code&gt; tags with the id of &lt;code&gt;heading&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#css-combinators" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS Combinators&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="383a"&gt;CSS Combinators are used to combine other selectors into more complex or targeted selectors — they are very powerful!&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2805"&gt;Be careful not to use too many of them as they will make your CSS far too complex.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#descendant-selectors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Descendant Selectors&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXaaGwHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AYPkGcUc4gf2WtJYdf6Yvmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXaaGwHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AYPkGcUc4gf2WtJYdf6Yvmg.png"&gt;&lt;/a&gt;-   &lt;span id="5e1b"&gt;Separated by a space.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="5d0b"&gt;Selects all descendants of a parent container.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#direct-child-selectors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Direct Child Selectors&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1o0xSsSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ASByLFbio2RGGnFHj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1o0xSsSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ASByLFbio2RGGnFHj.jpg"&gt;&lt;/a&gt;-   &lt;span id="47ef"&gt;Indicated with a &lt;code&gt;&amp;amp;gt;&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="eff3"&gt;Different from descendants because it only affects the direct children of an element.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS:
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.menu &amp;amp;gt; .is-active { background-color: #ffe0b2; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML:
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Belka  Strelka     Laika  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="b452"&gt;Belka would be the only element selected.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#adjacent-sibling-selectors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Adjacent Sibling Selectors&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MTCKitjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Am0yPz3xJPeP3br2C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTCKitjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Am0yPz3xJPeP3br2C.png"&gt;&lt;/a&gt;-   &lt;span id="5dca"&gt;Uses the &lt;code&gt;+&lt;/code&gt; symbol.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="9063"&gt;Used for elements that directly follow one another and who both have the same parent.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;h1 + h2 { font-style: italic;   }&lt;/p&gt;

&lt;p&gt;//HTML:&lt;/p&gt;


&lt;h1&gt;Big header&lt;/h1&gt; &lt;h2&gt;This one is styled because it is directly adjacent to the H1&lt;/h2&gt; &lt;h2&gt;This one is NOT styled because there is no H1 right before it&lt;/h2&gt;

&lt;p&gt;h1 + h2 { font-style: italic;   }&lt;/p&gt;


&lt;h1&gt;Big header&lt;/h1&gt; &lt;h2&gt;This one is styled because it is directly adjacent to the H1&lt;/h2&gt; &lt;h2&gt;This one is NOT styled because there is no H1 right before it&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#pseudoclasses" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pseudo-Classes&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVUAeoHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXfxhRpW1_nd02miTi4s_PA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVUAeoHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXfxhRpW1_nd02miTi4s_PA.png" alt="courtesy of Pseudo-classes — CSS: Cascading Style Sheets | MDN (mozilla.org)"&gt;&lt;/a&gt;courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;Pseudo-classes — CSS: Cascading Style Sheets | MDN (mozilla.org)&lt;/a&gt;-   &lt;span id="0b5c"&gt;&lt;code&gt;Pseudo-Class&lt;/code&gt; : Specifies a special state of the seleted element(s) and does not refer to any elements or attributes contained in the DOM.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="1c1d"&gt;Format is a &lt;code&gt;Selector:Pseudo-Class Name&lt;/code&gt; or &lt;code&gt;A:B&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;a:hover {&lt;br&gt;
font-family: "Roboto Condensed", sans-serif;&lt;br&gt;
color: #4fc3f7;&lt;br&gt;
text-decoration: none;&lt;br&gt;
border-bottom: 2px solid #4fc3f7;&lt;br&gt;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;gt; Some common pseudo-classes that are frequently used are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1aac"&gt;&lt;code&gt;active&lt;/code&gt; : 'push down', when elements are activated.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="587a"&gt;&lt;code&gt;checked&lt;/code&gt; : applies to things like radio buttons or checkbox inputs.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y52eTSZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Awg0YeoQ2mZKHWXaa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y52eTSZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Awg0YeoQ2mZKHWXaa.gif"&gt;&lt;/a&gt;-   &lt;span id="cf58"&gt;&lt;code&gt;disabled&lt;/code&gt; : any disabled element.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dd9QnK3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AKmzLwGMr_FsbHF4u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dd9QnK3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AKmzLwGMr_FsbHF4u.gif"&gt;&lt;/a&gt;-   &lt;span id="1b81"&gt;&lt;code&gt;first-child&lt;/code&gt; : first element in a group of children/siblings.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="eefb"&gt;&lt;code&gt;focus&lt;/code&gt; : elements that have current focus.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="c1da"&gt;&lt;code&gt;hover&lt;/code&gt; : elements that have cursor hovering over it.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0XfvHZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AX7-ym7Relt83npDe.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0XfvHZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AX7-ym7Relt83npDe.gif"&gt;&lt;/a&gt;-   &lt;span id="128b"&gt;&lt;code&gt;invalid&lt;/code&gt; : any form elements in an invalid state from client-side form validation.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="8fe0"&gt;&lt;code&gt;last-child&lt;/code&gt; : last element in a group of children/siblings.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="fac8"&gt;&lt;code&gt;not(selector)&lt;/code&gt; : elements that do not match the provided selector.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="037a"&gt;&lt;code&gt;required&lt;/code&gt; : form elements that are required.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EkhkSJ1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ACs9Jf4O0FHQB7Okc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EkhkSJ1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ACs9Jf4O0FHQB7Okc.gif"&gt;&lt;/a&gt;-   &lt;span id="2d63"&gt;&lt;code&gt;valid&lt;/code&gt; : form elements in a valid state.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="7eaf"&gt;&lt;code&gt;visited&lt;/code&gt; : anchor tags of which the user has already visited the URL that the href points to.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#pseudoselectors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Pseudo-Selectors&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="571c"&gt;Used to create pseudo-elements as children of the elements to which the property applies.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8995"&gt;&lt;code&gt;::after&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span id="9e9b"&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;p::before {&lt;br&gt;
    background-color: lightblue;&lt;br&gt;
    border-right: 4px solid violet;&lt;br&gt;
    content: ":-) ";&lt;br&gt;
    margin-right: 4px;&lt;br&gt;
    padding-left: 4px;&lt;br&gt;
  }&lt;/p&gt;



&lt;p&gt;This is the first paragraph&lt;/p&gt;

&lt;p&gt;This is the second paragraph&lt;/p&gt;

&lt;p&gt;This is the third paragraph&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="22c4"&gt;Will add some blue smiley faces before the p tag elements.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#css-rules" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS Rules&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="66b6"&gt;&lt;code&gt;CSS Rule&lt;/code&gt; : Collection of single or compound selectors, a curly brace, zero or more properties&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9ec3"&gt;&lt;code&gt;CSS Rule Specificity&lt;/code&gt; : Sometimes CSS rules will contain multiple elements and may have overlapping properties rules for those same elements - there is an algorithm in CSS that calculates which rule takes precedence.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bc57"&gt;&lt;code&gt;The Four Number Calculation&lt;/code&gt;&lt;strong&gt; : listed in increasing order of importance.&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="c45f"&gt;Who has the most IDs? If no one, continue.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="3aff"&gt;Who has the most classes? If no one, continue.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="b70b"&gt;Who has the most tags? If no one, continue.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="59f0"&gt;Last Read in the browser wins.&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWh_PC_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AZ0iSQ0bhAiK5gYhk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWh_PC_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AZ0iSQ0bhAiK5gYhk.png"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzlccCPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ARpC3i4EQM_HDRyUS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzlccCPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ARpC3i4EQM_HDRyUS.png"&gt;&lt;/a&gt;&lt;br&gt;
      .box {&lt;br&gt;
        width: 50px;&lt;br&gt;
        height: 50px;&lt;br&gt;
        border: 1px solid black;&lt;br&gt;
      }&lt;br&gt;
      .orange {&lt;br&gt;
        background-color: orange;&lt;br&gt;
      }&lt;br&gt;
      .yellow {&lt;br&gt;
        background-color: yellow;&lt;br&gt;
        border: 1px solid purple;&lt;br&gt;
      }&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="2b20"&gt;Coming back to our example where all the CSS Rules have tied, the last step 4 wins out so our element will have a &lt;code&gt;purple border&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#css-type-properties-and%C2%A0imports" class="anchor"&gt;
  &lt;/a&gt;
  CSS: Type, Properties, and Imports
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#typography" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Typography&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="af08"&gt;&lt;code&gt;font-family&lt;/code&gt; : change the font.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sO-0nzSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A8298p-Vlu15C-pdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sO-0nzSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A8298p-Vlu15C-pdw.png"&gt;&lt;/a&gt;-   &lt;span id="9771"&gt;Remember that not all computers have the same fonts on them.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="d248"&gt;You can import web fonts via an api by using&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="8578"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Liu+Jian+Mao+Cao&amp;amp;amp;display=swap');&lt;/code&gt; and pasting it st the top of your CSS file.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="82b1"&gt;And then reference it in your font-family.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="c651"&gt;&lt;code&gt;font-size&lt;/code&gt; : Changes the size of your font.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="a7dc"&gt;Keep in mind the two kind of units CSS uses:&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="c034"&gt;&lt;code&gt;Absolute&lt;/code&gt; : &lt;code&gt;Pixels&lt;/code&gt;, Points, Inches, Centimeters.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="7221"&gt;&lt;code&gt;Relative&lt;/code&gt; : Em, Rem.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="80e1"&gt;Em: Calculating the size relative to the previous div (bubbles down)&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="6c9e"&gt;Rem: Calculates relative to the parent element always.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="0f35"&gt;&lt;code&gt;font-style&lt;/code&gt; : Used to set a font to italics.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="20a3"&gt;&lt;code&gt;font-weight&lt;/code&gt; : Used to make a font bold.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="ba17"&gt;&lt;code&gt;text-align&lt;/code&gt; : Used to align your text to the left, center, or right.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="e694"&gt;&lt;code&gt;text-decoration&lt;/code&gt; : Use to put lines above, through, or under text. Lines can be solid, dashed, or wavy!&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="0777"&gt;&lt;code&gt;text-transform&lt;/code&gt; : Used to set text to all lowercase, uppercase, or capitalize all words.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#backgroundimages" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Background-Images&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="a7cc"&gt;You can use the background-image property to set a background image for an element.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#css-colors-borders-and%C2%A0shadows" class="anchor"&gt;
  &lt;/a&gt;
  CSS: Colors, Borders, and Shadows
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#colors" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Colors&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="6887"&gt;You can set colors in CSS in three popular ways: by name, by hexadecimal RGB value, and by their decimal RGB value.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1d78"&gt;rgba() is used to make an rbg value more transparent, the &lt;code&gt;a&lt;/code&gt; is used to specify the &lt;code&gt;alpha channel&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a422"&gt;&lt;strong&gt;Color&lt;/strong&gt; : Property used to change the color of text.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6bcb"&gt;&lt;strong&gt;Background-Color&lt;/strong&gt; : Property to change the backgrounf color of an element.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#borders" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Borders&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="cce0"&gt;Borders take three values: The width of the border, the style (i.e. solid, dotted, dashed), color of the border.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#shadows" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Shadows&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="6391"&gt;There are two kinds of shadows in CSS: &lt;code&gt;box shadows&lt;/code&gt; and &lt;code&gt;text shadows&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7fc1"&gt;Box refers to HTML elements.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8c59"&gt;Text refers to text.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="266d"&gt;Shadows take values such as, the horizontal &amp;amp; vertical offsets of the shadow, the blur radius of the shadow, the spread radius, and of course the colors.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#my-blog" class="anchor"&gt;
  &lt;/a&gt;
  My Blog:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bgoonz-blog.netlify.app/" title="https://bgoonz-blog.netlify.app/"&gt;&lt;strong&gt;Web-Dev-Hub&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;my resource sharing and blog site ... centered mostly on web development and just a bit of audio production / generally…&lt;/em&gt;bgoonz-blog.netlify.app&lt;/a&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/3a17ba25ba82"&gt;August 22, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/adding-css-to-your-html-3a17ba25ba82"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#a-list-of-all-of-my-articles-to-link-to-future-posts" class="anchor"&gt;
  &lt;/a&gt;
  A list of all of my articles to link to future posts
&lt;/h1&gt;

&lt;p&gt;You should probably skip this one… seriously it’s just for internal use!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#all-of-my-medium%C2%A0stories" class="anchor"&gt;
  &lt;/a&gt;
  All Of My Medium Stories
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWYvgfb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AyZ41P3YdMYMiyFPAPrzyGw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWYvgfb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AyZ41P3YdMYMiyFPAPrzyGw.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#this-is-another-backup-of-all-of%C2%A0them"&gt;
  &lt;/a&gt;
  This is another backup of all of them!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://golden-lobe-519.notion.site/Medium-7b5b9bd642344d60afe3f03fe6431952" title="https://golden-lobe-519.notion.site/Medium-7b5b9bd642344d60afe3f03fe6431952"&gt;&lt;strong&gt;All OF MEDIUM ARTICLES&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;2021-02-27_A-Quick-Guide-to-Big-O-Notation--Memoization--Tabulation--and-Sorting-Algorithms-by-Example-803ff193c522…&lt;/em&gt;golden-lobe-519.notion.site&lt;/a&gt;&lt;a href="https://golden-lobe-519.notion.site/Medium-7b5b9bd642344d60afe3f03fe6431952"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://bryanguner.medium.com/prerequisites-to-writing-express-apis-75e3267b284a" title="https://bryanguner.medium.com/prerequisites-to-writing-express-apis-75e3267b284a"&gt;&lt;strong&gt;The ExpressJS Way To Write APIs&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This article will cover the basics of express from the perspective of a beginner without concerning it’s self with the…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/prerequisites-to-writing-express-apis-75e3267b284a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02" title="https://bryanguner.medium.com/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02"&gt;&lt;strong&gt;Heroku Deploy Guides &amp;amp; Cheatsheet Compilation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Heroku lets you deploy, run and manage applications written in Ruby, Node.js, Java, Python, Clojure, Scala, Go and PHP…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f" title="https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f"&gt;&lt;strong&gt;A Comprehensive Deep Dive into React&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;An in-depth look into the world of React.&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380" title="https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380"&gt;&lt;strong&gt;Web Development Resource List #4&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Update:&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/bash-d3077114aea7" title="https://bryanguner.medium.com/bash-d3077114aea7"&gt;&lt;strong&gt;BASH CHEAT SHEET&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;My Bash Cheatsheet Index:&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/bash-d3077114aea7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b" title="https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b"&gt;&lt;strong&gt;Heroku Cheat Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;a cheatsheet for using heroku-cli&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/web-developers-technical-glossary-2066beae5e96" title="https://bryanguner.medium.com/web-developers-technical-glossary-2066beae5e96"&gt;&lt;strong&gt;Web Developer’s Technical Glossary&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This will be a running list as I make updates!&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/web-developers-technical-glossary-2066beae5e96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/postgresql-in-43-commands-or-less-19fba3e37110" title="https://medium.com/codex/postgresql-in-43-commands-or-less-19fba3e37110"&gt;&lt;strong&gt;PostgreSQL In 43 Commands Or Less&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;In database jargon, PostgreSQL uses a client/server model. A PostgreSQL session consists of the following cooperating…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/postgresql-in-43-commands-or-less-19fba3e37110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/why-jamstack-rocks-666114722f35" title="https://medium.com/geekculture/why-jamstack-rocks-666114722f35"&gt;&lt;strong&gt;Why Jamstack Rocks🤘😎🤙&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;JAMstack websites don’t use the microservices architecture, but they go for the micro frontends architecture. Each…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/why-jamstack-rocks-666114722f35"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/what-are-bash-aliases-and-why-should-you-be-using-them-30a6cfafdfeb" title="https://bryanguner.medium.com/what-are-bash-aliases-and-why-should-you-be-using-them-30a6cfafdfeb"&gt;&lt;strong&gt;What Are Bash Aliases And Why Should You Be Using Them!&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A Bash alias is a method of supplementing or overriding Bash commands with new ones. Bash aliases make it easy for…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/what-are-bash-aliases-and-why-should-you-be-using-them-30a6cfafdfeb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/life-saving-bash-scripts-part-2-b40c8ee22682" title="https://medium.com/geekculture/life-saving-bash-scripts-part-2-b40c8ee22682"&gt;&lt;strong&gt;Life Saving Bash Scripts Part 2&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I am not saying they’re in any way special compared with other bash scripts… but when I consider that you can never…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/life-saving-bash-scripts-part-2-b40c8ee22682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/analytics-vidhya/job-boards-and-the-hunt-8cbfefefbb33" title="https://medium.com/analytics-vidhya/job-boards-and-the-hunt-8cbfefefbb33"&gt;&lt;strong&gt;Job Boards and The Hunt&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I can’t imagine the kind of masochism it would take to enjoy the act of posting and daily maintenance on a job…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/analytics-vidhya/job-boards-and-the-hunt-8cbfefefbb33"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/absolutely-everything-you-could-need-to-know-about-how-javascript-works-633549469528" title="https://bryanguner.medium.com/absolutely-everything-you-could-need-to-know-about-how-javascript-works-633549469528"&gt;&lt;strong&gt;Absolutely Everything You Could Need To Know About How JavaScript Works.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Seriously… this list is utterly exhaustive it covers more core concepts than I can hold the names of in working memory…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/absolutely-everything-you-could-need-to-know-about-how-javascript-works-633549469528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/react-tutorial-from-basics-647ba595e607" title="https://bryanguner.medium.com/react-tutorial-from-basics-647ba595e607"&gt;&lt;strong&gt;Basic React Tutorial&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Random Things to Remember&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/react-tutorial-from-basics-647ba595e607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/fundamental-concepts-in-react-that-will-probably-come-up-on-an-interview-5495b6421287" title="https://bryanguner.medium.com/fundamental-concepts-in-react-that-will-probably-come-up-on-an-interview-5495b6421287"&gt;&lt;strong&gt;Fundamental Concepts In React That Will Probably Come Up On An Interview&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Incomplete Article&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/fundamental-concepts-in-react-that-will-probably-come-up-on-an-interview-5495b6421287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/the-penultimate-web-developers-cheat-sheet-a02a423139a4" title="https://medium.com/geekculture/the-penultimate-web-developers-cheat-sheet-a02a423139a4"&gt;&lt;strong&gt;The Penultimate Web Developer’s Cheat Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I am literally just going to combine a fair number of my Cheat Sheets in no particular order.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/the-penultimate-web-developers-cheat-sheet-a02a423139a4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/bash-commands-that-save-time-920fb6ab9d0a" title="https://medium.com/geekculture/bash-commands-that-save-time-920fb6ab9d0a"&gt;&lt;strong&gt;Bash Commands That Save Me Time and Frustration&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Here’s a list of bash commands that stand between me and insanity.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/bash-commands-that-save-time-920fb6ab9d0a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/quick-web-developers-website-checklist-a-list-of-tools-for-improvement-9a52e11c8ee1" title="https://bryanguner.medium.com/quick-web-developers-website-checklist-a-list-of-tools-for-improvement-9a52e11c8ee1"&gt;&lt;strong&gt;Quick Web Developers Website Checklist &amp;amp; A List Of Tools For Improvement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A set of questions you should use before handing off your application to the client.&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/quick-web-developers-website-checklist-a-list-of-tools-for-improvement-9a52e11c8ee1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/react-md-cbaafb31765d" title="https://javascript.plainenglish.io/react-md-cbaafb31765d"&gt;&lt;strong&gt;10 Essential React Interview Questions For Aspiring Frontend Developers&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Comprehensive React Cheatsheet included at the bottom of this article!&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/react-md-cbaafb31765d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/long-list-of-invaluable-nodejs-resources-6a793ae1ce6" title="https://levelup.gitconnected.com/long-list-of-invaluable-nodejs-resources-6a793ae1ce6"&gt;&lt;strong&gt;Long List Of Invaluable NodeJS Resources&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Disclaimer: I know that I did not create this list all on my own… I can’t recall or track down the original list if you…&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/long-list-of-invaluable-nodejs-resources-6a793ae1ce6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/open-ended-frontend-interview-questions-you-should-answer-before-your-next-interview-7c9722712521" title="https://bryanguner.medium.com/open-ended-frontend-interview-questions-you-should-answer-before-your-next-interview-7c9722712521"&gt;&lt;strong&gt;Open Ended Frontend Interview Questions You Should Answer Before Your Next Interview&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Explain event delegation.&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/open-ended-frontend-interview-questions-you-should-answer-before-your-next-interview-7c9722712521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/data-structures-under-the-hood-660256c2e4e3" title="https://bryanguner.medium.com/data-structures-under-the-hood-660256c2e4e3"&gt;&lt;strong&gt;Data Structures… Under The Hood&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Data Structures Reference&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/data-structures-under-the-hood-660256c2e4e3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/web-development-interview-resource-list-88fce9876261" title="https://medium.com/geekculture/web-development-interview-resource-list-88fce9876261"&gt;&lt;strong&gt;Web Development Interview Resource List&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/web-development-interview-resource-list-88fce9876261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d" title="https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d"&gt;&lt;strong&gt;Beginners Guide To Python&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;My favorite language for maintainability is Python. It has simple, clean syntax, object encapsulation, good library…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/data-structures-algorithms-resource-list-part-1-8bad647a8ad8" title="https://bryanguner.medium.com/data-structures-algorithms-resource-list-part-1-8bad647a8ad8"&gt;&lt;strong&gt;Data Structures &amp;amp; Algorithms Resource List Part 1&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Guess the author of the following quotes:&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/data-structures-algorithms-resource-list-part-1-8bad647a8ad8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/memoization-86685d811182" title="https://javascript.plainenglish.io/memoization-86685d811182"&gt;&lt;strong&gt;What is Memoization?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;And why this programming paradigm shouldn’t make you cringe.&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/memoization-86685d811182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/css-interview-prep-quiz-6e3e4de7ca53" title="https://bryanguner.medium.com/css-interview-prep-quiz-6e3e4de7ca53"&gt;&lt;strong&gt;CSS Interview Prep Quiz&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Plus Css Cheat Sheet (82 questions total)&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/css-interview-prep-quiz-6e3e4de7ca53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/verbal-technical-interview-questions-about-graph-data-structures-fc6b1afbd8be" title="https://medium.com/geekculture/verbal-technical-interview-questions-about-graph-data-structures-fc6b1afbd8be"&gt;&lt;strong&gt;Graph Data Structure Interview Questions At A Glance&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Because they’re just about the most important data structure there is.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/verbal-technical-interview-questions-about-graph-data-structures-fc6b1afbd8be"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/object-methods-4066ed24b214" title="https://medium.com/geekculture/object-methods-4066ed24b214"&gt;&lt;strong&gt;Object Methods&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Iterating Through Objects&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/object-methods-4066ed24b214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/github-repositories-that-will-teach-you-how-to-code-for-free-ad0ecf59d89e" title="https://levelup.gitconnected.com/github-repositories-that-will-teach-you-how-to-code-for-free-ad0ecf59d89e"&gt;&lt;strong&gt;Github Repositories That Will Teach You How To Code For Free!&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;30-seconds/30-seconds-of-code&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/github-repositories-that-will-teach-you-how-to-code-for-free-ad0ecf59d89e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/resources-by-programming-language-399d9f9ef520" title="https://bryanguner.medium.com/resources-by-programming-language-399d9f9ef520"&gt;&lt;strong&gt;Resources By Programming Language&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Here’s a list of programming resources sorted by programming language.&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/resources-by-programming-language-399d9f9ef520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/scope-closures-context-in-javascript-f126f1523104" title="https://medium.com/codex/scope-closures-context-in-javascript-f126f1523104"&gt;&lt;strong&gt;Breaking Down Scope, Context, And Closure In JavaScript In Simple Terms.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“JavaScript’s global scope is like a public toilet. You can’t avoid going in there, but try to limit your contact with…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/scope-closures-context-in-javascript-f126f1523104"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/these-are-a-few-of-my-favorite-things-82e8b6e61879" title="https://medium.com/codex/these-are-a-few-of-my-favorite-things-82e8b6e61879"&gt;&lt;strong&gt;These Are A Few Of My Favorite Things&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A web development student’s declassified school survival guide.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/these-are-a-few-of-my-favorite-things-82e8b6e61879"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/objects-in-javascript-b212486dade6" title="https://medium.com/codex/objects-in-javascript-b212486dade6"&gt;&lt;strong&gt;Objects In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;The object is a data structure that stores other data, similar to how an array stores elements.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/objects-in-javascript-b212486dade6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/fundamental-javascript-concepts-you-should-understand-81c4d839b827" title="https://bryanguner.medium.com/fundamental-javascript-concepts-you-should-understand-81c4d839b827"&gt;&lt;strong&gt;Fundamental Javascript Concepts You Should Understand&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Plain Old JS Object Lesson Concepts&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/fundamental-javascript-concepts-you-should-understand-81c4d839b827"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/mutability-and-reference-vs-privative-types-in-javascript-5294422db4b0" title="https://bryanguner.medium.com/mutability-and-reference-vs-privative-types-in-javascript-5294422db4b0"&gt;&lt;strong&gt;Mutability And Reference VS Privative Types in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Mutability &amp;amp;&amp;amp; Primitive &amp;amp;&amp;amp; Reference Examples&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/mutability-and-reference-vs-privative-types-in-javascript-5294422db4b0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/array-callback-methods-implemented-with-for-loops-d08875df6777" title="https://javascript.plainenglish.io/array-callback-methods-implemented-with-for-loops-d08875df6777"&gt;&lt;strong&gt;Array Callback Methods Implemented With For Loops&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;How to implement array callback methods in JavaScript&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/array-callback-methods-implemented-with-for-loops-d08875df6777"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/introductory-react-part-2-cda01615a186" title="https://bryanguner.medium.com/introductory-react-part-2-cda01615a186"&gt;&lt;strong&gt;Beginner’s Guide To React Part 2&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;As I learn to build web applications in React I will blog about it in this series in an attempt to capture the…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/introductory-react-part-2-cda01615a186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3" title="https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3"&gt;&lt;strong&gt;A Very Quick Guide To Calculating Big O Computational Complexity&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Big O: big picture, broad strokes, not details&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad" title="https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad"&gt;&lt;strong&gt;Introduction to React for Complete Beginners&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;All of the code examples below will be included a second time at the bottom of this article as an embedded gist.&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7" title="https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7"&gt;&lt;strong&gt;Scheduling: setTimeout and setInterval&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;We may decide to execute a function not right now, but at a later time. That’s called “scheduling a call”.&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/css-animations-d196a20099a5" title="https://bryanguner.medium.com/css-animations-d196a20099a5"&gt;&lt;strong&gt;LocalStorage VS SessionStorage&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web storage objects localStorage and sessionStorage allow to save key/value pairs in the browser.&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/css-animations-d196a20099a5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b" title="https://levelup.gitconnected.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b"&gt;&lt;strong&gt;These Are The Bash Shell Commands That Stand Between Me And Insanity&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I will not profess to be a bash shell wizard… but I have managed to scour some pretty helpful little scripts from Stack…&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07" title="https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07"&gt;&lt;strong&gt;How To Implement Native(ES6) Data Structures Using Arrays &amp;amp; Objects&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Smart data structures and dumb code works better than the other way around -“Eric S. Raymond”&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/objects-in-javascript-cc578a781e1d" title="https://medium.com/codex/objects-in-javascript-cc578a781e1d"&gt;&lt;strong&gt;Objects in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Codepen with examples for you to practice with below!&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/objects-in-javascript-cc578a781e1d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1" title="https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1"&gt;&lt;strong&gt;The Beginner’s Guide To JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Part 1&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb" title="https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb"&gt;&lt;strong&gt;Web Developer Resource List Part 4&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A all encompassing list of tools and resources for web developers&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a" title="https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a"&gt;&lt;strong&gt;VSCode Extensions Specifically for JavaScript Development&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;VSCode Extensions that are indispensable in JavaScript development&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b" title="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;&lt;strong&gt;A list of all of my articles to link to future posts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;You should probably skip this one… seriously it’s just for internal use!&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb" title="https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb"&gt;&lt;strong&gt;Fundamental Data Structures in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A simple to follow guide to Lists Stacks and Queues, with animated gifs, diagrams, and code examples!&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a" title="https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a"&gt;&lt;strong&gt;Web Development Resources Part 3&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;I’m the psychological equivalent of a physical hoarder only instead of empty soda cans and dead racoons it’s lists of…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/web-development-interview-part-3-826ae81a9107" title="https://medium.com/codex/web-development-interview-part-3-826ae81a9107"&gt;&lt;strong&gt;Web Development Interview Part 3💻&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This installment is going to be the least technically demanding thus far however these questions are a more realistic…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/web-development-interview-part-3-826ae81a9107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24" title="https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24"&gt;&lt;strong&gt;The Best Cloud-Based Code Playgrounds of 2021 (Part 1)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443" title="https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443"&gt;&lt;strong&gt;Front End Interview Questions Part 2&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;These will focus more on vocabulary and concepts than the application driven approach in my last post!&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263" title="https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263"&gt;&lt;strong&gt;Web Developer Resource List Part 2&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Because I compile these things compulsively anyway…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/http-basics-8f02a96a834a" title="https://levelup.gitconnected.com/http-basics-8f02a96a834a"&gt;&lt;strong&gt;HTTP Basics&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;“If you want to build a ship, don’t drum up the men and women to gather wood, divide the work, and give orders…&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/http-basics-8f02a96a834a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35" title="https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35"&gt;&lt;strong&gt;JavaScript Frameworks &amp;amp; Libraries&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;My Awesome JavaScript List Part 2&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74" title="https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74"&gt;&lt;strong&gt;My ‘awesome’ list of JavaScript resources&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Everyone’s seen the ‘Awesome’ lists on GitHub… and they are indeed awesome… so today I am going to attempt to curate my…&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931" title="https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931"&gt;&lt;strong&gt;Everything You Need to Get Started With VSCode + Extensions &amp;amp; Resources&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Commands:&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f" title="https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f"&gt;&lt;strong&gt;My Favorite VSCode &lt;em&gt;Themes&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Themeslevelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333" title="https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333"&gt;&lt;strong&gt;Object Oriented Programming in JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Object-Oriented Programming&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1" title="https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1"&gt;&lt;strong&gt;JavaScript Rotate (Array) ProblemWalkthrough&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Explanation for Rotate Right&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc" title="https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc"&gt;&lt;strong&gt;Super Simple Intro To HTML&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;What is HTML, CSS &amp;amp; JS and why do we need all three?&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98" title="https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98"&gt;&lt;strong&gt;Everything You Need To Know About Relational Databases, SQL, PostgreSQL and Sequelize To Build…&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;For Front end developers who like myself struggle with making the jump to fullstack.&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107" title="https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107"&gt;&lt;strong&gt;Understanding Git (A Beginners Guide Containing Cheat Sheets &amp;amp; Resources)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Basic Git Work Flow.&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db" title="https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db"&gt;&lt;strong&gt;The Complete JavaScript Reference Guide&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;You will want to bookmark this&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/modules-in-javascript-a55333e35978" title="https://medium.com/geekculture/modules-in-javascript-a55333e35978"&gt;&lt;strong&gt;Modules in Javascript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Differences between Node.js and browsers&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/modules-in-javascript-a55333e35978"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3" title="https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3"&gt;&lt;strong&gt;An Introduction to Markdown (Bonus Markdown Templates Included)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Basic Syntax Guide&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d" title="https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d"&gt;&lt;strong&gt;Web Dev Resources&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web Development&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/regular-expressions-4d8fb3eb146b" title="https://medium.com/codex/regular-expressions-4d8fb3eb146b"&gt;&lt;strong&gt;Regular Expressions&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;description:&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/regular-expressions-4d8fb3eb146b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/writing-files-using-python-d46b4851366f" title="https://medium.com/geekculture/writing-files-using-python-d46b4851366f"&gt;&lt;strong&gt;Writing Files Using Python&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Basics of Writing Files in Python&lt;br&gt;&lt;br&gt;
The common methods to operate with files are open() to open a file,&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/geekculture/writing-files-using-python-d46b4851366f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab" title="https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab"&gt;&lt;strong&gt;A Collection of my most useful Gist Entries&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;This list is in no particular order!&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a" title="https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a"&gt;&lt;strong&gt;Learn CSS So That Your Site Doesn’t Look Like Garbage&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;CSS Selectors&lt;/em&gt;javascript.plainenglish.io&lt;/a&gt;&lt;a href="https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089" title="https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089"&gt;&lt;strong&gt;PostgreSQL Setup For Windows &amp;amp; WSL/Ubuntu&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;If you follow this guide to a tee… you will install PostgreSQL itself on your Windows installation. Then, you will…&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37" title="https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37"&gt;&lt;strong&gt;Emmet Cheat Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;EMMET&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/git-tricks-57e8d0292285" title="https://bryanguner.medium.com/git-tricks-57e8d0292285"&gt;&lt;strong&gt;Git-Tricks&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Refs&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/git-tricks-57e8d0292285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb" title="https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb"&gt;&lt;strong&gt;Python Study Guide for a JavaScript Programmer&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A guide to commands in Python from what you know in JavaScript&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4" title="https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4"&gt;&lt;strong&gt;&lt;em&gt;Fetch&lt;/em&gt; Quick Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Fetchbryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca" title="https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca"&gt;&lt;strong&gt;Express Quick Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Settings&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4" title="https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4"&gt;&lt;strong&gt;Fundamental Data Structures In JavaScript&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Data structures in JavaScript&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986" title="https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986"&gt;&lt;strong&gt;Deploy React App To Heroku Using Postgres &amp;amp; Express&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Heroku is an web application that makes deploying applications easy for a beginner.&lt;/em&gt;bryanguner.medium.com&lt;/a&gt;&lt;a href="https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31" title="https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31"&gt;&lt;strong&gt;Postgresql Cheat Sheet&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;PostgreSQL commands&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522" title="https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"&gt;&lt;strong&gt;A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Curating Complexity: A Guide to Big-O Notation&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe" title="https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe"&gt;&lt;strong&gt;Basic Web Development Environment Setup&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Windows Subsystem for Linux (WSL) and Ubuntu&lt;/em&gt;levelup.gitconnected.com&lt;/a&gt;&lt;a href="https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/1f6f88ebdf5b"&gt;March 22, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codexwebdevhub/notes-i-wish-i-had-when-i-started-learning-python-16ce4244be12"&gt;https://medium.com/codexwebdevhub/notes-i-wish-i-had-when-i-started-learning-python-16ce4244be12&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/codexwebdevhub/notes-i-wish-i-had-when-i-started-learning-python-16ce4244be12"&gt;https://medium.com/codexwebdevhub/notes-i-wish-i-had-when-i-started-learning-python-16ce4244be12&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/awesome-list-of-github-repositories-f1c433e32b17"&gt;https://bryanguner.medium.com/awesome-list-of-github-repositories-f1c433e32b17&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/my-personal-arsenal-of-convenience-scripts-3c7869fdae53"&gt;https://bryanguner.medium.com/my-personal-arsenal-of-convenience-scripts-3c7869fdae53&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/my-personal-arsenal-of-convenience-scripts-3c7869fdae53"&gt;https://bryanguner.medium.com/my-personal-arsenal-of-convenience-scripts-3c7869fdae53&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/adding-css-to-your-html-3a17ba25ba82"&gt;https://bryanguner.medium.com/adding-css-to-your-html-3a17ba25ba82&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/adding-css-to-your-html-3a17ba25ba82"&gt;https://bryanguner.medium.com/adding-css-to-your-html-3a17ba25ba82&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/most-common-javascript-errors-311ea1356a3d"&gt;https://bryanguner.medium.com/most-common-javascript-errors-311ea1356a3d&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/most-common-javascript-errors-311ea1356a3d"&gt;https://bryanguner.medium.com/most-common-javascript-errors-311ea1356a3d&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/super-simple-intro-to-react-5c78e4207b7f"&gt;https://bryanguner.medium.com/super-simple-intro-to-react-5c78e4207b7f&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/super-simple-intro-to-react-5c78e4207b7f"&gt;https://bryanguner.medium.com/super-simple-intro-to-react-5c78e4207b7f&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/codexcodex/react-state-d8e0fc340714"&gt;https://medium.com/codexcodex/react-state-d8e0fc340714&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/awesome-web-development-youtube-video-archive-792a25839143"&gt;https://bryanguner.medium.com/awesome-web-development-youtube-video-archive-792a25839143&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/awesome-web-development-youtube-video-archive-792a25839143"&gt;https://bryanguner.medium.com/awesome-web-development-youtube-video-archive-792a25839143&lt;/a&gt;&lt;br&gt;
&lt;a href="https://levelup.gitconnected.com/beginner-python-problems-solutions-dd631e9c3a9f"&gt;https://levelup.gitconnected.com/beginner-python-problems-solutions-dd631e9c3a9f&lt;/a&gt;&lt;br&gt;
&lt;a href="https://levelup.gitconnected.com/beginner-python-problems-solutions-dd631e9c3a9f"&gt;https://levelup.gitconnected.com/beginner-python-problems-solutions-dd631e9c3a9f&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/codexcodex/fundamental-concepts-in-javascript-8e093a665b04"&gt;https://medium.com/codexcodex/fundamental-concepts-in-javascript-8e093a665b04&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/codexcodex/fundamental-concepts-in-javascript-8e093a665b04"&gt;https://medium.com/codexcodex/fundamental-concepts-in-javascript-8e093a665b04&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/bash-proficiency-in-under-15-minutes-3ec9d4e2e65"&gt;https://bryanguner.medium.com/bash-proficiency-in-under-15-minutes-3ec9d4e2e65&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/bash-proficiency-in-under-15-minutes-3ec9d4e2e65"&gt;https://bryanguner.medium.com/bash-proficiency-in-under-15-minutes-3ec9d4e2e65&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/codexanalytics-vidhya/mini-review-of-sql-for-postgresql-w-node-express-f34676f3802b"&gt;https://medium.com/codexanalytics-vidhya/mini-review-of-sql-for-postgresql-w-node-express-f34676f3802b&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/codexanalytics-vidhya/mini-review-of-sql-for-postgresql-w-node-express-f34676f3802b"&gt;https://medium.com/codexanalytics-vidhya/mini-review-of-sql-for-postgresql-w-node-express-f34676f3802b&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bryanguner.medium.com/all-the-things-you-can-embed-in-a-medium-article-b03a85c65d86"&gt;https://bryanguner.medium.com/all-the-things-you-can-embed-in-a-medium-article-b03a85c65d86&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All The Things You Can Embed In A Medium Article&lt;br&gt;
I have this innate desire to make everything available all in one place and it's usually an unnecessary waste of time……bryanguner.medium.com&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/front-end-behavioral-interview-bf5c079f7461"&gt;https://bryanguner.medium.com/front-end-behavioral-interview-bf5c079f7461&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/front-end-behavioral-interview-bf5c079f7461"&gt;https://bryanguner.medium.com/front-end-behavioral-interview-bf5c079f7461&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codexcodex/prerequisites-to-writing-express-apis-75e3267b284a"&gt;https://medium.com/codexcodex/prerequisites-to-writing-express-apis-75e3267b284a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codexcodex/prerequisites-to-writing-express-apis-75e3267b284a"&gt;https://medium.com/codexcodex/prerequisites-to-writing-express-apis-75e3267b284a&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codexanalytics-vidhya/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02"&gt;https://medium.com/codexanalytics-vidhya/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codexanalytics-vidhya/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02"&gt;https://medium.com/codexanalytics-vidhya/heroku-deploy-guides-cheatsheet-compilation-b2897b69ce02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f"&gt;https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f"&gt;https://javascript.plainenglish.io/react-in-depth-1965dcde8d4f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380"&gt;https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380"&gt;https://bryanguner.medium.com/take-a-look-at-the-big-picture-b69e0999a380&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/bash-d3077114aea7"&gt;https://bryanguner.medium.com/bash-d3077114aea7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/bash-d3077114aea7"&gt;https://bryanguner.medium.com/bash-d3077114aea7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b"&gt;https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b"&gt;https://bryanguner.medium.com/heroku-cheat-sheet-6107ce6ba52b&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#all-the-things-you-can-embed-in-a-medium-article"&gt;
  &lt;/a&gt;
  All The Things You Can Embed In A Medium Article
&lt;/h1&gt;

&lt;p&gt;I have this innate desire to make everything available all in one place and it’s usually an unnecessary waste of time… but here I will…&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#all-the-things-you-can-embed-in-a-medium%C2%A0article"&gt;
  &lt;/a&gt;
  All The Things You Can Embed In A Medium Article
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#i-have-this-innate-desire-to-make-everything-available-all-in-one-place-and-its-usually-an-unnecessary-waste-of-time-but-here-i-will-conduct-and-experiment-where-i-intentionally-indulge-that-tendency"&gt;
  &lt;/a&gt;
  I have this innate desire to make everything available all in one place and it’s usually an unnecessary waste of time… but here I will conduct and ‘experiment’ where I intentionally indulge that tendency.
&lt;/h4&gt;

&lt;p&gt;Here you can see in just the first frame of my blog site 5 different embedded widgets that I inject onto nearly every page of the site using javascript to append my widgets to various anchor points in the html.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ExP4j80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/1%2A8Td2sElycsUj67bbm5m_0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ExP4j80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/1%2A8Td2sElycsUj67bbm5m_0w.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update%C2%A0"&gt;
  &lt;/a&gt;
  Update :
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#table-with-airtable"&gt;
  &lt;/a&gt;
  Table with Airtable:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### Math With &lt;a href="https://math.embed.fun/"&gt;&lt;/a&gt;&lt;a href="https://math.embed.fun/"&gt;https://math.embed.fun/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 1.) CodePen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_G-y5Cj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/1%2Aub0xEha5Nrq60qU1FspjAQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_G-y5Cj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/1%2Aub0xEha5Nrq60qU1FspjAQ.png"&gt;&lt;/a&gt;&lt;a href="https://codepen.io/bgoonz/pen/poPOqEO"&gt;For this next inclusion I will kill two birds with one stone… I will embed a CodePen…who’s contents are an embedded version of my twitter feed…&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#if-you-wanna-get-really-meta-about-it-you-can-also-embed-your-medium-articles-within-a-medium%C2%A0article" class="anchor"&gt;
  &lt;/a&gt;
  If you wanna get really meta about it you can also embed your medium articles within a medium article…
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 2.) Upscribe Form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 3.) Play.ht Medium Article To Voice-Audio Transcription:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="66fb"&gt;→ &lt;a href="https://play.ht/"&gt;Link&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#playht-offers-the-following-services" class="anchor"&gt;
  &lt;/a&gt;
  Play.ht offers the following services:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qaoOWqwU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AGSZM_XmBIe4sgMtYN3e57A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qaoOWqwU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AGSZM_XmBIe4sgMtYN3e57A.png"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 4.) : Repl.it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 5.) :You can also embed a JSFiddle like a code-sandbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/bigo-forked-dhpjq"&gt;bigO (forked) — CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;#### 6.) :GIF :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBVpyW-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AS0kSybjoWZP08__p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBVpyW-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AS0kSybjoWZP08__p.gif"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 7.) Dribble:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15796789-Mihir-Beg-Muisc?utm_source=Clipboard_Shot&amp;amp;utm_campaign=bgoonz4242&amp;amp;utm_content=Mihir%20Beg%20Muisc&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=bgoonz4242&amp;amp;utm_content=Mihir%20Beg%20Muisc&amp;amp;utm_medium=Social_Share" title="https://dribbble.com/shots/15796789-Mihir-Beg-Muisc?utm_source=Clipboard_Shot&amp;amp;utm_campaign=bgoonz4242&amp;amp;utm_content=Mihir%20Beg%20Muisc&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=bgoonz4242&amp;amp;utm_content=Mihir%20Beg%20Muisc&amp;amp;utm_medium=Social_Share"&gt;&lt;strong&gt;Mihir Beg Muisc&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Mihir Beg Muisc designed by Bryan Guner. Connect with them on Dribbble; the global community for designers and creative…&lt;/em&gt;dribbble.com&lt;/a&gt;&lt;a href="https://dribbble.com/shots/15796789-Mihir-Beg-Muisc?utm_source=Clipboard_Shot&amp;amp;utm_campaign=bgoonz4242&amp;amp;utm_content=Mihir%20Beg%20Muisc&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=bgoonz4242&amp;amp;utm_content=Mihir%20Beg%20Muisc&amp;amp;utm_medium=Social_Share"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 8.) SlideShare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="cd54"&gt;&lt;a href="https://www.slideshare.net/"&gt;link&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 9.)Google Forms/Quizzes :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 10.) YouTube Videos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 11.) 360 Degree Photos from Kuula.com:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzjzb2I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Azost4Lf7pDfZdMf7b_hH4w.png"&gt;&lt;/a&gt;### 13.) A tweet:&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;a href="https://twitter.com/bgooonz/status/1423402910843604996?s=20"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#14-a-spotify-playlist" class="anchor"&gt;
  &lt;/a&gt;
  14.) A Spotify Playlist.
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#and-for-good-measure-a-soundcloud-track" class="anchor"&gt;
  &lt;/a&gt;
  And for good measure a SoundCloud track:
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#15-infographics" class="anchor"&gt;
  &lt;/a&gt;
  15.) Infographics:
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#tbc" class="anchor"&gt;
  &lt;/a&gt;
  TBC…..
&lt;/h3&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/b03a85c65d86"&gt;August 6, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/all-the-things-you-can-embed-in-a-medium-article-b03a85c65d86"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#an-introduction-to-markdown-bonus-markdown-templates-included" class="anchor"&gt;
  &lt;/a&gt;
  An Introduction to Markdown (Bonus Markdown Templates Included)
&lt;/h1&gt;

&lt;p&gt;Basic Syntax Guide&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#an-introduction-to-markdown-bonus-markdown-templates-included" class="anchor"&gt;
  &lt;/a&gt;
  An Introduction to Markdown (Bonus Markdown Templates Included)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYXiCwtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Aoy6szzmI0FdRUiTd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYXiCwtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Aoy6szzmI0FdRUiTd.png"&gt;&lt;/a&gt;&lt;a href="https://github.com/bgoonz/Markdown-Templates.git" title="https://github.com/bgoonz/Markdown-Templates.git"&gt;&lt;strong&gt;bgoonz/Markdown-Templates&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;One Paragraph of project description goes here These instructions will get you a copy of the project up and running on…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/bgoonz/Markdown-Templates.git"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-syntax%C2%A0guide" class="anchor"&gt;
  &lt;/a&gt;
  Basic Syntax Guide
&lt;/h3&gt;

&lt;p&gt;This topic is meant to give you a very basic overview of how Markdown works, showing only some of the most common operations you use most frequently. Keep in mind that you can also use the Edit menus to inject markdown using the toolbar, which serves as a great way to see how Markdown works. However, Markdown’s greatest strength lies in its simplicity and keyboard friendly approach that lets you focus on writing your text and staying on the keyboard.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is%C2%A0markdown" class="anchor"&gt;
  &lt;/a&gt;
  What is Markdown
&lt;/h3&gt;

&lt;p&gt;Markdown is very easy to learn and get comfortable with due it’s relatively small set of markup ‘commands’. It uses already familiar syntax to represent common formatting operations. Markdown understands basic line breaks so you can generally just type text.&lt;/p&gt;

&lt;p&gt;Markdown also allows for raw HTML inside of a markdown document, so if you want to embed something more fancy than what Markdowns syntax can do you can always fall back to HTML. However to keep documents readable that’s generally not recommended.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-markdown%C2%A0syntax" class="anchor"&gt;
  &lt;/a&gt;
  Basic Markdown Syntax
&lt;/h3&gt;

&lt;p&gt;The following are a few examples of the most common things you are likely to do with Markdown while building typical documentation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bold-and%C2%A0italic" class="anchor"&gt;
  &lt;/a&gt;
  Bold and Italic
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

This text **is bold**.
This text *is italic*.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This text is bold.&lt;br&gt;&lt;br&gt;
This text &lt;em&gt;is italic&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#header-text" class="anchor"&gt;
  &lt;/a&gt;
  Header Text
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#header-1" class="anchor"&gt;
  &lt;/a&gt;
  Header 1
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#header-2" class="anchor"&gt;
  &lt;/a&gt;
  Header 2
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#header-3" class="anchor"&gt;
  &lt;/a&gt;
  Header 3
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#header-4" class="anchor"&gt;
  &lt;/a&gt;
  Header 4
&lt;/h4&gt;

&lt;p&gt;Header 5Header 6&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#line-continuation" class="anchor"&gt;
  &lt;/a&gt;
  Line Continuation
&lt;/h3&gt;

&lt;p&gt;By default Markdown adds paragraphs at double line breaks. Single line breaks by themselves are simply wrapped together into a single line. If you want to have soft returns that break a single line, add two spaces at the end of the line.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

This line has a paragraph break at the end (empty line after).

Theses two lines should display as a single
line because there's no double space at the end.

The following line has a soft break at the end (two spaces at end)
This line should be following on the very next line.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This line has a paragraph break at the end (empty line after).&lt;/p&gt;

&lt;p&gt;Theses two lines should display as a single line because there’s no double space at the end.&lt;/p&gt;

&lt;p&gt;The following line has a soft break at the end (two spaces at end)&lt;br&gt;&lt;br&gt;
This line should be following on the very next line.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

[Help Builder Web Site](http://helpbuilder.west-wind.com/)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="http://helpbuilder.west-wind.com/"&gt;Help Builder Web Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need additional image tags like targets or title attributes you can also embed HTML directly:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

Go the Help Builder sitest Wind site: &amp;lt;a href="http://west-wind.com/"&amp;gt;Help Builder Site&amp;lt;/a&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#images" class="anchor"&gt;
  &lt;/a&gt;
  Images
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

![Help Builder Web Site](https://helpbuilder.west-wind.com/images/HelpBuilder_600.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBCnIuR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AibU0D-Zr0qDT5h3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBCnIuR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AibU0D-Zr0qDT5h3z.png"&gt;&lt;/a&gt;### Block Quotes&lt;/p&gt;

&lt;p&gt;Block quotes are callouts that are great for adding notes or warnings into documentation.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

&amp;amp;gt; ###  Headers break on their own
&amp;amp;gt; Note that headers don't need line continuation characters
as they are block elements and automatically break. Only text
lines require the double spaces for single line breaks.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&amp;gt; &lt;em&gt;Headers break on their own&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Note that headers don’t need line continuation characters as they are block elements and automatically break. Only text lines require the double spaces for single line breaks.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fontawesome-icons" class="anchor"&gt;
  &lt;/a&gt;
  Fontawesome Icons
&lt;/h3&gt;

&lt;p&gt;Help Builder includes a custom syntax for &lt;a href="http://fortawesome.github.io/Font-Awesome/icons/"&gt;FontAwesome&lt;/a&gt; icons in its templates. You can embed a &lt;code&gt;@ icon-&lt;/code&gt; followed by a font-awesome icon name to automatically embed that icon without full HTML syntax.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

Gear:  Configuration
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Configuration&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#html-markup" class="anchor"&gt;
  &lt;/a&gt;
  HTML Markup
&lt;/h3&gt;

&lt;p&gt;You can also embed plain HTML markup into the page if you like. For example, if you want full control over fontawesome icons you can use this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

This text can be **embedded** into Markdown:
 Refresh Page
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This text can be embedded into Markdown:&lt;br&gt;&lt;br&gt;
 Refresh Page&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#unordered-lists" class="anchor"&gt;
  &lt;/a&gt;
  Unordered Lists
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

* Item 1
* Item 2
* Item 3
This text is part of the third item. Use two spaces at end of the the list item to break the line.

A double line break, breaks out of the list.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span id="7904"&gt;Item 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1cf1"&gt;Item 2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ded6"&gt;Item 3&lt;br&gt;
This text is part of the third item. Use two spaces at end of the the list item to break the line.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A double line break, breaks out of the list.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ordered-lists" class="anchor"&gt;
  &lt;/a&gt;
  Ordered Lists
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

1. **Item 1**
Item 1 is really something
2. **Item 2**
Item two is really something else

If you want lines to break using soft returns use two spaces at the end of a line.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt; &lt;span id="01d6"&gt;Item 1 Item 1 is really something&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="51ea"&gt;Item 2&lt;br&gt;
Item two is really something else&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to lines to break using soft returns use to spaces at the end of a line.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inline-code" class="anchor"&gt;
  &lt;/a&gt;
  Inline Code
&lt;/h3&gt;

&lt;p&gt;If you want to embed code in the middle of a paragraph of text to highlight a coding syntax or class/member name you can use inline code syntax:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

Structured statements like `for x =1 to 10` loop structures
can be codified using single back ticks.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Structured statements like &lt;code&gt;for x =1 to 10&lt;/code&gt; loop structures can be codified using single back ticks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-blocks-with-syntax-highlighting" class="anchor"&gt;
  &lt;/a&gt;
  Code Blocks with Syntax Highlighting
&lt;/h3&gt;

&lt;p&gt;Markdown supports code blocks syntax in a variety of ways:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

The following code demonstrates:

    // This is code by way of four leading spaces
    // or a leading tab

More text here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The following code demonstrates:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pgsql

// This is code by way of four leading spaces
// or a leading tab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;More text here&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-blocks" class="anchor"&gt;
  &lt;/a&gt;
  Code Blocks
&lt;/h3&gt;

&lt;p&gt;You can also use triple back ticks plus an optional coding language to support for syntax highlighting (space injected before last ` to avoid markdown parsing):&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

`` `csharp
// this code will be syntax highlighted
for(var i=0; i++; i &amp;amp;lt; 10)
{
    Console.WriteLine(i);
}
`` `

csharp

// this code will be syntax highlighted
for(var i=0; i++; i &amp;amp;lt; 10)
{
    Console.WriteLine(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Many languages are supported: html, xml, javascript, css, csharp, foxpro, vbnet, sql, python, ruby, php and many more. Use the Code drop down list to get a list of available languages.&lt;/p&gt;

&lt;p&gt;You can also leave out the language to get no syntax coloring but the code box:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

`` `dos
robocopy c:\temp\test d:\temp\test
`` `

dos

robocopy c:\temp\test d:\temp\test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To create a formatted block but without formatting use the &lt;code&gt;txt&lt;/code&gt; format:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;markdown

`` `txt
This is some text that will not be syntax highlighted
but shows up in a code box.
`` `
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;which gives you:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;text

This is some text that will not be syntax highlighted
but shows up in a code box.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#if-you-found-this-guide-helpful-feel-free-to-checkout-my-githubgists-where-i-host-similar%C2%A0content" class="anchor"&gt;
  &lt;/a&gt;
  If you found this guide helpful feel free to checkout my github/gists where I host similar content:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/bgoonz"&gt;bgoonz’s gists · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bgoonz" title="https://github.com/bgoonz"&gt;&lt;strong&gt;bgoonz — Overview&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/bgoonz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or Checkout my personal Resource Site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://goofy-euclid-1cd736.netlify.app/" title="https://goofy-euclid-1cd736.netlify.app/"&gt;&lt;strong&gt;a/A-Student-Resources&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Edit description&lt;/em&gt;goofy-euclid-1cd736.netlify.app&lt;/a&gt;&lt;a href="https://goofy-euclid-1cd736.netlify.app/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/3497ce56de3"&gt;March 8, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#a-quick-guide-to-bigo-notation-memoization-tabulation-and-sorting-algorithms-by-example" class="anchor"&gt;
  &lt;/a&gt;
  A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example
&lt;/h1&gt;

&lt;p&gt;Curating Complexity: A Guide to Big-O Notation&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#a-quick-guide-to-bigo-notation-memoization-tabulation-and-sorting-algorithms-by%C2%A0example" class="anchor"&gt;
  &lt;/a&gt;
  A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5foW0o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AyjlSk3T9c2_14in1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5foW0o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AyjlSk3T9c2_14in1.png"&gt;&lt;/a&gt;&lt;strong&gt;&lt;em&gt;Curating Complexity: A Guide to Big-O Notation&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://replit.com/@bgoonz/Medium-article-comp-complex" title="https://replit.com/@bgoonz/Medium-article-comp-complex"&gt;&lt;strong&gt;Medium-article-comp-complex&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;A Node.js repl by bgoonz&lt;/em&gt;replit.com&lt;/a&gt;&lt;a href="https://replit.com/@bgoonz/Medium-article-comp-complex"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="b70f"&gt;Why is looking at runtime not a reliable method of calculating time complexity?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2b21"&gt;Not all computers are made equal( some may be stronger and therefore boost our runtime speed )&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1e1a"&gt;How many background processes ran concurrently with our program that was being tested?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1cad"&gt;We also need to ask if our code remains performant if we increase the size of the input.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3cb7"&gt;The real question we need to answering is: &lt;code&gt;How does our performance scale?&lt;/code&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#big-o%C2%A0notation" class="anchor"&gt;
  &lt;/a&gt;
  big ‘O’ notation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="9b21"&gt;Big O Notation is a tool for describing the efficiency of algorithms with respect to the size of the input arguments.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c0e6"&gt;Since we use mathematical functions in Big-O, there are a few big picture ideas that we’ll want to keep in mind:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2e86"&gt;The function should be defined by the size of the input.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="07b0"&gt;&lt;code&gt;Smaller&lt;/code&gt; Big O is better (lower time complexity)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f1b0"&gt;Big O is used to describe the worst case scenario.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="e11f"&gt;Big O is simplified to show only its most dominant mathematical term.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#simplifying-math%C2%A0terms" class="anchor"&gt;
  &lt;/a&gt;
  Simplifying Math Terms
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="64a4"&gt;We can use the following rules to simplify the our Big O functions:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a2c2"&gt;&lt;code&gt;Simplify Products&lt;/code&gt; : If the function is a product of many terms, we drop the terms that don't depend on n.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b058"&gt;&lt;code&gt;Simplify Sums&lt;/code&gt; : If the function is a sum of many terms, we drop the non-dominant terms.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="eb32"&gt;&lt;code&gt;n&lt;/code&gt; : size of the input&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c042"&gt;&lt;code&gt;T(f)&lt;/code&gt; : unsimplified math function&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7b41"&gt;&lt;code&gt;O(f)&lt;/code&gt; : simplified math function.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Putting it all together&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4WatxLa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATT8uuv1x3nmGUw5rvtoZ8A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WatxLa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATT8uuv1x3nmGUw5rvtoZ8A.png"&gt;&lt;/a&gt;-   &lt;span id="d18b"&gt;First we apply the product rule to drop all constants.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="4335"&gt;Then we apply the sum rule to select the single most dominant term.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#complexity-classes" class="anchor"&gt;
  &lt;/a&gt;
  Complexity Classes
&lt;/h3&gt;

&lt;p&gt;Common Complexity Classes&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#there-are-7-major-classes-in-time-complexity" class="anchor"&gt;
  &lt;/a&gt;
  There are 7 major classes in Time Complexity
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVH3EHp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A6zKhmJoHkvDbrd8jfUDf3A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVH3EHp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A6zKhmJoHkvDbrd8jfUDf3A.png"&gt;&lt;/a&gt;#### &lt;code&gt;O(1) Constant&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;The algorithm takes roughly the same number of steps for any input size.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ologn-logarithmic" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;O(log(n)) Logarithmic&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;In most cases our hidden base of Logarithmic time is 2, log complexity algorithm’s will typically display ‘halving’ the size of the input (like binary search!)&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#on-linear" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;O(n) Linear&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;Linear algorithm’s will access each item of the input “once”.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#onlogn-log-linear-time" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;O(nlog(n)) Log Linear Time&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;Combination of linear and logarithmic behavior, we will see features from both classes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; Algorithm’s that are log-linear will use &lt;strong&gt;both recursion AND iteration.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#onc-polynomial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;O(nc) Polynomial&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;C is a fixed constant.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ocn-exponential" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;O(c^n) Exponential&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;C is now the number of recursive calls made in each stack frame.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;strong&gt;Algorithm’s with exponential time are VERY SLOW.&lt;/strong&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#memoization" class="anchor"&gt;
  &lt;/a&gt;
  Memoization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="b3b0"&gt;Memoization : a design pattern used to reduce the overall number of calculations that can occur in algorithms that use recursive strategies to solve.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2583"&gt;MZ stores the results of the sub-problems in some other data structure, so that we can avoid duplicate calculations and only ‘solve’ each problem once.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="65c9"&gt;Two features that comprise memoization:&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="b2d2"&gt;FUNCTION MUST BE RECURSIVE.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="91a3"&gt;Our additional Data Structure is usually an object (we refer to it as our memo… or sometimes cache!)&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZufCuLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4U79jBMjU2wKE_tyYcD_3A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZufCuLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4U79jBMjU2wKE_tyYcD_3A.png"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5z2gnDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AQh42KZgcCxmVt6WrTasCVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5z2gnDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AQh42KZgcCxmVt6WrTasCVw.png"&gt;&lt;/a&gt;### Memoizing Factorial&lt;/p&gt;

&lt;p&gt;Our memo object is &lt;em&gt;mapping&lt;/em&gt; out our arguments of factorial to it’s return value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="854a"&gt;Keep in mind we didn’t improve the speed of our algorithm.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#memoizing-fibonacci" class="anchor"&gt;
  &lt;/a&gt;
  Memoizing Fibonacci
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onCDDfEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A2XaPj7UGKZYFjYhb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onCDDfEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A2XaPj7UGKZYFjYhb"&gt;&lt;/a&gt;-   &lt;span id="5be6"&gt;Our time complexity for Fibonacci goes from O(2^n) to O(n) after applying memoization.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-memoization-formula" class="anchor"&gt;
  &lt;/a&gt;
  The Memoization Formula
&lt;/h3&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Rules:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="b3f0"&gt;&lt;em&gt;Write the unoptimized brute force recursion (make sure it works);&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="b36e"&gt;&lt;em&gt;Add memo object as an additional argument .&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="f81f"&gt;&lt;em&gt;Add a base case condition that returns the stored value if the function’s argument is in the memo.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="1b0f"&gt;&lt;em&gt;Before returning the result of the recursive case, store it in the memo as a value and make the function’s argument it’s key.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#things-to%C2%A0remember" class="anchor"&gt;
  &lt;/a&gt;
  Things to remember
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="bc4a"&gt;&lt;em&gt;When solving DP problems with Memoization, it is helpful to draw out the visual tree first.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="7bb1"&gt;&lt;em&gt;When you notice duplicate sub-tree’s that means we can memoize.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;
  &lt;a href="#tabulation" class="anchor"&gt;
  &lt;/a&gt;
  Tabulation
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tabulation-strategy" class="anchor"&gt;
  &lt;/a&gt;
  Tabulation Strategy
&lt;/h4&gt;

&lt;p&gt;&amp;gt; Use When:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="f5b0"&gt;&lt;strong&gt;The function is iterative and not recursive.&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="015c"&gt;&lt;em&gt;The accompanying DS is usually an array.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#steps-for-tabulation" class="anchor"&gt;
  &lt;/a&gt;
  Steps for tabulation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="8918"&gt;&lt;em&gt;Create a table array based off the size of the input.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b4e7"&gt;&lt;em&gt;Initialize some values in the table to ‘answer’ the trivially small subproblem.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="072e"&gt;&lt;em&gt;Iterate through the array and fill in the remaining entries.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="192e"&gt;&lt;em&gt;Your final answer is usually the last entry in the table.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#memo-and-tab-demo-with-fibonacci" class="anchor"&gt;
  &lt;/a&gt;
  Memo and Tab Demo with Fibonacci
&lt;/h3&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Normal Recursive Fibonacci&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function fibonacci(n) {
  if (n &amp;amp;lt;= 2) return 1;
  return fibonacci(n - 1) + fibonacci(n - 2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&amp;gt; &lt;em&gt;Memoization Fibonacci 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Memoization Fibonacci 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Tabulated Fibonacci&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-linear%C2%A0search" class="anchor"&gt;
  &lt;/a&gt;
  Example of Linear Search
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="84b2"&gt;&lt;em&gt;Worst Case Scenario: The term does not even exist in the array.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="30dc"&gt;&lt;em&gt;Meaning: If it doesn’t exist then our for loop would run until the end therefore making our time complexity O(n).&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#sorting-algorithms" class="anchor"&gt;
  &lt;/a&gt;
  Sorting Algorithms
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#bubble-sort" class="anchor"&gt;
  &lt;/a&gt;
  Bubble Sort
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Time Complexity&lt;/code&gt;: Quadratic O(n^2)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="ce1e"&gt;The inner for-loop contributes to O(n), however in a worst case scenario the while loop will need to run n times before bringing all n elements to their final resting spot.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Space Complexity&lt;/code&gt;: O(1)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="664f"&gt;Bubble Sort will always use the same amount of memory regardless of n.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oMxrQfjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ACk9aeGY-d5tbz7dT" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oMxrQfjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ACk9aeGY-d5tbz7dT"&gt;&lt;/a&gt;-   &lt;span id="4115"&gt;The first major sorting algorithm one learns in introductory programming courses.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="ecd4"&gt;Gives an intro on how to convert unsorted data into sorted data.&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;gt; It’s almost never used in production code because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="3cb1"&gt;&lt;em&gt;It’s not efficient&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="4eac"&gt;&lt;em&gt;It’s not commonly used&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d730"&gt;&lt;em&gt;There is stigma attached to it&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8da7"&gt;&lt;code&gt;Bubbling Up&lt;/code&gt;&lt;em&gt; : Term that infers that an item is in motion, moving in some direction, and has some final resting destination.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="8447"&gt;&lt;em&gt;Bubble sort, sorts an array of integers by bubbling the largest integer to the top.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="dcd2"&gt;&lt;em&gt;Worst Case &amp;amp; Best Case are always the same because it makes nested loops.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span id="9a6a"&gt;&lt;em&gt;Double for loops are polynomial time complexity or more specifically in this case Quadratic (Big O) of: O(n²)&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#selection-sort" class="anchor"&gt;
  &lt;/a&gt;
  Selection Sort
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Time Complexity&lt;/code&gt;: Quadratic O(n^2)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="646d"&gt;Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Space Complexity&lt;/code&gt;: O(1)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="45ae"&gt;Selection Sort will always use the same amount of memory regardless of n.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YiUfrjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AAByxtBjFrPVVYmyu" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YiUfrjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AAByxtBjFrPVVYmyu"&gt;&lt;/a&gt;-   &lt;span id="c618"&gt;Selection sort organizes the smallest elements to the start of the array.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yBc6ifm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AGeYNxlRcbt2cf0rY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yBc6ifm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AGeYNxlRcbt2cf0rY"&gt;&lt;/a&gt;Summary of how Selection Sort should work:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="2277"&gt;&lt;em&gt;Set MIN to location 0&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="c76c"&gt;&lt;em&gt;Search the minimum element in the list.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="79d3"&gt;&lt;em&gt;Swap with value at location Min&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="4ede"&gt;&lt;em&gt;Increment Min to point to next element.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="a649"&gt;&lt;em&gt;Repeat until list is sorted.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#insertion-sort" class="anchor"&gt;
  &lt;/a&gt;
  Insertion Sort
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Time Complexity&lt;/code&gt;: Quadratic O(n^2)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="95ea"&gt;Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Space Complexity&lt;/code&gt;: O(n)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="f6fa"&gt;Because we are creating a subArray for each element in the original input, our Space Comlexity becomes linear.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwUsF1FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AgbNU6wrszGPrfAZG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwUsF1FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AgbNU6wrszGPrfAZG"&gt;&lt;/a&gt;### Merge Sort&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Time Complexity&lt;/code&gt;: Log Linear O(nlog(n))&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="44b2"&gt;Since our array gets split in half every single time we contribute O(log(n)). The while loop contained in our helper merge function contributes O(n) therefore our time complexity is O(nlog(n)); &lt;code&gt;Space Complexity&lt;/code&gt;: O(n)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="9a83"&gt;We are linear O(n) time because we are creating subArrays.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suVAR2wl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AGeU8YwwCoK8GiSTD" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suVAR2wl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AGeU8YwwCoK8GiSTD"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOODCV_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AIxqGb72XDVDeeiMl" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOODCV_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AIxqGb72XDVDeeiMl"&gt;&lt;/a&gt;### Example of Merge Sort&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKMP0DTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AHMCR--9niDt5zY6M" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKMP0DTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AHMCR--9niDt5zY6M"&gt;&lt;/a&gt;-   &lt;span id="48b4"&gt;&lt;strong&gt;Merge sort is O(nlog(n)) time.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="c598"&gt;&lt;em&gt;We need a function for merging and a function for sorting.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;gt; Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="213f"&gt;&lt;em&gt;If there is only one element in the list, it is already sorted; return the array.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="6214"&gt;&lt;em&gt;Otherwise, divide the list recursively into two halves until it can no longer be divided.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="3cc8"&gt;&lt;em&gt;Merge the smallest lists into new list in a sorted order.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#quick-sort" class="anchor"&gt;
  &lt;/a&gt;
  Quick Sort
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Time Complexity&lt;/code&gt;: Quadratic O(n^2)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="8e34"&gt;Even though the average time complexity O(nLog(n)), the worst case scenario is always quadratic.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Space Complexity&lt;/code&gt;: O(n)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="626b"&gt;Our space complexity is linear O(n) because of the partition arrays we create.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="7e3a"&gt;QS is another Divide and Conquer strategy.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="233d"&gt;Some key ideas to keep in mind:&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="1173"&gt;It is easy to sort elements of an array relative to a particular target value.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8634"&gt;An array of 0 or 1 elements is already trivially sorted.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_x8MHzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AWLl_HpdBGXYx284T" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_x8MHzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AWLl_HpdBGXYx284T"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2xEUsO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A-LyHJXGPTYsWLDZf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2xEUsO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A-LyHJXGPTYsWLDZf"&gt;&lt;/a&gt;### Binary Search&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Time Complexity&lt;/code&gt;: Log Time O(log(n))&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Space Complexity&lt;/code&gt;: O(1)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GMOG7c2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A-naVYGTXzE2Yoali" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GMOG7c2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A-naVYGTXzE2Yoali"&gt;&lt;/a&gt;&lt;em&gt;Recursive Solution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;em&gt;Min Max Solution&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="6fb1"&gt;&lt;em&gt;Must be conducted on a sorted array.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="383b"&gt;&lt;em&gt;Binary search is logarithmic time, not exponential b/c n is cut down by two, not growing.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c940"&gt;&lt;em&gt;Binary Search is part of Divide and Conquer.&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#insertion-sort" class="anchor"&gt;
  &lt;/a&gt;
  Insertion Sort
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="26b7"&gt;&lt;strong&gt;Works by building a larger and larger sorted region at the left-most end of the array.&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;gt; Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;span id="8c1f"&gt;&lt;em&gt;If it is the first element, and it is already sorted; return 1.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="1451"&gt;&lt;em&gt;Pick next element.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="0f8b"&gt;&lt;em&gt;Compare with all elements in the sorted sub list&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="4d78"&gt;&lt;em&gt;Shift all the elements in the sorted sub list that is greater than the value to be sorted.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="9131"&gt;&lt;em&gt;Insert the value&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt; &lt;span id="6c8a"&gt;&lt;em&gt;Repeat until list is sorted.&lt;/em&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#if-you-found-this-guide-helpful-feel-free-to-checkout-my-githubgists-where-i-host-similar%C2%A0content" class="anchor"&gt;
  &lt;/a&gt;
  If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/bgoonz" title="https://gist.github.com/bgoonz"&gt;&lt;strong&gt;bgoonz’s gists&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…&lt;/em&gt;gist.github.com&lt;/a&gt;&lt;a href="https://gist.github.com/bgoonz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bgoonz" title="https://github.com/bgoonz"&gt;&lt;strong&gt;bgoonz — Overview&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/bgoonz"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#or-checkout-my-personal-resource%C2%A0site" class="anchor"&gt;
  &lt;/a&gt;
  Or Checkout my personal Resource Site:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bgoonz-blog.netlify.app/" title="https://bgoonz-blog.netlify.app/"&gt;&lt;strong&gt;Web-Dev-Hub&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…&lt;/em&gt;bgoonz-blog.netlify.app&lt;/a&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xe5UZi4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AVCmj_H9AHs41oC9Yx1hZFQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xe5UZi4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AVCmj_H9AHs41oC9Yx1hZFQ.png"&gt;&lt;/a&gt;### Discover More:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bgoonz-blog.netlify.app/" title="https://bgoonz-blog.netlify.app/"&gt;&lt;strong&gt;Web-Dev-Hub&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…&lt;/em&gt;bgoonz-blog.netlify.app&lt;/a&gt;&lt;a href="https://bgoonz-blog.netlify.app/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/803ff193c522"&gt;February 27, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#array-callback-methods-implemented-with-for-loops" class="anchor"&gt;
  &lt;/a&gt;
  Array Callback Methods Implemented With For Loops
&lt;/h1&gt;

&lt;p&gt;How to implement array callback methods in JavaScript&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#array-callback-methods-implemented-with-for%C2%A0loops" class="anchor"&gt;
  &lt;/a&gt;
  Array Callback Methods Implemented With For Loops
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#how-to-implement-array-callback-methods-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  How to implement array callback methods in JavaScript
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdEbxRS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AWpKqOdTsTPhvapuW" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdEbxRS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AWpKqOdTsTPhvapuW"&gt;&lt;/a&gt;#### Functions are called “First Class Objects” in JavaScript because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="1df8"&gt;A function is an instance of the Object type&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="6e67"&gt;A function can have properties and has a link back to its constructor method&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="c7cf"&gt;You can store the function in a variable&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b709"&gt;You can pass the function as a parameter to another function&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="2c3c"&gt;You can return the function from a function&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think will be printed in the following:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#anonymous-callback-a-named%C2%A0callback" class="anchor"&gt;
  &lt;/a&gt;
  Anonymous callback, a named callback
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function foo(callback) {
    console.log('grape');
    callback();
}

function bar() {
    console.log('banana');
}

const fruitBasket = function() {
    console.log('apple');
    bar();
    foo(bar);
    foo(function() {
        console.log('orange');
    });
    console.log('pear');
};

fruitBasket();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#function-that-takes-in-a-value-and-two-callbacks-the-function-should-return-the-result-of-the-callback-whos-invocation-results-in-a-larger%C2%A0value" class="anchor"&gt;
  &lt;/a&gt;
  Function that takes in a value and two callbacks. The function should return the result of the callback who’s invocation results in a larger value.
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function greaterValue(value, cb1, cb2) {
    // compare cb1 invoked with value to cb2 invoked with value
    // return the greater result

    let res1 = cb1(value);
    let res2 = cb2(value);
    if (res1 &amp;amp;gt; res2) {
        // if this is false, we move out of if statement
        return res1;
    }
    return res2;
}

let negate = function(num) {
    return num * -1;
};

let addOne = function(num) {
    return num + 1;
};

console.log(greaterValue(3, negate, addOne));
console.log(greaterValue(-2, negate, addOne));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: we do not invoke&lt;/em&gt; &lt;code&gt;negate&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;addOne&lt;/code&gt; &lt;em&gt;(by using&lt;/em&gt; &lt;code&gt;()&lt;/code&gt; &lt;em&gt;to call them), we are passing the function itself.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#write-a-function-mymap-that-takes-in-an-array-and-a-callback-as-arguments-the-function-should-mimic-the-behavior-of-arrayprototypemap" class="anchor"&gt;
  &lt;/a&gt;
  Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of Array.prototype.map.
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myMap(arr, callback) {
    // iterate through the array, perform the cb on each element
    // return a new array with those new values
    let mapped = [];

    for (let i = 0; i &amp;amp;lt; arr.length; i++) {
        // remember that map passes three args with each element.
        let val = callback(arr[i], i, arr);
        mapped.push(val);
    }

    return mapped;
}

let double = function(num) {
    return num * 2;
};
console.log(myMap([1, 2, 3], double));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#write-a-function-myfilter-that-takes-in-an-array-and-a-callback-as-arguments-the-function-should-mimic-the-behavior-of-arrayprototypefilter" class="anchor"&gt;
  &lt;/a&gt;
  Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of Array.prototype.filter.
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFilter(arr, callback) {
    let filtered = [];

    for (let i = 0; i &amp;amp;lt; arr.length; i++) {
        let element = arr[i];

        if (callback(element, i, arr)) {
            filtered.push(element);
        }
    }

    return filtered;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#write-a-function-myevery-that-takes-in-an-array-and-a-callback-as-arguments-the-function-should-mimic-the-behavior-of-arrayprototypeevery" class="anchor"&gt;
  &lt;/a&gt;
  Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of Array.prototype.every.
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myEvery(arr, callback) {
    for (let i = 0; i &amp;amp;lt; arr.length; i++) {
        let element = arr[i];

        if (callback(element, i, arr) === false) {
            return false;
        }
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#further-examples-of-the-above%C2%A0concepts" class="anchor"&gt;
  &lt;/a&gt;
  Further Examples of the above concepts
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const createMeowValue = () =&amp;amp;gt; {
  console.log(this.name);
  let meow = function () {
    console.log(this);
    console.log(this.name + ' meows');
  }
  meow = meow.bind(this);
  return meow;
};

const name = 'Fluffy';

const cat = {
  name: name,
  age: 12,
  createMeow: function () {
    console.log(this.name);
    let meow = () =&amp;amp;gt; {
      const hello = 'hello';
      console.log(this.name + ' meows');
    };
    let world = '';
    if (true) {
      world = 'world';
    }
    console.log(world);
    // meow = meow.bind(this);
    return meow;
  }
};

cat.newKey = function () {
  const outermostContext = this;
  const innerFunc = () =&amp;amp;gt; {
    secondContext = this;
    console.log(secondContext === outermostContext)
    return function () {
      innermostContext = this;
    }
  };
  return innerFunc.bind(outermostContext);
};

const meow = cat.createMeow(); // method-style invocation
meow(); // function-style invocation

console.log('-------')

const createMeow = cat.createMeow;
const globalMeow = createMeow(); // function-style
globalMeow(); // function-style

function createSmoothie(ingredient) {
  const ingredients = [ingredient];
  return ingredients;
}

// console.log(createSmoothie('banana'));
// console.log(createSmoothie('apple'));

// one parameter only
// first argument is a string
// return an array
// DO NOT USE forEach
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://open.appacademy.io/learn" title="https://open.appacademy.io/learn"&gt;&lt;strong&gt;App Academy Open&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;App Academy Open is the first free, online web development course that's meant to get you hired as a developer. Get…&lt;/em&gt;open.appacademy.io&lt;/a&gt;&lt;a href="https://open.appacademy.io/learn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/" title="https://developer.mozilla.org/en-US/"&gt;&lt;strong&gt;MDN Web Docs&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Read more at hacks.mozilla.org Roughly a year ago at Mozilla we started an effort to improve Firefox stability on…&lt;/em&gt;developer.mozilla.org&lt;/a&gt;&lt;a href="https://developer.mozilla.org/en-US/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.info/callbacks" title="https://javascript.info/callbacks"&gt;&lt;strong&gt;Introduction: callbacks&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;To demonstrate the use of callbacks, promises and other abstract concepts, we'll be using some browser methods…&lt;/em&gt;javascript.info&lt;/a&gt;&lt;a href="https://javascript.info/callbacks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More content at&lt;/em&gt; &lt;a href="http://plainenglish.io"&gt;&lt;strong&gt;&lt;em&gt;plainenglish.io&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/d08875df6777"&gt;May 27, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/array-callback-methods-implemented-with-for-loops-d08875df6777"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#a-very-quick-guide-to-calculating-big-o-computational-complexity" class="anchor"&gt;
  &lt;/a&gt;
  A Very Quick Guide To Calculating Big O Computational Complexity
&lt;/h1&gt;

&lt;p&gt;Big O: big picture, broad strokes, not details&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#a-very-quick-guide-to-calculating-big-o-computational-complexity" class="anchor"&gt;
  &lt;/a&gt;
  A Very Quick Guide To Calculating Big O Computational Complexity
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Big O&lt;/strong&gt;: big picture, broad strokes, not details&lt;/p&gt;

&lt;p&gt;For a more complete guide… checkout :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522" title="https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"&gt;&lt;strong&gt;A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Curating Complexity: A Guide to Big-O Notation&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href="https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJpqFw-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Alte81mEvgEPYXodB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJpqFw-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2Alte81mEvgEPYXodB.png"&gt;&lt;/a&gt;-   &lt;span id="28b6"&gt;way we analyze how efficient algorithms are without getting too mired in details&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;span id="4141"&gt;can model how much time any function will take given &lt;code&gt;n&lt;/code&gt; inputs&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="9479"&gt;interested in order of magnitude of number of the exact figure&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="8fe1"&gt;O absorbs all fluff and n = biggest term&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;span id="a9c8"&gt;Big O of &lt;code&gt;3x^2 +x + 1&lt;/code&gt; = &lt;code&gt;O(n^2)&lt;/code&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#time-complexity" class="anchor"&gt;
  &lt;/a&gt;
  Time Complexity
&lt;/h3&gt;

&lt;p&gt;no loops or exit &amp;amp; return = O(1)&lt;/p&gt;

&lt;p&gt;0 nested loops = &lt;code&gt;O(n)&lt;/code&gt;&lt;br&gt;&lt;br&gt;
1 nested loops = &lt;code&gt;O(n^2)&lt;/code&gt;&lt;br&gt;&lt;br&gt;
2 nested loops = &lt;code&gt;O(n^3)&lt;/code&gt;&lt;br&gt;&lt;br&gt;
3 nested loops = &lt;code&gt;O(n^4)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;recursive&lt;/strong&gt;: as you add more terms, increase in time as you add input diminishes&lt;br&gt;&lt;br&gt;
&lt;strong&gt;recursion&lt;/strong&gt;: when you define something in terms of itself, a function that calls itself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="f455"&gt;used because of ability to maintain state at diffferent levels of recursion&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="f168"&gt;inherently carries large footprint&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5510"&gt;every time function called, you add call to stack&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;iterative&lt;/strong&gt;: use loops instead of recursion (preferred)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;favor readability over performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;O(n log(n))&lt;/code&gt; &amp;amp; &lt;code&gt;O(log(n))&lt;/code&gt;: dividing/halving&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="4f7e"&gt;if code employs recursion/divide-and-conquer strategy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="d1cc"&gt;what power do i need to power my base to get n&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#time-definitions" class="anchor"&gt;
  &lt;/a&gt;
  Time Definitions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="9aad"&gt;&lt;strong&gt;constant&lt;/strong&gt;: does not scale with input, will take same amount of time&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="3a19"&gt;for any input size n, constant time performs same number of operations every time&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bf51"&gt;&lt;strong&gt;logarithmic&lt;/strong&gt;: increases number of operations it performs as logarithmic function of input size n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="93d5"&gt;function log n grows very slowly, so as n gets longer, number of operations the algorithm needs to perform doesn’t increase very much&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="a2cf"&gt;halving&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="46c0"&gt;&lt;strong&gt;linear&lt;/strong&gt;: increases number of operations it performs as linear function of input size n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5f16"&gt;number of additional operations needed to perform grows in direct proportion to increase in input size n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="ab93"&gt;&lt;strong&gt;log-linear&lt;/strong&gt;: increases number of operations it performs as log-linear function of input size n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="0459"&gt;looking over every element and doing work on each one&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="bd8a"&gt;&lt;strong&gt;quadratic&lt;/strong&gt;: increases number of operations it performs as quadratic function of input size n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="dc41"&gt;&lt;strong&gt;exponential&lt;/strong&gt;: increases number of operations it performs as exponential function of input size n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="71fc"&gt;number of nested loops increases as function of n&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8253"&gt;&lt;strong&gt;polynomial&lt;/strong&gt;: as size of input increases, runtime/space used will grow at a faster rate&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="8827"&gt;&lt;strong&gt;factorial&lt;/strong&gt;: as size of input increases, runtime/space used will grow astronomically even with relatively small inputs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="040c"&gt;&lt;strong&gt;rate of growth&lt;/strong&gt;: how fast a function grows with input size&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IMbZJpEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A5t2u8n1uKhioIzZIXX2zbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMbZJpEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A5t2u8n1uKhioIzZIXX2zbg.png"&gt;&lt;/a&gt;### Space Complexity&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id="403b"&gt;How does the space usage scale/change as input gets very large?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="5f20"&gt;What auxiliary space does your algorithm use or is it in place (constant)?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id="b207"&gt;Runtime stack space counts as part of space complexity unless told otherwise.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#sorting-algorithms" class="anchor"&gt;
  &lt;/a&gt;
  Sorting Algorithms
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ1c3ZPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AHhXmG2cNdg8y4ZCCQGTyuQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ1c3ZPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AHhXmG2cNdg8y4ZCCQGTyuQ.png"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCij0HaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AULeXxVCDkF73GwhsxyM_2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCij0HaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AULeXxVCDkF73GwhsxyM_2g.png"&gt;&lt;/a&gt;### Data Structures&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5GZ0zFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/1%2AhkZWlUgFyOSaLD5Uskv0tQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5GZ0zFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/1%2AhkZWlUgFyOSaLD5Uskv0tQ.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MR8qNYNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2ACOjzunj0-FsMJ0d7v7Z-6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MR8qNYNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2ACOjzunj0-FsMJ0d7v7Z-6g.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For similar content check out my GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bgoonz" title="https://github.com/bgoonz"&gt;&lt;strong&gt;bgoonz - Overview&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Web Developer, Electrical Engineer &lt;a href="https://bryanguner.medium.com/"&gt;https://bryanguner.medium.com/&lt;/a&gt; &lt;a href="https://portfolio42.netlify.app/%E2%80%A6"&gt;https://portfolio42.netlify.app/…&lt;/a&gt;&lt;/em&gt;github.com&lt;/a&gt;&lt;a href="https://github.com/bgoonz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@bryanguner"&gt;Bryan Guner&lt;/a&gt; on &lt;a href="https://medium.com/p/eb1557e85fa3"&gt;May 19, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@bryanguner/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 24, 2021.&lt;/p&gt;



</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>linux</category>
    </item>
    <item>
      <title>A very simple introduction to Functional Programming </title>
      <author>sigfried</author>
      <pubDate>Tue, 24 Aug 2021 23:54:33 +0000</pubDate>
      <link>https://dev.to/sigfriedcub1990/a-very-simple-introduction-to-functional-programming-1fp4</link>
      <guid>https://dev.to/sigfriedcub1990/a-very-simple-introduction-to-functional-programming-1fp4</guid>
      <description>&lt;p&gt;If you’ve heard the "buzzwords" &lt;em&gt;Functional Programming&lt;/em&gt; (FP), &lt;em&gt;composition&lt;/em&gt;, &lt;em&gt;point free&lt;/em&gt;, etc, and you were completely lost… you’re NOT alone. Here’s a sneak peak of the things you can do if you compose things and follow a functional and point free style of programming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/fp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We're the eggmen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the eggman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the walrus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// generateSelectObject :: Object -&amp;gt; Object&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generateSelectObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,
    label: name,
  })

  const sortAndMapLines = _.compose(
    _.map(generateSelectObject),
    _.sortBy(['order'])
  )

  const orderedLines = sortAndMapLines(lines)

  orderedLines.unshift({
    label: 'All lines',
    value: 'All lines'
  })

  return orderedLines
}

const res = main(lines)
console.log(res)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ll argue that the most interesting part of this boring code is this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortAndMapLines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generateSelectObject&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortBy&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;order&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what &lt;em&gt;FP&lt;/em&gt; is all about, you define the steps you need in order to achieve something, in this case the sorted and then mapped results of &lt;code&gt;lines&lt;/code&gt;. Notice we’re composing two functions there, the &lt;code&gt;sort&lt;/code&gt; and the &lt;code&gt;map&lt;/code&gt; from &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;Lodash&lt;/a&gt; and it’s &lt;em&gt;point free&lt;/em&gt; because neither function declares explicitly with what data they will work with.&lt;/p&gt;

&lt;p&gt;Hopefully this rambling is helpful and it will whet your appetite to search for better ways to do your work and improve the overall quality of our code. A very good place to start with is Prof. Frisby's &lt;a href="https://mostly-adequate.gitbook.io/mostly-adequate-guide/"&gt;Mostly Adequate Guide to Functional Programming&lt;/a&gt; which I very much recommend.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>javascript</category>
      <category>lodash</category>
    </item>
    <item>
      <title>Setting Up Sessions with NestJS, Passport, and Redis</title>
      <author>Jay McDoniel</author>
      <pubDate>Tue, 24 Aug 2021 23:51:24 +0000</pubDate>
      <link>https://dev.to/nestjs/setting-up-sessions-with-nestjs-passport-and-redis-210</link>
      <guid>https://dev.to/nestjs/setting-up-sessions-with-nestjs-passport-and-redis-210</guid>
      <description>&lt;p&gt;&lt;em&gt;Jay is a member of the NestJS core team, primarily helping out the community on Discord and Github and contributing to various parts of the framework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you're here, you're either one of the avid readers of my, just stumbling about dev.to looking for something interesting to read, or you're searching for how to implement sessions with &lt;a href="http://www.passportjs.org/"&gt;Passport&lt;/a&gt; and &lt;a href="https://docs.nestjs.com/"&gt;NestJS&lt;/a&gt;. &lt;a href="https://docs.nestjs.com/security/authentication"&gt;Nest's own docs&lt;/a&gt; do a pretty good job of showing how to set up the use of &lt;a href="https://jwt.io"&gt;JWTs&lt;/a&gt; with Passport, but are lacking when it comes to how to use sessions. Maybe you want to use a session store because of supporting some legacy software. Maybe it's because JWTs bring too much complexity with scope. Maybe it's because you're looking for an easier way to set up refresh tokens. Whatever the case, this article is going to be for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;I'm going to be using NestJS (it's in the title, so I hope that's obvious) and I'm going to be making use of &lt;a href="https://docs.nestjs.com/guards"&gt;Guards&lt;/a&gt; so if you don't know what those are, I highly suggest reading up on them first. Don't worry, I'll wait.&lt;/p&gt;

&lt;p&gt;I'm also going to be not using an HTTP client like &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; or &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;, but using &lt;a href="https://curl.se/"&gt;&lt;code&gt;cURL&lt;/code&gt;&lt;/a&gt; instead. I lke living in the terminal as much as I can, as it gives me immediate feedback between my terminals. Feel free to use whichever you prefer, but the code snippets will be curls.&lt;/p&gt;

&lt;p&gt;And speaking of immediate feedback, I'm also going to be using &lt;a href="https://github.com/tmux/tmux"&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt;, which is a terminal multiplexer, to allow me to run multiple terminals at a time within the same window and logical grouping. This allows me to keep a single terminal window up and view my server logs, docker-compose instance and/or logs, and make curls without having to alt-tab to change views. Very handy, and very customizable.&lt;/p&gt;

&lt;p&gt;Lastly, I'll be using &lt;a href="https://docs.docker.com/"&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; and a &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/"&gt;&lt;code&gt;docker-compose file&lt;/code&gt;&lt;/a&gt; to run a &lt;a href="https://redis.com/"&gt;Redis&lt;/a&gt; instance for the session storage and to allow for running a redis-cli to be able to query the redis instance ran by Docker.&lt;/p&gt;

&lt;p&gt;All of the code will be available &lt;a href="https://github.com/jmcdo29/dev.to/tree/main/blog-posts/nestjs-passport-sessions"&gt;to follow along with and run here&lt;/a&gt;. Just note that to run it after you clone and run the install for the repo, you'll need to &lt;code&gt;cd blog-posts/nestjs-passport-sessions&lt;/code&gt; and then run &lt;code&gt;nest start --watch&lt;/code&gt; yourself. Just a side effect of how the repo is set up for my dev.to blogs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-along-from-scratch"&gt;
  &lt;/a&gt;
  Following along from scratch
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're following along with the code that's pre-built, feel free to skip over this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To set up a similar project from scratch, you'll need to first set up a Nest project, which is easiest through the Nest CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nest new session-authentication
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose your package manager of choice, and then install the follow dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm i @nestjs/passport passport passport-local express-session redis connect-redis bcrypt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following peer dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm i &lt;span class="nt"&gt;-D&lt;/span&gt; @types/passport-local @types/express-session @types/connect-redis @types/bcrypt @types/redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;npm and yarn work fine as well, I just like pnpm as a package manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you should be okay to follow along with the rest of the code, building as we go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nestjs-and-passport"&gt;
  &lt;/a&gt;
  NestJS and Passport
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-authguard"&gt;
  &lt;/a&gt;
  The AuthGuard()
&lt;/h3&gt;

&lt;p&gt;Like most &lt;code&gt;@nestjs/&lt;/code&gt; packages, the &lt;code&gt;@nestjs/passport&lt;/code&gt; package is &lt;em&gt;mostly&lt;/em&gt; a thin wrapper around passport, but Nest does do some cool things with the passport package that I think are worth mentioning. First, the &lt;a href="https://github.com/nestjs/passport/blob/master/lib/auth.guard.ts"&gt;&lt;code&gt;AuthGuard&lt;/code&gt; mixin&lt;/a&gt;. At first glance, this mixin may look a little intimidating, but let's take it chunk by chunk.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthGuard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAuthGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createAuthGuard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ignoring the &lt;code&gt;memoize&lt;/code&gt; call, this &lt;code&gt;createAuthGuard&lt;/code&gt; is where the magic of class creation happens. We end up passing the &lt;code&gt;type&lt;/code&gt;, if applicable, to the &lt;code&gt;createAuthGuard&lt;/code&gt; method and will eventually pass that back to the &lt;code&gt;@UseGuards()&lt;/code&gt;. Everything from here on, unless mentioned otherwise, will be a part of the &lt;code&gt;createAuthGuard&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MixinAuthGuard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;CanActivate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AuthModuleOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultStrategy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AuthGuard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NO_STRATEGY_ERROR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constructor allows for an optional injection of &lt;code&gt;AuthModuleOptions&lt;/code&gt;. This is what is passed to &lt;code&gt;PassportModule.register()&lt;/code&gt;. This just allows Nest to figure out if the &lt;code&gt;defaultStrategy&lt;/code&gt; is used or the named one passed to &lt;code&gt;AuthGuard&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAuthenticateOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passportFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createPassportContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;passportFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This here reads through decently well, we have custom methods for getting the authentication options (defaults to returning &lt;code&gt;undefined&lt;/code&gt;), getting the &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; objects (defaults to &lt;code&gt;context.switchToHttp().getRequest()/getResponse()&lt;/code&gt;), and then this &lt;code&gt;createPassportContext&lt;/code&gt; method that is called and then it's return is immediately called with the strategy name and options. Then, we set &lt;code&gt;req.user&lt;/code&gt; to the return of &lt;code&gt;passportFn&lt;/code&gt; and return &lt;code&gt;true&lt;/code&gt; to let the request continue. The next code block is not a part of the mixin or &lt;code&gt;MixinAuthGuard&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPassportContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's where some magic may be seen to happen: Nest ends up calling &lt;code&gt;passport.authenticate&lt;/code&gt; for us, so that we don't have to call it ourselves. In doing so, it wraps passport in a promise, so that we can manage the callback properly, and provides it's own handler to the &lt;code&gt;authenticate&lt;/code&gt; function. This entire method is actually creating a different callback function so that we can end up calling &lt;code&gt;this.handleRequest&lt;/code&gt; with the &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, and &lt;code&gt;status&lt;/code&gt; returned by passport. This can take a bit of time to understand, and isn't necessarily needed, but it's usually good to know what &lt;em&gt;some&lt;/em&gt; of the code under the hood is doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;handleRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;TUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty straightforward, but it's useful to know this method is here. &lt;a href="https://docs.nestjs.com/security/authentication#extending-guards"&gt;As mentioned in Nest's docs&lt;/a&gt; if you need to do any debugging about why the request is failing, here is a good place to do it. Generally just adding the line &lt;code&gt;console.log({ err, user, info, context, status })&lt;/code&gt; is enough, and will help you figure out pretty much anything going wrong within the passport part of the request.&lt;/p&gt;

&lt;p&gt;There's two other classes I want to talk about before getting to the implementation, but I promise it'll be worth it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-passportstrategy"&gt;
  &lt;/a&gt;
  The PassportStrategy()
&lt;/h3&gt;

&lt;p&gt;So the next mixin we have to look at is the &lt;a href="https://github.com/nestjs/passport/blob/master/lib/passport/passport.strategy.ts"&gt;&lt;code&gt;PassportStrategy&lt;/code&gt;&lt;/a&gt; mixin. This is how we end up actually registering our strategy class's &lt;code&gt;validate&lt;/code&gt; method to passport's &lt;code&gt;verify&lt;/code&gt; callback. This mixin does a little bit more in terms of some advance JS techniques, so again, lets take this chunk by chunk.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PassportStrategy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;InstanceType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MixinStrategy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part is pretty straightforward, we're just passing the passport strategy class and an optional renaming of the strategy to the mixin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;validateResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validateResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the first half of the constructor. You'll probably notice right of the bat that we don;'t call &lt;code&gt;super&lt;/code&gt;, at least not yet. This is because we're setting up the callback to be passed to passport later. So what's happening here is we're setting up a function that's going to be calling &lt;code&gt;this.validate&lt;/code&gt; and getting the result from it. If that result happens to be an array, we spread the array (passport will use the first value), otherwise we'll end up calling the &lt;code&gt;done&lt;/code&gt; callback with just the result. If there happens to be an error, in good ole callback style, it'll be passed as the first value to the &lt;code&gt;done&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passportInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPassportInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;passportInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;passportInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Now&lt;/em&gt; we end up calling &lt;code&gt;super&lt;/code&gt;, and in doing so, we overwrite the original &lt;code&gt;verify&lt;/code&gt; with the new callback we just created. This sets up the entire passport Strategy class that we're going to use for the strategy's name. Now all that's left to do is tell passport about it, by calling &lt;code&gt;passportInstance.use(this)&lt;/code&gt; (or passing the custom name as the first argument).&lt;/p&gt;

&lt;p&gt;If any of that went a little too deep, don't worry. It's something you can come back to if you really want, but isn't necessary for the rest of ths article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passportserializer"&gt;
  &lt;/a&gt;
  PassportSerializer
&lt;/h3&gt;

&lt;p&gt;Finally, an actual class! This is the most straightforward and the last bit of passport I'll talk about before getting into the implementation of sessions. This class &lt;em&gt;usually&lt;/em&gt; won't be used in Nest applications _&lt;em&gt;unless&lt;/em&gt; you are using sessions, and we're about to see why.&lt;/p&gt;

&lt;p&gt;So passport has the notion of serializing and deserializing a user. Serializing a user is just taking the user's information and compressing it/ making it as minimal as possible. In many cases, this is just using the &lt;code&gt;ID&lt;/code&gt; of the user. Deserializing a user is the opposite, taking an ID and hydrating an entire user out of it. This usually means a call to a database, but it's not necessary if you don't want to worry about it. Now, Nest has a &lt;code&gt;PassportSerializer&lt;/code&gt; class like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PassportSerializer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="nx"&gt;serializeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="nx"&gt;deserializeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passportInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPassportInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;passportInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializeUser&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;passportInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializeUser&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getPassportInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should only ever have one class extending the &lt;code&gt;PassportSerializer&lt;/code&gt;, and what it should do is set up the general serialization and deserialization of the user for the session storage. The &lt;code&gt;user&lt;/code&gt; passed to &lt;code&gt;serializeUser&lt;/code&gt; is usually the same value as &lt;code&gt;req.user&lt;/code&gt;, and the &lt;code&gt;payload&lt;/code&gt; passed to &lt;code&gt;deserializeUser&lt;/code&gt; is the value passed as the second parameter to the &lt;code&gt;done&lt;/code&gt; of &lt;code&gt;serializeUser&lt;/code&gt;. This will make a bit more sens when it is seen in code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#break-time"&gt;
  &lt;/a&gt;
  Break Time
&lt;/h2&gt;

&lt;p&gt;Okay, that was a lot of information about NestJS and Passport all at once, and some pretty complex code to go through. Take a break here if you need to. Get some coffee, stretch your legs, go play that mobile game you've been wanting to. Whatever you want to do, or continue on with the article if you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-redis-locally"&gt;
  &lt;/a&gt;
  Running Redis Locally
&lt;/h2&gt;

&lt;p&gt;You can either install and run redis locally on your machine, or you can use a &lt;code&gt;docker-compose.yml&lt;/code&gt; file to run redis inside a container. The following compose fle is what I used while working on this article&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yml&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:latest&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;6379:6379'&lt;/span&gt;
  &lt;span class="na"&gt;rcli&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:latest&lt;/span&gt;
    &lt;span class="na"&gt;links&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-cli -h redis&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then to run redis, I just used &lt;code&gt;docker compose up redis -d&lt;/code&gt;. When I needed to run the redis CLI, I used &lt;code&gt;docker compose run rcli&lt;/code&gt; to connect to the redis instance via the docker network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-middleware"&gt;
  &lt;/a&gt;
  Setting Up the Middleware
&lt;/h2&gt;

&lt;p&gt;Now on to the middleware we're going to be using: for setting up sessions and a way to store them, I'm going to be using &lt;a href="https://www.npmjs.com/package/express-session"&gt;express-session&lt;/a&gt;, and &lt;a href="https://www.npmjs.com/package/connect-redis"&gt;connect-redis&lt;/a&gt; for the session and session store, and &lt;a href="https://www.npmjs.com/package/redis"&gt;redis&lt;/a&gt; as the redis client for connect-redis. I'm also going to be setting up our middleware via a &lt;a href="https://docs.nestjs.com/middleware"&gt;Nest middleware&lt;/a&gt; instead of using &lt;code&gt;app.use&lt;/code&gt; in the &lt;code&gt;bootstrap&lt;/code&gt; so that when we do e2e testing, the middleware is already set up (that's out of the scope of this article). I've also got redis set up as a &lt;a href=""&gt;custom provider&lt;/a&gt; using the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/redis/redis.module.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;REDIS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./redis.constants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;REDIS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;REDIS&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RedisModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/redis/redis.constants.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REDIS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AUTH:REDIS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which allows for us to use &lt;code&gt;@Inject(REDIS)&lt;/code&gt; to inject the redis client. Now we can configure our middleware like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app.module.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MiddlewareConsumer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NestModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;RedisStore&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect-redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-session&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;passportSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;passportInitialize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RedisClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;REDIS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RedisModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AuthModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RedisModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;NestModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;REDIS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RedisClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MiddlewareConsumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;consumer&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RedisStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;))({&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;logErrors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="na"&gt;saveUninitialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sup3rs3cr3t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;resave&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;sameSite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;httpOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;maxAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="nx"&gt;passportInitialize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nx"&gt;passportSession&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and have passport ready to use sessions. There's two important things to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;passport.initialize()&lt;/code&gt; must be called before &lt;code&gt;passport.session()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;session()&lt;/code&gt; must be called before &lt;code&gt;passport.initialize()&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this now out of the way, let's move on to our auth module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-authmodule"&gt;
  &lt;/a&gt;
  The AuthModule
&lt;/h2&gt;

&lt;p&gt;To start off, let's define our &lt;code&gt;User&lt;/code&gt; as the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/models/user.interface.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then have &lt;code&gt;RegisterUserDto&lt;/code&gt; and &lt;code&gt;LoginUserDto&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/models/register-user.dto.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RegisterUserDto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;confirmationPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/models/login-user.dto.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LoginUserDto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll set up our &lt;code&gt;LocalStrategy&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/local.strategy.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PassportStrategy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport-local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LocalStrategy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;PassportStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;usernameField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice here we're passing &lt;code&gt;usernameField: 'email'&lt;/code&gt; to &lt;code&gt;super&lt;/code&gt;. This is because in our &lt;code&gt;RegisterUserDto&lt;/code&gt; and &lt;code&gt;LoginUserDto&lt;/code&gt; we're using the &lt;code&gt;email&lt;/code&gt; field and not &lt;code&gt;username&lt;/code&gt; which is passport's default. You can change the &lt;code&gt;passwordField&lt;/code&gt; too, but I had no reason to do that for this article. Now we'll make our &lt;code&gt;AuthService&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/auth.service.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BadRequestException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UnauthorizedException&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoginUserDto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RegisterUserDto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/user.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joefoo@test.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Passw0rd!&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$2b$12$s50omJrK/N3yCM6ynZYmNeen9WERDIVTncywePc75.Ul8.9PUk0LK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jenbar@test.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// P4ssword!&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$2b$12$FHUV7sHexgNoBbP8HsD4Su/CeiWbuX/JCo8l2nlY1yCo2LcR3SjmC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;validateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoginUserDto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foundUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;foundUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Incorrect username or password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;retUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foundUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;retUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;registerUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RegisterUserDto&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;existingUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;existingUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BadRequestException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User remail must be unique&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirmationPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BadRequestException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password and Confirmation Password must match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;confirmationPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BadRequestException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`No user found with id &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;our controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/auth.controller.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UseGuards&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LocalGuard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../local.guard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoginUserDto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RegisterUserDto&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;registerUser&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RegisterUserDto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UseGuards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LocalGuard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Req&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoginUserDto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and our serializer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/serialization.provider.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PassportSerializer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/user.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthSerializer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;PassportSerializer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;serializeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deserializeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;along with our module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/auth/auth.module.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PassportModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth.controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LocalStrategy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./local.strategy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthSerializer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./serialization.provider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;PassportModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LocalStrategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AuthSerializer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AuthController&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do for the &lt;code&gt;AuthSerializer&lt;/code&gt; is to add it to the &lt;code&gt;providers&lt;/code&gt; array. Nest will instantiate it, which will end up calling &lt;code&gt;passport.serializeUser&lt;/code&gt; and &lt;code&gt;passport.deserializeUser&lt;/code&gt; for us (told you going over that would be useful).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-guards"&gt;
  &lt;/a&gt;
  The Guards
&lt;/h2&gt;

&lt;p&gt;So now let's get to our guards, as you'll notice up in the &lt;code&gt;AuthController&lt;/code&gt; we're not using &lt;code&gt;AuthGuard('local')&lt;/code&gt;, but &lt;code&gt;LocalGuard&lt;/code&gt;. The reason for this is because we need to end up calling &lt;code&gt;super.logIn(request)&lt;/code&gt;, which the &lt;code&gt;AuthGuard&lt;/code&gt; &lt;em&gt;has&lt;/em&gt;, but doesn't make use of by default. This just ends up calling &lt;code&gt;request.login(user, (err) =&amp;gt; done(err ? err : null, null))&lt;/code&gt; for us, which is how the user serialization happens. This is what kicks off the session. I'll repeat that because it's &lt;strong&gt;super important&lt;/strong&gt;. &lt;code&gt;super.logIn(request)&lt;/code&gt; &lt;strong&gt;is how the user gets a session&lt;/strong&gt;. To make use of this method, we can set up the &lt;code&gt;LocalGuard&lt;/code&gt; as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/local.guard.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthGuard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LocalGuard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;AuthGuard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchToHttp&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have another guard as well, the &lt;code&gt;LoggedInGuard&lt;/code&gt;. This guards ends up just calling &lt;code&gt;request.isAuthenticated()&lt;/code&gt; which is a method that passport ends up adding to the request object when sessions are in use. We can use this instead of having to have the user pass us the username and password every request, because there will be a cookie with the user's session id on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/logged-in.guard.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CanActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LoggedInGuard&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;CanActivate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchToHttp&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we have one other guard for checking if a user is an admin or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/admin.guard.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoggedInGuard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logged-in.guard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AdminGuard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LoggedInGuard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExecutionContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchToHttp&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This guard extends our usual &lt;code&gt;LoggedInGuard&lt;/code&gt; and checks for the user's role, which is saved in the redis session, via the &lt;code&gt;AuthSerializer&lt;/code&gt; we created earlier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-couple-of-extra-classes"&gt;
  &lt;/a&gt;
  A couple of extra classes
&lt;/h2&gt;

&lt;p&gt;There's a few other classes that I'm making use of. It'll be easiest to view them in the GitHub repo, but I'll add them here if you just want to copy paste:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app.controller.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UseGuards&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AdminGuard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./admin.guard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoggedInGuard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logged-in.guard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;publicRoute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublicMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UseGuards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LoggedInGuard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;protected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;guardedRoute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrivateMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UseGuards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AdminGuard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getAdminMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAdminMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app.service.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getPublicMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This message is public to all!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getPrivateMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You can only see this if you are authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getAdminMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You can only see this if you are an admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NestFactory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NestFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Application listening at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUrl&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-out-the-flow"&gt;
  &lt;/a&gt;
  Testing out the flow
&lt;/h2&gt;

&lt;p&gt;So now, we can run everything all together and test out the flow. First things first, make sure the Redis instance is running. Without that, the server won't start. Once it's running, run &lt;code&gt;nest start --watch&lt;/code&gt; to start the server in dev mode which will recompile and restart on file change. Now it's time to send some &lt;code&gt;curl&lt;/code&gt;s.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-existing-users"&gt;
  &lt;/a&gt;
  Testing Existing Users
&lt;/h3&gt;

&lt;p&gt;So let's start off with some existing user test. We'll try to log in as Joe Foo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:3000/auth/login &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'email=joefoo@test.com&amp;amp;password=Passw0rd!'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; cookie.joe.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you aren't familiar with curl, the &lt;code&gt;-d&lt;/code&gt; make the request a POST, and sends the data as &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; which Nest accepts by default. The &lt;code&gt;-c&lt;/code&gt; tells curl that it should start the cookie engine and save the cookies to a file. If all goes well, you should get a response like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"cookie"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nl"&gt;"originalMaxAge"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"expires"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2021-08-16T05:30:51.621Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"httpOnly"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"sameSite"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="nl"&gt;"passport"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can send a request to &lt;code&gt;/protected&lt;/code&gt; and get our protected response back&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:3000/protected &lt;span class="nt"&gt;-b&lt;/span&gt; cookie.joe.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;-b&lt;/code&gt; we are telling curl to use the cookies found in this file. &lt;/p&gt;

&lt;p&gt;Now let's check the registration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:3000/auth/register &lt;span class="nt"&gt;-c&lt;/span&gt; cookie.new.txt &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'email=new.email@test.com&amp;amp;password=password&amp;amp;confirmationPassword=password&amp;amp;firstName=New&amp;amp;lastName=Test'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that no session was created for the new user, which means they still need to log in. Now let's send that login request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:3000/auth/login &lt;span class="nt"&gt;-c&lt;/span&gt; cookie.new.txt &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'email=new.email@test.com&amp;amp;password=password'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And check that we did indeed create a session&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:3000/protected &lt;span class="nt"&gt;-b&lt;/span&gt; cookie.new.txt&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like that, we've implemented a session login with NestJS, Redis, and Passport.&lt;/p&gt;

&lt;p&gt;To view the session IDs in redis, you can connect the redis-cli to the running instance and run &lt;code&gt;KEYS *&lt;/code&gt; to get all of the set keys. By default &lt;code&gt;connect-redis&lt;/code&gt; uses &lt;code&gt;sess:&lt;/code&gt; as a session key prefix. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Phew, okay, that was definitely a longer article than I had anticipated with a much deeper focus on Nest's integration with Passport, but hopefully it helps paint a picture of how everything ties together. With the above, it should be possible to integrate sessions with any kind of login, basic, local, OAuth2.0, so long as the user object remains the same.&lt;/p&gt;

&lt;p&gt;One last thing to note, when using sessions, cookies are a must. The client must be able to work with cookies, otherwise the session will essentially be lost on each request.&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to leave a comment or find me on the &lt;a href="https://discord.gg/nestjs"&gt;NestJS Discord Server&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nestjs</category>
      <category>passport</category>
      <category>sessions</category>
      <category>redis</category>
    </item>
  </channel>
</rss>
