<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to ask for help about code, and how to deal with the answers. A practical guide</title>
      <author>Felippe Regazio</author>
      <pubDate>Wed, 18 Aug 2021 22:35:34 +0000</pubDate>
      <link>https://dev.to/felipperegazio/how-to-ask-for-help-about-code-and-how-to-deal-with-the-answers-a-practical-guide-3i6o</link>
      <guid>https://dev.to/felipperegazio/how-to-ask-for-help-about-code-and-how-to-deal-with-the-answers-a-practical-guide-3i6o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-ask-for-help-about-code-and-deal-with-the-answers"&gt;
  &lt;/a&gt;
  How to ask for help about code and deal with the answers
&lt;/h1&gt;

&lt;p&gt;For the rest of your life as a developer you will bump into problems that you simply DONT KNOW how to start, how to solve, and you will to discover by yourself. Its part of the game. How you handle this situation will define part of the type of professional you are and will be. the way that you will organize the problems, thing, present and attack them matters. So let's go to some important points about it:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-find-the-root-of-your-doubt"&gt;
  &lt;/a&gt;
  1. Find the root of your doubt
&lt;/h2&gt;

&lt;p&gt;Did you get the task but didn't understood the description? So it's useless to ask the Dev next to you "hey, I don't know how to do handle this, can you help me?". Even if he/she explains, you won't understand because you didn't even understood what to do, or what kind of problem is happening.&lt;/p&gt;

&lt;p&gt;It's okay not to understand the briefing, it means you have a clear reason to ask for help. But its a problem pretending to understand, trying to get things done without clear information and end up stucked.&lt;/p&gt;

&lt;p&gt;The task description said to do something in the login but you don't know "what login?", ok: ask. Missing info in description? Notify someone. You really don't understood, ask Lead, PM, PO... Trying to coding something without a clear understanding of what to do is by itself a problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-try-not-to-pass-the-ball"&gt;
  &lt;/a&gt;
  2. Try not to pass the ball
&lt;/h2&gt;

&lt;p&gt;Let's imagine that you got a task: show a new message after login. You read the task, understood the briefing, started to code, but suddenly nothing makes sense. Nothing works. This is where most beginners ask someone WHAT to do, and not HOW to do (because you even know what you dont know).&lt;/p&gt;

&lt;p&gt;Often the Dev's first move is to call a colleague and say, "I need to show a message after login but I'm not getting it, how could I do it?"&lt;/p&gt;

&lt;p&gt;This is not exactly a question, you are passing the ball. The person will basically tell you how to work. And thats ok sometimes, you can learn with it too. But if this starts to get recurrent, then it's better to follow the next steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-identify-your-difficulty"&gt;
  &lt;/a&gt;
  First identify your difficulty
&lt;/h3&gt;

&lt;p&gt;You can't start because you don't know which file to move? Not sure which function to use? Do you know the files but at the time of displaying the message you don't know how to do the modal? Or do you have a lib to show the message and you don't know where is the docs?&lt;/p&gt;

&lt;p&gt;These are real doubts. See that then the way to build your questions would change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hey, I need to show a message after Login but I don't know what file or function it is in, can you show me?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'm giving a console log here because I don't know how to do the modal, or if I should use lib, could you help me?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, before declaring to someone that you have NO IDEA WHAT TO DO and need help to give baby steps, it's better to try, look at yourself and think: which part exactly am I not understanding?. Ask a question after question after another if you need to, no prob.&lt;/p&gt;

&lt;p&gt;See that I'm not saying that you can't ask someone to show you how to do something entirely. I'm telling that this shouldn't become a modus operandi because will harm your learning and the team dynamics. Try to do it first, understand your own difficulties, list them and ask for help objectively. That way you help yourself to learn, and help the team to help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-have-the-ownership-of-your-task"&gt;
  &lt;/a&gt;
  3. Have the ownership of your task
&lt;/h2&gt;

&lt;p&gt;Let's say then that you understood the briefing, did the task, asked for help, pushed the code and tadááááá: A WILD BUG APPEARED.&lt;/p&gt;

&lt;p&gt;The worst thing you can do when informed of the bug is to say, "But I did it the way Juliana (or anyone else on the team) told me to do it".&lt;/p&gt;

&lt;p&gt;Bug report is not blaming. If someone informs you of a bug, you listen and solve it. Then starts all again.&lt;/p&gt;

&lt;p&gt;Sometimes you can say this unintentionally, but it's like trying to blame the other for a non-existent consequence of your own task.&lt;/p&gt;

&lt;p&gt;If you do a task, ask for help and then say "but I did it the way X-Person told me to do it", the person who helped you will probably think 10 times before helping you again. Even if nothing comes out of it. Remember: you can ask for help but the task is yours.&lt;/p&gt;

&lt;p&gt;The responsibility for bugs should be with the whole team. This is one of the effects of doing code review: other people saw the code, other people approved it. Other people are naturally involved, you don't need to be afraid of being wronged (at least in a healthy team).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ask-for-pair-programming"&gt;
  &lt;/a&gt;
  4. Ask for Pair Programming
&lt;/h2&gt;

&lt;p&gt;Let's say that you really can't organize your head, you got the task, you have the ownership, you are motivated, but you you have no idea about how to solve it, you need to ask someone to untangle: Ask a colleague for a pair programming :)&lt;/p&gt;

&lt;p&gt;If you're totally lost, instead of sending a message or poking the other dev and asking implicitly to "explain how to do your task", ask for a pair: among other things, that's what a pair its for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-be-honest-when-in-doubt"&gt;
  &lt;/a&gt;
  5. BE HONEST when in doubt
&lt;/h2&gt;

&lt;p&gt;Don't ask questions pretending to know more than you really do, or embarrassed. Okay to ask (if not, you are on the wrong place). You need a pair prgramming and it's lost? Ok, ask for help: "Hey, can we pair? I have no idea about how to attack this problem". Thats totally ok.&lt;/p&gt;

&lt;p&gt;If what you have is a specific doubt, be frank: Hey, I read React's useState documentation, I did what was there, I tried a few things but nothing worked, it's buggy, I don't think I understood, could you help me? Sometimes, the way you ask can make the problem easy to solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you have a cool team, the team will welcome you and you will all grow together, and knowing how to organize and present problems for the team is a skill that you should try to improve as much as possible.&lt;/p&gt;

&lt;p&gt;Cover image by NeONBRAND on Unsplash.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Oh my Tomtit - alternative to oh my zsh written on Raku</title>
      <author>Alexey Melezhik</author>
      <pubDate>Wed, 18 Aug 2021 22:19:52 +0000</pubDate>
      <link>https://dev.to/melezhik/oh-my-tomtit-alternative-to-oh-my-zshell-written-on-raku-4oc5</link>
      <guid>https://dev.to/melezhik/oh-my-tomtit-alternative-to-oh-my-zshell-written-on-raku-4oc5</guid>
      <description>&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;Oh My Zsh&lt;/a&gt; is quite poplar ecosystem allows people to run useful scenarios to customize their terminals as well to deal with typical tasks.&lt;/p&gt;

&lt;p&gt;A couple years ago I created the &lt;a href="https://github.com/melezhik/Tomtit"&gt;Tomtit&lt;/a&gt; and since then this has been bothering me - how similar it is to what ohmyzsh does ...&lt;/p&gt;

&lt;p&gt;Well, not exactly, but it's written on Raku.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brief-comparison-with-ohmyzsh"&gt;
  &lt;/a&gt;
  Brief comparison with ohmyzsh
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tomit allows to write portable scripts and execute them to satisfy users' needs. The same what ohmyzsh plugins do&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike ohmyzsh  plugins which are written on Zshell, Tomtit plugins could be written on similar Bash or many &lt;a href="https://github.com/melezhik/Sparrow6#supported-languages"&gt;other languages&lt;/a&gt; supported by Sparrow ( on which the Tomtit is built on )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike ohmyzsh  scenarios, Tomtit scenarios get run as Raku scripts and thus are highly customizable. In ohmyzsh you only have shell aliases or functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ohmyzh has &lt;strong&gt;275+&lt;/strong&gt; plugins which is a little bit more then Sparrow has - &lt;a href="http://sparrowhub.io/"&gt;216&lt;/a&gt; plugins, however the difference is not that big, considering that the only Sparrow maintainer is me :-).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#brief-example"&gt;
  &lt;/a&gt;
  Brief example
&lt;/h1&gt;

&lt;p&gt;Every time I work with &lt;code&gt;git&lt;/code&gt; I need this helpers that easy my work. With Tomtit I'd do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tom &lt;span class="nt"&gt;--profile&lt;/span&gt; git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;install git@commit ...
install git@git-branch-delete ...
install git@git-publish ...
install git@git-summary ...
install git@pull ...
install git@push ...
install git@set-git ...
install git@status ...
install git@update-branch-list ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then set-up my git config for &lt;em&gt;this&lt;/em&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tom &lt;span class="nt"&gt;--edit&lt;/span&gt; set-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!raku&lt;/span&gt;

&lt;span class="nv"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;run&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;set git&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git-base&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;melezhik@email.com&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;name&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alexey Melezhik&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;config_scope&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="s"&gt;set_credential_cache&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And apply it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tom set-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[repository] :: index updated from file:///root/repo/api/v1/index
[set git] :: git credential.helper cache --timeout=3000000
[set git] :: git user.email melezhik@email.com
[set git] :: git user.name Alexey Melezhik
[task check] stdout match &amp;lt;git user.email melezhik@email.com&amp;gt; True
[task check] stdout match &amp;lt;git user.name Alexey Melezhik&amp;gt; True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it!&lt;/p&gt;

&lt;p&gt;Now I only need to commit my configuration into git:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;".cache"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
git add .tom
git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"my tomtit helpers for git"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#tomtit-profiles"&gt;
  &lt;/a&gt;
  Tomtit profiles
&lt;/h1&gt;

&lt;p&gt;Tomtit profiles are predefined user scripts grouped by categories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tom &lt;span class="nt"&gt;--profile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ado
azure
git
gitlab
hello
perl
raku
ruby
yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you install a profile you install all scripts into &lt;code&gt;.tom&lt;/code&gt; directory. For example, as we did for git:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tom &lt;span class="nt"&gt;--profile&lt;/span&gt; &lt;span class="nt"&gt;--list&lt;/span&gt; git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[profile scenarios]
git@commit      installed: True
git@git-branch-delete   installed: True
git@git-publish installed: True
git@git-summary installed: True
git@pull        installed: True
git@push        installed: True
git@set-git     installed: True
git@status      installed: True
git@update-branch-list  installed: True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've ended up having several &lt;code&gt;git-*&lt;/code&gt; scripts in &lt;code&gt;.tom&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Profile scripts are just Raku scripts invoking one or more Sparrow plugins. That's it. Tomtit would generate some reasonable stubs for &lt;code&gt;.tom/&lt;/code&gt; Raku scripts but you are always free to edit the ones.&lt;/p&gt;

&lt;p&gt;For example as we did for &lt;code&gt;set-git&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tom &lt;span class="nt"&gt;--edit&lt;/span&gt; set-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It allows you to generate some boilerplate code but then modify it upon your needs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Tomtit and Sparrow could be a reasonable alternative to ohmyzsh with pros mentioned above. Of course, some things like exporting shell aliases won't work with in Tomtit ( but there is workaround for that), however other command line tasks could be executed via Tomtit in very efficient way.&lt;/p&gt;




&lt;p&gt;I am looking for new (Raku?) contributors for the project.&lt;/p&gt;

&lt;p&gt;And thank you for reading.&lt;/p&gt;

&lt;p&gt;Alexey.&lt;/p&gt;

</description>
      <category>shell</category>
      <category>raku</category>
      <category>tools</category>
      <category>linux</category>
    </item>
    <item>
      <title>Pattern matching = switch++</title>
      <author>Conan</author>
      <pubDate>Wed, 18 Aug 2021 21:41:59 +0000</pubDate>
      <link>https://dev.to/shuckster/pattern-matching-switch-4k2c</link>
      <guid>https://dev.to/shuckster/pattern-matching-switch-4k2c</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@graham1384?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Parham Moieni&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After learning about the exciting, but sadly only &lt;a href="https://github.com/tc39/proposal-pattern-matching"&gt;Stage 1 proposal for pattern-matching&lt;/a&gt; in JavaScript, I felt compelled to write a &lt;a href="https://github.com/shuckster/match-iz"&gt;library&lt;/a&gt; that tries to, erm, match it as closely as I could:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherwise&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;match-iz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;needle&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essentially, pattern-matching is if/then and switch/case with a little more declarative cowbell. 🐮 🔔&lt;/p&gt;

&lt;p&gt;We can probe into an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todosReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set-vis-filter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;visFilter&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;visFilter&lt;/span&gt;
      &lt;span class="p"&gt;})),&lt;/span&gt;

    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add-todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="p"&gt;})),&lt;/span&gt;

    &lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...test against predicates as well as literals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AccountPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Loading&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defined&lt;/span&gt; &lt;span class="p"&gt;})(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...which is handy for dealing with server-responses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getJsonLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`size is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;

    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JSON not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;gte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Flagrant error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I didn't understand that...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and match strings against regular-expressions, passing the result into the handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 + 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;left&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;\+&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;right&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;left&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;right&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I couldn't parse that!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing we can't have is &lt;code&gt;else&lt;/code&gt; instead of &lt;code&gt;otherwise&lt;/code&gt;. 😁&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/tc39/proposal-pattern-matching"&gt;full TC39 proposal&lt;/a&gt; is more far-reaching because it is inspired by the advanced pattern-matching features offered by functional languages with mature implementations.&lt;/p&gt;

&lt;p&gt;Still, while we wait for the language feature I think &lt;a href="https://www.npmjs.com/package/match-iz"&gt;match-iz&lt;/a&gt; (along with many &lt;a href="https://www.npmjs.com/search?q=keywords:pattern-matching"&gt;similar libraries&lt;/a&gt;) is a nice tool for constructing some of the conditional logic we use in our JavaScript.&lt;/p&gt;

&lt;p&gt;It's not a substitute for well named intermediate variables of course, but I hope you can see its utility.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>conditionals</category>
      <category>select</category>
      <category>case</category>
    </item>
    <item>
      <title>Webpack Academy #3: HTML </title>
      <author>CodeOzz</author>
      <pubDate>Wed, 18 Aug 2021 21:22:41 +0000</pubDate>
      <link>https://dev.to/codeozz/webpack-academy-3-html-475l</link>
      <guid>https://dev.to/codeozz/webpack-academy-3-html-475l</guid>
      <description>&lt;p&gt;So now we have some basics in &lt;strong&gt;webpack&lt;/strong&gt; knowledge!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-lazy-issue"&gt;
  &lt;/a&gt;
  A lazy issue
&lt;/h3&gt;

&lt;p&gt;If you check the HTML file and the webpack config you should see something wrong, no?&lt;/p&gt;

&lt;p&gt;Whenever we need to change the name of the output, for example from &lt;code&gt;bundle.js&lt;/code&gt; to &lt;code&gt;output.js&lt;/code&gt;, we need to change it in our HTML file. Same issue if we want to add another output file like CSS file before!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fix-this-issue"&gt;
  &lt;/a&gt;
  How to fix this issue
&lt;/h3&gt;

&lt;p&gt;A plugin will be used to &lt;strong&gt;save us&lt;/strong&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;! &lt;/p&gt;

&lt;p&gt;It will inject our output file directly in our HTML ! It will be very helpful when we will use a &lt;code&gt;hash&lt;/code&gt; name (waiting for the next webpack academy to check this 😇) ! &lt;/p&gt;

&lt;p&gt;So we can remove the import in our HTML file&lt;/p&gt;

&lt;p&gt;From this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"dist/styles.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"dist/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can put the HTML in our &lt;code&gt;/src&lt;/code&gt; since it will be used in compilation.&lt;/p&gt;

&lt;p&gt;Let's take a look at the config plugin!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;removeComments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;collapseWhitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We put the path to our &lt;strong&gt;HTML file&lt;/strong&gt;, the &lt;code&gt;inject&lt;/code&gt; options will indicate to plugins where to put &lt;code&gt;script output file&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;If we don't use this option, the &lt;code&gt;bundle&lt;/code&gt; file we are put in &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, and it can be problematic since the html body will be load after loading the script file! It can lead to some issue (for example, the loading of the page when users come into our application)&lt;/p&gt;

&lt;p&gt;We use minify property to remove comments, we can also remove whitespace!&lt;/p&gt;

&lt;p&gt;✅ And finally we got this as &lt;strong&gt;output&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer=&lt;/span&gt;&lt;span class="s"&gt;"defer"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-options"&gt;
  &lt;/a&gt;
  Other options!
&lt;/h3&gt;

&lt;p&gt;We will check fastly some interesting options about the plugin!&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;metadata&lt;/code&gt; from webpack config and use it in &lt;code&gt;HTML&lt;/code&gt;, for example, you can use &lt;code&gt;title&lt;/code&gt; for page title, use CDN option to load CDN (we will check this in the next academy &lt;br&gt;
!).&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;title&lt;/code&gt; metadata 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Webpack academy title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;removeComments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;collapseWhitespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And get it in our &lt;strong&gt;HTML&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;htmlWebpackPlugin.options.title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt; Webpack academy title &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tadam! ✅&lt;/p&gt;

&lt;p&gt;You can see the power of this plugin! Use metadata in our webpack config is more &lt;strong&gt;efficient&lt;/strong&gt; than putting data in HTML, since the &lt;code&gt;webpack config&lt;/code&gt; have the current context, HTML should only be a template, not getting any context!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Webpack HTML template plugin is very powerful!&lt;/p&gt;

&lt;p&gt;It can carry all injections of &lt;strong&gt;output&lt;/strong&gt; without handling the name of any output file!&lt;/p&gt;

&lt;p&gt;We can also inject some &lt;code&gt;metadata&lt;/code&gt;! Like &lt;strong&gt;title page name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can check the code used in this article 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Code-Oz/webpack-academy/tree/ca917a089029d5fe509d3eb85b832f745443e4f0"&gt;https://github.com/Code-Oz/webpack-academy/tree/ca917a089029d5fe509d3eb85b832f745443e4f0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to have a nice article to read about web dev, you can subscribe to my FREE newsletter at this url -&amp;gt; &lt;a href="https://codeoz.substack.com/welcome"&gt;https://codeoz.substack.com/welcome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can follow me on :&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to buy me a coffee :D -&amp;gt; &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;https://www.buymeacoffee.com/CodeoZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TotalCross: A Powerful Cross-Platform Development Technology</title>
      <author>Oderlan Freire</author>
      <pubDate>Wed, 18 Aug 2021 21:08:22 +0000</pubDate>
      <link>https://dev.to/oderlanfreire/totalcross-a-powerful-cross-platform-development-technology-1nbd</link>
      <guid>https://dev.to/oderlanfreire/totalcross-a-powerful-cross-platform-development-technology-1nbd</guid>
      <description>&lt;p&gt;I decided to make this article based on my first few contacts with &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; technology. It was something totally new and exciting for me, as I believe it is for all developers, to be able to manipulate a new, robust and powerful technology. In this article I will talk about what &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; is, how it works and about &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; in VS Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-totalcross"&gt;
  &lt;/a&gt;
  What is TotalCross?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; is a Java based cross-platform SDK technology, aiming to make life easier for the developer or even the common user.It has a very low footprint, taking up a small amount of space on your device, less than 5MB in fact. Being cross-platform, the developer only needs to worry about learning the basics of Java and the &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; library to be able to run the program on embedded systems, Windows, Linux, Mac, IOS and Android. It has the same performance with all systems, and doesn't risk changes to the program or how it will behave regardless of the platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it%C2%A0works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;The developer uses the Java language to develop the program code and compile it to generate the Java bytecode. TCVM converts this Java bytecode to TC bytecode, therefore giving a performance boost that is characteristic of &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt;, thus packaging and distributing it to the desired platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#totalcross-on%C2%A0vscode"&gt;
  &lt;/a&gt;
  TotalCross on VSCode
&lt;/h2&gt;

&lt;p&gt;Starting to developing TotalCross on VSCode is quite simple, just install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=totalcross.vscode-totalcross"&gt;TotalCross plugin&lt;/a&gt; from VSCode's own marketplace. It is important to know that for the plugin to run well, it is necessary to have &lt;a href="https://jdk.java.net/11/"&gt;JDK11&lt;/a&gt; and &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; installed on your machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a%C2%A0project"&gt;
  &lt;/a&gt;
  Creating a project:
&lt;/h2&gt;

&lt;p&gt;After installing &lt;a href="https://jdk.java.net/11/"&gt;JDK11&lt;/a&gt;, &lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt; and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=totalcross.vscode-totalcross"&gt;plugin&lt;/a&gt;, it's time to start the first project.&lt;br&gt;
Open your VSCode, when the welcome screen appears, press "Ctrl + Shift + P" to open the command palette, type TotalCross and 4 options will appear to you, click Create New Project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJTUwDdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb2fh2xxpmgfl578one5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJTUwDdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb2fh2xxpmgfl578one5.png" alt="Create Project"&gt;&lt;/a&gt;&lt;br&gt;
When the file explorer opens, select or create the folder where you want to store the project. You can use a folder in any location, however, I would recommend creating it in the "Documents" directory for better organization.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTt5tVZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbgik6cp38o3gzfw5awu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTt5tVZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbgik6cp38o3gzfw5awu.png" alt="Folder Selection"&gt;&lt;/a&gt;&lt;br&gt;
When you select the folder, the VScode will ask you to enter the GroupId, which is basically the company or user ID. The following format should be used, ".com.company_name/user". For example com.totalcross.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkSLa0KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kda2ukslevmhcitbb45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkSLa0KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kda2ukslevmhcitbb45.png" alt="Project ID"&gt;&lt;/a&gt;&lt;br&gt;
Right after that, it will ask the user to give the program a name:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yr45z1Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lr2sbt04pba3fzja90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yr45z1Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5lr2sbt04pba3fzja90.png" alt="Project Name"&gt;&lt;/a&gt;&lt;br&gt;
The next step is to choose the version of the TotalCross SDK, I recommend choosing the most recent one.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Qa6bHbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmstt8qu6hh1bgxp22sh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Qa6bHbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmstt8qu6hh1bgxp22sh.png" alt="versao TC"&gt;&lt;/a&gt;&lt;br&gt;
Select which platform you want to develop the code for, then press enter or click OK:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esYzCp82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmlsyibmodpld4f9676e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esYzCp82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmlsyibmodpld4f9676e.png" alt="Devices"&gt;&lt;/a&gt;&lt;br&gt;
Next, VSCode will automatically download a HelloWorld template for you to modify and start developing your program.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2VO-rSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/773iygbc1jss1cxmi0g1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2VO-rSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/773iygbc1jss1cxmi0g1.png" alt="Hello World  Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-run-the%C2%A0code"&gt;
  &lt;/a&gt;
  How to run the code:
&lt;/h2&gt;

&lt;p&gt;Right-click on the file named RunApplication.java and click on the option Run Java.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4aFGZrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eb4ax8y1vv4u8mo9vge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4aFGZrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eb4ax8y1vv4u8mo9vge.png" alt="Run"&gt;&lt;/a&gt;&lt;br&gt;
VSCode will import, compile and run the Java project, creating the application window:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnUK4wPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67jheq6hb8pkza5rbzzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnUK4wPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67jheq6hb8pkza5rbzzy.png" alt="App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this article about TotalCross. After my first contact with this technology, I can say that I recommend it. If you are looking for a new, powerful, accessible and quality technology to develop your program, whether it is cross-platform or not, I strongly recommend &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt;. This is due to the facilities that the technology offers with its library, easy installation, small footprint, agility, performance increase due to TCVM, and the fact that it has a large community that is on the rise. The &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; community is always open to help you learn, exchanging experiences and answering any questions.&lt;/p&gt;

&lt;p&gt;You can join the &lt;a href="https://totalcross.com"&gt;TotalCross&lt;/a&gt; community through the official website, &lt;a href="https://github.com/TotalCross/totalcross"&gt;GitHub&lt;/a&gt; and &lt;a href="https://discord.gg/dwRhV4yY"&gt;Discord&lt;/a&gt;. It will be a great experience and you are sure to learn a lot of great things! Look forward to seeing you there!&lt;/p&gt;

&lt;p&gt;I am Oderlan Freire from Ocara, Ceará. I started working at TotalCross as an intern in 2021, student of Information Systems at the Federal University of Ceará, and I participated in the SharinAgro project, one of the top projects selected for the Microsoft contest IA for Earth.&lt;/p&gt;

</description>
      <category>totalcross</category>
      <category>install</category>
      <category>tutorial</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Secure localStorage data with high level of encryption and data compression</title>
      <author>Alexandre Freire</author>
      <pubDate>Wed, 18 Aug 2021 21:03:32 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/secure-localstorage-data-with-high-level-of-encryption-and-data-compression-5em4</link>
      <guid>https://dev.to/alexandrefreire/secure-localstorage-data-with-high-level-of-encryption-and-data-compression-5em4</guid>
      <description>&lt;p&gt;By &lt;a href="https://github.com/softvar/secure-ls"&gt;https://github.com/softvar/secure-ls&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#securels"&gt;
  &lt;/a&gt;
  secure-ls
&lt;/h1&gt;

&lt;p&gt;Secure localStorage data with high level of encryption and data compression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://softvar.github.io/secure-ls#live-demo"&gt;LIVE DEMO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Secure data with various types of encryption including &lt;code&gt;AES&lt;/code&gt;, &lt;code&gt;DES&lt;/code&gt;, &lt;code&gt;Rabbit&lt;/code&gt; and &lt;code&gt;RC4&lt;/code&gt;. (defaults to &lt;code&gt;Base64&lt;/code&gt; encoding).&lt;/li&gt;
&lt;li&gt;Compress data before storing it to &lt;code&gt;localStorage&lt;/code&gt; to save extra bytes (defaults to &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Advanced API wrapper over &lt;code&gt;localStorage&lt;/code&gt; API, providing other basic utilities.&lt;/li&gt;
&lt;li&gt;Save data in multiple keys inside &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;secure-ls&lt;/code&gt; will always remember it's creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install secure-ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#libraries-used"&gt;
  &lt;/a&gt;
  Libraries used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Encryption / Decryption&lt;/strong&gt; using &lt;a href="https://code.google.com/archive/p/crypto-js"&gt;The Cipher Algorithms&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It requires secret-key for encrypting and decrypting data securely. If custom secret-key is provided as mentioned below in APIs, then the library will pick that otherwise it will generate yet another very &lt;code&gt;secure&lt;/code&gt; unique password key using &lt;a href="https://code.google.com/archive/p/crypto-js/#PBKDF2"&gt;PBKDF2&lt;/a&gt;, which will be further used for future API requests.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PBKDF2&lt;/code&gt; is a password-based key derivation function. In many applications of cryptography, user security is ultimately dependent on a password, and because a password usually can't be used directly as a cryptographic key, some processing is required.&lt;/p&gt;

&lt;p&gt;A salt provides a large set of keys for any given password, and an iteration count increases the cost of producing keys from a password, thereby also increasing the difficulty of attack.&lt;/p&gt;

&lt;p&gt;Eg: &lt;code&gt;55e8f5585789191d350329b9ebcf2b11&lt;/code&gt; and &lt;code&gt;db51d35aad96610683d5a40a70b20c39&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the generation of such strings, &lt;code&gt;secretPhrase&lt;/code&gt; is being used and can be found in code easily but that won't make it unsecure, &lt;code&gt;PBKDF2&lt;/code&gt;'s layer on top of that will handle security.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Compresion / Decompression&lt;/strong&gt; using &lt;a href="https://github.com/pieroxy/lz-string"&gt;lz-string&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Example 1: With &lt;code&gt;default&lt;/code&gt; settings i.e. &lt;code&gt;Base64&lt;/code&gt; Encoding and Data Compression
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; var ls = new SecureLS();
&amp;gt; ls.set('key1', {data: 'test'}); // set key1
&amp;gt; ls.get('key1'); // print data
  {data: 'test'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 2: With &lt;code&gt;AES&lt;/code&gt; Encryption and Data Compression
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; var ls = new SecureLS({encodingType: 'aes'});
&amp;gt; ls.set('key1', {data: 'test'}); // set key1
&amp;gt; ls.get('key1'); // print data
  {data: 'test'}

&amp;gt; ls.set('key2', [1, 2, 3]); // set another key
&amp;gt; ls.getAllKeys(); // get all keys
  ["key1", "key2"]
&amp;gt; ls.removeAll(); // remove all keys

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 3: With &lt;code&gt;RC4&lt;/code&gt; Encryption but no Data Compression
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; var ls = new SecureLS({encodingType: 'rc4', isCompression: false});
&amp;gt; ls.set('key1', {data: 'test'}); // set key1
&amp;gt; ls.get('key1'); // print data
  {data: 'test'}

&amp;gt; ls.set('key2', [1, 2, 3]); // set another key
&amp;gt; ls.getAllKeys(); // get all keys
  ["key1", "key2"]
&amp;gt; ls.removeAll(); // remove all keys

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example 3: With &lt;code&gt;DES&lt;/code&gt; Encryption, no Data Compression and custom secret key
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; var ls = new SecureLS({encodingType: 'des', isCompression: false, encryptionSecret: 'my-secret-key'});
&amp;gt; ls.set('key1', {data: 'test'}); // set key1
&amp;gt; ls.get('key1'); // print data
  {data: 'test'}

&amp;gt; ls.set('key2', [1, 2, 3]); // set another key
&amp;gt; ls.getAllKeys(); // get all keys
  ["key1", "key2"]
&amp;gt; ls.removeAll(); // remove all keys

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#api-documentation"&gt;
  &lt;/a&gt;
  API Documentation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#create-an-instance-reference-before-using"&gt;
  &lt;/a&gt;
  Create an instance / reference before using.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Contructor&lt;/code&gt; accepts a configurable &lt;code&gt;Object&lt;/code&gt; with all three keys being optional.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Config Keys&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;accepts&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;encodingType&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Base64&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;base64&lt;/code&gt;/&lt;code&gt;aes&lt;/code&gt;/&lt;code&gt;des&lt;/code&gt;/&lt;code&gt;rabbit&lt;/code&gt;/&lt;code&gt;rc4&lt;/code&gt;/&lt;code&gt;''&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;isCompression&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;encryptionSecret&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;PBKDF2 value&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;encryptionNamespace&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;encryptionSecret&lt;/code&gt; will only be used for the Encryption and Decryption of data&lt;br&gt;
with &lt;code&gt;AES&lt;/code&gt;, &lt;code&gt;DES&lt;/code&gt;, &lt;code&gt;RC4&lt;/code&gt;, &lt;code&gt;RABBIT&lt;/code&gt;, and the library will discard it if no encoding / Base64&lt;br&gt;
encoding method is choosen.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;encryptionNamespace&lt;/code&gt; is used to make multiple instances with different &lt;code&gt;encryptionSecret&lt;/code&gt;&lt;br&gt;
and/or different &lt;code&gt;encryptionSecret&lt;/code&gt; possible.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls1 = new SecureLS({encodingType: 'des', encryptionSecret: 'my-secret-key-1'});
var ls2 = new SecureLS({encodingType: 'aes', encryptionSecret: 'my-secret-key-2'});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No config or empty Object i.e. Default &lt;strong&gt;&lt;code&gt;Base64 Encoding&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;Data compression&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS();
// or
var ls = new SecureLS({});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;No encoding No data compression i.e. &lt;strong&gt;&lt;code&gt;Normal&lt;/code&gt;&lt;/strong&gt; way of storing data
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS({encodingType: '', isCompression: false});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Base64&lt;/code&gt;&lt;/strong&gt; encoding but &lt;strong&gt;&lt;code&gt;no&lt;/code&gt;&lt;/strong&gt; data compression
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS({isCompression: false});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;AES&lt;/code&gt;&lt;/strong&gt; encryption and &lt;strong&gt;&lt;code&gt;data compression&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS({encodingType: 'aes'});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;RC4&lt;/code&gt;&lt;/strong&gt; encryption and &lt;strong&gt;&lt;code&gt;no&lt;/code&gt;&lt;/strong&gt; data compression
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS({encodingType: 'rc4', isCompression: false});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;RABBIT&lt;/code&gt;&lt;/strong&gt; encryption, &lt;strong&gt;&lt;code&gt;no&lt;/code&gt;&lt;/strong&gt; data compression and &lt;code&gt;custom&lt;/code&gt; encryptionSecret
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var ls = new SecureLS({encodingType: 'rc4', isCompression: false, encryptionSecret: 's3cr3tPa$$w0rd@123'});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;set&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Saves &lt;code&gt;data&lt;/code&gt; in specifed &lt;code&gt;key&lt;/code&gt; in localStorage. If the key is not provided, the library will warn. Following types of JavaScript objects are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;ArrayBuffer&lt;/li&gt;
&lt;li&gt;Blob&lt;/li&gt;
&lt;li&gt;Float32Array&lt;/li&gt;
&lt;li&gt;Float64Array&lt;/li&gt;
&lt;li&gt;Int8Array&lt;/li&gt;
&lt;li&gt;Int16Array&lt;/li&gt;
&lt;li&gt;Int32Array&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Uint8Array&lt;/li&gt;
&lt;li&gt;Uint8ClampedArray&lt;/li&gt;
&lt;li&gt;Uint16Array&lt;/li&gt;
&lt;li&gt;Uint32Array&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;|   Parameter   |        Description          |&lt;br&gt;
  | ------------- | --------------------------- |&lt;br&gt;
  |     key       |     key to store data in    |&lt;br&gt;
  |     data      |      data to be stored      |&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ls.set('key-name', {test: 'secure-ls'})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;get&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets &lt;code&gt;data&lt;/code&gt; back from specified &lt;code&gt;key&lt;/code&gt; from the localStorage library. If the key is not provided, the library will warn.&lt;/p&gt;

&lt;p&gt;|   Parameter   |         Description                 |&lt;br&gt;
  | ------------- | ----------------------------------- |&lt;br&gt;
  |     key       |     key in which data is stored     |&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ls.get('key-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removes the value of a key from the localStorage. If the &lt;code&gt;meta key&lt;/code&gt;, which stores the list of keys, is tried to be removed even if there are other keys which were created by &lt;code&gt;secure-ls&lt;/code&gt; library, the library will warn for the action.&lt;/p&gt;

&lt;p&gt;|   Parameter   |         Description                       |&lt;br&gt;
  | ------------- | ----------------------------------------- |&lt;br&gt;
  |     key       |     remove key in which data is stored    |&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ls.remove('key-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;removeAll&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removes all the keys that were created by the &lt;code&gt;secure-ls&lt;/code&gt; library, even the &lt;code&gt;meta key&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ls.removeAll()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removes all the keys ever created for that particular domain. Remember localStorage works differently for &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt; protocol;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ls.clear()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;getAllKeys&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets the list of keys that were created using the &lt;code&gt;secure-ls&lt;/code&gt; library. Helpful when data needs to be retrieved for all the keys or when keys name are not known(dynamically created keys).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getAllKeys()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ls.getAllKeys()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDpbS_va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDpbS_va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm run build&lt;/code&gt; - produces production version of the library under the &lt;code&gt;dist&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run dev&lt;/code&gt; - produces development version of the library and runs a watcher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run test&lt;/code&gt; - well ... it runs the tests :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Fork the repo on GitHub.&lt;/li&gt;
&lt;li&gt;Clone the repo on machine.&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run dev&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new branch &lt;code&gt;&amp;lt;fix-typo&amp;gt;&lt;/code&gt; and do your work.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to build dist files and &lt;code&gt;npm run test&lt;/code&gt; to ensure all test cases are passing.&lt;/li&gt;
&lt;li&gt;Commit your changes to the branch.&lt;/li&gt;
&lt;li&gt;Submit a Pull request.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#development-stack"&gt;
  &lt;/a&gt;
  Development Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Webpack based &lt;code&gt;src&lt;/code&gt; compilation &amp;amp; bundling and &lt;code&gt;dist&lt;/code&gt; generation.&lt;/li&gt;
&lt;li&gt;ES6 as a source of writing code.&lt;/li&gt;
&lt;li&gt;Exports in a &lt;a href="https://github.com/umdjs/umd"&gt;umd&lt;/a&gt; format so the library works everywhere.&lt;/li&gt;
&lt;li&gt;ES6 test setup with &lt;a href="http://mochajs.org/"&gt;Mocha&lt;/a&gt; and &lt;a href="http://chaijs.com/"&gt;Chai&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Linting with &lt;a href="http://eslint.org/"&gt;ESLint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ES6 source files
       |
       |
    webpack
       |
       +--- babel, eslint
       |
  ready to use
     library
  in umd format
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Many thanks to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/brix"&gt;@brix&lt;/a&gt; for the awesome &lt;strong&gt;&lt;a href="https://github.com/brix/crypto-js"&gt;crypto-js&lt;/a&gt;&lt;/strong&gt; library for encrypting and decrypting data securely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/pieroxy"&gt;@pieroxy&lt;/a&gt; for the &lt;strong&gt;&lt;a href="https://github.com/pieroxy/lz-string"&gt;lz-string&lt;/a&gt;&lt;/strong&gt; js library for data compression / decompression.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/chinchang"&gt;@chinchang&lt;/a&gt; for the below open-source libraries which are used only for the &lt;a href="http://varunmalhotra.xyz/secure-ls/"&gt;Landing Page Development&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/chinchang/screenlog.js/"&gt;screenlog.js&lt;/a&gt;&lt;/strong&gt; - Brings console.log on the page's screen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/chinchang/superplaceholder.js"&gt;superplaceholder.js&lt;/a&gt;&lt;/strong&gt; - For super charging input placeholders.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#copyright-and-license"&gt;
  &lt;/a&gt;
  Copyright and license
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://opensource.org/licenses/MIT"&gt;MIT license&lt;/a&gt; (MIT)&lt;/p&gt;

&lt;p&gt;Copyright (c) 2015-2016 Varun Malhotra&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Calculations with booleans</title>
      <author>Cornelia</author>
      <pubDate>Wed, 18 Aug 2021 21:00:15 +0000</pubDate>
      <link>https://dev.to/soliloquizin/calculations-with-booleans-1i1p</link>
      <guid>https://dev.to/soliloquizin/calculations-with-booleans-1i1p</guid>
      <description>&lt;p&gt;Sometimes I like to take a look at the quirkiness of the language I code in and compare it to other languages. This time, I thought I'd share my findings with you, in case you also find them entertaining and interesting. On this occasion I looked at a quirk featured in &lt;a href="https://github.com/denysdovhan/wtfjs#math-with-true-and-false"&gt;WTFJS&lt;/a&gt;, namely doing Math with booleans. Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#true-true-"&gt;
  &lt;/a&gt;
  true + true = ?
&lt;/h2&gt;

&lt;p&gt;In Javascript, we use the + operator to concatenate strings as well as to add up numbers, but what happens when we through some booleans into the mix? Let's try!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: "Hitrue"&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: "trueHi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, so far, so good, Javascript notices that we use a string with a + operator and treats the boolean like a String and concatenates the two. Now, let's take a look at the numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: 6&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, what? Let's take a closer look at what's happening here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-numberfunction"&gt;
  &lt;/a&gt;
  the Number-function
&lt;/h3&gt;

&lt;p&gt;The boolean value is passed to the &lt;code&gt;Number&lt;/code&gt;-function, which converts it to a Number; &lt;code&gt;true&lt;/code&gt; is converted to 1 and &lt;code&gt;false&lt;/code&gt; to 0.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;The Javascript Number type has limits to what it can store and also limits on how high the numbers stored in can be. All Numbers are stored as floating-point values.&lt;/p&gt;




&lt;p&gt;If it fails to convert the value into a number, it will return NaN. It can convert true, false, null, as well as a decimal and hexadecimal number (in strings).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// output: NaN&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x7E5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0x7E5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// output: 12.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calculation-with-booleans-only"&gt;
  &lt;/a&gt;
  calculation with booleans only
&lt;/h3&gt;

&lt;p&gt;When we only add boolean operands, Javascript will still try and convert them into Numbers, rather than interpreting both as being strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// output: 2&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#beyond-the-addition"&gt;
  &lt;/a&gt;
  Beyond the addition
&lt;/h2&gt;

&lt;p&gt;The same effect, of course, happens with subtractions, multiplications and divisions, as well as when using unary operators (positive and negative - although NaN will not be signed).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;       &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;      &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;       &lt;span class="c1"&gt;// output: 0&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;  &lt;span class="c1"&gt;// output: NaN&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;0x75E&lt;/span&gt;      &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0x75E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;    &lt;span class="c1"&gt;// output: 2021&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;     &lt;span class="c1"&gt;// output: 12.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#is-it-just-js"&gt;
  &lt;/a&gt;
  Is it just JS
&lt;/h2&gt;

&lt;p&gt;You might know all of this already, so let's compare it to a few other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt; and &lt;strong&gt;Python&lt;/strong&gt; will also allow calculations with booleans. They both also convert &lt;code&gt;true&lt;/code&gt; to 1 and &lt;code&gt;false&lt;/code&gt; to 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt; and &lt;strong&gt;Rust&lt;/strong&gt; on the other hand, will both refuse calculations with boolean values and throw an error during compilation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;error: bad operand types for binary operator '+'&lt;br&gt;
&lt;em&gt;Java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;error [E0277]: cannot add &lt;code&gt;bool&lt;/code&gt; to &lt;code&gt;{integer}&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Rust&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I hope you had fun reading about calculations with booleans. Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>quirks</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Livewire – Revolução no desenvolvimento front-end Laravel?</title>
      <author>agatha-vieira</author>
      <pubDate>Wed, 18 Aug 2021 20:46:51 +0000</pubDate>
      <link>https://dev.to/fireworkweb/livewire-revolucao-no-desenvolvimento-front-end-laravel-2jf8</link>
      <guid>https://dev.to/fireworkweb/livewire-revolucao-no-desenvolvimento-front-end-laravel-2jf8</guid>
      <description>&lt;p&gt;Quem nunca teve problemas na hora de fazer o desenvolvimento do seu front-end? Quem nunca queria usar Vue, mas por não saber usar muito bem, sofreu para conseguir um resultado igual ele? Pois bem, a recém-nascida lib do Laravel chamada Livewire promete resolver esses problemas! Entenda melhor a ferramenta neste post 😉&lt;/p&gt;

&lt;p&gt;AFINAL, O QUE É LIVEWIRE?&lt;br&gt;
O Livewire é uma biblioteca que foi adicionada em 2019 pelo famosíssimo framework Laravel. &lt;/p&gt;

&lt;p&gt;A proposta dela é criar interfaces dinâmicas (similares ao Vue) com os códigos do blade e do próprio Laravel. Sim! Exatamente! Você, programador Back-end, poderá criar um front-end bem desenvolvido com o Livewire!&lt;/p&gt;

&lt;p&gt;Indo direto ao ponto, o Livewire funciona de um jeito beeem peculiar. Qualquer interação que acontecer com ele, se faz uma requisição AJAX e o HTML é renderizado do lado do servidor e depois retornado ao cliente. Esse fluxo permite que ele seja reativo, porém, um pouco mais lento. Ele tem algo parecido com um DOM virtual, onde ele compara as alterações com o DOM renderizado e então aplica as modificações.&lt;/p&gt;

&lt;p&gt;VANTAGENS E DESVANTAGENS DO LIVEWIRE&lt;br&gt;
Os principais pontos positivos do Livewire são:&lt;/p&gt;

&lt;p&gt;A facilidade de trabalho, pois é simples de entender para quem já usa o Laravel. &lt;br&gt;
O nível profissional dele permite uma avalanche de possibilidades com simples comandos, todos com um resultado bem próximo de um Vue. &lt;/p&gt;

&lt;p&gt;Porém, nem tudo são flores. Apesar de parecer um paraíso, o Livewire possui pontos negativos também. O primeiro deles, é que, por ser uma ferramenta muito recente, o suporte e dúvidas tiradas são poucas, até nos fóruns mais conhecidos dos desenvolvedores, como o Stack Overflow. &lt;/p&gt;

&lt;p&gt;Outro ponto, é que, por ter a proposta de não usar uma linguagem diferente, no caso, o JavaScript. Porém, esse problema pode ser resolvido usando a micro framework AlpineJS como adicional, menor e sem ser tão pesada quanto um Angular, por exemplo.&lt;/p&gt;

&lt;p&gt;Durante o trabalho com Livewire, podemos usar comandos do Laravel para criar os componentes, como “php artisan make:livewire Teste”. A lib trabalha com dois arquivos separados: a view e o arquivo que comanda a view. No caso, um deles tem a extensão .blade.php, o qual estamos acostumados a criar os estilos da tela e tudo que aparecerá para o cliente. No outro, o qual possui o mesmo nome da blade, é o controlador, onde terão as funções chamadas por métodos e eventos da blade e onde são declaradas as variáveis presentes na tela.&lt;/p&gt;

&lt;p&gt;Exemplificando, criando um componente para ser um contador e mostrar em tempo real o número sendo adicionado na tela em cada clique do botão, usaremos o comando “php artisan make:livewire contador”. Dois arquivos são criados, o “Contador.php” e o “contador.blade.php”. Este último, temos o botão e a variável do número que será adicionado. O primeiro, por sua vez, terá toda a lógica por trás da funcionalidade, como a função de incrementar número e a variável número.&lt;/p&gt;

&lt;p&gt;Em resumo, a biblioteca Livewire é uma ferramenta muito interessante e essencial para quem não se adaptou ou não conhece o Vue.  Entretanto, como trata-se de uma lib muito recente (lançada em julho de 2019), seu suporte é limitado e ela é pouco abordada em fóruns da internet. É perfeito para aqueles que já estão acostumados com Laravel e querem criar interfaces de forma prática. Esclarecidos esses pontos, é necessário uma análise dos prós e contras para optar pelo uso desse recurso, que é muito promissor e acrescenta demais ao programador front-end.&lt;/p&gt;




&lt;p&gt;Aprenda mais nos nossos canais digitais!&lt;br&gt;
Site: &lt;a href="https://fireworkweb.com.br"&gt;https://fireworkweb.com.br&lt;/a&gt; &lt;br&gt;
Youtube:&lt;a href="https://bit.ly/2GwqNU1"&gt;https://bit.ly/2GwqNU1&lt;/a&gt; &lt;br&gt;
Insta: @fireworkweb&lt;br&gt;
Face: @fireworkweb&lt;br&gt;
Linkedin: Firework Web &amp;amp; Mobile&lt;/p&gt;

</description>
      <category>basecs</category>
      <category>laravel</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>react-color-palette: &lt;ColorPicker /&gt; component for your React project.</title>
      <author>Wondermarin</author>
      <pubDate>Wed, 18 Aug 2021 20:29:56 +0000</pubDate>
      <link>https://dev.to/wondermarin/react-color-palette-colorpicker-component-for-your-react-project-29ng</link>
      <guid>https://dev.to/wondermarin/react-color-palette-colorpicker-component-for-your-react-project-29ng</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone!
&lt;/h2&gt;

&lt;p&gt;I would like to introduce you to my &amp;lt;ColorPicker /&amp;gt; component.&lt;br&gt;
I will be glad of any feedback, have a nice day!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/Wondermarin/react-color-palette"&gt;GitHub Repo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://rcp.wondermarin.space"&gt;Online Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;🚀 Lightweight&lt;/li&gt;
&lt;li&gt;💨 No dependencies&lt;/li&gt;
&lt;li&gt;🛡️ Strict&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-color-palette
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#yarn"&gt;
  &lt;/a&gt;
  yarn
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-color-palette
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ColorPicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-color-palette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-color-palette/lib/css/styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#121212&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ColorPicker&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;228&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;hideHSV&lt;/span&gt; &lt;span class="nx"&gt;dark&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Interview Prep Questions</title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Wed, 18 Aug 2021 20:12:12 +0000</pubDate>
      <link>https://dev.to/molly/interview-prep-questions-5dha</link>
      <guid>https://dev.to/molly/interview-prep-questions-5dha</guid>
      <description>&lt;p&gt;&lt;em&gt;Followup post for &lt;a href="https://dev.to/molly/setting-yourself-up-for-interview-success-15b7"&gt;Setting Yourself Up for Interview Success&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below is a list of questions that I found extremely helpful when preparing for my interviews. Most of them came directly from the interviews I had and some were general ones I found online. &lt;/p&gt;

&lt;p&gt;When I used these to prep I put them on flash cards. I wrote the question on one side and my answer (or answers) on the other. Then I would go through them at the beginning of each week I was interviewing to prepare for my interviews. &lt;/p&gt;

&lt;p&gt;For reference, I was interviewing for Senior, Staff, and Engineering Manager positions with a focus on SRE (Site Reliability Engineering) and Reliability roles. I broke up the questions into categories to make them easier to sort through. They are in no particular order. I only numbered them to make them easy to reference. Using my answers to these questions I was able to answer every question that was thrown at me during my interviews. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-questions"&gt;
  &lt;/a&gt;
  General Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What do you want out of your next role?&lt;/li&gt;
&lt;li&gt;Tell me about a time you disagreed with someone. How did you handle it? What was the outcome?

&lt;ul&gt;
&lt;li&gt;The follow up questions might not get asked but get in the habit of answering those even when giving the initial answer. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What are your greatest strengths?&lt;/li&gt;
&lt;li&gt;What are your greatest weaknesses?

&lt;ul&gt;
&lt;li&gt;You likely will not directly get asked the above questions, but if you are aware of what your strengths are then you can work them into your answers for other questions. If you know what your weaknesses are you can also mention those and how you are working to improve them. The key is to not have any blindspots.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is a time when something took a lot out of you and what did you learn? &lt;/li&gt;
&lt;li&gt;List the major achievements you are most proud of at your current job. &lt;/li&gt;
&lt;li&gt;Tell me about someone you look up to and why?&lt;/li&gt;
&lt;li&gt;Tell me about a time you made a mistake.&lt;/li&gt;
&lt;li&gt;What was a piece of feedback that was hard to hear but helped you improve?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#srstaff-level-ic-questions"&gt;
  &lt;/a&gt;
  Sr./Staff Level IC Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Tell me about a complex system you designed.&lt;/li&gt;
&lt;li&gt;Tell me about a large project you had to get buy in for. What was it and how did you get the buy in you needed?&lt;/li&gt;
&lt;li&gt;Tell me about a time you failed and what you learned from it.

&lt;ul&gt;
&lt;li&gt;Even if they don't ask for what you learned you always include that. It shows that you are humble and have the ability to grow. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What do you value highly when working with software? (technical values)

&lt;ul&gt;
&lt;li&gt;Example answer: "I highly value simplicity bc I have found it leads to more reliable software. I also value automation bc humans doing things manually usually increases the chances of error." Expand more on your answer, but that gives you an idea of the kinds of answers you would give. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tell me about a time you had to make a decision that involved short-term sacrifices for long-term gains.&lt;/li&gt;
&lt;li&gt;Tell me about a time when you solved a complex problem and how you went about it.

&lt;ul&gt;
&lt;li&gt;Note this is different than #1 which asks about designing a complex system. I choose a &lt;a href="https://dev.to/molly/10-tips-for-debugging-in-production-ko1"&gt;story about a gnarly bug&lt;/a&gt; I had to fix. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is the most challenging part of being in an engineering leader for you?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#srereliability-ic-questions"&gt;
  &lt;/a&gt;
  SRE/Reliability IC Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Tell me about an incident that you ran?&lt;/li&gt;
&lt;li&gt;How do you define observability? How have you improved observability on past systems you have worked with? &lt;/li&gt;
&lt;li&gt;What tools have you built that were able to aid developers and/or fellow SREs?&lt;/li&gt;
&lt;li&gt;Give me an example of a time you made something more efficient.&lt;/li&gt;
&lt;li&gt;Give me an example of a time you improved a process. (could be team process or technical process) 

&lt;ul&gt;
&lt;li&gt;I talked about improving an on-call rotation for these types of questions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What does reliability mean to you? &lt;/li&gt;
&lt;li&gt;What is your preferred testing strategy?

&lt;ul&gt;
&lt;li&gt;Here you want to talk high level like unit vs end-to-end, smoke tests, canary deployments, etc. Give examples of what has worked well or not for you in the past. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Give me an example of a calculated risk that you took where speed was critical.&lt;/li&gt;
&lt;li&gt;What is your definition of SRE?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#manager-questions"&gt;
  &lt;/a&gt;
  Manager Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What is your management style?&lt;/li&gt;
&lt;li&gt;Tell me about the person you are most proud of empowering and growing. &lt;/li&gt;
&lt;li&gt;Tell me about a time when you had to give someone hard feedback.&lt;/li&gt;
&lt;li&gt;How do you deal with competing priorities?

&lt;ul&gt;
&lt;li&gt;When you get "how do you..." questions, answering with your strategy is good, but having a quick story to follow it up as an example is even better. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How do you gain trust from your team?&lt;/li&gt;
&lt;li&gt;What do you look for when you are hiring?&lt;/li&gt;
&lt;li&gt;How do you determine if someone is technically competent for a job?&lt;/li&gt;
&lt;li&gt;How do you keep the jerks out?&lt;/li&gt;
&lt;li&gt;Have you ever had a large project killed?&lt;/li&gt;
&lt;li&gt;How do you broach the topic of technical debt when having to explain it to leadership and other stakeholders?&lt;/li&gt;
&lt;li&gt;What does the diversity of your current team look like?&lt;/li&gt;
&lt;li&gt;Tell me about a time you missed a deadline and how you handled it.&lt;/li&gt;
&lt;li&gt;When was a time you failed as a manager and how did you handle it and make it right?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Depending on your experience, you may not have an answer for all of the "Tell me about a time..." questions. That is OK! Be truthful about it and then explain how you would handle the situation if you found yourself faced with it. For example, I never have had a large project killed but I talked about how I would be objective and make sure my team fully understood why it had happened.&lt;/p&gt;

&lt;p&gt;If you have any other questions you would like to add to this list, feel free to drop them in the comments below 👇 &lt;/p&gt;

</description>
      <category>interviewing</category>
      <category>job</category>
      <category>career</category>
    </item>
    <item>
      <title>Setting Yourself Up for Interview Success </title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Wed, 18 Aug 2021 20:11:53 +0000</pubDate>
      <link>https://dev.to/molly/setting-yourself-up-for-interview-success-15b7</link>
      <guid>https://dev.to/molly/setting-yourself-up-for-interview-success-15b7</guid>
      <description>&lt;p&gt;When it comes to interviewing, everyone has their own style and way they like to approach it. When I started looking for my next opportunity, I was not quite sure what to expect. I read a few blog posts to prep myself. These were incredibly helpful, but I found a few things even beyond their recommendations that helped me to succeed and that is what I want to share with you all. My approach may not be ideal for everyone but it worked very well for myself and using it I was able to land five job offers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-often"&gt;
  &lt;/a&gt;
  Interview Often
&lt;/h2&gt;

&lt;p&gt;Many folks will tell you that interviewing is a skill and you should make sure to get in some practice rounds before aiming towards a company you really want. I 100% found this to be the case. The first couple of phone screens I did I had to pause and think about the answers to the questions. As things went along, I was asked similar questions over and over and it got much easier. &lt;/p&gt;

&lt;p&gt;However, even with a couple of practice rounds, I still felt a bit stressed and anxious going into interviews. Then, as my interviewing frequency picked up, I noticed my anxiety nearly went away. When I had an interview scheduled almost every day my anxiety was almost non-existent because it felt like just one more meeting on my schedule. &lt;/p&gt;

&lt;p&gt;Once I had this realization I started to schedule interviews on a consistent cadence each week. This not only lowered my anxiety, but did wonders for my ability to solve the technical problems. Instead of getting nervous before a technical session, I would get focused. Interviewing on a consistent basis got me into a nice groove when it came to tackling technical interviews such as coding or systems design problems. &lt;/p&gt;

&lt;p&gt;I even went so far as to schedule a set of interviews with a company solely for the reason of getting me in the groove and prepped for one of the final companies I interviewed with. Not only did that extra company help prep me, but it turned out to be a fabulous interview and I got an offer that I seriously considered in the end.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flash-cards"&gt;
  &lt;/a&gt;
  Flash Cards
&lt;/h2&gt;

&lt;p&gt;The first couple of roles I did hiring screens for determined I was not a great fit. One of the roles I actually thought I was a great fit for but realized I had not presented my skills as well as I could have during the phone screen.&lt;/p&gt;

&lt;p&gt;Immediately after those phone screens I decided it was time to get organized and take interviewing more seriously. I sat down and wrote out the questions they asked that, at the time, I didn't think I gave good answers to. Then I took time to come up with much better answers. I combed through my mind to find examples that would better highlight my skillset. In addition to writing down answers to the questions I was asked in the phone screens, I collected some more generic technical interview questions from various websites and wrote down answers for those as well. &lt;/p&gt;

&lt;p&gt;I initially put all of this into a Google doc. The Google doc was great for getting my thoughts written down, but I wanted something that I could use repeatedly to prep. To achieve this I went back to my college days and used the tried and true study method of flash cards! I made flash cards with the questions on one side and my answers on the other. Then, like in school, I would run through the flash cards at the beginning of each week to make sure I had a quick recall of all the stories and highlights of my career. &lt;/p&gt;

&lt;p&gt;Even though the interview questions didn't always exactly match those on my flash cards, the flash cards helped remind me about the key points throughout my career. Those key points and experiences were easily transferable to many types of questions. For folks that are interested, I wrote a second post listing out all of the questions I used to prepare. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/molly" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMrAIHhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qARnw-JH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119473/4fe2a414-c5d4-4cfe-b9da-8b9da90fb5e6.jpg" alt="molly"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/molly/interview-prep-questions-5dha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Interview Prep Questions&lt;/h2&gt;
      &lt;h3&gt;Molly Struve (she/her) ・ Aug 18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#interviewing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#job&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#professional-interview-prep"&gt;
  &lt;/a&gt;
  Professional Interview Prep
&lt;/h2&gt;

&lt;p&gt;Before starting this process I looked into companies and websites that I could use for interview prep. I felt pretty confident in my coding ability, but wanted to learn more about the systems design portion that many interviews have. To fill this void I signed up for &lt;a href="https://www.tryexponent.com/"&gt;Exponent&lt;/a&gt;. Exponent is a bit pricey, but it was completely worth it for me. One nice aspect is that they have some free content available so you can see if it is right for you and what you want to accomplish. I only ended up subscribing to it for two months. &lt;/p&gt;

&lt;p&gt;I found their guide to SWE interviewing to have a lot of great information in it. One part that was crucial in helping me was the systems design section. I had never done a systems design interview before so I had no clue about how to approach one.&lt;/p&gt;

&lt;p&gt;Exponent had many examples of folks answering system design questions which gave me an idea of what a good answer included. They also had lots of literature about how to break down the system design questions and what to cover when answering them. Once again, I ended up making flash cards around system design question elements and ran through those periodically to keep myself sharp on that front. &lt;/p&gt;

&lt;p&gt;For more details on how to I tackled my system design interviews stay tuned for a follow up blog post. 😎  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-notes"&gt;
  &lt;/a&gt;
  Take Notes
&lt;/h2&gt;

&lt;p&gt;During your interviews take notes! Especially if you are interviewing at multiple companies, it can be very hard to keep them all straight. I have Google docs for each company I interviewed with that have extensive notes from each process. &lt;/p&gt;

&lt;p&gt;These docs contain everything from the questions I asked, to the background of each interviewer, to any feelings I felt during the interview. These notes were invaluable at the end of the process when it came to decision time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-yourself-30-min-before-each-interview"&gt;
  &lt;/a&gt;
  Give yourself 30 min before each interview
&lt;/h2&gt;

&lt;p&gt;Scheduling interviews around work can be challenging, but one thing I found is that scheduling in downtime right before is crucial to get yourself in the mental state to interview. My routine involved the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gather up my notes already compiled for the company and write down questions I wanted to ask&lt;/li&gt;
&lt;li&gt;Research the interviewers if I had their names&lt;/li&gt;
&lt;li&gt;Turn off all notifications and close Slack&lt;/li&gt;
&lt;li&gt;Open any necessary tools (code editor, whiteboard tool, etc)&lt;/li&gt;
&lt;li&gt;Go to the bathroom and grab some water &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.ted.com/10-examples-of-how-power-posing-can-work-to-boost-your-confidence/"&gt;Power pose&lt;/a&gt; for a min and then have a quick dance party to get rid of any last min nerves and pump myself up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last point is not for everyone, but for me, listening to some pump up music while dancing makes me feel really good about myself and gets me in a good headspace. I also listen to music before I compete with my horses to get in the zone which may be why it worked well in this scenario. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-it"&gt;
  &lt;/a&gt;
  Enjoy it!
&lt;/h2&gt;

&lt;p&gt;Once I got into that interview groove I started to really enjoy them. I got to meet some incredible engineers and people while solving some fun and interesting problems. A lot of the code interviews I did felt like I was working with colleagues. Yes, I was responsible for coming up with the solution, but during the process I shared so many good laughs with interviewers as we commiserated over a typo or trying to put together a regex. &lt;/p&gt;

&lt;p&gt;Maybe I got incredibly lucky and the 30+ people I met from the 6 companies I considered were all just really nice. Or, maybe some of it had to do with the mindset I went into these interviews with. &lt;/p&gt;

&lt;p&gt;Once I had settled into interviewing, I approached each interview with a collaborative mindset. I was there to learn about the company as much as they wanted to learn about me. This made me much more relaxed and open during the interview and I think my interviewers ended up mirroring that feeling. If you go into an interview like you are heading into battle, then it likely will be a battle for both sides. &lt;/p&gt;

&lt;p&gt;Even though I had to say no to many companies, they are still places I would have loved to work. I would recommend them to others in a heartbeat because of how much I enjoyed their interview process. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-luck"&gt;
  &lt;/a&gt;
  Good Luck!
&lt;/h2&gt;

&lt;p&gt;Interviewing is not easy. It is a full on side hustle when you decide to take it on. But it is worth it in the end! Your perfect next opportunity is out there, now you just have to find it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anything else you all want to know about my interviewing process? Drop any additional questions you may have in the comments 👇&lt;/em&gt;&lt;/p&gt;

</description>
      <category>interviewing</category>
      <category>job</category>
      <category>career</category>
    </item>
    <item>
      <title>Day 6: 100 days of code</title>
      <author>Gaurav-Shekhawat</author>
      <pubDate>Wed, 18 Aug 2021 20:08:23 +0000</pubDate>
      <link>https://dev.to/gauravshekhawat/day-6-100-days-of-code-4fob</link>
      <guid>https://dev.to/gauravshekhawat/day-6-100-days-of-code-4fob</guid>
      <description>&lt;p&gt;There will be less content today as I am busy with academics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-to-use-the-raw-flexwrapwrap-endraw-"&gt;
  &lt;/a&gt;
  Don't forget to use the &lt;code&gt;flex-wrap:wrap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In my last some of the projects, I have to change almost the entire code in media queries so that my website look good on an mobile device. This can be avoided to a great extent by using:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flex-wrap: wrap;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, use it wisely whenever needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-basics"&gt;
  &lt;/a&gt;
  Bootstrap Basics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap is a css library, which consists of code written by someone-else, taking care of all the styles and responsive web design. To use it in our projects, go to &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; and copy the css link inside of your html file.
&lt;/li&gt;
&lt;li&gt;To use any-functionality of bootstrap, just link bootstrap with your html, and then just specify in the class of your html tag, what you want to do with that element, among some classes given in bootstrap website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you want to design a warning button:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class = "btn btn-warning"&amp;gt;  Warning  &amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now practice and get your hands dirty ..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-column-model"&gt;
  &lt;/a&gt;
  Bootstrap column model
&lt;/h3&gt;

&lt;p&gt;This is a bootstrap way to make sure that our web-pages are mobile responsive. In this model, bootstrap divides its page into 12 distinct columns. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhpBe_Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heo7r87e6dw0pqj802m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhpBe_Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heo7r87e6dw0pqj802m2.png" alt="Bootstrap column model in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Large screen:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMzqjZXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb3ll9herhmmke7yk1h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMzqjZXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb3ll9herhmmke7yk1h9.png" alt="ON large scrren"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as we shrink the size of the screen down.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYcdnGmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efxefvi4fjtqbziahyae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYcdnGmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efxefvi4fjtqbziahyae.png" alt="On small screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap also let us specify how many columns should an div take, depending on the size of the screen as small or large. Here is the example:-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5sdyQfor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbc288dn811nezjt39s6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5sdyQfor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbc288dn811nezjt39s6.png" alt="IMage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This behaves as 4 div in 1 row on a large screen, and 2 div's in each row on a small screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzZDD2DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgmtf31aky2kedqthd0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzZDD2DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgmtf31aky2kedqthd0w.png" alt="large screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTL1EdTW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o21v8rvsfkjl65w1479v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTL1EdTW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o21v8rvsfkjl65w1479v.png" alt="small screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sass-inheritance"&gt;
  &lt;/a&gt;
  SASS inheritance
&lt;/h2&gt;

&lt;p&gt;Let's suppose we are designing 3 alert messages as below:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XGm6M1SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2hy2qn2vgm1jphwe0dl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XGm6M1SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2hy2qn2vgm1jphwe0dl.png" alt="alert pic"&gt;&lt;/a&gt;&lt;br&gt;
If we write it using nesting in sass, then in the output css, the code will be copyed in the css styling of all the alert, this will increase the size of our css to a large extent in long term. To solve this problem, we use inheritance. &lt;/p&gt;

&lt;p&gt;Hence, the better solution of the above problem will be :-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ49nifm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xtplroh1k051hsf4k8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ49nifm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xtplroh1k051hsf4k8t.png" alt="better code using inheritance"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>bootstrap</category>
    </item>
  </channel>
</rss>
