<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Quick start with Tailwind CSS</title>
      <author>Rishi Verma</author>
      <pubDate>Sat, 24 Apr 2021 20:37:24 +0000</pubDate>
      <link>https://dev.to/thecoderishi/quick-start-with-tailwind-css-334n</link>
      <guid>https://dev.to/thecoderishi/quick-start-with-tailwind-css-334n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-configuring-tailwind-css-without-using-postcss-plugin"&gt;
  &lt;/a&gt;
  1. Configuring Tailwind CSS without using PostCSS plugin
&lt;/h1&gt;

&lt;h6&gt;
  &lt;a href="#make-a-folder-with-any-name-and-open-the-folder-path-in-the-terminal-you-can-use-vs-code-builtin-terminal"&gt;
  &lt;/a&gt;
  Make a folder with any name and open the folder path in the terminal (You can use VS Code built-in terminal).
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;package.json&lt;/strong&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//default options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install tailwind CSS using npm
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Autoprefixer
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="c1"&gt;//For different browsers support&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a folder name &lt;strong&gt;public&lt;/strong&gt;, inside public folder create a file named &lt;strong&gt;index.html&lt;/strong&gt; and create another folder named &lt;strong&gt;src&lt;/strong&gt; , inside src folder create a file named &lt;strong&gt;tailwind.css&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#your-file-structure-should-look-like-this"&gt;
  &lt;/a&gt;
  Your file structure should look like this
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── tailwindcss
│   ├── public
│   │   ├── index.html
│   ├── src
│   │   ├── tailwind.css
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;src/tailwind.css&lt;/strong&gt; and copy-paste below code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;/* Write Custom CSS */&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a &lt;strong&gt;build&lt;/strong&gt; scrip which compiles the src/tailwind.css and make actual compiled css inside the public folder, open &lt;strong&gt;package.json&lt;/strong&gt; file and copy-paste below code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss build ./src/tailwind.css -o ./public/tailwind.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run build script
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#this-will-generate-compiled-css-inside-the-public-folder-and-link-this-css-in-your-indexhtmlnote-dont-modify-compiled-css"&gt;
  &lt;/a&gt;
  This will generate compiled css inside the public folder, and link this css in your &lt;strong&gt;index.html&lt;/strong&gt;(&lt;strong&gt;Note&lt;/strong&gt;: Don't modify compiled css)
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#customize-tailwind-css-config"&gt;
  &lt;/a&gt;
  Customize tailwind CSS Config
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First create tailwind config file with the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#it-will-generate-tailwindconfigjs"&gt;
  &lt;/a&gt;
  It will generate &lt;strong&gt;tailwind.config.js&lt;/strong&gt;
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;strong&gt;talwind.config.js&lt;/strong&gt; you can define your own custom property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after changing &lt;strong&gt;talwind.config.js&lt;/strong&gt; again you need to run build script&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compress-size-of-tailwindcssproduction-ready"&gt;
  &lt;/a&gt;
  Compress size of tailwind.css(Production ready)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;NODE_ENV&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;package.json&lt;/strong&gt; file add the following script which reduces the compiled css (It will remove unused classes)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NODE_ENV=production npx tailwindcss build ./src/tailwind.css -o ./public/tailwind.css“
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;tailwind.config.js&lt;/strong&gt; file add the following line in purg.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now you can make production ready css, run the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-configuring-tailwind-css-without-as-postcss-plugin"&gt;
  &lt;/a&gt;
  2. Configuring Tailwind CSS without as PostCSS plugin
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Create &lt;strong&gt;package.json&lt;/strong&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;//default options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install tailwind CSS using npm
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Autoprefixer
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="c1"&gt;//For different browsers support&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install PostCSS-CLI Plugin
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a folder name &lt;strong&gt;public&lt;/strong&gt;, inside public folder create a file named &lt;strong&gt;index.html&lt;/strong&gt; and create another folder named &lt;strong&gt;src&lt;/strong&gt; , inside src folder create a file named &lt;strong&gt;tailwind.css&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#your-file-structure-should-look-like-this"&gt;
  &lt;/a&gt;
  Your file structure should look like this
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── tailwindcss
│   ├── public
│   │   ├── index.html
│   ├── src
│   │   ├── tailwind.css
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;src/tailwind.css&lt;/strong&gt; and copy-paste below code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;/* Write Custom CSS */&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a &lt;strong&gt;build&lt;/strong&gt; scrip which compiles the src/tailwind.css and make actual compiled css inside the public folder, open &lt;strong&gt;package.json&lt;/strong&gt; file and copy-paste below code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss build ./src/tailwind.css -o ./public/tailwind.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run build script
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#this-will-generate-compiled-css-inside-the-public-folder-and-link-this-css-in-your-indexhtmlnote-dont-modify-compiled-css"&gt;
  &lt;/a&gt;
  This will generate compiled css inside the public folder, and link this css in your &lt;strong&gt;index.html&lt;/strong&gt;(&lt;strong&gt;Note&lt;/strong&gt;: Don't modify compiled css)
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#customize-tailwind-css-config"&gt;
  &lt;/a&gt;
  Customize tailwind CSS Config
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First create tailwind config file with the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;tailwindcss&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#it-will-generate-tailwindconfigjs"&gt;
  &lt;/a&gt;
  It will generate &lt;strong&gt;tailwind.config.js&lt;/strong&gt;
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;strong&gt;talwind.config.js&lt;/strong&gt; you can define your own custom property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after changing &lt;strong&gt;talwind.config.js&lt;/strong&gt; again you need to run the build script&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compress-size-of-tailwindcssproduction-ready"&gt;
  &lt;/a&gt;
  Compress size of tailwind.css(Production ready)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;NODE_ENV&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;package.json&lt;/strong&gt; file add the following script which reduces the compiled css (It will remove unused classes)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NODE_ENV=production npx tailwindcss build ./src/tailwind.css -o ./public/tailwind.css“
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;tailwind.config.js&lt;/strong&gt; file add the following line in purg.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now you can make production ready css, run the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>👨‍🔬 Why The DOM Causes Negative Enthalpy! - Learning Frontend Deeply - Part 2</title>
      <author>MirAli Mobasheri</author>
      <pubDate>Sat, 24 Apr 2021 20:23:11 +0000</pubDate>
      <link>https://dev.to/alimobasheri/why-the-dom-causes-negative-enthalpy-learning-frontend-deeply-part-2-1k8n</link>
      <guid>https://dev.to/alimobasheri/why-the-dom-causes-negative-enthalpy-learning-frontend-deeply-part-2-1k8n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-should-you-care-about-the-dom-and-the-negative-enthalpy"&gt;
  &lt;/a&gt;
  Why Should You Care About The DOM And The Negative Enthalpy?
&lt;/h1&gt;

&lt;p&gt;In the first part of this series, we learned that &lt;code&gt;HTML&lt;/code&gt; is a &lt;code&gt;Markup Language&lt;/code&gt; destined to create documents. We now know that this document is much like a paper one. We can use different elements and layout systems in HTML to shape our ideal document layout.&lt;br&gt;
But still, there's a question. If it's only about documents, then humans have been able to create them thousands of years ago. Documents can be carved on stone, painted on papyruses, and written on paper.&lt;br&gt;
So while &lt;code&gt;HTTP&lt;/code&gt; facilitates the document's sharing around the world, there's one important thing that a webpage needs to be capable of to ultimately become superior to a simple document. &lt;/p&gt;

&lt;p&gt;And it is the ability to update data in real-time, in response to user interactions and different events. This feature makes documents interactive and pushes the limit of the traditional documents which could never be edited or updated. And especially this is one of the main skills every frontend developer should acquire.&lt;/p&gt;

&lt;p&gt;Throughout this article, we are going to learn about the &lt;code&gt;Document Object Model&lt;/code&gt; abbreviated as the &lt;code&gt;DOM&lt;/code&gt;. In the last part, we learned about the &lt;strong&gt;Document&lt;/strong&gt;, now we'll try to figure out what an &lt;strong&gt;Object&lt;/strong&gt; is and how the &lt;code&gt;DOM&lt;/code&gt; implements the &lt;strong&gt;Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But we're not going down a straightforward path. We're going to learn about some basic theories of computer programming. This includes variables, objects, collections, compilers and etc. This is because I want to show you how in the end all of these theories shape the internal functionalities of a web frontend application.&lt;br&gt;
This is somewhat like how we're introduced to Christopher Nolan's Tenet. It's going to show you some theories and in the end, you are going to face it all in real action. Then let's dive deeper!&lt;/p&gt;

&lt;p&gt;First questions first...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  🏍️ What Is An Object?
&lt;/h2&gt;

&lt;p&gt;While a motorcycle has two wheels, a car holds four. Both are &lt;strong&gt;objects&lt;/strong&gt;. Each with its traits. These traits could vary in numerous ways.&lt;/p&gt;

&lt;p&gt;The comparison we made identifies the difference in the count of common property in two distinct objects.&lt;br&gt;
A contrasting case is the observation of a hen and a motorcycle. Both can move. And while the hen utilizes its legs for this purpose, the other uses its wheels. The movement &lt;strong&gt;action&lt;/strong&gt; is possible for both of them, but they do so using quite different &lt;strong&gt;tools&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;❗ In terms of programming, we can express the actions as &lt;strong&gt;Methods&lt;/strong&gt; and the tools as &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, the main element in Object Definition is that &lt;strong&gt;a set of traits shape the object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By knowing what an object definition is, let's move on to how a document is defined by it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object-model"&gt;
  &lt;/a&gt;
  🌴 What is an object model?
&lt;/h2&gt;

&lt;p&gt;C is a programming language. So is C++. Both are known as semi-low-level languages. This means you'll need to write thousands of lines of code to make a simple program work. But in exchange, their programs run at higher speeds. Because by writing code in a low-level language the system needs less translation of your code to understand what you're trying to assemble.&lt;/p&gt;

&lt;p&gt;But there is a major difference between the two languages we talked about earlier. C++ is an object-oriented version of C. What does this mean?&lt;br&gt;
This means that we can define objects in C++ programs which possess their own traits and actions. &lt;/p&gt;

&lt;p&gt;Let's define object orientation in smaller chunks. That'll make it easier for you to grasp the idea if you don't already know about it. &lt;/p&gt;

&lt;p&gt;First, let's begin with a simple thing; Value. That's what every program is about!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hey-pc-take-this-2"&gt;
  &lt;/a&gt;
  2️⃣ Hey PC, Take This 2!
&lt;/h3&gt;

&lt;p&gt;In a program, every value is stored in a part of the memory. This value is identified by a reference. A reference is a specific number that addresses a location in the memory that holds a specific value.&lt;/p&gt;

&lt;p&gt;This referencing can be suitable for performing actions like computing. For example, if you want to calculate the sum of 2 and 3, you have to store these values in the system and then give the system the program by which it should add these two numbers. &lt;br&gt;
A reference to the value 2 could be a number like 2452123 and a reference to the value 3 could be another number like 7892392. &lt;/p&gt;

&lt;p&gt;The system can manage these references easily. But it would be hard for a human to work with them. We'll easily forget which reference points to which value. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#call-my-2-ey"&gt;
  &lt;/a&gt;
  🤙 Call My 2, Ey!
&lt;/h3&gt;

&lt;p&gt;A variable is simply a name we give the reference to a value. In the last paragraph, we said that in an exemplary system a reference to number 2 is 2452123. &lt;br&gt;
Now, what if we told the system that we want this reference to be called &lt;code&gt;a&lt;/code&gt;; so that every time we had to point to this number we simply give its name and the system retrieves the value for us?&lt;/p&gt;

&lt;p&gt;
  How variables resemble humans' memory. (Click to learn more.)
  &lt;p&gt;This behavior is close to how we humans store different data in our minds. For example, when we want to refer to a long fruit with a yellow cover, we say banana. The value was retrieved!&lt;/p&gt;

&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hey-pc-repeat-after-me-ey-equals-2"&gt;
  &lt;/a&gt;
  🎙️ Hey PC, Repeat After Me: Ey equals 2!
&lt;/h3&gt;

&lt;p&gt;Fortunately, most of the programming languages manage this for us. &lt;br&gt;
Here's how we define a variable in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code block, we've declared two values, stored them in memory, and given them a custom name for their references. Thus if we wanted to add these numbers we simply tell the system: &lt;code&gt;add a and b&lt;/code&gt;.&lt;br&gt;
In JavaScript it's written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  What happened in this code block?(click to learn more)
  &lt;p&gt;Here, in a single line, we've performed three actions. First, we've retrieved the two values 2 and 3 from the memory, by calling their names. Then, we've added these two numbers which result in a new value, 5. Next, the new value is stored in the memory and its reference is given a name; &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;Well, we gave the references a name. But what does it have to do with Object-Orientation?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thing-or-the-object"&gt;
  &lt;/a&gt;
  ⛏️ The Thing, or The Object?
&lt;/h3&gt;

&lt;p&gt;So far, we've only defined simple variables. These may be the basics of programming, but they are insufficient for a more advanced program.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metal is one of the most useful materials in construction but by giving a fair look at the world around you, it's easy to conclude that buildings aren't just made of metals. They're assembled of glasses, metals, concrete, etc. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same observance applies to a program. It's never made of single values. But rather a collection of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#person-1-person-2-person-3"&gt;
  &lt;/a&gt;
  👨‍👩‍👧‍👦 [Person 1, Person 2, Person 3]
&lt;/h3&gt;

&lt;p&gt;You know people by their names, phone numbers, looks, jobs, and much more. Perhaps you know a lot of people. Hundreds of names could be familiar to you. &lt;/p&gt;

&lt;p&gt;Indeed you have got a collection of information in your memory. A collection of names, or a collection of different brands. All in all, collections are the main way of information storage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes collections suitable for this purpose is their flexibility and simplicity in integration. You can easily search, sort, filter, or manipulate a collection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  📊 Data Structures
&lt;/h3&gt;

&lt;p&gt;Probably, algorithms are familiar to you. If not, you can think of the following text as an algorithm:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Go to the kitchen. Search the cabinets for the red pepper can. If found, swallow the whole can's content. If not, go to the freezer. Take out all the ices in it and swallow them one by one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, an algorithm is a set of step-to-step commands. Computer programs are instructed using these algorithms.&lt;/p&gt;

&lt;p&gt;Let's think about the sum program which we previously wrote using the variables. Its algorithm is straightforward. Take the first number and add it to the second one. Store the result in a new memory location.&lt;/p&gt;

&lt;p&gt;But is there a collection too?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  🔢 Arrays
&lt;/h3&gt;

&lt;p&gt;Sometimes you need to store different values as a group. Like a list of different versions of a sentence. You can store each value in a separate variable but that's not the ideal way. Because for instance, if you are required to iterate over the list and find a specific version, you'll have to check each value manually to find out whether it's the wanted value or not.&lt;/p&gt;

&lt;p&gt;Arrays come to help.&lt;br&gt;
An array is indeed a list of memory addresses. Of course, these memory addresses refer to values. But its difference with a normal reference is that it can be indexed. &lt;/p&gt;

&lt;p&gt;
  What is indexing? And how does an array work? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simply it's like when you are looking at a list of different versions of a sentence and you ask your colleague about which version he likes the most and he responds: 'The &lt;strong&gt;third&lt;/strong&gt; one!'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So, the keyword here is &lt;code&gt;third&lt;/code&gt;.&lt;br&gt;
Now if we wanted to represent the version history list in a JavaScript array, it would look like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A sentence.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beautifully written sentence.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Da Funny Sendenze!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;To access the second sentence and store it in a new variable the following line of JavaScript suffices:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;theDesiredSentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In JavaScript arrays are indexed from 0 which means that the first element's index is 0 and the nth element's index is &lt;code&gt;n-1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;The array is a very simple collection. But remember when we talked about the calculation program. It didn't consist of any arrays. Perhaps we could use an array of numbers and write a program to calculate the sum of all of the numbers in the array. But that's not what we're trying to do right now.&lt;/p&gt;

&lt;p&gt;The question was whether, in that simple program, a collection existed or not. Now, none of the values were collections, but in reality, the whole program is a collection.&lt;/p&gt;

&lt;p&gt;Why is that?🧐&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#program-compilation"&gt;
  &lt;/a&gt;
  🔁 Program Compilation
&lt;/h3&gt;

&lt;p&gt;Every program written in a language has to be compiled into machine language to act as fast as possible. The machine language is the most direct one, but having the lowest level among the programming languages, it's not possible for programmers to easily interact with it.&lt;br&gt;
The nerds' solution to this problem has been the development of higher-level programming languages. Yes, even C++ has a higher level in comparison to that of Assembly.&lt;/p&gt;

&lt;p&gt;Still, there's a matter to reflect upon. If communication with machines is difficult then how comes the compilers do it and turn huge chunks of code into machine-readable ones?&lt;/p&gt;

&lt;p&gt;To understand the mechanism you can think of yourself trying to speak a foreign language, how will you manage it? &lt;br&gt;
First, you will create mental models.&lt;/p&gt;

&lt;p&gt;What is the mental model? It's the concept or the meaning of what you are trying to translate.&lt;/p&gt;

&lt;p&gt;How is a mental model designed? Suppose you want to tell a foreigner that his face is burning. What is the concept behind this sentence? A face that belongs to that person is melting due to contact with heat? &lt;br&gt;
But what is the context? Perhaps you and the other person are trapped inside a burning house and you are screaming at him to warn him that his face is burning. Or maybe you are pushing his face into boiling water and joyously shouting: "Ha! Ha! Ha! Your face is burning!"&lt;/p&gt;

&lt;p&gt;Do you see? Different contexts. Different tones. Different sentence structures.&lt;/p&gt;

&lt;p&gt;Now how are these related to a compiler's task? Well first of all it gathers every value in your program. These values are like the meanings of every single word. Next, it tries to shape a model of your values. This model is shaped from the different scopes inside a program code. &lt;br&gt;
Scopes are different blocks of code inside a program. These blocks contain standalone logics, which can perform independently of other parts of the code. Sure most of the time the blocks will use variables defined in other scopes or passed as arguments.&lt;/p&gt;

&lt;p&gt;The compiler will look for the various blocks present in a code to shape its model. These blocks will help in maintaining the levels of the model. Previously we learned about arrays which are the most common forms of collections, but the ones we spoke about were only one-dimensional. However, in cases in which we need to specify a collection of groups of values, we can simply nest arrays inside each other.&lt;/p&gt;

&lt;p&gt;In JavaScript a nested array might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nestedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code example, the &lt;code&gt;nestedArray&lt;/code&gt; variable could be a model of various values organized in different blocks. Like &lt;code&gt;block 0&lt;/code&gt; and &lt;code&gt;block 1&lt;/code&gt; and so on. This way the compiler will know what block each value belongs to. So if somewhere in your code you try to call a value that isn't available in the corresponding block, the compiler will throw an error.&lt;/p&gt;

&lt;p&gt;A nested array might be a good example to illustrate a collection model, but not perfect for such a case as a compiler's model. Because arrays are just a group of values in a specific order.&lt;/p&gt;

&lt;p&gt;Thus, the programmers have designed various types of data structures that can be used to implement collections in a useful way. Examples of these data structures include linked lists, queues, stacks, graphs, and hash tables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-data-structure-does-a-compiler-use"&gt;
  &lt;/a&gt;
  What Data Structure Does A Compiler Use?
&lt;/h3&gt;

&lt;p&gt;Compilers mainly use &lt;code&gt;Symbol Tables&lt;/code&gt; as their primary data structure. &lt;br&gt;
A &lt;code&gt;Symbol Table&lt;/code&gt; is a symbolized collection of data. Don't panic if this doesn't make sense to you, we're going to learn it in more detail.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-does-symbolized-mean"&gt;
  &lt;/a&gt;
  ⚛️ What does symbolized mean?
&lt;/h4&gt;

&lt;p&gt;Remember when we talked about variables? &lt;br&gt;
We stored a value in the memory and then gave it a name. So each variable in a program is made of a group of information that includes: &lt;code&gt;memory reference&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;attribute&lt;/code&gt;.&lt;br&gt;
Using these properties, the compiler can store what information it requires about a particular variable in a single symbol and then implement these symbols into a bigger model which represents the code blocks and scopes, using a data structure.&lt;/p&gt;

&lt;p&gt;A representation of &lt;code&gt;Symbol Tables&lt;/code&gt; could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;symbol&lt;/span&gt; &lt;span class="err"&gt;name,&lt;/span&gt; &lt;span class="err"&gt;type,&lt;/span&gt; &lt;span class="err"&gt;attribute&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#details-what-are-the-type-and-the-attribute-click-to-learn-more"&gt;
  &lt;/a&gt;
  
  What are the type and the attribute? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;JavaScript is a dynamically typed language, which means that you don't have to strictly define a variable's type. But under the hood, each value owns a type. There are several built-in types like objects, strings, numbers, etc.&lt;/li&gt;
&lt;li&gt;These types declare the intrinsic behavior of the variables. So in a &lt;code&gt;Symbol Table&lt;/code&gt;, each value holds a type declaration.
The attribute is another unpopular term in JS. In languages like Java, keywords such as &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; exist that can be used in a variable declaration to indicate in what context the variable can be used. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are the two attributes that can be used in JS. For instance, using the &lt;code&gt;const&lt;/code&gt; attribute clarifies for the compiler that the variable can't be assigned a new value after its initial declaration.&lt;/li&gt;
&lt;/ul&gt;




&lt;/h4&gt;
&lt;p&gt;What data structure a compiler uses for shaping the code blocks, can vary between &lt;code&gt;Linear Lists&lt;/code&gt;, &lt;code&gt;Binary Search Tree&lt;/code&gt;, and &lt;code&gt;Hash Tables&lt;/code&gt; based on the compiler's architect.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#is-a-data-structure-enough-for-a-compiler-to-get-its-job-done"&gt;
  &lt;/a&gt;
  💼 Is a data structure enough for a compiler to get its job done?
&lt;/h4&gt;

&lt;p&gt;The short answer is no. &lt;br&gt;
The long answer is that a data structure is only a model that makes data available to you. It exposes no methods to work with the data. It's barely a skeleton of data. &lt;br&gt;
A skeleton doesn't move by itself. It can take no action. A body needs muscles to be able to handle its skeleton for good use.&lt;br&gt;
Hence the compiler uses its own built-in methods to work with the data that is exposed to it through the symbols.&lt;/p&gt;

&lt;p&gt;
  How is this data structure is similar to a database? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;Each symbol is an &lt;code&gt;entry&lt;/code&gt; and each code block is called a &lt;code&gt;block&lt;/code&gt;. You could think of a symbol table as a database. Indeed I can relate to this personally since I'm currently working on the development of a web-based database management application for the place I work at.&lt;/li&gt;
&lt;li&gt;Each cell in a database table is like an &lt;code&gt;entry&lt;/code&gt;. A cell can be a text, a number, a date, and many more fields. Each of these fields has its own type and attributes.
Each table can also be divided into different phases with each phase having its own rows of entries.&lt;/li&gt;
&lt;li&gt;But a database management application isn't made up of just entries and phases. It's also about the ordering of data, its aggregation, editing, inserting, removing, validating and etc.&lt;/li&gt;
&lt;li&gt;Each of these functionalities can also be generalized to how a compiler commonly behaves with a symbol table.
&lt;/li&gt;
&lt;/ul&gt;



&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  ⁉️ What now?
&lt;/h3&gt;

&lt;p&gt;This was a long read, but not a useless one. We have learned about the program's compilation progress, and we've come to acknowledge what a data structure is and how an object is defined.&lt;br&gt;
Now, it's time to get back on track and learn how a Document's Object Model is implemented.&lt;/p&gt;

&lt;p&gt;But first, let's take a few seconds and think about the answer to a fundamental question of the frontend area.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-html-a-data-structure-or-is-it-an-object"&gt;
  &lt;/a&gt;
  🤷‍♂️ Is HTML a Data Structure or is it an Object?
&lt;/h4&gt;

&lt;p&gt;It's tempting to say that HTML is an &lt;code&gt;object&lt;/code&gt; since it possesses traits like a &lt;code&gt;body&lt;/code&gt; or a &lt;code&gt;head&lt;/code&gt; or a &lt;code&gt;title&lt;/code&gt;. These may sound like traits being defined for an object.&lt;br&gt;
But they're not and HTML is definitely not an &lt;code&gt;Object&lt;/code&gt;. It's a &lt;code&gt;Data Structure&lt;/code&gt;. All that HTML does is expose data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Indeed you the developer who writes the HTML are exposing this data to the browser. Using the document structure which we talked about in the last part, you were doing the compiler's job. &lt;br&gt;
Oh, yes! Perhaps you have written several HTML documents, or maybe you're an experienced one, and using the HTML markup has been a daily job for you. But you have never thought that you were indeed writing a pre-compile file. That you were doing the programming process with a negative enthalpy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds crazy and sounds like what Christopher Nolan introduced in his 2020 movie; Tenet.&lt;/p&gt;

&lt;p&gt;You have come a long way to reach this point, and perhaps you are tired or you think this article will be useless. Yeah, I know! This idea is turning around your head that I've been mocking you all the time. That compilers and data structures and the Object Orientation have got nothing to do with a simple HTML.&lt;br&gt;
But be patient my dear reader. From now things only get better. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkTC8oAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv5tsk8fdz7dc6vxh75w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkTC8oAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv5tsk8fdz7dc6vxh75w.gif" alt="A fight scene in Tenet"&gt;&lt;/a&gt;&lt;br&gt;
After all, what do you expect from a Nolanish idea?😎&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPOILER FREE&lt;/strong&gt;: I'm not going to spoil anything from the movie's plot. The negative enthalpy theory is something you learn very early in the movie. So enjoy the article!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#but-how-is-the-negative-enthalpy-happening"&gt;
  &lt;/a&gt;
  🔀 But how is the negative enthalpy happening?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A chemical reaction with a negative enthalpy is one that loses energy throughout the process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might sound too theoric but we can interpret it in our subject as such:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we code a program and the compiler turns it into an executable file, we're keeping energy by doing less work by ourselves. The compiler is the one that handles the hassle of translating our code to machine-readable programs. Now, when we write HTML, we're losing energy. Because we're doing a part of the compiler's job which is creating a &lt;code&gt;data structure&lt;/code&gt;. We're doing more job to model the fine Document Structure for our purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But the &lt;code&gt;Data Structure&lt;/code&gt; isn't the only thing that the compiler creates. There was actually a need for different methods to be able to work with this data. &lt;br&gt;
This is where the &lt;code&gt;Document Object Model&lt;/code&gt; comes into play. And to no surprise, this time we're going to work with &lt;code&gt;objects&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-are-my-methods"&gt;
  &lt;/a&gt;
  🗜️ Where are my methods?
&lt;/h3&gt;

&lt;p&gt;So, you give the browser all the data necessary in your document, organized into nested structures, according to your desired layout, and expect the magic to happen. &lt;br&gt;
But that's not what every application is about. Is it? Nowadays web applications are more than just scientific documents. They're about &lt;code&gt;Interactive Interfaces&lt;/code&gt; which respond to user interaction. &lt;/p&gt;

&lt;p&gt;Documents get updated, changed, inspected, animated, styled, and manipulated in real-time. If you think of the &lt;code&gt;HTML Document&lt;/code&gt; as the &lt;code&gt;Symbol Table&lt;/code&gt; then by using the &lt;code&gt;DOM Methods&lt;/code&gt; to work with this data structure and to change it, you are doing the compiler's job. &lt;br&gt;
Because you are managing the available data structures and methods to output your desired program. &lt;/p&gt;

&lt;p&gt;But there is one important difference. The compiler compiles once, you do it many times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;p&gt;Originally this post was intended to have full coverage of all the methods that the &lt;code&gt;DOM&lt;/code&gt; avails us with. But tonight I decided that writing such a long article might not be a wise move and might result in the dear readers' attention loss.&lt;/p&gt;

&lt;p&gt;So our long journey comes to a pause with the knowledge that the management of a frontend application is like a real-time compilation. In the next part, we'll learn about the &lt;code&gt;DOM&lt;/code&gt;'s methods and compare each of them with what a compiler does.&lt;/p&gt;

&lt;p&gt;The next part is more like an action ride through how updating a document's different parts, results in different states, and perhaps Tenets!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdWo2J7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zid3nf9xdcmn07tleib.GIF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdWo2J7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zid3nf9xdcmn07tleib.GIF" alt="Tenet gif. Pattinson: What the hell happened here? Washington: It hasn't happened yet."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I expect the next part to be released faster than this one. Since most of it is already written!😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End!
&lt;/h3&gt;

&lt;p&gt;And don't forget to give me feedback. I'm trying to bring new ideas into this series and like everyone else my ideas have their own flaws too. So I would be glad to hear what you think!😅&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to make GitHub more Productive?</title>
      <author>Filly Agioro</author>
      <pubDate>Sat, 24 Apr 2021 19:33:41 +0000</pubDate>
      <link>https://dev.to/fillyagioro/how-to-make-github-more-productive-19fg</link>
      <guid>https://dev.to/fillyagioro/how-to-make-github-more-productive-19fg</guid>
      <description>&lt;p&gt;In this post, I am going to talk about how to make your GitHub workflow faster, smoother, and more productive with these few tricks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-github-repository"&gt;
  &lt;/a&gt;
  Make .github repository
&lt;/h1&gt;

&lt;p&gt;Most people don't use this but it pretty useful. First should make a repository named &lt;code&gt;.github&lt;/code&gt; then start making these files &lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;, &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;, &lt;code&gt;FUNDING.yml&lt;/code&gt;, &amp;amp; &lt;code&gt;SUPPORT.md&lt;/code&gt;. Now when you open your other repositories of your own you will see that it showing the &lt;code&gt;.github&lt;/code&gt; repository file content there also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_aPlzKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p20kv6eb4a1jqrfl75v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_aPlzKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p20kv6eb4a1jqrfl75v.png" alt="Helpful Links"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does this file do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;: A code of conduct defines standards for how to engage in a community.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;: This file, in your open source repository or site, provides potential project contributors with a short guide to how they can help with your project or study group.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FUNDING.yml&lt;/code&gt;: By adding this file you show your sponsor button in your repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you don't have to go to every repo to edit these files you can it one's and done for the day. If you don't want to do these then you can fork or download my repo also.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FillyAgioro"&gt;
        FillyAgioro
      &lt;/a&gt; / &lt;a href="https://github.com/FillyAgioro/.github"&gt;
        .github
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Default files for Projects
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#make-a-template-for-issues-and-pull-request"&gt;
  &lt;/a&gt;
  Make a template for Issues and Pull Request
&lt;/h1&gt;

&lt;p&gt;Make your contributor's experience more smoother with templates. By making issues and pull request templates your contributors don't have to write the whole thing also. Reading the issues and pull requests will easier because it will be formatted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvJZAk4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bh1ymjcs1adaat9u84w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvJZAk4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bh1ymjcs1adaat9u84w.png" alt="Repo issues template name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irfpd32S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rel6j21eukdtggwquft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irfpd32S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rel6j21eukdtggwquft.png" alt="Repo issues template insides"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to make a template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your &lt;code&gt;.github&lt;/code&gt; repo.&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;.github&lt;/code&gt; folder inside it.&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;ISSUE_TEMPLATE&lt;/code&gt; inside &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; folder make &lt;code&gt;bug_report.md&lt;/code&gt;, &lt;code&gt;feature_request.md&lt;/code&gt; or you can make other topic files by your choice.nd &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; folder inside &lt;code&gt;.github&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;ISSUE_TEMPLATE&lt;/code&gt; folder make &lt;code&gt;bug_report.md&lt;/code&gt;, &lt;code&gt;feature_request.md&lt;/code&gt; or you can make other topic files by your choice.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; folder make &lt;code&gt;pull_request_template.md&lt;/code&gt; or you can make other topic files by your choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see how it look go to my repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FillyAgioro"&gt;
        FillyAgioro
      &lt;/a&gt; / &lt;a href="https://github.com/FillyAgioro/.github"&gt;
        .github
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Default files for Projects
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#make-a-template-repo"&gt;
  &lt;/a&gt;
  Make a template repo
&lt;/h1&gt;

&lt;p&gt;In template repo, you only have to make two files you make more of them also but mostly you need &lt;code&gt;README.md&lt;/code&gt; &amp;amp; &lt;code&gt;LICENSE&lt;/code&gt; if you use a default license for your projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KB5lcK54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua4wxcrw7o0jfxaab1eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KB5lcK54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua4wxcrw7o0jfxaab1eb.png" alt="Template repository Option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make repo a template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the repo that you want to make the template.&lt;/li&gt;
&lt;li&gt;Go to Settings.&lt;/li&gt;
&lt;li&gt;And tick ☑ the &lt;em&gt;Template repository&lt;/em&gt; option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#template-readme"&gt;
  &lt;/a&gt;
  Template Readme
&lt;/h1&gt;

&lt;p&gt;Make a structured readme so the reader will easily find the content he/she needed and also you don't have to look on a blank page every time you write a readme file. In this way, you know what and where to write. It also makes everything more beautiful to look at.&lt;/p&gt;

&lt;p&gt;Here the Structured Readme made by me:-&lt;br&gt;
&lt;a href="https://github.com/FillyAgioro/template/blob/master/README.md"&gt;https://github.com/FillyAgioro/template/blob/master/README.md&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-fork-too-many-repositories"&gt;
  &lt;/a&gt;
  Don't fork too many repositories
&lt;/h1&gt;

&lt;p&gt;Don't fork too many repositories if you are not contributing or doing something with it. How you are going to delete it first?. If you some easy way to delete it then do it but don't do it if you not don't something useful with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-have-any-questions-ask-me-in-the-comment-or-%E2%99%A5-the-post"&gt;
  &lt;/a&gt;
  If you have any questions ask me in the comment or ♥ the post.
&lt;/h2&gt;

</description>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tap Response Time: Jetpack Navigation 🗺</title>
      <author>Py ⚔</author>
      <pubDate>Sat, 24 Apr 2021 19:27:34 +0000</pubDate>
      <link>https://dev.to/pyricau/tap-response-time-jetpack-navigation-4738</link>
      <guid>https://dev.to/pyricau/tap-response-time-jetpack-navigation-4738</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Header image: &lt;em&gt;Surf&lt;/em&gt; &lt;a href="https://www.flickr.com/photos/romainguy/14889089000/"&gt;by Romain Guy&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In &lt;a href="https://dev.to/pyricau/android-vitals-tap-response-time-19mj"&gt;Android Vitals - Tap Response Time 👉&lt;/a&gt; we established that the naive approach to measuring &lt;em&gt;Tap Response Time&lt;/em&gt; isn't accurate and doesn't scale. Today we'll build a better implementation step by step, on top Jetpack Navigation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%97%BA-navigation-library"&gt;
  &lt;/a&gt;
  🗺 Navigation library
&lt;/h3&gt;

&lt;p&gt;We'll focus on &lt;a href="https://developer.android.com/guide/navigation"&gt;Jetpack Navigation&lt;/a&gt; here, however most of the content applies for any navigation library or tap action. In fact, I first implemented this at Square on top of &lt;a href="https://github.com/square/flow"&gt;Flow&lt;/a&gt; and &lt;a href="https://github.com/square/workflow-kotlin/"&gt;Workflow&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#advanced-navigation-sample"&gt;
  &lt;/a&gt;
  Advanced Navigation Sample
&lt;/h1&gt;

&lt;p&gt;We'll implement the &lt;em&gt;Tap Response Time&lt;/em&gt; measurement inside the &lt;a href="https://github.com/android/architecture-components-samples/tree/main/NavigationAdvancedSample"&gt;Advanced Navigation Sample&lt;/a&gt; and focus on the navigation from the &lt;a href="https://github.com/android/architecture-components-samples/blob/main/NavigationAdvancedSample/app/src/main/java/com/example/android/navigationadvancedsample/homescreen/Title.kt#L37-L39"&gt;Title screen to the About screen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-K_4z9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azwon04dn3kyjg9iyht4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-K_4z9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azwon04dn3kyjg9iyht4.png" alt="Navigation sample"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;aboutButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;findNavController&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_title_to_about&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#from-tap-to-render"&gt;
  &lt;/a&gt;
  From Tap to Render
&lt;/h1&gt;

&lt;p&gt;What happens exactly when we click on the about button?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-thread-tracing"&gt;
  &lt;/a&gt;
  Main thread tracing
&lt;/h2&gt;

&lt;p&gt;To figure that out, we enable Java method tracing while clicking on the button :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WN_8ZPn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/200yjd1b1qhagbp0f3pu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WN_8ZPn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/200yjd1b1qhagbp0f3pu.png" alt="Java Method Sampling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;MotionEvent.ACTION_UP&lt;/code&gt; event is dispatched and a click is posted to the main thread.&lt;/li&gt;
&lt;li&gt;The posted click runs, the click listener calls &lt;code&gt;NavController.navigate()&lt;/code&gt; and a fragment transaction is posted to the main thread.&lt;/li&gt;
&lt;li&gt;The fragment transaction runs, the view hierarchy is updated, and a view traversal is scheduled for the next frame on the main thread.&lt;/li&gt;
&lt;li&gt;The view traversal runs, the view hierarchy is measured, laid out and drawn.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What happens after step 4?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systrace"&gt;
  &lt;/a&gt;
  Systrace
&lt;/h2&gt;

&lt;p&gt;We get a better high level view with systrace:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXUXXpyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2jtyv9n0dqfults0eec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXUXXpyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2jtyv9n0dqfults0eec.png" alt="systrace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In step 4, the view traversal &lt;strong&gt;draw pass&lt;/strong&gt; generates a list of drawing commands (known as &lt;strong&gt;display lists&lt;/strong&gt;) and sends that list of drawing commands to the &lt;em&gt;render thread&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Step 5: the &lt;strong&gt;render thread&lt;/strong&gt; optimizes the &lt;em&gt;display lists&lt;/em&gt;, adds effects such as ripples, then leverages the GPU to run the drawing commands and draw into a buffer (an OpenGL surface). Once done, the render thread tells the &lt;em&gt;surface flinger&lt;/em&gt; (which lives in a separate process) to &lt;strong&gt;swap the buffer&lt;/strong&gt; and put it on the display.&lt;/li&gt;
&lt;li&gt;Step 6 (not visible in the systrace screenshot): the surfaces for &lt;strong&gt;all visible windows are composited&lt;/strong&gt; by the surface flinger and hardware composer, and the result is &lt;strong&gt;sent to the display&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#tap-response-time"&gt;
  &lt;/a&gt;
  Tap Response Time
&lt;/h1&gt;

&lt;p&gt;We previously defined the &lt;em&gt;Tap Response Time&lt;/em&gt; as the time from when the user is &lt;strong&gt;done pressing&lt;/strong&gt; a button to when the app has &lt;strong&gt;visibly reacted&lt;/strong&gt; to the tap. In other words, we need to measure the &lt;strong&gt;total duration&lt;/strong&gt; of going through &lt;strong&gt;steps 1 to 6&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the next sections I'll explain how we can detect each step. If you'd rather immediately go to the final implementation, here's the &lt;a href="https://github.com/pyricau/architecture-components-samples/pull/1/files"&gt;PR against NavigationAdvancedSample&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-up-dispatch"&gt;
  &lt;/a&gt;
  Step 1: Up dispatch
&lt;/h2&gt;

&lt;p&gt;We leverage &lt;a href="https://github.com/square/curtains"&gt;square/curtains&lt;/a&gt; to intercept touch events. We define &lt;code&gt;TapTracker&lt;/code&gt;, a touch event interceptor. &lt;code&gt;TapTracker&lt;/code&gt; stores the time of the last &lt;code&gt;MotionEvent.ACTION_UP&lt;/code&gt; touch event. When the posted click listener triggers, we retrieve the time of the up event that triggered it by calling &lt;code&gt;TapTracker.currentTap&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;TapTracker&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TouchEventInterceptor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;currentTap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TapResponseTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getMainLooper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;intercept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;DispatchState&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;DispatchState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;isActionUp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ACTION_UP&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActionUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tapUptimeMillis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventTime&lt;/span&gt;
      &lt;span class="c1"&gt;// Set currentTap right before the click listener fires&lt;/span&gt;
      &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;TapTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TapResponseTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;tapUptimeMillis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tapUptimeMillis&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Dispatching posts the click listener.&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dispatchState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActionUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Clear currentTap right after the click listener fires&lt;/span&gt;
      &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dispatchState&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then add the &lt;code&gt;TapTracker&lt;/code&gt; interceptor to each new window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleApplication&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nc"&gt;Curtains&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onRootViewsChangedListeners&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt;
      &lt;span class="nc"&gt;OnRootViewAddedListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phoneWindow&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;windowAttachCount&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;touchEventInterceptors&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="nc"&gt;TapTracker&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-click-listener-amp-navigation"&gt;
  &lt;/a&gt;
  Step 2: Click listener &amp;amp; navigation
&lt;/h2&gt;

&lt;p&gt;Let's define an &lt;code&gt;ActionTracker&lt;/code&gt; that will be called when when the posted click listener triggers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;ActionTracker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TapTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTap&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// to be continued...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how we could leverage it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;aboutButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;findNavController&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_title_to_about&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nc"&gt;ActionTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"About"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we don't want to add that code to every click listener. Instead, we can add a &lt;a href="https://developer.android.com/reference/androidx/navigation/NavController#addOnDestinationChangedListener(androidx.navigation.NavController.OnDestinationChangedListener)"&gt;destination listener&lt;/a&gt; to the &lt;code&gt;NavController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;navController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnDestinationChangedListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;ActionTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;Advanced Navigation Sample&lt;/em&gt; has 3 tabs, and each tab contains its own &lt;code&gt;NavHostFragment&lt;/code&gt; and &lt;code&gt;NavController&lt;/code&gt;. We could add a destination listener for each tab. Or we can leverage lifecycle callbacks to add a destination listener to every new &lt;code&gt;NavHostFragment&lt;/code&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GlobalNavHostDestinationChangedListener&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityLifecycleCallbacks&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onActivityCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;FragmentActivity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;registerFragmentCreation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;registerFragmentCreation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FragmentActivity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;supportFragmentManager&lt;/span&gt;
    &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;registerFragmentLifecycleCallbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;FragmentLifecycleCallbacks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFragmentCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FragmentManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;NavHostFragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;registerDestinationChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;registerDestinationChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NavHostFragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;navController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navController&lt;/span&gt;
    &lt;span class="n"&gt;navController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnDestinationChangedListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actionName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nc"&gt;ActionTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-fragment-transaction"&gt;
  &lt;/a&gt;
  Step 3: Fragment transaction
&lt;/h2&gt;

&lt;p&gt;Calling &lt;code&gt;NavController.navigate()&lt;/code&gt; does not immediately update the view hierarchy. Instead, a fragment transaction is posted to the main thread. The view for the destination fragment will be created and attached when the fragment transaction executes. Since all pending fragment transactions are &lt;a href="https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:fragment/fragment/src/main/java/androidx/fragment/app/FragmentManager.java;l=1545-1546;drc=31b10c21385fd9ba6350d9eed69847194a97a24d"&gt;executed at once&lt;/a&gt;, we add our own custom transaction to leverage the &lt;code&gt;runOnCommit()&lt;/code&gt; callback. Let's first build a utility, &lt;code&gt;OnTxCommitFragmentViewUpdateRunner.runOnViewsUpdated()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OnTxCommitFragmentViewUpdateRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;runOnViewsUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parentFragmentManager&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beginTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;runOnCommit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then pass an instance to &lt;code&gt;ActionTracker.reportTapAction()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class GlobalNavHostDestinationChangedListener
&lt;/span&gt; ...
     val navController = fragment.navController
     navController.addOnDestinationChangedListener { _, dest, _ -&amp;gt;
       val actionName = dest.label.toString()
&lt;span class="gd"&gt;-      ActionTracker.reportTapAction(actionName)
&lt;/span&gt;&lt;span class="gi"&gt;+      ActionTracker.reportTapAction(
+        actionName,
+        OnTxCommitFragmentViewUpdateRunner(fragment)
+      )
&lt;/span&gt;     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
&lt;span class="gd"&gt;-  fun reportTapAction(actionName: String) {
&lt;/span&gt;&lt;span class="gi"&gt;+  fun reportTapAction(
+      actionName: String,
+      viewUpdateRunner: OnTxCommitFragmentViewUpdateRunner
+  ) {
&lt;/span&gt;     val currentTap = TapTracker.currentTap
     if (currentTap != null) {
&lt;span class="gd"&gt;-      // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+      viewUpdateRunner.runOnViewsUpdated { view -&amp;gt;
+        // to be continued...
+      }
&lt;/span&gt;     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-frame-amp-view-hierarchy-traversal"&gt;
  &lt;/a&gt;
  Step 4: Frame &amp;amp; view hierarchy traversal
&lt;/h2&gt;

&lt;p&gt;When the fragment transaction executes, a view traversal is scheduled for the next frame, which we hook into with &lt;a href="https://developer.android.com/reference/android/view/Choreographer#postFrameCallback(android.view.Choreographer.FrameCallback)"&gt;Choreographer.postFrameCallback()&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
&lt;span class="gi"&gt;+
+  // Debounce multiple calls until the next frame
+  private var actionInFlight: Boolean = false
+
&lt;/span&gt;   fun reportTapAction(
       actionName: String,
       viewUpdateRunner: OnTxCommitFragmentViewUpdateRunner
   ) {
     val currentTap = TapTracker.currentTap
&lt;span class="gd"&gt;-    if (currentTap != null) {
&lt;/span&gt;&lt;span class="gi"&gt;+    if (!actionInFlight &amp;amp; currentTap != null) {
+      actionInFlight = true
&lt;/span&gt;       viewUpdateRunner.runOnViewsUpdated { view -&amp;gt;
&lt;span class="gd"&gt;-        // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+        val choreographer = Choreographer.getInstance()
+        choreographer.postFrameCallback { frameTimeNanos -&amp;gt;
+          actionInFlight = false
+          // to be continued...
+        }
&lt;/span&gt;       }
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-renderthread"&gt;
  &lt;/a&gt;
  Step 5: RenderThread
&lt;/h2&gt;

&lt;p&gt;Once the view traversal is done, the main thread sends the &lt;strong&gt;display lists&lt;/strong&gt; to the &lt;strong&gt;render thread&lt;/strong&gt;. The render thread does additional work and then tells the &lt;strong&gt;surface flinger&lt;/strong&gt; to &lt;strong&gt;swap the buffer&lt;/strong&gt; and put it on the display. We register a &lt;a href="https://developer.android.com/reference/android/view/Window#addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,%20android.os.Handler)"&gt;OnFrameMetricsAvailableListener&lt;/a&gt; to get the total frame duration (including time spent on the render thread):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
 ...
         val choreographer = Choreographer.getInstance()
         choreographer.postFrameCallback { frameTimeNanos -&amp;gt;
           actionInFlight = false
&lt;span class="gd"&gt;-          // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+          val callback: (FrameMetrics) -&amp;gt; Unit = { frameMetrics -&amp;gt;
+            logTapResponseTime(currentTap, frameMetrics)
+          }
+          view.phoneWindow!!.addOnFrameMetricsAvailableListener(
+            CurrentFrameMetricsListener(frameTimeNanos, callback),
+            frameMetricsHandler
+          )
&lt;/span&gt;         }
       }
     }
   }
&lt;span class="gi"&gt;+
+  private fun logTapResponseTime(
+    currentTap: TapResponseTime.Builder,
+    fM: FrameMetrics
+  ) {
+    // to be continued...
+  }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the frame metrics we can determine when the frame buffer was swapped, and therefore the &lt;strong&gt;Tap Response Time&lt;/strong&gt;, i.e. the time from &lt;code&gt;MotionEvent.ACTION_UP&lt;/code&gt; to buffer swap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
 ...
     currentTap: TapResponseTime.Builder,
     fM: FrameMetrics
   ) {
&lt;span class="gd"&gt;-    // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+    val tap = currentTap.tapUptimeMillis
+    val intendedVsync = fM.getMetric(INTENDED_VSYNC_TIMESTAMP)
+    // TOTAL_DURATION is the duration from the intended vsync
+    // time, not the actual vsync time.
+    val frameDuration = fM.getMetric(TOTAL_DURATION)
+    val bufferSwap = (intendedVsync + frameDuration) / 1_000_000
+    Log.d("TapResponseTime", "${bufferSwap-tap} ms")
&lt;/span&gt;   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-6-surfaceflinger"&gt;
  &lt;/a&gt;
  Step 6: SurfaceFlinger
&lt;/h2&gt;

&lt;p&gt;There's no Java API to determine when the composited frames end up being sent to the display by SurfaceFlinger, so I didn't include that part. Romain Guy mentioned this can be done with a native call to &lt;a href="https://www.khronos.org/registry/EGL/extensions/ANDROID/EGL_ANDROID_get_frame_timestamps.txt"&gt;EGL_ANDROID_get_frame_timestamps&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;When we click on the About button, we now see a nice log in Logcat:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;D/TapResponseTime: 105 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I ran systrace at the same time. As you can see in the screenshot, the time from tap to buffer swap is also 105ms:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35eDgquo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wci86y6v9ds514pf7fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35eDgquo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wci86y6v9ds514pf7fh.png" alt="systrace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You can see the final result in &lt;a href="https://github.com/pyricau/architecture-components-samples/pull/1/files"&gt;this PR&lt;/a&gt;. Feel free to leave comments on the PR! I added a few more things that I didn't cover in this blog, such as back key support and logging tab navigation.&lt;/p&gt;

&lt;p&gt;I intend to eventually create a Square Open Source library for this. Until then, you have everything you need to get started.&lt;/p&gt;

&lt;p&gt;My hope is that you can leverage this code to start measuring tap response time in your production apps, which will help you improve the experience of your customers 👏.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚖️ This work is licensed under a &lt;a href="https://creativecommons.org/licenses/by/4.0"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>android</category>
      <category>performance</category>
      <category>jetpack</category>
      <category>navigation</category>
    </item>
    <item>
      <title>Ultimate NodeJs Resources</title>
      <author>DHANUSH N</author>
      <pubDate>Sat, 24 Apr 2021 19:23:56 +0000</pubDate>
      <link>https://dev.to/dhanushxeno/ultimate-nodejs-resources-1mg4</link>
      <guid>https://dev.to/dhanushxeno/ultimate-nodejs-resources-1mg4</guid>
      <description>&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;The below is my github repository which gives a combination of all the available resources of NodeJs, &lt;/p&gt;

&lt;p&gt;I will be updating the repository frequently for the updated content regarding Node Js&lt;/p&gt;

&lt;p&gt;Use it 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DHANUSHXENO/Ultimate-NodeJs-Resources"&gt;Ultimate NodeJs Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more technology related information connect with me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Dhanush_Xen?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>React Hooks | Why useCallback ?</title>
      <author>bhupendra</author>
      <pubDate>Sat, 24 Apr 2021 19:17:17 +0000</pubDate>
      <link>https://dev.to/bhupendra1011/react-hooks-why-usecallback-5hk8</link>
      <guid>https://dev.to/bhupendra1011/react-hooks-why-usecallback-5hk8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Functions are &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function"&gt;First-class&lt;/a&gt; citizens/objects in JS , which simply means they behave like objects , functions can be ~ stored in variable , passed as argument or returned from a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Referential Equality &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false   &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#components-rerendering"&gt;
  &lt;/a&gt;
  Components Re-rendering
&lt;/h3&gt;

&lt;p&gt;In React rendering means creating react elements and displaying on screen , this can be caused by state change, context change or a parent re-render. This is will cause re-run of the functional Component which will cause any function inside the Component to be destroyed (Garbage Collected) and created again on each re-render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Below Component renders a Text and button fields. value from the text field is saved to localStorage onChange.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fnCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// stores only unique values&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;saveText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;saveText&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;fnCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;saveText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// keeps count of times new fn created&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fnCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Understanding&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Name :&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code &lt;em&gt;fnCount&lt;/em&gt; is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;Set&lt;/a&gt; so it will keep track of number of times function &lt;strong&gt;saveText&lt;/strong&gt; is created on each &lt;em&gt;re-render&lt;/em&gt; of App component triggered on change of Input field. &lt;/p&gt;

&lt;p&gt;Below is the console log after 3 button clicks&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7KlYxA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f1rvlnqgy5a5hhek94q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7KlYxA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f1rvlnqgy5a5hhek94q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Component mount, fnCount had one 1 entry but on each re-render of component &lt;em&gt;saveText&lt;/em&gt; fn is re-initialized and is brand new so now fnCount has 4 entries (1 + 3 for each re-render). Since &lt;em&gt;saveText&lt;/em&gt; is related to name state so should not be re-run on button click. This is the problem &lt;strong&gt;useCallback&lt;/strong&gt; solves by not letting React to initialize function on each render unless dependencies in useCallback changes. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// const saveText = () =&amp;gt; {&lt;/span&gt;
  &lt;span class="c1"&gt;//   window.localStorage.setItem("name", name);&lt;/span&gt;
  &lt;span class="c1"&gt;// };&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gw0gBZvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nncdc2hhswxu0nuzd6gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gw0gBZvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nncdc2hhswxu0nuzd6gu.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
After wrapping &lt;em&gt;saveText&lt;/em&gt; fn with &lt;strong&gt;useCallback&lt;/strong&gt; , function count for saveText remains 1 in fnCount (mount time) after 3 clicks. &lt;br&gt;
Since on button Click no dependencies of saveText is changed so&lt;br&gt;
 &lt;em&gt;useCallback&lt;/em&gt; returns the memoized (or memorized) function , that was returned last time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example App :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/egrwl"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




</description>
      <category>react</category>
      <category>usecallback</category>
      <category>hooks</category>
      <category>memoization</category>
    </item>
    <item>
      <title>vue 3 ecommerce</title>
      <author>Tefoh</author>
      <pubDate>Sat, 24 Apr 2021 19:14:14 +0000</pubDate>
      <link>https://dev.to/tefoh/vue-3-ecommerce-1j7h</link>
      <guid>https://dev.to/tefoh/vue-3-ecommerce-1j7h</guid>
      <description>&lt;p&gt;i create a repo, a simple ecommerce template with cart and use a lot of things that a vue developer needs for basic app. ui maybe not perfect but these what i used in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a good folder structure(sort by feature)&lt;/li&gt;
&lt;li&gt;build a cart with vuex&lt;/li&gt;
&lt;li&gt;use plugins&lt;/li&gt;
&lt;li&gt;create components for vanilla js libraries&lt;/li&gt;
&lt;li&gt;countdown timer&lt;/li&gt;
&lt;li&gt;dropdown&lt;/li&gt;
&lt;li&gt;sliders&lt;/li&gt;
&lt;li&gt;gallery&lt;/li&gt;
&lt;li&gt;rating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;source code: &lt;a href="https://github.com/Tefoh/vue-ecommerce-template"&gt;https://github.com/Tefoh/vue-ecommerce-template&lt;/a&gt; .&lt;br&gt;
demo: &lt;a href="https://vue-ecommerce-template.netlify.app/"&gt;https://vue-ecommerce-template.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i hope this will be useful for you :))&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How the web works</title>
      <author>Rohit Singh Rana</author>
      <pubDate>Sat, 24 Apr 2021 18:34:25 +0000</pubDate>
      <link>https://dev.to/rohitrana/how-the-web-works-1hd7</link>
      <guid>https://dev.to/rohitrana/how-the-web-works-1hd7</guid>
      <description>&lt;p&gt;Have you ever wondered what happens when you browse your favorite websites?&lt;/p&gt;

&lt;p&gt;How those attractive websites got the load up in your browser within a fraction of a second.&lt;/p&gt;

&lt;p&gt;There is an epic journey happening every time you clicked that search button on your browser.  &lt;/p&gt;

&lt;p&gt;In this blog, you and I are going to shift from an average internet user to the person who still uses the internet all the time but knows a little bit about what’s going on behind the scenes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-technical-terms"&gt;
  &lt;/a&gt;
  Defining Technical terms
&lt;/h2&gt;

&lt;p&gt;Understanding, the web can be arduous due to a lot of technical terms. Unfortunately, some of them are mandatory and you will have to deal with them.&lt;/p&gt;

&lt;p&gt;These terms will not make much sense to you in the beginning, but just read them and you will see the dots connecting later in this journey.&lt;/p&gt;

&lt;p&gt;I have tried to explain these terms in the simplest way for better understanding so that you and I can continue on this journey-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL -  Uniform Resource Locator&lt;/strong&gt;&lt;br&gt;
It’s basically something that we use to tell the browser what we actually looking for. &lt;/p&gt;

&lt;p&gt;For our reference, we will use our favorite website &lt;code&gt;https://www.udemy.com/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protocols&lt;/strong&gt;&lt;br&gt;
Protocols are the certain set of rules that the client-side (browser) and server-side follow to communicate with each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP - Hypertext Transfer Protocol&lt;/strong&gt;&lt;br&gt;
It’s the first part of a URL indicates which protocol the browser will follow. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sqX4_06D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619268251307/3TXzmp_1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqX4_06D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619268251307/3TXzmp_1k.png" alt="Screenshot (46).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This part is known as HTTP &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ISP - Internet Service Provider&lt;/strong&gt; &lt;br&gt;
They connect the client to the servers and are usually a company or operators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IP Address - Internet Protocol&lt;/strong&gt;&lt;br&gt;
An IP address is a unique address that identifies a device on the internet or on the local network.&lt;/p&gt;

&lt;p&gt;Every computer on the internet has an IP address that it uses to identify and communicate with other computers.&lt;/p&gt;

&lt;p&gt;It looks like this &lt;code&gt;104.16.66.85&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Domain Name&lt;/strong&gt;&lt;br&gt;
A domain name is the address of your website that you type in the URL bar to visit. &lt;/p&gt;

&lt;p&gt;The domain name is used by the DNS to look up the corresponding IP address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS - Domain Name System&lt;/strong&gt;&lt;br&gt;
It’s a decentralized database that converts the domain name (&lt;code&gt;https://www.udemy.com/&lt;/code&gt; )into their corresponding IP address (&lt;code&gt;104.16.66.85&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It’s like the phonebook of the internet having the name (domain name) and phone number (IP address) of everyone &lt;/p&gt;

&lt;p&gt;when you click on the name it will directly call the phone number you do not need to memorize the IP address.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, as we know all the mandatory technical terms that we are going to use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let’s recommence with our Journey.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-web-works"&gt;
  &lt;/a&gt;
  How the web works
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you type or click a URL into your browser, a request is sent to your Internet &lt;br&gt;
 Service Provider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Internet Service Provider then communicates with DNS (Domain Name System) and checks the IP address for the server that hosts your website. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Internet service providers after receiving the IP address of the destination server sends it to your browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the browser sticks this request into a virtual envelope called packets and wraps it with specific information for your request including the IP address of that server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The IP address of the packet tells that where is the server located.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After reaching the packet to the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server then reads the request and if the web page exists it ready the web page to send by pulling its information from the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But there’s a catch too, that web pages made of images and text are too heavy to send in one go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, for the internet to work efficiently the heavy page got polarised into many tiny packets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Packets of data each one wraps with all the information needed to rebuild itself on the client-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the journey to the destination begins, and it's not a direct one.&lt;br&gt;
It requires hopping from server to server until the webpage gets arrived on the client-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once arrived the browser then converts all the code into human-readable content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This embarks the end of an epic journey that happens within a fraction of a second along with many trillions and trillions of similar journeys.&lt;/p&gt;

&lt;p&gt;It’s all happening on the Internet we take granted for&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In Synopsis, that’s how all the website works behind the Internet.&lt;/p&gt;

&lt;p&gt;I did not dive deep into much technical explanation. Otherwise, it'll become too obnoxious. &lt;/p&gt;

&lt;p&gt;But if you are a technophile like me and want to know more about working with the web and are ready to get your head around with these things. &lt;/p&gt;

&lt;p&gt;You can always refer to these great  &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works"&gt;&lt;strong&gt;Mozilla docs&lt;/strong&gt;&lt;/a&gt;  for a better understanding of Concepts.&lt;/p&gt;

&lt;p&gt;If you find my work interesting and worth reading you can appreciate me on  &lt;a href="https://twitter.com/_RohitRana"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rohit-rana17/"&gt; &lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All kinds of Feedback are welcomed in comments. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deploying A Full-Stack App for the First Time (Vanilla Javascript &amp; Rails API)  </title>
      <author>Max Zander</author>
      <pubDate>Sat, 24 Apr 2021 18:31:20 +0000</pubDate>
      <link>https://dev.to/maxjacobzander/deploying-a-full-stack-app-for-the-first-time-vanilla-javascript-rails-api-2ocg</link>
      <guid>https://dev.to/maxjacobzander/deploying-a-full-stack-app-for-the-first-time-vanilla-javascript-rails-api-2ocg</guid>
      <description>&lt;p&gt;As I went through the full-time Full-Stack Software Engineering program at Flatiron School, I built a handful of projects using different technologies and made sure to base them around my interests. Of all of my projects though, perhaps my favorite one has been my app “Ear Trainer” (if you have questions about &lt;code&gt;.bind&lt;/code&gt;, you can read about my post from when I was first writing “Ear Trainer” &lt;a href="https://dev.to/maxjacobzander/in-a-bind-about-bind-12lb"&gt;here&lt;/a&gt;!). “Ear Trainer” is an app for musicians to work on their abilities to hear and identify melodic intervals (the distance between two musical notes). It was super fun to build and it’s pretty fun to play with (if I do say so myself!).&lt;/p&gt;

&lt;p&gt;Anyway, I knew that once I had graduated from Flatiron, I wanted one of my projects to be deploying "Ear Trainer" to the web for people to be able to use. What made it tricky however, was that it was a full-stack program, with a JavaScript/HTML/CSS front-end, and a Rails API back-end featuring a SQLite3 database. Ultimately, I got it, but not without a bunch of trial and error and in this post, I'm going to walk you through how I did it. And if you want to try out "Ear Trainer" for yourself, you can do so &lt;a href="https://ear-trainer.netlify.app/"&gt;here&lt;/a&gt;!&lt;/p&gt;


&lt;center&gt;&lt;em&gt;Note: It may take a refresh or two to get it going and I'll explain why that is shortly!&lt;/em&gt;&lt;/center&gt;



&lt;p&gt;Upon doing some research about deploying apps, I came to realize that having two separate Github repos for my front-end and my back-end was going to mean two separate deployments. I had used &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; when I deployed my &lt;a href="https://maxjacobzander.netlify.app/"&gt;portfolio&lt;/a&gt;, but also knew that my back-end would be more suited to &lt;a href="http://herokuapp.com/"&gt;Heroku&lt;/a&gt;, so I signed up for an account and got to work.&lt;/p&gt;

&lt;p&gt;First things first, I knew that if I wanted to deploy my back-end to Heroku, I was going to need to convert my SQLite3 database to a PostgreSQL database. Now, there are plenty of how-to's around the web about how to do that, but I'll give a quick run down.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#to-convert-a-sqlite-database-into-a-postgres-database"&gt;
  &lt;/a&gt;
  &lt;center&gt; To convert a SQLite database into a Postgres database:&lt;/center&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;Step 1.&lt;/b&gt; Make sure that you have Postgres installed on your machine. Then,  replace the line in your &lt;code&gt;Gemfile&lt;/code&gt; that says something along the lines of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem 'sqlite3', '~&amp;gt; 1.4'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt; with &lt;/center&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem 'pg'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;b&gt;Step 2.&lt;/b&gt; Run &lt;code&gt;bundle install&lt;/code&gt; to make assure that the gem is installed into the package&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step 3.&lt;/b&gt; Next, go into your &lt;code&gt;config/database.yml&lt;/code&gt; file. You will see something along the lines of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
#
default: &amp;amp;default
  adapter: sqlite3
  pool: &amp;lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&amp;gt;
  timeout: 5000

development:
  &amp;lt;&amp;lt;: *default
  database: db/development.sqlite3

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  &amp;lt;&amp;lt;: *default
  database: db/test.sqlite3

production:
  &amp;lt;&amp;lt;: *default
  database: db/production.sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are going to replace this with some alternative code. I stole this from another blog at some point (so thank you to whomever I stole this code from!) and I'm going to break down a few parts of it for you so that you don't have some of the issues that I did.&lt;/p&gt;

&lt;p&gt;So replace the above code with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;development:
  adapter: postgresql
  encoding: unicode
  database: app_name_development
  pool: 5
  username: yourusername
  password: yourpassword
  timeout: 5000

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: postgresql
  encoding: unicode
  database: app_name_test
  pool: 5
  username: yourusername
  password: yourpassword
  timeout: 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;&lt;em&gt;So let's clarify some of this here:&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all, your &lt;code&gt;database&lt;/code&gt; is going to be your app name followed by either "development" or "test". (In this case, "Ear Trainer" becomes &lt;code&gt;ear_trainer_development&lt;/code&gt; &amp;amp; &lt;code&gt;ear_trainer_test&lt;/code&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You're also going to be asked to fill in your username and password. Now, what they're asking for in this particular case is your Postgres username and password. &lt;em&gt;Before you push to Github with your username and password written in this file, make sure you keep reading!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Step 4.&lt;/b&gt; Run &lt;code&gt;rails db:create&lt;/code&gt;, then &lt;code&gt;rails db:migrate&lt;/code&gt;, then &lt;code&gt;rails db:seed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step 5.&lt;/b&gt; You should be good to go! Check to see that your app is working!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-deviation-into-the-land-of-environment-variables"&gt;
  &lt;/a&gt;
  &lt;center&gt; A Quick Deviation into the Land of Environment Variables... &lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;Initially, I had put my Postgres username and password directly in my &lt;code&gt;database.yml&lt;/code&gt; file, but I realized that doing so would make them vulnerable to leaks upon pushing my project to Github. So what's the solution? &lt;b&gt;Environment variables&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar, environment variables will allow us to store our username and password in a separate file that we can then store in our &lt;code&gt;gitignore&lt;/code&gt; so that it will run on your machine, but not push that sensitive information to Github! (More on how to do that below!)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you don't particularly care about this or don't plan on pushing your code to Github, you are welcome to skip this part and resume below!&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-add-an-environment-variable-in-ruby"&gt;
  &lt;/a&gt;
  &lt;center&gt; To Add An Environment Variable In Ruby &lt;/center&gt;
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#also-applicable-for-sinatra"&gt;
  &lt;/a&gt;
  &lt;center&gt; &lt;i&gt;Also Applicable For Sinatra&lt;/i&gt;
&lt;/center&gt;
&lt;/h6&gt;

&lt;p&gt;To get started, we need to run &lt;code&gt;gem install dotenv&lt;/code&gt;. This will install the gem we need to make this happen.&lt;/p&gt;

&lt;p&gt;Then, go back into your &lt;code&gt;Gemfile&lt;/code&gt; and require the gem by adding add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem 'dotenv'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;i&gt; (I don't know if this was actually the solution, but I had a little bit of difficulty getting things to work and after reading someone's suggestion on Stack Overflow, I moved the &lt;code&gt;dotenv&lt;/code&gt; gem higher up in my &lt;code&gt;Gemfile&lt;/code&gt; and it seemed to solve that issue. For reference, my &lt;code&gt;Gemfile&lt;/code&gt; ended up looking like this:) &lt;/i&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby '2.6.1'

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~&amp;gt; 6.0.3', '&amp;gt;= 6.0.3.4'
gem 'dotenv'
# Use sqlite3 as the database for Active Record
# gem 'sqlite3', '~&amp;gt; 1.4'
gem 'pg'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've added the gem to your &lt;code&gt;Gemfile&lt;/code&gt;, go into your &lt;code&gt;environment.rb&lt;/code&gt; file and add the following line to the top:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require 'dotenv/load'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're going to create our file.&lt;/p&gt;

&lt;p&gt;In the top level of your system structure, create a file called &lt;code&gt;.env&lt;/code&gt;. This file is going to contain your secret. Now, you can call your secret key whatever you want, since it's just a constant, but what you're going to do is name it, follow that with an &lt;code&gt;=&lt;/code&gt; and then define it with your Postgres username and password. And that's how we create those variables! NB: &lt;strong&gt;MAKE SURE YOU DO NOT ADD SPACES HERE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A hypothetical example of what this file may look like is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ENV_USERNAME=thisismyusername
ENV_PASSWORD=thisismypassword
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, for the sake of what we're doing in this blog post, that's all that file needs!&lt;/p&gt;

&lt;p&gt;Now, go back to your &lt;code&gt;config/database.yml&lt;/code&gt; file and replace your username and password with the environment variables with the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; username: &amp;lt;%= ENV.fetch("ENV_USERNAME") %&amp;gt;
 password: &amp;lt;%= ENV.fetch("ENV_PASSWORD") %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check again to make sure that your program is still working and do a little happy dance to celebrate!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpDf305V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bestanimations.com/media/happy-dance/567876311happy-dance-animated-gif-image-44.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpDf305V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bestanimations.com/media/happy-dance/567876311happy-dance-animated-gif-image-44.gif"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt; &lt;br&gt;&lt;br&gt;
Whew! Ok! Dance party's over. Let's get back to work! &lt;/center&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h4&gt;
  &lt;a href="#to-keep-your-raw-env-endraw-file-safe"&gt;
  &lt;/a&gt;
  &lt;center&gt; To Keep Your &lt;code&gt;.env&lt;/code&gt; File Safe &lt;/center&gt;
&lt;/h4&gt;

&lt;p&gt;So before we push to Github, we have to make sure that our &lt;code&gt;.env&lt;/code&gt; file is listed in our &lt;code&gt;gitignore&lt;/code&gt; so that we aren't pushing that sensitive information to the internet. Github has a wonderful resource for creating/adding to a &lt;code&gt;gitignore&lt;/code&gt; file! You can find that (for just about any coding language!) &lt;a href="https://github.com/github/gitignore"&gt;here&lt;/a&gt;. Click on over to that, select your language and copy + paste whatever you need to your &lt;code&gt;gitignore&lt;/code&gt; file. In our case, we are going to add our &lt;code&gt;.env&lt;/code&gt; file by adding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Used by dotenv library to load environment variables.
 .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to our file. (Feel free to run &lt;code&gt;git status&lt;/code&gt; to check and make sure that everything worked correctly and then push your work!)&lt;/p&gt;

&lt;p&gt;Now we should be good to head to Heroku!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploying-the-backend-to-heroku"&gt;
  &lt;/a&gt;
  &lt;center&gt; Deploying The Back-End To Heroku &lt;/center&gt;
&lt;/h2&gt;

&lt;p&gt;So before you get started with this step, make sure that you make yourself an account with Heroku. Sign up and follow the documentation &lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;here&lt;/a&gt; to get the CLI set up on your machine.&lt;/p&gt;

&lt;p&gt;Now, there are multiple ways to proceed, but I like creating a new app from the Heroku website. You enter an app name, hit "Create App", and you're in business! I linked the Heroku-app to my Github repo for my back-end and thought I'd be done, but I had a few more snags that I had to solve.&lt;/p&gt;

&lt;p&gt;First off, my first build attempts failed. Upon reading the build logs, I realized that my app was built with &lt;code&gt;Ruby 2.6.1&lt;/code&gt;, which does not exist on the Heroku-20 stack (the current stack at the time of this writing). So if this is an issue you run into, this can be solved by setting the Heroku stack to one that &lt;em&gt;does&lt;/em&gt; support &lt;code&gt;Ruby 2.6.1&lt;/code&gt;. To do this, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku stack:set heroku-18
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This changes the stack for the project and the next build will use Heroku-18 and (hopefully) succeed.&lt;/p&gt;

&lt;p&gt;But when I first got the message that I had successfully deployed to Heroku, I was getting a &lt;code&gt;404&lt;/code&gt; error. I realized that my problem was that I had totally forgotten about my routes! When I was running my rails server and going to localhost:3000, I hadn't set anything to the &lt;code&gt;/&lt;/code&gt; route and needed to go to the proper route I &lt;em&gt;had&lt;/em&gt; set to view what I needed. With the heroku-app page, it was the exact same thing! Make sure you are visiting the page with the proper route (ex. if you would go to &lt;a href="https://localhost:3000/exampleroute"&gt;https://localhost:3000/exampleroute&lt;/a&gt;, you will need to visit &lt;a href="https://your-app-name.herokuapp.com/exampleroute"&gt;https://your-app-name.herokuapp.com/exampleroute&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But when I went to the proper route, there was &lt;em&gt;another&lt;/em&gt; problem! I was getting an internal server error (500)! Now, if this is happening to you, you can run &lt;code&gt;heroku run rails console&lt;/code&gt; (or &lt;code&gt;heroku run rails c&lt;/code&gt;) if the logs aren't helping you diagnose the problem, but if you have been following along with this tutorial, you are probably hitting the same error (H10). Allow me to enlighten you: Because we put our login information into environment variables and put our &lt;code&gt;.env&lt;/code&gt; file into our &lt;code&gt;gitignore&lt;/code&gt;, Heroku does &lt;em&gt;not&lt;/em&gt; have that information!&lt;/p&gt;

&lt;p&gt;At this point, we need to provide that information to Heroku so that the information can be accessed. We can do that by running &lt;code&gt;heroku config:set YOURSECRETKEYFROMTHEENV=thepasswordthatyouset&lt;/code&gt;(if we use the example from above, the entire command becomes:&lt;br&gt;
&lt;code&gt;heroku config:set ENV_USERNAME=thisismyusername&lt;/code&gt; and &lt;code&gt;heroku config:set ENV_PASSWORD=thisismypassword&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now Heroku has the login information it needs to access the information, but there's still something important to do: run &lt;code&gt;heroku run rake db:migrate&lt;/code&gt; to migrate your database, followed by &lt;code&gt;heroku run rake db:seed&lt;/code&gt; to seed it (if applicable). Now check out your deployed app (at &lt;a href="https://your-app-name.herokuapp.com/exampleroute"&gt;https://your-app-name.herokuapp.com/exampleroute&lt;/a&gt;) and proceed to &lt;strong&gt;HAPPY DANCE #2&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_lUFLyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/media.giphy.com/media/w7mLEAMcpjrpe/giphy.gif%3Fresize%3D372%252C372%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_lUFLyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/media.giphy.com/media/w7mLEAMcpjrpe/giphy.gif%3Fresize%3D372%252C372%26ssl%3D1"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
Ok! Stop dancing! We're almost there! &lt;/center&gt;


&lt;h2&gt;
  &lt;a href="#deploying-the-frontend-to-netlify"&gt;
  &lt;/a&gt;
  &lt;center&gt; Deploying The Front-End To Netlify &lt;/center&gt;
&lt;/h2&gt;

&lt;p&gt;Alright, friend -- we're almost done. Just a few more steps and you'll be live!&lt;/p&gt;

&lt;p&gt;First and foremost, make sure you have an account with &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. Netlify is super easy to use and this is going to be pretty simple!&lt;/p&gt;

&lt;p&gt;But before we get there, we have one more important thing to do in our code. Now that your API lives somewhere on the internet, find your fetch request(s) in your front-end code and replace the location with your API.&lt;/p&gt;

&lt;p&gt;To continue with our example links from before, we would move from something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class API {
    static addExamples(){
        fetch("http://localhost:3000/exampleroute")
        .then(resp =&amp;gt; resp.json())
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class API {
    static addExamples(){
        fetch("https://your-app-name.herokuapp.com/exampleroute")
        .then(resp =&amp;gt; resp.json())
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your app with the new fetch request, make sure things work, and push to Github!&lt;/p&gt;

&lt;p&gt;Now, before we start happy dancing again, let's just wrap this up, shall we?&lt;/p&gt;

&lt;p&gt;Let's head back to Netlify. You're going to select "New site from Git" and choose your Git provider (I use/have been talking about GitHub, but you can also use GitLab or Bitbucket). Login to your account and pick a repository (in this case, your front-end repo!). Follow the prompts and deploy!&lt;/p&gt;

&lt;p&gt;Guess what, my friend? You did it! Congratulations! &lt;b&gt;HAPPY DANCE #3&lt;/b&gt;!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/igJK985xZj8Cqq0YOW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/igJK985xZj8Cqq0YOW/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;em&gt;A final note: I mentioned at the beginning that if you wanted to try out &lt;a href="https://ear-trainer.netlify.app/"&gt;Ear Trainer&lt;/a&gt;, you might have to refresh the page a few times. This is because the app uses what are called "free dynos", meaning that if no server requests happen for 30 minutes, the server will stop running. If someone tries to make a request to the server, it will wake itself back up and start running again, but it does take a second. A bit annoying, but hey -- it's free (and functional)!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>deploy</category>
      <category>fullstack</category>
      <category>heroku</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Consistency Conundrum</title>
      <author>Kevin Murphy</author>
      <pubDate>Sat, 24 Apr 2021 18:26:09 +0000</pubDate>
      <link>https://dev.to/thegnarco/consistency-conundrum-4792</link>
      <guid>https://dev.to/thegnarco/consistency-conundrum-4792</guid>
      <description>&lt;h2&gt;
  &lt;a href="#consistent-starting-point"&gt;
  &lt;/a&gt;
  Consistent Starting Point
&lt;/h2&gt;

&lt;p&gt;In our previous post, we wrote the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;complex_calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;promo_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# calculation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We received this suggestion in code review:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You could consider using keyword arguments for this method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the whole, we agree that keyword arguments would benefit this method. However, if keyword arguments are never used in this application, does that mean we shouldn't do it? We don't want to be inconsistent!&lt;/p&gt;

&lt;p&gt;Let's consider some choices we could make specifically in regards to consistency within our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#do-nothing"&gt;
  &lt;/a&gt;
  Do Nothing
&lt;/h3&gt;

&lt;p&gt;Generally, I don't think this gets the credit it deserves as an explicitly-defined option. The inertia of the system may be too great to warrant making the change. The choice to write or structure code in the application this way may be intentional and necessary. It may introduce too much cognitive overhead to justify making the change. There are lots of excuses I could make to justify not doing the work!&lt;/p&gt;

&lt;p&gt;I don't think any of these apply to our keyword arguments example. However, if someone suggested:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This computation is natively supported in &lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt;. Have you considered integrating that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I may want to cross-reference the implementations for correctness, but I may not want to rewrite my application in Python or explore Ruby/Python bridges to use that one function. I'm drawing on the consistency of the rest of my application being written in Ruby to justify that choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-the-change-everywhere"&gt;
  &lt;/a&gt;
  Make The Change Everywhere
&lt;/h3&gt;

&lt;p&gt;We could decide to invest the time and energy to use this convention &lt;em&gt;everywhere&lt;/em&gt; immediately. Then, we'd be consistent throughout our application!&lt;/p&gt;

&lt;p&gt;In the case of our keyword arguments example, I would advise against that, unless there are only one or two other places where we'd use them, and they're easily identified.&lt;/p&gt;

&lt;p&gt;Even then, I'd think twice about it. Any change has a risk, and changing the working code purely in the name of consistency is a risk with limited upside.&lt;/p&gt;

&lt;p&gt;However, consider this change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;desired_widgets&lt;/span&gt;
  &lt;span class="no"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"status IN &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the following code review suggestion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should modify this method to sanitize user input before sending it as part of a database query.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we created the query like this because it's consistent with how other queries are written, then it's time to drop everything and change that everywhere. We've opened ourselves up to &lt;a href="https://owasp.org/www-community/attacks/SQL_Injection"&gt;SQL injection&lt;/a&gt; attacks and we need to immediately invest the time to remediate those issues for our application's health and safety.&lt;/p&gt;

&lt;p&gt;As a side note, consider a static security analysis tool like &lt;a href="https://brakemanscanner.org/"&gt;Brakeman&lt;/a&gt; to &lt;a href="https://github.com/TheGnarCo/gnarails/blob/fe72e5fe74455400088d89f7af2a2d9bf1899d26/templates/bin/brakeman"&gt;run automatically&lt;/a&gt; as part of your &lt;a href="https://github.com/TheGnarCo/gnarails/blob/fe72e5fe74455400088d89f7af2a2d9bf1899d26/templates/.circleci/config.yml#L49-L51"&gt;build process&lt;/a&gt; so that your application is not solely relying on reviewers' eyes to catch critical security implications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-the-change-here-and-going-forward"&gt;
  &lt;/a&gt;
  Make The Change Here, And Going Forward
&lt;/h3&gt;

&lt;p&gt;For our keyword arguments example, I suggested not to make the change everywhere. However, that doesn't mean we should ignore it in the name of consistency. If there's a demonstrated benefit, we should take advantage of that. Instead, we can embrace the consistency of the standard &lt;em&gt;going forward&lt;/em&gt;. As you make future changes, be mindful of current best practices and conventions, and change existing code to meet those conventions as you have another reason to change the code.&lt;/p&gt;

&lt;p&gt;Lastly, document these conventions so that it's clear to all team members what the expectations are going forward if you encounter this question. That can reduce ambiguity and help people understand why this internal inconsistency exists.&lt;/p&gt;

&lt;p&gt;This approach of leaving the code better than you found it can apply to long-reaching goals as well. If you're converting an application from&lt;br&gt;
&lt;a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html"&gt;JavaScript to TypeScript&lt;/a&gt;, you can convert files as you need to change them. If you're updating an application from &lt;a href="https://relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec"&gt;feature specs&lt;/a&gt; to &lt;a href="https://relishapp.com/rspec/rspec-rails/docs/system-specs/system-spec"&gt;system specs&lt;/a&gt;, you can do that as you change the area of code the feature spec is testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-consistently-inconsistent"&gt;
  &lt;/a&gt;
  Being Consistently Inconsistent
&lt;/h2&gt;

&lt;p&gt;Software development is a rapidly evolving ecosystem of best practices, tools, and approaches. While we don't intend to chase trends, we also need to incorporate new improvements that will benefit our applications - as long as we're intentional about them. For a healthy, long-running application, that can mean applying new paradigms in areas under active development, while leaving existing work in its current state for the time being.&lt;/p&gt;

&lt;p&gt;Living in the two worlds can be uncomfortable, and it is inconsistent. But it's intentional inconsistency with a plan towards consistency and based on a value judgement on the cost of the change vs. the benefit it'll provide.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post originally published on &lt;a href="https://blog.thegnar.co/consistency-conundrum"&gt;The Gnar Company blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>ruby</category>
      <category>architecture</category>
    </item>
    <item>
      <title>LeetCode Palindrome Number</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sat, 24 Apr 2021 18:12:32 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-palindrome-number-5fl0</link>
      <guid>https://dev.to/_alkesh26/leetcode-palindrome-number-5fl0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Given an integer &lt;strong&gt;x&lt;/strong&gt;, return &lt;strong&gt;true&lt;/strong&gt; if &lt;strong&gt;x&lt;/strong&gt; is palindrome integer.&lt;/p&gt;

&lt;p&gt;An integer is a &lt;strong&gt;palindrome&lt;/strong&gt; when it reads the same backward as forward.&lt;br&gt;
For example, &lt;strong&gt;121&lt;/strong&gt; is palindrome while &lt;strong&gt;123&lt;/strong&gt; is not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: x = 121
Output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: x = -121
Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: x = 10
Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: x = -101
Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- -2^31 &amp;lt;= x &amp;lt;= 2^31 - 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;As mentioned in the problem statement, palindrome number&lt;br&gt;
is one that reads the same from both sides.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#brute-force-solution"&gt;
  &lt;/a&gt;
  Brute force solution
&lt;/h4&gt;

&lt;p&gt;A brute force solution will be to convert the integer into a string, reverse the string, and check if the two strings are the same.&lt;/p&gt;

&lt;p&gt;But this approach will require extra space for creating a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Convert number into string using itoa or custom method.&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;reverseStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverseStr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The time complexity of this program will be &lt;strong&gt;O(N)&lt;/strong&gt;.&lt;br&gt;
The space complexity will be &lt;strong&gt;O(M)&lt;/strong&gt; where M is the&lt;br&gt;
number of digits in the integer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#optimized-solution"&gt;
  &lt;/a&gt;
  Optimized solution
&lt;/h4&gt;

&lt;p&gt;We can avoid the extra space and reduce the time complexity&lt;br&gt;
similar to the way we check palindrome string.&lt;/p&gt;

&lt;p&gt;But here, we get the first and last digits and compare them.&lt;br&gt;
Fetching the last digit is simple and, we can use the modulus operator &lt;strong&gt;%&lt;/strong&gt;. Fetching the first digit can be done using a divisor.&lt;/p&gt;

&lt;p&gt;Let's check the algorithm.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#algorithm"&gt;
  &lt;/a&gt;
  Algorithm
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- if x &amp;lt; 0
  - return false.
- set divisor = 1

// We use the divisor to compute the number of digits in the number x.
// We keep multiplying the divisor by 10 till x / divisor is greater than equal to 10.
- Loop while x / divisor &amp;gt;= 10
  - divisor = divisor * 10

- Loop while x != 0
  // here we check if first and last digit are same or not.
  - if x / divisor != x % 10
    - return false

  // remove the first digit
  - set x = x % divisor

  // remove the last digit
  - set x = x / 10

  // since first and last digit are removed we divide divisor by 100
  - set divisor = divisor / 100

- return true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPalindrome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;divisor&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's dry-run our algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 12321

Step 1: x &amp;lt; 0
        12321 &amp;lt; 0
        false

Step 2: divisor = 1

Step 3: while x / divisor &amp;gt;= 10

        1. 12321 / 1 &amp;gt;= 10
           12321 &amp;gt;= 10
           divisor *= 10
           divisor = 10

        2. 12321 / 10 &amp;gt;= 10
           1232 &amp;gt;= 10
           divisor *= 10
           divisor = 100

        3. 12321 / 100 &amp;gt;= 10
           123 &amp;gt;= 10
           divisor *= 10
           divisor = 1000

        4. 12321 / 1000 &amp;gt;= 10
           12 &amp;gt;= 10
           divisor *= 10
           divisor = 10000

        5. 12321 / 10000 &amp;gt;= 10
           1 &amp;gt;= 10
           Loop exit

Step 4: while x != 0

        1. 12321 / 10000 != 12321 % 10
           1 != 1
           false

           x %= divisor
           x = 12321 % 10000
           x = 2321

           x /= 10
           x = 232

           divisor /= 100
           divisor = 100

        2. 232 / 100 != 232 % 10
           2 != 2
           false

           x %= divisor
           x = 232 % 100
           x = 32

           x /= 10
           x = 3

           divisor /= 100
           divisor = 1

        3. 3 / 1 != 3 % 10
           3 != 3
           false

           x %= divisor
           x = 3 % 1
           x = 0

           x /= 10
           x = 0

           divisor /= 100
           divisor = 0

        4. x != 0
           0 != 0
           Loop exit

Step 5: return true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Developer Community Encouraging Active Coding Practice 🏁 </title>
      <author>Fum</author>
      <pubDate>Sat, 24 Apr 2021 17:39:42 +0000</pubDate>
      <link>https://dev.to/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh</link>
      <guid>https://dev.to/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-inspirezone"&gt;
  &lt;/a&gt;
  What is inspirezone?
&lt;/h1&gt;

&lt;p&gt;Inspirezone is a &lt;a href="https://community.inspirezone.tech/"&gt;community for developers&lt;/a&gt; and we are working on building an environment that will inspire developers of all levels of experience to reach their highest potential.&lt;/p&gt;

&lt;p&gt;We are all about encouraging you to accelerate your programming skills through &lt;strong&gt;collaboration, active practice and group accountability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are also a &lt;a href="https://inspirezone.tech/blog/"&gt;developer blog&lt;/a&gt; covering topics on programming practice, productivity, tools and tips on increasing your proficiency as a developer.&lt;/p&gt;

&lt;p&gt;Our community is now beginning a series of coding challenges to encourage active participation from members. Use these challenges to refresh or develop your knowledge of various programming languages.&lt;/p&gt;

&lt;p&gt;We are launching the first coding challenge. It’s a relatively simple one as we’ll use this to plan out improvements and ideas for future challenges.&lt;/p&gt;

&lt;p&gt;We are seeking developers who are &lt;strong&gt;dedicated&lt;/strong&gt; and &lt;strong&gt;motivated&lt;/strong&gt; in accelerating their growth and are willing to &lt;strong&gt;actively participate&lt;/strong&gt; in collaboration activities like our challenges. &lt;/p&gt;

&lt;p&gt;If you’re not a member yet, consider &lt;a href="https://community.inspirezone.tech/"&gt;joining us&lt;/a&gt; and become a part of our influential community!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-challenge-develop-a-simple-calculator-using-any-programming-language-of-your-choice"&gt;
  &lt;/a&gt;
  ⚔️ The First Challenge - Develop a simple calculator using any programming language of your choice
&lt;/h2&gt;

&lt;p&gt;The full details and rules of this challenge are listed on the &lt;a href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inspirezonetech"&gt;
        inspirezonetech
      &lt;/a&gt; / &lt;a href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;
        Calculator-Challenge-Inspirezone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Calculator challenge hosted by the inspirezone.tech dev community
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
🏁 Calculator Coding Challenge 🏁 | Hosted by the &lt;a href="https://community.inspirezone.tech/" rel="nofollow"&gt;Inspirezone Dev Community&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7cf7a7636243f21bf784888bc9631e244622fe49e19957242f2f8f37c19d1242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f496e73706972657a6f6e65253230446576253230436f6d6d756e6974792d436f64696e672532304368616c6c656e67652d2532336361656663633f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562"&gt;&lt;img src="https://camo.githubusercontent.com/7cf7a7636243f21bf784888bc9631e244622fe49e19957242f2f8f37c19d1242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f496e73706972657a6f6e65253230446576253230436f6d6d756e6974792d436f64696e672532304368616c6c656e67652d2532336361656663633f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562" alt="Inspirezone calculator challenge badge"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9c0d0763c4ad5fc2f7dd6f9e68c67524c5fc8c2c54e84248fa459523203888e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f557365253230416e792532304c616e67756167652d6666363337623f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774d5334314e7949676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774d5334314e794967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b5047632b50484268644767675a443069545451304c6a6b334c4445794c6a6730614330784e793479544441734e446b754d7a644d4d6a63754e7a63734f4455754f5767784e793479544445334c6a49734e446b754d7a644d4e4451754f5463734d5449754f44524d4e4451754f5463734d5449754f445236494530334e7934354d5377784d6934344e4767784e793479624449334c6a63334c444d324c6a557a494577354e5334784d5377344e533435614330784e793479624449334c6a63334c544d324c6a557a544463334c6a6b784c4445794c6a6730544463334c6a6b784c4445794c6a67306569424e4e7a41754d5463734d4334774e4777314c6a6b324c4445754d7a6c6a4d4334354e4377774c6a49794c4445754e5449734d5334784e6977784c6a4d784c4449754d5777744d6a49754e5377354e6934324f53426a4c5441754d6a49734d4334354d7930784c6a45324c4445754e5449744d6934784c4445754d7a46734c5455754f5455744d53347a4f574d744d4334354e4330774c6a49794c5445754e5449744d5334784e6930784c6a4d784c5449754d5777794d6934314c546b324c6a5935517a59344c6a4d734d4334304d6977324f5334794e4330774c6a45334c4463774c6a45334c4441754d44524d4e7a41754d5463734d4334774e43424d4e7a41754d5463734d4334774e486f694c7a34384c32632b5043397a646d632b"&gt;&lt;img src="https://camo.githubusercontent.com/9c0d0763c4ad5fc2f7dd6f9e68c67524c5fc8c2c54e84248fa459523203888e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f557365253230416e792532304c616e67756167652d6666363337623f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774d5334314e7949676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774d5334314e794967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b5047632b50484268644767675a443069545451304c6a6b334c4445794c6a6730614330784e793479544441734e446b754d7a644d4d6a63754e7a63734f4455754f5767784e793479544445334c6a49734e446b754d7a644d4e4451754f5463734d5449754f44524d4e4451754f5463734d5449754f445236494530334e7934354d5377784d6934344e4767784e793479624449334c6a63334c444d324c6a557a494577354e5334784d5377344e533435614330784e793479624449334c6a63334c544d324c6a557a544463334c6a6b784c4445794c6a6730544463334c6a6b784c4445794c6a67306569424e4e7a41754d5463734d4334774e4777314c6a6b324c4445754d7a6c6a4d4334354e4377774c6a49794c4445754e5449734d5334784e6977784c6a4d784c4449754d5777744d6a49754e5377354e6934324f53426a4c5441754d6a49734d4334354d7930784c6a45324c4445754e5449744d6934784c4445754d7a46734c5455754f5455744d53347a4f574d744d4334354e4330774c6a49794c5445754e5449744d5334784e6930784c6a4d784c5449754d5777794d6934314c546b324c6a5935517a59344c6a4d734d4334304d6977324f5334794e4330774c6a45334c4463774c6a45334c4441754d44524d4e7a41754d5463734d4334774e43424d4e7a41754d5463734d4334774e486f694c7a34384c32632b5043397a646d632b" alt="Any programming language welcome"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ba4442afc78f69c6476cde1052319f291542af2413ed2f66ae29ac6068d05c66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57652532304172652532304f6e253230446973636f72642d3732383944413f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/ba4442afc78f69c6476cde1052319f291542af2413ed2f66ae29ac6068d05c66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57652532304172652532304f6e253230446973636f72642d3732383944413f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465" alt="We are on Discord"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/83265dcd64f7e5f49aef61167a70c0115b6ec430c506279e6840a92fac1bcc32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e747269627574696f6e7325323057656c636f6d652d6631396366373f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774e7934304d5349676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774e7934304d534967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b50484e306557786c4948523563475539496e526c6548517659334e7a496a34756333517765325a7062477774636e56735a54706c646d56756232526b4f324e7361584174636e56735a54706c646d56756232526b4f3330384c334e306557786c506a786e506a78775958526f49474e7359584e7a50534a7a6444416949475139496b30324d4334344d7977784e7934784f554d324f4334344e4377344c6a67304c4463304c6a51314c4445754e6a49734f4459754e7a6b734d4334794d574d794d7934784e7930794c6a59324c4451304c6a51344c4449784c6a41324c444d794c6a63344c4451304c6a517849474d744d79347a4d7977324c6a59314c5445774c6a45784c4445304c6a55324c5445334c6a59784c4449794c6a4d79597930344c6a497a4c4467754e5449744d5463754d7a51734d5459754f4463744d6a4d754e7a49734d6a4d754d6d77744d5463754e4377784e7934794e6b77304e6934304e6977354d7934314e6b4d794f5334784e6977334e6934354c4441754f5455734e5455754f544d734d4334774d6977794f5334354e5342444c5441754e6a4d734d5445754e7a55734d544d754e7a4d734d4334774f53777a4d4334794e5377774c6a4e444e4455754d4445734d4334314c4455784c6a49794c4463754f4451734e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c364969382b5043396e506a777663335a6e50673d3d"&gt;&lt;img src="https://camo.githubusercontent.com/83265dcd64f7e5f49aef61167a70c0115b6ec430c506279e6840a92fac1bcc32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e747269627574696f6e7325323057656c636f6d652d6631396366373f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774e7934304d5349676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774e7934304d534967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b50484e306557786c4948523563475539496e526c6548517659334e7a496a34756333517765325a7062477774636e56735a54706c646d56756232526b4f324e7361584174636e56735a54706c646d56756232526b4f3330384c334e306557786c506a786e506a78775958526f49474e7359584e7a50534a7a6444416949475139496b30324d4334344d7977784e7934784f554d324f4334344e4377344c6a67304c4463304c6a51314c4445754e6a49734f4459754e7a6b734d4334794d574d794d7934784e7930794c6a59324c4451304c6a51344c4449784c6a41324c444d794c6a63344c4451304c6a517849474d744d79347a4d7977324c6a59314c5445774c6a45784c4445304c6a55324c5445334c6a59784c4449794c6a4d79597930344c6a497a4c4467754e5449744d5463754d7a51734d5459754f4463744d6a4d754e7a49734d6a4d754d6d77744d5463754e4377784e7934794e6b77304e6934304e6977354d7934314e6b4d794f5334784e6977334e6934354c4441754f5455734e5455754f544d734d4334774d6977794f5334354e5342444c5441754e6a4d734d5445754e7a55734d544d754e7a4d734d4334774f53777a4d4334794e5377774c6a4e444e4455754d4445734d4334314c4455784c6a49794c4463754f4451734e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c364969382b5043396e506a777663335a6e50673d3d" alt="Contributions welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://inspirezone.tech" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c568bfb9e1995eb3a26be19be13ce0de914c75070b33b3c97a952ad1b14ca725/68747470733a2f2f696e73706972657a6f6e652e746563682f77702d636f6e74656e742f75706c6f6164732f323032312f30342f63616c63756c61746f722d6368616c6c656e67652d62616e6e65722e706e67" alt="inspirezone calculator challenge banner"&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This Repo is part of the inspirezone Dev Community Coding Challenges. Please read challenge details below.&lt;br&gt;
&lt;a href="https://community.inspirezone.tech/" rel="nofollow"&gt;JOIN THE COMMUNITY HERE&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You are welcome to contribute to this repo. If you want to contribute please read the &lt;a href="https://raw.githubusercontent.com/inspirezonetech/Calculator-Challenge-Inspirezone/main/./CONTRIBUTING.md"&gt;&lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt;&lt;/a&gt; for step by step details of how to submit an entry.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
📜 Rules of this challenge 📜
&lt;/h2&gt;
&lt;h3&gt;
Guidelines in making an entry for this challenge&lt;/h3&gt;
&lt;p&gt;✔️ Use any language of your choice.&lt;/p&gt;
&lt;p&gt;✔️ Solution should at minimum ask for user input of 2 numbers.&lt;/p&gt;
&lt;p&gt;✔️ Solution should at minimum be able to add, subtract, multiply, divide.&lt;/p&gt;
&lt;p&gt;✔️ Can be command line based or GUI based.&lt;/p&gt;
&lt;p&gt;✔️ Create a README.md with instructions for how to run your code.&lt;/p&gt;
&lt;h2&gt;
💻 How to Join in 💻
&lt;/h2&gt;
&lt;p&gt;The inspirezone dev community is on Discord and this challenge is managed through there. If you are…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This first challenge will get you refreshing basic arithmetic operators using any language you choose. &lt;/p&gt;

&lt;p&gt;Or due to the simplicity of this challenge, use this opportunity to pick up a language completely new to you and code up your first application!&lt;/p&gt;

&lt;p&gt;Whatever language you use to develop this application, by participating in this challenge you’ll be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn / refresh use of basic arithmetic operators in a programming language&lt;/li&gt;
&lt;li&gt;Learn / refresh how to handle user inputs&lt;/li&gt;
&lt;li&gt;If you’re new to GUI development, this is an opportunity to develop your first GUI application!&lt;/li&gt;
&lt;li&gt;An opportunity to contribute to an open source project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🏅 We’ll also be awarding badges to all members that submit a working entry for every challenge we run. Each badge earned counts and we’ll reveal why over time 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-join-these-challenges-and-participate-in-our-community"&gt;
  &lt;/a&gt;
  Why should you join these challenges and participate in our community? 🤔
&lt;/h2&gt;

&lt;p&gt;Our on-going coding challenges is just one method we’ll use to keep members active in their coding practice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accountability&lt;/strong&gt; is a huge focus of our community. We encourage you to join in these challenges if you’re open to receiving a regular but gentle push to ensure you’re on track with your goals. These challenges are just one way we’ll be using to push you further 🔥&lt;/p&gt;

&lt;p&gt;We manage our community through Discord and we encourage you to join the server if you want closer accountability. On Discord there will be an option to register your participation in challenges and we use this to keep track of everyone committed to completing a challenge. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://community.inspirezone.tech/"&gt;Join the community&lt;/a&gt; to receive full member access to the Discord server. Or you can &lt;a href="https://discord.gg/EwwBgXkh5a"&gt;join the server as a guest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These challenges are a great way to receive an external push and some accountability in keeping up with a regular coding habit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’re a developer seeking unique ways to accelerate your coding skills to the next level we more than welcome you to &lt;a href="https://community.inspirezone.tech/"&gt;join us&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment or &lt;a href="https://dev.to/funbeedev"&gt;message me directly&lt;/a&gt; if you have any questions about this challenge or the inspirezone community 😀&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>programming</category>
      <category>github</category>
    </item>
  </channel>
</rss>
