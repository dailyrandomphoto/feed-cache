<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Intelligent Movies To Watch Before You Die</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Wed, 01 Sep 2021 04:17:34 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/10-intelligent-movies-to-watch-before-you-die-2nng</link>
      <guid>https://dev.to/koulurunandakishorereddy/10-intelligent-movies-to-watch-before-you-die-2nng</guid>
      <description>&lt;p&gt;We’ve brought the clever movies you need to watch for this list, pointing out works with complex stories that always demand more attention from your viewer. Below are films that subvert the order of their plot, question the meaning of existence, work on the aspect of time in our lives, bring plot twists, and so on.&lt;/p&gt;

&lt;h2&gt;Let’s go to the list.&lt;/h2&gt;


&lt;ul&gt;

&lt;li&gt;&lt;b&gt;1 . Memento (Christopher Nolan, 2000)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IL2juorP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758007815/LTHwZOJZq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IL2juorP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758007815/LTHwZOJZq.jpeg" alt="1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After his wife is brutally killed and he is beaten by a criminal, a man, now with problems in his short-term memory, decides to embark on a destructive journey behind him. ‘Memento’ is rustic in its conception of plot, subverting the paths trodden by the characters, working with hard philosophical concepts, like the one of ‘eternal return’, resulting in a film that stays in the head of the spectator even after its end.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;2 . The Truman Show (Peter Weir, 1998)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzvLXTmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758442721/sWp4Kqywi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzvLXTmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758442721/sWp4Kqywi.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wrapped in a routine of inexorable habits, a man, by a mere figure of chance, ends up realizing that his whole life had been a big lie and his day-to-day life was actually programmed and controlled by a kind of TV show. Now it’s up to him to go after all the truth behind this story. ‘The Truman Show’ is different in its story arc, promoting situations of the most diverse, provoking a sense of reassessment of life by those who watch the film.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;3 . The Gift (Joel Edgerton, 2015)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrRGYX1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758762217/yK-759MC5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrRGYX1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626758762217/yK-759MC5.jpeg" alt="the_gift-1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the plot, a couple receives an unexpected visit from a man who had been friends with one of them for a long time. However, the strange man begins, little by little, to bother the couple, doubting their motivations before them. ‘The Gift’ uses a few scenarios to govern the events of its history. Here, everything is guided under a mood of mystery that is maintained until the final moments of the film, letting the viewer formulate theories about what is on screen.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;4 . Psycho (Alfred Hitchcock, 1960)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqVMUZ54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759063036/ofFBy69Jww.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqVMUZ54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759063036/ofFBy69Jww.jpeg" alt="4.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After stealing an enormous amount of the place in which works, a young woman initiates a car flight by the country. In the midst of this journey, the young woman decides to stop to rest in a hotel by the roadside, not knowing that this would be a mortal place. Alfred Hitchcock’s masterpiece, ‘Psycho’ is a work that guided the paths of the horror and suspense genres in the following decades, raising a daring story, nourishing one of the most amazing finals of cinema.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;5 . The Sixth Sense (M. Night Shyamalan, 1999)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElRnEW5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759304468/jScuyCQm8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElRnEW5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759304468/jScuyCQm8.jpeg" alt="5.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A psychologist tries to help a little boy who claims to see spirits, starting a journey full of mysteries behind answers. Characterizing itself as one of the films with one of the greatest twists of the seventh art, ‘The Sixth Sense’ is one of those top-quality suspensions. A film that frightens with few details, in an engaging and always pleasant story.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;6 . Double Indemnity (Billy Wilder, 1944)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhAeA4_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759583995/fSBDKCxK8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhAeA4_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759583995/fSBDKCxK8.jpeg" alt="6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the plot, an individual who works for an insurance agency falls in love with a woman who persuades him to defraud his job. However, after the crime, he will realize that his choice was not the right one, fighting a clever investigator not to get caught. The biggest Noir movie of all time, ‘Double Indemnity is a film class of the genius Billy Wilder. Exploring a nuance-permeated plot, the film manages to be dynamic while it unravels every meander of its central characters, providing the viewer with a unique experience.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;7 . Zodiac (David Fincher, 2007)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h0FfhtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760062796/fsD-MXcBT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h0FfhtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760062796/fsD-MXcBT.jpeg" alt="7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A serial killer terrorized the United States in the late 1960s and early 1970s, leaving authorities and the population in an incomplete state of paranoia. The plot gains its substance when the criminal decides to communicate through codes with a newspaper, arousing the interest of a journalist of the place. Based on a real event, ‘Zodiac’ is a film that shivers by the density of the story presented. Intelligent suspense can cause the most diverse emotions in the viewer without using the clichés characteristic of the genre.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;8 . I Love You, I Love You (Alain Resnais, 1968)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWvyp0m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760211954/NalKJO1fN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWvyp0m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760211954/NalKJO1fN.jpeg" alt="8.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A man serves as a guinea pig for a strange scientific experiment that stirs the character of time. However, something goes wrong, leaving the individual trapped in their own memories. ‘I Love You, I Love You’ is potent in its theme, studying the ephemeral character of life, as well as the most important fragments that our existence understands.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;9 . 2001: A Space Odyssey (Stanley Kubrick, 1968)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N-HjEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760401399/AOEkZDL7N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N-HjEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760401399/AOEkZDL7N.png" alt="9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The film fits into the intricacies of humanity’s evolution, rescuing different periods of our history and building future events. Stanley Kubrick’s masterpiece, this film demands a lot from its viewer because of its slow pace, making itself tiring at times, but rewarding who watches its completion.&lt;/p&gt;




&lt;li&gt;&lt;b&gt;10 . Run Lola Run (Tom Tykwer, 1998)&lt;/b&gt;&lt;/li&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXhHegeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760555979/fH9YB1HJT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXhHegeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760555979/fH9YB1HJT.jpeg" alt="10.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After her boyfriend gets involved in an unpleasant situation, a young woman takes a few minutes to get a certain amount of money and save the boy. Divided into variations of stories about the same theme, ‘Run Lola Run’ has an unparalleled dynamism to govern its plot, achieving in only 81 minutes to build a unique film.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the article!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;"You can now extend your support by buying me a Coffee.😊👇"&lt;/b&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/koulurunanda"&gt;Buy Me a Coffee&lt;/a&gt; &lt;br&gt;&lt;/p&gt;


&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Flutter App life cycle</title>
      <author>Prakash S</author>
      <pubDate>Wed, 01 Sep 2021 03:46:22 +0000</pubDate>
      <link>https://dev.to/prakashselvaraj/flutter-app-life-cycle-1jim</link>
      <guid>https://dev.to/prakashselvaraj/flutter-app-life-cycle-1jim</guid>
      <description>&lt;p&gt;Basically when we are writing a code for any Native applications, We will look for a life cycle events to handle some specific scenarios. Its like handling Thanos gauntlet snap to blip 😇😇&lt;/p&gt;

&lt;p&gt;Flutter comes with life cycle events to handle app life cycle for android &amp;amp; ios.&lt;/p&gt;

&lt;p&gt;Let's see the code.&lt;/p&gt;

&lt;p&gt;To consume the life cycle event, we need to have Stateful widget with &lt;strong&gt;WidgetsBindingObserver&lt;/strong&gt; mixin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;_HomePageState&lt;/span&gt; 
&lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;WidgetsBindingObserver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The mixin WidgetsBindingObserver provides an override &lt;strong&gt;&lt;em&gt;didChangeAppLifecycleState&lt;/em&gt;&lt;/strong&gt; where we will notified for certain app life cycle state changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;override&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;didChangeAppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resumed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app resumed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app paused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inactive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app inactive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;AppLifecycleState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app detached&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally to get work all these stuff, we need to inform or observe the app life cycle changes using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;override&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;WidgetsBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ofcourse dont forget to remove observer on dispose&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;override&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;WidgetsBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, we can now handle the app as per the app lifecycle.&lt;/p&gt;

&lt;p&gt;Happy Fluttering 😇😇&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>lifecycle</category>
    </item>
    <item>
      <title>Accessing AppSync APIs that require Cognito Login outside of Amplify</title>
      <author>Robert J. Berger</author>
      <pubDate>Wed, 01 Sep 2021 01:23:37 +0000</pubDate>
      <link>https://dev.to/aws-builders/accessing-appsync-apis-that-require-cognito-login-outside-of-amplify-5bg8</link>
      <guid>https://dev.to/aws-builders/accessing-appsync-apis-that-require-cognito-login-outside-of-amplify-5bg8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-need"&gt;
  &lt;/a&gt;
  The Need
&lt;/h2&gt;

&lt;p&gt;You have this great Amplify App using AppSync GraphQL. You eventually find that you need to be able to access that data in your AppSync GraphQL database from tools other than your Amplify App. Its easy if you just have your AppSync API protected just by an API Key. But that isn't great security for your data!&lt;/p&gt;

&lt;p&gt;One way to protect your AppSync data is to use &lt;a href="https://docs.amplify.aws/lib/graphqlapi/authz/q/platform/js/#cognito-user-pools"&gt;Cognito Identity Pools&lt;/a&gt;. Amplify makes it pretty transparent if you are  using Amplify to build your clients. AppSync lets you do really nice &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/security-authorization-use-cases.html"&gt;table and record level access control based on logins and roles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What happens if you want to access that data from something other than an Amplify based client? How do you "login" and get the JWT credentials you need to access your AppSync APIs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-aws-cli"&gt;
  &lt;/a&gt;
  Use AWS CLI
&lt;/h2&gt;

&lt;p&gt;The most general way is to use the AWS CLI to effectively login and retrieve the JWT credentials that can then be passed in the headers of any requests you make to your AppSync APIs.&lt;/p&gt;

&lt;p&gt;Unfortunately its not as easy as just having your login and password. It also depends on how you configured your Cognito Identity Pool and its related Client Apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cognito-user-pool-client-app"&gt;
  &lt;/a&gt;
  Cognito User Pool Client App
&lt;/h3&gt;

&lt;p&gt;You can have multiple Client Apps specified for your Cognito User Pool. I suggest  having one dedicated to these external applications. That way you can have custom configuration just for this and not disrupt your main  Amplify apps. Also you can easily turn it off if you need too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GP6QBFOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74z6pgmf1qdyqv9wkllr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GP6QBFOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74z6pgmf1qdyqv9wkllr.png" alt="User Pool Client Apps" title="User Pool Client Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case I created a new client app &lt;code&gt;shoppabdbe800b-rob-test2&lt;/code&gt; as a way to test a client app with no &lt;code&gt;App Client Secret&lt;/code&gt;. This makes it easier to access from the command line as you do not have to generate a Secret Hash (will describe how to deal with that below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9UD1f-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hipjcnn0e3q4ronqvgi0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9UD1f-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hipjcnn0e3q4ronqvgi0.png" alt="App Client Config with no secret" title="App Client Config with no secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to allow admin level access (ie a user with admin permission) you need to check &lt;code&gt;Enable username password auth for admin APIs for authentication (ALLOW_ADMIN_USER_PASSWORD_AUTH)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to allow regular users to login you must also select &lt;code&gt;Enable username password based authentication (ALLOW_USER_PASSWORD_AUTH)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The defaults for the other fields should be ok. Be sure to save your changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimal-iam-permissions"&gt;
  &lt;/a&gt;
  Minimal IAM permissions
&lt;/h3&gt;

&lt;p&gt;As far as I can tell, these are the minimal IAM permissions to make the aws &lt;code&gt;cognito-idp&lt;/code&gt; command work for admin and regular users of AppSync (replace the Resource arn with the arn of the user pool[s] you want to control):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VisualEditor0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:AdminInitiateAuth"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:AdminGetUser"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:cognito-idp:us-east-1:XXXXXXXXXXXXX:userpool/us-east-1_XXXXXXXXX"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VisualEditor1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:GetUser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"cognito-idp:InitiateAuth"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-credentials-with-no-app-client-secret"&gt;
  &lt;/a&gt;
  Get the Credentials with no App Client Secret
&lt;/h3&gt;

&lt;p&gt;This example is if you did not set the App Client Secret.&lt;/p&gt;

&lt;p&gt;You should now be able to get the JWT credentials from the AWS CLI.&lt;/p&gt;

&lt;p&gt;This assumes you have&lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html"&gt; set up your&lt;/a&gt; &lt;code&gt;~/.aws/credentials&lt;/code&gt; file or whatever is appropriate for your command line environment so that you have the permissions to access this service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When using the &lt;code&gt;ADMIN_USER_PASSWORD_AUTH&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp admin-initiate-auth &lt;span class="nt"&gt;--user-pool-id&lt;/span&gt; us-east-1_XXXXXXXXXX &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; ADMIN_USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username1,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;XXXXXXXXXXXXX &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When using the &lt;code&gt;USER_PASSWORD_AUTH&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp initiate-auth &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username2,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;XXXXXXXXXXXX &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course replace the &lt;code&gt;XXXX&lt;/code&gt;'s with the actual values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;user-pool-id&lt;/code&gt; - The pool id found at the top of the &lt;em&gt;User Pool Client Apps&lt;/em&gt; page&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;client-id&lt;/code&gt; - The &lt;code&gt;client-id&lt;/code&gt; of the &lt;code&gt;app client&lt;/code&gt; you are using&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;USERNAME&lt;/code&gt; - The Username normally used to login to your Amplify app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PASSWORD&lt;/code&gt; - The Password normally used to login to your Amplify app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results will be in &lt;code&gt;creds.json&lt;/code&gt;. (You could not use the &lt;code&gt;&amp;gt; creds.json&lt;/code&gt; if you want to just see the results)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-the-credentials-when-there-is-an-app-client-secret"&gt;
  &lt;/a&gt;
  Get the Credentials when there is an App Client Secret
&lt;/h3&gt;

&lt;p&gt;This assumes you have an App Client that has an &lt;code&gt;app secret key&lt;/code&gt; set.&lt;/p&gt;

&lt;p&gt;The main thing here is you need to generate a &lt;code&gt;secret hash&lt;/code&gt; to send along with the command.&lt;/p&gt;

&lt;p&gt;You can do that by creating a little python program to generate it for you when you need it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app_client_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;secret_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;digestmod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SECRET HASH:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;secret_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"len sys.argv: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;" &amp;lt;username&amp;gt; &amp;lt;app_client_id&amp;gt; &amp;lt;app_client_secret&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file someplace that you can execute it from like &lt;code&gt;~/bin/app-client-secret-hash&lt;/code&gt; and make it executable (&lt;code&gt;chmod a+x ~/bin/app-client-secret-hash&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;app-client-id&lt;/code&gt; - The &lt;code&gt;client-id&lt;/code&gt; of the &lt;code&gt;app client&lt;/code&gt; you are using&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app-client-secret&lt;/code&gt; - The secret of the &lt;code&gt;app client&lt;/code&gt; you are using (its on the App Client page of the User Pool)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;USERNAME&lt;/code&gt; - The Username normally used to login to your Amplify app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/bin/app-client-secret-hash  &amp;lt;username&amp;gt; &amp;lt;app_client_id&amp;gt; &amp;lt;app_client_secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where of  course you replace the arguments with the actual values. &lt;/p&gt;

&lt;p&gt;The result is a &lt;code&gt;secret-hash&lt;/code&gt; you will use in the following command to get the actual JWT credentials&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp admin-initiate-auth &lt;span class="nt"&gt;--user-pool-id&lt;/span&gt; us-east-1_XXXXXXXXXX &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; ADMIN_USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username3,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'secret password'&lt;/span&gt;,SECRET_HASH&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'secret-hash'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could do the same thing with &lt;code&gt;USER_PASSWORD_AUTH&lt;/code&gt; if you nee that instead&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws cognito-idp initiate-auth &lt;span class="nt"&gt;--auth-flow&lt;/span&gt; USER_PASSWORD_AUTH &lt;span class="nt"&gt;--client-id&lt;/span&gt; XXXXXXXXXXXXX &lt;span class="nt"&gt;--auth-parameters&lt;/span&gt; &lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;rob+admin,PASSWORD&lt;span class="o"&gt;=&lt;/span&gt;XXXXXXXXX,SECRET_HASH&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'secret-hash'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; creds.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-credentials"&gt;
  &lt;/a&gt;
  Using the Credentials
&lt;/h2&gt;

&lt;p&gt;How you use these credentials depends on what tool or  how you are trying to access your AppSync APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-some-javascript"&gt;
  &lt;/a&gt;
  From some Javascript
&lt;/h3&gt;

&lt;p&gt;You can just add in the &lt;code&gt;IdToken&lt;/code&gt; from the &lt;code&gt;creds.json&lt;/code&gt; as an &lt;code&gt;Authorization&lt;/code&gt; header when you build the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;graphQLFetcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphQLParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;APPSYNC_API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TYPE_YOUR_APPSYNC_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;credentialsAppSync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJraWQiOiI1dVUwMld...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;APPSYNC_API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;credentialsAppSync&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphQLParams&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;omit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using some GraphQL tool that needs to access your AppSync APIs. The tool should have a way that you can supply the token and it will add it as an &lt;code&gt;Authorization&lt;/code&gt; header for its own requests.&lt;/p&gt;

&lt;p&gt;Do let me know if you have some examples of tools that would make use of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/mobile/appsync-graphiql-local/"&gt;Explore AWS AppSync APIs with GraphiQL from your local machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/cognito-unable-to-verify-secret-hash/"&gt;How do I troubleshoot "Unable to verify secret hash for client " errors from my Amazon Cognito user pools API?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>appsync</category>
      <category>graphql</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Vocabulary Building Day 4</title>
      <author>vindhya Hegde </author>
      <pubDate>Wed, 01 Sep 2021 01:00:39 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-4-383o</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-4-383o</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;demur&lt;/strong&gt;(verb) : object or show reluctance&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2owZ5CSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.thinglink.me/api/image/621360813881425922/1240/10/scaletowidth" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2owZ5CSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.thinglink.me/api/image/621360813881425922/1240/10/scaletowidth" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=demur&amp;amp;oq=demur&amp;amp;aqs=chrome.0.69i59j0i433i512l6j0i512l3.4697j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;amorphous&lt;/strong&gt;(adjective) : shapeless&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--osYBv_5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ocw.mit.edu/courses/materials-science-and-engineering/3-071-amorphous-materials-fall-2015/3-071f15.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--osYBv_5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ocw.mit.edu/courses/materials-science-and-engineering/3-071-amorphous-materials-fall-2015/3-071f15.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=amorphous&amp;amp;oq=amorphous&amp;amp;aqs=chrome.0.69i59j0i433i512l2j0i512l5j0i433i512j0i512.5265j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;venality&lt;/strong&gt;(noun): the condition of being susceptible to bribes or corruption&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-wBr80j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-WNqDum-V-IQ/V4QVryAF8-I/AAAAAAAAB9Y/7aYhpVUoJNYFOs2YqN4YzcVnn9EhNLmDwCLcB/s320/bribe%252Bdefinition.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-wBr80j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://2.bp.blogspot.com/-WNqDum-V-IQ/V4QVryAF8-I/AAAAAAAAB9Y/7aYhpVUoJNYFOs2YqN4YzcVnn9EhNLmDwCLcB/s320/bribe%252Bdefinition.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.dictionary.com/browse/venality"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;enervate&lt;/strong&gt;(verb) : to sap energy from.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x5-EYd51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://webmaggu.com/wp-content/uploads/2014/12/enervate.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x5-EYd51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://webmaggu.com/wp-content/uploads/2014/12/enervate.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=enervate&amp;amp;oq=enervate&amp;amp;aqs=chrome..69i57j0i433i512l2j0i512l7.9787j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
5.&lt;strong&gt;ingenuous&lt;/strong&gt;(adjective): to be naive and innocent&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlTsQ3aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/ingenuous-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlTsQ3aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/ingenuous-1.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=ingenuous&amp;amp;oq=ingenuous&amp;amp;aqs=chrome..69i57j0i433i512j0i512l4j0i10i512j0i512l3.11675j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;

</description>
      <category>day4</category>
    </item>
    <item>
      <title>My Best 9 VS Code Extensions!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 31 Aug 2021 23:54:05 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/my-best-9-vs-code-extensions-189b</link>
      <guid>https://dev.to/ayabouchiha/my-best-9-vs-code-extensions-189b</guid>
      <description>&lt;p&gt;I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today I'm going to share with you my best 9 vscode extensions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode#:~:text=Prettier%20is%20an%20opinionated%20code,account%2C%20wrapping%20code%20when%20necessary."&gt;prettier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-comments"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;better comments&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Better Comments extension will help you create more human-friendly comments in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thunder-client"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;thunder client&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;for testing sending http requests like postman&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autorename-tag"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;AutoRename tag&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;autoRenameTag: used for automatically rename paired HTML/XML tag,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bracket Pair Colorizer 2: used for colorizing (), {} and []&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quokka"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode"&gt;Quokka&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Quokka.js is a developer productivity tool for rapid JavaScript / TypeScript prototyping. Runtime values are updated and displayed in your IDE next to your code, as you type&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;one of my favorites theme&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-icon-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;for changing the default directories icon to  Material Design Icons according to the directory's name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indentrainbow"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent-rainbow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Indent rainbow: used for making indentations mor readable.&lt;/p&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Parcel Template Project</title>
      <author>Jesus Ramirez</author>
      <pubDate>Tue, 31 Aug 2021 22:36:03 +0000</pubDate>
      <link>https://dev.to/jesusrmz19/parcel-template-project-3a67</link>
      <guid>https://dev.to/jesusrmz19/parcel-template-project-3a67</guid>
      <description>&lt;p&gt;By now, I have initialized more than 10 different projects with Parcel, some with just regular CSS, some with SCSS included but all using the same file and folder structure so I guess is about time I create a start up template that I can clone from Github to my local machine and just get everything up and running.&lt;/p&gt;

&lt;p&gt;Parcel, as you may know by now, maybe, is a simple web application bundler that doesn't require a config file. The tool bundles all individual files as modules into one big-ass file that will be executed by the browser. Parcel works with a lot of different file types: HTML, CSS, SCSS, LESS, Stylus, JavaScript, TypeScript, etc. but I've only used it with either HTML + CSS + JS or HTML + SCSS + JS, and I love it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-files-amp-folder-structure"&gt;
  &lt;/a&gt;
  Basic Files &amp;amp; Folder Structure
&lt;/h2&gt;

&lt;p&gt;I'm sure that the way I structure my files and folders is nothing extrordinary as I'm almost 100% sure that this is how EVERYBODY structures their own projects. Basically you have one root folder with the main index.html file and two subfolders: dist &amp;amp; src.&lt;/p&gt;

&lt;p&gt;The distribution or dist folder is where the project that the browser see lives, this is the folder that will have all your production ready files, the map.css file, the bundle js file, the optimized images, etc. It is important to tell that even if you don't create this folder, Parcel will create this for you during the development process or production build.&lt;/p&gt;

&lt;p&gt;The source or src folder is where all the diferent modules and files live, Parcel will look into the folders within the src folder and bundle the files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOIyUf38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvv845hjn3nplzsbp7f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOIyUf38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvv845hjn3nplzsbp7f.jpg" alt="Folder Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-init"&gt;
  &lt;/a&gt;
  NPM Init
&lt;/h2&gt;

&lt;p&gt;Now that we have the structure, lets install Parcel, for that we are going to use the always reliable and always ready node package manager (NPM) and it's basic npm init command. I know there are different terminals but I'm a simple guy that uses VS CODE, which means I always use the VSCODE terminal. &lt;/p&gt;

&lt;p&gt;So go ahead an open your prefered terminal, just make sure that you're inside the root folder of your project and then type the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After typing that you will see a lot of basic questions like name, description, version, etc. you can fill those now or later, there's no difference. I always hit the return key until they're all done and then modify the information in the package.json file&lt;/p&gt;

&lt;p&gt;Now, you will see a new file in your root folder: package.json, and it should look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcelproject_template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#install-parcel"&gt;
  &lt;/a&gt;
  Install Parcel
&lt;/h2&gt;

&lt;p&gt;Now we install Parcel by running the command below in your terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install parcel --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We installed it as a dev dependency because we don't really need it for production, it's a tool that we will use to bundle and deploy the site but the code that actually does all this is not needed in the browser, as all this is done behind the curtain&lt;/p&gt;

&lt;p&gt;In the past, and by past I mean two or three months ago, there was something going on with Parcel 2.0 that it was causing me to delete the cache folder and running the program over and over again to see the changes I've made to either HTML or CSS, but the last time I used it, it worked fine.&lt;/p&gt;

&lt;p&gt;So just in case this happens to you I'm goign to tell you how I fixed it. To start I had to uninstall Parcel 2.0 by putting the command below in the terminal&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall parcel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I just installed a known stable version of Parcel by putting the below command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install parcel@1.12.3 --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;EDITOR'S NOTE:&lt;/strong&gt; I wrote this post in a three day period and on the third day something happened to Parcel 2.0 that stopped working so I had to uninstalled and installed the 1.12.3 version and it's working perfectly.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
Not completely sure this is the best approach and maybe there's something wrong on my side, but this seems to fix my problem everytime. Ok, now that we have Parcel installed, our package.json file should look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcelproject_template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parcel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.0-rc.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What we will do next is to write the scripts that will launch Parcel during development and the build command that will bundle and optimize everything for production. In the block below you will be able see the changes that we made to our package.json.&lt;/p&gt;

&lt;p&gt;We removed the main direction in order to direct Parcel with the command build where to actually create the bundle files. And then we typed in two extra scripts, start, which initialize Parcel and deploys a local host for you to check your site, and build, for production, which would create or replace the files inside the dist folder with new ones all bundle up.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcelproject_template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel build index.html --dist-dir ./dist"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parcel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.0-rc.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-check-if-it-worked"&gt;
  &lt;/a&gt;
  How to check if it worked?
&lt;/h2&gt;

&lt;p&gt;At this moment I have a bunch of empty folders and an empty index.html file but in order to test that Parcel is actually working and doing what it needs to do we create basic HTML, CSS, JS files.&lt;/p&gt;

&lt;p&gt;Go ahead and add the below code to your files:&lt;/p&gt;

&lt;p&gt;Inside index.html you can see that I already put the reference to the main css and the script js files&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/src/css/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"src/js/script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Placeholder&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create the main.css file inside the css folder that's inside the src folder. Because the intention behind this is create a template you can add whatever CSS you like, I always put the box-sizing at the top and create a main.css file that eventually will have all the imports files&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Gill Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Gill Sans MT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Calibri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Trebuchet MS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And last but not least, the simple and always efficient console log test&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1, 2, 3... Testing Parcel 📦&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now if you go ahead an open up the terminal and put the command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see something like the image below, and the message you put in your script.js file in the browser's dev tools&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVAWFUTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rar3hbt9o9p2ykgjrkp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVAWFUTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rar3hbt9o9p2ykgjrkp1.png" alt="Hello World in white with Black Background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-repo-and-use"&gt;
  &lt;/a&gt;
  GitHub Repo and Use
&lt;/h2&gt;

&lt;p&gt;Now that we have the folder, we can create a repo, initiate git in our root folder and commit all the files we have, just remember to create a .gitignore file to include things like the node_modules folder or the Parcel cache folder.&lt;/p&gt;

&lt;p&gt;Congratz! Now you have an easy template that you can clone and push to a new repo! If you want to see how to clone and change the URL, go and read the instructiosn in the README file of my &lt;a href="https://github.com/jesusrmz19/Parcel_Template"&gt;Parcel_Template&lt;/a&gt; repo.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jesusrmz19"&gt;
        jesusrmz19
      &lt;/a&gt; / &lt;a href="https://github.com/jesusrmz19/Parcel_Template"&gt;
        Parcel_Template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Template with ParcelJS as bundler and vanilla CSS 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Project Template&lt;/h1&gt;
&lt;p&gt;This is an empty repo that is ready to be cloned anywhere and start coding with Parcel as bundler.&lt;/p&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jesusrmz19/Parcel_Template#instructions"&gt;Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jesusrmz19/Parcel_Template#author"&gt;Author&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Instructions&lt;/h2&gt;
&lt;p&gt;Want to use it? Just clone it! Follow these simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new folder in your computer&lt;/li&gt;
&lt;li&gt;In the command line, make sure you're in that folder&lt;/li&gt;
&lt;li&gt;Type the following to clone this repo:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/jesusrmz19/Parcel_Template.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Now your new folder will download a folder called Parcel_Template&lt;/li&gt;
&lt;li&gt;Change to the Parcel_Template folder:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;cd Parcel_Template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start="6"&gt;
&lt;li&gt;Make a new repo, in this case, the new one is called example&lt;/li&gt;
&lt;li&gt;Type the following in the command line&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git remote set-url origin https://github.com/user/example.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it! The command above will change the origin of your repo and now the next change you make will commit all the files to the new repo you just created.&lt;/p&gt;
&lt;p&gt;NOTE: Remember to run npm install in your machine after changing the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jesusrmz19/Parcel_Template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>New MMO Games API By MMOBomb</title>
      <author>Luis Paulo Dobreira</author>
      <pubDate>Tue, 31 Aug 2021 21:44:11 +0000</pubDate>
      <link>https://dev.to/ldobreira/new-mmo-games-api-by-mmobomb-5f7m</link>
      <guid>https://dev.to/ldobreira/new-mmo-games-api-by-mmobomb-5f7m</guid>
      <description>&lt;p&gt;MMOBomb just launched the MMO Games API and everyone can use it for free at &lt;a href="https://www.mmobomb.com/api"&gt;https://www.mmobomb.com/api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the last few months, MMOBomb.com has been rebuilt from the ground up with this API at the core of its planned functionality. Users can now tap directly into multiplayer gaming news, game lists, giveaways, and more for use in their personal projects, apps, discord channels, and more. Best of all, this access is free and easy to use without restrictions or limitations.&lt;/p&gt;

&lt;p&gt;Over 8 endpoints are already online for your use, and more are on the way! Access programmatically the best multiplayer online games, by platform, by genre, and more! &lt;a href="https://www.mmobomb.com"&gt;MMOBomb&lt;/a&gt; is also taking suggestions on custom API functionality that creators need for their projects. Future enhancements already include the ability to track news from specific games and RapidAPI support.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>api</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Importing modules in JavaScript, are we doing it right?</title>
      <author>Diego Juliao</author>
      <pubDate>Tue, 31 Aug 2021 21:39:43 +0000</pubDate>
      <link>https://dev.to/dianjuar/importing-modules-in-javascript-are-we-doing-it-right-nc</link>
      <guid>https://dev.to/dianjuar/importing-modules-in-javascript-are-we-doing-it-right-nc</guid>
      <description>&lt;p&gt;We as Javascript developers need to use libraries in our day to day, it simplifies our work a lot. Nowadays we do that in this way mostly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we quickly analyze it, in the first statement we are importing everything and putting it on a variable called &lt;code&gt;lib&lt;/code&gt;, on the second, we are importing everything again and destructuring only what we need; what about all the other code that I'm not using?&lt;/p&gt;



&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#will-not-all-the-unused-librarys-code-end-up-on-the-final-bundle-making-my-application-unnecessary-heavier"&gt;
  &lt;/a&gt;
  &lt;em&gt;Will not all the unused library's code end up on the final bundle making my application unnecessary heavier?&lt;/em&gt;
&lt;/h2&gt;
&lt;/blockquote&gt;



&lt;p&gt;Today you will learn how to improve your bundle size just by changing the way you import. After this, you are going to be able to detect a simple optimization opportunity for your bundle!&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#tl-dr"&gt;
  &lt;/a&gt;
  TL; DR
&lt;/h2&gt;

&lt;p&gt;Verify if the library has support for ES6 and you can import freely, you will get always the best result 🙆‍♂️. If it doesn't ⚠️, you need to import using cherry-picking.&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#can-we-import-as-we-want-without-consequences"&gt;
  &lt;/a&gt;
  Can we import as we want without consequences?
&lt;/h2&gt;

&lt;p&gt;When we compile our front-end apps, there is a process that Webpack applies called &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;Tree Shaking&lt;/a&gt;. Basically, is code elimination, the code that is not being used by anyone. This process prevents having dead code in our final bundle, making it lighter and the application is going to load faster for our users!&lt;/p&gt;

&lt;p&gt;Let's analyse this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amazing-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases all the library content is being imported, the first place is the easiest to spot, all the library's content is being assigned to the variable &lt;code&gt;lib&lt;/code&gt;, in the second case we are just applying destructuring to the library's content to get what we need. Thanks to Tree Shaking all the unused code doesn't end up on our bundles.&lt;/p&gt;

&lt;p&gt;So, thanks to Tree Shaking I'm excused and I can import however I want and all the unused code imported from the library will be removed automagically?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not always is the case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is a scenario when Tree Shaking is not going to be able to detect what is dead code having as consequence to remove nothing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#es6"&gt;
  &lt;/a&gt;
  ES6
&lt;/h3&gt;

&lt;p&gt;ECMAScript 2015(aka ES6) Module Syntax; it sounds complex, but it's something really popular nowadays. It's just a syntax to import a JS module, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awesome-lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;justAConst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you are using a library that has ES6 Module Syntax compatibility, you don't need to worry, import as will, Tree Shaking have you covered 😉. In fact, is the only module syntax that Tree Shaking supports, let's take a look at the &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tree shaking&lt;/em&gt; is a term commonly used in the JavaScript context for dead-code elimination. It relies on the static structure of ES2015 module syntax, i.e. &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;The webpack 2 release came with built-in support for ES2015 modules (alias harmony modules) as well as unused module export detection...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;
  &lt;a href="#if-you-are-completely-new-about-js-modules"&gt;
  &lt;/a&gt;
  If you are completely new about 👉 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;JS Modules&lt;/a&gt;
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#no-es6-module-syntax"&gt;
  &lt;/a&gt;
  No ES6 module syntax
&lt;/h3&gt;

&lt;p&gt;A library can be delivered (packaged) with other module systems different than ES6, even though if its source code uses ES6 module syntax, a compilation process could be implemented to only support &lt;a href="https://nodejs.org/api/modules.html#modules_modules_commonjs_modules"&gt;CommonJS&lt;/a&gt; for example. The projects written using pure JS (with no transpilation process (Babel, TypeScript)) that uses the CommonJs module system is another example.&lt;/p&gt;

&lt;p&gt;So, no ES6 module syntax present = no Tree Shaking. The only way to have a healthy bundle when dealing with libraries with no ES6 is importing using a technique called cherry-picking, you need to specify the absolute path to the file that contains the info needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;small&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;common-js-lib/small&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#downsides"&gt;
  &lt;/a&gt;
  Downsides
&lt;/h4&gt;

&lt;p&gt;Doing only cherry-picking has downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to know the path to the module needed. (Your IDE could help in this quest)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to specify each one of the imports that you need, ex:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/has&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/capitalize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;lastIndexOf&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/lastIndexOf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a maintainer, you may want to have a nice and easy-to-use scaffolding design to detect with ease something in your lib. This needs to be designed, implemented, and maintained.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may forget to do it (ESLint &lt;a href="https://eslint.org/docs/rules/no-restricted-imports"&gt;can help&lt;/a&gt;) making your bundle unnecessary heavier&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#test-performed"&gt;
  &lt;/a&gt;
  Test Performed
&lt;/h2&gt;

&lt;p&gt;Having the theory learned I decided to prove all this. What I did was create some libraries with different module support, create several front-end apps on React and Angular&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; to test if Tree Shaking really does its job.&lt;/p&gt;

&lt;p&gt;The libraries created were simple, they export two variables &lt;code&gt;small&lt;/code&gt; and &lt;code&gt;big&lt;/code&gt;. &lt;code&gt;small&lt;/code&gt; has as a value a doge 🐕, &lt;code&gt;small = '🐕'&lt;/code&gt; but &lt;code&gt;big&lt;/code&gt; instead has 1646400 doges, &lt;code&gt;big = '🐕🐕🐕🐕🐕🐕🐕🐕🐕...'&lt;/code&gt;. This is going to make &lt;code&gt;big&lt;/code&gt; to be 6.3 megabytes of weight.&lt;/p&gt;

&lt;p&gt;Only &lt;code&gt;small&lt;/code&gt; is going to be use at all time, so if &lt;code&gt;big&lt;/code&gt; sneaks into the final bundle we are going to notice it on sight!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#healthy-bundle"&gt;
  &lt;/a&gt;
  Healthy Bundle
&lt;/h3&gt;

&lt;p&gt;This how a healthy bundle looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--miW7B2fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0kar9uiffp7oi7pot3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miW7B2fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0kar9uiffp7oi7pot3w.png" alt="a healthy, bundle of 211.78KB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smelly-bundle"&gt;
  &lt;/a&gt;
  Smelly Bundle 🤢
&lt;/h3&gt;

&lt;p&gt;The smelly one! You can notice a big white box that represents &lt;code&gt;big&lt;/code&gt; and represents 96.7% of the application size:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWljwxf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpvw6wwvwfjpbjhf8fjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWljwxf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpvw6wwvwfjpbjhf8fjp.png" alt="Smelly Bundle, bundle of 6.49MB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;The results were as expected, if your library has to offer ES6 module syntax, Tree Shaking will do its job. If not, cherry-picking was the only way to get a healthy bundle.&lt;/p&gt;

&lt;p&gt;Here is the repo if you are curious &lt;a href="https://github.com/dianjuar/how-to-import"&gt;dianjuar/how-to-import&lt;/a&gt;. All this was created in a Monorepo using &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;, the library's npm publishing was mocked using &lt;a href="https://github.com/wclr/yalc"&gt;yalc&lt;/a&gt;. The bundle analysis was made using &lt;a href="https://www.npmjs.com/package/source-map-explorer"&gt;source-map-explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, I wanted to make this test with popular libraries, so this is what I got, importing as &lt;code&gt;import { whatINeed } from 'popular-lib'&lt;/code&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Healthy Bundle&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/lodash"&gt;lodash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/moment"&gt;moment&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rxjs"&gt;rxjs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/lodash-es"&gt;lodash-es&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/date-fns"&gt;date-fns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/@angular/core"&gt;@angular/core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.n-pmjs.com/package/@angular/material"&gt;@angular/material&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/react"&gt;react&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/react-dom"&gt;react-dom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/@material-ui/core"&gt;@material-ui/core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.npmjs.com/package/@fortawesome/react-fontawesome"&gt;@fortawesome/react-fontawesome&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools"&gt;
  &lt;/a&gt;
  Useful Tools
&lt;/h2&gt;

&lt;p&gt;Along with this experiment, I was using the VsCode extension &lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Import Cost&lt;/a&gt; and was precise along with the result. With the extension, you will be able to see right away how much an import will cost to the bundle. It will not tell you when you are getting a healthy or smelly bundle, but you can tell when an import cost is sus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8/68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8/68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735" alt="Import Cost Live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;
  &lt;a href="#gif-extracted-from-the-readme-of-cost-import"&gt;
  &lt;/a&gt;
  Gif extracted from the &lt;a href="https://github.com/wix/import-cost#import-cost--"&gt;README&lt;/a&gt; of Cost Import
&lt;/h6&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tree Shaking have you covered! You can import however you want and you will be getting a healthy bundle &lt;strong&gt;if and only if&lt;/strong&gt; the library has support for ES6 Module Syntax (&lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can make your bundle unnecessary heavy if you don't cherry-pick the imports on libraries without ES6 module support, like &lt;a href="https://www.npmjs.com/package/lodash"&gt;lodash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Import Cost&lt;/a&gt; can help you to spot an import that needs some refinement.&lt;/p&gt;







&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;The experiment is agnostic to the Framework or Library used, if webpack is involved in the bundling it would take the same effect. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>es6</category>
      <category>treeshaking</category>
    </item>
    <item>
      <title>Stop fixing Numbers - RTL in a web platform (6/6)</title>
      <author>Pedro Figueiredo</author>
      <pubDate>Tue, 31 Aug 2021 21:39:40 +0000</pubDate>
      <link>https://dev.to/pffigueiredo/stop-fixing-numbers-rtl-in-a-web-platform-6-6-29ne</link>
      <guid>https://dev.to/pffigueiredo/stop-fixing-numbers-rtl-in-a-web-platform-6-6-29ne</guid>
      <description>&lt;p&gt;&lt;em&gt;This post is the 6th and final part of a 6 part series, on how to build a RTL compatible web platform, take a look at the previous one &lt;a href="https://dev.to/pffigueiredo/accesible-carousel-rtl-in-a-web-platform-5-6-1jk9"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numbers-are-already-fine"&gt;
  &lt;/a&gt;
  Numbers are already fine
&lt;/h2&gt;

&lt;p&gt;As you might know, the numbers we use in today's world, are &lt;strong&gt;original from Arabic languages&lt;/strong&gt; and commonly called &lt;em&gt;Arabic numerals&lt;/em&gt;. And as the name suggest, these are the same numbers used by the Arabic language and as consequence, by most of the other RTL languages.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-are-they-read-in-the-same-way"&gt;
  &lt;/a&gt;
  But are they read in the same way?
&lt;/h3&gt;

&lt;p&gt;This was my first question, when I switched the document's direction to RTL and started to see phone numbers like &lt;code&gt;965 2221 6656&lt;/code&gt; becoming &lt;code&gt;6656 2221 965&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1SIQ15Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x5swa4lvaajgtz624yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SIQ15Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x5swa4lvaajgtz624yr.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This didn't look right, and after some digging, I found out that numbers are different from words in RTL languages, and these &lt;strong&gt;are actually read from a LTR manner&lt;/strong&gt; (as we do in english). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixing-numbers"&gt;
  &lt;/a&gt;
  Fixing numbers
&lt;/h3&gt;

&lt;p&gt;After knowing that numbers are actually read the same way in in both RTL and LTR, one needs to take the following actions:&lt;/p&gt;

&lt;p&gt;1- Keep track of all the numbers within your platform;&lt;br&gt;
2- Isolate these numbers into separate components/html tags;&lt;br&gt;
3- Add &lt;code&gt;direction: ltr&lt;/code&gt; to those isolated numbers;&lt;/p&gt;

&lt;p&gt;After completing the tasks above, it doesn't really matter what's the document's defined direction, as it will be overridden and make numbers always look the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftkpEfyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br8ddodfzwkhux81z12q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftkpEfyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br8ddodfzwkhux81z12q.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-inputs"&gt;
  &lt;/a&gt;
  Text Inputs
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I'm referring to &lt;strong&gt;text inputs&lt;/strong&gt; as all the inputs with the type of &lt;code&gt;text&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Text inputs usually serve to one thing only: taking text input from the users. But due to higher UX standards brought by the later years of the web ecosystem, that's not always true.&lt;/p&gt;

&lt;p&gt;I'm talking about text inputs that take numbers for the most part, but have a few &lt;code&gt;symbols&lt;/code&gt; or  &lt;code&gt;spaces&lt;/code&gt; in-between to give the users hints on how to fill in the field.&lt;/p&gt;

&lt;p&gt;Some obvious examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Credit card number inputs =&amp;gt; xxxx xxxx xxxx xxxx;&lt;/li&gt;
&lt;li&gt;Date inputs =&amp;gt; MM/YY&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-problem-with-text-inputs"&gt;
  &lt;/a&gt;
  The problem with text inputs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktt9thws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AadNlbuUMVAOzhgezkC-0_Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktt9thws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AadNlbuUMVAOzhgezkC-0_Q.gif" alt="Gif of text input with numbers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the gif above, we can check that something &lt;strong&gt;seems awfully wrong&lt;/strong&gt; with the credit card number input. As I was actually trying to type "4111 2341 2312 3123", the numbers were being left behind. And that's simply because as we stated above, numbers should be kept always in the LTR direction. &lt;/p&gt;

&lt;p&gt;Unfortunately &lt;strong&gt;changing the direction here is a mistake&lt;/strong&gt; and will not solve our problems, as it would make the numbers to be written from the left side of the input, and we don't want that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lefttoright-mark-to-the-rescue"&gt;
  &lt;/a&gt;
  Left-to-Right mark to the rescue
&lt;/h3&gt;

&lt;p&gt;Luckily there is one &lt;strong&gt;invisible unicode&lt;/strong&gt; called &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H34.html"&gt;left-to-right mark&lt;/a&gt; that will turn any piece of text into Left-to-Right, doesn't really matter what's the defined direction. &lt;/p&gt;

&lt;p&gt;This mark was literally created to &lt;strong&gt;force the the LTR direction&lt;/strong&gt; of any given text, as stated in docs bellow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The objective of this technique is to use Unicode left-to-right mark to override the HTML bidirectional algorithm when it produces undesirable results.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;In more practical terms, to fix text inputs, all you need is to append this left-to-right mark to the start of the text input value.&lt;/p&gt;

&lt;p&gt;Something like this code sample, should do the trick 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// marks the input with LTR &lt;/span&gt;
&lt;span class="c1"&gt;// despite the specified direction&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LEFT_TO_RIGHT_MARK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;‎&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;u200e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;InputLTR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCardNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onInputChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newCardNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LEFT_TO_RIGHT_MARK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCardNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCardNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cardNumber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LEFT_TO_RIGHT_MARK&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onInputChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;1- &lt;strong&gt;Look for any numbers&lt;/strong&gt; that you are showing in your web platform, and check if they are being presented in the correct way for both RTL and LTR.&lt;/p&gt;

&lt;p&gt;2- If you have any inputs of type &lt;code&gt;text&lt;/code&gt; or &lt;code&gt;tel&lt;/code&gt; that will exclusively accept numbers, make sure to append the left-to-right mark to their value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make sure to follow me on &lt;a href="https://twitter.com/P_FFigueiredo"&gt;twitter&lt;/a&gt;, as I will keep posting good content on how to keep an accessible web platform !&lt;/em&gt; 🙏&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>a11y</category>
      <category>react</category>
    </item>
    <item>
      <title>Web Scrapping 101!  Introduction to Web Scrapping in Python.</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Tue, 31 Aug 2021 20:56:00 +0000</pubDate>
      <link>https://dev.to/phylis/web-scrapping-101-introduction-to-web-scrapping-in-python-56cn</link>
      <guid>https://dev.to/phylis/web-scrapping-101-introduction-to-web-scrapping-in-python-56cn</guid>
      <description>&lt;p&gt;Web Scraping  makes it  easier and faster when you have to pull a large amount of data from websites.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#what-is-web-scrapping"&gt;
  &lt;/a&gt;
  What is web scrapping?
&lt;/h6&gt;

&lt;p&gt;It is an automated method used to extract large amounts of data from websites. &lt;br&gt;
The data on the websites are unstructured therefore Web scraping helps collect these unstructured data and store it in a structured form. &lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#applications-of-web-scraping"&gt;
  &lt;/a&gt;
  Applications of web scraping.
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Job listings&lt;/strong&gt;: Details regarding job openings, interviews are collected from different websites and then listed in one place so that it is easily accessible to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Social Media Scraping&lt;/strong&gt;: used to collect data from Social Media websites such as Twitter to find out what’s trending.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email address gathering&lt;/strong&gt;:companies that use email as a medium for marketing, use web scraping to collect email ID and then send bulk emails.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E-Commerce pricing&lt;/strong&gt;:e-commerce sellers use web scraping to collect data from online shopping websites and use it to compare the prices of products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Academic Research&lt;/strong&gt;: Since data is an integral part of any research, be it academic, marketing or scientific, Web Scrapping helps you gather structured data from multiple sources in the Internet with ease.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#benefits-of-using-python-web-scraping-tools"&gt;
  &lt;/a&gt;
  Benefits of using Python web scraping tools.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Python syntaxes are simple, clear, and easy to read. Meaning anyone, including beginners, can easily use them to write scraping scripts.&lt;/li&gt;
&lt;li&gt;Scripts written in Python are generally easy and quick to write, requiring only a few lines of code.&lt;/li&gt;
&lt;li&gt;Python tools such as Beautiful Soup and Scrapy can be easily used to develop high-performing, very efficient and easy to debug web scrapers.&lt;/li&gt;
&lt;li&gt;Since Python is an all-around language, its tools can build a very flexible web scraper that does data extraction, importation, parsing and  visualization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#popular-python-libraries-to-perform-web-scraping"&gt;
  &lt;/a&gt;
  Popular Python Libraries to Perform Web Scraping.
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Requests&lt;/strong&gt; &lt;br&gt;
It is a Python library used for making various types of HTTP requests like GET, POST.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BeautifulSoup&lt;/strong&gt;&lt;br&gt;
 It is the most widely used Python library for web scraping that creates a parse tree for parsing HTML and XML documents. &lt;br&gt;
Beautiful Soup automatically converts incoming documents to Unicode and outgoing documents to UTF-8.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium&lt;/strong&gt;&lt;br&gt;
It is a Python library originally made for automated testing of web applications. &lt;br&gt;
It is a web driver made for rendering web pages and also to scrape dynamically populated web pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lxml&lt;/strong&gt;&lt;br&gt;
It is a high performance, blazingly fast, production-quality HTML, and XML parsing Python library.&lt;br&gt;
Works well when scrapping large datasets and also allows you to extract data from HTML using XPath and CSS selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scrapy&lt;/strong&gt;&lt;br&gt;
It is not just a library but a web scraping framework.&lt;br&gt;
Scrapy provides spider bots that can crawl multiple websites and extract the data. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this article we will use BeautifulSoup and Requests libraries to scrape.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To extract data using BeautifulSoup and Requests libraries following steps are followed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sending an HTTP GET request to the URL of the webpage that you want to scrape, which will respond with HTML content using the Request library of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fetching and parsing the data using Beautifulsoup and maintain the data in some data structure such as Dict or List.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analyzing the HTML tags and their attributes, such as class, id, and other HTML tag attributes. Also, identifying your HTML tags where your content lives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing the data in the required format eg CSV, XLSX or JSON&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#web-scraping-example"&gt;
  &lt;/a&gt;
  Web Scraping Example.
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Understanding and Inspecting the Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inspection of the page which you want to scrape is the most important job in web scraping &lt;br&gt;
Without knowing the structure of the webpage, it is very hard to get the needed information.&lt;/p&gt;

&lt;p&gt;In this article, we will scrap data available &lt;a href="https://www.pythontutorial.net/"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To inspect data that you wish to scrape,  right-click on that text  and click on inspect to examine the tags and attributes of the element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the Essential Python Libraries&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="n"&gt;beautifulsoup4&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Importing the Essential Libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Import the "requests" library to fetch the page content and bs4 (Beautiful Soup) for parsing the HTML page content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Collecting and Parsing a Webpage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the next step, we will make a GET request to the url and will create a parse Tree object(soup) with the help of BeautifulSoup and Python built-in "lxml" parser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://www.pythontutorial.net/"&lt;/span&gt;

&lt;span class="c1"&gt;# Make a GET request to fetch the raw HTML content
&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c1"&gt;# Parse the html content
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'lxml'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our output will be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFJcS4JN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/es87gv5akirioyppvmy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFJcS4JN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/es87gv5akirioyppvmy3.png" alt="Screenshot (101)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also print some basic information from it:&lt;/p&gt;

&lt;p&gt;print the title of the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python Tutorial - Learn Python Programming from Scratch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Print links in the page along with its attributes, such as href, title, and its inner Text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inner Text: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Title: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"href: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sample Output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gEqcvV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9nk0umemeyxs4uo0wag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gEqcvV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9nk0umemeyxs4uo0wag.png" alt="Screenshot (102)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finding all instances of a tag at once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sample output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d34DWSfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l19kgk3tdx7tox0uixt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d34DWSfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l19kgk3tdx7tox0uixt.png" alt="Screenshot (103)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Searching for tags by class and id&lt;/p&gt;

&lt;p&gt;We can use the find_all method to search for items by class or by id.&lt;br&gt;
In this case we’ll search for any h tag that has the class entry_title:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'entry_title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Searching for elements by id:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also search for items using CSS selectors.&lt;br&gt;
Example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;p a&lt;/em&gt; — finds all a tags inside of a p tag.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;body p a&lt;/em&gt; — finds all a tags inside of a p tag inside of a body tag.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;html body&lt;/em&gt; — finds all body tags inside of an html tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets now use CSS selectors to find all the p tags in our page that are inside of a div;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"div p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9GhpN2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mnxquv1uodilqy6eeq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9GhpN2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mnxquv1uodilqy6eeq.png" alt="Screenshot (104)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have understood the  python web scrapping  basics.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>How I keep up with the latest Front-End Development news, without scrolling my life away</title>
      <author>Rach Smith</author>
      <pubDate>Tue, 31 Aug 2021 20:52:00 +0000</pubDate>
      <link>https://dev.to/rachsmith/how-i-keep-up-with-the-latest-front-end-development-news-without-scrolling-my-life-away-58a6</link>
      <guid>https://dev.to/rachsmith/how-i-keep-up-with-the-latest-front-end-development-news-without-scrolling-my-life-away-58a6</guid>
      <description>&lt;p&gt;There are very few things I missed when I quit spending time on Twitter, but one of them was keeping up with the latest news and links from the JavaScript/Front-End world.&lt;/p&gt;

&lt;p&gt;Thankfully, I found the answer to staying up to date on the latest &lt;em&gt;without&lt;/em&gt; having to scroll my life away: email newsletters.&lt;/p&gt;

&lt;p&gt;There are multiple really great newsletters that round up all the posts and library news for the week and create a convenient list for you.&lt;/p&gt;

&lt;p&gt;Here's my workflow: I open the email, scan the list, save the links that look interesting to me in my &lt;a href="https://instapaper.com"&gt;Instapaper&lt;/a&gt;, and delete the email. Later, when I have time to read, I go ahead and read the saved articles in Instapaper.&lt;/p&gt;

&lt;p&gt;I find this the most efficient way to stay on top of what's happening in the community without having to expose myself to threads of dev thinkbois fighting about who's opinion is more problematic.&lt;/p&gt;

&lt;p&gt;Here is a list of the newsletters I am subscribed to at the moment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt; - latest news and interesting blog posts about JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://frontendfoc.us/"&gt;Frontend Focus&lt;/a&gt; - articles and links to tools for anything Front-End.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://react.statuscode.com/"&gt;React Status&lt;/a&gt; - React news and links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://a11yweekly.com/"&gt;A11y Weekly&lt;/a&gt; - News, articles and resources on Web Accessibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.getrevue.co/profile/codewithveni/"&gt;Diversify Tech: Spotlight&lt;/a&gt; - Resources and articles across tech.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://heydesigner.com/newsletter/"&gt;HeyDesigner Weekly Digest&lt;/a&gt; - Design and Front-End tools, resources and opinions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>resources</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Hosting Python Packages in Azure DevOps</title>
      <author>Vivek0712</author>
      <pubDate>Tue, 31 Aug 2021 20:31:31 +0000</pubDate>
      <link>https://dev.to/vivek0712/hosting-python-packages-in-azure-devops-1foo</link>
      <guid>https://dev.to/vivek0712/hosting-python-packages-in-azure-devops-1foo</guid>
      <description>&lt;p&gt;The blog is about how to build some custom python libraries and store them as private artifacts in the Azure DevOps using Pipelines. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Working as a Data Scientist and Cloud Solutions Architect in my startup &lt;a href="https://nexstem.ai"&gt;CortexBCI&lt;/a&gt;, I had the responsibility to host and publish our Wisdom PythonSDK for Brain Controlled Interface application development. This was the first motivation for me to write the blog to simplify the process of hosting python packages in Azure DevOps for other developers. I read through several documentations and blogs for the same but the one which helped me a lot was the blog written by &lt;a href="https://www.linkedin.com/in/heraldgjura/"&gt;Herald Gjura&lt;/a&gt;, App Dev Manager, Microsoft. The blog I have written is heavily inspired from him. I have adopted VSCode as my primary IDE for coding and also new changes in Azure DevOps version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-azure-devops"&gt;
  &lt;/a&gt;
  Introduction to Azure DevOps
&lt;/h2&gt;

&lt;p&gt;Azure DevOps provides developer services for support teams to plan work, collaborate on code development, and build and deploy applications. Azure DevOps supports a culture and set of processes that bring developers and project managers and contributors together to complete software development. It allows organizations to create and improve products at a faster pace than they can with traditional software development approaches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#services-in-azure-devops"&gt;
  &lt;/a&gt;
  Services in Azure DevOps
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLenacpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xt82prx97y2994wtu7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLenacpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xt82prx97y2994wtu7h.png" alt="DevOps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-azure-devops"&gt;
  &lt;/a&gt;
  Setting up Azure DevOps
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a project in Azure DevOps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqtYmbIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6riuwgs1esbw14gn3ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqtYmbIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6riuwgs1esbw14gn3ph.png" alt="project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a repo for Python Package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any version control and code-hosting services like GitHub or simply create a repo in Azure Repos in DevOps Project we had created. In my case, I am going to create a repo in GitHub&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WAGBUdk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1au3wyyycyy8ptmxdkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WAGBUdk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1au3wyyycyy8ptmxdkl.png" alt="Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-python-local-environment"&gt;
  &lt;/a&gt;
  Setting up Python (local) environment
&lt;/h2&gt;

&lt;p&gt;Open your favourite IDE (I prefer VSCode)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a local directory for python package&lt;/li&gt;
&lt;li&gt;Create a Python Virtual Environment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; devopsenv &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt;  ./devopsvenv/bin/activate

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Clone your repo
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &amp;lt;your git repo.git&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install required python packages

&lt;ul&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;li&gt;wheel&lt;/li&gt;
&lt;li&gt;twine&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#coding-and-testing-your-python-packages"&gt;
  &lt;/a&gt;
  Coding and Testing your Python Packages
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#coding-python-packages"&gt;
  &lt;/a&gt;
  Coding Python Packages
&lt;/h3&gt;

&lt;p&gt;Packages in Python are any set of folders, and subfolders, that have an &lt;strong&gt;init&lt;/strong&gt;.py file in it (each folder or subfolder needs to have an &lt;strong&gt;init&lt;/strong&gt;.py file, even an empty one).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Select a name for your top python package&lt;br&gt;
Chose a meaningful, but short (best a one-word). I am to create a python package called "animalsounds"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we can create subpackages. I am going to create different animals as its subpackages (for example dog, cat etc). Its functionality can be retrieved as animalsounds.dog.. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create &lt;strong&gt;init&lt;/strong&gt;.py file for each subpackage. You can write you functions directly in the &lt;strong&gt;init&lt;/strong&gt;.py file. However, I prefer to write them in separate files and group them by functionality. So create functions.py under each subpackage and write the methods under it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2K2Aw6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlth0k80arkw6nd60jy0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2K2Aw6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlth0k80arkw6nd60jy0.png" alt="dir"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside each __init__.py, write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.functions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under dog/functions.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Woof! Woof!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under cat/functions.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Meow! Meow!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-python-packages"&gt;
  &lt;/a&gt;
  Testing Python Packages
&lt;/h3&gt;

&lt;p&gt;At the package level &lt;em&gt;animalsounds&lt;/em&gt;, add a new folder called tests. In that folder add an empty &lt;strong&gt;init&lt;/strong&gt;.py file.&lt;/p&gt;

&lt;p&gt;In the tests folder, add a python file called, test_ functions.py. Note: it is very important to prefix all your test files with “test_”, it will be used by the CI framework to identify the unit test files it needs to run.&lt;/p&gt;

&lt;p&gt;Inside the test_functions.py file add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;animalsounds.dog&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;animalsounds.cat&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_doghi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;dogres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dogres&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cathi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;catres&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makesound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catres&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the unit tests, use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pytest &amp;lt;Path to &lt;span class="nb"&gt;test &lt;/span&gt;folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-ready-to-deploy-the-python-package"&gt;
  &lt;/a&gt;
  Getting ready to deploy the Python package
&lt;/h2&gt;

&lt;p&gt;There are a few additional files we will need to add. At the root (application level) add the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LICENSE.txt – You can create while creating the repo in GitHub&lt;/li&gt;
&lt;li&gt;README.md – To describe the package&lt;/li&gt;
&lt;li&gt;MANIFEST.in – This is a file used by the packager to include or exclude files. Now create the file, and add the following to it:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include README.md LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;setup.cfg – Another file used by the packager. Create the file and add the following as text:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[metadata]
license_files = LICENSE

[bdist_wheel]
universal=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;.pypirc – This is an important file. Leave this file empty for now. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;requirements.txt – In this file we will add all the packages that needs to be installed prior to our package, or that our package is dependent on. Add the following:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip
pytest
wheel
twine
setuptools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;setup.py – This is the file where the setup for the package creation goes here. Refer &lt;a href="https://packaging.python.org/guides/making-a-pypi-friendly-readme/"&gt;this&lt;/a&gt; for more details
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'README.md'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'animalsounds'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="c1"&gt;# How you named your package folder (TSIClient)
&lt;/span&gt;  &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'animalsounds'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;   &lt;span class="c1"&gt;# Chose the same as "name"
&lt;/span&gt;  &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'1.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Start with a small number and increase it with every change you make
&lt;/span&gt;  &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'MIT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;# Chose a license from here: https://help.github.com/articles/licensing-a-repository
&lt;/span&gt;  &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text/markdown'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# This is important!
&lt;/span&gt;  &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Vivek Raja P S'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;# Type in your name
&lt;/span&gt;  &lt;span class="n"&gt;author_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'vivekraja98@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Type in your E-Mail
&lt;/span&gt;  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://github.com/Vivek0712/azure-devops-pypackage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# Provide either the link to your github or to your website
&lt;/span&gt;  &lt;span class="c1"&gt;#download_url = 'https://github.com/RaaLabs/TSIClient/archive/v_0.7.tar.gz',    # If you create releases through Github, then this is important
&lt;/span&gt;  &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Azure'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'DevOps'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;   &lt;span class="c1"&gt;# Keywords that define your package best
&lt;/span&gt;  &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'Development Status :: 3 - Alpha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Chose either "3 - Alpha", "4 - Beta" or "5 - Production/Stable" as the current state of your package
&lt;/span&gt;    &lt;span class="s"&gt;'Intended Audience :: Developers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;# Define that your audience are developers
&lt;/span&gt;    &lt;span class="s"&gt;'Topic :: Software Development :: Build Tools'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'License :: OSI Approved :: MIT License'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# Again, pick a license
&lt;/span&gt;    &lt;span class="s"&gt;'Programming Language :: Python :: 3.5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Programming Language :: Python :: 3.6'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Programming Language :: Python :: 3.9'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final project structure should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLp6_e8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ropnbyxphopla6boiyq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLp6_e8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ropnbyxphopla6boiyq5.png" alt="structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizing-azure-devops-pipeline-and-feed"&gt;
  &lt;/a&gt;
  Finalizing Azure DevOps pipeline and feed
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-artifact-feed"&gt;
  &lt;/a&gt;
  Creating a new Artifact Feed
&lt;/h3&gt;

&lt;p&gt;Let's start with creating a new feed for our pipeline. Go to Azure DevOps &amp;gt; Artifacts &amp;gt; Create New feed. Give a suitable name and keep a note of the same as we gonna need it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUwyl9yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2pke49g4tiq1n9ow3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUwyl9yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2pke49g4tiq1n9ow3h.png" alt="feed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-pipeline-for-artifact-creation"&gt;
  &lt;/a&gt;
  Creating Pipeline for Artifact creation
&lt;/h3&gt;

&lt;p&gt;Under Pipelines -&amp;gt; Create a new pipeline. We need to set up for configuration of pipeline which is a 4 step process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect - Connect to your code repository hosting service&lt;/li&gt;
&lt;li&gt;Select - Select the Package repo&lt;/li&gt;
&lt;li&gt;Configure - Create the yml file&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Review - Review if all the configurations are made properly.&lt;br&gt;
And finally Run the pipeline.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The python package which I am planning to host is in my GitHub. So I am going to connect my GitHub with Azure DevOps and authorise the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueBIfVNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obs67rq4qohoqptony4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueBIfVNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obs67rq4qohoqptony4r.png" alt="connect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The required repository is selected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h8rNbhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2juj2zayy181fg9jtydi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h8rNbhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2juj2zayy181fg9jtydi.png" alt="repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under Configure tab, select Starter pipeline and then In the Azure Pipelines, use the yml script given &lt;a href="https://github.com/Vivek0712/azure-devops-pypackage/blob/main/azure-pipelines.yml"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Review and Run the pipeline. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wc7WY017--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fm6xft9iphyqjxiput.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wc7WY017--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4fm6xft9iphyqjxiput.png" alt="Pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thftfQkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mogqzs37b7cfi4lf6za.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thftfQkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mogqzs37b7cfi4lf6za.png" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-release-pipeline"&gt;
  &lt;/a&gt;
  Setting up release Pipeline
&lt;/h2&gt;

&lt;p&gt;Once the pipeline is run, it creates a Dist folder in the code repo which has the artifact. &lt;/p&gt;

&lt;p&gt;To set up a release pipeline to release the artifact we had just created, go to Azure DevOps &amp;gt; Pipelines &amp;gt; Release Pipelines &amp;gt; Create New Release Pipeline.&lt;/p&gt;

&lt;p&gt;Start with an empty template. &lt;/p&gt;

&lt;p&gt;A release pipeline takes an artifact and runs through several stages to publish the artifact as per the pipeline configuration.&lt;/p&gt;

&lt;p&gt;To publish the python package, we are going to select the Build Pipeline artifact and create a stage with one jobs with three tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selecting-the-artifact-source"&gt;
  &lt;/a&gt;
  Selecting the Artifact source
&lt;/h3&gt;

&lt;p&gt;Select the pipeline which we had created before as the source of artifact. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xprOfFw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prtw6hxlgo6l6v7qch36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xprOfFw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prtw6hxlgo6l6v7qch36.png" alt="artifact"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pipeline-stage"&gt;
  &lt;/a&gt;
  Pipeline Stage
&lt;/h3&gt;

&lt;p&gt;Click on the stage and give a suitable name for the same. Click on Jobs and then we are going to create three tasks here. Add Agent Job.&lt;/p&gt;

&lt;p&gt;Task 1: Twine Authenticate &lt;/p&gt;

&lt;p&gt;Search for Twine Authenticate on the right side and add the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0p_UPat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drwp24ydyzw2gu9r6wie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0p_UPat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drwp24ydyzw2gu9r6wie.png" alt="twine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Task 2: Install Twine&lt;/p&gt;

&lt;p&gt;Search for Command line and add it. Name the command script as &lt;em&gt;Install Twine&lt;/em&gt; and add the following to the script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;twine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bN8-_vxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxfhycvdirntnxqdv3ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bN8-_vxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxfhycvdirntnxqdv3ag.png" alt="job2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Task 3: &lt;/p&gt;

&lt;p&gt;Search for Command line and add it. Name the command script as &lt;em&gt;Publish Artifact&lt;/em&gt; and add the following to the script. Replace &lt;em&gt;&lt;/em&gt; with the name of the artifact feed which we had created first and &lt;em&gt;&lt;/em&gt; with the pipeline name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twine upload &lt;span class="nt"&gt;-r&lt;/span&gt; &amp;lt;Artifact Feed Name&amp;gt; &lt;span class="nt"&gt;--config-file&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;PYPIRC_PATH&lt;span class="si"&gt;)&lt;/span&gt; d:&lt;span class="se"&gt;\a\r&lt;/span&gt;1&lt;span class="se"&gt;\a\&amp;lt;&lt;/span&gt;Build Pipeline Name&amp;gt;&lt;span class="se"&gt;\d&lt;/span&gt;ist&lt;span class="se"&gt;\d&lt;/span&gt;ist&lt;span class="se"&gt;\*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9RwvJAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onrih7xi58uhdoekqsz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9RwvJAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onrih7xi58uhdoekqsz5.png" alt="job3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your release pipeline is ready, save it and Run the release pipeline. It may take a couple of minutes to run. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDcaFxQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucg34v4ds0hnutn5em7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDcaFxQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucg34v4ds0hnutn5em7p.png" alt="release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the release pipeline is successfully run, we can see the published artifact in the Artifact.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--csa7CjxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6wv7vg19xgwv97p98so.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csa7CjxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6wv7vg19xgwv97p98so.png" alt="published"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-python-package"&gt;
  &lt;/a&gt;
  Using the Python Package
&lt;/h2&gt;

&lt;p&gt;Now that our python package is published, we will see how to use it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-personal-token"&gt;
  &lt;/a&gt;
  Create a personal token
&lt;/h3&gt;

&lt;p&gt;On the right top corner, click your account and create a personal token. This token is assured that the package is only accessed by authorised personals since it is private to the organisation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-feed"&gt;
  &lt;/a&gt;
  Connect to Feed
&lt;/h3&gt;

&lt;p&gt;Once the personal token is generated, go to the Artifact and click on the our python package artifact. Click connect to feed and choose either Twine or PyPI as publisher for the same. Follow the steps given there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-python-package"&gt;
  &lt;/a&gt;
  Install the python package
&lt;/h3&gt;

&lt;p&gt;Once the steps are followed, with access token and the feed is connected, you will be able to install and access the python package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJtQ59K---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l51m9ggn5ualkpg3nsze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJtQ59K---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l51m9ggn5ualkpg3nsze.png" alt="install"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you have hosted your custom Python package in Azure DevOps. If you reached at the end of the article, do follow, share the article. &lt;/p&gt;

&lt;p&gt;Also, do check out my session on "Hosting Python packages in Azure DevOps" at Microsoft Reactor&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kd9mAJ6z51w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>python</category>
      <category>microsoft</category>
    </item>
  </channel>
</rss>
