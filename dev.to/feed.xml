<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>This little known javascript physics library blew my mind!</title>
      <author>Martin J</author>
      <pubDate>Mon, 01 Nov 2021 16:48:37 +0000</pubDate>
      <link>https://dev.to/jerzakm/this-little-known-javascript-physics-library-blew-my-mind-57oo</link>
      <guid>https://dev.to/jerzakm/this-little-known-javascript-physics-library-blew-my-mind-57oo</guid>
      <description>&lt;p&gt;In my previous game dev attempts with javascript I always struggled with physics engine performance. I always defaulted to matter.js - it's good documentation and plentiful examples outweighed the performance gains of other available libraries. I was very excited when I first learned about WASM and near-native performance it provides, but for the longest time Box2D was the only viable choice in that area and I truely hated using it. It had poor documentation and felt very archaic to use.&lt;/p&gt;

&lt;p&gt;Now, it seems like my woes might be over. In comes a new contender - Rapier.rs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--31chDU_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/IxHiH6ZYRLuYapuZHFTT" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--31chDU_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/IxHiH6ZYRLuYapuZHFTT" alt="Rapier.rs logo" width="880" height="291"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://rapier.rs/"&gt;Rapier home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rapier.rs is a rust physics library compiled to WASM with javscript bindings and good documentation. I was able to set it up in around 30 minutes and it provided an massive, instant boost to app performance.&lt;/p&gt;

&lt;p&gt;Rapier remained more stable and allowed me to add thousands of more active physics bodies to the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example from my last article with Rapier.rs instead of matter +300% performance &lt;a href="https://workerized-rapier-pixi.netlify.app/"&gt;LIVE&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jerzakm/gamedev-experiments/tree/main/rapier-pixi-worker"&gt;Github repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" alt="nbrpJOCJQu.gif" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Active bodies&lt;/th&gt;
&lt;th&gt;Matter FPS&lt;/th&gt;
&lt;th&gt;Rapier FPS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4500&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6000&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7500&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15000&lt;/td&gt;
&lt;td&gt;0 - crashed&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#why-you-need-to-consider-rapier-for-your-js-physics-needs"&gt;
  &lt;/a&gt;
  Why you need to consider Rapier for your js physics needs
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-performance"&gt;
  &lt;/a&gt;
  1. Performance
&lt;/h3&gt;

&lt;p&gt;Javascript can't compare to an optimized Rust library compiled to WASM&lt;br&gt;
&lt;a href="https://medium.com/@torch2424/webassembly-is-fast-a-real-world-benchmark-of-webassembly-vs-es6-d85a23f8e193"&gt;WASM is just this fast&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-documentation"&gt;
  &lt;/a&gt;
  2. Documentation
&lt;/h3&gt;

&lt;p&gt;Rapier page provides a good overview of the key features, information how to get started and an in-depth API documentation. All of this for Rust, Rust+bevy and Javascript.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-modern-developer-experience"&gt;
  &lt;/a&gt;
  3. Modern developer experience
&lt;/h3&gt;

&lt;p&gt;I found Rapier API very intuitive to work with, imho making it by far the best choice out of the few performant. It comes with &lt;strong&gt;typescript support&lt;/strong&gt;. Resulting code is readable and easy to reason with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@dimforge/rapier2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the RAPIER module here.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gravity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create the ground&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;groundColliderDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ColliderDesc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cuboid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;groundColliderDesc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create a dynamic rigid-body.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rigidBodyDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RigidBodyDesc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newDynamic&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setTranslation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;1.0&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rigidBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRigidBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rigidBodyDesc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Create a cuboid collider attached to the dynamic rigidBody.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colliderDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RAPIER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ColliderDesc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cuboid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;collider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colliderDesc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rigidBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Game loop. Replace by your own game loop system.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gameLoop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Step the simulation forward.&lt;/span&gt;
    &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Get and print the rigid-body's position.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rigidBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rigid-body position: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gameLoop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;gameLoop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-crossplatform-determinism-amp-snapshotting"&gt;
  &lt;/a&gt;
  4. Cross-platform determinism &amp;amp; snapshotting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running the &lt;strong&gt;same simulation&lt;/strong&gt;, with the same initial conditions on different machines or distributions of Rapier (rust/bevy/js) &lt;strong&gt;will yield the same result.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy data saving and restoring.&lt;/strong&gt; - &lt;em&gt;It is possible to take a snapshot of the whole physics world with &lt;code&gt;world.takeSnapshot&lt;/code&gt;. This results in a byte array of type Uint8Array that may be saved on the disk, sent through the network, etc. The snapshot can then be restored with &lt;code&gt;let world = World.restoreSnapshot(snapshot);&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I am excited to keep working with Rapier, but in the meanwhile I think a proper physics benchmark is in order. The ones I've found while doing research were a bit dated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-vite-usage-errors"&gt;
  &lt;/a&gt;
  Other: Vite usage errors
&lt;/h3&gt;

&lt;p&gt;I've ran into some issues adding Rapier to my Vite project, the solution can be found here: &lt;a href="https://github.com/dimforge/rapier.js/issues/49"&gt;https://github.com/dimforge/rapier.js/issues/49&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>rust</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>Server-Side Rendering (SSR) Vs Client-Side Rendering (CSR)</title>
      <author>Tabassum Khanum</author>
      <pubDate>Mon, 01 Nov 2021 16:47:11 +0000</pubDate>
      <link>https://dev.to/codewithtee/server-side-rendering-ssr-vs-client-side-rendering-csr-3m24</link>
      <guid>https://dev.to/codewithtee/server-side-rendering-ssr-vs-client-side-rendering-csr-3m24</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;
We all can agree that new-age Javascript has changed modern websites structure and the user experience drastically. Websites these days are built more like an application pretending to be a website capable of sending emails, notifications, chat, shop, payments, etc. Today's websites are so advanced, interactive, but earlier, the websites and web applications had a common strategy to follow. They prepared HTML content to be sent to the browsers at the server-side; this content was then rendered as HTML with CSS styling in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/L3X9GvVhP1nY23Ah6u/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/L3X9GvVhP1nY23Ah6u/giphy.gif" alt="1" width="320" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traditionally, the browser receives HTML from the server and renders it. When the user navigates to another URL, a full-page refresh is required and the server sends fresh new HTML for the new page. This is called server-side rendering.&lt;/p&gt;

&lt;p&gt;Fast forward to today. When websites have 1000s of lines of code to render and with much more complex structures. Today, websites are more than just static pages. The downfall of SSR came when the websites were not all about allowing the user to perform actions and receive a response for their action. That is why developers shifted the ever-growing method of rendering web pages on the client-side.&lt;/p&gt;

&lt;p&gt;But, here are the questions-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is SSR still relevant? If yes, where to use it.&lt;/li&gt;
&lt;li&gt;the best approach for you?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#serverside-rendering"&gt;
  &lt;/a&gt;
  Server-Side Rendering
&lt;/h2&gt;

&lt;p&gt;In SSR, when the user makes a request to the webpage, the server prepares the HTML page by fetching the required data from the database and sends to the user's machine over the internet. Then the browser presents all the requested actions on the user UI. All these processes of fetching data from the database to creating an HTML page and sending it to the client are done in mere milliseconds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TbShfWjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/5debb9b4f88fbc3f702d579e/60a8313c8d910f78f360ee18_server-side-rendering.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TbShfWjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/5debb9b4f88fbc3f702d579e/60a8313c8d910f78f360ee18_server-side-rendering.png" alt="SSR" width="880" height="628"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This method is viable if all your website need is to display images/ texts,  links to click, and is more on the static side.&lt;/p&gt;

&lt;p&gt;In server-side rendered pages, it is common to use snippets of jQuery to add user interactivity to each page. However, when building large apps, just jQuery is insufficient. After all, jQuery is primarily a library for DOM manipulation and it's not a framework; it does not define a clear structure and organization for your app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clientside-rendering"&gt;
  &lt;/a&gt;
  Client-Side Rendering
&lt;/h2&gt;

&lt;p&gt;Developers are approaching CSR as modern-day development is mostly about JS libraries and frameworks. The popularity of modern-age JS  shifted all the attention to CSR.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQWTp_dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ACRiH0hUGoS3aoZaIY4H2yg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQWTp_dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ACRiH0hUGoS3aoZaIY4H2yg.png" alt="csr" width="880" height="621"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Client-side rendering means that a website’s JavaScript is rendered in your browser, rather than on the website’s server. So now, instead of getting all the content from the HTML doc, only the required HTML with the JS files will be rendered. The rendering time for the first upload is a bit slow. However, the next page loads will be very fast as we don't have to wait for every page render. Moreover, there is no need to reload the entire UI after every call to the server. The client-side framework manages to update UI with changed data by re-rendering only that particular DOM element. &lt;/p&gt;

&lt;p&gt;Also, a clear client-server separation scales better for larger engineering teams, as the client and server code can be developed and released independently. This is especially so at Grab when we have multiple client apps hitting the same API server.&lt;/p&gt;

&lt;p&gt;For more clear view let's see some benefits and downside of both rendering methods-&lt;/p&gt;

&lt;p&gt;Benefits of SSR -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The initial page of the website load is faster as there are fewer codes to render.&lt;/li&gt;
&lt;li&gt;Good for minimal and static sites.&lt;/li&gt;
&lt;li&gt;Search engines can crawl the site for better SEO.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Downsides of SSR -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the site interactions are less.&lt;/li&gt;
&lt;li&gt;Slow page rendering.&lt;/li&gt;
&lt;li&gt; Full UI reloads.&lt;/li&gt;
&lt;li&gt; Frequent server requests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Benefits of CSR -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The app feels more responsive and users do not see the flash between page navigations due to full-page refreshes.

&lt;ol&gt;
&lt;li&gt;Fewer HTTP requests are made to the server, as the same assets do not have to be downloaded again for each page load.&lt;/li&gt;
&lt;li&gt;Clear separation of the concerns between the client and the server; you can easily build new clients for different platforms (e.g. mobile, chatbots, smartwatches) without having to modify the server code. You can also modify the technology stack on the client and server independently, as long as the API contract is not broken.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Downsides of CSR -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Heavier initial page load due to loading of the framework, app code, and assets required for multiple pages.&lt;/li&gt;
&lt;li&gt;There's an additional step to be done on your server which is to configure it to route all requests to a single entry point and allow client-side routing to take over from there.&lt;/li&gt;
&lt;li&gt;In most cases, requires an external library.&lt;/li&gt;
&lt;li&gt;All search engines execute JavaScript during crawling, and they may see empty content on your page. This inadvertently hurts the Search Engine Optimization (SEO) of your app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, most of the time, when you are building apps, SEO is not the most important factor, as not all the content needs to be indexable by search engines. To overcome this, you can either server-side render your app or use services such as Prerender to "render your javascript in a browser, save the static HTML, and return that to the crawlers".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-serverside-rendering"&gt;
  &lt;/a&gt;
  When to use server-side rendering
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An application has a very simple UI with fewer pages/features&lt;/li&gt;
&lt;li&gt;An application has less dynamic data&lt;/li&gt;
&lt;li&gt;Read preference of the site is more than write&lt;/li&gt;
&lt;li&gt;The focus is not on rich sites and has few users&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-clientside-rendering"&gt;
  &lt;/a&gt;
  When to use client-side rendering
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An application has a very complex UI with many pages/features&lt;/li&gt;
&lt;li&gt;An application has large and dynamic data&lt;/li&gt;
&lt;li&gt;Write preference of the site is more than reading&lt;/li&gt;
&lt;li&gt;The focus is on rich sites and a huge number of users&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rendering method totally depends on the requirements and the UX plan of the client. The final call is yours whether to use SSR or CSR. &lt;br&gt;
I hope this article helped you to understand the basic concepts of rendering practice. &lt;br&gt;
Thank You for reading till the end! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/j3szfYBg56YDRsjPox/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/j3szfYBg56YDRsjPox/giphy.gif" alt="gif" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>convert html &amp; css &amp; js code to android app for free in a few minutes</title>
      <author>AmrElDessouki22</author>
      <pubDate>Mon, 01 Nov 2021 16:41:50 +0000</pubDate>
      <link>https://dev.to/amreldessouki/convert-html-css-js-code-to-android-app-for-free-in-a-few-minutes-478h</link>
      <guid>https://dev.to/amreldessouki/convert-html-css-js-code-to-android-app-for-free-in-a-few-minutes-478h</guid>
      <description>&lt;p&gt;check it now&lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we present HTMLgApp - a tool designed to convert your HTML , CSS , JS Code into an Android app. 📲&lt;/p&gt;

&lt;p&gt;HTMLgApp is a website (web tool) to convert your code to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;p&gt;Apk &amp;amp; App bundle&lt;br&gt;
Google play Key&lt;br&gt;
Media permission&lt;br&gt;
Dialog Ask to exit app&lt;br&gt;
Internet connection error . native page&lt;br&gt;
Android native spinner&lt;br&gt;
Do you have any example for this tool in google play ❓&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441"&gt;https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441&lt;/a&gt;&lt;br&gt;
it’s very simple app&lt;/p&gt;

&lt;p&gt;why you add a media permission ❓&lt;br&gt;
HTMLgApp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;If you have any question, feel free to ask&lt;/p&gt;

&lt;p&gt;check it now&lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title> convert html &amp; css &amp; js code to android app for free in a few minutes</title>
      <author>AmrElDessouki22</author>
      <pubDate>Mon, 01 Nov 2021 16:35:14 +0000</pubDate>
      <link>https://dev.to/amreldessouki/-js-code-to-android-app-for-free-in-a-few-minutes-4him</link>
      <guid>https://dev.to/amreldessouki/-js-code-to-android-app-for-free-in-a-few-minutes-4him</guid>
      <description>&lt;p&gt;check it now &lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we present HTMLgApp - a tool designed to convert your HTML , CSS , JS Code into an Android app. 📲&lt;/p&gt;

&lt;p&gt;HTMLgApp is a website (web tool) to convert your code to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apk &amp;amp; App bundle&lt;/li&gt;
&lt;li&gt;Google play Key&lt;/li&gt;
&lt;li&gt;Media permission&lt;/li&gt;
&lt;li&gt;Dialog Ask to exit app&lt;/li&gt;
&lt;li&gt;Internet connection error . native page&lt;/li&gt;
&lt;li&gt;Android native spinner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you have any example for this tool in google play ❓&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441"&gt;https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441&lt;/a&gt;&lt;br&gt;
it’s very simple app&lt;/p&gt;

&lt;p&gt;why you add a media permission ❓&lt;br&gt;
HTMLgApp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;If you have any question, feel free to ask &lt;/p&gt;

&lt;p&gt;check it now &lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Backend Developer Learning Path 2021 [Beginners-Advance]</title>
      <author>John</author>
      <pubDate>Mon, 01 Nov 2021 16:17:13 +0000</pubDate>
      <link>https://dev.to/jdkj/backend-developer-learning-path-2021-beginners-advance-33a9</link>
      <guid>https://dev.to/jdkj/backend-developer-learning-path-2021-beginners-advance-33a9</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Who is a Backend Web Developer ? backend developer roadmap: Unlike the frontend developer, who takes care of the visible part of a site or app, the backend developer is a computer scientist who instead builds everything that is not seen but serves to make that site or application work. If we were to use the metaphor, …&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/backend-web-developer-roadmap/"&gt;Backend Developers Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AI Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance</title>
      <author>John</author>
      <pubDate>Mon, 01 Nov 2021 16:07:28 +0000</pubDate>
      <link>https://dev.to/jdkj/ai-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-15fm</link>
      <guid>https://dev.to/jdkj/ai-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-15fm</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;AI Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance</title>
      <author>John</author>
      <pubDate>Mon, 01 Nov 2021 15:58:27 +0000</pubDate>
      <link>https://dev.to/jdkj/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-1h4o</link>
      <guid>https://dev.to/jdkj/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-1h4o</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Mon, 01 Nov 2021 15:56:28 +0000</pubDate>
      <link>https://dev.to/jdkj/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-43c0</link>
      <guid>https://dev.to/jdkj/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-43c0</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40 JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Divtober Drawings</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 01 Nov 2021 15:49:14 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-drawings-1ca2</link>
      <guid>https://dev.to/alvaromontoro/divtober-drawings-1ca2</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/lynnandtonic"&gt;Lynn Fisher&lt;/a&gt; is an amazing CSS Artist, and she is especially great at &lt;a href="https://a.singlediv.com/"&gt;creating CSS drawings using just a single HTML element&lt;/a&gt; among many other projects she does (&lt;a href="https://nestflix.fun/"&gt;Nestflix&lt;/a&gt; is a lot of fun!)&lt;/p&gt;

&lt;p&gt;In October, she organized #divtober, a one-month challenge in which she drew (and encouraged others to participate too) CSS art based on different topics. &lt;strong&gt;The condition: use just one HTML element&lt;/strong&gt;. This was the list for this year:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtPMmW31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAYwc-VVQAgNCNo.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5hMq5Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429641617850339333/mow6F24g_normal.jpg" alt="Lynn Fisher profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lynn Fisher
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lynnandtonic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      October is already going to be busy busy, but let’s do this! 😅&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/divtober"&gt;#divtober&lt;/a&gt; 2021: &lt;a href="https://t.co/LjXN92wxoZ"&gt;a.singlediv.com/divtober2021/&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:52 PM - 28 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the past, I have done CSS art, but with multiple elements, so I decided to join the challenge and draw with CSS using a single HTML element for a change. Here are the drawings I did: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-1-fan"&gt;
  &lt;/a&gt;
  Day 1: Fan
&lt;/h2&gt;

&lt;p&gt;This 3D-looking fan is interactive: pull the string to make it work.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/gORyXgq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-2-watch"&gt;
  &lt;/a&gt;
  Day 2: Watch
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/mdwggPb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-3-quick"&gt;
  &lt;/a&gt;
  Day 3: Quick
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYLozab?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-4-loop"&gt;
  &lt;/a&gt;
  Day 4: Loop
&lt;/h2&gt;

&lt;p&gt;An animated explanation of how a &lt;code&gt;for&lt;/code&gt; loop works (I know, it's not a drawing &lt;em&gt;per se&lt;/em&gt;, but it is interesting)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNOqrXx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-5-tired"&gt;
  &lt;/a&gt;
  Day 5: Tired
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNOqmzm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-6-hungry"&gt;
  &lt;/a&gt;
  Day 6: Hungry
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/abwgexj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-7-toxic"&gt;
  &lt;/a&gt;
  Day 7: Toxic
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOwgdxa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I recorded the process for this one and shared it on Youtube. Later, I'd do the same with other drawings.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fitjMV2bmA4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-8-growing"&gt;
  &lt;/a&gt;
  Day 8: Growing
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvgVGx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-9-homonym"&gt;
  &lt;/a&gt;
  Day 9: Homonym
&lt;/h2&gt;

&lt;p&gt;Homonyms are words that are written the same but have different meanings. So I drew a paper boat sinking in a bathroom sink.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/porzXrO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-10-organized"&gt;
  &lt;/a&gt;
  Day 10: Organized
&lt;/h2&gt;

&lt;p&gt;A 1920s member of the organized crime. I like this drawing, but it's an example of something that would be 1,000 times better and easier using SVG.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/RwZwZZQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-11-slice"&gt;
  &lt;/a&gt;
  Day 11: Slice
&lt;/h2&gt;

&lt;p&gt;I removed the demo from this day because it has autoplay audio and it can be a bit annoying. &lt;a href="https://codepen.io/alvaromontoro/pen/qBXEdNp"&gt;You can see it live on this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v3RDsdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw0b9ph257dj7gpvauza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v3RDsdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw0b9ph257dj7gpvauza.png" alt="A cartoon of a pizza holding a microphone, singing, and dancing" width="880" height="644"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-12-squeak"&gt;
  &lt;/a&gt;
  Day 12: Squeak
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/bGrNLBP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-13-camouflage"&gt;
  &lt;/a&gt;
  Day 13: Camouflage
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYENBdJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-14-fancy"&gt;
  &lt;/a&gt;
  Day 14: Fancy
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/RwZPXRa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...And the video of how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Giq9h88lVnc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-15-float"&gt;
  &lt;/a&gt;
  Day 15: Float
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYdvmVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This cartoon was based on a previous cartoon I had done (using multiple elements). Here's the video of how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kb-MxR1BXHw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-16-snow"&gt;
  &lt;/a&gt;
  Day 16: Snow
&lt;/h2&gt;

&lt;p&gt;I did to entries for snow. One was an abominable snowman...&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExvPOGo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...and the other one was a snowfall animation using a single element (beware, your computer fans may start overworking with it).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/WNErYxV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-17-stack"&gt;
  &lt;/a&gt;
  Day 17: Stack
&lt;/h2&gt;

&lt;p&gt;This and the following day, I didn't have many ideas and went for easy drawings.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYjNREg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-18-shine"&gt;
  &lt;/a&gt;
  Day 18: Shine
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvyBbY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-19-nostalgia"&gt;
  &lt;/a&gt;
  Day 19: Nostalgia
&lt;/h2&gt;

&lt;p&gt;What's more nostalgic than a cassette with music recorded directly from the radio?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYEzPrb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...and the video of how it was done.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0zaKHAa439A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-20-journey"&gt;
  &lt;/a&gt;
  Day 20: Journey
&lt;/h2&gt;

&lt;p&gt;This was a weird one. I tried to do a The Wizard of Oz homage but ended up with something too abstract and simplistic.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/GRvjQvo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-21-magic"&gt;
  &lt;/a&gt;
  Day 21: Magic
&lt;/h2&gt;

&lt;p&gt;A magic trick with CSS and a single HTML element. Will the Great Wizard Al guess your card and remove it from the deck?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYdowmM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-22-critter"&gt;
  &lt;/a&gt;
  Day 22: Critter
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ZEJLzov?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And how this bunny(?) was drawn:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lrHtJQa810E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-23-loud"&gt;
  &lt;/a&gt;
  Day 23: Loud
&lt;/h2&gt;

&lt;p&gt;I tried to go with a realistic drawing this time. Something "easy": a volume knob that goes up to 11.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/BadpNdN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-24-smelly"&gt;
  &lt;/a&gt;
  Day 24: Smelly
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/VwzPRVa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Silly/childish me decided to code a demo combining #23 (loud) and #24 (smelly) using &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/dyzNVVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-25-dip"&gt;
  &lt;/a&gt;
  Day 25: Dip
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExvWxQJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-26-spice"&gt;
  &lt;/a&gt;
  Day 26: Spice
&lt;/h2&gt;

&lt;p&gt;Another realistic attempt: a bottle of spices. This may take a second to load:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/wvqJNGZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...and how it was done:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1SCCwqehAYA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-27-film"&gt;
  &lt;/a&gt;
  Day 27: Film
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/qBXmKOr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-28-dots"&gt;
  &lt;/a&gt;
  Day 28: Dots
&lt;/h2&gt;

&lt;p&gt;There's a &lt;a href="https://codepen.io/alvaromontoro/pen/yLooOgr"&gt;second version of this that only works on Chrome&lt;/a&gt;, and I personally like it better.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYddvKz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-29-fruit"&gt;
  &lt;/a&gt;
  Day 29: Fruit
&lt;/h2&gt;

&lt;p&gt;Another day in which I did two drawings. First I tried doing a still nature:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/bGrrWMQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...but I didn't like how it was going, so I drew a cute watermelon, and shared the process on Youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/mdMMzPm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/k5DLVrswBxM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-30-contrast"&gt;
  &lt;/a&gt;
  Day 30: Contrast
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/MWvvMpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/VwzMvzx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-31-spooky"&gt;
  &lt;/a&gt;
  Day 31: Spooky
&lt;/h2&gt;

&lt;p&gt;Halloween Day and the word was "spooky", I tried different things, as I wasn't convinced by them:&lt;/p&gt;

&lt;p&gt;The word spooky replacing the O's with a skull and a ghost:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOLGxpL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A ghost (and how it was done):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/KKvXqRd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JBtuqHSlI-8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And finally a Frankenstein's Monster with CSS and a single HTML element:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/bGroKpY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...with video too:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7y3WzWmzxgA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It was fun completing the challenge and trying different things with CSS and the background gradients. I learned some new things, found some differences between browsers, and enjoyed seeing what other people did (&lt;a href="https://twitter.com/search?q=%23divtober&amp;amp;src=typed_query&amp;amp;f=live"&gt;check the #divtober tag on Twitter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But it's time to take a break. These challenges are more time-consuming and draining than what they look like. I will make more CSS art in the future but, for now, it will have more than a single HTML element.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Ruby on Rails is Definitely Dead... Right?</title>
      <author>Nicholas Dill</author>
      <pubDate>Mon, 01 Nov 2021 15:40:30 +0000</pubDate>
      <link>https://dev.to/nicholasdill/ruby-on-rails-is-definitely-dead-right-954</link>
      <guid>https://dev.to/nicholasdill/ruby-on-rails-is-definitely-dead-right-954</guid>
      <description>&lt;p&gt;Let's get straight to the answer. Rails is not dead. It is anything but dead.&lt;/p&gt;

&lt;p&gt;Ruby on Rails is more alive than ever with a growing community and more contributors to the open-source project than I've ever seen.&lt;/p&gt;

&lt;p&gt;The project has been improving at a lightning-fast rate too, with almost back-to-back releases of new versions of Rails 5, 6, and 7.&lt;/p&gt;

&lt;p&gt;I'm a Rails developer so take this with a grain of salt, but out of all the languages I've used nothing is quite as enjoyable and easier to build with than Ruby on Rails.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#rails-developers-are-in-demand"&gt;
  &lt;/a&gt;
  Rails Developers are In Demand
&lt;/h2&gt;

&lt;p&gt;It's never been a better time to be a Ruby developer.&lt;/p&gt;

&lt;p&gt;Ruby on Rails developers are highly demanded and well compensated. The average salary for a rails developer is &lt;a href="https://www.talent.com/salary?job=ruby+on+rails+developer"&gt;over $120K&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And Ruby is one of the easiest and most flexible languages to learn in my opinion.&lt;/p&gt;

&lt;p&gt;It's optimized for developer happiness and rapid feature development. You can literally create a blog from scratch in 5 minutes. &lt;/p&gt;

&lt;p&gt;It's also one of the most popular frameworks used by new and emerging companies. Which is also an excellent opportunity for anyone who wants the opportunity to get early equity in a company before they take off. This is one of my favorite benefits actually.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-companies-use-ruby-on-rails"&gt;
  &lt;/a&gt;
  What Companies Use Ruby on Rails?
&lt;/h2&gt;

&lt;p&gt;If you hear someone say nobody uses Rails, don't get upset! They are oblivious to the benefits of Ruby on Rails and this is an opportunity help them learn about this amazing framework and its potential!&lt;/p&gt;

&lt;p&gt;The fact is many major companies use Rails for their production website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shopify&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Hulu&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Groupon&lt;/li&gt;
&lt;li&gt;Zendesk&lt;/li&gt;
&lt;li&gt;Airbnb&lt;/li&gt;
&lt;li&gt;Fiverr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to name a few...&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Internet: Ruby doesn’t scale.&lt;br&gt;Ruby: Sorry. I’m busy over here processing $1.5M+ USD Gross Merchant Value (GMV) per minute and 14K+ orders per minute running global &lt;a href="https://twitter.com/hashtag/BFCM?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#BFCM&lt;/a&gt; with &lt;a href="https://twitter.com/ShopifyEng?ref_src=twsrc%5Etfw"&gt;@ShopifyEng&lt;/a&gt;. &lt;a href="https://twitter.com/hashtag/ruby?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#ruby&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/scale?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#scale&lt;/a&gt; 💪💪💪 &lt;a href="https://twitter.com/hashtag/lifeatshopify?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#lifeatshopify&lt;/a&gt; &lt;a href="https://t.co/O7GOblzcbv"&gt;&lt;/a&gt;&lt;a href="https://t.co/O7GOblzcbv"&gt;https://t.co/O7GOblzcbv&lt;/a&gt; &lt;a href="https://t.co/mQKg2uCxvH"&gt;pic.twitter.com/mQKg2uCxvH&lt;/a&gt;&lt;/p&gt;— Lawrence Mandel (@mmmandel) &lt;a href="https://twitter.com/mmmandel/status/1200585514463698944?ref_src=twsrc%5Etfw"&gt;November 30, 2019&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And it's one of the best frameworks for new companies and startups to pick up. It lets you build a product faster than any other framework out there.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#understand-what-rails-is-best-for"&gt;
  &lt;/a&gt;
  Understand What Rails is Best For
&lt;/h2&gt;

&lt;p&gt;Every programming language and web development framework has pros and cons that make it better and worse at doing certain things.&lt;/p&gt;

&lt;p&gt;Rails is no different.&lt;/p&gt;

&lt;p&gt;You should not use Ruby on Rails to build certain types of applications.&lt;/p&gt;

&lt;p&gt;But similarly there are certain types of projects where it is without a doubt the absolute best tool for your team.&lt;/p&gt;

&lt;p&gt;The most important thing to consider when you're choosing your development stack, is what you need to get out of it. Consider the features you need to implement. Balance the pros and cons of the technologies you are considering using.&lt;/p&gt;

&lt;p&gt;Fine, Rails won't be the best choice for everything. Often companies adopt Rails for the things it really excels at, and pull in other technologies for the things they excel at. There's no reason you can't pull in Rails to build your website and develop features rapidly. Then connect it to micro-services in Go or Java or whatever language you need to do your other fancy stuff.&lt;/p&gt;

&lt;p&gt;Ultimately, Rails is definitely not dead.&lt;/p&gt;

&lt;p&gt;And if your team is considering Ruby on Rails... I would highly, highly, highly recommend it.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>programming</category>
    </item>
    <item>
      <title>Alternative Approach to Dynamic Environments: Using Octopod
</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 01 Nov 2021 15:30:57 +0000</pubDate>
      <link>https://dev.to/typeable/alternative-approach-to-dynamic-environments-using-octopod-2pi7</link>
      <guid>https://dev.to/typeable/alternative-approach-to-dynamic-environments-using-octopod-2pi7</guid>
      <description>&lt;p&gt;Author: Sergey Shurlakov&lt;/p&gt;

&lt;p&gt;In this post, I’d like to tell you how we use dynamic environments (review or preview environments) in our work here at Typeable, what issues we’ve managed to solve, and how and why we use our &lt;a href="https://github.com/typeable/octopod"&gt;Octopod&lt;/a&gt; solution for these purposes instead of GitLab Dynamic Environments. In case you don’t know what the dynamic environment is, I recommend reading the &lt;a href="https://blog.flant.com/review-environments-in-kubernetes-gitlab-ci/"&gt;post by Flant&lt;/a&gt; where the author gives a detailed account of the types of dynamic environments, their purpose and applications. The author also looks into this topic using GitLab as an example and provides detailed cases and descriptions. As for us, we use an alternative approach, somewhat different in terms of ideology, and work with review environments in &lt;a href="https://typeable.io/octopod"&gt;Octopod&lt;/a&gt;. &lt;a href="https://typeable.io/blog/2021-02-18-octopod-release"&gt;Previously we related&lt;/a&gt; the history of Octopod creation and the causes that motivated us to create it. We won’t repeat ourselves but will focus on the differences of our approach and the issues we’ve fixed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSqsfPHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod_logo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSqsfPHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod_logo.jpg" alt="Octopod logo" width="800" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin with, I need to tell you that Octopod is a universal tool not tied to any specific package management method in Kubernetes. Nevertheless, as the de facto standard in the world of Kubernetes, it’s primarily meant to simplify the deployment of Helm charts. At Typeable, we use Helm, so starting from version 1.4 the standard Octopod pack already includes all you need to work with this utility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-differences-from-gitlab"&gt;
  &lt;/a&gt;
  Main differences from GitLab
&lt;/h2&gt;

&lt;p&gt;Probably the most important thing is that we started working with review environments before GitLab had an interface for dynamic environments. However, there are some other reasons, including the ideological difference of our approach to the implementation and use of review environments. But let’s start from the beginning.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We don’t store the environment configuration in the code&lt;/strong&gt;. Why? We intentionally untie the environment from the code for several reasons.&lt;br&gt;
a. Not all team members have access to the code. Our processes are shaped in such a way that analysts, testers, project managers, and other team members who don’t write the code usually have read-only access to the repository or even no access at all. Such an approach allows us to better control the code and reduces the number of risks and potential issues. However, they need to be able to create review environments independently without involving a DevOps engineer or developer.&lt;br&gt;
b. In GitLab, in order to manage the dynamic environment, you need to create the file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; first and then modify it, as appropriate. Thus, each code branch will have its own file with the required environment settings. The risk exists that the settings might “leak” to the main branch and the new environments will have invalid parameters. This has to be fixed somehow, which only increases the gitflow complexity by potentially increasing the number of conflicts and, consequently, the number of merges or rebases.&lt;br&gt;
c. We often have to make changes in the review environment configuration. In Octopod, it’s easy to change the environment parameters and variables and, most importantly, to switch between various endpoints in the services we are integrated with. We have lots of integrations with external systems and it’s not always possible to test the application functionality by connecting to the test API. It’s often necessary to interact with the production API.&lt;br&gt;
So the settings of the review environment are stored in Octopod and managed through the Web interface or Octopod’s CLI (octo CLI) and are fully isolated from the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;In the GitLab environment, variables are global for the project&lt;/strong&gt;. A lot of review environment parameters are presented by the environment variables. GitLab provides an interface used to set the environment variables without making changes in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;, but these variables have the global scope, i.e. they apply to all dynamic environments of the project. It’s only possible to write the environment variables for a specific review environment by inserting them in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; in the appropriate branch, which contradicts item 1.&lt;/p&gt;

&lt;p&gt;In Octopod we’ve solved this problem using the Application Configuration and Deployment Configuration. Octopod generates the list of key-value parameters that allows viewing and managing the available chart settings in UI. You only need to select the required key and write the value. It’s also possible to provide custom keys that are missing from the list. We’ve provided two types of configuration settings: Application Configuration and Deployment Configuration. The Application Configuration is the configuration (Helm values) that is passed to the application. For example, this can be a database connection string or environment variables. The Deployment Configuration is used only during the environment creation phase. The key values are passed to Helm and allow redefining the default values thus directly influencing the deployment process. Here a chart version or URL of the Helm repository can be used as an example.&lt;/p&gt;

&lt;p&gt;This is what the staging configuration looks like in Octopod:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L00n-Paa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L00n-Paa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_1.png" alt="Staging configuration in Octopod" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Resource constraints&lt;/strong&gt;. There can be a lot of review environments, as well as the resources they consume. In the long run, you run out of resources and have to solve this issue somehow. This is why we archive the environment when the Jira ticket moves to the column Done (we’ve cross-integrated Jira, Octopod and GitHub). Archiving can also be done manually. Archiving implies the “scale-to-zero” approach where Pods are released while all other resources (e.g. Persistent Volumes) are saved. This allows extracting the environment from the archive as necessary and restoring its operating condition very quickly. The archived environments which are more than 14 days old are deleted completely, i.e. a cleanup is carried out involving the deletion of absolutely all resources, including PVC, certificates etc. We set up the automation of this process using octo CLI, a utility in the Octopod command line that has an extended functionality as compared with the Web interface. This approach can also be implemented in GitLab but the task is not trivial and requires complex logic in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The state of the review environment has to be tracked accurately&lt;/strong&gt;. One of Helm’s disadvantages is that it’s not possible to track the state of the environment after it’s been deployed. After Helm has finished its work, you have to check whether the environment keeps functioning all by yourself. During the work, something may go wrong. The review environment is not working already but we don’t know about this until we need it. The guys of Flant have fixed this issue using the kubedog which is built into the werf. Octopod keeps track of the environment state in a somewhat different way. We write all control scripts for Octopod in Rust and use the kube-rs client to check the statuses of all ReplicaSets. The check is carried out every 5 seconds, which is why the status of the review environment condition in Octopod is always up-to-date.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing a .gitlab-ci.yml script can be a challenge&lt;/strong&gt;. In Octopod we’ve solved this issue by providing ready-made Helm scripts that allow deploying any valid Helm chart. In many cases, this makes it absolutely unnecessary to write any scripts and minimizes the involvement of a DevOps engineer. At the end of the post, we’ll move to a hands-on exercise and deploy an instance of WordPress in Octopod using the Helm chart by bitnami.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The need to create complex interdependent environments&lt;/strong&gt;. If you need to create an environment that depends on infrastructure services such as PostgreSQL or Redis, these services can be deployed as separate review environments using their Helm charts while their connection parameters can be passed through the Application Overrides. In this way, it’s possible to use, for example, one instance of PostgreSQL or one authentication service for several review environments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A closer and more reliable integration with Kubernetes cluster is required&lt;/strong&gt;. Octopod works in the same Kubernetes cluster where it deploys all review environments. The issue of cluster access and transmission of Secrets has been solved fundamentally; Octopod works through the Service Account. In GitLab you can configure seamless integration with the Kubernetes cluster, which solves the problem of secrets transmission. However, if the integration doesn’t work due to any reason, there arise some difficulties.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#practice-installing-octopod"&gt;
  &lt;/a&gt;
  Practice. Installing Octopod
&lt;/h2&gt;

&lt;p&gt;There are two main ways to install Octopod:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For industrial application. Octopod is installed in the Kubernetes cluster using the official Helm chart.&lt;/li&gt;
&lt;li&gt;For individual use and to get acquainted with the main features of Octopod, installation is carried out locally and it’s fully automated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we’re going to install Octopod locally. Installation is currently supported for Linux and MacOS. Installation in Windows requires Windows Subsystem for Linux 2 (Docker Desktop is installed in Windows and integrated into WSL 2; other components are installed in WSL based on the Linux instructions). First of all, you’ll need to install the following infrastructure components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;Kind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tasks/tools"&gt;Kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://helm.sh/docs/intro/install"&gt;Helm 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Windows only) &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;WSL 2&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then we run the script that will install Octopod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt;
    https://raw.githubusercontent.com/typeable/octopod/master/octopod_local_install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;An important point about Octopod installation in Windows&lt;/strong&gt;. WSL 2 may have issues with SSL connection to the resources due to the &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/troubleshooting#no-internet-access-in-wsl"&gt;settings of antivirus software functioning as the firewal&lt;/a&gt;. The issue manifests itself as time out when you try to download data from repositories.&lt;/p&gt;

&lt;p&gt;When the installation is completed, we open the browser and type in &lt;a href="http://octopod.lvh.me"&gt;http://octopod.lvh.me&lt;/a&gt; in the address bar and see&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCgXI-nX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCgXI-nX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_2.png" alt="Octopod deployments dashboard" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perhaps, it should be noted here that lhv.me is a simple service returning the IP-address of local host &lt;code&gt;127.0.0.1&lt;/code&gt; to any request. It’s convenient to use it as you don’t have to make changes in &lt;code&gt;/etc/hosts&lt;/code&gt; every time.&lt;br&gt;
Now we need to create a new deployment. Octopod is delivered with predefined parameters for bitnami Helm charts and WordPress is used as an example.&lt;br&gt;
Click on the NEW DEPLOYMENT button. A window will appear on the screen where you need to set the environment parameters. In the simplest case, it’s enough to type in the name. For example, wordpress. However, we’ll add two more App overrides (to this end click on ADD AN OVERRIDE):&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;wordpressUsername&lt;/td&gt;
&lt;td&gt;admin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wordpressPassword&lt;/td&gt;
&lt;td&gt;P@ssw0rd&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We add these two variables only for the period of the review environment creation when the variables will be used to initialize WordPress. After that, you can delete them. It goes without saying that here we show the user name and the password explicitly and in plain text only for the sake of simplification and for demonstration purposes in the local Octopod version. In real life, we use appropriate tools such as Hashicorp Vault.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAWW6ooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAWW6ooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_3.png" alt="Creating a new deployment" width="880" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the SAVE button.&lt;br&gt;
After some time, the review environment will be created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZldYXX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZldYXX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/octopod/2_4.png" alt="Your new deployment is here!" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, the creation of a review environment is completed. Now you can open WordPress using the link provided in the Links column. To open the admin panel, add &lt;code&gt;/admin&lt;/code&gt; to the URL (&lt;a href="http://wordpress.lvh.me/admin"&gt;http://wordpress.lvh.me/admin&lt;/a&gt;). Type in the user name and password provided during the environment creation.&lt;/p&gt;

&lt;p&gt;If everything has gone well, you can delete the variables &lt;code&gt;wordpressUsername&lt;/code&gt; and &lt;code&gt;wordpressPassword&lt;/code&gt; and change the password, as necessary, in the WordPress admin panel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In our opinion, not only the developers and testers but also other people with limited technical skills can make use of review environments. This is why we’ve done our best to make the entry barrier for Octopod as low as possible, create a user-friendly and clear interface and ensure intuitive and predictable user interaction. These are the reasons behind the path we’ve chosen to develop Octopod and solve the problems described in this post. Surely, Octopod differs greatly from GitLab Dynamic Environments in terms of ideology and uses different approaches to solving similar issues. However, it performs its mission without a hitch – DevOps engineers are now free from the mundane tasks of creating and maintaining review environments and it’s well worth it.&lt;/p&gt;

&lt;p&gt;In our turn, we’d be happy to get feedback from Octopod users. We are looking forward to your suggestions, wishes and PRs on &lt;a href="https://github.com/typeable/octopod"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>haskell</category>
      <category>opensource</category>
    </item>
    <item>
      <title>404 Error</title>
      <author>Sam Sonter</author>
      <pubDate>Mon, 01 Nov 2021 15:14:54 +0000</pubDate>
      <link>https://dev.to/asapsonter/404-error-1b0h</link>
      <guid>https://dev.to/asapsonter/404-error-1b0h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#404-error"&gt;
  &lt;/a&gt;
  404 Error
&lt;/h1&gt;

&lt;p&gt;What is a 404 error?  It is commonly known as "404 page not found". This means the server is trying to tell us the requested webpage is not found on the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#causes-of-occurrence"&gt;
  &lt;/a&gt;
  Causes Of Occurrence
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The URL or its content (such as files or images) was either deleted or moved (without adjusting any internal links accordingly)&lt;/li&gt;
&lt;li&gt;The URL was written incorrectly or typed in the broswer       incorrectly&lt;/li&gt;
&lt;li&gt;DNS server complications&lt;/li&gt;
&lt;li&gt;Junk files in current browser&lt;/li&gt;
&lt;li&gt;The entered domain name doesn’t exist (anymore)&lt;/li&gt;
&lt;li&gt;Error or broken HTML pages(broken HTML templates codes)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#forms-of-occurance"&gt;
  &lt;/a&gt;
  Forms Of Occurance
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;404 error&lt;/li&gt;
&lt;li&gt;404 not found&lt;/li&gt;
&lt;li&gt;HTTP 404 not found&lt;/li&gt;
&lt;li&gt;Error 404&lt;/li&gt;
&lt;li&gt;404 page not found&lt;/li&gt;
&lt;li&gt;The requested URL was not found in server&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-a-404-error"&gt;
  &lt;/a&gt;
  How To Fix a 404 Error
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reload the page:&lt;/strong&gt; It might be that the error 404 has appeared for the simple reason that the page did not load properly. This can be checked quite easily by clicking on the ‘Refresh’ button in your browser or also by pressing the F5 button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the URL:&lt;/strong&gt; Regardless of whether you have entered the URL address manually or been directed via a link, could be that a mistake has been made. For this reason you should check the specified path of the website. It could be that either you, or the person who entered the link, has mistyped something. Apart from spelling mistakes, it could also be that forward slashes have been left out or misplaced. But bear in mind that this can only really be checked with ‘clean’ URLs, as they contain unreadable words instead of incomprehensible abbreviations, letters, numbers, and symbols.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go back through the directory levels:&lt;/strong&gt; For example, if a URL of the following structure example.com/Directory1/Directory2/Directory3 causes a 404 error page, then you can always go back to the previous directory level (in this example: example.com/Directory1/Directory2) in order to check whether the desired page is linked there. All you need to do is clear the last directory in the URL. The link for the page you are looking for should be visible on the previous page. If it is not to be found on that page then you can also go back to the previous page and look for the correct link there. But if it so happens that this method is also successful and you eventually end up back on the homepage, then move onto the next tip.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the website’s search function:&lt;/strong&gt; Many websites offer a search function as part of their homepage. By entering one or several keywords, it can help you find the specific page that you are looking for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use a search engine:&lt;/strong&gt; You also have the possibility of using the website of your choice to find a website. As long as the desired site exists, you should be able to find it by entering the website domain and/or a keyword transcription of the subject matter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete the browser cache and cookies:&lt;/strong&gt; Ifyou can access the website from another device, and the HTTP 404 error only seems to appear on a certain computer, then the problem could lie with your browser. Therefore you should delete the browser cache as well as all cookies for this site, and this may then finally allow you to access the page.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search engines, such as Google and Bing, will have a negative impression of a site if it has many 404 errors. Once the crawlers have established that many requests are being met with 404 codes, it presumes the site isn’t very well maintained.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aarga Sam&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
