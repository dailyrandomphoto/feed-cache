<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why is 100 days coding necessary?</title>
      <author>√çtalo Santana</author>
      <pubDate>Mon, 03 Jan 2022 19:55:55 +0000</pubDate>
      <link>https://dev.to/x8ing_/why-is-100-days-coding-necessary-57k7</link>
      <guid>https://dev.to/x8ing_/why-is-100-days-coding-necessary-57k7</guid>
      <description>&lt;p&gt;It's not just 100 days, it's very difficult days that not everyone is able to complete the challenge.&lt;/p&gt;

&lt;p&gt;More hours, more days developing something, it will make you get into the development habit and learn at once every function, variable, object and everything that encompasses your programming language. This is the real reason for you to take the 100-day challenge and nobody talks about it, but I do: it's hard.&lt;/p&gt;

&lt;p&gt;Habit will make you have constancy.&lt;/p&gt;

&lt;p&gt;Habit will make you always learn something new.&lt;/p&gt;

&lt;p&gt;The habit will make you look to become a good professional.&lt;/p&gt;

&lt;p&gt;Everyone who is migrating to the TECH field should take the 100-day challenge with the language they are interested in learning.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>MLOps journey with AWS - part 2 (Visibility is job zero)</title>
      <author>almamon rasool abdali</author>
      <pubDate>Mon, 03 Jan 2022 19:55:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/mlops-journey-with-aws-part-2-visibility-is-job-zero-492p</link>
      <guid>https://dev.to/aws-builders/mlops-journey-with-aws-part-2-visibility-is-job-zero-492p</guid>
      <description>&lt;p&gt;&lt;strong&gt;welcome again&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;in previous &lt;a href="https://dev.to/aws-builders/mlops-journey-with-aws-part-1-helicopter-view-3gn1"&gt;article&lt;/a&gt;  ,we get genral overview of MLOps&lt;/p&gt;

&lt;p&gt;today we want to start our MLOps implementation&lt;/p&gt;

&lt;p&gt;our first thing to do is visibility  some of you may think that visibility ( monitoring )  is at the end  of the deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0cJ9s58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtb5e5a19kpmrv9u7a5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0cJ9s58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtb5e5a19kpmrv9u7a5x.png" alt="Image description" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to me, visibility here is  monitoring, tracking,  collaboration between the team, and getting insight on the data journey from the beginning to the end of the pipeline.&lt;/p&gt;

&lt;p&gt;and we need continuous visibility over the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;visibility over code
&lt;/li&gt;
&lt;li&gt;visibility over data &lt;/li&gt;
&lt;li&gt;visibility over model training process and all the experiments undergoing &lt;/li&gt;
&lt;li&gt;visibility over inference and feedbacks&lt;/li&gt;
&lt;li&gt;visibility over activities for security &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's check them one by one&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-visibility-over-code-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. visibility over code changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bDXxro7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56mdq7o4z0wwc8ilocj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bDXxro7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56mdq7o4z0wwc8ilocj5.png" alt="Image description" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for normal Software developers, this is not an issue but for a managing team of data scientists and ML researchers it can be considered as a   headache ;&lt;/p&gt;

&lt;p&gt;mostly the team use notebooks and mostly you find your team develops bad coding habits and that also affects the version control and code change tracking,  CI/CD problems .. and many other things. &lt;br&gt;
also, there are many tools that try to solve these problems but it is not the notebook itself that makes the problem it is due to bad coding habits by the team itself.&lt;br&gt;
and all problems can be solved if you enforce your team  for writing good code and to me, good code must be at least fulfill three main points  (Modularity, High Cohesion, Loose Coupling)&lt;/p&gt;

&lt;p&gt;so basically if we use notebooks for only importing and calling our class and methods and also separate each script by its work nature such as pre-processing script has to be fully functional without the training code and vise versa and to make work more scalable we need to containerize each script so we can run it on the cluster to do the work.&lt;/p&gt;

&lt;p&gt;now but what if the environment you use will help you and the team to do the above  ??&lt;/p&gt;

&lt;p&gt;based on the best practice method to use sagemaker when running our scripts  it needs you to   separate each phase in different code (training code, preprocessing code, infer code ), and each phase  gonna be containerized  and  run separately, and the notebook in sagemaker is used for functions calling and the heavy coding is inside  scripts that shipped in the containers of each stage&lt;/p&gt;

&lt;p&gt;let take an example to get into sagemaker mentality &lt;/p&gt;

&lt;p&gt;starting by shipping a pre-processing script inside pre-made aws container for sklearn to do preprocessing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import boto3
import sagemaker
from sagemaker import get_execution_role
from sagemaker.sklearn.processing import SKLearnProcessor
from sagemaker.processing import ProcessingInput, ProcessingOutput

#get region and excution role
role = get_execution_role()
region = boto3.session.Session().region_name

#set the machine type and number of machines
sk_proc = SKLearnProcessor(
    framework_version="0.20.0", role=role, instance_type="ml.m5.xlarge", instance_count=2
)


#sagemaker will copy data from s3 loction to /opt/ml/processing/input
#your script will read data from /opt/ml/processing/input
#sagemaker will expact you now to give it the output preproceesdata
#into /opt/ml/processing/train and /opt/ml/processing/test
#we also add cmd arg called --train-test-split-ratio to control spliting ratio

#run 
sk_proc.run(
    code="preproc.py",
    inputs=[ProcessingInput(source=input_data, destination="/opt/ml/processing/input")],
    outputs=[
        ProcessingOutput(output_name="train_data", source="/opt/ml/processing/train"),
        ProcessingOutput(output_name="test_data", source="/opt/ml/processing/test"),
    ],
    arguments=["--train-test-split-ratio", "0.2"],
)

#get information regarding our runing job

preproc_job_info = sk_proc.jobs[-1].describe()

#get the conifgartion info to get the output uri for each final s3 for train and test
out_cfg = preproc_job_info["ProcessingOutputConfig"]
for output in out_cfg["Outputs"]:
    if output["OutputName"] == "train_data":
        train_preprco_s3 = output["S3Output"]["S3Uri"]
    if output["OutputName"] == "test_data":
        test_preprco_s3 = output["S3Output"]["S3Uri"]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as you can see we just provide our script (the script is easier to track than a notebook  ) and sagemaker will ship it in a container ( containerizing our code make it more portable and  scalable and re-usable ) also if we want to train a model on it it has to be on a different container, let see example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sagemaker.sklearn.estimator import SKLearn
#send our script to the sklearn container by aws

sklearn_model = SKLearn(
    entry_point="train.py", framework_version="0.20.0", 
    instance_type="ml.m5.xlarge", 
    role=role
)
#aws sagemaker will put data for you in  /opt/ml/input/data/train  from s3
# your model must output the final model in /opt/ml/model so sagemaker will copy it to s3
sklearn_model.fit({"train": train_preprco_s3})
#get job info
training_job_info = sklearn_model.jobs[-1].describe()
#get final model from s3
model_data_s3_uri = "{}{}/{}".format(
    training_job_info["OutputDataConfig"]["S3OutputPath"],
    training_job_info["TrainingJobName"],
    "output/model.tar.gz",
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now when work is done as above the code can be part of any normal CI/CD pipeline and team can work togther and collaborate  based on any normal software lifecycle  &lt;/p&gt;

&lt;p&gt;let move to the next  section of data &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-visibility-over-data"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. visibility over data&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;here i  want to cover three things &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;collaborate over features created by team members&lt;/li&gt;
&lt;li&gt;versioning of the data  or features &lt;/li&gt;
&lt;li&gt;montoring data quality and detecting drifts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;solving 1 &amp;amp; 2 by using feature store (AWS sagemaker feature store )&lt;br&gt;
and solving 3 by  monitoring some statistical information about the data and here we will use  (Amazon SageMaker Model Monitor - Monitor Data Quality )&lt;/p&gt;

&lt;p&gt;so let start by exploaring them one by one&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;feature store&lt;/strong&gt;&lt;br&gt;
if you work with team  , and say you  finished preprocessing data and get feature ready for modeling , now maybe you ask how to share features between team , how to re-use them over different project , how to make them fast to reach fast to query  without need to re-do the work again &lt;br&gt;
feature stores is  to help you create, share, and manage features and it works as single source of truth to store, retrieve, remove, track, share, discover, and control access to features.&lt;/p&gt;

&lt;p&gt;before we start working with aws sagemaker feature store we need to understand few concepts&lt;/p&gt;

&lt;p&gt;Feature group ‚Äì   main Feature Store resource that contains the metadata for all the data stored in Amazon SageMaker Feature Store.  &lt;/p&gt;

&lt;p&gt;Feature definition ‚Äì the schema definition for that data such as feature named prices is float , and feature named age is integer &lt;/p&gt;

&lt;p&gt;Record identifier name ‚Äì Each feature group is defined with a record identifier name. The record identifier name must refer to one of the names of a feature defined in the feature group's feature definitions.&lt;/p&gt;

&lt;p&gt;Record ‚Äì A Record is a collection of values for features for a single record identifier value. A combination of record identifier name and a timestamp uniquely identify a record within a feature group. &lt;/p&gt;

&lt;p&gt;Event time ‚Äì a point in time when a new event occurs that corresponds to the creation or update of a record in a feature group. &lt;br&gt;
Online Store ‚Äì the low latency, high availability cache for a feature group that enables real-time lookup of records.  &lt;/p&gt;

&lt;p&gt;Offline store ‚Äì   stores historical data in your S3 bucket. It is used when low (sub-second) latency reads are not needed.  &lt;/p&gt;

&lt;p&gt;now let see  how to work with feature stores in aws   these video will show you  the main idea of  using feature store  after doing preprocessing from aws data wrangler to see the flow of data from raw data into analyzing and preprocessing the data with aws data wrangler to creating feature store from the data flow pipline&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mrHSmRyjfeg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;now let see how we can deal with data drift &lt;br&gt;
 but first, let's understand what is drifts  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYFPxSY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o55qhxsyivr9cjtqyw9b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYFPxSY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o55qhxsyivr9cjtqyw9b.jpeg" alt="Image description" width="500" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let first logically ask ourselves if the model is deployed and it is static with all its code and artifacts, so what makes things break, and why model accuracy degrades over time ??&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in any system the input, always is something that needs to be checked and validated and in ml input must be checked for drifts and security stuff and the input here is the data  .. so what can happen to the data that make things not work as it must be ??
Data Drift happens when the distribution of data changes such as a change in clothes trends and fashions which maybe affect your clothes recommender system, or changes in the country economy and salaries which will affect houses ranges, or maybe you have a CCTV system with the problem in some of it cameras that send damaged stream or a new type of cameras with different video formats our different output ranges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to make things more focused  we have&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Concept drift is a type of model drift where the relationship or the mapping between x to y is changed such as ML-based WAF where new attacks emerge that no longer the previous pattern can help to detect them so what the model know as the attack has been changed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data drift is a type of drift here we have changes in data distribution  where the relation of x to y is still valid but  something change the distribution such as  nature change in temperature or new clothes trends or changes in customer preference&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upstream data changes refer to change in    the data pipeline such as  CCTV systems with a problem in some of its cameras that send damaged  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so now how to detect these drifts ???&lt;br&gt;
not all drifts can be detected automatically and many need humans in the loop&lt;br&gt;
but generally, it is all about capturing the model performance decay if we can !!&lt;br&gt;
so if possible we compare model accuracy with some ground truth. &lt;br&gt;
but for tasks that these round truth not available  there is other common methods&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Kolmogorov-Smirnov method: simply we compare the cumulative distributions of two datasets; if the distributions from both datasets are not identical then we have data drift. &lt;br&gt;
for more refer  to &lt;br&gt;
&lt;a href="https://www.sciencedirect.com/topics/engineering/kolmogorov-smirnov"&gt;https://www.sciencedirect.com/topics/engineering/kolmogorov-smirnov&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;population stability index (PSI) :  it measures how much a variable has shifted over time.&lt;br&gt;
when we have &lt;br&gt;
PSI &amp;lt; 0.10 means a ‚Äúlittle change‚Äù.&lt;br&gt;
0.10 &amp;lt; PSI &amp;lt; 0.25 means a ‚Äúmoderate change‚Äù&lt;br&gt;
PSI &amp;gt; 0.25 means a ‚Äúsignificant change, action required‚Äù.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;for more refer to  &lt;a href="https://www.risk.net/journal-of-risk-model-validation/7725371/statistical-properties-of-the-population-stability-index"&gt;https://www.risk.net/journal-of-risk-model-validation/7725371/statistical-properties-of-the-population-stability-index&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now let's back to the AWS sagemaker model monitor and how it can help us here&lt;/p&gt;

&lt;p&gt;it can help us with ( Monitor drift in data quality,  Monitor drift in model quality metrics,  Monitor bias in your model's predictions, Monitor drift in feature attribution )&lt;/p&gt;

&lt;p&gt;let's check data quality as an example&lt;br&gt;
the idea is that we create baseline data that sagemaker will use to compare with new data to check some rules that help to detect drift&lt;br&gt;
the steps needed is that&lt;/p&gt;

&lt;p&gt;first, you must enable data capture for your model when deployed for inference&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sagemaker.model_monitor import DataCaptureConfig

#set the conifgration
capture_config=DataCaptureConfig(
                        enable_capture = True,
                        sampling_percentage=100,
                        destination_s3_uri=s3_capture_path)

#add the confi to your model deployment
predictor = model.deploy(initial_instance_count=1,
                instance_type='ml.m4.xlarge',
                endpoint_name='endpoint name'
                data_capture_config=capture_config)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we must create a baseline  from the main data so  we will have some baseline statistical calculations so we can know when the new data changes from the baseline&lt;/p&gt;

&lt;p&gt;example of creating the baseline&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sagemaker.model_monitor import DefaultModelMonitor
from sagemaker.model_monitor.dataset_format import DatasetFormat

data_monitor = DefaultModelMonitor(
    role=role,
    instance_count=1,
    instance_type='ml.m5.xlarge',
    volume_size_in_gb=20,
    max_runtime_in_seconds=3600,
)

data_monitor.suggest_baseline(
    baseline_dataset=baseline_maindata_uri,
    dataset_format=DatasetFormat.csv(header=True),
    output_s3_uri=baseline_result,
    wait=True
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for more please check out &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html"&gt;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now we reach the end of these part and will cover in the next part the remaining items in the visibility section ... see you next &lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Comet Development on macOS</title>
      <author>David Ortinau</author>
      <pubDate>Mon, 03 Jan 2022 19:53:06 +0000</pubDate>
      <link>https://dev.to/davidortinau/comet-development-on-macos-1o38</link>
      <guid>https://dev.to/davidortinau/comet-development-on-macos-1o38</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is for you if you like the look of code in Swift UI or Flutter, and wish you could do similar in C#.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/dotnet/comet"&gt;Comet&lt;/a&gt; is a simplified framework for building cross-platform apps with C#. Enjoy how clean and modern this looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[State]
readonly CometRide comet = new();

[Body]
View body()
    =&amp;gt; new VStack {
            new Text(()=&amp;gt; $"({comet.Rides}) rides taken:{comet.CometTrain}")
                .Frame(width:300)
                .LineBreakMode(LineBreakMode.CharacterWrap),

            new Button("Ride the Comet! ‚òÑÔ∏è", ()=&amp;gt;{
                comet.Rides++;
            })
                .Frame(height:44)
                .Margin(8)
                .Color(Colors.White)
                .Background(Colors.OrangeRed)
            .RoundedBorder(color:Colors.Blue)
            .Shadow(Colors.Grey,4,2,2),
    }.Padding(30);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The core set of UI controls and platform APIs are provided by &lt;a href="https://github.com/dotnet/maui"&gt;.NET MAUI&lt;/a&gt;. Comet gives you a simple approach to app development that uses &lt;a href="https://github.com/dotnet/Comet/wiki/State-and-Model-View-Update"&gt;Model-View-Update&lt;/a&gt; (MVU) inspired state management. &lt;/p&gt;

&lt;p&gt;How does this work? Well, pretty much everything is a &lt;code&gt;View&lt;/code&gt;. User interactions or services make updates to state object(s) (model), and Comet efficiently updates the view in response. Comet handles the update for us, but if you want to go hands-on then you can add an update method to the view yourself. &lt;/p&gt;

&lt;p&gt;There's more to it than that, but for now let's keep it simple and have some fun. You just need VS Code and your favorite command line. &lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre-requisites: you should first install .NET and the dependencies for the platform(s) you wish to target. In this article I'll focus only on macOS, but the same commands and steps apply to Windows also. Follow &lt;a href="https://dev.to/davidortinau/installing-net-maui-on-macos-4mmc"&gt;this guide&lt;/a&gt; for helpful instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#get-comet"&gt;
  &lt;/a&gt;
  Get Comet
&lt;/h2&gt;

&lt;p&gt;Comet is distributed as a NuGet package. By installing the Comet templates, we'll get what we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet new -i Clancey.Comet.Templates.Multiplatform
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#new-comet-app"&gt;
  &lt;/a&gt;
  New Comet App
&lt;/h2&gt;

&lt;p&gt;Create a new app in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet new comet -n HelloComet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into the "HelloComet\HelloComet" folder and open it in VS Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make sure we have the &lt;a href="https://www.nuget.org/packages/Clancey.Comet/0.3.429-beta"&gt;latest version of Comet&lt;/a&gt; in our "HelloComet.csproj". At the time of this writing the latest is "0.3.429-beta".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include="Clancey.Comet" Version="0.3.430-beta" /&amp;gt;
    &amp;lt;PackageReference Include="Reloadify3000" Version="1.0.8" /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the app by issuing the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet build -t:Run -f net6.0-maccatalyst
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will build the app and launch it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qJ4W29u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umsoqy8rc5woyej5gf22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJ4W29u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umsoqy8rc5woyej5gf22.png" alt="Comet app running on macOS" width="703" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;w00t! How easy was that? Hopefully you had success first try. If you didn't, reach out on Discord for help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reloadify"&gt;
  &lt;/a&gt;
  Reloadify
&lt;/h2&gt;

&lt;p&gt;This tool and the accompanying NuGet (the Reloadify3000 referenced above), enable a very nice hot reload experience. This means you can be coding while the app is running and see your changes as you save them in VS Code.&lt;/p&gt;

&lt;p&gt;To get started, install the .NET tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet tool install --global Reloadify --version 1.0.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the same folder which contains the "HelloComet.csproj" run the Reloadify tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; reloadify HelloComet.csproj -t maccatalyst   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will now start listening for file changes, report any code errors, and acknowledge when changes have been successfully sent to the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;family@FMBP HelloComet % reloadify HelloComet.csproj -t maccatalyst
Opening :HelloComet.csproj
net6.0-maccatalyst - Debug - AnyCPU
Activating HotReload
Watching: /Users/family/work/HelloComet/HelloComet
Hot Reload is running!
Type exit, to quit
Listening for clients
Client Connected
Building new Diff was Successful!
Hot Reloading: /Users/family/work/HelloComet/HelloComet/MainPage.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I really like this experience because I know very clearly what's going on as I'm making changes. Bad code doesn't usually make the session crash which is also nice. I just get a helpful message like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Button' does not contain a definition for 'Fuzz' and no accessible extension method 'Fuzz' accepting a first argument of type 'Button' could be found (are you missing a using directive or an assembly reference?)
Error: /Users/family/work/HelloComet/HelloComet/MainPage.cs
     Line: 22 - 6
    CS1061: 'Button' does not contain a definition for 'Fuzz' and no accessible extension method 'Fuzz' accepting a first argument of type 'Button' could be found (are you missing a using directive or an assembly reference?)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The&lt;a href="https://github.com/dotnet/Comet/tree/dev/sample"&gt; Comet repository has a sample app&lt;/a&gt; which provides answers to most questions you might have. There are some features of .NET MAUI that aren't yet available in Comet, so be sure to open issues when you spot those. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbfXfmE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c60678l5d15whgp6vhfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbfXfmE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c60678l5d15whgp6vhfo.png" alt="Hangul clock app running on macOS" width="880" height="724"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently built a little &lt;a href="https://github.com/davidortinau/HangulClock"&gt;single page project with Comet&lt;/a&gt; that you can check out. If you have built anything, I'd love to see it and hear about your experience with Comet. Flag me down on Twitter (&lt;a href="https://twitter.com/davidortinau"&gt;@davidortinau&lt;/a&gt;) or via email (&lt;a href="mailto:david.ortinau@microsoft.com"&gt;david.ortinau@microsoft.com&lt;/a&gt;). &lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Flask Material Kit - Open-source Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 03 Jan 2022 19:25:41 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-material-kit-open-source-template-30ce</link>
      <guid>https://dev.to/sm0ke/flask-material-kit-open-source-template-30ce</guid>
      <description>&lt;p&gt;Hello Coders &amp;amp; Happy new year!&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;code&gt;Flask Template&lt;/code&gt; crafted with authentication, database, and Docker support on top of &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Material Kit&lt;/a&gt; Design, a modern and colorful Bootstrap 5 design. The product can be used to code faster a presentation website without much effort or simply for eLearning activities. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a leading framework written in &lt;code&gt;Python&lt;/code&gt; used to code simple websites, APIs, or complex eCommerce solutions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;üëâ &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Flask Material Kit&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;üëâ &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The product can be compiled and started in a local environment using two techniques: Docker setup (faster &amp;amp; easier) or a classic manual build in case Docker is not an option.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download the &lt;a href="https://github.com/app-generator/flask-material-kit"&gt;sources&lt;/a&gt; from Github&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all the above commands are executed, we should be able to access the app in the browser, register new users, and authenticate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggHptGj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agx38pcc6f4mmnqy6nx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggHptGj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agx38pcc6f4mmnqy6nx5.png" alt="Flask Material Kit - Login Page." width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJQawd8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n5cz3qanvx4my4mwyng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJQawd8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n5cz3qanvx4my4mwyng.png" alt="Flask Material Kit - User Profile Page." width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Material Kit - Team Section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86NfBDmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36kgzo2j0eelje96z42e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86NfBDmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36kgzo2j0eelje96z42e.png" alt="Flask Material Kit - Team Section." width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Material Kit - About US Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-fWoheC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbsxbd24ydfvi67xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-fWoheC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbsxbd24ydfvi67xz.png" alt="Flask Material Kit - About US Page." width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploy-in-production"&gt;
  &lt;/a&gt;
  ‚ú® Deploy in production
&lt;/h2&gt;

&lt;p&gt;Once the local development is done, we can push the project into the wild and share our work using a public deployment.&lt;/p&gt;

&lt;p&gt;Might be a good idea, before going LIVE to enable compression for pages and projects assets (JS, CSS files). This goal can be easily achieved via an open-source Flask module: &lt;code&gt;Flask-Minify&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #1&lt;/strong&gt; - Add &lt;code&gt;Flask-Minify&lt;/code&gt; to the product requirements&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Flask-Minify==0.35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #2&lt;/strong&gt; - Update codebase to enable compression&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Contents of apps/__init__.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Import the module
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_minify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minify&lt;/span&gt;                     &lt;span class="c1"&gt;# &amp;lt;-- NEW Line
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Inject the module into the Flask APP object
&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssless&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- NEW Line 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app should serve compressed pages and assets (JSS, CSS).&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #3&lt;/strong&gt; - Execute the &lt;code&gt;Docker&lt;/code&gt; set up on the production host&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
// App runs on port -&amp;gt; http://localhost:85
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #4&lt;/strong&gt; - Configure webserver to forward requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apache and Nginx are super popular webservers that we can configure to route the external received from our users to the local port &lt;code&gt;85&lt;/code&gt; server exposed by Docker.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;‚ú® &lt;strong&gt;Apache&lt;/strong&gt; - Reverse PROXY configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:*&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ProxyPreserveHost On

    # Servers to proxy the connection, or;
    # List of application servers:
    # Usage:
    # ProxyPass / http://[IP Addr.]:[port]/
    # ProxyPassReverse / http://[IP Addr.]:[port]/
    # Example:
    ProxyPass / http://0.0.0.0:85/
    ProxyPassReverse / http://0.0.0.0:85/

    ServerName localhost
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;‚ú® &lt;strong&gt;Nginx&lt;/strong&gt; - reverse PROXY configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;server {&lt;/span&gt;
        &lt;span class="s"&gt;listen 80;&lt;/span&gt;               
        &lt;span class="s"&gt;server_name my-site.com;&lt;/span&gt;

        &lt;span class="s"&gt;location / {&lt;/span&gt;
                &lt;span class="s"&gt;proxy_pass http://127.0.0.1:85;&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;üëâ AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via eMail and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üëâ &lt;a href="https://appseed.us/product/django-material-kit"&gt;Django Material Kit&lt;/a&gt; - &lt;code&gt;open-source&lt;/code&gt; version for &lt;strong&gt;Django&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>material</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Forem Feed Experiment One: January Results</title>
      <author>Jeremy Friesen</author>
      <pubDate>Mon, 03 Jan 2022 19:22:59 +0000</pubDate>
      <link>https://dev.to/devteam/forem-feed-experiment-one-january-results-3oof</link>
      <guid>https://dev.to/devteam/forem-feed-experiment-one-january-results-3oof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;In December, &lt;a href="https://dev.to/devteam/feature-update-feed-3go5"&gt;Amy wrote about running an experiment on our feed&lt;/a&gt;. And it‚Äôs time to revisit that experiment and make a decision.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-goals"&gt;
  &lt;/a&gt;
  The Goals
&lt;/h3&gt;

&lt;p&gt;In our previous feed experiments, we established six goals to track for our feed experiments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User creates a comment.&lt;/li&gt;
&lt;li&gt;User creates comments on at least 4 different days within a week.&lt;/li&gt;
&lt;li&gt;User views pages on at least 4 different days withint a week.&lt;/li&gt;
&lt;li&gt;User views pages on at least 4 different hours within a day.&lt;/li&gt;
&lt;li&gt;User views pages on at least 9 different days within 2 weeks.&lt;/li&gt;
&lt;li&gt;User views pages on at least 12 different hours within five days.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this current experiment, which we‚Äôre wrapping up, we re-used those goals.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a &lt;a href="https://github.com/forem/forem/blob/fa093b0a92e137d06f6718ebca843eb78bad8f39/app/workers/users/record_field_test_event_worker.rb#L13-L29"&gt;link to the code that captures ‚Äúconversions‚Äù for each of the goals&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-methodolgy"&gt;
  &lt;/a&gt;
  The Methodolgy
&lt;/h3&gt;

&lt;p&gt;We use the &lt;a href="http://rubygems.org/gems/field_test"&gt;field_test gem&lt;/a&gt; to facilitate the &lt;a href="https://www.dynamicyield.com/lesson/bayesian-testing/"&gt;Bayesian A/B hypothesis testing&lt;/a&gt;. As part of the experiment, I added an &lt;a href="https://github.com/forem/forem/blob/fa093b0a92e137d06f6718ebca843eb78bad8f39/app/models/ab_experiment.rb"&gt;AbExperiment model&lt;/a&gt; to Forem. This provides numerous mechanisms to test and toggle experiments. Which proved fortuitous when &lt;a href="https://dev.to/devteam/keeping-the-stakes-low-while-breaking-production-3nej"&gt;I broke production&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We then introduced the &lt;a href="https://github.com/forem/forem/blob/fa093b0a92e137d06f6718ebca843eb78bad8f39/app/controllers/stories/feeds_controller.rb#L37-L82"&gt;code to select which Feed algorithm to use&lt;/a&gt;. And aside from the minor outages I introduced (and we corrected), we sat back and let the experiment run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;Below are the summary of results regarding the experiments:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scenario&lt;/th&gt;
&lt;th&gt;Incumbent Conversion&lt;/th&gt;
&lt;th&gt;Challenger Conversion&lt;/th&gt;
&lt;th&gt;Likely Winner&lt;/th&gt;
&lt;th&gt;Probability of Winner&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Creates a comment.&lt;/td&gt;
&lt;td&gt;5.58%&lt;/td&gt;
&lt;td&gt;5.87%&lt;/td&gt;
&lt;td&gt;Challenger&lt;/td&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Creates comments on at least 4 different days within a week.&lt;/td&gt;
&lt;td&gt;0.23%&lt;/td&gt;
&lt;td&gt;0.19%&lt;/td&gt;
&lt;td&gt;Incumbent&lt;/td&gt;
&lt;td&gt;78%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Views pages on at least 4 different days withint a week.&lt;/td&gt;
&lt;td&gt;23.98%&lt;/td&gt;
&lt;td&gt;23.52%&lt;/td&gt;
&lt;td&gt;Incumbent&lt;/td&gt;
&lt;td&gt;86%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Views pages on at least 4 different hours within a day.&lt;/td&gt;
&lt;td&gt;14.17%&lt;/td&gt;
&lt;td&gt;13.62%&lt;/td&gt;
&lt;td&gt;Incumbent&lt;/td&gt;
&lt;td&gt;94%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Views pages on at least 9 different days within 2 weeks.&lt;/td&gt;
&lt;td&gt;9.60%&lt;/td&gt;
&lt;td&gt;9.41%&lt;/td&gt;
&lt;td&gt;Incumbent&lt;/td&gt;
&lt;td&gt;73%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Views pages on at least 12 different hours within five days.&lt;/td&gt;
&lt;td&gt;2.24%&lt;/td&gt;
&lt;td&gt;2.13%&lt;/td&gt;
&lt;td&gt;Incumbent&lt;/td&gt;
&lt;td&gt;73%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#conjecture"&gt;
  &lt;/a&gt;
  Conjecture
&lt;/h3&gt;

&lt;p&gt;First, and foremost, it appears that both feed strategies encourage close to the same engagement. Which is reassuring that the experiment likely did not adversely affect the &lt;a href="https://dev.to"&gt;DEV.to&lt;/a&gt; experience.&lt;/p&gt;

&lt;p&gt;Second, I‚Äôm prepared to call this first experiment in favor of the incumbent.&lt;/p&gt;

&lt;p&gt;Third, it appears that the challenger encourage initial conversations, but those conversations dwindled overtime.&lt;/p&gt;

&lt;p&gt;Why do I think that this is the behavior? My hypothesis is two primary changes for the challenger:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The daily_decay_factor, the numeric multiplier we assign to the publication date, overly favored more recently published articles.&lt;/li&gt;
&lt;li&gt;Sorting the relevant feed entries by publication date, instead of the relevance score.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs look at the &lt;a href="https://github.com/forem/forem/pull/15789/files#diff-4b8ce4aa4bd7363bf1e3ef64bc987b8b0dc6b9f2c28d51fcb7cf4f522313fa77L86-R91"&gt;change in publication date decay rate&lt;/a&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Days Since Published&lt;/th&gt;
&lt;th&gt;Challenger #1 Weight&lt;/th&gt;
&lt;th&gt;Challenger #2 Weight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.95&lt;/td&gt;
&lt;td&gt;0.99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0.9&lt;/td&gt;
&lt;td&gt;0.985&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0.85&lt;/td&gt;
&lt;td&gt;0.98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0.8&lt;/td&gt;
&lt;td&gt;0.975&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0.75&lt;/td&gt;
&lt;td&gt;0.97&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;0.965&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0.65&lt;/td&gt;
&lt;td&gt;0.960&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0.6&lt;/td&gt;
&lt;td&gt;0.955&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.55&lt;/td&gt;
&lt;td&gt;0.95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.945&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.94&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;td&gt;0.935&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.925&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15 or more&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For the original challenger, I chose a more aggressive decay rate. For the second challenger, I‚Äôm significantly easing off of the decay.&lt;/p&gt;

&lt;p&gt;I‚Äôm also removing the order by publication date, so the upcoming feed experiment will now sort things in relevance order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;I‚Äôve begun the &lt;a href="https://github.com/forem/forem/pull/15789"&gt;proposal for our next feed experiment&lt;/a&gt;. This introduces a few minor tweaks and is intended to be a point for a conversation around how to configure the challenger‚Äôs case statements.&lt;/p&gt;

</description>
      <category>meta</category>
      <category>product</category>
      <category>ux</category>
      <category>changelog</category>
    </item>
    <item>
      <title>Joining Replay.io</title>
      <author>Cecelia Martinez</author>
      <pubDate>Mon, 03 Jan 2022 18:10:56 +0000</pubDate>
      <link>https://dev.to/ceceliacreates/joining-replayio-1j3n</link>
      <guid>https://dev.to/ceceliacreates/joining-replayio-1j3n</guid>
      <description>&lt;p&gt;Today is my first day as Community Lead at &lt;a href="https://replay.io"&gt;Replay.io&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;I am incredibly excited about this new adventure for many reasons, but primarily because of Replay‚Äôs mission to make software easier to understand, more accessible, and more inclusive.&lt;/p&gt;

&lt;p&gt;Replay is a time travel debugger that lets you record and replay web applications with familiar browser dev tools along for the ride. Replay lets you see what‚Äôs happening with your software at any point in time, add print statements to existing recordings, and share and comment for easy collaboration. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/605204613" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://www.replay.io/"&gt;Check it out here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than just being cool tech, Replay is built on a philosophy strongly aligned with my core values as a developer and community member.&lt;/p&gt;

&lt;p&gt;Demystifying how applications work and what happens when they don‚Äôt work helps reduce the barrier to entry for software development. Creating a culture of sharing and working on bugs collaboratively reduces the fear and stigma around making ‚Äúmistakes‚Äù with code.&lt;/p&gt;

&lt;p&gt;I‚Äôm also so excited to focus more on community. Understanding developer challenges, building solutions and then sharing that knowledge with others has always been the most rewarding part of my professional and volunteer work. &lt;/p&gt;

&lt;p&gt;Through mentoring and volunteering with Out in Tech and Women Who Code, I‚Äôve seen how a lack of support and unnecessary technical hurdles can prevent developers from thriving as they should. Creating approachable ‚Äî even exciting! ‚Äî developer experiences is necessary to fostering an inclusive industry where all developers can build software that goes on to power an inclusive world.&lt;/p&gt;

&lt;p&gt;Replay does this by helping communities collaborate around a shared understanding of their software. The opportunity to focus full time on helping developers thrive with Replay is incredible, and I can‚Äôt wait to see the impact this will have on communities like these.&lt;/p&gt;

&lt;p&gt;Thank you for being a part of this journey with me! If this mission resonates with you, I welcome you to join us in the &lt;a href="https://replay.io/discord"&gt;Replay Discord&lt;/a&gt;. We‚Äôd love to see how Replay can help your team or community. We all go farther when we go together, so let‚Äôs see how far we can go!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>peviitor.ro - scraper[3]</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Mon, 03 Jan 2022 18:01:25 +0000</pubDate>
      <link>https://dev.to/sebiboga/peviitorro-scraper3-1fml</link>
      <guid>https://dev.to/sebiboga/peviitorro-scraper3-1fml</guid>
      <description>&lt;p&gt;Pasii care vor trebui implementati pentru a realiza un scraper pentru o companie, sunt:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sterge datele din index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extrage locurile de munca din website-ul companiei&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregateste datele pentru a putea fi trimise prin API&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;trimite datele&lt;/code&gt;= locurile de munca spre index&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Acesta este algoritmul care va trebui scris pentru fiecare companie in parte. In ce limbaj scri scraperul nu este important, insa ce e important?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scraperul trebuie sa fie cat mai rapid&lt;/li&gt;
&lt;li&gt;scraperul nu are voie sa preia de foarte multe ori pe zi date de pe website (acceptabil o data pe zi sau de doua ori pe zi)&lt;/li&gt;
&lt;li&gt;datele care se trimit spre index trebuie sa aibe sens, si aici ne referim la faptul ca oamenii de HR s-ar putea sa introduca date gresite sau care nu au corespondent la noi in index.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#validarea-datelor"&gt;
  &lt;/a&gt;
  Validarea datelor
&lt;/h4&gt;

&lt;p&gt;Ne propunem ca inainte de a pune scraperul la lucru zilnic sa ne validam aceste locuri de munca pe un environment de test. &lt;/p&gt;

&lt;p&gt;Nu are sens ca datele din productie sa fie partial valide sau in proces de a fi corectate, astfel pana cand nu suntem siguri ca scraperul extrage corect datele, toate datele vor fi trimise catre un server de test.&lt;br&gt;
Odata ce scraperul este validat, putem sa il programam printr-un proces sa se ruleze zilnic sau de doua ori pe zi.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#propunere-de-implementare-scraper"&gt;
  &lt;/a&gt;
  Propunere de implementare scraper
&lt;/h4&gt;

&lt;p&gt;Propunem spre implementare scraper cu tehnologiile: &lt;code&gt;JMeter&lt;/code&gt;, &lt;code&gt;RegEx&lt;/code&gt;, &lt;code&gt;JSON extractor&lt;/code&gt; si pentru automatizarea de a se instantia o data pe zi: &lt;code&gt;GitHUB Actions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In articolul urmator venim cu o solutie in care am implementat un scraper pentru o anumita firma. &lt;/p&gt;

</description>
      <category>peviitor</category>
      <category>job</category>
      <category>scraper</category>
      <category>locuridemunca</category>
    </item>
    <item>
      <title>Built-In Angular Pipes - DatePipe - Part 2 </title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Mon, 03 Jan 2022 17:39:37 +0000</pubDate>
      <link>https://dev.to/this-is-angular/built-in-angular-pipes-datepipe-part-2-46a2</link>
      <guid>https://dev.to/this-is-angular/built-in-angular-pipes-datepipe-part-2-46a2</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will continue to learn the remaining built-in pipes available in Angular.&lt;br&gt;
If you are not familiar with Angular Pipes I would suggest you to go through this &lt;a href="https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec"&gt;post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;br&gt;
The &lt;code&gt;DatePipe&lt;/code&gt; formats the date value and displays in a human readable form (as per the locale).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value | date [ : format [ : timezone [ : locale ] ] ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is exported from the Common Module (I will talk about it in the module section coming very soon).&lt;/p&gt;

&lt;p&gt;You can pass the value in the form of a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; or as &lt;code&gt;date object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parameter the pipe accepts&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;format&lt;/code&gt; - &lt;br&gt;
The way you want to display the date.&lt;br&gt;
It is of string type.&lt;br&gt;
It is optional.&lt;br&gt;
Default value is &lt;code&gt;mediumDate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;br&gt;
The time zone what you want to display.&lt;br&gt;
It is of type string type.&lt;br&gt;
It is optional.&lt;br&gt;
Default is undefined&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locale&lt;/code&gt;&lt;br&gt;
It represents the locale format rule&lt;br&gt;
It is of type string.&lt;br&gt;
It is optional.&lt;br&gt;
Default is the project locale.&lt;/p&gt;

&lt;p&gt;Now lets see in practice - &lt;/p&gt;

&lt;p&gt;Lets open the component.ts file -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5MYyQVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/243r85gxkmtbaypdhb4i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5MYyQVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/243r85gxkmtbaypdhb4i.PNG" alt="Image description" width="509" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And lets add the following code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  // Date in String
  dateInString = '01/05/2022';

  // Date in Number
  dateInNumber = Date.now();;

  // Date Object
  dateInObject = new Date();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets open the component template file and paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h3&amp;gt;Date Pipe Demo&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ dateInNumber | date }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ dateInObject | date }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the below output - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nW4oVR40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxy7b336luo6dug54nc9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nW4oVR40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxy7b336luo6dug54nc9.PNG" alt="Image description" width="314" height="212"&gt;&lt;/a&gt;&lt;br&gt;
Here in the above code we are using the date Pipe to format the date or we can say we are passing the value to the date pipe to get it formatted. By default it is displayed in &lt;code&gt;medium&lt;/code&gt; format.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt; example&lt;br&gt;
There are 12 different formats available by default - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;full&lt;/li&gt;
&lt;li&gt;shortDate&lt;/li&gt;
&lt;li&gt;mediumDate&lt;/li&gt;
&lt;li&gt;longDate&lt;/li&gt;
&lt;li&gt;fullDate&lt;/li&gt;
&lt;li&gt;shortTime&lt;/li&gt;
&lt;li&gt;mediumTime&lt;/li&gt;
&lt;li&gt;longTime&lt;/li&gt;
&lt;li&gt;fullTime&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets paste in the below code in the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;short:&amp;lt;/b&amp;gt; {{ dateInString | date: "short" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;medium:&amp;lt;/b&amp;gt;{{ dateInString | date: "medium" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;long:&amp;lt;/b&amp;gt;{{ dateInString | date: "long" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;full:&amp;lt;/b&amp;gt;{{ dateInString | date: "full" }}&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;shortDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "shortDate" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;mediumDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "mediumDate" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;longDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "longDate" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;fullDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "fullDate" }}&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;shortTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "shortTime" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;mediumTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "mediumTime" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;longTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "longTime" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;fullTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "fullTime" }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the below output once you run the application -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5IzRqOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk7iw4c9g1admr6nbggh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5IzRqOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk7iw4c9g1admr6nbggh.PNG" alt="Image description" width="453" height="439"&gt;&lt;/a&gt;&lt;br&gt;
Here you can see all the different forms of Date available.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timezone&lt;/code&gt; example&lt;br&gt;
Apart from adding the format you can also pass the timezone. For example IST (Indian Standard Time) or UTC. Two ways you can pass the timezone -&lt;br&gt;
Lets paste the below code in the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b&amp;gt;Form 1&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"IST" }}&amp;lt;/p&amp;gt;
&amp;lt;b&amp;gt;Form 2&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"+0530" }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above cases in the first example we are passing the timezone name (like IST) and in second we are passing how much ahead or behind compared to the UTC. In both the cases you will see the same output.&lt;br&gt;
If it is behind you should use '-' (negative) sign.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTheFAwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i12kaf7kpo1q2buezp8d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTheFAwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i12kaf7kpo1q2buezp8d.PNG" alt="Image description" width="214" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to show the UTC time zone then you should use the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b&amp;gt;UTC Form 1&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"UTC" }}&amp;lt;/p&amp;gt;
&amp;lt;b&amp;gt;UTC Form 2&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"+0000" }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;locale&lt;/code&gt; example&lt;br&gt;
The third parameter is the locale which I will show in details when covering localization part.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;/p&gt;

&lt;p&gt;If yes do like comment and share.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Baloonza IT newsletters weekly digest #18</title>
      <author>Dmitry Magunov</author>
      <pubDate>Mon, 03 Jan 2022 17:30:52 +0000</pubDate>
      <link>https://dev.to/dimamagunov/baloonza-it-newsletters-weekly-digest-18-1ib</link>
      <guid>https://dev.to/dimamagunov/baloonza-it-newsletters-weekly-digest-18-1ib</guid>
      <description>&lt;p&gt;Happy New Year!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-design"&gt;
  &lt;/a&gt;
  CSS, design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11021?baloon_issue_id=18"&gt;CSS Animation Weekly #281&lt;/a&gt; &lt;br&gt;
Some scroll animations, explore daylight cycles and lots of other inspiration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11039?baloon_issue_id=18"&gt;üìù¬†[CSS-Tricks] 283: Happy Holidays!&lt;/a&gt;&lt;br&gt;
:has() is :here(), cool things you can do with CSS and text,  new spelling and grammatical tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#product-hunt-daily"&gt;
  &lt;/a&gt;
  Product Hunt Daily
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11028?baloon_issue_id=18"&gt;Most upvoted&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume I&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11055?baloon_issue_id=18"&gt;Killing it&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume II&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11081?baloon_issue_id=18"&gt;Up and away&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume III&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11116?baloon_issue_id=18"&gt;Top 10&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume IV&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11164?baloon_issue_id=18"&gt;5,4,3,2,1&lt;/a&gt;&lt;br&gt;
The 5 most upvoted products of 2021&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hacker-newsletter"&gt;
  &lt;/a&gt;
  Hacker Newsletter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.baloonza.com/issues/11155?baloon_issue_id=18"&gt;Hacker Newsletter #584&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frontend-javascript-react"&gt;
  &lt;/a&gt;
  Frontend, javascript, React
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11085?baloon_issue_id=18"&gt;Frontend Weekly - Issue 286&lt;/a&gt;&lt;br&gt;
6 hidden JavaScript gems that you probably miss, top 30 Git Command, React Chat Tutorial and other&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Awesome Javascript Newsletter&lt;/code&gt; &lt;a href="https://app.baloonza.com/issues/11139?baloon_issue_id=18"&gt;üíª Issue 293 - PrinceJS: Prince of Persia&lt;/a&gt;&lt;br&gt;
New in Node.js: "node:" protocol imports, Auto-Currying In TypeScript, Lessons Learned Achieving 100% Test Coverage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Awesome React Newsletter&lt;/code&gt; &lt;a href="https://app.baloonza.com/issues/11142?baloon_issue_id=18"&gt;üíª Issue 211 - 5 Best Online Courses to learn React.js with Hooks in 2022&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-science-weekly-newsletter"&gt;
  &lt;/a&gt;
  Data Science Weekly Newsletter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.baloonza.com/issues/11150?baloon_issue_id=18"&gt;Data Science Weekly - Issue 423&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>javascript</category>
      <category>react</category>
      <category>startup</category>
      <category>css</category>
    </item>
    <item>
      <title>Best Python resources from beginner to advanced </title>
      <author>Juan Benitez </author>
      <pubDate>Mon, 03 Jan 2022 17:23:09 +0000</pubDate>
      <link>https://dev.to/juanbenitezdev/best-python-resources-from-beginner-to-advanced-c9a</link>
      <guid>https://dev.to/juanbenitezdev/best-python-resources-from-beginner-to-advanced-c9a</guid>
      <description>&lt;p&gt;Hey there, I made this compilation of websites, courses, youtube videos for learning Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-courses"&gt;
  &lt;/a&gt;
  1. Courses
&lt;/h2&gt;

&lt;p&gt;Couple of free courses to learn Python from scratch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/_uQrJ0TkZlc"&gt;Python Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/rfscVS0vtbw"&gt;Python Crash Course FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-to-computer-science-and-programming-7"&gt;FREE MIT Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-programming-language/"&gt;Geeks for Geeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  2. Algorithms and Data structures.
&lt;/h2&gt;

&lt;p&gt;Videos, texts, repositories about algorithms and data structures, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/8hly31xKli0"&gt;Data structures and Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/"&gt;Geeks for Geeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;BigO Cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tayllan/awesome-algorithms"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-websites"&gt;
  &lt;/a&gt;
  3. Websites
&lt;/h2&gt;

&lt;p&gt;Websites all about Python&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.learnpython.org/"&gt;Learn Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.pythontips.com/en/latest/index.html"&gt;Python Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testdriven.io/guides/complete-python/"&gt;Test Driven&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-web-frameworks"&gt;
  &lt;/a&gt;
  4. Web frameworks.
&lt;/h2&gt;

&lt;p&gt;Some of the best Python web frameworks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wsvincent/awesome-django"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juanbenitezdev/django-rest-framework-crud"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/F5mRW0jo-U4"&gt;Django tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Z1RJmh_OqeA"&gt;Flask Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-books"&gt;
  &lt;/a&gt;
  5. Books
&lt;/h2&gt;

&lt;p&gt;For those who likes to read&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.packtpub.com/product/clean-code-in-python/9781788835831"&gt;Clean Code in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/python-cookbook-3rd/9781449357337/"&gt;Python CookBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.packtpub.com/product/expert-python-programming-fourth-edition/9781801071109"&gt;Expert Python Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.feldroy.com/books/two-scoops-of-django-3-x"&gt;Two Scoops of Django 3.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-advanced-topics"&gt;
  &lt;/a&gt;
  6. Advanced topics.
&lt;/h2&gt;

&lt;p&gt;Some advanced topics, from metaclasses to machine learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/cKPlPJyQrt4"&gt;Be a Python Expert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/BRn6UCw35og"&gt;Python Advanced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/machine-learning-with-python/"&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find helpful this list and can start your Python journey.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/juanbenitezdev"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/juanbenitezdev"&gt;GitHub&lt;/a&gt; to be up to date with all my projects and content.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding Docker in a visual way (in üé• video): part 5 ‚Äì Registry</title>
      <author>Aur√©lie Vache</author>
      <pubDate>Mon, 03 Jan 2022 17:10:16 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-in-a-visual-way-in-video-part-5-registry-2397</link>
      <guid>https://dev.to/aurelievache/understanding-docker-in-a-visual-way-in-video-part-5-registry-2397</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker, then I've auto-published a book and since now I've started a new serie of video! :-)&lt;/p&gt;

&lt;p&gt;I imagined a serie of short videos with a mix of sketchnotes and speech.&lt;/p&gt;

&lt;p&gt;I think it could be a good way, more visual, with audio &amp;amp; video to explain Docker (and others technologies).&lt;/p&gt;

&lt;p&gt;The fourth episode is focused on another very important Docker object: Dangling images.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Fs_Yo4W8dw0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video is in French BUT I done the subtitles in english (and french too).&lt;/p&gt;

&lt;p&gt;And the bonus of this article, here you can find all the sketchnotes and illustrations of the video:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5a0HaPuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzja0s68jtn7wl56p9fx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5a0HaPuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzja0s68jtn7wl56p9fx.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1U2yr9GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99qa25ivkkgrpxiw9ymz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U2yr9GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99qa25ivkkgrpxiw9ymz.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8muaESI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8wxmivdi44mh9g8248.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8muaESI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8wxmivdi44mh9g8248.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkkSpBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hraadv8q9rl6ejvpo2wp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkkSpBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hraadv8q9rl6ejvpo2wp.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSHGn_DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78n15bnwwtsrp56c2m79.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSHGn_DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78n15bnwwtsrp56c2m79.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79Qkm-Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka7lydneq6sfyxij0mcc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79Qkm-Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka7lydneq6sfyxij0mcc.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmPf9t96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63nhsr302t9o5shtiie4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmPf9t96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63nhsr302t9o5shtiie4.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tv6p9_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80i5932dqtotzkkis6ac.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tv6p9_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80i5932dqtotzkkis6ac.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5M9h0Lwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5ccc10gt7444we7oo7s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5M9h0Lwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5ccc10gt7444we7oo7s.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgbFTVZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j0nisbu1qilwpnp64w7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgbFTVZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j0nisbu1qilwpnp64w7.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cy-xdTzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrs932m3r5c8v470yeqi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cy-xdTzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrs932m3r5c8v470yeqi.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjaz12gS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vr8xmidyc84rg82s7pb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjaz12gS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vr8xmidyc84rg82s7pb.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbEFUr6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jost6kjubfnd6fr4vz9d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbEFUr6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jost6kjubfnd6fr4vz9d.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6HIaCaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvin709ojrnlkhfmf6cd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6HIaCaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvin709ojrnlkhfmf6cd.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9I50ei6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdj64b1y3irncm2s14lz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9I50ei6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdj64b1y3irncm2s14lz.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-J-7O-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si59wzxmyzlsswterr4o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-J-7O-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si59wzxmyzlsswterr4o.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5GJdBH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm23beleugs5xhx0z784.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5GJdBH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm23beleugs5xhx0z784.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4raYHYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q90edleip4zc0maxi07l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4raYHYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q90edleip4zc0maxi07l.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked the video and are interested to watch another ones, please give me some feedbacks (and you can also subscribe to &lt;a href="https://www.youtube.com/c/AurelieVache"&gt;my Youtube channel&lt;/a&gt;, if you want to ‚ù§Ô∏è).&lt;/p&gt;

&lt;p&gt;I can also give you, in an article, the full english transcript and sketchnotes in high quality, about this video, if you are interested.&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Docker (and new ones!) to make a "book" of 120 pages: &lt;a href="https://aurelievache.gumroad.com/l/understanding-docker-visual-way"&gt;"Understanding Docker in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like theses sketchnotes, you can follow me, I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>containers</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#01)</title>
      <author>martin krause</author>
      <pubDate>Mon, 03 Jan 2022 16:55:36 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-01-29bi</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-01-29bi</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-accessibility-tree-in-chrome-devtools"&gt;
  &lt;/a&gt;
  Full accessibility tree in Chrome DevTools
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome DevTools is launching a full accessibility tree making it easier for developers to get an overview of the whole tree. In this post find out how this tree is created and how to use it in your work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/blog/full-accessibility-tree/"&gt;https://developer.chrome.com/blog/full-accessibility-tree/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#add-a-service-worker-to-your-site"&gt;
  &lt;/a&gt;
  Add a Service Worker to Your Site
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the best things you can do for your website in 2022 is add a service worker, if you don‚Äôt have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/add-a-service-worker-to-your-site/"&gt;https://css-tricks.com/add-a-service-worker-to-your-site/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#responsive-css-border-radius-with-the-fab-four-technique"&gt;
  &lt;/a&gt;
  Responsive CSS border radius with the Fab Four technique
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You are probably already familiar with media-queries, which apply styling based on the browser viewport or the screen resolution, but sometimes we might need container-queries, which are still only available under feature flags for some browsers.&lt;br&gt;
Today we will implement the Fab Four technique to apply a border-radius to an element depending on its container dimension, rather than the screen width.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/responsive-css-border-radius-fab-four-technique/"&gt;https://blog.logrocket.com/responsive-css-border-radius-fab-four-technique/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-price-projects-and-manage-scope-creep"&gt;
  &lt;/a&gt;
  How To Price Projects And Manage Scope Creep
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Scoping, estimating, and running digital projects can often feel like an exercise in futility. In this article, Paul Boag explains why you need to start breaking your projects down into manageable phases and why that‚Äôs the best way to achieve significant benefits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/12/how-price-projects-manage-scope-screep/"&gt;https://www.smashingmagazine.com/2021/12/how-price-projects-manage-scope-screep/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-not-my-burnout"&gt;
  &lt;/a&gt;
  That‚Äôs Not My Burnout
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If, like many folks during the pandemic, you‚Äôve begun confusing burnout for achievement, Donna Bungard will show you how to recognize that you‚Äôre low on fuel and give you a map of rest stops where you can refill your tank.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://alistapart.com/article/thats-not-my-burnout/"&gt;https://alistapart.com/article/thats-not-my-burnout/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
