<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How (and Why) You Should Post on DevDojo Today</title>
      <author>Reed Barger</author>
      <pubDate>Mon, 19 Apr 2021 18:29:08 +0000</pubDate>
      <link>https://dev.to/reedbarger/how-and-why-you-should-post-on-devdojo-today-19h4</link>
      <guid>https://dev.to/reedbarger/how-and-why-you-should-post-on-devdojo-today-19h4</guid>
      <description>&lt;p&gt;Today I want to share a great new developer community that you can use to share your blog posts and knowledge that you want to make available to others. &lt;/p&gt;

&lt;p&gt;This community is called &lt;a href="https://devdojo.com"&gt;DevDojo&lt;/a&gt;. I want to share it with you because I believe it has everything blogging sites like Dev and Hashnode have, plus many more features that can accelerate your learning and reach a wider audience. &lt;/p&gt;

&lt;p&gt;In this article I'll show you why it's in your interest to start sharing your content on &lt;a href="https://devdojo.com"&gt;DevDojo&lt;/a&gt; as well as how you can move all of your previous blog posts over to it today. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An important side note is that I am not affiliated with DevDojo. I am not getting paid for this post. As someone who's only very recently become part of their community and has enjoyed everything they offer (free), I believe it is a resource that all developers who are sharing their content online should be aware of.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-does-devdojo-have-to-offer"&gt;
  &lt;/a&gt;
  What Does DevDojo Have To Offer?
&lt;/h2&gt;

&lt;p&gt;The first question is--why would you want to join DevDojo? &lt;/p&gt;

&lt;p&gt;What does it offer as compared to places like Medium, Dev, or Hashnode? &lt;/p&gt;

&lt;p&gt;What's special about DevDojo is that it is &lt;em&gt;both&lt;/em&gt; a blogging community to share your developer knowledge with others and so much more.&lt;/p&gt;

&lt;p&gt;What's the blogging experience like? Very similar to Dev or Hashnode, you can post your any blog post you like, written in the Markdown syntax. If you're comfortable posting on any of these platforms, you'll be right at home on DevDojo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#very-clean-markdown-editor"&gt;
  &lt;/a&gt;
  Very Clean Markdown Editor
&lt;/h2&gt;

&lt;p&gt;It's an incredibly easy-to-use editor that, in my opinion, looks very close to the Ghost editor: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2zirFYO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f18qk5el8kq4glvtdxl3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2zirFYO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f18qk5el8kq4glvtdxl3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autogenerated-thumbnails-for-your-posts"&gt;
  &lt;/a&gt;
  Auto-Generated Thumbnails for your Posts
&lt;/h2&gt;

&lt;p&gt;What makes DevDojo every better than every other platform in terms of its editor is that it allows you to auto-generate and customize your own thumbnails. You can create your own totally custom thumbnails in seconds, directly within the editor. In fact, the cover for this post was auto-generated. How cool is that?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSTzphE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9xisuilp7afjuwbqwc4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSTzphE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9xisuilp7afjuwbqwc4.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposure-to-a-larger-audience"&gt;
  &lt;/a&gt;
  Exposure to a Larger Audience
&lt;/h2&gt;

&lt;p&gt;Just like on any major platform, if users like your content, they can follow you to have your posts added to their feed. &lt;/p&gt;

&lt;p&gt;On top of that, any blog post that you make can be featured on the DevDojo homepage and reach a much wider audience. &lt;/p&gt;

&lt;p&gt;I was fortunate enough to have one of my posts featured on the homepage last week and was selected as one of their top 5 articles. I received a lot of exposure after being chosen--over 1700 views. As of today, it's received over 2000: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MkSFuHOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imeo384y15us7oi0swci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkSFuHOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imeo384y15us7oi0swci.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus, on top of gaining a larger readership, if your post is selected as one of the top five posts for each week, you also get $20. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-videos-and-courses-that-can-earn-you-money"&gt;
  &lt;/a&gt;
  Training Videos and Courses (That Can Earn You Money)
&lt;/h2&gt;

&lt;p&gt;While DevDojo is a great blogging platform, there's so much more to it than that. &lt;/p&gt;

&lt;p&gt;You can also very easily create video posts and courses. What's so great about this option is that when people watch your videos, you can earn money from all the users that have signed up to the pro tier on DevDojo. If you sign up for the pro tier, you can also watch any videos and courses that are featured on DevDojo: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xh_KDO48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pywbw1jf6vi01vknmm99.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xh_KDO48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pywbw1jf6vi01vknmm99.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So yes, in addition to being able to share and read others' blog posts, you can post videos and even entire courses from which you can earn money. &lt;/p&gt;

&lt;p&gt;As you can see, it goes much further than these other blogging platforms in terms of the resources you're able to use to learn and the tools you can leverage to earn money on the side.&lt;/p&gt;

&lt;p&gt;Additionally, there's a neat tool that allows you to create and manage helpful code snippets you want to keep from articles you've read. If there's a bit of code that you want to hold on to, you can save it in your code snippets area. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-move-my-blog-posts-to-devdojo"&gt;
  &lt;/a&gt;
  How Do I Move My Blog Posts to DevDojo?
&lt;/h2&gt;

&lt;p&gt;If you don't have any blog posts on other platforms, you create an account and start blogging right away on DevDojo.&lt;/p&gt;

&lt;p&gt;But what if you have a backlog of posts that you've made on sites like Hashnode or Dev? &lt;/p&gt;

&lt;p&gt;There's a very cool feature that allows you to import all of those posts very easily and have them published on your DevDojo account within 1-2 minutes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Right now, you can only instantly migrate posts from Hashnode, but I believe there will be a way to do so with platforms like Dev and Ghost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#import-your-hashnode-posts-in-devdojo"&gt;
  &lt;/a&gt;
  Import your Hashnode posts in DevDojo
&lt;/h2&gt;

&lt;p&gt;Once you are signed into your Hashnode account, head to your blog dashboard and select the Export option: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sj1U30YF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg6fduf9gmie147lxiou.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sj1U30YF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg6fduf9gmie147lxiou.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, you will hit "Start Download", after which you will be given a JSON file that includes data for all of your Hashnode posts. Save this anywhere you like on your computer.&lt;/p&gt;

&lt;p&gt;Next, head to your DevDojo account. Go to "Settings" and then "Import". &lt;/p&gt;

&lt;p&gt;And all you need to do is select that JSON file and hit the Import button: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anV_u_Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvw8fq9o9d1uaakoq1ow.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anV_u_Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvw8fq9o9d1uaakoq1ow.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! &lt;/p&gt;

&lt;p&gt;You've published all of your Hashnode posts to DevDojo with just one click. 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this post and are interested in checking out DevDojo as a way to expand your learning as well your reach as a developer and educator. &lt;/p&gt;

&lt;p&gt;I want to be clear that I am not advocating for you or anyone to move away from platforms that they like. My aim is to give some exposure to another helpful site that can help you reach your goals, not to the exclusion of any other.&lt;/p&gt;

&lt;p&gt;Check it out at &lt;a href="https://devdojo.com"&gt;DevDojo.com&lt;/a&gt; and let me know what you think!&lt;/p&gt;

&lt;p&gt;Also, feel free to &lt;a href="https://devdojo.com/reedbarger"&gt;follow me&lt;/a&gt; over at DevDojo if you like.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>devdojo</category>
      <category>blogging</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 7 Salary Negotiation Tips for Software Developers</title>
      <author>Ryan Thelin</author>
      <pubDate>Mon, 19 Apr 2021 18:21:33 +0000</pubDate>
      <link>https://dev.to/educative/top-7-salary-negotiation-tips-for-software-developers-g4o</link>
      <guid>https://dev.to/educative/top-7-salary-negotiation-tips-for-software-developers-g4o</guid>
      <description>&lt;p&gt;Tech jobs are notorious for their high &lt;strong&gt;pay variance&lt;/strong&gt;. Even developers of equal experience may have salaries that differ by tens of thousands of dollars. While this is sometimes due to company size or type, it's more often a result of skillful compensation negotiations. &lt;/p&gt;

&lt;p&gt;These negotiations are especially difficult for developers as most computer science education tracks do not teach how to plan and execute pay negotiations. Whether you're just &lt;a href="https://www.educative.io/blog/7-hard-truths-about-starting-a-career-as-a-developer"&gt;starting out as a developer&lt;/a&gt; or have years of experience, salary negotiation skills are a key part of earning your fair share.&lt;/p&gt;

&lt;p&gt;Today, we'll give you some essential tips to ensure you don't walk in unprepared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s what we’ll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tip1"&gt;Tip 1: Be strategic with timing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip2"&gt;Tip 2: Consider other benefits on the table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip3"&gt;Tip 3: Never say what salary you want&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip4"&gt;Tip 4: Decide the lowest number you'll accept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip5"&gt;Tip 5: Focus on the company's wants, not yours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip6"&gt;Tip 6: Prepare a one sheet that tells your story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tip7"&gt;Tip 7: Practice your negotiation beforehand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Get the salary you deserve &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Learn negotiation techniques and tips that will ensure you never leave money on the table again.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/collection/5186009994625024/4957266294341632"&gt;Maximizing Total Comp in Tech&lt;/a&gt;&lt;br&gt;
&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-1-be-strategic-with-timing"&gt;
  &lt;/a&gt;
  Tip 1: Be strategic with timing
&lt;/h2&gt;

&lt;p&gt;You have the most leverage as a candidate when you have multiple offers on the table. From here, you can push for employers to match other offers or compare the benefits of each offer. However, many candidates receive &lt;strong&gt;staggered offers&lt;/strong&gt; that make it more difficult to negotiate. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can increase the chance that your offers line up well by carefully planning the timing of each interview step. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, imagine you're invited to a second interview at &lt;a href="https://www.educative.io/blog/google-coding-interview"&gt;Google&lt;/a&gt; before you've had your first interview at &lt;a href="https://www.educative.io/blog/crack-amazon-coding-interview-questions"&gt;Amazon&lt;/a&gt;. You should take the latest possible interview slot for your next Google interview to slow that process down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timing is equally important&lt;/strong&gt; for pursuing a pay raise. Many people wait to ask for a raise during review season, but most managers will have already decided who has earned a raise by that point. &lt;/p&gt;

&lt;p&gt;Asking earlier is a win-win for you because it either results in an immediate pay increase or puts you at the forefront of their mind when considering raises during the upcoming review period.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Avoid Ultimatums&lt;/strong&gt;: Nobody likes to be told "or else". It's better to state that you're considering multiple options and ask how the company could make their role more appealing to you when bringing up other offers. &lt;/p&gt;

&lt;p&gt;This avoids the standoffish attitude of a "match this or else" statement.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-2-consider-other-benefits-on-the-table"&gt;
  &lt;/a&gt;
  Tip 2: Consider other benefits on the table
&lt;/h2&gt;

&lt;p&gt;When evaluating an offer or negotiating a raise, remember that there are &lt;strong&gt;many benefits beyond salary&lt;/strong&gt;. These can be non-salary financial rewards like stock options, yearly bonuses, or sign-on bonuses. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They can also be things that benefit your quality of life or help future job prospects like titles or leadership roles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should review each of these benefits to decide how valuable each is for you. For example, work-from-home opportunities may be essential for some while delivering no value to someone else who prefers to work at the office.&lt;/p&gt;

&lt;p&gt;For job offers, weighing these non-salary benefits helps you evaluate how valuable an offer is to you as a whole, rather than just looking at the salary number alone.&lt;/p&gt;

&lt;p&gt;For raises, remember which benefits sound appealing to you and try to negotiate for them. Companies are often more willing to provide these benefits than direct salary improvements. Keeping these as options to put forward increases the chance you'll leave the table with an improvement.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-3-never-say-what-salary-you-want"&gt;
  &lt;/a&gt;
  Tip 3: Never say what salary you want
&lt;/h2&gt;

&lt;p&gt;Even if you have a good idea of what your skills are worth, it's best not to list a specific number when discussing salary. &lt;/p&gt;

&lt;p&gt;Listing an explicit number essentially sets a ceiling for the maximum amount you could earn. Your listed amount could be less than the company was willing to pay, meaning you've accidentally lowered your pay. Even if your suggestion is spot on, the company will only negotiate down from there. &lt;/p&gt;

&lt;p&gt;Instead, ask what their budget is for this role. The company will often lowball this budget, which gives you a salary floor that you can negotiate up from. Asking for their budget also opens up the possibility to get benefits outside of salary to sweeten the deal while still respecting their budget.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Current compensation&lt;/strong&gt;: If you're negotiating for a new job, sometimes you'll be asked what you're currently making at your other job. Avoid answering this question because it may allow the company to provide you a lower offer than they otherwise would.&lt;/p&gt;

&lt;p&gt;Instead, say something like "I'm not comfortable sharing my current salary. I'd prefer we focus on the value I can bring to this company."&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#keep-the-learning-going" class="anchor"&gt;
  &lt;/a&gt;
  Keep the learning going.
&lt;/h4&gt;

&lt;p&gt;Learn top negotiating techniques to help you get the most out of any job. Educative's text-based courses allow you to learn at your own pace and learn practical tips from industry veterans.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/collection/5186009994625024/4957266294341632"&gt;Maximizing Total Comp in Tech&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-4-decide-the-lowest-number-youll-accept"&gt;
  &lt;/a&gt;
  Tip 4: Decide the lowest number you'll accept
&lt;/h2&gt;

&lt;p&gt;Before you enter the salary negotiation, decide what your lowest acceptable salary is. An easy way to find this number is to sum your total yearly expenses like rent, car payments, groceries, loans, etc. &lt;/p&gt;

&lt;p&gt;You'll want to be accumulating wealth over time, so multiply this number by 1.5 (keep one-third of your income) or 2 (keep half your income). This amount will be the lowest salary you can accept and still progress financially.&lt;/p&gt;

&lt;p&gt;You should also consider your next best alternative before going to negotiations. The stronger your backup plan is, the stronger your position and the more ambitious you can be with your lowest salary. &lt;/p&gt;

&lt;p&gt;If a company offers you a number that is &lt;strong&gt;lower than your minimum,&lt;/strong&gt; don’t outright tell them the number you want them to reach. &lt;/p&gt;

&lt;p&gt;Instead, pause, and say &lt;em&gt;“that is not quite what I was expecting. I’d be willing to accept [stretchGoal]. How can we get closer to that number?”&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;If you've already asked for more and they're sticking to their original figure, it might be time to walk away. Let them know that you'll need some time to think about it, and they may find a way to raise it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never give a yes or no answer during the meeting.&lt;/strong&gt; &lt;br&gt;
Wait until the last few days to respond with your answer. The period between will lean a bit of pressure on the interviewer and they may reach out with additional benefits. &lt;/p&gt;

&lt;p&gt;If not, refuse the offer. It's important to know the value of your work and when to avoid jobs that won't improve your financial situation.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-5-focus-on-the-companys-wants-not-yours"&gt;
  &lt;/a&gt;
  Tip 5: Focus on the company's wants, not yours
&lt;/h2&gt;

&lt;p&gt;Making an argument for a raised salary ultimately comes down to what you can do for the company. This argument is immediately undermined if you state that you &lt;strong&gt;want or deserve&lt;/strong&gt; higher pay. &lt;/p&gt;

&lt;p&gt;Bringing up your wants moves the conversation away from a logical argument to an empathetic request for the company to meet your desires. You are essentially asking the company to bargain with how they see your desires and worth. The compelling case you've made up to that point will be damaged as a result. &lt;/p&gt;

&lt;p&gt;Instead, focus on the company's needs and how you fulfill them. Keep the conversation centered on the value you provide and how the company can fairly compensate you for that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Prepare for future negotiations&lt;/strong&gt;: Even if you're rejected for a raise, keep focusing on the company's wants. Ask "what do you need to see in the next 6 months to feel comfortable approving a raise?" &lt;/p&gt;

&lt;p&gt;The burden is then on you to prove your worth rather than on your manager to decide now, giving you a list of milestones you can use as evidence on your next negotiation.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-6-prepare-a-onesheet-that-tells-your-story"&gt;
  &lt;/a&gt;
  Tip 6: Prepare a one-sheet that tells your story
&lt;/h2&gt;

&lt;p&gt;Success in negotiation begins well before you sit down across from the representative. Your case for your salary needs to be on-topic and full of empirical metrics that prove your worth.&lt;/p&gt;

&lt;p&gt;To make sure you don't lose track of any talking points, write a &lt;strong&gt;one-page brag sheet&lt;/strong&gt; that outlines the measurable value you've provided in the past. This sheet should include any awards, accomplishments, or co-worker testimonials you've received. Writing these down will help you hit each point and demonstrate your value to the company as a worker.&lt;/p&gt;

&lt;p&gt;You should also collect market research for your chosen job, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;National average salary for this role&lt;/li&gt;
&lt;li&gt;Average salary for this role in your area/city&lt;/li&gt;
&lt;li&gt;Salary data for roles in companies of similar size&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use Metrics&lt;/strong&gt;: Whenever possible, use explicit metrics over summaries. For example, "My project increased user signup by 15%" is more compelling than "I helped increase user signup". &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-7-practice-your-negotiation-beforehand"&gt;
  &lt;/a&gt;
  Tip 7: Practice your negotiation beforehand
&lt;/h2&gt;

&lt;p&gt;You also need to practice your negotiation aloud and review common rebuttals. The best way to do this is to get expert advice and do mock negotiations with a friend.&lt;/p&gt;

&lt;p&gt;This is especially important because many of us are conditioned to not talk about money. Practicing with a trusted friend or coworker helps you develop a natural flow to walk through the key points you want to hit and break down the common anxiety around financial discussions.&lt;/p&gt;

&lt;p&gt;Give them a list of tough questions to ask you like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is this company your top choice?&lt;/li&gt;
&lt;li&gt;Have you received offers from other companies? What were they?&lt;/li&gt;
&lt;li&gt;If we meet your salary expectations, will you accept immediately?&lt;/li&gt;
&lt;li&gt;How did you choose your chosen salary amount?&lt;/li&gt;
&lt;li&gt;Is anyone else offering you a higher salary?&lt;/li&gt;
&lt;li&gt;Why don’t you want to give your salary requirements?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you're done, ask your friend for feedback. Negotiating is a difficult skill to learn but practice will help you get better each time.&lt;/p&gt;

&lt;p&gt;To ensure you don't leave any money on the table, Educative has created the course &lt;a href="https://www.educative.io/collection/5186009994625024/4957266294341632"&gt;&lt;strong&gt;Maximizing Total Comp in Tech&lt;/strong&gt;&lt;/a&gt;. This course helps you prepare for salary or raise negotiations by exploring tips for every part of the process like pre-negotiation emails, words to avoid during the negotiation, and how to follow up. &lt;/p&gt;

&lt;p&gt;By the end of this course, you'll discover your power as a negotiator and be able to walk into your next negotiation with confidence.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#keep-reading-about-career-advice"&gt;
  &lt;/a&gt;
  Keep reading about career advice
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/how-to-become-product-manager"&gt;How to become a Product Manager: top three PM career paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/land-tech-job-advice"&gt;Land a job in tech: career advice for recent college graduates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/how-to-negotiate-salary-software-developer"&gt;How to negotiate your salary as a software developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>career</category>
      <category>startup</category>
      <category>motivation</category>
      <category>resume</category>
    </item>
    <item>
      <title>SOLID - The Letter D - Dependency Inversion Principle</title>
      <author>Vitor Alves</author>
      <pubDate>Mon, 19 Apr 2021 18:07:16 +0000</pubDate>
      <link>https://dev.to/vitoraa/d-of-solid-dependency-inversion-principle-mcm</link>
      <guid>https://dev.to/vitoraa/d-of-solid-dependency-inversion-principle-mcm</guid>
      <description>&lt;p&gt;The last SOLID principle is the Dependency Inversion Principle (DIP). This principle tell us that the most flexible systems use abstract dependencies instead of concrete ones. The way you achieve this is using interfaces.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-interface"&gt;
  &lt;/a&gt;
  What is interface?
&lt;/h1&gt;

&lt;p&gt;Talking about software development, interface is a abstract type that contains no data but defines behaviours as method signatures.&lt;br&gt;
For example, imagine we want to insert an account in our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;AddAccountRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that the interface AddAccountRepository doesn't have an implementation, there is only a signature of the Add method. But you must be wondering: how could I use this method if there is no code?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-implement-an-interface"&gt;
  &lt;/a&gt;
  How to implement an interface?
&lt;/h1&gt;

&lt;p&gt;Imagine we would like to write the code of Add method. We have to create a new class to implement this interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AccountMongoRepository&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AddAccountRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we write only this lines of code our IDE (Visual Studio, Eclipse, etc) will say that we must create a method called "Add". It means that when we use the word "implements" and after an interface, we have to describe and implement all the signatures of this interface. So, our code would  look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AccountMongoRepository&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AddAccountRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// insert an user into a MongoDb&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we had another interface called DeleteAccountRepository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DeleteAccountRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just have to add the interface on the "implements" part and write the delete method implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AccountMongoRepository&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AddAccountRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DeleteAccountRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// insert an user into a MongoDb&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// delete an user&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have an interface and a class that implements the methods of these interfaces. Now, how can we use this interface?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-an-the-implementation-of-an-interface"&gt;
  &lt;/a&gt;
  How to use an the implementation of an interface?
&lt;/h1&gt;

&lt;p&gt;We have to inject this dependency in our class to use their implementations methods. If you want to know more about dependency injection, &lt;a href="https://dev.to/vitoraa/why-you-should-use-dependency-injection-31h9"&gt;click here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DbAddAccount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addAccountRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddAccountRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;accountCreated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAccountRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accountCreated&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above we see the injection of the interface AddAccountRepository. The class DbAddAccount doesn't know about the implementation about the method Add. This is important because we don't have to be aware of changes in dependencies classes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-the-name-dependency-inversion"&gt;
  &lt;/a&gt;
  Why is the name Dependency Inversion?
&lt;/h1&gt;

&lt;p&gt;In one cenario, if we use a concrete class to insert a user into a database, the DbAddAccount class would be dependent of this class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aP4r7-__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqode0q3nlf3nk0whg70.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aP4r7-__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqode0q3nlf3nk0whg70.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we have to change our database to Postgres, for example, our class would be affected. Using the injection dependency we invert the dependency as we see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mTY4sJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehak8arnx19xrw28h7c3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mTY4sJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehak8arnx19xrw28h7c3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now DbAddAccount use AccountMongoRepository through the interface AddAccountRepository. The DbAddAccount doesn't depend on AccountMongoRepository, but on the contrary. To be used, the AccountMongoRepository depedens on DbAddAccount.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Dependency Inversion Principle and Dependency Injection work together. We have to use one to get the other. Although can be more difficult to understand and to code, if you use both in your code the reusability will increase, your code will be more clean and more easier for changes.  &lt;/p&gt;

</description>
      <category>solid</category>
      <category>architecture</category>
      <category>dependencyinversion</category>
      <category>principle</category>
    </item>
    <item>
      <title>The Serverless SWAG!</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Mon, 19 Apr 2021 17:45:03 +0000</pubDate>
      <link>https://dev.to/zachjonesnoel/the-serverless-swag-1p8k</link>
      <guid>https://dev.to/zachjonesnoel/the-serverless-swag-1p8k</guid>
      <description>&lt;p&gt;Serverless architecture has been on trending application architecture for the last couple of years with giant streaming applications such as Netflix, Disney+ have adopted AWS serverless architecture for their workloads. What is that makes serverless an adaptable architecture and also why does it interest the traditional server-based architecture/ monolithic architecture applications to migrate to serverless?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80lPx7o7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e9yj6kcg5vjmw4secvg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80lPx7o7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e9yj6kcg5vjmw4secvg.jpg" alt="Serverless services by AWS vs GCP vs Azure"&gt;&lt;/a&gt;With reference to &lt;a href="https://logz.io/blog/serverless-guide/"&gt;https://logz.io/blog/serverless-guide/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-serverless-swag"&gt;
  &lt;/a&gt;
  What is the serverless SWAG?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;S&lt;/strong&gt; - Server management reduced.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;W&lt;/strong&gt; - Worthwhile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A&lt;/strong&gt; - Application focused.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;G&lt;/strong&gt; - Going global.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#server-management-reduced"&gt;
  &lt;/a&gt;
  Server management reduced
&lt;/h4&gt;

&lt;p&gt;Yes, with serverless as the name suggests, we as developers will not be focused on the server management or maintenance of the server which of-course is a huge deal in a server-based architecture. For eg, on AWS, any server is hosted on an EC2 Instance, and all the patches and upgrades such as the OS, security patches, network patches and the load etc have to be managed by an IT admin, in the serverless world, we are focused on the service to leverage and also code to write. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wa2QCbTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1nboq0p89aupsr96ms3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wa2QCbTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1nboq0p89aupsr96ms3.jpg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Like it is commonly said, the serverless world includes servers which is running your code; just that you wouldn't have to manage the servers, let the cloud provider manage things for you - such as auto scaling, load balancing, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#worthwhile"&gt;
  &lt;/a&gt;
  Worthwhile
&lt;/h4&gt;

&lt;p&gt;Serverless architecture includes cutting edge technologies which gives you goosebumps and you get to choose the right configurations and architecture design which leverage the right service/technology to optimize your compute and also making the application cost effective as you run the services &lt;strong&gt;on-demand&lt;/strong&gt; and you only pay for what you use and for the duration you use. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqyklYht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klggf6meqlprch6m7ctl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqyklYht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klggf6meqlprch6m7ctl.jpg" alt="AWS Summit debunking the myths"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#application-focused"&gt;
  &lt;/a&gt;
  Application focused
&lt;/h4&gt;

&lt;p&gt;As we know we know that we don't have to worry about the under-laying servers where our code runs, we are more application focused. Where the developer of the application is only focused on building the application and choosing the right service for the application. Most of the cloud providers provide a way to develop in the language (Python, NodeJS, Java, GO, etc) of your choice. And for a backend developer to get started on serverless architecture is the only time taken to write the code and provision the end-points. For eg, you have a web application which needs an authentication setup and an API which does certain things, as a backend developer on AWS serverless architecture all you have to do is, setup a AWS Cognito User Pool, write the AWS Lambda function (in the language of your choice) which does the needed actions, configure API Gateway resources to direct requests to Lambda function and voila!! The backend is setup! (will go detailed on getting started on AWS Serverless Architecture in future posts).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#going-global"&gt;
  &lt;/a&gt;
  Going global
&lt;/h4&gt;

&lt;p&gt;We look at applications such as Netflix, Uber, FaceBook etc which are available in any part of the world, the big question for most of the newbies/cloud enthusiasts, is that &lt;em&gt;"how to make it globally available with low latency!?"&lt;/em&gt; Well, in serverless architecture even though you develop/deploy/publish your application in one of the data centers, you can ensure that the application is available throughout the globe. &lt;strong&gt;HOW&lt;/strong&gt;!? well on AWS its the magic of global networks and caching and computing nearer to the user with &lt;a href="https://aws.amazon.com/cloudfront/"&gt;CloudFront&lt;/a&gt; (CDN network which caches the files nearer to the user) and also &lt;a href="https://aws.amazon.com/lambda/edge/#:~:text=Lambda%40Edge%20is%20a%20feature,multiple%20locations%20around%20the%20world"&gt;Lambda@Edge&lt;/a&gt; which is a feature of CloudFront which lets you compute nearer to the user making it more faster and easily available to the user.&lt;/p&gt;

&lt;p&gt;Well, now that's a SWAG to carry on!! &lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>googlecloud</category>
      <category>azure</category>
    </item>
    <item>
      <title>The ultimate collection of vscode extensions for flutter.</title>
      <author>Yassine BENNKHAY</author>
      <pubDate>Mon, 19 Apr 2021 17:38:47 +0000</pubDate>
      <link>https://dev.to/yassine353/the-ultimate-collection-of-vscode-extensions-for-flutter-56a8</link>
      <guid>https://dev.to/yassine353/the-ultimate-collection-of-vscode-extensions-for-flutter-56a8</guid>
      <description>&lt;p&gt;Flutter has been gained big popularity in the last few years, and today I'm going to show you the must-have Vscode Extensions to work comfortably with it and to multiply your productivity, so without any further words let go into it! &lt;/p&gt;

&lt;p&gt;1-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter"&gt;Flutter &lt;/a&gt; :&lt;/strong&gt;&lt;br&gt;
This VS Code extension adds support for effectively editing, refactoring, running, and reloading Flutter mobile apps, as well as support for the Dart programming language.&lt;/p&gt;

&lt;p&gt;2-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code"&gt;Dart&lt;/a&gt; :&lt;/strong&gt;&lt;br&gt;
Dart Code extends VS Code with support for the Dart programming language and provides tools for effectively editing, refactoring, running, and reloading Flutter mobile apps, and  &lt;a href="https://github.com/angulardart/angular"&gt;AngularDart&lt;/a&gt; web apps.&lt;/p&gt;

&lt;p&gt;3-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
Better Comments&lt;br&gt;
The Better Comments extension will help you create more human-friendly comments in your code.&lt;br&gt;
With this extension, you will be able to categorize your annotations into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alerts&lt;/li&gt;
&lt;li&gt;Queries&lt;/li&gt;
&lt;li&gt;TODOs&lt;/li&gt;
&lt;li&gt;Highlights&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commented out code can also be styled to make it clear the code shouldn't be there&lt;br&gt;
Any other comment styles you'd like can be specified in the settings.&lt;/p&gt;

&lt;p&gt;4-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
This extension allows matching brackets to be identified with colors. The user can define which tokens to match, and which colors to use&lt;/p&gt;

&lt;p&gt;5-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=BendixMa.dart-data-class-generator"&gt;Dart Data Class Generator&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
Create dart data classes easily, fast, and without writing boilerplate or running code generation.&lt;/p&gt;

&lt;p&gt;6- &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=naco-siren.gradle-language"&gt;Gradle Language Support&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
An extension to provide Gradle language support for Visual Studio Code, including advanced functionalities like Syntax Highlighting, Keyword Auto-completion Proposals, and Duplication Validation.&lt;/p&gt;

&lt;p&gt;7-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;:&lt;/strong&gt; an extension to get the Material Design icons into your VS Code.&lt;/p&gt;

&lt;p&gt;8-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jeroen-meijer.pubspec-assist"&gt;Pubspec Assist&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
Pubspec Assist is a Visual Studio Code extension that allows you to easily add dependencies to your Dart and Flutter project's pubspec.yaml, all without leaving your editor.&lt;/p&gt;

&lt;p&gt;9-&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets"&gt;Awesome Flutter Snippets&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
Awesome Flutter Snippets is a collection of commonly used Flutter classes and methods. It increases your speed of development by eliminating most of the boilerplate code associated with creating a widget&lt;/p&gt;

&lt;p&gt;10- &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens"&gt;Error Lens&lt;/a&gt;:&lt;/strong&gt;&lt;br&gt;
ErrorLens turbo-charges language diagnostic features by making diagnostics stand out more prominently, highlighting the entire line wherever a diagnostic is generated by the language and also prints the message inline.&lt;/p&gt;

&lt;p&gt;Did I miss any extensions? Let me know in the comments.&lt;br&gt;
If you find this useful give it a like and don't forget to follow me on  &lt;a href="https://www.instagram.com/yassine_dev1/"&gt;Instagram&lt;/a&gt; and on my  &lt;a href="https://yassine-bennkhay.tech/"&gt;Blog&lt;/a&gt; for more useful stuff about flutter.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Django + Angular 6 example | Django Rest Framework + MySQL CRUD example – Part 3: Angular Client</title>
      <author>loizenai</author>
      <pubDate>Mon, 19 Apr 2021 17:25:28 +0000</pubDate>
      <link>https://dev.to/loizenai/django-angular-6-example-django-rest-framework-mysql-crud-example-part-3-angular-client-2l5h</link>
      <guid>https://dev.to/loizenai/django-angular-6-example-django-rest-framework-mysql-crud-example-part-3-angular-client-2l5h</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/django-angular-6-example-django-rest-framework-angular-crud-mysql-example-part-3-angular-client"&gt;https://ozenero.com/django-angular-6-example-django-rest-framework-angular-crud-mysql-example-part-3-angular-client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Django + Angular 6 example | Django Rest Framework + MySQL CRUD example – Part 3: Angular Client&lt;/p&gt;

&lt;p&gt;This tutorial is part 3 of &lt;a href="https://ozenero.com/frontend/angular/django-angular-6-example-django-rest-framework-mysql-crud-example-part-1-overview"&gt;Django-Angular-MySQL series&lt;/a&gt;. Today, we will create Angular Client to make HTTP request &amp;amp; receive response from Django Server.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; &lt;a href="https://ozenero.com/frontend/angular/django-angular-6-example-django-rest-framework-mysql-crud-example-part-1-overview"&gt;Part 1: Overview&lt;/a&gt;&lt;br&gt;&amp;gt;&amp;gt; &lt;a href="https://ozenero.com/python/django-angular-6-example-django-rest-framework-mysql-crud-example-part-2-django-server"&gt;Part 2: Django Server&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Video&lt;/h3&gt;

&lt;h3&gt;Angular Client Overview&lt;/h3&gt;

&lt;h5&gt;Goal&lt;/h5&gt;

&lt;p&gt;The image below shows overview about Angular Components that we will create:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ks9z3vdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ozenero.com/wp-content/uploads/2019/02/django-angular-6-django-rest-api-mysql-angular-client-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ks9z3vdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ozenero.com/wp-content/uploads/2019/02/django-angular-6-django-rest-api-mysql-angular-client-architecture.png" alt="django-angular-6-django-rest-api-mysql-angular-client-architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;Project Structure&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKJmei0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ozenero.com/wp-content/uploads/2019/02/django-angular-6-django-rest-api-mysql-angular-project-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKJmei0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ozenero.com/wp-content/uploads/2019/02/django-angular-6-django-rest-api-mysql-angular-project-structure.png" alt="django-angular-6-django-rest-api-mysql-angular-project-structure" width="251" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have:&lt;br&gt;- 4 components: &lt;strong&gt;&lt;em&gt;customers-list&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;customer-details&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;create-customer&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;search-customer&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;- 3 modules: &lt;strong&gt;&lt;em&gt;FormsModule&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;HttpClientModule&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;AppRoutingModule&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;- &lt;strong&gt;&lt;em&gt;customer.ts&lt;/em&gt;&lt;/strong&gt;: class Customer (id, firstName, lastName)&lt;br&gt;- &lt;strong&gt;&lt;em&gt;customer.service.ts&lt;/em&gt;&lt;/strong&gt;: Service for Http Client methods&lt;br&gt;- &lt;strong&gt;&lt;em&gt;app-routing.module.ts&lt;/em&gt;&lt;/strong&gt;: Routing configuration&lt;/p&gt;

&lt;h3&gt;Setup Angular Project&lt;/h3&gt;

&lt;h5&gt;Create Angular Project&lt;/h5&gt;

&lt;p&gt;Run command: &lt;code&gt;ng new AngularDjango&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;Create Service &amp;amp; Components&lt;/h5&gt;

&lt;p&gt;On Project folder, run commands below:&lt;br&gt;- &lt;code&gt;ng g s customer&lt;/code&gt;&lt;br&gt;- &lt;code&gt;ng g c create-customer&lt;/code&gt;&lt;br&gt;- &lt;code&gt;ng g c customer-details&lt;/code&gt;&lt;br&gt;- &lt;code&gt;ng g c customers-list&lt;/code&gt;&lt;br&gt;- &lt;code&gt;ng g c search-customers&lt;/code&gt;&lt;br&gt;On each Component selector, delete &lt;code&gt;app-&lt;/code&gt; prefix, then change &lt;strong&gt;tslint.json&lt;/strong&gt; &lt;code&gt;rules&lt;/code&gt; - &lt;code&gt;"component-selector"&lt;/code&gt; to &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Implement Angular Client App&lt;/h3&gt;

&lt;h5&gt;Data Model&lt;/h5&gt;

&lt;p&gt;Create new file named &lt;em&gt;customer.ts&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export class Customer {
    id: number;
    name: string;
    age: number;
    active: boolean;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Data Service&lt;/h5&gt;

&lt;p&gt;More at:&lt;/p&gt;

&lt;p&gt;Django + Angular 6 example | Django Rest Framework + MySQL CRUD example – Part 3: Angular Client&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ozenero.com/django-angular-6-example-django-rest-framework-angular-crud-mysql-example-part-3-angular-client"&gt;https://ozenero.com/django-angular-6-example-django-rest-framework-angular-crud-mysql-example-part-3-angular-client&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>mysql</category>
      <category>crud</category>
      <category>angular</category>
    </item>
    <item>
      <title>A Beginners Guide to Project Building</title>
      <author>Ceora Ford</author>
      <pubDate>Mon, 19 Apr 2021 17:15:16 +0000</pubDate>
      <link>https://dev.to/codesandboxio/a-beginners-guide-to-project-building-2okc</link>
      <guid>https://dev.to/codesandboxio/a-beginners-guide-to-project-building-2okc</guid>
      <description>&lt;p&gt;Building projects is a great way to learn and grow as a developer. There are always new skills to learn and we also need to maintain the skills we already have. Project building is a great way to do that.&lt;/p&gt;

&lt;p&gt;We recently got to chat with Charlie Gerard, senior front end developer of Netlify, about project building on the CodeSandbox Podcast and it got me thinking. Many of us probably have a long running list of projects we want to start or have started and never finished. It’s pretty common for developers to have several domain names without any finished project to use them on. How can you start to tackle this problem? How do you actually start and finish projects? &lt;/p&gt;

&lt;p&gt;This article will answer those very questions. If you want to know what steps you can take to successfully start and finish projects, keep reading! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#establish-a-goal"&gt;
  &lt;/a&gt;
  Establish a goal
&lt;/h2&gt;

&lt;p&gt;Before starting, you should establish what your main objective is. What do you want to accomplish with your project? Try to be as specific as possible, including what languages or frameworks you want to build with and what new things you would like to learn. Here’s an example of a great project goal: "Build a gif search engine with JavaScript using the GIPHY API".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-game-plan"&gt;
  &lt;/a&gt;
  Make a game plan
&lt;/h2&gt;

&lt;p&gt;Now that you have your project goal in place, you have to make a plan. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;" Once I have my question and I know what I want to prove, then I can break down the project into small chunks that are doable in my schedule."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Break your project down into small, actionable steps. Again, try to be as specific as possible. &lt;/p&gt;

&lt;p&gt;I typically create a Notion document for each project I build. I create a checklist of all the steps I think I need to take to complete my project. Of course, the scope of your project may change over time. So adjust your game plan as needed. &lt;/p&gt;

&lt;p&gt;Having a clear cut plan in place will make project building go smoothly for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-small-and-iterate-over-time"&gt;
  &lt;/a&gt;
  Start small and iterate over time
&lt;/h2&gt;

&lt;p&gt;The size of your project will depend on what your main objective is. After creating your project plan, you might realize that your project will be a big undertaking. This can be intimidating. To overcome this, you should try starting small and iterating over time.&lt;/p&gt;

&lt;p&gt;Think about what your MVP or minimum viable product is. What is the most basic form of your project? Aim to create your MVP first and iterate on your project over time. You can include possible iterations and improvements in your project game plan. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#celebrate-small-wins"&gt;
  &lt;/a&gt;
  Celebrate small wins
&lt;/h2&gt;

&lt;p&gt;Progress can sometimes feel slow, especially with larger projects. At this point, you should have small actionable steps in place to help move things along. Each step that you complete is worthy of celebration! &lt;/p&gt;

&lt;p&gt;Try sharing your progress with others. Twitter is a great place for this. When you complete a step in your game plan, take time to reflect on what you’ve learned and how you’ve improved. You can take this and write articles, Twitter threads, or even make video content to share with others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adjust-project-scope-if-needed"&gt;
  &lt;/a&gt;
  Adjust project scope if needed
&lt;/h2&gt;

&lt;p&gt;This was a point Charlie made in her podcast episode and I think this is a step we often overlook. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Maybe I pause that project and then I know that I'll get back to it later when I have more knowledge or when I re-frame the question in a way that it can actually be achieved. So to me, that's my way of finishing things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's okay to adjust the scope of your project. Learning that your project goal was too ambitious or having a busy schedule that doesn't allow for lots of project building is completely normal. It's an inevitable part of being a developer who builds side projects. &lt;/p&gt;

&lt;p&gt;If you run into an issue like this, your first inclination may be to just abandon your project. But that isn't always necessary. This might be an opportunity for you to adjust the scope of your project. Go back to your plan and see where you can make some changes. Making project goals smaller or cutting your plan short can be helpful at this stage. This can be upsetting at first but there will always be time and opportunities in the future. Time and more experience may be what you need to move your project ahead so adjusting your project scope to allow for this isn't a failure by any means.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Project based learning is one of the best ways to keep sharp as a developer. But it's also important to know how to finish the projects that you start. So remember these 5 points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Establish a goal&lt;/li&gt;
&lt;li&gt;Make a game plan&lt;/li&gt;
&lt;li&gt;Start small and iterate over time&lt;/li&gt;
&lt;li&gt;Celebrate small wins&lt;/li&gt;
&lt;li&gt;Adjust project scope if needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a portion of the helpful insights Charlie shared on the CodeSandbox Podcast. Make sure to &lt;a href="https://codesandbox.io/podcasts/codesandbox-podcast/charlie-gerard-netlify"&gt;give her interview a listen&lt;/a&gt; and learn more about the awesome work she does.&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5NLw30nyowTpwjV9HDq7bg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>coding</category>
      <category>projects</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Discover your GitHub ranking with Metrics Insights!</title>
      <author>lowlighter 🦑</author>
      <pubDate>Mon, 19 Apr 2021 17:11:14 +0000</pubDate>
      <link>https://dev.to/lowlighter/discover-your-github-ranking-with-metrics-insights-dpe</link>
      <guid>https://dev.to/lowlighter/discover-your-github-ranking-with-metrics-insights-dpe</guid>
      <description>&lt;p&gt;Ever wondered how high is ranked your most starred/forked repository across all &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;? Or whether if you're one of most followed user account 🙂 ?&lt;/p&gt;

&lt;p&gt;Well, this is possible thanks to &lt;a href="https://metrics.lecoq.io/about"&gt;Metrics Insights&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMu1mbvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbq3ewr0ymy8erb40h4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMu1mbvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbq3ewr0ymy8erb40h4s.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also a few additional data, like the number of bytes you've written for each languages you used up until now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfcwvldZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz6urdyh1v1vsquu8wqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfcwvldZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz6urdyh1v1vsquu8wqa.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best of it is that you can use &lt;a href="https://metrics.lecoq.io/about"&gt;Metrics Insights&lt;/a&gt; in your browser without any account login nor cookies!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work-though"&gt;
  &lt;/a&gt;
  🤔 How does it work though?
&lt;/h2&gt;

&lt;p&gt;I'm currently working on &lt;a href="https://github.com/lowlighter/metrics"&gt;Metrics&lt;/a&gt;, a project designed to gather data that you can then render as SVG to embed on your GitHub user profile, like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvs8b7-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivu4p47r55v9tvyib5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvs8b7-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivu4p47r55v9tvyib5x.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently, there's hundreds of options, including 4 templates and 30 plugins, one of them being the &lt;code&gt;🏆 Achievements&lt;/code&gt; one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDIWJ2hW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv663em79s3q66ryqgmo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDIWJ2hW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv663em79s3q66ryqgmo.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, some of them include ranking. You may wonder of these are computed? Well it's actually a lot simpler that it may looks, using &lt;a href="https://docs.github.com/en/graphql"&gt;GitHub GraphQL API&lt;/a&gt; and &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The trick is to fetch the number of &lt;code&gt;followers&lt;/code&gt;, &lt;code&gt;created repositories&lt;/code&gt; of said user, along with their most &lt;code&gt;starred repository&lt;/code&gt; and most &lt;code&gt;forked repository&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then using &lt;code&gt;search&lt;/code&gt; GitHub GraphQL API, we can count how many users and repositories are above using the following query (replacing each &lt;code&gt;$&lt;/code&gt; prefixed values with what we found earlier):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AchievementsRanking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;repo_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stars:&amp;gt;$stars"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;repositoryCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;user_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"followers:&amp;gt;$followers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;userCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;forks_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"forks:&amp;gt;$forks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;repositoryCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;created_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"repos:&amp;gt;$created"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;userCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, we only retrieve the total count of each categorie, we don't even try to fetch any content. So basically, if an user has &lt;code&gt;100&lt;/code&gt; followers and &lt;code&gt;user_rank.userCount&lt;/code&gt; send back &lt;code&gt;999&lt;/code&gt; users, we can deduce that user is 1000&lt;sup&gt;th&lt;/sup&gt; (&lt;code&gt;999+1&lt;/code&gt;) since 999 users has more followers. We do the same for each categorie.&lt;/p&gt;

&lt;p&gt;One thing to note is that GitHub API may return incomplete count below some thresholds as there's too many results to compute for even GitHub to handle it. But if you have created a respository at least once, or having a repository which has been starred 5+ times or forked 1+ time or if you have 3+ followers, you can compete within each categorie 😃 !&lt;/p&gt;

&lt;p&gt;I guess it also means that there's a lot of inactive users and unused account, so if you're somewhat active on GitHub you'll be able to see your stats pretty easily with this tool. &lt;/p&gt;

&lt;p&gt;Since it's not possible to estimate how many repositories and users exists through GitHub's own API, you may wonder how I got total repositories and users count?&lt;/p&gt;

&lt;p&gt;Well, actually these are displayed on &lt;a href="https://github.com/search"&gt;GitHub search&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOWxi5uE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7vb5hibwsr83s2k62ej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOWxi5uE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7vb5hibwsr83s2k62ej.png" alt="GitHub search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why we needed puppeteer 🙂 We just crawl a few times (displayed stats is random between users, repositories and issues) and extract these. Once we got each categorie at least once, no more need for puppeteer, we're ready to go!&lt;/p&gt;



&lt;p&gt;If you're interested, don't hesitate to take a look at this project source code and support it. There's even a plugin to update your profile readme with your latest post from &lt;strong&gt;dev.to&lt;/strong&gt;!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lowlighter"&gt;
        lowlighter
      &lt;/a&gt; / &lt;a href="https://github.com/lowlighter/metrics"&gt;
        metrics
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📊 An image generator with 20+ metrics about your GitHub account such as activity, community, repositories, coding habits, website performances, music played, starred topics, etc. that you can put on your profile or elsewhere!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can provide some feedback like bug reports and suggestion for this feature on &lt;a href="https://github.com/lowlighter/metrics/discussions/229"&gt;GitHub discussions&lt;/a&gt; 🙂&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading, and don't hesitate to share your scores in comments section!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One last bonus: can you guess &lt;strong&gt;who&lt;/strong&gt; is the most followed GitHub user? &lt;a href="https://metrics.lecoq.io/about/torvalds"&gt;Click here to know!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>These three books have helped shaped my Developer career.</title>
      <author>Shwetabh Shekhar</author>
      <pubDate>Mon, 19 Apr 2021 17:03:12 +0000</pubDate>
      <link>https://dev.to/shwetabh1/these-three-books-have-helped-shaped-my-developer-career-4h9n</link>
      <guid>https://dev.to/shwetabh1/these-three-books-have-helped-shaped-my-developer-career-4h9n</guid>
      <description>&lt;p&gt;&lt;em&gt;"Some books are to be tasted, others to be swallowed, and some few to be chewed and digested."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Out of the plethora of books I have read through, these three technical and self-help books, for me, undoubtedly fall into the category of being chewed and digested. Why so? Because they have not only impacted the way I think about work or approach a problem but have helped me add order to my life, write improved code, crack interviews, and achieve a few of my biggest goals - YMMV.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Atomic Habits&lt;br&gt;
Have you ever wondered why solving one leet code question consistently in the long run always works? Why do you keep getting better and better? &lt;br&gt;
It is because of the power of consistent small progress that accumulates to give a positive result. This book helped me realize you don't need to start making drastic changes to become successful. Moreover, techniques such as habit stacking helped me form and maintain new habits easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pragmatic Programmer&lt;br&gt;
I read this during the 2020 lockdown and was saddened to discover it so late. The beautiful thing about this book is that it sparks ideas when you read it. Can you do something more efficiently? Can you do it more elegantly? The topics introduced in this book are a must to put into practice for every developer to empower their career. The tips are equally good.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cracking the Coding Interview&lt;br&gt;
This book is laden with concise theories and thoughtful questions. Even though there are many online alternatives to it, this has a special place in my heart as it helped me crack the Amazon SDE Intern interview back in 2017 along with many others.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please share with me books you would say have added value and helped you progress in your career.&lt;/p&gt;

</description>
      <category>books</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Set a Time Limit on Async Actions</title>
      <author>Ramki Pitchala</author>
      <pubDate>Mon, 19 Apr 2021 17:01:56 +0000</pubDate>
      <link>https://dev.to/ramko9999/set-a-time-limit-on-async-actions-452b</link>
      <guid>https://dev.to/ramko9999/set-a-time-limit-on-async-actions-452b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#set-a-time-limit-on-async-actions-in-javascript"&gt;
  &lt;/a&gt;
  Set a Time Limit on Async Actions in JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqozDwst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AMSpq6HMhip5BbmHI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqozDwst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AMSpq6HMhip5BbmHI" alt="Photo by [Aron Visuals](https://unsplash.com/@aronvisuals) on [Unsplash](https://unsplash.com/photos/BXOXnQ26B7o)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://medium.com/swlh/set-a-time-limit-on-async-actions-in-javascript-567d7ca018c2"&gt;Medium&lt;/a&gt;. If you prefer reading it from there, please do check it out.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Asynchronous programming is incredible! &lt;/p&gt;

&lt;p&gt;With it, we can run our IO-intensive tasks without having to block the execution of other code. &lt;/p&gt;

&lt;p&gt;However, in situations where the code after a blocking task depends on the task’s result, we must wait. Now, imagine if the blocking task took a long time to finish or it never finished. This could be problematic in the context of the application. &lt;/p&gt;

&lt;p&gt;We can solve this issue by setting a time limit on our task. If our task doesn’t finish in the span of the time limit, we can return a failure value instead. Let me elaborate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  Concept
&lt;/h2&gt;

&lt;p&gt;Let’s suppose that the blocking task is a promise called &lt;code&gt;longTask&lt;/code&gt;, and it was used in the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
       &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;longTask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="nx"&gt;doSomethingImportantWithData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If the time it takes &lt;code&gt;longTask&lt;/code&gt; to settle is longer than our requirements or if &lt;code&gt;longTask&lt;/code&gt; is never settled, we won’t be able to execute the code after &lt;code&gt;longTask&lt;/code&gt; in a timely manner.&lt;/p&gt;

&lt;p&gt;However, imagine if we could set a time limit on our blocking tasks. In the case that the blocking task doesn’t settle within the time limit, we can return a failure value from the task. In the scenario the task resolves, we can return the value it resolved to.&lt;/p&gt;

&lt;p&gt;To elaborate, suppose there was a function called &lt;code&gt;fulfillWithTimeLimit&lt;/code&gt; which takes in milliseconds, the time limit, task, the task promise we would like to set a time limit on, and &lt;code&gt;failureValue&lt;/code&gt;, the value that would be resolved from &lt;code&gt;fulfillWithTimeLimit&lt;/code&gt; if &lt;code&gt;task&lt;/code&gt; never completes within the time limit.&lt;/p&gt;

&lt;p&gt;In the case that &lt;code&gt;longTask&lt;/code&gt; is resolved before the time limit, &lt;code&gt;fulfillWithTimeLimit&lt;/code&gt; returns with the value resolved from &lt;code&gt;longTask&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In the case that &lt;code&gt;longTask&lt;/code&gt; never finishes within the span of the time limit, the function should immediately return &lt;code&gt;failureValue&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;With this approach, we ensure that we never have to wait on &lt;code&gt;longTask&lt;/code&gt; for more than the specified time limit.&lt;/p&gt;

&lt;p&gt;Let’s dig into the approach.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;In order to “set a time limit” on the task, we can create another promise, &lt;code&gt;timeoutPromise&lt;/code&gt;, which resolves to &lt;code&gt;failureValue&lt;/code&gt; after the time limit. After that, we can race both our &lt;code&gt;timeoutPromise&lt;/code&gt; and task with &lt;a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"&gt;&lt;code&gt;Promise.race&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.race&lt;/code&gt; takes in a list of promises and resolves or rejects to the value of the promise in the list that is settled first.&lt;/p&gt;

&lt;p&gt;To provide an example, suppose I had the two following promises:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A finished before!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B finished!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Suppose I raced these promises and got the value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finishString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Since a resolves after 100 milliseconds while &lt;code&gt;b&lt;/code&gt; resolves after 1000 milliseconds, &lt;code&gt;a&lt;/code&gt; will be the first promise to resolve. As a result, &lt;code&gt;finishString&lt;/code&gt; will be equal to “A finished before!”. If you would like to learn more about &lt;code&gt;Promise.race&lt;/code&gt;, please check out the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"&gt;&lt;strong&gt;Promise.race()&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nonetheless, let’s apply the promise racing idea to create the &lt;code&gt;fulfillWithTimeLimit&lt;/code&gt; function.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;To begin, we create our &lt;code&gt;timeoutPromise&lt;/code&gt; and ensure it resolves with the &lt;code&gt;failureValue&lt;/code&gt; after the time limit. Then, we race to see whether our task or &lt;code&gt;timeoutPromise&lt;/code&gt; finishes first. For safety, we can clear the timeout and return &lt;code&gt;response&lt;/code&gt;, the resolved value of the race.&lt;/p&gt;

&lt;p&gt;Here is how &lt;code&gt;doSomething&lt;/code&gt; looks now:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the above example, I set &lt;code&gt;failureValue&lt;/code&gt; to null. However, it may be better to set it to a value of the same type as what is resolved from the task. In fact, it may be better to call reject in the &lt;code&gt;timeoutPromise&lt;/code&gt; than to resolve with a &lt;code&gt;failureValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s it!&lt;/strong&gt; We can easily reuse &lt;code&gt;fulfillWithTimeLimit&lt;/code&gt; in our application code where we need a time limit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this blog, I aimed to show a solution with &lt;code&gt;Promise.race&lt;/code&gt; to handle situations where blocking tasks may fail to settle or take too long to settle. Though I did not cover all the functionalities of promises, I hope this article amplifies your curiosity to explore them more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"&gt;&lt;strong&gt;Promise.race()&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/what-is-settimeout-method-in-javascript"&gt;&lt;strong&gt;setTimeout&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>Simple CSS Animation!</title>
      <author>CristoferK</author>
      <pubDate>Mon, 19 Apr 2021 16:36:55 +0000</pubDate>
      <link>https://dev.to/cristoferk/simple-css-animation-39eg</link>
      <guid>https://dev.to/cristoferk/simple-css-animation-39eg</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9RH_oBhMk_I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's start by changing the coding language to HTML. Adding the HTML template, and adding a title. I will name this Loading Animation Tutorial. Let's add a button with some text in it. Now let's go to fontawesome.com (the link is in the description) and search for a loading icon. I am gonna choose this icon. If you want you can scroll down and see other icons. Copy the HTML tag, and past it in your HTML file. Save it as HTML.html. Now let's see how it looks. But where is the icon? To can show a font awesome icon you need at the first to make an account and go to kits. And copy the code that they are giving you. After this paste it into the header. Now if we save and reload the page you can see the icon. Now let's start designing. Change the language to CSS. And let's start by removing the default margins. And now let's go to google fonts and choose a font. I will choose Roboto. You can choose whatever font you want. Let's copy this and go to the HTML file and paste this in the header section. Now let's go back to google fonts and copy the font family, and past it in the CSS file. Save this as CSS.css. Now let's add a source tag to our HTML file. Copy the link of the files and paste it in the src section. also, add a link tag with the name of the CSS file. So, now if we refresh the page the margins disappeared. Now let's style the button. I am gonna add 10-pixel padding, set the border and the outline to none. Make the background white. Make the border-radius 10px, the width 200 pixels, and the height 80. I will also add a box shadow of 20px blue. And also position, absolute. Save it and refresh the page. You see that now our button is having a design. But now let's make it to be in the center: top, fifty%, left fifty%. transform, translate -50%, -50%. Font size 25 pixels and cursor pointer. Let's see how it looks. type animation spin 25 linear. To add the animation we need to type keyframes, spin because this is the name of the animation. Zero%, tranform roteate 0deg. And now 100%, transform, rotate three hundred sixty deg. Let's save and refresh the page. Oh! I forgot! We need to make just the icon to be animated! So let's copy the animation. Write fas. If you are using another icon look there to see it is different. Change from 5 to s and add infinite. Now if we save and refresh, you can see that is working!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>animation</category>
      <category>simple</category>
    </item>
    <item>
      <title>10 tips for beginners at programming😀</title>
      <author>Yuvraj Singh Chouhan</author>
      <pubDate>Mon, 19 Apr 2021 16:36:11 +0000</pubDate>
      <link>https://dev.to/yuvrajhere/10-tips-for-beginners-at-programming-5h9a</link>
      <guid>https://dev.to/yuvrajhere/10-tips-for-beginners-at-programming-5h9a</guid>
      <description>&lt;p&gt;In this blog, I have written some tips based on my experience from past 1 and half year trying to teach myself coding. Our views might be different. I had interest in Web Development from start, so It was easy to choose what tech stack I should choose. You might not be having a perfect domain interest yet, but that is totally fine, keep exploring! &lt;/p&gt;

&lt;p&gt;These tips are particularly for programmers but might also help beginners of most of the fields. So lets get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-not-understanding-something-is-okay"&gt;
  &lt;/a&gt;
  📌 1. Not Understanding something is okay.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Its not very easy to learn new things, specially when we are 
a beginner. Half of what we see seems difficult and remaining half which we understand, we keep on forgetting.&lt;/li&gt;
&lt;li&gt;But, Don't bog yourself down from this, If you are facing similar situation, you are not alone. Believe in yourself and keep trying to learn. Remember, every try you give, the things will seem easier for next try.&lt;/li&gt;
&lt;li&gt;And if you are really trying hard and still not understanding something, maybe the next tip can help you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-grow-one-step-at-a-time"&gt;
  &lt;/a&gt;
  📌 2. Grow One step at a time.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Programming is a vast land, open to be explored.&lt;/li&gt;
&lt;li&gt;Be cautious, Don't try to consume it all at once, That is what naïve people do.&lt;/li&gt;
&lt;li&gt;Start with one thing, and then go to next thing, follow good roadmaps, learn things one step at a time.&lt;/li&gt;
&lt;li&gt;Don't pressure yourself into learning many things at once.&lt;/li&gt;
&lt;li&gt;While doing this, don't just put yourself into one thing totally for a long time. if you are doing this already, then, next tip is for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-stop-exploring"&gt;
  &lt;/a&gt;
  📌 3. Don't stop exploring.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As I said earlier, Programming is a vast land, open to be explored, then why not explore it?&lt;/li&gt;
&lt;li&gt;As a programmer you should try to explore languages that you think you wont be using ever.&lt;/li&gt;
&lt;li&gt;By exploring, I mean, knowing what a particular language is used in, what are the benefits of using it, how is the syntax, etc.&lt;/li&gt;
&lt;li&gt;This helps you to decide which language or tech stack you are really interested in.&lt;/li&gt;
&lt;li&gt;And if you have already chosen a language or tech stack, and are on the path of learning it, then you will like the next tip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-books-are-not-your-enemies"&gt;
  &lt;/a&gt;
  📌 4. Books are not your enemies.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As a beginner, I was learning just from video tutorials, not anymore, why?&lt;/li&gt;
&lt;li&gt;While video tutorials helps to keep the learning fun, many of those are just about how to do something and not how does something work inside the language.&lt;/li&gt;
&lt;li&gt;Books tend to cover these special parts of a language, they explain if something is done, how the language is understanding and executing it. This helps in making us perfect on the fundamentals and working of a language.&lt;/li&gt;
&lt;li&gt;But, what about libraries and frameworks?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-documentation-is-your-friend"&gt;
  &lt;/a&gt;
  📌 5. Documentation is your friend.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When it comes to libraries and frameworks, Official documentations will be your partner in code.&lt;/li&gt;
&lt;li&gt;Most of these documentations are very nicely written and also contains many examples to start with.&lt;/li&gt;
&lt;li&gt;They cover basic things like installation to advanced uses of the library or framework.&lt;/li&gt;
&lt;li&gt;Okay, Now you have got the resources and you are ready to start learning, but don't leave yet, the next tip is a must.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-learn-in-public"&gt;
  &lt;/a&gt;
  📌 6. Learn in public.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One thing I did not do as a beginner was to learn in public.&lt;/li&gt;
&lt;li&gt;It means that whatever you learn, do let others online know about it.&lt;/li&gt;
&lt;li&gt;This helps you in connecting with people who are on same track as you. Also you might inspire someone else to learn.&lt;/li&gt;
&lt;li&gt;This also helps in getting noticed by employers, and people who can guide you.&lt;/li&gt;
&lt;li&gt;Great!, You have started learning, You are feeling motivated and are giving your best. But, not all days are similar, some days we feel tired, some days we feel bored of learning. The next tip is for those days.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-consistency-is-the-key"&gt;
  &lt;/a&gt;
  📌 7. Consistency is the key.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Anyone can start learning something, start working on a project or start anything in general but ,the key to success is doing it regularly.&lt;/li&gt;
&lt;li&gt;Doing your work every day will be tough in start, but you have to build mental strength to avoid silly excuses which are bad for your learning and growth and keep on working consistently.&lt;/li&gt;
&lt;li&gt;But, Consistency doesn't mean going all out, as mentioned earlier, learn one step at a time, and taking breaks is not bad when necessary.&lt;/li&gt;
&lt;li&gt;You can do this by building a time table, a to do list or taking up challenges like &lt;strong&gt;&lt;a href="https://www.100daysofcode.com/"&gt;#100DaysOfCode&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hurray! You have learnt a programming language or a library, what next?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-build-projects-yourself"&gt;
  &lt;/a&gt;
  📌 8. Build projects yourself.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Building projects is the most important part. It gives you a real experience of using what you have learnt.&lt;/li&gt;
&lt;li&gt;Projects helps you to understand how much you know and what is missing.&lt;/li&gt;
&lt;li&gt;Also, Projects are a good way to showcase your skills on resumes or portfolios.&lt;/li&gt;
&lt;li&gt;Already building projects? lets go to next tip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-be-part-of-communities-and-open-source"&gt;
  &lt;/a&gt;
  📌 9. Be part of communities and open source.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are many awesome communities out there where amazing people like you learn from each other and grow together, try to join such communities, they will help you to learn and grow together.&lt;/li&gt;
&lt;li&gt;One such awesome community I am part of is &lt;strong&gt;&lt;a href="https://eddiehubcommunity.github.io/"&gt;EddieHub&lt;/a&gt;&lt;/strong&gt;. You can join us anytime on &lt;strong&gt;&lt;a href="https://discord.gg/hxpXbVv3PF"&gt;this&lt;/a&gt;&lt;/strong&gt;  discord channel.&lt;/li&gt;
&lt;li&gt;While communities are all about learning and growing together, Open Source is about working together, to build open source tools and software for the world. Open Source gives you nice exposure to working with version control systems like git, working with a team, and how big projects look. In general, it gives you experience to work on projects used by others.&lt;/li&gt;
&lt;li&gt;You have done a lot by now, Time to showcase your skills to people in industry? lets go to next and final tip for that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-hackathons-make-you-better"&gt;
  &lt;/a&gt;
  📌 10. Hackathons make you better.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you don't know about hackathons yet, you are missing a lot of fun.&lt;/li&gt;
&lt;li&gt;Hackathons are events where people compete with each other to build projects and grab awesome prizes for it.&lt;/li&gt;
&lt;li&gt;Hackathons are mostly of around 1-3 days where teams work on a project during the event.&lt;/li&gt;
&lt;li&gt;This builds skills like coming up with good ideas, designing a project, distributing work with teammates, working together, and fixing problems quickly.&lt;/li&gt;
&lt;li&gt;One important thing about hackathons is that, no body losses here, some gain prizes others gain experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were my opinions based on my experience.😋 This was my first blog, Your feedback is most welcome.😊 I hope this blog helps you in your journey towards a programmer. &lt;/p&gt;

&lt;p&gt;❤️ &lt;em&gt;Thank you for reading&lt;/em&gt; ❤️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do like, share and follow for more such blogs. See you next time.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
