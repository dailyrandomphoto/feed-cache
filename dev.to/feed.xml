<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Automate deployment in simplest way by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 08 Nov 2021 14:22:43 +0000</pubDate>
      <link>https://dev.to/silvenleaf/automate-deployment-in-simplest-way-by-silvenleaf-17p</link>
      <guid>https://dev.to/silvenleaf/automate-deployment-in-simplest-way-by-silvenleaf-17p</guid>
      <description>&lt;p&gt;Ahoy there! Let's automate deploying our Web App! We'll be using React for this. Don't worry, because react or angular or vue, that's not important. The core concept is same for all! Also we'll be going from level 0. So even if you don't know React or any of these, just hop on!!&lt;/p&gt;

&lt;p&gt;It is a part of my future DevOps and automation blogs. So stay tuned for more amazing stuff!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-lets-create-a-react-app"&gt;
  &lt;/a&gt;
  Step 0: Let's create a React App
&lt;/h3&gt;

&lt;p&gt;To deploy an app, we need an app, right? So let's create one. But if you don't like React, go with Angular, Vue or whatever you like.&lt;/p&gt;

&lt;p&gt;First create a github repo (assuming you have a github account, if not, create one and then create a github repo) and then clone it onto your computer. Open it in your favorite text-editor (mine VS Code). Then type the following command to create a react app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app client &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a React App named &lt;strong&gt;client&lt;/strong&gt; in TypeScript. Replace &lt;strong&gt;client&lt;/strong&gt; with your own app name, I prefer &lt;strong&gt;client&lt;/strong&gt; but you can name it anything)&lt;/p&gt;

&lt;p&gt;Now, type the following command to go inside it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then type this to start your react app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Wait a while and it'll start the development server and open the React App in your browser. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" alt="React App" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's get into the fun stuff. Let's deploy the app!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-deploy-app"&gt;
  &lt;/a&gt;
  Step 1: Deploy App
&lt;/h3&gt;

&lt;p&gt;Type this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class="nt"&gt;-D&lt;/span&gt; gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll go inside client folder and then install that "gh-pages" package.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;"npm i -D X"&lt;/strong&gt; is the shorthand for &lt;strong&gt;"npm install --save-dev X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now open the &lt;strong&gt;package.json&lt;/strong&gt; file of &lt;strong&gt;client&lt;/strong&gt; folder and add the &lt;strong&gt;"homepage"&lt;/strong&gt; property, and also add the following &lt;strong&gt;"deploy"&lt;/strong&gt; and &lt;strong&gt;"predeploy"&lt;/strong&gt; scripts, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://{YOUR_GITHUB_USERNAME}.github.io/{YOUR_APP_NAME_HERE}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

   &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"predeploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gh-pages -d build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="err"&gt;...your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open your terminal, and type this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll start deploying your app. Wait for it to complete. Once done, go to the homepage URL that you specified and you'll see your app live.&lt;/p&gt;

&lt;p&gt;Your URL: &lt;a href="https://SilvenLEAF.github.io/"&gt;"http://{YOUR_GITHUB_USERNAME}.github.io/{YOUR_APP_NAME_HERE}"&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" alt="React App" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-2-automate-deployment"&gt;
  &lt;/a&gt;
  Step 2: Automate Deployment
&lt;/h3&gt;

&lt;p&gt;Yes, we deployed our app, but that's not what we want right? We want to make it all automated. So let's do this. &lt;/p&gt;

&lt;p&gt;Open a new terminal and type the following command on the root level of your repo (NOT inside &lt;strong&gt;client&lt;/strong&gt; folder).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll create a &lt;strong&gt;.github&lt;/strong&gt; folder in the root level and create another folder inside it named &lt;strong&gt;workflows&lt;/strong&gt;. I mean, create &lt;strong&gt;workflows&lt;/strong&gt; folder inside &lt;strong&gt;.github&lt;/strong&gt; folder which is on the root level of our project (at the same level as &lt;strong&gt;client&lt;/strong&gt; react app folder).&lt;/p&gt;

&lt;p&gt;[NOTE: &lt;strong&gt;"mkdir"&lt;/strong&gt; bash command create a directory/folder. The &lt;strong&gt;"-p"&lt;/strong&gt; flag creates them recursively. In other words, if you pass this flag, you can create nested folders, even if they did not exist. Otherwise, it would've thrown an "Directory does not exist" error]&lt;/p&gt;

&lt;p&gt;Now, create yaml file inside that &lt;strong&gt;workflows&lt;/strong&gt; folder named &lt;strong&gt;Deploy.yml&lt;/strong&gt; by typing the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .github/workflows/Deploy.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[NOTE: &lt;strong&gt;touch&lt;/strong&gt; bash command creates a file]&lt;/p&gt;

&lt;p&gt;Fill this &lt;strong&gt;Deploy.yml&lt;/strong&gt; file with these following content. Also PRO TIP: Read the comments to understand what each word and each line does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# By SilvenLEAF&lt;/span&gt;

&lt;span class="c1"&gt;# Let's create a basic automated deployment&lt;/span&gt;
&lt;span class="c1"&gt;# It'll work something like this:&lt;/span&gt;
&lt;span class="c1"&gt;# Whenever push our code to "main" branch, &lt;/span&gt;
&lt;span class="c1"&gt;# We'll check if it's deployable (I mean, the app works and does not break)&lt;/span&gt;
&lt;span class="c1"&gt;# If so, we'll deploy it&lt;/span&gt;
&lt;span class="c1"&gt;# And everything will be done automatically&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DevOps Deploy&lt;/span&gt; &lt;span class="c1"&gt;# This is the name of our Action, you can name anything, I just casually gave this name &lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# We'll be triggering the workflow on push event but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# You can have any branch or multiple branches, if you want to add more branches, add them in this array&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "testAndDeploy"&lt;/span&gt;
  &lt;span class="na"&gt;testAndDeploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of OS that this job will run on. I chose ubuntu, you can choose anything, windows, mac, anything at all&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;#  Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cd client &amp;amp;&amp;amp; npm install&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="c1"&gt;# Notice I gave "CI=false" command. It's because normally when we build react app, there's always a lot of warnings&lt;/span&gt;
      &lt;span class="c1"&gt;# And Github action by default has "CI=true", and because of that, it treats warnings as errors&lt;/span&gt;
      &lt;span class="c1"&gt;# So, it'll fail the job (because if there is any error, the job fails)&lt;/span&gt;
      &lt;span class="c1"&gt;# That's why we set "CI=false" so that it can ignore the warnings&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo started Building&lt;/span&gt;
          &lt;span class="s"&gt;cd client &amp;amp;&amp;amp; CI=false &amp;amp;&amp;amp; npm run build&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy 🚀&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; &lt;span class="c1"&gt;# The branch the action should deploy to. You can choose any branch&lt;/span&gt;
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;client/build&lt;/span&gt; &lt;span class="c1"&gt;# The folder the action should deploy. Here the build folder is inside client with respect to the root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit all your changes and push! Voila! You just automated your deployment. Now let's test it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-3-testing-deployment"&gt;
  &lt;/a&gt;
  Step 3: Testing Deployment
&lt;/h3&gt;

&lt;p&gt;Now go inside &lt;strong&gt;client/src/App.tsx&lt;/strong&gt;, and replace everything with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// By SilvenLEAF&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SilvenLEAF&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit you changes and push it with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Testing Deployment"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;git commit -am "lorem ipsum"&lt;/strong&gt; is the shorthand for &lt;strong&gt;git add . &amp;amp;&amp;amp; git commit -m "lorem ipsum"&lt;/strong&gt;. Also, &lt;strong&gt;"X &amp;amp;&amp;amp; Y"&lt;/strong&gt; in bash, runs X and Y command one after the other)&lt;/p&gt;

&lt;p&gt;So after pushing your updated codes, go to your repo in your github. And go to the &lt;strong&gt;"actions"&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNr-W4kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1h4q8s3g691fvh44s8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNr-W4kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1h4q8s3g691fvh44s8c.png" alt="Go to actions tab" width="880" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you'll see your action &lt;strong&gt;"DevOps Deploy"&lt;/strong&gt; and the running &lt;strong&gt;"Testing Deployment"&lt;/strong&gt; commit workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3hTZum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzo0ex1no1h0fe7nrr65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3hTZum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzo0ex1no1h0fe7nrr65.png" alt="Actions Tab" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on that ongoing &lt;strong&gt;"Testing Deployment"&lt;/strong&gt; workflow, and you'll see all it's jobs that's running. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUHmsMyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/194rqh30mqixbbvi2qeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUHmsMyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/194rqh30mqixbbvi2qeh.png" alt="Workflow jobs" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had only one, so you'll see only &lt;strong&gt;"testAndDeploy"&lt;/strong&gt; job. To see all its details and steps, click it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWdB1-Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38pmgflyncqeh1r92mkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWdB1-Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38pmgflyncqeh1r92mkr.png" alt="Workflow job details" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all of the steps are done, and it successfully finished. Go to your website and see it updated live!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNRFGeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uirww1bfmepa932kcm7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNRFGeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uirww1bfmepa932kcm7j.png" alt="Updated Site" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now every time you make changes and push to &lt;strong&gt;main&lt;/strong&gt; branch, it'll automatically test if it's good and doesn't have any errors, if so, will deploy it. You have to do nothing!&lt;/p&gt;

&lt;p&gt;Amazing right? But that's just the beginning of the story my friend! Because we'll learn some more amazing DevOps and Automations stuffs and advanced github actions too! So stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming November 13th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-how-to-deploy-in-the-cloud-azure-vms"&gt;
  &lt;/a&gt;
  1. How to deploy in the Cloud (Azure VMs)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  2. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10+The Best PHP Projects GitHub 2022</title>
      <author>themeselection</author>
      <pubDate>Mon, 08 Nov 2021 14:22:38 +0000</pubDate>
      <link>https://dev.to/theme_selection/10the-best-php-projects-github-2022-2o7m</link>
      <guid>https://dev.to/theme_selection/10the-best-php-projects-github-2022-2o7m</guid>
      <description>&lt;p&gt;Starting your journey as a PHP developer? Then here are some of the best PHP Projects that will inspire you. Before we start the collection, Let's get to know PHP in short.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-php"&gt;
  &lt;/a&gt;
  What Is PHP?
&lt;/h2&gt;

&lt;p&gt;Well, PHP (Hypertext Preprocessor) is generally known as a &lt;strong&gt;general-purpose scripting language that can be used to develop dynamic and interactive websites&lt;/strong&gt;. Besides, it was one of the first server-side languages that could be embedded into HTML, making it easier to add functionality to web pages without any need to call external files for data. &lt;/p&gt;

&lt;p&gt;It has been around for more than 25 years, tends to evoke some strong opinions among developers today. There is always a debate over whether or not PHP is dead? Whenever there is a new programming language or tool emerges, you’ll probably find a discussion over it.&lt;/p&gt;

&lt;p&gt;Yes, it is true that PHP has gone down the rankings of the most popular programming languages, between &lt;a href="https://insights.stackoverflow.com/survey/2017#technology"&gt;5th in 2017&lt;/a&gt; to &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-all-respondents"&gt;8th in 2020&lt;/a&gt; as per the Stack Overflow annual developer survey. Yet, PHP is one of the most &lt;a href="https://w3techs.com/technologies/details/pl-php"&gt;used by nearly 80% of all websites&lt;/a&gt;, including some major platforms like Facebook and WordPress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-php-unique"&gt;
  &lt;/a&gt;
  What makes PHP unique?
&lt;/h2&gt;

&lt;p&gt;Following are some of the factors that makes PHP desirable: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Simplicity&lt;/li&gt;
&lt;li&gt;  Efficiency&lt;/li&gt;
&lt;li&gt;  Security&lt;/li&gt;
&lt;li&gt;  Flexibility&lt;/li&gt;
&lt;li&gt;  Familiarity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#applications-of-php"&gt;
  &lt;/a&gt;
  Applications of PHP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP can handle forms, i.e. gather data from files, save data to a file, through email you can send data, return data to the user.&lt;/li&gt;
&lt;li&gt;Using PHP, you can restrict users to access some pages of your website.&lt;/li&gt;
&lt;li&gt;PHP performs system functions, i.e. from files on a system it can create, open, read, write, and close them.&lt;/li&gt;
&lt;li&gt;You can add, modify, delete, elements within your database through PHP.&lt;/li&gt;
&lt;li&gt;Also, access cookies variables and set cookies.&lt;/li&gt;
&lt;li&gt;It can encrypt data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-php"&gt;
  &lt;/a&gt;
  Advantages Of Using PHP:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Many available specialists&lt;/li&gt;
&lt;li&gt;A large base of reference and educational materials&lt;/li&gt;
&lt;li&gt;Better loading speed of websites&lt;/li&gt;
&lt;li&gt;More options for database connectivity&lt;/li&gt;
&lt;li&gt;A large collection of open-source addons&lt;/li&gt;
&lt;li&gt;Inexpensive website hosting&lt;/li&gt;
&lt;li&gt;Great synergy with HTML&lt;/li&gt;
&lt;li&gt;Excellent flexibility and combinability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Simple&lt;/li&gt;
&lt;li&gt;  Faster&lt;/li&gt;
&lt;li&gt;  Interpreted&lt;/li&gt;
&lt;li&gt;  Open Source&lt;/li&gt;
&lt;li&gt;  Case Sensitive&lt;/li&gt;
&lt;li&gt;  Simplicity&lt;/li&gt;
&lt;li&gt;  Efficiency&lt;/li&gt;
&lt;li&gt;  Platform Independent&lt;/li&gt;
&lt;li&gt;  Security&lt;/li&gt;
&lt;li&gt;  Flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's start the list...!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAi7133---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9qyswag2kddfknr93p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAi7133---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9qyswag2kddfknr93p.gif" alt="Let's start" width="400" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#guzzle"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/guzzle/guzzle"&gt;Guzzle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iz_bNXWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boyav2h5fe7xn6op9qff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iz_bNXWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boyav2h5fe7xn6op9qff.jpg" alt="Guzzle" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/guzzle/guzzle"&gt;Guzzle&lt;/a&gt; is a simple HTTP client for PHP projects. It is meant to facilitate sending HTTP requests in quick time. Besides, it also has a simple interface from where you can build query strings, send POST requests, upload JSON data and other similar services. Moreover, you can also send both synchronous and asynchronous requests via Guzzle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Simple interface for building query strings, POST requests, streaming large uploads, streaming large downloads, using HTTP cookies, uploading JSON data, etc...&lt;/li&gt;
&lt;li&gt;  Can send both synchronous and asynchronous requests using the same interface.&lt;/li&gt;
&lt;li&gt;  Uses PSR-7 interfaces for requests, responses, and streams. This allows you to utilize other PSR-7 compatible libraries with Guzzle.&lt;/li&gt;
&lt;li&gt;  Supports PSR-18 allowing interoperability between other PSR-18 HTTP Clients.&lt;/li&gt;
&lt;li&gt;  Abstracts away the underlying HTTP transport, allowing you to write environment and transport agnostic code; i.e., no hard dependency on curl, PHP streams, sockets, or non-blocking event loops.&lt;/li&gt;
&lt;li&gt;  Middleware system allows you to augment and compose client behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#monolog"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/Seldaek/monolog"&gt;Monolog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxtq_eHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5oxnlsewhatw5uv7upj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxtq_eHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5oxnlsewhatw5uv7upj.png" alt="Monolog" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monolog sends your logs to files, sockets, inboxes, databases and various web services. See the complete list of handlers below. Special handlers allow you to build advanced logging strategies.&lt;/p&gt;

&lt;p&gt;This library implements the  &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md"&gt;PSR-3&lt;/a&gt;  interface that you can type-hint against in your own libraries to keep a maximum of interoperability. You can also use it in your applications to make sure you can always use another compatible logger at a later time. As of 1.11.0 Monolog public APIs will also accept PSR-3 log levels. Internally Monolog still uses its own level scheme since it predates PSR-3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phpmailer"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/PHPMailer/PHPMailer"&gt;PHPMailer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AhGebTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blqm20o0xb5iovs2sgh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AhGebTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blqm20o0xb5iovs2sgh4.png" alt="PHP Mailer" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a full featured email sending class for PHP projects. This class is a great replacement for the mail() function provided by PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Probably the world's most popular code for sending email from PHP!&lt;/li&gt;
&lt;li&gt;  Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more&lt;/li&gt;
&lt;li&gt;  Integrated SMTP support – send without a local mail server&lt;/li&gt;
&lt;li&gt;  Send emails with multiple To, CC, BCC and Reply-to addresses&lt;/li&gt;
&lt;li&gt;  Multipart/alternative emails for mail clients that do not read HTML email&lt;/li&gt;
&lt;li&gt;  Add attachments, including inline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextcloud-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/nextcloud/server"&gt;Nextcloud Server&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skFkv4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkqicplc8sec9four6o9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skFkv4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkqicplc8sec9four6o9.png" alt="Nextcloud server" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nextcloud/server"&gt;Nextcloud&lt;/a&gt; promises a reliable and safe place for all your web data. Using Nextcloud, you can easily sync your files, databases, contacts and other services on the go. The platform also offers optimum security with its two factor authentication feature, thereby helping you to safeguard your data completely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;Access your Data:&lt;/strong&gt;  You can store your files, contacts, calendars and more on a server of your choosing.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Sync your Data:&lt;/strong&gt;  You keep your files, contacts, calendars and more synchronized amongst your devices.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Share your Data:&lt;/strong&gt; By giving others access to the stuff you want them to see or to collaborate with.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Expandable with hundreds of Apps:&lt;/strong&gt; like  &lt;a href="https://github.com/nextcloud/calendar"&gt;Calendar&lt;/a&gt;,  &lt;a href="https://github.com/nextcloud/contacts"&gt;Contacts&lt;/a&gt;,  &lt;a href="https://github.com/nextcloud/mail"&gt;Mail&lt;/a&gt;,  &lt;a href="https://github.com/nextcloud/spreed"&gt;Video Chat&lt;/a&gt;  and all those you can discover in our  &lt;a href="https://apps.nextcloud.com/"&gt;App Store&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Security:&lt;/strong&gt;  With our encryption mechanisms,  &lt;a href="https://hackerone.com/nextcloud"&gt;HackerOne bounty program&lt;/a&gt;  and two-factor authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#materio-free-vuetify-vuejs-laravel-admin-template"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/themeselection/materio-vuetify-vuejs-laravel-admin-template-free"&gt;Materio Free Vuetify VueJS Laravel Admin Template&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4JGJLnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m27mklu19sygheuq68ux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4JGJLnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m27mklu19sygheuq68ux.png" alt="Materio Free Vuetify VueJS Laravel Admin Template" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a developer-friendly and highly customizable Laravel admin template. Furthermore, you can use this one of the best free &lt;a href="https://themeselection.com/products/category/laravel-admin-templates/"&gt;laravel admin templates&lt;/a&gt; to create eye-catching, high-quality, and high-performing single-page applications. Materio is also equipped with invaluable features designed to help you create premium quality apps exactly as you imagine them.&lt;/p&gt;

&lt;p&gt;In addition, incredibly versatile, the Materio Vuetify Vuejs Laravel admin template also allows you to build any type of web applications such as: CRM, Analytic apps, Education apps, Fitness Apps, Analytics apps, etc.. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Pure VueJS, Laravel&lt;/li&gt;
&lt;li&gt;  Utilizes Vuex, Vue Router, Webpack&lt;/li&gt;
&lt;li&gt;  1 Dashboard&lt;/li&gt;
&lt;li&gt;  Material Icons&lt;/li&gt;
&lt;li&gt;  Basic cards&lt;/li&gt;
&lt;li&gt;  Fully Responsive Layout&lt;/li&gt;
&lt;li&gt;  Organized Folder Structure&lt;/li&gt;
&lt;li&gt;  Clean &amp;amp; Commented Code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#monica"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/monicahq/monica"&gt;Monica&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ko33gmaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5esqu4vcwjdfd7hh3c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ko33gmaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5esqu4vcwjdfd7hh3c4.png" alt="Monica CRM" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monica is an open-source web application to organize and record your interactions with your loved ones. We call it a PRM, or Personal Relationship Management. Think of it as a  CRM (a popular tool used by sales teams in the corporate world) for your friends or family. &lt;/p&gt;

&lt;p&gt;Monica allows people to keep track of everything that’s important about their friends and family. Like the activities with them. When you last called someone and what you talked about. It will help you remember the name and the age of their kids. It can also remind you to call someone you haven’t talked to in a while.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Add and manage contacts&lt;/li&gt;
&lt;li&gt;  Define relationships between contacts&lt;/li&gt;
&lt;li&gt;  Reminders&lt;/li&gt;
&lt;li&gt;  Automatic reminders for birthdays&lt;/li&gt;
&lt;li&gt;  Stay in touch with a contact by sending reminders at a given interval&lt;/li&gt;
&lt;li&gt;  Management of debts&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flysystem"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/thephpleague/flysystem"&gt;Flysystem&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQHJXNVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bexr62u8wrexdwqrwhzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQHJXNVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bexr62u8wrexdwqrwhzv.png" alt="Best PHP Project" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thephpleague/flysystem"&gt;Flysystem&lt;/a&gt;  is a filesystem abstraction. Use this library to replace the local file system with a remote file system.&lt;/p&gt;

&lt;p&gt;Flysystem is a file storage library for PHP. It provides one interface to interact with many types of filesystems. When you use Flysystem, you're not only protected from vendor lock-in, you'll also have a consistent experience for which ever storage is right for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#psysh"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/bobthecow/psysh"&gt;Psysh&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-i7czR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6gs8wxxdsjwm7ri5cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-i7czR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6gs8wxxdsjwm7ri5cc.png" alt="best PHP projects" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobthecow/psysh"&gt;PsySH&lt;/a&gt;  offers a dev console and interactive debugger for PHP projects. In effect, this repo creates a REPL platform for PHP developers.&lt;/p&gt;

&lt;p&gt;PsySH is a runtime developer console, interactive debugger and  REPL for PHP. Learn more at  &lt;a href="http://psysh.org/"&gt;psysh.org&lt;/a&gt;  and  &lt;a href="https://github.com/bobthecow/psysh/wiki/Home"&gt;in the manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headlesswpstarter"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/postlight/headless-wp-starter"&gt;Headless-wp-starter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kL8cvEHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ekgkz5nfqerbhbah7fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kL8cvEHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ekgkz5nfqerbhbah7fs.png" alt="Best PHP projects" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postlight.com/"&gt;Postlight&lt;/a&gt;'s Headless WordPress + React Starter Kit is an automated toolset that will spin up three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A WordPress backend that serves its data via the  &lt;a href="https://developer.wordpress.org/rest-api/"&gt;WP REST API&lt;/a&gt;  and  &lt;a href="http://graphql.org/"&gt;GraphQL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; A sample React frontend powered by the  &lt;a href="https://www.wpgraphql.com/"&gt;WP GraphQL API&lt;/a&gt;, which supports posts, pages, categories, menus, search, and user sign-in.&lt;/li&gt;
&lt;li&gt; Another sample server-side rendered React frontend using  &lt;a href="https://github.com/zeit/next.js/"&gt;Next.js&lt;/a&gt;  powered by the WP REST API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read all about it in  &lt;a href="https://postlight.com/trackchanges/introducing-postlights-wordpress-react-starter-kit"&gt;this handy introduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  An automated installer which bootstraps a core WordPress installation that provides an established, stable REST API.&lt;/li&gt;
&lt;li&gt;  A plugin which exposes a newer, in-progress  &lt;a href="https://wpgraphql.com/"&gt;GraphQL API for WordPress&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  The WordPress plugins you need to set up custom post types and custom fields (&lt;a href="https://www.advancedcustomfields.com/"&gt;Advanced Custom Fields&lt;/a&gt;  and  &lt;a href="https://wordpress.org/plugins/custom-post-type-ui/"&gt;Custom Post Type UI&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;  Plugins which expose those custom fields and WordPress menus in the  &lt;a href="https://developer.wordpress.org/rest-api/"&gt;WP REST API&lt;/a&gt;  (&lt;a href="https://wordpress.org/plugins/acf-to-wp-api/"&gt;ACF to WP API&lt;/a&gt;  and  &lt;a href="https://wordpress.org/plugins/wp-rest-api-v2-menus/"&gt;WP-REST-API V2 Menus&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;  JWT authentication plugins:  &lt;a href="https://wordpress.org/plugins/jwt-authentication-for-wp-rest-api/"&gt;JWT WP REST&lt;/a&gt;  and  &lt;a href="https://github.com/wp-graphql/wp-graphql-jwt-authentication"&gt;JWT WP GraphQL&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#paseto"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/paragonie/paseto"&gt;Paseto&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI9X35vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7f7ue808sqtsniji5b8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI9X35vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7f7ue808sqtsniji5b8.png" alt="Best PHP Projects" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paseto is everything you love about JOSE (JWT, JWE, JWS) without any of the  &lt;a href="https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid"&gt;many design deficits that plague the JOSE standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library is a reference implementation of PASETO in the PHP language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#craft-cms"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/craftcms/cms"&gt;Craft CMS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQTZ5iUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzefnmtjgp22cx94ujm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQTZ5iUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzefnmtjgp22cx94ujm4.png" alt="Craft CMS" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Craft is a flexible, user-friendly CMS for creating custom digital experiences on the web and beyond.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/craftcms/cms"&gt;Craft&lt;/a&gt;  is a self-hosted PHP application built on Yii that emphasizes custom development plugins. When using Craft CMS, developers have the basic structure in place that could be customized to fit a broad range of project specifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  An intuitive, user-friendly control panel for content creation and administrative tasks.&lt;/li&gt;
&lt;li&gt;  A clean-slate approach to content modeling that doesn’t make any assumptions about the content you need to manage.&lt;/li&gt;
&lt;li&gt;  An auto-generated  &lt;a href="https://craftcms.com/docs/3.x/graphql.html"&gt;GraphQL API&lt;/a&gt;  that can be consumed for building headless applications.&lt;/li&gt;
&lt;li&gt;  A fast and flexible  &lt;a href="https://craftcms.com/docs/3.x/dev/twig-primer.html"&gt;templating system&lt;/a&gt;  based on Twig for building traditional websites.&lt;/li&gt;
&lt;li&gt;  A powerful  &lt;a href="https://craftcms.com/commerce"&gt;ecommerce platform&lt;/a&gt;  for building bespoke ecommerce experiences.&lt;/li&gt;
&lt;li&gt;  A built-in Plugin Store with hundreds of free and commercial  &lt;a href="https://plugins.craftcms.com/"&gt;plugins&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  A robust framework for  &lt;a href="https://craftcms.com/docs/3.x/extend/"&gt;module and plugin development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  An active, vibrant  &lt;a href="https://craftcms.com/community"&gt;community&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#panther"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/symfony/panther"&gt;Panther&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Panther is a convenient standalone library to scrape websites and to run end-to-end tests  using real browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZqUtP_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqnueqz98nm8q4vmvr7i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZqUtP_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqnueqz98nm8q4vmvr7i.jpg" alt="Best PHP Projects" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Panther is super powerful. It leverages  &lt;a href="https://www.w3.org/TR/webdriver/"&gt;the W3C's WebDriver protocol&lt;/a&gt;  to drive native web browsers such as Google Chrome and Firefox.&lt;/p&gt;

&lt;p&gt;Panther is very easy to use, because it implements Symfony's popular  &lt;a href="https://symfony.com/doc/current/components/browser_kit.html"&gt;BrowserKit&lt;/a&gt;  and  &lt;a href="https://symfony.com/doc/current/components/dom_crawler.html"&gt;DomCrawler&lt;/a&gt;  APIs, and contains all the features you need to test your apps. It will sound familiar if you have ever created  &lt;a href="https://symfony.com/doc/current/testing.html#functional-tests"&gt;a functional test for a Symfony app&lt;/a&gt;: as the API is exactly the same! Keep in mind that Panther can be used in every PHP project, as it is a standalone library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Executes the JavaScript code contained in webpages&lt;/li&gt;
&lt;li&gt;  Supports everything that Chrome (or Firefox) implements&lt;/li&gt;
&lt;li&gt;  Allows taking screenshots&lt;/li&gt;
&lt;li&gt;  Can wait for asynchronously loaded elements to show up&lt;/li&gt;
&lt;li&gt;  Lets you run your own JS code or XPath queries in the context of the loaded page&lt;/li&gt;
&lt;li&gt;  Supports custom  &lt;a href="https://www.seleniumhq.org/"&gt;Selenium server&lt;/a&gt;  installations&lt;/li&gt;
&lt;li&gt;  Supports remote browser testing services including  &lt;a href="https://saucelabs.com/"&gt;SauceLabs&lt;/a&gt;  and  &lt;a href="https://www.browserstack.com/"&gt;BrowserStack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#laraveltotem"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/codestudiohq/laravel-totem"&gt;Laravel-totem&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TnntLb44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnhop5ldgcw9omqnjy2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TnntLb44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnhop5ldgcw9omqnjy2b.png" alt="Best PHP projects Laravel totem" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manage your  Laravel Schedule from a pretty dashboard. Schedule your Laravel Console Commands to your liking. Enable/Disable scheduled tasks on the fly without going back to your code again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rubix-ml"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/RubixML/ML"&gt;Rubix ML&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pq1iWWey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o96mkmey9xpz9prqolx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pq1iWWey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o96mkmey9xpz9prqolx.jpg" alt="Best PHP projects" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A high-level machine learning and deep learning library for the  PHP language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Developer-friendly&lt;/strong&gt;  API is delightful to use&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;40+&lt;/strong&gt;  supervised and unsupervised learning algorithms&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Support&lt;/strong&gt;  for ETL, preprocessing, and cross-validation&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Open source&lt;/strong&gt;  and free to use commercially&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#voten"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/voten-co/voten"&gt;Voten&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLxUEDkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj4jn2ffk418zl7fjeas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLxUEDkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj4jn2ffk418zl7fjeas.png" alt="Best PHP projects voten" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://voten.co/"&gt;Voten.co&lt;/a&gt; is an open-source, beautiful, highly customizable yet deadly simple, and warm community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#churnphp"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/bmitch/churn-php"&gt;Churn-php&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAshnOzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mljgztnjnmlwrsassu3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAshnOzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mljgztnjnmlwrsassu3w.png" alt="Churn PHP" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Churn-PHP is a package that helps you identify PHP files in your project that could be good candidates for refactoring. It examines each PHP file in the path it is provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Checks how many commits it has.&lt;/li&gt;
&lt;li&gt;  Calculates the cyclometric complexity.&lt;/li&gt;
&lt;li&gt;  Creates a score based on these two values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;So, here was the collection of the best PHP Projects GitHub 2021.&lt;/p&gt;

&lt;p&gt;Many believes that PHP is drained or dead. But the reality is different. As mentioned above there are still more than 80% sites which uses PHP. &lt;/p&gt;

&lt;p&gt;Besides, regardless of the trends you should choose the language as per your project need and requirements. If it needs to use PHP then go with it without any hesitation.&lt;/p&gt;

&lt;p&gt;We have gathered some of the best PHP projects for you so that you don't need to look for them here and there.&lt;/p&gt;

&lt;p&gt;Do share your feedbacks and suggestions in the comment section below.&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Our Experience at Web Summit 2021</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 08 Nov 2021 14:18:36 +0000</pubDate>
      <link>https://dev.to/codesphere/our-experience-at-web-summit-2021-54l</link>
      <guid>https://dev.to/codesphere/our-experience-at-web-summit-2021-54l</guid>
      <description>&lt;p&gt;Written by Dan Parry. &lt;/p&gt;




&lt;p&gt;Every year Lisbon plays host to the world-famous Web Summit tech conference, and this year, along with over 42,000 other attendees for 128 countries the Codesphere team was there to introduce the next generation of cloud services to the community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ggHqF-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r40cl0c9ghrdx3tq911.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ggHqF-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r40cl0c9ghrdx3tq911.png" alt="websummit" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The conference has always been about the people; The technologies on show are simply the tools that bring us all together. After 4 days of connecting with brilliant and insightful industry leaders, we are ready to get to work on the next steps in our plan to deliver the first truly holistic solution for startup cloud development.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-did-we%C2%A0learn"&gt;
  &lt;/a&gt;
  What did we learn?
&lt;/h3&gt;

&lt;p&gt;We learned that you're probably using the cloud service provider you are because they gave you free credits right? Or better yet, you switched to your current provider because the last one ran out? We can't argue with that and we are already hard at work on a better option for our users.&lt;/p&gt;

&lt;p&gt;Unmanageable UIs, the inability to debug, and ineffective monitoring are all part of the current reality for the CTOs and founders we spoke to, and we're happy to provide the long-awaited solution to these problems with Codesphere so our users can get back to coding.&lt;/p&gt;

&lt;p&gt;Devs are a resourceful group and for every pain point, we discover there is a workaround in place, whether it's using different tools on top of one another or straight up switching to different providers from project to project, devs have been finding a way.&lt;/p&gt;

&lt;p&gt;But there has to be a better way, a simple, all-in-one solution to the entire development process, and that's our goal for the future of Codesphere. After speaking with countless other attendees and exhibitors at Web Summit we are ready to get back to work building the future of cloud services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"The more you know about your customers, the more you can provide them information that is increasingly useful, relevant, and persuasive"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMQtAZNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti15ewyukl6pnqnu0e2g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMQtAZNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti15ewyukl6pnqnu0e2g.jpeg" alt="web summit logo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;A big thank you to all the fantastic and innovative people we connected with in Lisbon. Web Summit for us was about pitching to and learning from our audience, and after a long week, we have a lot of feedback and inspiration to work with.&lt;/p&gt;

&lt;p&gt;We look forward to seeing you all next year.&lt;/p&gt;

&lt;p&gt;In the meantime, let us know what you want to see in Codesphere to solve your dev-ops issues.&lt;/p&gt;

&lt;p&gt;We want to get to know you, so you can get to know &lt;a href="https://link.codesphere.com/FL"&gt;Codesphere&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGAXXSmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocubk8oho7asvgx4jt4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGAXXSmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocubk8oho7asvgx4jt4z.png" alt="codesphere logo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monday also saw the launch of our brand new website that we were happy to share with the Web Summit community - &lt;a href="https://link.codesphere.com/FL"&gt;check it out here!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cloud</category>
      <category>startup</category>
      <category>programming</category>
    </item>
    <item>
      <title>The simplest mount/unmount animation with material UI and emotion</title>
      <author>a-tonchev</author>
      <pubDate>Mon, 08 Nov 2021 14:17:26 +0000</pubDate>
      <link>https://dev.to/atonchev/the-simplest-mountunmount-animation-with-material-ui-and-emotion-4c3b</link>
      <guid>https://dev.to/atonchev/the-simplest-mountunmount-animation-with-material-ui-and-emotion-4c3b</guid>
      <description>&lt;p&gt;Surely you want sometimes in react to animate an entrance and/or exit of unmounting component. Instead of using a library, there is a nice way to do it by yourself, just with material ui!&lt;/p&gt;

&lt;p&gt;For this we will make use of the emotion css prop and the &lt;a href="https://emotion.sh/docs/keyframes"&gt;keyframes helper&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As of material ui we can just take the Box component&lt;/p&gt;

&lt;p&gt;Our goal is to create an Animated component that can receive following props:&lt;br&gt;
&lt;code&gt;show&lt;/code&gt;: if the component is mounted or not&lt;br&gt;
&lt;code&gt;mountData&lt;/code&gt;: describing the entrance animation&lt;br&gt;
&lt;code&gt;mountData.keyframes&lt;/code&gt;: Standard css animation keyframes&lt;br&gt;
&lt;code&gt;mountData.time&lt;/code&gt;: Animation duration in seconds &lt;br&gt;
&lt;code&gt;mountData.type&lt;/code&gt;: Css animation type (e.g. linear, ease-out...)&lt;br&gt;
&lt;code&gt;unmountData&lt;/code&gt;: describing the exit animation&lt;br&gt;
&lt;code&gt;unmountData.keyframes&lt;/code&gt;: Standard css animation keyframes&lt;br&gt;
&lt;code&gt;unmountData.time&lt;/code&gt;: Animation duration in seconds &lt;br&gt;
&lt;code&gt;unmountData.type&lt;/code&gt;: Css animation type (e.g. linear, ease-out...)&lt;br&gt;
&lt;code&gt;unmountTimeout&lt;/code&gt; (optional): to provide a possibility for auto unmount the component after a timeout&lt;br&gt;
&lt;code&gt;setShow&lt;/code&gt; (optional): function to unmount the component, provided by the parent&lt;/p&gt;

&lt;p&gt;If you don't provide the last two, the parent component will control the whole mount/unmount process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Animated&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;mountData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
       0% {opacity: 0}
       100% {opacity: 1}
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
      0% {opacity: 1}
      100% {opacity: 0}
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;unmountTimeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setShowWarning&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;hide&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Animated&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@emotion/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultMountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultMountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;unmountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultMountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;unmountTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;animationData&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animationCss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`animation: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unmountHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mountData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unmountTimeout&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;unmountHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;unmountTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unmountTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;unmountTime&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;unmountHandler&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unmountHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;
      &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animationCss&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can not use default props for our default mount data, because it will cause all the time re-rendering.&lt;/p&gt;

&lt;p&gt;This is a simple, fast and lightweight way to create mount animations just using css.&lt;/p&gt;

&lt;p&gt;Best Regards&lt;br&gt;
Anton Tonchev&lt;br&gt;
JUST-SELL.online&lt;/p&gt;

</description>
      <category>material</category>
      <category>react</category>
      <category>animation</category>
      <category>css</category>
    </item>
    <item>
      <title>Don't duplicate logic in Asserts: The most common mistake on unit testing</title>
      <author>Cesar Aguirre</author>
      <pubDate>Mon, 08 Nov 2021 14:15:48 +0000</pubDate>
      <link>https://dev.to/canro91/dont-duplicate-logic-in-asserts-the-most-common-mistake-on-unit-testing-2ibd</link>
      <guid>https://dev.to/canro91/dont-duplicate-logic-in-asserts-the-most-common-mistake-on-unit-testing-2ibd</guid>
      <description>&lt;p&gt;&lt;em&gt;I originally posted this post on &lt;a href="https://canro91.github.io/2021/10/11/DontRepeatLogicInAssertions/"&gt;my blog&lt;/a&gt; a couple of weeks ago. It's part of a series I've been publishing, called "Unit Testing 101"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have covered some &lt;a href="https://canro91.github.io/2021/03/29/UnitTestingCommonMistakes/"&gt;common mistakes when writing unit tets&lt;/a&gt;. Some of them may seem obvious. But, we all have made this one mistake when we started to write unit tests. This is the most common mistake when writing unit tests and how to fix it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't repeat the logic under test when verifying the expected result of a test. Instead, use known, hard-coded, pre-calculated values.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's write some tests for &lt;a href="https://github.com/canro91/Testing101"&gt;Stringie&lt;/a&gt;, a (fictional) library to manipulate strings with  a fluent interface. Stringie has a &lt;code&gt;Remove()&lt;/code&gt; method to remove substrings from the end of a string.&lt;/p&gt;

&lt;p&gt;We can use Stringie &lt;code&gt;Remove()&lt;/code&gt; method like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "Hello,"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dont-copy-and-paste-the-tested-logic"&gt;
  &lt;/a&gt;
  Don't Copy and Paste the tested logic
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When writing unit tests, don't copy the tested logic and paste it into private methods to use them inside assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we bring the tested logic to private methods in our tests, we will have code, and bugs, in two places. Duplication is the root of all evil. Even, inside our tests.&lt;/p&gt;

&lt;p&gt;Please, don't write assertions like the one in this test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Remove_ASubstring_RemovesThatSubstringFromTheEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;RemoveFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;RemoveFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUxO5xwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1533046652171-aecb6943c03a%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dcrop%26fm%3Djpg%26h%3D400%26ixid%3DMnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTYzMTcyMTIyMw%26ixlib%3Drb-1.2.1%26q%3D80%26utm_campaign%3Dapi-credit%26utm_medium%3Dreferral%26utm_source%3Dunsplash_source%26w%3D600" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUxO5xwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1533046652171-aecb6943c03a%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dcrop%26fm%3Djpg%26h%3D400%26ixid%3DMnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTYzMTcyMTIyMw%26ixlib%3Drb-1.2.1%26q%3D80%26utm_campaign%3Dapi-credit%26utm_medium%3Dreferral%26utm_source%3Dunsplash_source%26w%3D600" alt="building of apartments" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;
That's a lot of duplication. Photo by &lt;a href="https://unsplash.com/@joshchai?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Joshua  Chai&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#dont-make-internals-public"&gt;
  &lt;/a&gt;
  Don't make internals public
&lt;/h2&gt;

&lt;p&gt;Also, by mistake, we expose internals of the tested logic to use them in assertions. We make private methods public and static. Even to test those private methods directly.&lt;/p&gt;

&lt;p&gt;From our &lt;a href="https://canro91.github.io/2021/03/15/UnitTesting101/"&gt;Unit Testing 101&lt;/a&gt;, we learned to write unit tests through public methods. We should test the observable behavior of our tested code. A returned value, a thrown exception or an external invocation made.&lt;/p&gt;

&lt;p&gt;Again, don't write assertions like the one in this test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Remove_ASubstring_RemovesThatSubstringFromTheEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stringie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrivateMethodMadePublicAndStatic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-known-values-to-assert"&gt;
  &lt;/a&gt;
  Use known values to Assert
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Instead of duplicating the tested logic, by exposing internals or copy-pasting code into assertions, use a known expected value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we end up using the same expected values, we can create constants for them. Like &lt;code&gt;const string Hello = "Hello";&lt;/code&gt; or &lt;code&gt;const string HelloAndComma = "Hello,";&lt;/code&gt; for our example.&lt;/p&gt;

&lt;p&gt;For our sample test, simply use the expected substring &lt;code&gt;"Hello,"&lt;/code&gt;. Like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Remove_ASubstring_RemovesThatSubstringFromTheEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Let's use a known value in our assertions&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà! That's the most common mistake when writing unit tests. It seems silly! But, often we duplicate Math operations and string concatenations and it passes unnoticed. Remember, don't put too much logic in your tests. Tests should be only assignments and method calls.&lt;/p&gt;

&lt;p&gt;If you're new to unit testing, read my post on &lt;a href="https://canro91.github.io/2021/03/15/UnitTesting101/"&gt;how to write your first unit tests in C# with MSTest&lt;/a&gt; and check the &lt;a href="https://canro91.github.io/2021/03/29/UnitTestingCommonMistakes/"&gt;4 common mistakes when writing your first tests&lt;/a&gt;. Also, grab your free copy of my eBook &lt;a href="https://canro91.github.io/UnitTesting"&gt;Unit Testing 101&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey! I'm Cesar, a software engineer and lifelong learner. I help teams to grow high-quality code. Visit &lt;a href="https://canro91.github.io"&gt;my blog&lt;/a&gt; to learn more about my work!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy testing!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>beginners</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build a curtain menu with React!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Mon, 08 Nov 2021 14:05:09 +0000</pubDate>
      <link>https://dev.to/ziratsu/build-a-curtain-menu-with-react-2b2l</link>
      <guid>https://dev.to/ziratsu/build-a-curtain-menu-with-react-2b2l</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;You want to build a &lt;em&gt;curtain menu&lt;/em&gt; for your app? You're in the right place!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CORlOIl2tGE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Check out the source code to see which folders and files you need to recreate a &lt;strong&gt;curtain menu&lt;/strong&gt; &lt;a href="https://github.com/Ziratsu/curtain-menu/blob/main/src/Components/CurtainMenu/CurtainMenu.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will have a pretty simple design but you can change it up however you like!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-your-component"&gt;
  &lt;/a&gt;
  1. Create your component.
&lt;/h2&gt;

&lt;p&gt;Create a simple React app and add a components folder in which you'll create your component CurtainMenu, in which you'll create two buttons and your links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CurtainMenu.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./menu.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CurtainMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SERVICES&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-some-state"&gt;
  &lt;/a&gt;
  2. Create some state.
&lt;/h2&gt;

&lt;p&gt;Now let's create some state. It'll start with false since we want to see the nav only if we click on the button.&lt;/p&gt;

&lt;p&gt;Then let's create another state that'll check the width of the window when you open the app and whenever you resize it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-use-the-useeffect-hook"&gt;
  &lt;/a&gt;
  3. Use the &lt;em&gt;useEffect&lt;/em&gt; hook!
&lt;/h2&gt;

&lt;p&gt;Create a function that'll check the width of your window, which you'll use in your event listener:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return function in the useEffect is necessary if, for some reason, your component is destroyed, it'll clean things up. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-hide-the-button-if-the-window-is-large"&gt;
  &lt;/a&gt;
  4. Hide the button if the window is large.
&lt;/h2&gt;

&lt;p&gt;Add a condition so that the buttons only show if the window is under 900px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SERVICES&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-but-the-button-doesnt-work-so-lets-add-an-onclick-function"&gt;
  &lt;/a&gt;
  5. But the button doesn't work... so let's add an &lt;em&gt;onClick&lt;/em&gt; function!
&lt;/h2&gt;

&lt;p&gt;Start by creating the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then add it to your buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 X
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's still not working... That's because you need to change the classname of the name conditionally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if it's true, it'll show the nav otherwise it won't show.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-youre-done"&gt;
  &lt;/a&gt;
  6. You're done!
&lt;/h2&gt;

&lt;p&gt;That's it! Here's the full code of your component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CurtainMenu.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./menu.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CurtainMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; 
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SERVICES&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have a nice &lt;strong&gt;curtain menu&lt;/strong&gt; that you can customise however you want!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Factor app - http requests</title>
      <author>Alex Esoposting</author>
      <pubDate>Mon, 08 Nov 2021 13:58:32 +0000</pubDate>
      <link>https://dev.to/olus2000/factor-app-http-requests-ego</link>
      <guid>https://dev.to/olus2000/factor-app-http-requests-ego</guid>
      <description>&lt;p&gt;The app I described in the previous tutorial is supposed to fetch data about a game from some server. Before writing any code to process this data it would be nice to know what kind of data we're dealing with and how to find it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#target-api"&gt;
  &lt;/a&gt;
  Target API
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#where-we-get-the-data-from"&gt;
  &lt;/a&gt;
  Where we get the data from
&lt;/h6&gt;

&lt;p&gt;The server we're trying to talk to is a simple HTTPS server with an impossible to remember address of &lt;code&gt;a766-95-160-157-211.ngrok.io&lt;/code&gt;. Most of its endpoints provide nice HTML pages, very useful for the browser but entirely useless for us. What we need can be found under &lt;code&gt;/api/game/&amp;lt;game-nr&amp;gt;&lt;/code&gt; which is supposed to provide us with all data relevant to the given game number in JSON format.&lt;/p&gt;

&lt;p&gt;To summarise: we need to make an HTTP GET request to the given address and receive a JSON in return.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-toolbox-for-today"&gt;
  &lt;/a&gt;
  Our toolbox for today
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#factor-httpclient-and-jsonreader-vocabularies"&gt;
  &lt;/a&gt;
  Factor http.client and json.reader vocabularies
&lt;/h6&gt;

&lt;p&gt;Communicating over HTTP can be a huge pain because of the amount of things you need to worry about like headers or where to put data into the request. Fortunately Factor will do most of that for us so that we only need to use exactly one word from each of these libraries.&lt;/p&gt;

&lt;p&gt;For GET requests there is a word &lt;code&gt;http-get&lt;/code&gt;, but it's not what we need there as it will raise an error if the request is not successful. &lt;code&gt;http-get&lt;/code&gt; is actually a wrapper over the word &lt;code&gt;htpp-get*&lt;/code&gt; which just performs a request and returns whatever the outcome is.&lt;/p&gt;

&lt;p&gt;To decode JSON into meaningful Factor objects there is a word &lt;code&gt;json&amp;gt;&lt;/code&gt; which converts a JSON string to a Factor object. If the request is successful then &lt;code&gt;http-get*&lt;/code&gt; leaves returned data as a byte array. We then just need to convert it to a string to be able to extract Factor objects out of it. Our json extracting pipeline is two words: &lt;code&gt;&amp;gt;string json&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-knowledge-to-use"&gt;
  &lt;/a&gt;
  Putting knowledge to use
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#actual-code-time"&gt;
  &lt;/a&gt;
  Actual code time!
&lt;/h6&gt;

&lt;p&gt;The word &lt;code&gt;http-get*&lt;/code&gt; has a stack effect &lt;code&gt;( url -- response data )&lt;/code&gt;. To modify it to fetch game data we need to provide it with the correct url joined with the game number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="kn"&gt;USE:&lt;/span&gt; &lt;span class="nn"&gt;http.client&lt;/span&gt;

&lt;span class="k"&gt;CONSTANT:&lt;/span&gt; &lt;span class="n"&gt;api-url&lt;/span&gt; &lt;span class="s"&gt;"https://a766-95-160-157-211.ngrok.io/api/game/"&lt;/span&gt;

&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;get-game*&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;game-id-string&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;api-url&lt;/span&gt; &lt;span class="nb"&gt;prepend&lt;/span&gt; &lt;span class="n"&gt;http-get*&lt;/span&gt;
&lt;span class="k"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that's not enough. Notice that &lt;code&gt;get-game*&lt;/code&gt; returns two values: response and data. If everything is ok then &lt;code&gt;code&lt;/code&gt; slot of the response will be 200 and data will be a byte array representing a JSON with game data. A lot of things can go wrong though: the client may be offline, the server may be offline, the game id may be incorrect and so on.&lt;/p&gt;

&lt;p&gt;For these cases we need a wrapper word for &lt;code&gt;get-game*&lt;/code&gt; that will check for any HTTP errors. That word will then extract any relevant information - either game data or HTTP error code - and return it for further interpretation by the app. HTTP error codes start from 400 and go up so this check is very simple. If it's lower than 400 we can use the words &lt;code&gt;&amp;gt;string json&amp;gt;&lt;/code&gt; to convert response data to string and then to a Factor object. The function should also return a flag indicating whether the request was successful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="kn"&gt;USE:&lt;/span&gt; &lt;span class="nn"&gt;json.reader&lt;/span&gt;

&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;get-game&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;game-id-string&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;error/game-object&lt;/span&gt; &lt;span class="nv"&gt;f/t&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;get-game*&lt;/span&gt; &lt;span class="nb"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;code&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dup&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;drop&lt;/span&gt; &lt;span class="nb"&gt;&amp;gt;string&lt;/span&gt; &lt;span class="n"&gt;json&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;nip&lt;/span&gt; &lt;span class="no"&gt;f&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;if&lt;/span&gt;
&lt;span class="k"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-vocabulary"&gt;
  &lt;/a&gt;
  Final vocabulary
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#just-code"&gt;
  &lt;/a&gt;
  Just code
&lt;/h6&gt;

&lt;p&gt;I put this code in the &lt;code&gt;nptimelapse.get-game&lt;/code&gt; vocabulary generated with &lt;code&gt;scaffold-work&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;! Copyright (C) 2021 Aleksander Sabak.
! See http://factorcode.org/license.txt for BSD license.
USING: kernel strings accessors http.client json.reader ;
IN: nptimelapse.api

CONSTANT: api-url "https://a766-95-160-157-211.ngrok.io/api/game/"


: get-game* ( game-id-string -- response data )
    api-url prepend http-get*
;


: get-game ( game-id-string -- error/game-object f/t )
    get-game* swap code&amp;gt;&amp;gt; dup 400 &amp;lt;
    [ drop &amp;gt;string json&amp;gt; t ]
    [ nip f ] if
;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#a-short-chapter-wasnt-it"&gt;
  &lt;/a&gt;
  A short chapter, wasn't it?
&lt;/h6&gt;

&lt;p&gt;Fetching data from a HTTP server turned out to be quite easy given Factor's high-level vocabularies. I chose the easiest part for the beginning though, so don't expect everything to go as smoothly from now on. We are about to get into some UI stuff, and that's never easy in any language.&lt;/p&gt;

</description>
      <category>esoteric</category>
      <category>concatenative</category>
      <category>tutorial</category>
      <category>factor</category>
    </item>
    <item>
      <title>Test-Driven Development With The oclif Testing Library: Part One</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 08 Nov 2021 13:54:29 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/test-driven-development-with-the-oclif-testing-library-part-one-25h9</link>
      <guid>https://dev.to/salesforcedevs/test-driven-development-with-the-oclif-testing-library-part-one-25h9</guid>
      <description>&lt;p&gt;While writing a CLI tool can be a lot of fun, the initial setup and boilerplate—parsing arguments and flags, validation, subcommands—is generally the same for every CLI, and it’s a drag. That’s where the &lt;a href="https://oclif.io/"&gt;oclif framework&lt;/a&gt; saves the day. The boilerplate for writing a single-command or multi-command CLI melts away, and you can quickly get into the code that you &lt;em&gt;actually&lt;/em&gt; want to write.&lt;/p&gt;

&lt;p&gt;But wait—there’s more! oclif also has a testing framework that lets you execute your CLI the same way a user would, capturing standard output and errors so that you can test expectations. In this article, I'll show you how to write and test an oclif CLI application with ease.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-build"&gt;
  &lt;/a&gt;
  What are we going to build?
&lt;/h3&gt;

&lt;p&gt;We’re all tired of working on the typical TODO application. Instead, let’s build something different but simple. We’ll use a test-driven development (TDD) approach to build a time-tracking application. Our CLI will let us do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add projects&lt;/li&gt;
&lt;li&gt;Start and end timers on those projects&lt;/li&gt;
&lt;li&gt;View the total spend on a project&lt;/li&gt;
&lt;li&gt;View the time spent on each entry for a given project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what a sample interaction with the &lt;code&gt;time-tracker&lt;/code&gt; CLI looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ time-tracker add-project project-one
Created new project "project-one"

~ time-tracker start-timer project-one
Started a new time entry on "project-one"

~ time-tracker start-timer project-two
 &amp;gt;   Error: Project "project-two" does not exist

~ time-tracker add-project project-two
Created new project "project-two"

~ time-tracker start-timer project-two
Started a new time entry on "project-two"

~ time-tracker end-timer project-two
Ended time entry for "project-two"

~ time-tracker list-projects
project-one (0h 0m 13.20s)
- 2021-09-20T13:13:09.192Z - 2021-09-20T13:13:22.394Z (0h 0m 13.20s)
project-two (0h 0m 7.79s)
- 2021-09-20T13:13:22.394Z - 2021-09-20T13:13:30.189Z (0h 0m 7.79s)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll manage all of the data about added projects and active timers in a “database” (a simple JSON data file).&lt;/p&gt;

&lt;p&gt;The source code for our time tracking application project can be found &lt;a href="https://github.com/bloveless/oclif-time-tracker"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we’re doing this the TDD way, let’s dive in… tests first!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-timetracker-features-and-tests"&gt;
  &lt;/a&gt;
  Our Time-Tracker: Features and Tests
&lt;/h2&gt;

&lt;p&gt;As we describe our application’s features, we should be thinking about tests we can write to assert the expectations we have for those features. Here is a list of our application’s features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: The new project is created, and its record is stored in the underlying database. The user receives a confirmation message. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project already exists, then an error message will appear to the user. The underlying database will be unaltered.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Start a timer on a project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: The requested project already exists, so we can start a new time entry, setting the startTime to the current date/time. The user will receive a notification when the timer begins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: If the timer is already running on another project, then that timer will stop and a new timer will begin on the requested project. The user will receive a notification when the timer begins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project doesn’t exist, then an error message will appear to the user. The underlying database will be unaltered.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;End a timer on a project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: A timer is active on the requested project, so we can end that timer and notify the user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project doesn’t exist, then an error message will appear to the user. The underlying database will be unaltered.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project exists without an active timer, then the user will be notified. The underlying database will be unaltered.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;List project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: All the projects, total times, entries, and entry times are displayed to the user.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Database existence (for all commands)

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the &lt;code&gt;time.json&lt;/code&gt; file doesn’t exist in the current directory, then an error message appears to the user.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For data storage—our “database”—we’ll store our time entries on disk as JSON, in a file called &lt;code&gt;time.json&lt;/code&gt;. Below is an example of how this file may look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "activeProject": "project-two",
  "projects": {
    "project-one": {
      "activeEntry":null,
      "entries": [
        {
          "startTime": "2021-09-18T06:25:55.874Z",
          "endTime": "2021-09-18T06:26:03.021Z"
        }, {
          "startTime": "2021-09-18T06:26:09.883Z",
          "endTime": "2021-09-18T06:26:47.585Z"
        }
      ]
    },
    "project-two": {
      "activeEntry": 1,
      "entries": [
        {
          "startTime": "2021-09-18T06:26:47.585Z",
          "endTime": "2021-09-18T06:27:13.776Z"
        }, {
          "startTime": "2021-09-18T06:52:54.791Z",
          "endTime": null
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#design-decisions"&gt;
  &lt;/a&gt;
  Design Decisions
&lt;/h3&gt;

&lt;p&gt;Finally, let’s cover some of the design decisions for our overall application.&lt;/p&gt;

&lt;p&gt;First, we’ll store an &lt;code&gt;activeProject&lt;/code&gt; at the top level of our JSON data. We can use this to quickly check which project is active. Second, we’ll store an &lt;code&gt;activeEntry&lt;/code&gt; field in &lt;em&gt;each project&lt;/em&gt;, which stores the index of the entry that is currently being worked on.&lt;/p&gt;

&lt;p&gt;With these two pieces of information, we can navigate directly to the active project and its active entry in order to end the timer. We can also determine instantly if the project has any active entries or if there are any active projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;Now that we’ve laid all the groundwork, let’s create a new project and start digging in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx oclif multi time-tracker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a new &lt;a href="https://oclif.io/docs/multi"&gt;multi-command oclif application&lt;/a&gt;. With a multi-command CLI, we can run commands like &lt;code&gt;time-tracker add-project project-one&lt;/code&gt; and &lt;code&gt;time-tracker start-timer project-one&lt;/code&gt;. In these examples, both &lt;code&gt;add-project&lt;/code&gt; and &lt;code&gt;start-timer&lt;/code&gt; are &lt;em&gt;separate&lt;/em&gt; commands, each stored in its own source file in the project, but they all fall under the umbrella &lt;code&gt;time-tracker&lt;/code&gt; CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-word-about-stubs"&gt;
  &lt;/a&gt;
  A Word About Stubs
&lt;/h3&gt;

&lt;p&gt;We want to take advantage of the test helpers provided by &lt;code&gt;@oclif/test&lt;/code&gt;. For testing &lt;em&gt;our&lt;/em&gt; particular application, we’ll need to write a simple stub. Here’s why:&lt;/p&gt;

&lt;p&gt;Our application writes to a &lt;code&gt;timer.json&lt;/code&gt; file on the filesystem. Imagine if we were running our tests in parallel and had 10 tests that were all writing to the same file at the same time. That would get messy and produce unpredictable results.&lt;/p&gt;

&lt;p&gt;A better approach would be to make each test write to its own file, test against those files, and clean up after ourselves. Better yet, each test could write to an object in memory instead of a file, and we can assert our expectations on that object.&lt;/p&gt;

&lt;p&gt;The best practice when writing unit tests is to replace the driver with something else. In our case, we will stub out the default &lt;code&gt;FilesystemStorage&lt;/code&gt; driver with a &lt;code&gt;MemoryStorage&lt;/code&gt; driver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/oclif/test"&gt;@oclif/test&lt;/a&gt; is a simple wrapper around &lt;a href="https://github.com/oclif/fancy-test"&gt;@oclif/fancy-test&lt;/a&gt; that adds some functionality around testing CLI commands. We’re going to use the &lt;a href="https://github.com/oclif/fancy-test#stub"&gt;stub functionality&lt;/a&gt; in &lt;code&gt;@oclif/fancy-test&lt;/code&gt; to replace the storage driver in our command for testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-first-command-add-project"&gt;
  &lt;/a&gt;
  Our First Command: Add Project
&lt;/h2&gt;

&lt;p&gt;Now, let's talk about the “add project” command and the important parts related to mocking out the filesystem. Every new oclif project starts with a &lt;code&gt;hello.js&lt;/code&gt; file in &lt;code&gt;src/commands&lt;/code&gt;. We’ve renamed it to &lt;code&gt;add-project.js&lt;/code&gt; file and filled it in with the bare minimum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: src/commands/add-project.js

const {Command} = require('@oclif/command')
const FilesystemStorage = require('../storage/filesystem')

class AddProjectCommand extends Command {
  async run() {}
}

// This is the important line!
AddProjectCommand.storage = new FilesystemStorage()

AddProjectCommand.description = 'Add a new project to the time tracking database'

AddProjectCommand.args = []

module.exports = AddProjectCommand
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swappable-storage-for-tests"&gt;
  &lt;/a&gt;
  Swappable Storage for Tests
&lt;/h3&gt;

&lt;p&gt;Notice how I statically assign a &lt;code&gt;FilesystemStorage&lt;/code&gt; instance to &lt;code&gt;AddProjectCommand.storage&lt;/code&gt;. This allows me—in my tests—to swap out the filesystem storage with an in-memory storage implementation. Let’s look at the &lt;code&gt;FilesystemStorage&lt;/code&gt; and &lt;code&gt;MemoryStorage&lt;/code&gt; classes below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: src/storage/filesystem.js

const fs = require('fs/promises')

class FilesystemStorage {
  constructor(initialData = {}) {
    this.data = initialData
  }

  load() {
    return fs.readFile('./time.json').then(file =&amp;gt; {
      return JSON.parse(file.toString('utf-8'))
    }).catch(() =&amp;gt; {
      // If reading the file results in an error then assume that the file didn't exist and return an empty object
      return Promise.resolve(this.data)
    })
  }

  save(data) {
    return fs.writeFile('./time.json', JSON.stringify(data))
  }
}

module.exports = FilesystemStorage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: src/storage/memory.js

class MemoryStorage {
  constructor(initialData = {}) {
    this.data = initialData
  }

  load() {
    return Promise.resolve(this.data)
  }

  save(data) {
    this.data = data
    return Promise.resolve()
  }
}

module.exports = MemoryStorage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;FilesystemStorage&lt;/code&gt; and &lt;code&gt;MemoryStorage&lt;/code&gt; have the same interface, so we can swap one out for the other in our tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-first-test-for-the-add-project-command"&gt;
  &lt;/a&gt;
  The First Test for the Add Project Command
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;test/commands&lt;/code&gt;, we renamed &lt;code&gt;hello.test.js&lt;/code&gt; to &lt;code&gt;add-project.test.js&lt;/code&gt;, and we’ve written our first test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: test/commands/add-project.test.js

const { expect, test } = require('@oclif/test')
const AddProjectCommand = require('../../src/commands/add-project')
const MemoryStorage = require('../../src/storage/memory')

describe('add project', () =&amp;gt; {
  test
    .stdout()
    .stub(AddProjectCommand, 'storage', new MemoryStorage({}))
    .command(['add-project', 'project-one'])
    .it('should add a new project', async ctx =&amp;gt; {
      expect(await AddProjectCommand.storage.load()).to.eql({
        activeProject: null,
        projects: {
          'project-one': {
            activeEntry: null,
            entries: [],
          },
        },
      })
      expect(ctx.stdout).to.contain('Created new project "project-one"')
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic happens in the &lt;code&gt;stub&lt;/code&gt; call. We swap out the &lt;code&gt;FilesystemStorage&lt;/code&gt; with &lt;code&gt;MemoryStorage&lt;/code&gt; (with an empty object for initial data). Then, we assert expectations on the storage contents.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpacking-the-raw-test-endraw-command-from-ocliftest"&gt;
  &lt;/a&gt;
  Unpacking the &lt;code&gt;test&lt;/code&gt; Command from @oclif/test
&lt;/h3&gt;

&lt;p&gt;Before we implement our command, let’s make sure we understand our test file. Our &lt;code&gt;describe&lt;/code&gt; block calls &lt;code&gt;test&lt;/code&gt;, which is the entry point to &lt;code&gt;@oclif/fancy-test&lt;/code&gt; (re-exported from &lt;code&gt;@oclif/test&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next, the &lt;code&gt;.stdout()&lt;/code&gt; method captures the output from the command, letting you assert expectations on it by using &lt;code&gt;ctx.stdout&lt;/code&gt;. There is also a &lt;code&gt;.stderr()&lt;/code&gt; method, but we'll see later that there is another more preferred method for handling errors in &lt;code&gt;@oclif/fancy-test.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;For most applications, you wouldn’t normally make assertions against what’s being written to standard out. However, in the case of a CLI, this is one of your major interfaces with the user, so testing against standard out makes sense.&lt;/p&gt;

&lt;p&gt;Keep in mind that there is a major gotcha here! If you use &lt;code&gt;console.log&lt;/code&gt; to debug while you are developing, then &lt;code&gt;.stdout()&lt;/code&gt; &lt;strong&gt;will capture that output as well.&lt;/strong&gt; Unless you are asserting against &lt;code&gt;ctx.stdout&lt;/code&gt;, you'll probably never see that output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.stub(AddProjectCommand, 'storage', new MemoryStorage({}))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've talked about the &lt;code&gt;.stub&lt;/code&gt; method a bit already, but what we’re doing here is replacing the static property on our command with &lt;code&gt;MemoryStorage&lt;/code&gt; instead of the default &lt;code&gt;FilesystemStorage&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.command(['add-project', 'project-one'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method &lt;code&gt;.command&lt;/code&gt; is where things get really cool with &lt;code&gt;@oclif/test&lt;/code&gt;. This line calls your CLI just like you would from the command line. You can pass in flags and their values or a list of arguments like I'm doing here. &lt;code&gt;@oclif/test&lt;/code&gt; will do the work of calling your command the exact same way as it would be called by an end user at the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.it('test description', () =&amp;gt; [...])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be familiar with &lt;code&gt;it&lt;/code&gt; blocks. This is where you normally do all the work to set up your test and run assertions against the results. Things are pretty similar here, but you've probably already done the hard work of setting up your test with the other helpers from &lt;code&gt;@oclif/test&lt;/code&gt; and &lt;code&gt;@oclif/fancy-test&lt;/code&gt;, and the &lt;code&gt;it&lt;/code&gt; block needs only to assert against the output of the command.&lt;/p&gt;

&lt;p&gt;Finally, now that we understand a bit more about what the test does, we can run our tests with &lt;code&gt;npm test&lt;/code&gt;. Since we haven’t written any implementation code, we would expect our test to fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) add project
       should add a new project:
     Error: Unexpected argument: project-one
See more help with --help
      at validateArgs (node_modules/@oclif/parser/lib/validate.js:10:19)
      at Object.validate (node_modules/@oclif/parser/lib/validate.js:55:5)
      at Object.parse (node_modules/@oclif/parser/lib/index.js:28:7)
      at AddProjectCommand.parse (node_modules/@oclif/command/lib/command.js:86:41)
      at AddProjectCommand.run (src/commands/add-project.js:1:1576)
      at AddProjectCommand._run (node_modules/@oclif/command/lib/command.js:43:31)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect! A failed test, just as we expected. Let’s write the code to get to green.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-to-green-implementing-our-command"&gt;
  &lt;/a&gt;
  Getting to Green: Implementing Our Command
&lt;/h3&gt;

&lt;p&gt;Now, we just have to follow the errors to write our command. First, we need to update the &lt;code&gt;AddProjectCommand&lt;/code&gt; class to be aware of the arguments we want to pass in. In this case, we are only passing in a project name. Let’s make that change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class AddProjectCommand extends Command {
  ...
}

AddProjectCommand.storage = new FilesystemStorage()

AddProjectCommand.description = 'Add a new project to the time tracking database'

// This is the update
AddProjectCommand.args = [
  {name: 'projectName', required: true},
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to tell oclif about our command’s expected arguments and their properties. In our case, there is only one argument, &lt;code&gt;projectName&lt;/code&gt;, and it is required. You can learn more about oclif arguments &lt;a href="https://oclif.io/docs/args"&gt;here&lt;/a&gt;, and oclif flags &lt;a href="https://oclif.io/docs/flags"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, we run the test again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 1) add project
       should add a new project:

      AssertionError: expected {} to deeply equal { Object (activeProject, projects) }
      + expected - actual

      -{}
      +{
      +  "activeProject": [null]
      +  "projects": {
      +    "project-one": {
      +      "activeEntry": [null]
      +      "entries": []
      +    }
      +  }
      +}

      at Context.&amp;lt;anonymous&amp;gt; (test/commands/add-project.test.js:11:55)
      at async Object.run (node_modules/fancy-test/lib/base.js:44:29)
      at async Context.run (node_modules/fancy-test/lib/base.js:68:25)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wonderful! We are now seeing that, while we had expected “project-one” to be created, there was no change made to the underlying data structure.&lt;/p&gt;

&lt;p&gt;Let's update the command with the minimum amount of code necessary to make this test pass. For brevity, we’ll only display the &lt;code&gt;run()&lt;/code&gt; method in &lt;code&gt;src/commands/add-project.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async run() {
    const {args} = this.parse(AddProjectCommand)
    const db = await AddProjectCommand.storage.load()

    db.activeProject = db.activeProject || null
    db.projects = db.projects || {}
    db.projects[args.projectName] = {
        activeEntry: null,
        entries: [],
    }

    await AddProjectCommand.storage.save(db)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, if no file exists, then we will receive an empty object when loading from storage. This code creates any default properties and their values if they didn't exist (for example,  &lt;code&gt;activeProject&lt;/code&gt; and &lt;code&gt;projects&lt;/code&gt;), then it creates a new project with the default structure—an empty &lt;code&gt;entries&lt;/code&gt; array and &lt;code&gt;activeEntry&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Running the test again, we see the next error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) add project
       should add a new project:
     AssertionError: expected '' to include 'Created new project "project-one"'
      at Context.&amp;lt;anonymous&amp;gt; (test/commands/add-project.test.js:20:27)
      at async Object.run (node_modules/fancy-test/lib/base.js:44:29)
      at async Context.run (node_modules/fancy-test/lib/base.js:68:25)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the &lt;code&gt;.stdout()&lt;/code&gt; function comes into play. We expected our CLI to tell the user that we created their new project, but it didn't say anything. This one is easy to fix. We can add the following line right before we call &lt;code&gt;storage.save()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.log(`Created new project "${args.projectName}"`)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Our first happy path test is passing. Now we’re cruising!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add project
    ✓ should add a new project (43ms)

  1 passing (44ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#one-more-test"&gt;
  &lt;/a&gt;
  One More Test
&lt;/h3&gt;

&lt;p&gt;We've got one more test for &lt;code&gt;AddProjectCommand&lt;/code&gt;. We need to make sure that the user cannot add another project with the same name as the current project. For these tests, we’ll repeatedly need to generate a database for a single project. Let’s create a helper for this.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;test/test-helpers.js&lt;/code&gt; add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  generateDb: project =&amp;gt; {
    return {
      activeProject: null,
      projects: {
        [project]: {
          activeEntry: null,
          entries: [],
        },
      },
    }
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can add the next test in &lt;code&gt;add-project.test.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test
  .stdout()
  .stub(AddProjectCommand, 'storage', new MemoryStorage(generateDb('project-one')))
  .command(['add-project', 'project-one'])
  .catch('Project "project-one" already exists')
  .it('should return an error if the project already exists', async _ =&amp;gt; {
    // Expect that the storage is unchanged
    expect(await AddProjectCommand.storage.load()).to.eql(generateDb('project-one'))
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a new method in this test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.catch('Project "project-one" already exists')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mentioned earlier that we don't need to mock &lt;code&gt;stderr&lt;/code&gt; to assert against it. That’s because we can use this &lt;code&gt;catch&lt;/code&gt; method to assert against any errors that happened during the run. In this case, we are expecting that an error will occur and that the underlying storage is unchanged.&lt;/p&gt;

&lt;p&gt;After running our test again, we see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) add project
       should return an error if the project already exists:
     Error: expected error to be thrown
      at Object.run (node_modules/fancy-test/lib/catch.js:8:19)
      at Context.run (node_modules/fancy-test/lib/base.js:68:36)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right after we load &lt;code&gt;db&lt;/code&gt; from storage, we need to check and see if the project already exists and throw an error if it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const db = await AddProjectCommand.storage.load()

// New code
if (db.projects?.[args.projectName]) {
    this.error(`Project "${args.projectName}" already exists`)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we run our tests, they all pass! We've done it! We can now add as many projects as we'd like to track our time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add project
    ✓ should add a new project (46ms)
    ✓ should return an error if the project already exists (76ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-for-now"&gt;
  &lt;/a&gt;
  Conclusion (for now)
&lt;/h2&gt;

&lt;p&gt;In this article—Part One of our two-part series on the oclif testing library—we’ve talked about oclif, its testing framework, why stubs are useful, and how to use them. Then, we began writing tests and implementation for our &lt;code&gt;time-tracker&lt;/code&gt; CLI.&lt;/p&gt;

&lt;p&gt;This is a great start. In the next part of our series, we’ll continue building out our CLI with more commands while covering important testing concepts like data store testing and initialization.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build a Realtime Group Chat Application with React and Socket.io</title>
      <author>Fredrick Emmanuel</author>
      <pubDate>Mon, 08 Nov 2021 13:54:17 +0000</pubDate>
      <link>https://dev.to/divofred/how-to-build-a-realtime-group-chat-application-with-react-and-socketio-2jf0</link>
      <guid>https://dev.to/divofred/how-to-build-a-realtime-group-chat-application-with-react-and-socketio-2jf0</guid>
      <description>&lt;p&gt;This article explain what the framework "Socket.io" means and Create a simple Group Chat App with React. Here is the link to the &lt;a href="https://github.com/divofred/ChatTutorial"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;The Aim of this tutorial is to explain how Socket.io V4 works and simplify the use of it with a front-end framework like React&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisites&lt;/li&gt;
&lt;li&gt;Getting Started&lt;/li&gt;
&lt;li&gt;Setting up the Server&lt;/li&gt;
&lt;li&gt;Setting up React&lt;/li&gt;
&lt;li&gt;Connect Client to Server

&lt;ul&gt;
&lt;li&gt;Creating the Server connection&lt;/li&gt;
&lt;li&gt;Refactoring React App&lt;/li&gt;
&lt;li&gt;Creating Routes&lt;/li&gt;
&lt;li&gt;Connecting the React to the Server&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Handling CORS&lt;/li&gt;
&lt;li&gt;Connecting to Different Rooms&lt;/li&gt;
&lt;li&gt;Messaging

&lt;ul&gt;
&lt;li&gt;Welcome Message&lt;/li&gt;
&lt;li&gt;Sending Message&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Disconnect&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ES6 Syntax&lt;/li&gt;
&lt;li&gt;Knowledge on &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and &lt;a href="https://nodejs.org/en/about/"&gt;Node&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Text Editor, &lt;a href="https://code.visualstudio.com/download"&gt;Visual Studio Code&lt;/a&gt; or &lt;a href="https://atom.io/download"&gt;Atom&lt;/a&gt; preferably&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;NodeJS&lt;/a&gt; Installed already&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-socketio"&gt;
  &lt;/a&gt;
  What is Socket.io?
&lt;/h3&gt;

&lt;p&gt;Socket.io is a JavaScript Library that allows bi-directional Secured Realtime communication between the browser and the server. Which means that if a user sends a data, the recipient(s) of that data would receive immediately, depending on the internet speed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it Works
&lt;/h4&gt;

&lt;p&gt;According to &lt;a href="https://socket.io/docs/v4/"&gt;Socket.io&lt;/a&gt;, The client will try to establish a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"&gt;WebSocket&lt;/a&gt; connection if possible, and will fall back on HTTP long polling if not. WebSocket Establishes the connection between the client and the server. Socket.io makes use of this connection the WebSocket brings to transfer data.&lt;/p&gt;

&lt;p&gt;Let's Jump deep into the course of this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Open up the terminal in your desired folder, then Create a new folder and move into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;react-chat-app
&lt;span class="nb"&gt;cd &lt;/span&gt;react-chat-app
npx create-react-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate back to the projects root folder, initialize the project and install server dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm i express socket.io concurrently nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.npmjs.com/package/concurrently"&gt;Concurrently&lt;/a&gt; helps in running more than command at the same time without creating another terminal. This would really help in running both our react and server side together in one terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodemon.io/"&gt;Nodemon&lt;/a&gt; is a tool that automatically restarts the server when changes are made to the file directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-server"&gt;
  &lt;/a&gt;
  Setting up the Server
&lt;/h2&gt;

&lt;p&gt;After all installations are complete, we create a &lt;code&gt;server.js&lt;/code&gt; file in the projects root directory and require all necessary dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting up our server for socket.io would not be the same as our normal express setup. According to &lt;a href="https://socket.io/docs/v4/server-initialization/"&gt;socket.io&lt;/a&gt; documentation, we create our set up socket.io using node &lt;code&gt;http&lt;/code&gt; server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is Quannected to Port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constant &lt;code&gt;PORT&lt;/code&gt; makes use of ES modules that checks if our app is deployed. If the app is not deployed, it would return 5000.&lt;/p&gt;

&lt;p&gt;We need to add few lines of code to our &lt;code&gt;script&lt;/code&gt; tag inside the &lt;code&gt;package.json&lt;/code&gt; file, to enable us run our server using &lt;code&gt;npm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon server"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;npm run server&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;cd client &amp;amp;&amp;amp; npm start&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try out our app in our terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-react"&gt;
  &lt;/a&gt;
  Setting Up React
&lt;/h2&gt;

&lt;p&gt;Move into &lt;code&gt;react-chat-app&lt;/code&gt; and let's open up our terminal to install the dependencies we would be utilizing in this article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-router socket.io-client query-string react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://socket.io/docs/v4/client-initialization/"&gt;Socket.io-client&lt;/a&gt; is a dependency created by socket.io to help connect to socket.io in the server.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;Query-string&lt;/a&gt; helps us get parameter in our &lt;code&gt;url&lt;/code&gt; from the address bar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-client-to-server"&gt;
  &lt;/a&gt;
  Connect Client to Server
&lt;/h2&gt;

&lt;p&gt;This is where the our messaging app starts. Here, we would create a socket.io connection between our react app with our server app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-the-server-connection"&gt;
  &lt;/a&gt;
  Creating the Server Connection
&lt;/h4&gt;

&lt;p&gt;A listening event has to be made in the  &lt;code&gt;server.js&lt;/code&gt; for client to  connect to the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A Connection has been made&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A disconnection has been made&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constant &lt;code&gt;io&lt;/code&gt; is listening for a &lt;code&gt;connection&lt;/code&gt; from the client and when that connection made is, it creates a special socket for that particular connection. The socket, which is passed as a parameter in the arrow function, holds the properties of the connection which has just been made. In our Code, the &lt;code&gt;socket&lt;/code&gt; ,which is the connection, listens for when it has been disconnected.  And then socket is been removed since there has been a disconnection.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refactoring-react-app"&gt;
  &lt;/a&gt;
  Refactoring React App
&lt;/h4&gt;

&lt;p&gt;Before we can connect to the server, there are some refactoring we need to do to our new React app.&lt;/p&gt;

&lt;p&gt;First we need to delete some of the pre-created file in our React app. Delete every thing in the &lt;code&gt;src&lt;/code&gt; folder and create &lt;code&gt;index.js&lt;/code&gt; in that same &lt;code&gt;src&lt;/code&gt; folder. Add the following code to the &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To prevent react from yelling at us, we need to create the &lt;code&gt;App.js&lt;/code&gt; in the same directory with the &lt;code&gt;index.js&lt;/code&gt;. We need to add a &lt;a href="https://www.freecodecamp.org/news/functional-components-vs-class-components-in-react/#:~:text=Functional%20components%20are%20basic%20JavaScript,mainly%20responsible%20for%20rendering%20UI."&gt;functional component&lt;/a&gt; to our App.js that would return a simple welcome message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="nx"&gt;Successfully&lt;/span&gt; &lt;span class="nx"&gt;rendered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-routes"&gt;
  &lt;/a&gt;
  Creating Routes
&lt;/h4&gt;

&lt;p&gt;Let's create a folder named &lt;code&gt;components&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt;, this would contain all our different component in our React app. In that &lt;code&gt;components&lt;/code&gt; folder, create a &lt;code&gt;Home.js&lt;/code&gt; and a &lt;code&gt;Chat.js&lt;/code&gt; file. When all has been created, navigate back to &lt;code&gt;app.js&lt;/code&gt; to set up our routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/chat"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Chat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For clarity, the&lt;code&gt;Home&lt;/code&gt; and &lt;code&gt;Chat&lt;/code&gt;  file is in the &lt;code&gt;components&lt;/code&gt; and the &lt;code&gt;components&lt;/code&gt; is in the &lt;code&gt;src&lt;/code&gt;. The &lt;code&gt;components&lt;/code&gt; has a &lt;code&gt;s&lt;/code&gt;  at the the end the word,take notes so you don't encounter an error 💗.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We created a route, that makes use of the functional component &lt;code&gt;Home&lt;/code&gt;when accessing the homepage and the &lt;code&gt;Chat&lt;/code&gt; when accessing the Chat page. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Home&lt;/code&gt;  component would contain a form that would redirect us to the &lt;code&gt;Chat&lt;/code&gt; component of the specified group. Open up the &lt;code&gt;Home.js&lt;/code&gt; file and set up our form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
            &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Room"&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
            &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/chat?name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;room=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Sign In
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To keep this article as short as possible, it would not be containing any style. You can add custom style if you prefer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We imported &lt;code&gt;useState&lt;/code&gt; to hold the user's inputted name and room in a State value. Read more on &lt;a href="https://blog.logrocket.com/a-guide-to-usestate-in-react-ecb9952e406c/"&gt;useState&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In all the input tags, we had an &lt;code&gt;onChange&lt;/code&gt; event that listens for a change in input value and save it in the &lt;code&gt;state&lt;/code&gt;.  We made use of the &lt;code&gt;Link&lt;/code&gt;, imported from &lt;code&gt;react-router-dom&lt;/code&gt;, to redirect us to the Chat-page (passing &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt; as a parameter) if and only if our &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt; State Variable has a value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#connecting-the-react-to-the-server"&gt;
  &lt;/a&gt;
  Connecting the React to the Server
&lt;/h4&gt;

&lt;p&gt;We have set up our form, the next step is to create a connect and a disconnect from the server in our &lt;code&gt;chat.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Chat&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;App.js&lt;/code&gt; file passed down a prop to &lt;code&gt;Chat.js&lt;/code&gt;,&lt;code&gt;location&lt;/code&gt; , using &lt;code&gt;react-router-dom&lt;/code&gt; and this &lt;code&gt;location&lt;/code&gt; prop contains the &lt;code&gt;url&lt;/code&gt;. Then we got the parameters (name and room) from the &lt;code&gt;url&lt;/code&gt; using the &lt;code&gt;query-string&lt;/code&gt; dependency and set them to a State Variable. The &lt;code&gt;useEffect&lt;/code&gt; runs every time &lt;code&gt;location.search&lt;/code&gt; changes value. Read more on &lt;a href=""&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-cors"&gt;
  &lt;/a&gt;
  Handling CORS
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;useEffect&lt;/code&gt; block, we created an instance of &lt;code&gt;socket&lt;/code&gt; and passed in our Server's Endpoint &lt;code&gt;http://localhost:5000&lt;/code&gt;. This would cause a breach in the Cross Origin Resource Sharing &lt;code&gt;CORS&lt;/code&gt; Policy since we are trying to data between two different routes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdisxjOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9rwabomht50jrxcwb49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdisxjOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9rwabomht50jrxcwb49.png" alt="CORS ERROR![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cog93uj3zr50vz7dlhi.png)&amp;lt;br&amp;gt;
 " width="880" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since &lt;code&gt;Socket.io&lt;/code&gt; V3, we need to explicitly enable &lt;code&gt;CORS&lt;/code&gt; in our server to ensure the client successfully connect to the server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't Panic🙂, We need to create &lt;code&gt;options&lt;/code&gt; in the &lt;code&gt;server.js&lt;/code&gt; Socket.io connection to permit the connection from the client. Since we have already declared the constant &lt;code&gt;io&lt;/code&gt;, we just need to add the options to the connection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;allowedHeaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-custom-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-to-different-rooms"&gt;
  &lt;/a&gt;
  Connecting to Different Rooms
&lt;/h2&gt;

&lt;p&gt;We have to create a receiver in the server, waiting to receive new connection from the client. Create a new file &lt;code&gt;user.js&lt;/code&gt;, in the same directory with our server's file,that would be in charge of managing  our users:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name and room required.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;users&lt;/code&gt; variable would contain all the users connected. We returned error if name  or room is blank,  else we would add the user to the array  users and return the user.&lt;/p&gt;

&lt;p&gt;We have to Create a listening event for client to join different room in our &lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//The rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;socket.on&lt;/code&gt; listens for any connection from our client with the name &lt;code&gt;"join"&lt;/code&gt; then expects &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt; as a parameter from the client. The callback sends an error if any or it would just return null, *&lt;em&gt;There must return *&lt;/em&gt; from the server.&lt;/p&gt;

&lt;p&gt;We need to connect to the event &lt;code&gt;join&lt;/code&gt;  from the client and emit the inputted name and room as a parameter to the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// The rest of the code &lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#messaging"&gt;
  &lt;/a&gt;
  Messaging
&lt;/h2&gt;

&lt;p&gt;Alright, Here we are😮.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#welcome-message"&gt;
  &lt;/a&gt;
  Welcome Message
&lt;/h4&gt;

&lt;p&gt;We have to emit a welcome message to the user when the user joins a room. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All our messages would be coming from the server. When the user sends a message, we have to first send that message to the server then send it back to the client. The server would emit the message and the client would receive it.&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Navigate to &lt;code&gt;chat.js&lt;/code&gt; to create the connection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMessages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setMessages&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created another useEffect that receives all messages from the server and set them to &lt;code&gt;messages&lt;/code&gt; state variable.&lt;br&gt;We need to render the messages on for the user in the return block. We need to use JSX to render all messages to the user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We mapped through the &lt;code&gt;messages&lt;/code&gt; state variable, we specified the key as the index to avoid &lt;code&gt;react&lt;/code&gt; error and we returned the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; passed down from our server.&lt;br&gt;Let's Connect to the connection created by our client from our &lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//The rest of the code&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Welocome to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// The rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are emitting to &lt;code&gt;message&lt;/code&gt; connection and we are passing the &lt;code&gt;user&lt;/code&gt; and the &lt;code&gt;text&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;We also have to tell other users in the group that a new user has joined. Navigate to &lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has joined!`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The client is always listening for an &lt;code&gt;emit&lt;/code&gt; to &lt;code&gt;message&lt;/code&gt;. The &lt;code&gt;message&lt;/code&gt; is like the name or an identification for the connection. &lt;br&gt;The code we just wrote is broadcasting to other users in the room, telling them that a new user has just Joined the Group.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sending-message"&gt;
  &lt;/a&gt;
  Sending Message
&lt;/h3&gt;

&lt;p&gt;This is how sending of messages would be, We will get the message input from the user, send it to the server and then the server emits that message to everyone in the Group.  Let's Open our &lt;code&gt;chat.js&lt;/code&gt; and create the &lt;code&gt;input&lt;/code&gt; field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sendMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;empty input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    // The rest of the code

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are emitting to a new &lt;code&gt;socket&lt;/code&gt; event. It takes the message from the user and sends it to the newly created socket event &lt;code&gt;sendMessage&lt;/code&gt;. After we've emitted the message to the server using &lt;code&gt;sendMessage&lt;/code&gt;event,  Open your &lt;code&gt;server.js&lt;/code&gt; and let's create the connection for the &lt;code&gt;sendMessage&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;//The rest of the code&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sendMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we got the message from the client, we emitted that received message to everyone in the group.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disconnect"&gt;
  &lt;/a&gt;
  Disconnect
&lt;/h2&gt;

&lt;p&gt;This is last part of this article. After the user is done with chatting and would love to disconnect, we would have send a message to every one in the group, informing them that a user has just disconnected.  Let's open our &lt;code&gt;user.js&lt;/code&gt; file and create a function that would be in charge of removing users from the array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;removeUser&lt;/code&gt; would request for an &lt;code&gt;id&lt;/code&gt;, find a user with that id and then returns that user. &lt;br&gt;We have to import &lt;code&gt;removeUser&lt;/code&gt; in our &lt;code&gt;server.js&lt;/code&gt; and emit a disconnection message to every one in the returned &lt;code&gt;user&lt;/code&gt; group:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removeUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The rest of the code&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;removeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; just left the room`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A disconnection has been made&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When you restart your server, you might get an error when you refresh the Chat page. The best thing to do is to login again from the Home page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, We've Successfully Created a Realtime Chat App with &lt;code&gt;React&lt;/code&gt; and &lt;code&gt;Socket.io&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here is the link to the &lt;a href="https://github.com/divofred/ChatTutorial"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for staying with me till the end💗. If you like to deploy this Chat app to Heroku, I have an article where I talked about &lt;a href="https://dev.to/divofred/deploy-a-react-and-node-app-to-heroku-cgk"&gt;Deploying React and Node app to Heroku&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>socketio</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Securing Kubernetes Deployments</title>
      <author>Tomas Fernandez</author>
      <pubDate>Mon, 08 Nov 2021 13:46:03 +0000</pubDate>
      <link>https://dev.to/semaphore/securing-kubernetes-deployments-3bg7</link>
      <guid>https://dev.to/semaphore/securing-kubernetes-deployments-3bg7</guid>
      <description>&lt;p&gt;&lt;a href="https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-2021-overview"&gt;A recent survey by Red Hat&lt;/a&gt; found that more than half of the Kubernetes environments are misconfigured. Even worse, about 90% of respondents had at least one security incident last year, leading to the very first wave of &lt;a href="https://containerjournal.com/features/siloscape-the-dark-side-of-kubernetes/"&gt;Kubernetes-native malware&lt;/a&gt;. In this tutorial, we present three tools to validate and secure your Kubernetes deployments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-deployment-with-kubernetes"&gt;
  &lt;/a&gt;
  Continuous Deployment with Kubernetes
&lt;/h2&gt;

&lt;p&gt;Kubernetes main selling point is in its declarative nature — we write a manifest describing the desired final state of a deployment and let the platform figure out the rest. But the fact of the matter is that these manifests are easy to get wrong, &lt;a href="https://k8s.af/"&gt;breaking stuff in the process&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://semaphoreci.com/cicd"&gt;Continuous delivery&lt;/a&gt; with Kubernetes is only viable when we test at every stage. For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; First, test the code in the &lt;a href="https://semaphoreci.com/blog/build-stage"&gt;build stage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Then, build the container image and &lt;a href="https://semaphoreci.com/blog/structure-testing-for-docker-containers"&gt;check its structure&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Validate the manifest before deployment (where we are today).&lt;/li&gt;
&lt;li&gt; After deployment, test the system in production using something like &lt;a href="https://semaphoreci.com/blog/what-is-canary-deployment"&gt;canary deployments&lt;/a&gt; or &lt;a href="https://semaphoreci.com/blog/continuous-blue-green-deployments-with-kubernetes"&gt;blue-green deployments&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#validating-kubernetes-manifests"&gt;
  &lt;/a&gt;
  Validating Kubernetes manifests
&lt;/h2&gt;

&lt;p&gt;You don’t need to be a Kubernetes authority to deploy safely — no one should; that’s what we have testing tools for. You do have to have some familiarity with how it works, though. So, if this is the first time you hear the word Kubernetes, pods, or containers, check out our free ebook &lt;a href="https://semaphoreci.com/resources/cicd-docker-kubernetes"&gt;CI/CD for Docker and Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing to check is that the manifests are formally correct — in other words, they follow the Kubernetes &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec"&gt;OpenAPI specification&lt;/a&gt;. We’ll introduce two tools for this: kubeval and kubeconform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubeval"&gt;
  &lt;/a&gt;
  Kubeval
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.kubeval.com/"&gt;Kubeval&lt;/a&gt; is a command-line tool and a Go library for validating Kubernetes manifests. It supports Linux, macOS, Docker, and Windows.&lt;/p&gt;

&lt;p&gt;Kubeval does one job but does it well. Once installed, we can begin testing manifests in YAML or JSON. It’s highly recommended to use the &lt;code&gt;--strict&lt;/code&gt; flag to fail the tests when unknown properties are found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubeval &lt;span class="nt"&gt;--strict&lt;/span&gt; deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#kubeconform"&gt;
  &lt;/a&gt;
  Kubeconform
&lt;/h3&gt;

&lt;p&gt;Inspired by Kubeval, Kubeconform does the same with a focus on speed and extensibility. Unlike Kubeval, Kubeconform can validate manifests that include Custom Resource Definitions (CRDs), a way of extending Kubernetes with functionalities such as persistent databases or additional logging.&lt;/p&gt;

&lt;p&gt;Kubeconform automatically downloads CRDs definitions from remote repositories and runs validation tests. It also self-updates to Kubernetes’ latest specification.&lt;/p&gt;

&lt;p&gt;Kubeconform is released for Docker, MacOs, Linux, and Windows. Once installed, we run the test with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubeconform deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any errors will be reported. If you want more verbose output, add the &lt;code&gt;--summary&lt;/code&gt; option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-deployments-with-kubescore"&gt;
  &lt;/a&gt;
  Securing deployments with Kube-Score
&lt;/h2&gt;

&lt;p&gt;Short of having a Kubernetes expert at hand to check every deployment, a checklist with sane practices is the next best thing. &lt;a href="https://github.com/zegl/kube-score"&gt;Kube-Score&lt;/a&gt; scans your deployment manifests, offers advice, and throws errors before we get into trouble. You can see the complete &lt;a href="https://github.com/zegl/kube-score/blob/master/README_CHECKS.md"&gt;list of checks here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kube-Score runs in Windows, Linux, macOS, Docker, and you &lt;a href="https://kube-score.com/"&gt;try it out online&lt;/a&gt;. Let’s see how well our Ruby “Hello, World” demo does. You may fork and clone the demo here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/semaphoreci-demos/semaphore-demo-ruby-kubernetes"&gt;semaphore-demo-ruby-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We run &lt;code&gt;kube-score score deployment.yml&lt;/code&gt; to get these results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apps/v1/Deployment semaphore-demo-ruby-kubernetes                             💥
    [CRITICAL] Container Resources
        · semaphore-demo-ruby-kubernetes -&amp;gt; CPU limit is not set
            Resource limits are recommended to avoid resource DDOS. Set
            resources.limits.cpu
        · semaphore-demo-ruby-kubernetes -&amp;gt; Memory limit is not set
            Resource limits are recommended to avoid resource DDOS. Set
            resources.limits.memory
        · semaphore-demo-ruby-kubernetes -&amp;gt; CPU request is not set
            Resource requests are recommended to make sure that the application
            can start and run without crashing. Set resources.requests.cpu
        · semaphore-demo-ruby-kubernetes -&amp;gt; Memory request is not set
            Resource requests are recommended to make sure that the application
            can start and run without crashing. Set resources.requests.memory
    [CRITICAL] Container Image Pull Policy
        · semaphore-demo-ruby-kubernetes -&amp;gt; ImagePullPolicy is not set to Always
            It's recommended to always set the ImagePullPolicy to Always, to
            make sure that the imagePullSecrets are always correct, and to
            always get the image you want.
    [CRITICAL] Pod NetworkPolicy
        · The pod does not have a matching NetworkPolicy
            Create a NetworkPolicy that targets this pod to control who/what
            can communicate with this pod. Note, this feature needs to be
            supported by the CNI implementation used in the Kubernetes cluster
            to have an effect.
    [CRITICAL] Pod Probes
        · Container is missing a readinessProbe
            A readinessProbe should be used to indicate when the service is
            ready to receive traffic. Without it, the Pod is risking to receive
            traffic before it has booted. It's also used during rollouts, and
            can prevent downtime if a new version of the application is failing.
            More information: https://github.com/zegl/kube-score/blob/master/README_PROBES.md
    [CRITICAL] Container Security Context
        · semaphore-demo-ruby-kubernetes -&amp;gt; Container has no configured security context
            Set securityContext to run the container in a more secure context.
v1/Service semaphore-demo-ruby-kubernetes-lb                                  ✅
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initial assessment is definitely not looking good. The deployment has five critical errors. It's time to make lemonade out of these lemons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gNi1m3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8n8z08gc1bgecwsk2if.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gNi1m3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8n8z08gc1bgecwsk2if.jpg" alt="Image description" width="621" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-image-pull-policy"&gt;
  &lt;/a&gt;
  What is Image Pull Policy?
&lt;/h3&gt;

&lt;p&gt;When we deploy something in Kubernetes for the first time, &lt;a href="https://kubernetes.io/docs/concepts/containers/images/"&gt;kubelet pulls the image&lt;/a&gt; from the appropriate registry. The image will stay in the node’s cache to be reused. This caching behavior works as long as we’re meticulous about tags. With this, I mean that we are safe if we don’t reuse tags (I’m looking at you, &lt;code&gt;latest&lt;/code&gt;). Otherwise, unexpected things will happen because we can never be sure which particular image a node is running: the one in the cache or the one in the registry.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ImagePullPolicy&lt;/code&gt; value defines how the cache works. By default, its value is &lt;code&gt;IfNotPresent&lt;/code&gt;, meaning “pull the image if not cached.” The recommendation is to change it to &lt;code&gt;Always&lt;/code&gt;, so cache is disabled and a fresh image is always pulled.&lt;/p&gt;

&lt;p&gt;We apply this setting at the container level. This translates to the element &lt;code&gt;spec.template.spec.containers[]&lt;/code&gt; in our manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... add this line to never cache the image&lt;/span&gt;
        &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One down, four left to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-cpu-and-memory-limits"&gt;
  &lt;/a&gt;
  Setting CPU and Memory limits
&lt;/h3&gt;

&lt;p&gt;Containers in Kubernetes don’t have any limits. Wild and free they are to take as much CPU and memory as they may. Having a single pod with a runaway container taking all of a node’s memory is no fun. To keep these guys in check, we should specify limits for &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits"&gt;all pods in the deployment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, setting limits too low could be worse than having none in place. So monitoring is critical. Unless you really need unlimited pods, in which case it’s best to corral them in “no-throttle” nodes to maintain the cluster’s stability.&lt;/p&gt;

&lt;p&gt;Back to fixing our deployment. We can specify resource quotas in two ways: &lt;em&gt;requests&lt;/em&gt; and &lt;em&gt;limits&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;request&lt;/strong&gt; is the least amount of memory and CPU a container needs to get in order to run correctly. The Kubernetes scheduler will use this information to assign the pod to a node with enough free resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyYGNvre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z96lua1ksu3a5c2ie8x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyYGNvre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z96lua1ksu3a5c2ie8x7.png" alt="Image description" width="540" height="684"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;limit&lt;/strong&gt; is the maximum amount of memory and CPU a container is allowed to consume. A container may use more than its permitted requests value, but never more than its limits.&lt;/p&gt;

&lt;p&gt;Both requests and limits are specified as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;CPU&lt;/strong&gt;: a value of &lt;code&gt;1&lt;/code&gt; is equal to one hyperthreaded processor on a bare-metal machine or 1 vCPU core in a VM. For instance, a value of &lt;code&gt;0.25&lt;/code&gt; is a quarter of a core, which can also be written as &lt;code&gt;250m&lt;/code&gt; (millicpus). A container is not to use more than its allowed share of CPU time or risk throttling. Containers and pods will never be killed for exceeding their processor quota.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Memory&lt;/strong&gt;: defined either in bytes (1Mb = 10^6 bytes) or mebibytes (1Mi = 2^20 bytes). When a container uses more memory than allowed, it will be terminated with an out-of-memory (OOM) error, killing the pod.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ur5iOk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95u7ein7v5zarf2qeddk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ur5iOk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95u7ein7v5zarf2qeddk.png" alt="Image description" width="592" height="672"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s important to note that these values are set per container. They are summed up when pods are composed of more than one container.&lt;/p&gt;

&lt;p&gt;So, now that we know how requests and limits work. What values should we choose for our demo? A simple application like ours needs very few resources. Complex systems will require more; how much more is a question best answered with monitoring in place and a bit of experimentation.&lt;/p&gt;

&lt;p&gt;Let’s say we set a request quota of &lt;code&gt;100m&lt;/code&gt;  and &lt;code&gt;64 Mi&lt;/code&gt;. We’ll double those values for the limits. Remember that resources are applied at container level: &lt;code&gt;spec.template.spec.containers[]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... add resource requests and limits&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;100m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;64Mi"&lt;/span&gt;
          &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;200m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;128Mi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-liveness-and-readiness-probes"&gt;
  &lt;/a&gt;
  Using Liveness and Readiness Probes
&lt;/h3&gt;

&lt;p&gt;Once a container is up, how does Kubernetes keep track of it’s health? And is it ready to accept user connections? The answers to these questions involve &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"&gt;using &lt;em&gt;probes&lt;/em&gt;&lt;/a&gt;. A probe can work in two modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;command&lt;/strong&gt;: run a command inside the container and check its exit code.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;network&lt;/strong&gt;: ping a port or perform an HTTP request and check the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, we can check that the webserver (&lt;code&gt;puma&lt;/code&gt;) process is running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... add liveness probe&lt;/span&gt;
        &lt;span class="na"&gt;livenessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pgrep&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-f&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;puma&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The probe above is called a &lt;em&gt;liveness probe&lt;/em&gt;. If the exit code is zero, the application is considered alive. Failed probes make the container &lt;strong&gt;to be restarted&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pF52bDD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aycuoogiscewnhopd296.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pF52bDD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aycuoogiscewnhopd296.gif" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s another type of probe called &lt;em&gt;readiness probe&lt;/em&gt;. It checks if the pod is ready to accept connections. A failed probe does not automatically restart the pod, but it disconnects from the load balancer, preventing users from reaching it. Readiness probes are meant to cope with temporary problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JzRwmv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3xz7ao8ohe68brjazr8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JzRwmv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3xz7ao8ohe68brjazr8.gif" alt="Image description" width="880" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We define probes at the container level, but Kubernetes handles pods instead of containers. This means that all its container probes must pass together for a pod to be considered alive and ready.&lt;/p&gt;

&lt;p&gt;Let’s add a readiness probe that attempts a GET request on port 4567. The probe passes as long as the return code is between 200 and 399.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... and a readiness probe&lt;/span&gt;
        &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;httpGet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4567&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#controlling-access-with-a-pod-network-policy"&gt;
  &lt;/a&gt;
  Controlling access with a pod network policy
&lt;/h3&gt;

&lt;p&gt;Unless stated otherwise, pods in Kubernetes are allowed to send and accept packets to and from anywhere. While it’s true that the pods cannot receive traffic from outside without configuring some kind of endpoint, all pods inside the cluster are allowed free communication. We use &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;pod network policies&lt;/a&gt; to lock down their access.&lt;/p&gt;

&lt;p&gt;Within the cluster, we can define &lt;em&gt;inter-pod&lt;/em&gt; and &lt;em&gt;inter-namespace&lt;/em&gt; policies to isolate pods. From without, we lock down external access with &lt;em&gt;IP-based&lt;/em&gt; policies.&lt;/p&gt;

&lt;p&gt;Our demo does not really need a network policy because we want our pods to be reachable from the Internet. But it’s good practice to make implicit behavior explicit, so we’ll add an “allow all” policy to the pods in the deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NetworkPolicy&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;allow-all&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;podSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;ingress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;egress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;policyTypes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Egress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IP-based policies have some downsides, unfortunately. For one, its implementation depends on network plugins enabled on the cluster. And in many cases, policies might be ignored completely, as not every cloud supports them in the same way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#locking-down-containers-with-a-security-context"&gt;
  &lt;/a&gt;
  Locking down containers with a security context
&lt;/h3&gt;

&lt;p&gt;While network policies secure pods by controlling communications, &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"&gt;&lt;em&gt;security contexts&lt;/em&gt;&lt;/a&gt; define privileges that pods and containers have while running. A security context allows us to run pods with more (or less) capabilities, grant or deny access to files inside, or control which system calls are permitted.&lt;/p&gt;

&lt;p&gt;This is a topic that needs quite a deep understanding of Linux and container internals to use well. We’ll create a basic security context that marks the filesystem read-only and runs the container with a high ID user.  This should be enough to pass Kube-Score.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;        &lt;span class="c1"&gt;# add a security context for the container&lt;/span&gt;
        &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;runAsUser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;runAsGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run Kube-Score once more to ensure no more errors are thrown. You can enable optional tests with &lt;code&gt;--enable-optional-test TEST_ID&lt;/code&gt;, or disable mandatory tests with &lt;code&gt;--ignore-test TEST_ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, commit the file to the repository, so you’re ready for the following section: automating tests with Semaphore CI/CD.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apps/v1/Deployment semaphore-demo-ruby-kubernetes                             ✅
networking.k8s.io/v1/NetworkPolicy allow-all                                  ✅
v1/Service semaphore-demo-ruby-kubernetes-lb                                  ✅
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For reference, the final version of the manifest looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;imagePullSecrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dockerhub&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$DOCKER_USERNAME/semaphore-demo-ruby-kubernetes:$SEMAPHORE_WORKFLOW_ID&lt;/span&gt;

        &lt;span class="c1"&gt;# don't cache images&lt;/span&gt;
        &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Always&lt;/span&gt;

        &lt;span class="c1"&gt;# resource quotas&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;100m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;64Mi"&lt;/span&gt;
          &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;200m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;128Mi"&lt;/span&gt;

        &lt;span class="c1"&gt;# liveness probe&lt;/span&gt;
        &lt;span class="na"&gt;livenessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pgrep&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-f&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;puma&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

        &lt;span class="c1"&gt;# readiness probe&lt;/span&gt;
        &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;httpGet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4567&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;

        &lt;span class="c1"&gt;# security context for the container&lt;/span&gt;
        &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;runAsUser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;runAsGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes-lb&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LoadBalancer&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4567&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;

&lt;span class="c1"&gt;# pod network policy&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NetworkPolicy&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;allow-all&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;podSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;ingress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;egress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;policyTypes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Egress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-manifests-with-cicd"&gt;
  &lt;/a&gt;
  Testing manifests with CI/CD
&lt;/h2&gt;

&lt;p&gt;All that we’ve learned so far was a preparation for this. Our goal now is to incorporate these tools into the CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;You can combine the following steps with the pipeline configured in &lt;a href="https://semaphoreci.com/blog/structure-testing-for-docker-containers"&gt;Structure Testing for Docker Containers&lt;/a&gt;, which showed how to test containers before deployment. I’ll assume you have some familiarity with how Semaphore works. Check out our &lt;a href="https://docs.semaphoreci.com/guided-tour/getting-started/"&gt;beginner guide&lt;/a&gt; if that’s not the case.&lt;/p&gt;

&lt;p&gt;This is where we are now. A pipeline that builds a Docker image, tests it, and deploys it with Kubernetes. The demonstration code can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/semaphoreci-demos/semaphore-demo-ruby-kubernetes"&gt;semaphore-demo-ruby-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3f-Y9g8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unfl0ekep2i6s08oejao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3f-Y9g8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unfl0ekep2i6s08oejao.png" alt="Image description" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manifest validation should take place before deployment. The first pipeline does &lt;a href="https://semaphoreci.com/continuous-integration"&gt;continuous integration&lt;/a&gt;, the second builds the Docker image. Deployment happens in the last pipeline, so we’ll add manifest validation before deploying to Kubernetes.&lt;/p&gt;

&lt;p&gt;Open the workflow editor and position yourself in the deployment pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sAbIfRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2noqd13w9s70m6689tg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sAbIfRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2noqd13w9s70m6689tg3.png" alt="Image description" width="880" height="185"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new block and remove all its dependencies. We’ll configure two jobs. The first one installs Kubeconform, clones your repository with &lt;code&gt;checkout&lt;/code&gt;, and runs the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://github.com/yannh/kubeconform/releases/download/v0.4.12/kubeconform-linux-amd64.tar.gz
&lt;span class="nb"&gt;tar &lt;/span&gt;xf kubeconform-linux-amd64.tar.gz
&lt;span class="nb"&gt;sudo cp &lt;/span&gt;kubeconform /usr/local/bin
checkout
kubeconform &lt;span class="nt"&gt;--summary&lt;/span&gt; deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second job does the same with Kube-Score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://github.com/zegl/kube-score/releases/download/v1.12.0/kube-score_1.12.0_linux_amd64.tar.gz
&lt;span class="nb"&gt;tar &lt;/span&gt;xf kube-score_1.12.0_linux_amd64.tar.gz
&lt;span class="nb"&gt;sudo cp &lt;/span&gt;kube-score /usr/local/bin
checkout
kube-score score deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we want to stop deployment if either of the jobs fails. Click on the “Deploy to Kubernetes” block and add the new test block as a dependency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrLgBFSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4nu94ouc1iwntc6u9lp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrLgBFSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4nu94ouc1iwntc6u9lp.png" alt="Image description" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before trying out the pipeline, review the Kubernetes deployment job. The full detail on how it works is explained in &lt;a href="https://semaphoreci.com/blog/guide-continuous-deployment-kubernetes"&gt;Continuous Deployment with Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Run the workflow&lt;/strong&gt; and &lt;strong&gt;Start&lt;/strong&gt;. Wait until the CI and Docker build pipelines end before trying out the deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw79i0Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqbugpu5jiwumanauk2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw79i0Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqbugpu5jiwumanauk2.png" alt="Image description" width="880" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Deploy to Kubernetes&lt;/strong&gt; to start the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Tv4ESm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wact41oytym0pv34sigm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Tv4ESm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wact41oytym0pv34sigm.png" alt="Image description" width="880" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Being able to deploy any day of the week safely is a powerful thing. But to do it with confidence requires good testing in place at every stage.&lt;/p&gt;

&lt;p&gt;Interested in Kubernetes? Read these next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/kubernetes-vs-docker"&gt;Kubernetes vs Docker: Understanding Containers in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/all-roads-lead-to-kubernetes-with-jerome-petazzoni"&gt;All Roads Lead to Kubernetes with Jérôme Petazzoni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://semaphoreci.com/blog/nodejs-digitalocean-kubernetes"&gt;How To Build and Deploy a Node.js Application To DigitalOcean Kubernetes Using CI/CD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://semaphoreci.com/blog/continuous-delivery-google-kubernetes"&gt;How to Release Faster with Continuous Delivery for Google Kubernetes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>security</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Web Dev Journey</title>
      <author>Muhammad Alam</author>
      <pubDate>Mon, 08 Nov 2021 13:44:52 +0000</pubDate>
      <link>https://dev.to/alomoadev/hello-world-7ge</link>
      <guid>https://dev.to/alomoadev/hello-world-7ge</guid>
      <description>&lt;h2&gt;
  &lt;a href="#to-be-honest"&gt;
  &lt;/a&gt;
  To Be Honest...
&lt;/h2&gt;

&lt;p&gt;To be honest, I decided that I wanted to be a web developer after graduating. During my time in uni, I didn't really have an idea of what I wanted to do after graduation, so I just went through the motions of uni life without much of a clue. Not having an idea was a massive problem, so I spoke to a friend of mine and she convinced me to walk the path of a web developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#university"&gt;
  &lt;/a&gt;
  University?
&lt;/h2&gt;

&lt;p&gt;Since my web dev journey began after graduation, it might look like university wasn't worth it for me. Well it was, and it wasn't. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#was-worth-it"&gt;
  &lt;/a&gt;
  Was Worth It
&lt;/h3&gt;

&lt;p&gt;University was worth it because it structurally introduced me to the branches of Computer Science (Software Engineering, Database systems, User-Centered Designs, Network Management, Cyber Security). It allowed me the opportunity to test the waters of each branch before deciding, granted I did not jump into any pools.&lt;/p&gt;

&lt;p&gt;I learnt a few programming languages during my time in university, went through programming paradigms like object-oriented programming and procedural programming. All this made it significantly easier to pick up new languages as I had to with JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wasnt-worth-it"&gt;
  &lt;/a&gt;
  Wasn't Worth It
&lt;/h3&gt;

&lt;p&gt;There are a lot of opportunities that are available in Universities. Hackathons, career events, career support, events, societies, opportunities given by lecturers, what have you. All these opportunities are great ways to gain experience, unlock more doors, network, the list goes on. Unfortunately for me, I did not take these opportunities which in my eyes was a form of self-sabotage. Pretty much a frog in a well sort of situation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue...
&lt;/h2&gt;

&lt;p&gt;The issue was I had pretty much 0 experience in web development. I faintly remember a web dev fundamentals module I did back in year one but it became a fuzzy memory. Whelp, no time like the present! I got stuck into the web dev courses in &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive Web Design&lt;/li&gt;
&lt;li&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;
&lt;li&gt;Front End Development Libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These courses taught me the basics of HTML, CSS, JavaScript, React, and other libraries &amp;amp; frameworks. They even had projects to complete at the end of every course, completed those with some degree of success (baby steps!). &lt;/p&gt;

&lt;p&gt;freeCodeCamp was great at easing me into the world that is web dev, I recommend it for anyone starting out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After...
&lt;/h2&gt;

&lt;p&gt;After completing the web courses in freeCodeCamp I bounced around free/paid courses, learning what I could. Some courses worthy of note were the &lt;a href="https://fullstackui.com/"&gt;Full Stack UI&lt;/a&gt; course, a bit of &lt;a href="https://svelte.dev/tutorial/basics"&gt;Svelte&lt;/a&gt;, and the NodeJS course from &lt;br&gt;
 &lt;a href="https://www.udemy.com/course/the-complete-nodejs-developer-course-2/"&gt;Udemy&lt;/a&gt; made by the amazing Andrew Mead. Why learn back-end? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because every front-end developer should have some experience with back-end for their personal projects (and vice versa).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AND AFTER THAT, I got stuck into a 100 days of daily UI challenge which involved designing one UI every day, based on a &lt;a href="https://www.dailyui.co/"&gt;prompt&lt;/a&gt;, for 100 days. That took a while. Some of my "best" work can be seen over at &lt;a href="https://www.polywork.com/alomoa/collections/1531"&gt;Polyworks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#well"&gt;
  &lt;/a&gt;
  Well...
&lt;/h2&gt;

&lt;p&gt;So that's how I started my web dev journey. I skipped out on all the issues regarding procrastinating, lack of motivation, what have you. Perhaps that'll be for another time. &lt;/p&gt;

&lt;p&gt;Presently I'm on day 69 of a 100 days of Threejs challenge. In this challenge, I have committed to learning the &lt;a href="https://threejs.org/"&gt;Threejs&lt;/a&gt; library every day for 100 days. I've already gone through the basics of Threejs (and blender) with the help of Bruno Simon and his course, &lt;a href="https://threejs-journey.com/"&gt;Threejs Journey&lt;/a&gt;. So far I've made a &lt;a href="https://alomoa.github.io/Portal-Scene/"&gt;portal scene&lt;/a&gt; and a &lt;a href="https://alomoa.github.io/Bedroom/"&gt;model of my room&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;My next project involves going back to secondary school level maths to help me understand the mystery that are shaders. &lt;br&gt;
Till then!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Vue.js &amp; Semantic UI: Design Cool Sign Up Form Faster</title>
      <author>Raja Tamil</author>
      <pubDate>Mon, 08 Nov 2021 13:42:18 +0000</pubDate>
      <link>https://dev.to/hirajatamil/vuejs-semantic-ui-design-cool-sign-up-form-faster-4jm2</link>
      <guid>https://dev.to/hirajatamil/vuejs-semantic-ui-design-cool-sign-up-form-faster-4jm2</guid>
      <description>&lt;p&gt;Designing a signup form from scratch in Vue.js can sometimes be hard, but with the help of the Semantic UI CSS framework, we can create forms not only fast but also look professional.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=%20tVklAoNcPNg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wXo-uu33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/tVklAoNcPNg/0.jpg" alt="IMAGE ALT TEXT HERE" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the sign-up form is centered on the browser viewport and it has a header and three input fields, as well as a button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isbSRWcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/Screen-Shot-2020-11-09-at-3.19.02-PM-2048x1280.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isbSRWcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/Screen-Shot-2020-11-09-at-3.19.02-PM-2048x1280.png" alt="Alt text of image" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part #1: Vue.js &amp;amp; Semantic UI: Design Cool Sign Up Form Faster (you’re here)&lt;br&gt;
Part #2: &lt;a href="https://softauthor.com/vue-js-form-validation-with-options-api/"&gt;Vue JS Form Validation Using Options API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I designed this with the combination of flexbox and the Semantic UI CSS framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9jVm_ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/flexbox-semanitui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9jVm_ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/flexbox-semanitui.png" alt="Alt text of image" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without further ado let’s go ahead and build this!&lt;/p&gt;

&lt;p&gt;The first step is to create a Signup view and the route for it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; &lt;br&gt;
&lt;a href="https://softauthor.com/vue-js-form-validation-with-options-api/"&gt;&lt;em&gt;Vue JS Form Validation Using Options API&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#create-a-signup-component-and-the-route-for-it"&gt;
  &lt;/a&gt;
  Create a Signup Component And The Route For It
&lt;/h3&gt;

&lt;p&gt;The signup view is going to be the page based component, so create a file called SignUp.vue inside the page folder like so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCI4CC6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/Screen-Shot-2020-11-09-at-3.24.50-PM-560x1024.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCI4CC6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/Screen-Shot-2020-11-09-at-3.24.50-PM-560x1024.png" alt="Alt text of image" width="560" height="1024"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To show this component on the browser we need to create a route for it.&lt;/p&gt;

&lt;p&gt;Go to the index.js file inside the router folder.&lt;/p&gt;

&lt;p&gt;Import the SignUp Vue file at the top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/pages/SignUp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in here, create a new Javascript object inside the routes array which will have two properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;component
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first property is the path which is where I am going to create the route URL for signup…in this case ‘/signup’.&lt;/p&gt;

&lt;p&gt;Now I want to show the sign-up component when a user goes to the signup path.&lt;/p&gt;

&lt;p&gt;So, assign the sign up variable to the component property.&lt;/p&gt;

&lt;p&gt;This SignUp variable should be matched to the variable that we declared when importing the sign up component.&lt;/p&gt;

&lt;p&gt;Let’s navigate to the URL on the browser – and it works as expected. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9t2NMTh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/Screen-Shot-2020-11-09-at-3.29.40-PM-2048x1280.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9t2NMTh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2020/11/Screen-Shot-2020-11-09-at-3.29.40-PM-2048x1280.png" alt="Alt text of image" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-semantic-ui-css-framework"&gt;
  &lt;/a&gt;
  Install Semantic UI CSS Framework
&lt;/h3&gt;

&lt;p&gt;The next step is to install a Semantic UI CSS framework for the project.&lt;/p&gt;

&lt;p&gt;We can use Semantic UI CSS in two different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One is using the CDN format which is just grabbing the CSS link from the semantic website and pasting it in between the head tag in the index.html file.&lt;/li&gt;
&lt;li&gt;The second option is to use the Semantic UI NPM package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to be using the second option to install the Semantic UI Framework.&lt;/p&gt;

&lt;p&gt;This will be a two step process.&lt;/p&gt;

&lt;p&gt;Let’s do the first step, which is installing the npm package into the project.&lt;/p&gt;

&lt;p&gt;Open up the Terminal and navigate to the project folder if you are not already there.&lt;/p&gt;

&lt;p&gt;Then run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;semantic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it’s done, the next step is to import it into the project.&lt;/p&gt;

&lt;p&gt;Go to the  main.js and add the following code before the vue instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;semantic-ui-css/semantic.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#center-the-signup-form"&gt;
  &lt;/a&gt;
  Center The Sign-up Form
&lt;/h3&gt;

&lt;p&gt;Next, I am going to center the form on the browser viewport horizontally and vertically.&lt;/p&gt;

&lt;p&gt;In the SignUp Vue file, get rid of the h1 tags and create a section tag which will be the main container. As you know, all of the code will go inside this element.&lt;/p&gt;

&lt;p&gt;Create a signup form container element inside here.&lt;/p&gt;

&lt;p&gt;In there, create three Semantic UI CSS classes which are…UI segment and grey.  UI and segment classes create nice thin rounded borders around the form container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ui segment grey signup-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The grey class creates a thick grey border at the top of the container.&lt;/p&gt;

&lt;p&gt;Then come down after the ending template tag and declare starting and ending style tags.&lt;/p&gt;

&lt;p&gt;Then, give a sign up form container width to 450pxas well as center any text inside using the text-align property.&lt;/p&gt;

&lt;p&gt;Let’s make it centered horizontally and vertically to the browser viewport using flex box.&lt;/p&gt;

&lt;p&gt;As you know, the first thing we need to do is make sure the sign up form container’s parent element is in full screen. That is because in flex box, you add CSS rules to the parent element to position the child element.&lt;/p&gt;

&lt;p&gt;Let’s stretch the parent’s element height, which is section, to the browser viewport height.&lt;/p&gt;

&lt;p&gt;Add background color to light grey #ececec as well so we can see that it fits the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ececec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.signup-form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can easily center the sign up form using just three flex box CSS rules to the section parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://softauthor.com/vue-semantic-ui-design-cool-sign-up-form-faster/"&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
