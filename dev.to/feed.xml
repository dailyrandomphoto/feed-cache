<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a custom hook for Show/Hide Password Visibility in React Native</title>
      <author>Aman Mittal</author>
      <pubDate>Mon, 13 Dec 2021 15:25:20 +0000</pubDate>
      <link>https://dev.to/amanhimself/create-a-custom-hook-for-showhide-password-visibility-in-react-native-10oo</link>
      <guid>https://dev.to/amanhimself/create-a-custom-hook-for-showhide-password-visibility-in-react-native-10oo</guid>
      <description>&lt;p&gt;Building login and signup forms in a React Native app comprise input fields and buttons. One field that you will often find yourself adding to these forms is the password field. This password field is composed of using React Native's &lt;code&gt;TextInput&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The common behavior of this field is to hide a user's password behind obscure characters.&lt;/p&gt;

&lt;p&gt;Take a look at an example of the &lt;code&gt;TextInput&lt;/code&gt; component that is used to create a password field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;autoCapitalize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;autoCorrect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;textContentType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;secureTextEntry&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;enablesReturnKeyAutomatically&lt;/span&gt;
          &lt;span class="nx"&gt;onChangeText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#F5EEDC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingHorizontal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d7d7d7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;90%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses the &lt;code&gt;secureTextEntry&lt;/code&gt; prop such that when a text value is entered in the input field, it is unclear what is being entered in that field.&lt;/p&gt;

&lt;p&gt;Here is the output of the above snippet on a device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcjOgSXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/kn0yv9z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcjOgSXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/kn0yv9z.gif" alt="ss1" width="308" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, giving an option to a user to let them see the current value they enter could lead to a good experience and might be necessary in some cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-or-hide-password-visibility-hook"&gt;
  &lt;/a&gt;
  Show or Hide Password Visibility Hook
&lt;/h2&gt;

&lt;p&gt;To add the ability to show or hide the password field's visibility, let's create a custom hook in a new file called &lt;code&gt;useTogglePasswordVisibility.js.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Start by importing the &lt;code&gt;useState&lt;/code&gt; hook from React library. You will need to create two different state variables to toggle between the field's visibility and change the icon.&lt;/p&gt;

&lt;p&gt;Then define a function called &lt;code&gt;useTogglePasswordVisibility&lt;/code&gt;. Inside this function, create two new state variables. The first one is called &lt;code&gt;passwordVisibility&lt;/code&gt;. Its initial value is set to boolean &lt;code&gt;true&lt;/code&gt;. The reason is that this variable will be the value of the prop &lt;code&gt;secureTextEntry&lt;/code&gt; on the &lt;code&gt;TextInput&lt;/code&gt; component. You would want to hide the password field initially when the user enters the password in the input field.&lt;/p&gt;

&lt;p&gt;The second state variable defined is called &lt;code&gt;rightIcon&lt;/code&gt;. It has a default value of &lt;code&gt;eye&lt;/code&gt;. This value depends on the Icon Library you're using in your React Native app. For this example, I'm using &lt;strong&gt;MaterialCommunityIcons&lt;/strong&gt; from &lt;a href="https://docs.expo.dev/guides/icons/"&gt;Expo Vector Icons&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add a method called &lt;code&gt;handlePasswordVisibility&lt;/code&gt; that will allow the app user to toggle the password field's visibility between shown and hidden state.&lt;/p&gt;

&lt;p&gt;Lastly, do not forget to return all the variables and the handler method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye-off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye-off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setRightIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setPasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-the-password-visibility-hook"&gt;
  &lt;/a&gt;
  Use the Password Visibility Hook
&lt;/h2&gt;

&lt;p&gt;Start by updating import statements in the &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Pressable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@expo/vector-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks/useTogglePasswordVisibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, access the required variables and method from the &lt;code&gt;useTogglePasswordVisibility&lt;/code&gt; hook. Add the following line at the top of the &lt;code&gt;App&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modify the &lt;code&gt;TextInput&lt;/code&gt; component's prop. Make sure to add the &lt;code&gt;passwordVisibility&lt;/code&gt; as the value to the &lt;code&gt;secureTextEntry&lt;/code&gt; prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;
  &lt;span class="nx"&gt;secureTextEntry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ... rest of the props remain unchanged&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;View&lt;/code&gt; component that wraps the &lt;code&gt;TextInput&lt;/code&gt;, add a button using the &lt;code&gt;Pressable&lt;/code&gt; component. This button will allow the user to toggle between the hidden and shown state of the password field.&lt;/p&gt;

&lt;p&gt;This button wraps the icon component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* After TextInput component */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Pressable&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#232323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Pressable&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all! Here is the output after this step:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0hcKFd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/rTNH2Ud.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0hcKFd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/rTNH2Ud.gif" alt="ss2" width="308" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the complete code for the &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Pressable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@expo/vector-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks/useTogglePasswordVisibility&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;useTogglePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextInput&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;autoCapitalize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;autoCorrect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;textContentType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;secureTextEntry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;enablesReturnKeyAutomatically&lt;/span&gt;
          &lt;span class="nx"&gt;onChangeText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Pressable&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordVisibility&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MaterialCommunityIcons&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rightIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#232323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Pressable&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#F5EEDC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingHorizontal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d7d7d7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;inputField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;90%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://github.com/amandeepmittal/react-native-examples/tree/master/custom-hook-password-toggle"&gt;Source code at this GitHub repo&lt;/a&gt;&lt;/em&gt; 🐙&lt;/li&gt;
&lt;li&gt;Check out &lt;a href="https://amanhimself.dev/"&gt;other blog posts&lt;/a&gt; I wrote on React Native and Expo ✍️&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/amanhimself"&gt;Say hi on Twitter&lt;/a&gt; 👋&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>mobile</category>
      <category>reactnative</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cloud computing quickstart</title>
      <author>Barbara</author>
      <pubDate>Mon, 13 Dec 2021 15:18:56 +0000</pubDate>
      <link>https://dev.to/barbara/cloud-computing-quickstart-3pk4</link>
      <guid>https://dev.to/barbara/cloud-computing-quickstart-3pk4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h2&gt;

&lt;p&gt;Cloud computing is the use of a network of remote servers hosted on the internet to store, manage and process data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no need to invest in hardware upfront&lt;/li&gt;
&lt;li&gt;rapid provisioning of resources&lt;/li&gt;
&lt;li&gt;provides efficient global access through deployments in different regions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud providers are Amazon, Microsoft, Google, Alibaba, Oracle and IBM. As Amazon is the biggest one, we are going to get an overview to get the basics needed for data engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-amazon-web-services"&gt;
  &lt;/a&gt;
  AWS - Amazon Web Services
&lt;/h2&gt;

&lt;p&gt;AWS offers more than 140 services for computation, storage, databases, networking and development tools. &lt;br&gt;
The services can be accessed in 3 ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS MGMT console: &lt;a href="https://console.aws.amazon.com/"&gt;https://console.aws.amazon.com/&lt;/a&gt; - The webapp&lt;/li&gt;
&lt;li&gt;AWS CLI: &lt;a href="https://aws.amazon.com/cli/"&gt;https://aws.amazon.com/cli/&lt;/a&gt; - The command line interface&lt;/li&gt;
&lt;li&gt;SDK's: &lt;a href="https://aws.amazon.com/tools/"&gt;https://aws.amazon.com/tools/&lt;/a&gt; - Software development kits. Available in a lot of programming languages. The advantage of using IaC - Infrastructure as code are &lt;em&gt;sharing&lt;/em&gt;, &lt;strong&gt;reproducibility&lt;/strong&gt;, &lt;strong&gt;multiple deployments&lt;/strong&gt; and &lt;strong&gt;maintainability&lt;/strong&gt;. For development with python we can use the famous &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/index.html"&gt;boto3&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As there are over hundred services available, you might be overwhelmed at first sight. In order to make the start a bit easier we create a glossary with the services you will need for data engineering and the according links to their documentation. As there are a lot more services than the ones mentioned below, feel free to dive deeper into the AWS documentation &lt;a href="https://docs.aws.amazon.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iam-identity-and-access-management"&gt;
  &lt;/a&gt;
  IAM - &lt;a href="https://aws.amazon.com/iam/"&gt;Identity and Access Management&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#user"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html"&gt;User&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A user is an entity, person or application that interacts with AWS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#role"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html"&gt;Role&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A role can be assigned to anyone who needs it. It is not uniquely connected to an entity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vpc-virtual-private-cloud"&gt;
  &lt;/a&gt;
  VPC - &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html"&gt;Virtual Private Cloud&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enables to launch AWS resources in a virtual network defined by your needs. It is a data center with the benefits of cloud infrastructure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#s3-simple-storage-service"&gt;
  &lt;/a&gt;
  S3 - &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"&gt;Simple Storage Service&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It can store, retrieve and access any amount of objects at any time in buckets. Depending on the need there are a lot of different &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html"&gt;storage classes&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#s3-buckets"&gt;
  &lt;/a&gt;
  S3 &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html"&gt;Buckets&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A bucket is a container for objects. There are a lot of useful properties like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Versioning: keep multiple versions of an object in the same bucket&lt;/li&gt;
&lt;li&gt;Static website hosting: a very cost-effective way to serve static web content&lt;/li&gt;
&lt;li&gt;Requester pays: makes the requester pay for requests and data transfer costs&lt;/li&gt;
&lt;li&gt;Permission management&lt;/li&gt;
&lt;li&gt;Data management: create lifecycle rules, transitioning data,  archive or delete data&lt;/li&gt;
&lt;li&gt;Metrics for usage, request, data transfer, bucket size, number of objects&lt;/li&gt;
&lt;li&gt;Access points: Create access points to share the bucket at scale&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#s3-objects"&gt;
  &lt;/a&gt;
  S3 &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingObjects.html"&gt;Objects&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;An object is a file and any meta that describes that file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ec2-elastic-cloud-compute"&gt;
  &lt;/a&gt;
  EC2 - &lt;a href="https://aws.amazon.com/ec2/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&amp;amp;ec2-whats-new.sort-order=desc"&gt;Elastic Cloud Compute&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A web service that provides secure, resizable compute capacity in the cloud. If we want to use the cloud self-managed we can use EC2 + Postgresql, EC2 +  Unix FS instead of Amazon RDS or Amazon DynamoDB and Amazon S3. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rds-relational-database-service"&gt;
  &lt;/a&gt;
  RDS - &lt;a href="https://aws.amazon.com/rds/"&gt;Relational Database Service&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A relational database service that manages common database administration tasks, resizes automatically, and is cost-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redshift"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.aws.amazon.com/redshift/latest/mgmt/welcome.html"&gt;Redshift&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;it is a column-oriented storage&lt;/li&gt;
&lt;li&gt;MPP (massive parallel processing) database&lt;/li&gt;
&lt;li&gt;good to store OLAP workloads, summing over a long history&lt;/li&gt;
&lt;li&gt;internally it is a modified postgresql&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#iac-infrastructure-as-code-example-with-boto3"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/BarbaraJoebstl/data-engineering-nd/blob/master/data-warehouse/lesson3-cloud-computing/IaC_Redshift.ipynb"&gt;IaC - Infrastructure as Code Example with boto3&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>infrastructureascode</category>
      <category>redshift</category>
    </item>
    <item>
      <title>React-Calendar with Custom Styles</title>
      <author>Kenny Fitzgerald (he/him)</author>
      <pubDate>Mon, 13 Dec 2021 14:48:11 +0000</pubDate>
      <link>https://dev.to/fitzgeraldkd/react-calendar-with-custom-styles-30c9</link>
      <guid>https://dev.to/fitzgeraldkd/react-calendar-with-custom-styles-30c9</guid>
      <description>&lt;p&gt;I was looking for a calendar to use in a React project and found the &lt;a href="https://www.npmjs.com/package/react-calendar"&gt;React-Calendar&lt;/a&gt; component. It has all the functionality that I was looking for and saves me a lot of time from building it out on my own. It can be controlled with state so that the selected date(s) can affect what displays in the app. I wanted to customize its styling to fit my project, so here's what I came up with!&lt;/p&gt;

&lt;p&gt;The examples here are based on the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react (v17.0.2)&lt;/li&gt;
&lt;li&gt;react-calendar (v3.5.0)&lt;/li&gt;
&lt;li&gt;styled-components (v5.3.3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#initial-styles"&gt;
  &lt;/a&gt;
  Initial Styles
&lt;/h2&gt;

&lt;p&gt;I will be using the &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; package to add styles to my project, but this could all be done in a CSS file if that's your preferred method. Here's my starter code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-calendar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CalendarContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Calendar&lt;/span&gt; &lt;span class="na"&gt;calendarType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'US'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CalendarContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  max-width: 600px;
  margin: auto;
  margin-top: 20px;
  background-color: #d4f7d4;
  padding: 10px;
  border-radius: 3px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have some styles started for the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that holds the calendar just so the calendar is not floating in the void.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I also applied the &lt;code&gt;calendarType&lt;/code&gt; property to the calendar that sets the first day of the week to Sunday. This is how I'm used to seeing calendars, but by leaving this property off the week should start with Monday.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's what it looks like before any styling has been applied to the &lt;code&gt;&amp;lt;Calendar /&amp;gt;&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOtH8EK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2R7f05L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOtH8EK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2R7f05L.png" alt="React-Calendar with no styling" width="760" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that this component is built with a lot of button components. Before we go through applying our own styles, let's look at a stylesheet the component is packaged with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#default-stylesheet"&gt;
  &lt;/a&gt;
  Default Stylesheet
&lt;/h2&gt;

&lt;p&gt;The react-calendar component has the option to import a default stylesheet. It can be imported by adding this line to the top of your file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-calendar/dist/Calendar.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the calendar looks like with these styles:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQjc4Htl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1phKNfG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQjc4Htl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1phKNfG.png" alt="React-Calendar with default styling" width="760" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks much better! However I want to really make it my own for and have control over how it looks. This way I can make sure its appearance is consistent with the rest of my app. Luckily we can add our own styles!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-styling"&gt;
  &lt;/a&gt;
  Custom Styling
&lt;/h2&gt;

&lt;p&gt;Since we can nest selectors with styled-components (similar to SCSS), we can add all of our custom styles into the &lt;code&gt;CalendarContainer&lt;/code&gt; styled component. React-Calendar creates elements with certain classes already applied, so we can use those as our selectors. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation"&gt;
  &lt;/a&gt;
  Navigation
&lt;/h3&gt;

&lt;p&gt;Let's start by updating the navigation. Here's what I want to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have the navigation take the full width of the calendar&lt;/li&gt;
&lt;li&gt;Make the text in the center button bold&lt;/li&gt;
&lt;li&gt;Make the arrow buttons larger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's how we can do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ... */

  /* ~~~ navigation styles ~~~ */
  .react-calendar__navigation {
    display: flex;

    .react-calendar__navigation__label {
      font-weight: bold;
    }

    .react-calendar__navigation__arrow {
      flex-grow: 0.333;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3wo7OEDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUPumMu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3wo7OEDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUPumMu.png" alt="React-Calendar with navigation styled" width="760" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#labels"&gt;
  &lt;/a&gt;
  Labels
&lt;/h3&gt;

&lt;p&gt;Next I want to center the labels for the days of the week:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ~~~ navigation styles ~~~ */
  /* ... */

  /* ~~~ label styles ~~~ */
  .react-calendar__month-view__weekdays {
    text-align: center;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OewACN7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nzNYIXF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OewACN7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nzNYIXF.png" alt="React-Calendar with labels styled" width="760" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buttons"&gt;
  &lt;/a&gt;
  Buttons
&lt;/h3&gt;

&lt;p&gt;The layout is looking good, but we still need to apply some styles to the buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ~~~ navigation styles ~~~ */
  /* ~~~ label styles ~~~ */
  /* ... */

  /* ~~~ button styles ~~~ */
  button {
    margin: 3px;
    background-color: #6f876f;
    border: 0;
    border-radius: 3px;
    color: white;
    padding: 5px 0;

    &amp;amp;:hover {
      background-color: #556b55;
    }

    &amp;amp;:active {
      background-color: #a5c1a5;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9mF2Kxyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/f2VHrxP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mF2Kxyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/f2VHrxP.png" alt="React-Calendar with buttons styled" width="760" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The buttons look a little better, but now the layout is all messed up! There are only six days in a row now. Let's fix that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grid"&gt;
  &lt;/a&gt;
  Grid
&lt;/h3&gt;

&lt;p&gt;So by default the views have the style &lt;code&gt;display: flex;&lt;/code&gt; applied, which unfortunately leads to items spilling over to other rows instead of ensuring that there are always 7 days in a week. Luckily we can overwrite this behavior by using &lt;code&gt;grid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ~~~ navigation styles ~~~ */
  /* ~~~ label styles ~~~ */
  /* ~~~ button styles ~~~ */
  /* ... */

  /* ~~~ day grid styles ~~~ */
  .react-calendar__month-view__days {
    display: grid !important;
    grid-template-columns: 14.2% 14.2% 14.2% 14.2% 14.2% 14.2% 14.2%; 

    .react-calendar__tile {
      max-width: initial !important;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jc-P2ZXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8t6mFU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jc-P2ZXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8t6mFU.png" alt="React-Calendar with grid display" width="760" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome, by creating a grid with seven columns (each at 14.2%), we're back to seven days a week!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that some elements that react-calendar creates have styles applied directly to the element. To overwrite these, we need the &lt;code&gt;!important&lt;/code&gt; rule so our class selectors can take precedence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#neighboring-months-and-weekends"&gt;
  &lt;/a&gt;
  Neighboring Months and Weekends
&lt;/h3&gt;

&lt;p&gt;The days of neighboring months look identical to the days of the active month right now, but we can change that as well. We can also change styles of days on the weekend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ~~~ navigation styles ~~~ */
  /* ~~~ label styles ~~~ */
  /* ~~~ button styles ~~~ */
  /* ~~~ day grid styles ~~~ */
  /* ... */

  /* ~~~ neighboring month &amp;amp; weekend styles ~~~ */
  .react-calendar__month-view__days__day--neighboringMonth {
    opacity: 0.7;
  }
  .react-calendar__month-view__days__day--weekend {
    color: #dfdfdf;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_NqALkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jM2jT7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_NqALkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jM2jT7v.png" alt="React-Calendar with neighboring month and weekend days styled" width="760" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#active-day"&gt;
  &lt;/a&gt;
  Active Day
&lt;/h3&gt;

&lt;p&gt;With React-Calendar, when the user clicks on a day it is set as the active day. However there's no way for the user to tell which day is currently selected yet, so let's address that now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ~~~ navigation styles ~~~ */
  /* ~~~ label styles ~~~ */
  /* ~~~ button styles ~~~ */
  /* ~~~ day grid styles ~~~ */
  /* ~~~ neighboring month &amp;amp; weekend styles ~~~ */
  /* ... */

  /* ~~~ active day styles ~~~ */
  .react-calendar__tile--range {
      box-shadow: 0 0 6px 2px black;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_skVQHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/hdjA962.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_skVQHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/hdjA962.png" alt="React-Calendar with active day styled" width="760" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-views"&gt;
  &lt;/a&gt;
  Other Views
&lt;/h3&gt;

&lt;p&gt;Our month view is looking good, but what about the other views? Let's take a look at the year view:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCOdYBw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/76QTPGA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCOdYBw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/76QTPGA.png" alt="React-Calendar year view before styling" width="760" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the year view could use some improvement. Since we added our own styles to the buttons, some buttons are being pushed to the next row. Similar issues occur in the decade and century views too. Luckily we can fix this like we did before by using &lt;code&gt;grid&lt;/code&gt;. We'll show the list of months in a grid of 3 columns by 4 rows. The 10 buttons in the decade and century views will be in a grid of 5 columns by 2 rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CalendarContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  /* ~~~ container styles ~~~ */
  /* ~~~ navigation styles ~~~ */
  /* ~~~ label styles ~~~ */
  /* ~~~ button styles ~~~ */
  /* ~~~ day grid styles ~~~ */
  /* ~~~ neighboring month &amp;amp; weekend styles ~~~ */
  /* ~~~ active day styles ~~~ */
  /* ... */

  /* ~~~ other view styles ~~~ */
  .react-calendar__year-view__months, 
  .react-calendar__decade-view__years, 
  .react-calendar__century-view__decades {
    display: grid !important;
    grid-template-columns: 20% 20% 20% 20% 20%;

    &amp;amp;.react-calendar__year-view__months {
      grid-template-columns: 33.3% 33.3% 33.3%;
    }

    .react-calendar__tile {
      max-width: initial !important;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9pmoyqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wPAGdiQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9pmoyqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wPAGdiQ.png" alt="React-Calendar year view after styling" width="760" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there we go! A React-Calendar component styled with the help of styled-components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's really easy to change the styling of the React-Calendar component, you just need to know which class selectors to use. The styles I've put together here are just one way to go about it. Once all the selectors and styles are in place, it's much easier to play around and determine what suits your project.&lt;/p&gt;

&lt;p&gt;If you want to interact with the app built out for this blog post, it is available on &lt;a href="https://github.com/fitzgeraldkd/blog-posts/tree/main/react-calendar-styling/react-calendar-demo"&gt;GitHub&lt;/a&gt;. The file where all the styles are applied can be found &lt;a href="https://github.com/fitzgeraldkd/blog-posts/blob/main/react-calendar-styling/react-calendar-demo/src/App.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also have very similar styles applied to this component in an app I am currently building out, you can &lt;a href="https://applitracker.netlify.app/"&gt;check that out here&lt;/a&gt; as well if you're interested. The app is still being developed and you'll need to sign up to see the calendar, so here's a screenshot of what it currently looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BuxIfPLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H175PmF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BuxIfPLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H175PmF.png" alt="AppliTracker demo with calendar" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Absolute vs Relative Imports in Python</title>
      <author>cloudytech147</author>
      <pubDate>Mon, 13 Dec 2021 14:33:55 +0000</pubDate>
      <link>https://dev.to/cloudytech147/absolute-vs-relative-imports-in-python-3oap</link>
      <guid>https://dev.to/cloudytech147/absolute-vs-relative-imports-in-python-3oap</guid>
      <description>&lt;h2&gt;
  &lt;a href="#absolute-imports"&gt;
  &lt;/a&gt;
  Absolute Imports
&lt;/h2&gt;

&lt;p&gt;You've found a workable pace on the best way to compose import explanations and how to style them like a master. Presently it's an ideal opportunity to get familiar with somewhat more with regards to outright imports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Edt2hgoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp9ecqrc93t6n6jbw09j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Edt2hgoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp9ecqrc93t6n6jbw09j.png" alt="Absolute vs Relative Imports" width="649" height="276"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A flat out import determines the asset to be imported utilizing its full way from the venture's root organizer.&lt;/p&gt;

&lt;p&gt;Syntax and Practical Examples&lt;br&gt;
Let’s say you have the following directory structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;└── project
    ├── package1
    │   ├── module1.py
    │   └── module2.py
    └── package2
        ├── __init__.py
        ├── module3.py
        ├── module4.py
        └── subpackage1
            └── module5.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s a directory, project, which contains two sub-directories, package1 and package2. The package1 directory has two files, module1.py and module2.py.&lt;/p&gt;

&lt;p&gt;The package2 directory has three files: two modules, module3.py and module4.py, and an initialization file, &lt;strong&gt;init&lt;/strong&gt;.py. It also contains a directory, subpackage, which in turn contains a file, module5.py.&lt;/p&gt;

&lt;p&gt;Let’s assume the following in this &lt;a href="https://www.techgeekbuzz.com/absolute-vs-relative-imports-in-python/"&gt;Absolute vs Relative Imports in Python&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;package1/module2.py contains a function, function1.&lt;br&gt;
package2/&lt;strong&gt;init&lt;/strong&gt;.py contains a class, class1.&lt;br&gt;
package2/subpackage1/module5.py contains a function, function2.&lt;/p&gt;

&lt;p&gt;The following are practical examples of absolute imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from package1 import module1
from package1.module2 import function1
from package2 import class1
from package2.subpackage1.module5 import function2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pros-and-cons-of-absolute-imports"&gt;
  &lt;/a&gt;
  Pros and Cons of Absolute Imports
&lt;/h3&gt;

&lt;p&gt;Outright imports are favoured in light of the fact that they are very clear and direct. It is not difficult to tell precisely where the imported asset is, just by taking a gander at the assertion. Moreover, outright imports stay substantial regardless of whether the current area of the import articulation changes. Indeed, PEP 8 unequivocally suggests outright imports. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relative-imports"&gt;
  &lt;/a&gt;
  Relative Imports
&lt;/h2&gt;

&lt;p&gt;A general import determines the asset to be imported comparative with the current area—that is, the place where the import explanation is. There are two sorts of relative imports: certain and express. Implied relative imports have been belittled in Python 3, so I will not be covering them here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax and Practical Examples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The syntax of a relative import depends on the current location as well as the location of the module, package, or object to be imported. Here are a few examples of relative imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .some_module import some_class
from ..some_package import some_function
from . import some_class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that there is something like one speck in each import proclamation above. Relative imports utilize spot documentation to indicate area.&lt;/p&gt;

&lt;p&gt;A solitary spot implies that the module or bundle referred to is in a similar registry as the current area. Two dabs imply that it is in the parent catalog of the current area—that is, the registry above. Three dabs imply that it is in the grandparent catalog, etc. This will presumably be recognizable to you on the off chance that you utilize a Unix-like working framework!&lt;/p&gt;

&lt;p&gt;Let’s assume you have the same directory structure as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;└── project
    ├── package1
    │   ├── module1.py
    │   └── module2.py
    └── package2
        ├── __init__.py
        ├── module3.py
        ├── module4.py
        └── subpackage1
            └── module5.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can import function1 into the package1/module1.py file this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# package1/module1.py

from .module2 import function1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You’d use only one dot here because module2.py is in the same directory as the current module, which is module1.py.&lt;/p&gt;

&lt;p&gt;You can import class1 and function2 into the package2/module3.py file this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# package2/module3.py

from . import class1
from .subpackage1.module5 import function2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first import statement, the single dot means that you are importing class1 from the current package. Remember that importing a package essentially imports the package’s &lt;strong&gt;init&lt;/strong&gt;.py file as a module.&lt;/p&gt;

&lt;p&gt;In the second import statement, you’d use a single dot again because subpackage1 is in the same directory as the current module, which is module3.py.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Great job for coming to the furthest limit of this brief training on outright and relative imports! Presently you're up to speed on how imports work. You've taken in the accepted procedures for composing import proclamations, and you know the distinction among outright and relative imports.&lt;/p&gt;

</description>
      <category>python</category>
      <category>difference</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Scope in Modern JavaScript</title>
      <author>Nmurgor</author>
      <pubDate>Mon, 13 Dec 2021 14:31:56 +0000</pubDate>
      <link>https://dev.to/nmurgor/scope-in-modern-javascript-4f0l</link>
      <guid>https://dev.to/nmurgor/scope-in-modern-javascript-4f0l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Scope is the visibility of a variable within a &lt;code&gt;{ }&lt;/code&gt; delimited block of code and where it is initially declared. .&lt;/p&gt;

&lt;p&gt;Scope determines the accessibility (and visibility) of variables.&lt;/p&gt;

&lt;p&gt;Modern JavaScript has 3 types of scope:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block scope&lt;/li&gt;
&lt;li&gt;Function scope&lt;/li&gt;
&lt;li&gt;Global scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short  variable(s) declared inside a block of code delimited by curly braces &lt;code&gt;{}&lt;/code&gt; are not visible outside that "scope" as from ES6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-scope"&gt;
  &lt;/a&gt;
  Global Scope
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-var-endraw-keyword-and-global-scope-pollution"&gt;
  &lt;/a&gt;
  The &lt;code&gt;var&lt;/code&gt; keyword and global scope pollution
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword (used alot in pre-ES6 days) introduces a global scope when used to declare a variable.&lt;/p&gt;

&lt;p&gt;so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myDub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dubstep on bike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myDub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints 'dubstep on bike'&lt;/span&gt;
&lt;span class="c1"&gt;// myDub can be accessed and used here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variable &lt;code&gt;myDub&lt;/code&gt; "leaks" to the outerscope (global scope) and can be accessed outside the scope declared in. This pollutes the global scope since it is accessible outside, other parts of the program can still have access to read and modify the variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#block-scope"&gt;
  &lt;/a&gt;
  Block Scope
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-let-endraw-and-raw-const-endraw-keywords"&gt;
  &lt;/a&gt;
  &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords
&lt;/h3&gt;

&lt;p&gt;ES6 introduced &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords for declaring variables in a manner that does not introduce global scope.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; keyword introduces a block scope variable. This means the variable can be accessed within the &lt;code&gt;{}&lt;/code&gt; they are declared in an nowhere else, kinda great right?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; does something similar but useful when variable needs not to change within the block scope it was declared in, hence can not be reassigned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myDub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dubstep on bike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myDub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints "undefined"&lt;/span&gt;
&lt;span class="c1"&gt;// myDub can not be used here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-scope"&gt;
  &lt;/a&gt;
  Function scope
&lt;/h2&gt;

&lt;p&gt;Function scope limits visibility/accessibility of a variable to the function&lt;br&gt;
expression declared in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDubDetails&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dubVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v2020&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="c1"&gt;// dubVersion is visible inside this function body and not anywhere else&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#introduce-global-scope-using-either-raw-let-endraw-raw-const-endraw-"&gt;
  &lt;/a&gt;
  Introduce global Scope using either &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#intentionally-introducing-a-global-scope"&gt;
  &lt;/a&gt;
  Intentionally introducing a global scope
&lt;/h3&gt;

&lt;p&gt;A global scope can be used to introduced to create global variables. For example declaring the variables at top level of program makes the accessible anywhere inside the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myDub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dubstep on bike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dubEdition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2020 Edition&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printDubEdition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// myDub and dubEdition are accessible here and anywhere else!&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;myDub&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; edition: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dubEdition&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints dubstep on bike edition: 2020 Edition&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// myDub, dubEdition accessibe and modifiable anywhere&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, if a function modifies &lt;code&gt;myDub&lt;/code&gt;, somewhere down the program could &lt;code&gt;myDub&lt;/code&gt; end up with a different value than causing different behavior and bugs that are hard to hunt down and fix.&lt;/p&gt;




&lt;p&gt;Never introduce global variables anywhere inside your code unless you intentionally want to. &lt;code&gt;var&lt;/code&gt; is deprecated and you would rarely see it in modern code bases. Strive to use &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; whenever possible when working with modern JavaScript and beyond. It's ideal to introduce a variable close to where it's used.&lt;/p&gt;




&lt;p&gt;Follow me on twitter &lt;a href="https://twitter.com/nkmurgor"&gt;@nkmurgor&lt;/a&gt; where I tweet about interesting topics and Web Development.&lt;/p&gt;

&lt;p&gt;This article was orignally published at naftalimurgor.netlify.com&lt;/p&gt;

&lt;p&gt;Do you feel stuck with learning modern JavaScript? You may preorder  &lt;a href="https://naftalimurgor.gumroad.com/l/modern-javascript-primer-for-beginners"&gt;Modern JavaScript Primer for Beginners&lt;/a&gt; where I explain everything in a clear and straight-forward fashion with code examples and  project examples.&lt;/p&gt;

&lt;p&gt;Thanks for stopping by!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Let vs Var in JS</title>
      <author>Manu Martinez</author>
      <pubDate>Mon, 13 Dec 2021 14:23:28 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/let-vs-var-in-js-1bhc</link>
      <guid>https://dev.to/whitehatdevv/let-vs-var-in-js-1bhc</guid>
      <description>&lt;p&gt;Yeah 🤓. Today we &lt;strong&gt;must&lt;/strong&gt; starting learning more about how really &lt;em&gt;JS&lt;/em&gt; works. It should be really strange but don't worry about that, I will try to make it really clear and understandable to make sure that you have just understood it 🥰&lt;/p&gt;

&lt;p&gt;First of all, we should &lt;strong&gt;understand&lt;/strong&gt; 🙀 what is exactly a variable, a &lt;em&gt;variable&lt;/em&gt; is a container when you can save whichever data you need, think in a &lt;strong&gt;container&lt;/strong&gt;, you can save a data inside it and make sure that it will be safe 🤓. The main point is that it will be safe until your program die, let's doing an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, we have just made a &lt;em&gt;brief&lt;/em&gt; example where we have saved up my name into a value 🤝, but &lt;strong&gt;STOP&lt;/strong&gt;, saving data inside &lt;code&gt;var&lt;/code&gt; is really dangerous, it hasn't had any scope, the data can change whenever you want, imagine that this data need to be always the same, it means isn't able to change it, then I introduce you &lt;code&gt;constants&lt;/code&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antonio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is exactly what a constant looks like, his value will never change, you can be sure of that. But then, 😵‍💫&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-different-between-raw-var-endraw-and-raw-const-endraw-"&gt;
  &lt;/a&gt;
  What are the different between &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;?.
&lt;/h2&gt;

&lt;p&gt;The const will never &lt;strong&gt;mutate&lt;/strong&gt; 😇. This is the key.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are another way to get a &lt;code&gt;variable&lt;/code&gt; in JS, and it's the best approach to make your &lt;code&gt;vars&lt;/code&gt; more secure, it's a pleasure to meet you &lt;code&gt;let&lt;/code&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-exactly-that-"&gt;
  &lt;/a&gt;
  What is exactly that 🤓?
&lt;/h2&gt;

&lt;p&gt;Apparently it's the same meaning that &lt;code&gt;var&lt;/code&gt;, it's able to mutate and re-asign a new value, but &lt;code&gt;let&lt;/code&gt; understand what is exactly a scope, then if you declare it inside an if it won't never mutate 🤕, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antonio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code, we can mutate the value from the &lt;code&gt;var&lt;/code&gt; because &lt;code&gt;var&lt;/code&gt; doesn't understand why it shouldn't mutate, however look at the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antonio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh &lt;strong&gt;shit&lt;/strong&gt; 💩!!!, it gets an error because &lt;code&gt;let&lt;/code&gt; understand that you have just declared inside an &lt;code&gt;if&lt;/code&gt; scope, then why did you want to mutate this value? Here, you can see clearly which is the difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;vars&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have just &lt;em&gt;understood&lt;/em&gt; ☺️ why using a var is a good practise when you are writing your code. If you have any question please don't hesitate to write a comment 😙, it will be a pleasure to help you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Accessing unique queryClients in Storybook-based  Jest tests</title>
      <author>Mike Schutte</author>
      <pubDate>Mon, 13 Dec 2021 14:22:28 +0000</pubDate>
      <link>https://dev.to/tmikeschu/accessing-unique-queryclients-in-storybook-based-jest-tests-4ibg</link>
      <guid>https://dev.to/tmikeschu/accessing-unique-queryclients-in-storybook-based-jest-tests-4ibg</guid>
      <description>&lt;p&gt;tl;dr&lt;/p&gt;

&lt;p&gt;I recently came up with a pattern for accessing unique &lt;a href="https://react-query.tanstack.com/"&gt;React Query&lt;/a&gt; clients on a per-render basis in &lt;a href="https://storybook.js.org"&gt;Storybook&lt;/a&gt; stories and tests (using &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; and &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;). This enables the following kind of API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// composeStories from `@storybook/testing-react`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;composeStories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderStory&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ...wait for query client state, assert state, etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(If this sounds like a fun stack to you, &lt;a href="https://www.process.st/jobs/"&gt;we're hiring&lt;/a&gt; at &lt;a href="https://www.process.st/"&gt;Process Street&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;Keep reading for more of the story, or just jump into the code in this template:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/168r5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;I prefer to &lt;strong&gt;give each test its own QueryClientProvider&lt;/strong&gt; and create a &lt;strong&gt;new QueryClient for each test&lt;/strong&gt;. That way, &lt;em&gt;tests are completely isolated&lt;/em&gt; from each other. A different approach might be to clear the cache after each test, but I like to keep shared state between tests as minimal as possible. Otherwise, you might get &lt;strong&gt;unexpected and flaky results if you run your tests in parallel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;- TkDodo on &lt;a href="https://tkdodo.eu/blog/testing-react-query"&gt;Testing React Query&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;...But what if I need access to the query client in my tests!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At we use the lovely &lt;a href="https://github.com/storybookjs/testing-react"&gt;@storybook/testing-react&lt;/a&gt; package to use Storybook stories as our components under test. This is a great pattern because you can effectively automate the manual QA you do in the Storybook browser.&lt;/p&gt;

&lt;p&gt;Let's say you just added a toast alert for an API exception case. You finish your code changes and switch to your browser to test the toast in the story. It works! Now you can keep your user hat and use &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt; fundamentals to write a Jest spec matching what you did in the browser. &lt;/p&gt;

&lt;p&gt;An example (pseudo code):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// local util module to wrap test utils like React Testing &lt;/span&gt;
&lt;span class="c1"&gt;// Library (RTL) and @storybook/testing-react&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;stories&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.stories&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composeStories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FancyButton shows an alert for failures&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderStory&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/do stuff/i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/uh oh!/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yep. That's it. For the past few months our &lt;code&gt;*.spec.tsx&lt;/code&gt; files have been &lt;em&gt;very&lt;/em&gt; concise and declarative. This is because all the setup is in &lt;code&gt;*.stories.tsx&lt;/code&gt; files. Tests just become expressions of how I'm testing the stories, as a user, in the browser.&lt;/p&gt;

&lt;p&gt;Along with testing "integrated" components powered by React Query, we've been using a global &lt;code&gt;queryClient&lt;/code&gt; instance to leverage patterns like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;toEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can't follow TkDodo's advice very easily because if each story sets up it's own query client, how do we get access to it? We &lt;em&gt;could&lt;/em&gt; instantiate a new query client for each test, but that's the kind of boilerplate that makes testing feel terrible. &lt;strong&gt;My goal is always to make testing feel as good as possible (maybe even fun?!).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code I &lt;em&gt;wish&lt;/em&gt; I had has the following characteristics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All stories and tests have a unique &lt;code&gt;queryClient&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;The unique &lt;code&gt;queryClient&lt;/code&gt; instance is easily accessible in each test.&lt;/li&gt;
&lt;li&gt;The pattern for accessing the &lt;code&gt;queryClient&lt;/code&gt; &lt;em&gt;feels&lt;/em&gt; like "The Testing Library Way".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By #3, I refer to how Testing Library has normalized our eyes to the pattern of rendering something and destructuring results from that render call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rerender&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would feel awfully nice to be able to do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right? It's quite clear that the &lt;code&gt;queryClient&lt;/code&gt; is unique to this particular invocation of &lt;code&gt;Test.render&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the big question is, how do we implement this?&lt;/p&gt;

&lt;p&gt;I know right away that I won't instantiate the &lt;code&gt;queryClient&lt;/code&gt; nor the &lt;code&gt;QueryClientProvider&lt;/code&gt; at the individual story level for the same reasons I wouldn't instantiate it in each test: too much annoying boilerplate that makes writing stories less fun. So that's out. We need some kind of "do this for every test" lever.&lt;/p&gt;

&lt;p&gt;It's &lt;a href="https://testing-library.com/docs/react-testing-library/setup/#custom-render"&gt;recommended&lt;/a&gt; to have a custom &lt;code&gt;render&lt;/code&gt; function that wraps the component under test the same way your app is globally wrapped by some combination of providers. We'll borrow this notion of "all the providers" but skip the custom render wrapper and instead use it for a Storybook &lt;a href="https://storybook.js.org/docs/react/writing-stories/decorators"&gt;decorator&lt;/a&gt;. Since we'll want control of our &lt;code&gt;queryClient&lt;/code&gt;, we'll parameterize it for a root provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./test/index.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderOptions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AllTheProviders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll jump straight to decorating all stories with &lt;code&gt;AllTheProviders&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .storybook/main-decorator.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AllTheProviders&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainDecorator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DecoratorFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AllTheProviders&lt;/span&gt; &lt;span class="na"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AllTheProviders&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;options.args.queryClient&lt;/code&gt; is still nullable, but allows us to pass a query client to the component results of &lt;code&gt;composeStories&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we just export that decorator for Storybook's browser configuration in &lt;code&gt;preview.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .storybook/preview.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MainDecorator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main-decorator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decorators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AllTheProviders&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have "decorated" stories for testing with &lt;code&gt;composeStories&lt;/code&gt; from &lt;code&gt;@storybook/testing-react&lt;/code&gt;, but we need a custom render function that adds &lt;code&gt;queryClient&lt;/code&gt; to the return value of &lt;code&gt;render&lt;/code&gt; from React Testing Library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderStory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RenderOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clonedUi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clonedUi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! We use &lt;code&gt;React.cloneElement&lt;/code&gt; to modify the already-invoked component function so we can pass a &lt;code&gt;queryClient&lt;/code&gt; from a different scope. If the &lt;code&gt;ui&lt;/code&gt; component was already called with a &lt;code&gt;queryClient&lt;/code&gt;, that will be reused thanks to our nullish coalescing operator &lt;code&gt;??&lt;/code&gt;. Now in our tests we can access the &lt;code&gt;queryClient&lt;/code&gt; as a &lt;em&gt;result&lt;/em&gt; of our &lt;code&gt;render&lt;/code&gt; call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderStory&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do need to test implementation details (which, face it, sometimes you Just Do), you can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invalidateQueriesSpy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalidateQueries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="na"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/do stuff/i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's where the &lt;code&gt;ui.props.queryClient&lt;/code&gt; check comes into play.&lt;/p&gt;

&lt;p&gt;And that's it! Check out the &lt;a href="https://codesandbox.io/s/react-query-storybook-based-testing-168r5"&gt;sandbox&lt;/a&gt; for more implementation details. Happy testing!&lt;/p&gt;

</description>
      <category>react</category>
      <category>storybook</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Do You Know Where Haskell Is Used?
</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 13 Dec 2021 14:08:35 +0000</pubDate>
      <link>https://dev.to/typeable/do-you-know-where-haskell-is-used-8ml</link>
      <guid>https://dev.to/typeable/do-you-know-where-haskell-is-used-8ml</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi there! We’re getting on with our series of posts on "where all those strange programming languages of yours are used". &lt;a href="https://dev.to/typeable/do-you-know-where-lisp-is-used-nowadays-4pbn"&gt;Last time&lt;/a&gt; we told you about Lisp, and now we’re going to pick up the talk about functional languages and turn our eyes to Haskell.  It’s the main development language at Typeable and, surely, we couldn’t ignore this topic.&lt;/p&gt;

&lt;p&gt;Haskell is a general-purpose purely functional programming language. Its distinctive features include strict static typing, lazy evaluations, algebraic data types, and a serious theoretical background. This language is relatively young, it emerged in 1990 but has already produced a big impact on other languages and programming language theory on the whole.&lt;/p&gt;

&lt;p&gt;One of our recent posts described &lt;a href="https://dev.to/typeable/7-useful-tools-written-in-haskell-560d"&gt;useful Haskell-based utilities&lt;/a&gt;, but all of them are intended to be used by tech-savvy people. Today we’re going to give some examples of practical use in various industries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gl2Du9l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/industry.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gl2Du9l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/industry.jpg" alt="Industrial Haskell" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-and-how-is-haskell-used"&gt;
  &lt;/a&gt;
  Where and how is Haskell used?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Probably, the most googled and well-known example of Haskell application in major companies is the &lt;del&gt;Facebook&lt;/del&gt; &lt;strong&gt;Meta&lt;/strong&gt; spam filters. Messages containing spam, links to potential malware and phishing attacks are filtered by Sigma, the system that was rewritten in Haskell in 2015. The choice of language was based, among other things, on performance requirements, the need for pure functions and static typing, as well as the possibility of interactive development. The &lt;a href="https://github.com/facebook/Haxl"&gt;Haxl framework&lt;/a&gt; is used under the bonnet, which the company has open-sourced. You can find more details about the development process and technical aspects in the &lt;a href="https://engineering.fb.com/2015/06/26/security/fighting-spam-with-haskell/"&gt;company’s blog post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.eaton.com"&gt;&lt;strong&gt;Eaton&lt;/strong&gt;&lt;/a&gt; is a manufacturer of electrical and hydraulic equipment, as well as components for the aviation and automotive sectors. The company is using Haskell for day-to-day tasks such as scripting, hardware simulation, remote control tools for vehicle systems, etc. However, the most interesting thing is that they have entrusted hydraulic elements to the control of code written in Atom DSL, which is also implemented in Haskell. Atom is used to develop hard real-time systems and allows describing declaratively the system state transition rules. During compilation, the tasks are scheduled, which is why the resulting code has a deterministic execution time and constant memory consumption. This makes verification of the obtained code much easier and generally increases the system security, which is, of course, very important in this subject domain. You can read about all this in more detail on the &lt;a href="https://www.slideserve.com/kin/controlling-hybrid-vehicles-with-haskell"&gt;slides&lt;/a&gt; and in the &lt;a href="https://github.com/tomahawkins/atom"&gt;Atom repository&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let’s jump to an entirely different sphere, that is, the world of music. The service called &lt;a href="https://chordify.net/"&gt;&lt;strong&gt;Chordify&lt;/strong&gt;&lt;/a&gt; allows converting music from YouTube, SoundCloud, etc. into chords so that you could learn to play your favorite songs. Haskell is mostly used during the tracing process; to this end, developers use the &lt;a href="https://github.com/haas/harmtrace"&gt;HarmTrace library&lt;/a&gt; that analyses the sequences of musical harmonics.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJLHFwrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/chord.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJLHFwrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/chord.jpg" alt="Use chords generated by Haskell library to play your favorite music" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.kaspersky.com/"&gt;&lt;strong&gt;Kaspersky Lab&lt;/strong&gt;&lt;/a&gt; is developing its own secure operating system &lt;a href="https://os.kaspersky.com/"&gt;KasperskyOS&lt;/a&gt; for IoT systems. Surely, this OS sets forth specific requirements for reliability and cyber security. The KasperskyOS team is actively using Haskell in the security system compiler and to create auxiliary development tools. The security configuration is described in a special DSL which is then compiled to C. As you can see, Haskell again demonstrates its usefulness when it comes to security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some of in-house tools for automotive development in &lt;strong&gt;Tesla&lt;/strong&gt; are written in Haskell, which can be seen from the regularly published &lt;a href="https://www.tesla.com/careers/search/job/haskell-engineerdatatools-82891"&gt;vacancies&lt;/a&gt;. As far as I could understand from the vacancy descriptions, Haskell is used for the intermediate high-level representation of internal systems which is used to generate C code, documentation, and probably something more.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3Hu-ajA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/tesla.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3Hu-ajA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/tesla.jpeg" alt="Tesla's using Haskell too!" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://biocadglobal.com/"&gt;&lt;strong&gt;BIOCAD&lt;/strong&gt;&lt;/a&gt; is one of the major biotech companies based in Russia. The company carries out the complete cycle of medicine development all the way through to mass production and marketing. In the course of medicine development BIOCAD develops its own internal services for data processing and storage. The backend of these services is written in Haskell; it uses the graph database Neo4j, for which the company has developed and published the driver called &lt;a href="https://neo4j.com/blog/hasbolt-haskell-neo4j-bolt-driver/"&gt;Hasbolt&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Haskell has filled its niche in the development of &lt;strong&gt;blockchains and cryptocurrency&lt;/strong&gt;. It seems to me, the majority of Haskell-related vacancies I’ve ever seen were in this field. &lt;a href="https://medium.com/@cardano.foundation/why-cardano-chose-haskell-and-why-you-should-care-why-cardano-chose-haskell-and-why-you-should-f97052db2951"&gt;&lt;strong&gt;Cardano&lt;/strong&gt;&lt;/a&gt; should be mentioned as one of the most famous. The main cause of Haskell’s popularity in this sphere is security again. For more details see the &lt;a href="https://www.fpcomplete.com/blog/why-haskell-is-hot-for-cryptocurrencies/"&gt;post by FPComplete&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you find blockchains to be too dull, serious or "inhuman", I can tell you about &lt;a href="https://www.costarastrology.com/"&gt;&lt;strong&gt;Co-Star&lt;/strong&gt;&lt;/a&gt;, an astrological application for personalized horoscopes. Their backend is written in Haskell, and the developers explained their choice of language on the &lt;a href="https://www.costarastrology.com/why-haskell/"&gt;application website&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBFw1Sns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/astrology.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBFw1Sns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/astrology.jpeg" alt="Haskell has even something to do with astrology" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The backend of &lt;a href="https://wire.com/en/"&gt;&lt;strong&gt;Wire messenger&lt;/strong&gt;&lt;/a&gt;, with the server code publicly available in the &lt;a href="https://github.com/wireapp/wire-server"&gt;company’s repository&lt;/a&gt; and detailed documentation, also written in Haskell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.amnh.org/research/computational-sciences"&gt;&lt;strong&gt;The American Museum of Natural History&lt;/strong&gt;&lt;/a&gt; uses Haskell to study the phylogenetic graphs reflecting the evolutionary relationships between different species. The code of this project is also &lt;a href="https://github.com/amnh/pcg"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The list of examples for this post was compiled to demonstrate the variety of applications and, surely, many of them have remained offscreen. Here you can find more details on the companies and industries using Haskell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/erkmos/haskell-companies"&gt;https://github.com/erkmos/haskell-companies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.haskell.org/Haskell_in_industry"&gt;https://wiki.haskell.org/Haskell_in_industry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here at Typeable we are using Haskell to develop projects for health care, tourism, fintech and many other sectors.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>haskell</category>
    </item>
    <item>
      <title>6 tips to avoid headaches in SCSS</title>
      <author>Charlie Joel</author>
      <pubDate>Mon, 13 Dec 2021 14:03:23 +0000</pubDate>
      <link>https://dev.to/charliejoel/6-tips-to-avoid-headaches-in-scss-jp0</link>
      <guid>https://dev.to/charliejoel/6-tips-to-avoid-headaches-in-scss-jp0</guid>
      <description>&lt;h2&gt;1. Never style elements&lt;/h2&gt;

&lt;p&gt;This is probably the biggest cause of headaches, at least in my experience. It seems innocent enough to style a button or a heading - they're buttons and headings, of course they should look like buttons and headings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// don't do this!
button {
  background-color: $color-btn;
  border-radius: 4px;
}

// nooooo!
h2 {
  font-size: 40px;
  font-weight: bold;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But!&lt;/p&gt;

&lt;p&gt;What if you have an element that should look like a link, but is really a button? Or if you have a button which needs to look different from all the others, such as with hamburger/pancake menus (there's a lot of debate on exactly which food item these look like, I think it's a pancake).&lt;/p&gt;

&lt;p&gt;What if your headings need a different size or style in a particular context?&lt;/p&gt;

&lt;p&gt;In all these cases, you would have to manually un-style these elements in their own class. And because element styling wins specificity wars over classes, you would often need to use the &lt;code&gt;!important&lt;/code&gt; rule - a huge no-no.&lt;/p&gt;

&lt;p&gt;Instead, assign classes to your elements. This is much more expressive than styling raw elements as you can state the intention of the element through it's class. You can also reuse the class on different elements, such as with buttons and links.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// better
.button {}
.heading-2 {}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// now you can reuse the classes!
&amp;lt;button class="button"&amp;gt;I am a button&amp;lt;/&amp;gt;
&amp;lt;a class="button"&amp;gt;I am link, but I look like a button&amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to style elements for a Rich Text Editor or WYSIWYG section, or anywhere else you might not be able to add classes directly, you can do so by nesting. By putting a &lt;code&gt;.rte&lt;/code&gt; class on the container for these sections, you can scope your element styles to only target what you need to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// _rte.scss

.rte {
  &amp;amp; h2 {
    font-size: 28px;
    font-family: $font-headings;
    font-weight: bold;
    line-height: 1.3;
  }

  &amp;amp; p {
    font-size: 16px;
    margin-bottom: 16px;
  }

  &amp;amp; ul {
    // etc...
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// article template

&amp;lt;article class="rte"&amp;gt;
  &amp;lt;!-- content added by cms --&amp;gt;
&amp;lt;/article&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2. Strive to never use !important&lt;/h2&gt;

&lt;p&gt;Your CSS should follow rules, and your classes shouldn't overstep each other. The more tangled up in the web of specificity and nested selectors your code becomes, the harder your codebase will be to work with. You'll end up adding &lt;code&gt;!important&lt;/code&gt; to properties that really have no need to be, and the more of these rules you have in the first place the more you'll have to use it again to override these rules. It's a downward spiral of manually forcing specificity, and it has rippling consequences for your CSS.&lt;/p&gt;

&lt;p&gt;There are a few ways to avoid using !important[]: For one, keeping your CSS structure as flat as possible can avoid any specificity wars that could crop up. Nesting CSS, and using complex selectors to target classes in specific situations, are things many developers do without realising they are lining up headaches and delays for themselves in future.&lt;/p&gt;

&lt;h2&gt;3. Use reset.css&lt;/h2&gt;

&lt;p&gt;Cross-browser consistency is one of the major problems surrounding not only CSS, but also JS and even accessibility with ARIA. In CSS, we can lay out a level playing field using a reset.css file. This will remove any browser-specified styles, such as margins, font sizes, button styles etc. so every browser will show the same thing.&lt;/p&gt;

&lt;p&gt;reset.css is also great because we don't need to waste time overwriting default styles: If your &amp;lt;button /&amp;gt; needs to have a transparent background and no borders, we would normally need to specify these in our own CSS. This way, we know any CSS we are writing is &lt;em&gt;additive&lt;/em&gt; instead of being &lt;em&gt;subtractive&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.button {
  // these properties wouldn't be necessary with reset.css
  background-color: transparent;
  border: none;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subtractive CSS, where we write styles to overwrite other styles, is generally a big no-no as it adds a level of confusion to what a class is doing. CSS classes, as with anything in programming, should be concise and to the point. If you find yourself writing subtractive or overwriting CSS, it may be worth tracing back to find what it's overwriting, and breaking down the original styles further using placeholders[link] or mixins[link].&lt;/p&gt;

&lt;p&gt;You could also use normalize.css. This will maintain a set of default page margins and other element-level styles across browsers. Personally, I prefer reset.css due to the fact that I want to control everything on a page without being interrupted by default styles - I don't want any page to have a margin on the body, for example, and writing code to undo these margins makes my code confusing. However, this might work better for you if you want some defaults.&lt;/p&gt;

&lt;h2&gt;4. Use variables to stay DRY&lt;/h2&gt;

&lt;p&gt;DRY, meaning Don't Repeat Yourself, is a key concept to understand for any kind of programming. In SCSS, the best place to start with this is in using variables, placeholders and mixins. The most common of these you'll be using is variables.&lt;/p&gt;

&lt;p&gt;Let's say you're looking at a design you need to create, and it has many colours across it. You can make your life much easier by assigning these colours to variables, perhaps with a kind of hierarchy which relates to the brand you're working with. There are lots of different ways to name variables, &lt;a href="https://css-tricks.com/what-do-you-name-color-variables/"&gt;as outlined in this CSS Tricks article.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another great use of SCSS variables is naming the top level of components. Here, I use &lt;code&gt;$module&lt;/code&gt; to store the name of the component and am then free to reuse it in other places, without needing to worry if I want to change the name of that component for some reason.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// we can change $module at any time in one place
$module: 'nav';

.#{$module} {
  &amp;amp;__dropdown-link {
    position: relative;
  }

  &amp;amp;__dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    display: hidden;
    
    .#{$module}__dropdown-link:hover &amp;amp; {
      display: block;
    }
  }&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// above css applied to html, for reference

&amp;lt;li class="nav__dropdown-link&amp;gt;
  &amp;lt;a&amp;gt;Link title&amp;lt;/a&amp;gt;
  &amp;lt;ul class="nav__dropdown"&amp;gt;
    ...
  &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5. Use placeholders&lt;/h2&gt;

&lt;p&gt;Placeholders are a great way to save time and file size with SCSS. They are essentially groups of properties which you can apply in a similar way to variables, and further build on top of them.&lt;/p&gt;

&lt;p&gt;I've used placeholders on &lt;a href="https://charliejoel.dev/"&gt;my own site&lt;/a&gt; to help generate a set of paragraph styles using the &lt;a href="https://grtcalculator.com/"&gt;Golden Ratio Typography Calculator&lt;/a&gt; (check it out!) which downsize appropriately at different resolutions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// these styles...

%t-1\/2 {
  font-size: 14px;
  line-height: 1.786;
}

%t-1 {
  font-size: 18px;
  line-height: 1.722;
}

%t-2 {
  font-size: 23px;
  line-height: 1.652;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// ...can be easily reused for different breakpoints
.t {
  &amp;amp;-1 {
    @extend %t-1\/2;
    @screen lg { // @screen is a tailwind directive - these are just desktop-first breakpoints!
      @extend %t-1;
    }
  }
  &amp;amp;-2 {
    @extend %t-1;
    @screen lg {
      @extend %t-2;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as needing to write less code, we are also building a sensible design system with our CSS to ensure consistency between elements and enforce a single source of truth.&lt;/p&gt;

&lt;h2&gt;6. Don't set a max-width on &amp;lt;main&amp;gt;&lt;/h2&gt;

&lt;p&gt;More often than not, any content on a webpage has a certain &lt;code&gt;max-width&lt;/code&gt; which it cannot exceed. This helps with readability and keeps the page content flush all the way down.&lt;/p&gt;

&lt;p&gt;If you're a beginner, it may be instinctive to set this &lt;code&gt;max-width&lt;/code&gt; on an element that's quite high up in the hierarchy - the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element for instance, or even the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. On a page that has the same background color all the way down, this might be perfectly fine. Most webpages, however, are broken up by different sections that have a background color spanning the entire width of the page. &lt;/p&gt;

&lt;p&gt;The issue you will run into by setting a max-width on the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, is that this background color will be limited by the max-width. Beyond this &lt;code&gt;max-width&lt;/code&gt;, the background color will be white (or whatever color the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; is set to).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cjJQq4tv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-3-1024x449-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjJQq4tv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-3-1024x449-1.png" alt="" width="880" height="386"&gt;&lt;/a&gt;Ugly whitespace!&lt;/p&gt;

&lt;p&gt;You can avoid this by segregating this max-width effect into sections. To do so, you will need a parent element which takes on the background color you want, and a child element inside it that applies the max-width effect. Repeat for each section of the page, and you will end up with the desired effect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// index.html

&amp;lt;main&amp;gt;
  &amp;lt;section class="section section--bg-primary"&amp;gt;
    &amp;lt;div class="section__inner"&amp;gt;
      &amp;lt;h2&amp;gt;Hello world!&amp;lt;/h2&amp;gt;
      &amp;lt;p class="paragraph"&amp;gt;
        Lorem ipsum dolor sit amet...
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
  &amp;lt;section class="section section--bg-secondary"&amp;gt;
    &amp;lt;div class="section__inner"&amp;gt;
      &amp;lt;h2&amp;gt;Hello again world!&amp;lt;/h2&amp;gt;
      &amp;lt;p class="paragraph"&amp;gt;
        Lorem ipsum dolor sit amet...
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
&amp;lt;/main&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// layout/_section.scss

.section {
  // use the parent element to add padding
  padding: 48px 16px;

  &amp;amp;--bg-primary {
    background-color: $color-primary;
    color: white;
  }
  
  &amp;amp;--bg-secondary {
    background-color: $color-secondary;
    color: black;
  }

  &amp;amp;__inner {
    // set the max-width on the inner element
    max-width: $max-w-page;
    margin: 0 auto;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here it is - a layout with full-width background colors, padding and a max-width. You might want to set some of these values as variables or placeholders so you can repeat in other areas - for instance, a nav bar will often need the same effect, as will a footer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVJhLV9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-4-1024x452.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVJhLV9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-4-1024x452.png" alt="" width="880" height="388"&gt;&lt;/a&gt;Lovely full-width background color&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Web3 with Refine</title>
      <author>Melih Ekinci</author>
      <pubDate>Mon, 13 Dec 2021 13:41:40 +0000</pubDate>
      <link>https://dev.to/pankod/web3-with-refine-4oa7</link>
      <guid>https://dev.to/pankod/web3-with-refine-4oa7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-web3"&gt;
  &lt;/a&gt;
  What is Web3
&lt;/h2&gt;

&lt;p&gt;Web 3.0 eliminates intermediates. There’s no centralized database that stores the application state.&lt;/p&gt;

&lt;p&gt;In web3, developers don't usually build and deploy applications that run on a single server or that store their data in a single database.&lt;br&gt;
Instead of, Web3 applications run on blockchains, decentralized networks of many peer to peer nodes&lt;/p&gt;

&lt;p&gt;Features provided by Web3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verifiable&lt;/li&gt;
&lt;li&gt;Self-governing&lt;/li&gt;
&lt;li&gt;Permissionless&lt;/li&gt;
&lt;li&gt;Stateful&lt;/li&gt;
&lt;li&gt;Trustless&lt;/li&gt;
&lt;li&gt;Native built-in payments&lt;/li&gt;
&lt;li&gt;Anonymity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dappsdapps"&gt;
  &lt;/a&gt;
  What is dApps(Dapps)?
&lt;/h2&gt;

&lt;p&gt;Dapps is short for "Decentralized Applications" and refers to any application that is decentralized in nature, built on a blockchain, and may use tokens for transactions.&lt;/p&gt;

&lt;p&gt;Dapps is just like any other software application you use. It could be a website or an app on your phone. What makes a Dapp different than a traditional app is that it's built on a decentralized network, like Ethereum.&lt;/p&gt;

&lt;p&gt;Many applications on the logic of dApp have been developed and continue to be developed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ethereum.org/en/dapps/"&gt;Here you can browse some dapps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have developed a simple app where you can login with ethereum and send ethereum over the network using Metamask Wallet and &lt;strong&gt;refine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This application allows you to login with your web3 wallet and you can also send ethereum over the ethereum network.&lt;/p&gt;

&lt;p&gt;This example is simple intro to dApps development  built with web3 and &lt;strong&gt;refine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CUtg0_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipsay1k4rfk4o4a8d94o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CUtg0_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipsay1k4rfk4o4a8d94o.gif" alt="Login" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f032ZTsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5s61v7squ5fbfy7pxjv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f032ZTsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5s61v7squ5fbfy7pxjv.gif" alt="Overview" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can develop many fast and functional dApps using web3 and &lt;strong&gt;refine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pankod/refine/tree/master/examples/web3/ethereumLogin"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://refine.dev/docs/guides-and-concepts/web3/ethereum-signin/"&gt;Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/signin-with-ethereum-umho3"&gt;Live Code Example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>dapps</category>
      <category>refine</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Make A Extension For Edge or Chrome</title>
      <author>Grant McNamara</author>
      <pubDate>Mon, 13 Dec 2021 13:38:37 +0000</pubDate>
      <link>https://dev.to/grantrocks/how-to-make-a-extension-for-edge-or-chrome-35ok</link>
      <guid>https://dev.to/grantrocks/how-to-make-a-extension-for-edge-or-chrome-35ok</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LY59qJMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ya12bhvuf5cuse95nsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LY59qJMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ya12bhvuf5cuse95nsx.png" alt="Image description" width="575" height="228"&gt;&lt;/a&gt;&lt;br&gt;
Ever install a extension on your web browser. A ad blocker, a game, a tool? Its almost guaranteed that you have installed a extension for your web browser sometime in your life. Extensions are a great way to add useful features to your browser or personalize it. Sometimes you can't find what you need and you would like to make one yourself but you don't know how. That's what we are going to be going over.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-you-make-one"&gt;
  &lt;/a&gt;
  Why Should You Make One?
&lt;/h2&gt;

&lt;p&gt;Making a extension is a great idea as it can grow to be a great source of income. Extensions also can act as previous work proof that you can use to get into a good college or job that you would like. While making a extension you may learn a new programming language and it may be something to do on the side if you dont have something already. And to be honest, it's pretty easy to do.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Before you make a extension you need to have a IDE or some file editor. That will be used to edit the files for your extension. You will also need a idea of what to do with your extension such as making it a game or weather app. Once you are ready to start making it read the following.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#manifestjson"&gt;
  &lt;/a&gt;
  Manifest.json
&lt;/h2&gt;

&lt;p&gt;Before you start to make your extension you need a file to specify details about your extension. In the manifest file you need to declare the name of your app, the description, the version, needed permissions(if used), needed external sources(if used), etc. Making the manifest file is the easiest step of making your extension. The format for your manifest.json file is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Current Weather",
  "description": "Get the current weather from this small extension. This extension needs your location to get the weather for your area.",
  "version": "1.0",
  "manifest_version": 3,
  "action": {
    "default_popup": "index.html",
    "default_icon": "cwlogo.png"
  },
  "options_ui": {
    "page": "settings.html"
  },
  "permissions": [
          "geolocation",
          "notifications"
  ],
  "host_permissions": [
  "https://api.openweathermap.org/",
  "https://translate.google.com/"
  ],
  "commands": {
    "_execute_action": {
      "suggested_key": {
        "default": "Ctrl+Shift+F",
        "mac": "MacCtrl+Shift+F"
      },
      "description": "Opens index.html"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the manifest.json file for one of my extensions Current Weather which you can download on &lt;a href="https://microsoftedge.microsoft.com/addons/detail/current-weather/idnopmbgjahabdlbihbjeinagcldodbg"&gt;Edge here&lt;/a&gt;. As you can see, it uses the external source api.openweathermap.org and it uses services such as geolocation. It also has a settings page, which is not needed. &lt;/p&gt;

&lt;p&gt;Looking at the manifest.json you can see that it has a icon and a action page. The icon is the small little picture that you see when you have a extension installed. The action page is the little page that pops up when you click on the extension. Those are the pages that are the actual extension itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-ui"&gt;
  &lt;/a&gt;
  Making The UI
&lt;/h2&gt;

&lt;p&gt;This step is pretty easy. The popup page uses HTML and HTML can use other sources. My extension uses HTML and the HTML uses javascript. If you are unfamiliar with HTML than view my &lt;a href="https://dev.to/grantrocks/how-to-start-a-website-from-scratch-using-html-2pj7"&gt;other article about HTML.&lt;/a&gt; You first need to make the layout for a HTML page and then you need to make sure that the name of the HTML file is in the manifest.json file so that way it works when you click on it. The layout for my HTML page is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width"&amp;gt;
    &amp;lt;title&amp;gt;Current Weather&amp;lt;/title&amp;gt;
    &amp;lt;link href="style.css" rel="stylesheet" type="text/css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id="body"&amp;gt;
    &amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;th&amp;gt;Tempature&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Humidity&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Icon&amp;lt;/th&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td id="temp"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="humidity"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="description"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="icon" style="background-color: gray;"&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;  
    &amp;lt;/table&amp;gt;
    &amp;lt;table&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;th&amp;gt;Min Temp&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Max Temp&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Windspeed | Degree&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Pressure&amp;lt;/th&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tbody&amp;gt;
        &amp;lt;tr&amp;gt;
        &amp;lt;td id="mintemp"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="maxtemp"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="wspdg"&amp;gt;&amp;lt;/td&amp;gt;  
        &amp;lt;td id="pressure"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;center&amp;gt;&amp;lt;div id="result" style="font-size: 20px;"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div id="google_translate_element"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/center&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see I use a javascript file to get the weather from api.openweathermap.org. The HTML page that I have set up has a table for the weather data. The javascript file uses the resources from the HTML page. Which brings us to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-backend"&gt;
  &lt;/a&gt;
  The Backend
&lt;/h2&gt;

&lt;p&gt;Now that you got a nice and fancy UI you now need to make a less appealing file for the fancy UI. Make a file named script.js and make sure that it is in the same directory with the rest of the files. Now make your js file the way you want your app to work and then you should link it to your HTML file and you should be good to go with the html. The backend for my extension is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL}, 'google_translate_element');
}
  navigator.geolocation.getCurrentPosition(function(position) {

        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;
        const altitude = position.coords.altitude;
        const accuracy = position.coords.accuracy;
        const altitudeAccuracy = position.coords.altitudeAccuracy;
        const heading = position.coords.height;
        const speed = position.coords.speed;
        const timestamp = position.timestamp;

        // work with this information however you'd like!
    });
   function locationSuccess(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;
        const altitude = position.coords.altitude;
        const accuracy = position.coords.accuracy;
        const altitudeAccuracy = position.coords.altitudeAccuracy;
        const heading = position.coords.height;
        const speed = position.coords.speed;
        const timestamp = position.timestamp;
        getweather(latitude, longitude);
        // work with this information however you'd like!
    }

    function locationError(error) {
        const code = error.code;
        const message = error.message;
        // read the code and message and decide how you want to handle this!
        document.getElementById('result').innerHTML = message;
    }

    navigator.geolocation.getCurrentPosition(locationSuccess, locationError);
function getweather(latitude, longitude){
const key = "6ea81243e055f1218d43cb862f1da44c";
const link = "https://api.openweathermap.org/data/2.5/weather?lat="+latitude+"&amp;amp;lon="+longitude+"&amp;amp;units=imperial&amp;amp;apikey="+key+"&amp;amp;lang="+localStorage.lang;
let request = new XMLHttpRequest();
request.open('GET', link);
request.responseType = 'json';
request.send();
request.onload = function() {
  const data = request.response;
  showweather(data)
}};
function showweather(obj) {
  var date = new Date(obj.dt * 1000);
// Hours part from the timestamp
var hours = date.getHours();
// Minutes part from the timestamp
var minutes = "0" + date.getMinutes();
// Seconds part from the timestamp
var seconds = "0" + date.getSeconds();
var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);

  const weather = obj['weather'];
  var mt = obj.main.temp_min;
  for (let i = 0; i &amp;lt; weather.length; i++) {
    var icon = weather[i].icon;
    document.getElementById("temp").innerHTML = obj.main.temp+"&amp;amp;deg;F";
    document.getElementById("humidity").innerHTML = obj.main.humidity+"%";
    document.getElementById("description").innerHTML = weather[i].description;
    iconshow(icon,mt)
    document.getElementById("mintemp").innerHTML = mt+"&amp;amp;deg;F";
    document.getElementById("maxtemp").innerHTML = obj.main.temp_max+"&amp;amp;deg;F";
    document.getElementById("wspdg").innerHTML = obj.wind.speed+"MPH | "+obj.wind.deg+"&amp;amp;deg;";
    document.getElementById("pressure").innerHTML = obj.main.pressure;
  }
};
function iconshow(icon, mt) {
            var img = new Image();
            img.src = 
'https://openweathermap.org/img/wn/'+icon+'@2x.png';
            img.style.width = "20px";
            img.style.height = "20px";
            document.getElementById('icon').appendChild(img);
            if (mt&amp;gt;=85){
              document.getElementById("result").innerHTML="Its gonna be hot today. Bring some water wherever you go outside.";
              chrome.notifications.create('hotoutside', {
              type: 'basic',
              iconUrl: 'images/1.png',
              title: 'Test Message',
              message: 'You are awesome!',
              priority: 2
              });
            }else if(mt&amp;lt;=50){
              document.getElementById("result").innerHTML="Its going to be chilly today. Wear some warm clothes.";
            }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses the service geolocation which is a permission, to get the users location to get the weather in their area. Then using the html file it displays it in the table for the user to read. If you would like to make a settings page for your extension too than keep reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-settings-page"&gt;
  &lt;/a&gt;
  Making A Settings Page
&lt;/h2&gt;

&lt;p&gt;Want your user to have some options? Make another HTML page and js file and declare it in your manifest. You can give the user the option to change colors, language, etc. You can see mine below.&lt;br&gt;
HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width"&amp;gt;
    &amp;lt;title&amp;gt;Current Weather&amp;lt;/title&amp;gt;
    &amp;lt;link href="style.css" rel="stylesheet" type="text/css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id="body"&amp;gt;
      &amp;lt;center&amp;gt;
        &amp;lt;h1&amp;gt;Settings&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;View and set the settings for the current weather app.&amp;lt;/p&amp;gt;
        &amp;lt;h2&amp;gt;Language&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;Set the extensions language to your preferance.&amp;lt;/p&amp;gt;
        &amp;lt;select name="language" id="language"&amp;gt;
          &amp;lt;option value="en" selected&amp;gt;English&amp;lt;/option&amp;gt;
          &amp;lt;option value="de"&amp;gt;German&amp;lt;/option&amp;gt;
          &amp;lt;option value="sp"&amp;gt;Spanish&amp;lt;/option&amp;gt;
          &amp;lt;option value="ja"&amp;gt;Japanese&amp;lt;/option&amp;gt;
          &amp;lt;option value="fr"&amp;gt;French&amp;lt;/option&amp;gt;
        &amp;lt;/select&amp;gt;
        &amp;lt;div id="currentlang"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;button id="submitlang"&amp;gt;Set Language&amp;lt;/button&amp;gt;
        &amp;lt;h2&amp;gt;Privacy&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;I will never share/sell you location or information to anybody because it is your information and only you shall decide what you would like to do with your privacy. If you decide that you do not want the extension to see your location anymore go to the three dots in the upper right corner, click more tools, click on details for the extension, disable location access. Please note that the extension does not work without location access.&amp;lt;/p&amp;gt;
        &amp;lt;h3&amp;gt;Help/Support&amp;lt;/h3&amp;gt;
        &amp;lt;p&amp;gt;If you are having problems with the extension then please go to the following site as it contains a forum with help and support. &amp;lt;a href="https://github.com/Grantrocks/Current-Weather/discussions" target="_blank"&amp;gt;https://github.com/Grantrocks/Current-Weather/discussions&amp;lt;/a&amp;gt;. That is the github discussion page contatining the files for the project and help and support for anyone that needs it.&amp;lt;/p&amp;gt;
      &amp;lt;/center&amp;gt;
      &amp;lt;div id="google_translate_element"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="settings.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL}, 'google_translate_element');
}
document.getElementById("submitlang").addEventListener("click", function(){
  var sellang = document.getElementById("language").value;
  var curl = document.getElementById("currentlang");
  if (sellang=="en"){
    curl.innerHTML = "English";
    localStorage.lang = "en";
  }else if(sellang=="de"){
    curl.innerHTML = "German";
    localStorage.lang = "de";
  }else if(sellang=="sp"){
    curl.innerHTML = "Spanish";
  }else if(sellang=="ja"){
    curl.innerHTML="Japanese";
  }else if(sellang=="fr"){
    curl.innerHTML="French";
  }else{
    curl.innerHTML="None Selected!";
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#your-done"&gt;
  &lt;/a&gt;
  Your Done
&lt;/h2&gt;

&lt;p&gt;Now that your extension is made you can publish it where you would like to publish it. Google's chrome web store needs a $5 fee, Microsoft edge is free to publish and so is firefox but if you publish here you will need to change the manifest.json a little bit as it uses version 2.&lt;br&gt;
Donations are nice.&lt;br&gt;
&lt;a href="https://nowpayments.io/embeds/donation-widget?api_key=RS7T409-E6FMVXP-GP5K7YQ-W8PT55H"&gt;https://nowpayments.io/embeds/donation-widget?api_key=RS7T409-E6FMVXP-GP5K7YQ-W8PT55H&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Criar uma Exception personalizada no Magento 2</title>
      <author>Lucas Teixeira dos Santos Santana</author>
      <pubDate>Mon, 13 Dec 2021 13:26:22 +0000</pubDate>
      <link>https://dev.to/santanaluc94/criar-uma-exception-personalizada-no-magento-2-20fo</link>
      <guid>https://dev.to/santanaluc94/criar-uma-exception-personalizada-no-magento-2-20fo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contextualizando"&gt;
  &lt;/a&gt;
  Contextualizando
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#o-que-%C3%A9-uma-exception"&gt;
  &lt;/a&gt;
  O que é uma Exception?
&lt;/h3&gt;

&lt;p&gt;É um mecanismo que sinaliza um evento excepcional, significa algo que não é comum. A exceção ocorre quando acontece algo fora da regra de negócio prevista.&lt;br&gt;
O tratamento de exceção é o mecanismo responsável pelo tratamento da ocorrência de condições que alteram o fluxo normal da execução de programas de computadores.&lt;br&gt;
Exceção são usadas para fazer tratamentos no código, ou seja, podemos fazer um controle de exceção em determinada parte de um código fonte para saber qual foi o erro que levou ao problema.&lt;br&gt;
Uma exceção pode ser lançada através da palavra reservada &lt;code&gt;throw&lt;/code&gt; quando o trecho de código estiver envolvido na palavra reservada &lt;code&gt;try&lt;/code&gt;, e capturada através da palavra reservada &lt;code&gt;catch&lt;/code&gt;. Cada bloco &lt;code&gt;try&lt;/code&gt; precisa ter ao menos um &lt;code&gt;catch&lt;/code&gt; ou &lt;code&gt;finally&lt;/code&gt; correspondente.&lt;br&gt;
Uma classe de exceção definida pelo usuário pode ser criada herdando a classe &lt;code&gt;\Exception&lt;/code&gt;, consequentemente, o objeto lançado precisa ser uma instância da classe &lt;code&gt;\Exception&lt;/code&gt; ou uma subclasse de &lt;code&gt;\Exception&lt;/code&gt;. Tentar lançar um objeto sem essa ascendência resultará em um erro fatal. Para saber mais, consulte a &lt;a href="https://www.php.net/manual/pt_BR/language.exceptions.php"&gt;documentação oficial do PHP sobre as exceptions&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#c%C3%B3digo-para-criar-uma-exception"&gt;
  &lt;/a&gt;
  Código para criar uma Exception
&lt;/h2&gt;

&lt;p&gt;Este tipo de arquivo deve seguir a estruturas de pastas &lt;code&gt;\{Vendor}\{Module}\Exception\{Name}Exception.php&lt;/code&gt;. Cada arquivo de &lt;em&gt;Exception&lt;/em&gt; deve estender a classe &lt;code&gt;\Magento\Framework\Exception\LocalizedException&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Exception\LocalizedException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Phrase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;LocalizedException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;Phrase&lt;/span&gt; &lt;span class="nv"&gt;$phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$cause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="nv"&gt;$code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$phrase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cause&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A classe &lt;code&gt;\Magento\Framework\Exception\LocalizedException&lt;/code&gt; estende da classe &lt;code&gt;\Exception&lt;/code&gt; do PHP e é estendida por um conjunto de classes que o próprio Magento já disponibiliza para o uso, estas classes de excessão estão disponíveis no caminho &lt;code&gt;\Magento\Framework\Exception&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disparando-uma-excess%C3%A3o"&gt;
  &lt;/a&gt;
  Disparando uma excessão
&lt;/h3&gt;

&lt;p&gt;Ao disparar uma excessão, o código será interrompido e será "capturado" pelo primeiro &lt;code&gt;catch&lt;/code&gt; que envolverá o código (podendo ser de outra função ou método. Para disparar uma excessão personalizada no Magento, é igual a lançar qualquer outra excessão.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{Message exception}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Valores entre chaves (&lt;code&gt;{test}&lt;/code&gt;) devem ser alterados na implementação do código.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#habilitando-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Habilitando as alterações
&lt;/h3&gt;

&lt;p&gt;Execute o comando PHP para limpar todos os caches de armazenamento em cache do processos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php bin/magento cache:clean
php bin/magento flush
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diret%C3%B3rios-e-arquivos"&gt;
  &lt;/a&gt;
  Diretórios e Arquivos
&lt;/h3&gt;

&lt;p&gt;Segue a a lista de diretórios e arquivos que devem ser criados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- app/
  - code/
    - {Vendor}/
      - {Module}/
        - etc/
          - module.xml
        - Exception/
          - {Name}Exception.php
        - registration.php
        - composer.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>magento2</category>
      <category>tutorial</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
