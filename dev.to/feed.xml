<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS Pixel Art Generator</title>
      <author>Johnny Simpson</author>
      <pubDate>Sun, 21 Nov 2021 15:54:24 +0000</pubDate>
      <link>https://dev.to/smpnjn/css-pixel-art-generator-5d1</link>
      <guid>https://dev.to/smpnjn/css-pixel-art-generator-5d1</guid>
      <description>&lt;p&gt;Recently, I &lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;read an article&lt;/a&gt; outlining how to create CSS pixel art with box shadows. I thought it was a really cool idea - and thought it'd be interesting to make a generator with Javascript to let you create exportable pixel art from the browser using this effect. &lt;a href="https://codepen.io/smpnjn/pen/OJjGgPM"&gt;In the Codepen demo&lt;/a&gt; (shown below), you can draw your pixel creations, and then click "Generate CSS" to get your pixel art in CSS, which you can copy into your web pages. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it%C2%A0works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;As described &lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;in the article&lt;/a&gt;, we use scaled up box shadows to act as pixels on the screen. We can scale these up and down to make our pixel art bigger or smaller.&lt;br&gt;
Since each box shadow is 1px by 1px, we can create a piece of pixel art where every "pixel" is 1x1. If we want each pixel to be 20x20, we would simply use transform to scale it by 20x:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve the effect we are after, we then use Javascript to create a UI which lets us draw our pixel art creations. The code for the UI can be found on codepen here, or if you like, find it below:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/smpnjn/embed/OJjGgPM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-javascript"&gt;
  &lt;/a&gt;
  Overview of Javascript
&lt;/h2&gt;

&lt;p&gt;To get this all to work, we have to use Javascript. The first step was generating a grid of pixels using a simple loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;drawing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;eraser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mousedown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`calc(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="mf"&gt;0.825&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;rem + &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`calc(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="mf"&gt;0.825&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;rem + &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`calc(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="mf"&gt;0.825&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;rem + &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;createEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-x-coordinate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-y-coordinate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This ultimately creates about 40x40 pixels, or 1600 new HTML elements. You can easily scale this up for bigger experiments, but 40x40 works fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-a-users-mouse-movements"&gt;
  &lt;/a&gt;
  Tracking a users mouse movements
&lt;/h2&gt;

&lt;p&gt;We can then track a user's mouse movements with three events: pointerdown, pointermove and pointerup. Since we have to apply this to all pixels, we use a loop to loop over each pixel to add the event.&lt;br&gt;
Then, if a user continues to hold down, we can track which pixel they are over using e.target, which returns the current HTML entity which is being hovered over on pointermove. If they are using the eraser, we can take that into consideration here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointerdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`#101532`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointermove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawing&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`#101532`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointerup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we set up a few events on the colors and eraser, so we can track what tool and color is being selected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.colors &amp;gt; div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.eraser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.colors &amp;gt; div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.colors &amp;gt; div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.eraser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When I saw the original article, I thought it was really cool to create pixel art with just CSS - but it would be even cooler to create a way to export pixel art creations - and it wasn't so hard with just a little bit of Javascript. Here are some useful links to the source code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;Article on CSS Pixel Art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/smpnjn/pen/OJjGgPM"&gt;Source Code on Code Pen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/smpnjn/CSS-Pixel-Art"&gt;Source Code on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Singleton design pattern. JS/TS Examples.</title>
      <author>Vlad R</author>
      <pubDate>Sun, 21 Nov 2021 15:47:52 +0000</pubDate>
      <link>https://dev.to/ryabinin/singleton-design-pattern-jsts-examples-2f8l</link>
      <guid>https://dev.to/ryabinin/singleton-design-pattern-jsts-examples-2f8l</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#implementation"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pros-and-cons"&gt;Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So why do we need to know design patterns?&lt;/p&gt;

&lt;p&gt;First of all it helps you to save your time. Programming is not a new thing, a lot of problems has been already solved before. Lots of patterns and approaches have been invented and most of them are time tested. If you don't want to reinvent the wheel, you might be interested to know more about those preexisting patterns and approaches.&lt;br&gt;
So &lt;em&gt;design patterns are typical solutions to commonly occurring problems in programming.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this short article we are going to cover the singleton design pattern. This pattern is a type of creational design patterns and probably one of the simplest ones.&lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The Singleton pattern is just a way of creating a single object that is shared amongst a bunch of different resources throughout your application without having to recreate that object or losing the information inside of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. It ensures that there is only one instance of a given class&lt;/strong&gt;&lt;br&gt;
For example we may create a logger class which prints logs and keeps them inside the class. Following this patters you have to have a single instance of the logger which prevents losing/overwriting the logs list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. This pattern also provides a way to access the single instance globally&lt;/strong&gt;&lt;br&gt;
Going back to our logger class, it's pretty much obvious that we need it to be accessible from any file in our project. Because errors may appear anywhere and we want to log them.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Pros (Global variables vs Singleton):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparing to global variables, Singletons can not be modified(speaking of &lt;code&gt;var&lt;/code&gt; in JS).&lt;/li&gt;
&lt;li&gt;Unlike global variables it doesn't exist until instantiated.&lt;/li&gt;
&lt;li&gt;Another advantage is that you are absolutely sure of the number of instances.&lt;/li&gt;
&lt;li&gt;You can manage the state of that instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of using this design pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someday when you have a lot of parts of your app rely on that Singleton obj it may became hard to change Singleton obj itself.&lt;/li&gt;
&lt;li&gt;As we already know Singleton's methods could be called from different parts of your app simultaneously at the same time which may cause a data/variables within this object to be overwritten/read incorrectly.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FYI: there are more cons actually, but we're not going to cover all of them in this article.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;JS Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent modifying the instance property,&lt;/span&gt;
  &lt;span class="c1"&gt;// for example set it to null to create a second instance.&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent modifying/overwriting logs array.&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="c1"&gt;// classes in JavaScript...&lt;/span&gt;
  &lt;span class="c1"&gt;//    may not have a private field named '#constructor'&lt;/span&gt;
  &lt;span class="c1"&gt;// so it's not possible to disable...&lt;/span&gt;
  &lt;span class="c1"&gt;//    calling constructor() {} in JS.&lt;/span&gt;
  &lt;span class="c1"&gt;// if you try new SingletonLogger()...&lt;/span&gt;
  &lt;span class="c1"&gt;//    with private constructor in TS it will throw an error&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can not instantiate second singleton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// getInstance should be static...&lt;/span&gt;
  &lt;span class="c1"&gt;//    to be able to call SingletonLogger.getInstance()&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// since #logs array is private, we need to create a getter&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: first err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: second err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err, second err]&lt;/span&gt;

&lt;span class="c1"&gt;// const logger3 = new SingletonLogger();&lt;/span&gt;
&lt;span class="c1"&gt;// Error: Can not instantiate second singleton&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TS example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="c1"&gt;// const singleton = new SingletonLogger(); // ...&lt;/span&gt;
&lt;span class="c1"&gt;//    TS won't let you do this&lt;/span&gt;
&lt;span class="c1"&gt;// Constructor of class 'SingletonLogger' is private...&lt;/span&gt;
&lt;span class="c1"&gt;//    and only accessible within the class declaration.&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: first err &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err] &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sameSingleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sameSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: second err &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sameSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err, second err] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;To be honest I haven't found any use cases in Front End development where singleton design pattern would be &lt;strong&gt;really helpful&lt;/strong&gt;. Of course you can create the same logger as we did above or use the cache as a singleton object. But I personally think you will rarely have to use it.&lt;br&gt;
Anyways, this design pattern is a part of &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of Four design patterns&lt;/a&gt; and knowing all these patterns will take you to the next level as a dev.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Any feedback is appreciated!😊&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@campoilucas"&gt;Lucas Campoi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>oop</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>Starting with React-Redux</title>
      <author>Mohit Maroliya</author>
      <pubDate>Sun, 21 Nov 2021 14:45:55 +0000</pubDate>
      <link>https://dev.to/mohitm15/starting-with-react-redux-1dno</link>
      <guid>https://dev.to/mohitm15/starting-with-react-redux-1dno</guid>
      <description>&lt;p&gt;Hello everyone, this is my first post on &lt;strong&gt;Dev.to&lt;/strong&gt;. In this post, I am trying to explain the use of &lt;strong&gt;Redux&lt;/strong&gt; in ReactJS with an example. Here, I have taken some references from YouTube Channel &lt;strong&gt;CodeWithHarry&lt;/strong&gt; and Google for information. I will first explain to you the need for &lt;strong&gt;Redux&lt;/strong&gt; and explain it with the code. For reference, you can check out Github to view the code anytime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redux-starter-boilerplate.herokuapp.com/"&gt;View Live Demo&lt;/a&gt;            &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mohitm15/redux-boilerplate/tree/master/redux-boilerplate"&gt;View on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-redux-"&gt;
  &lt;/a&gt;
  Why do we need Redux ?
&lt;/h2&gt;

&lt;p&gt;When a JavaScript Application grows big, it becomes difficult to manage its &lt;strong&gt;state&lt;/strong&gt;. For example, in the given architecture, if I want to use the state defined in Child_C of the Contact.js in the Child_B of the Home.js, then I had to do &lt;strong&gt;prop-drilling&lt;/strong&gt;, where I have to pass the &lt;strong&gt;state&lt;/strong&gt; as props over various components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrdGVNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ugzngpwex7cxfc74n40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrdGVNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ugzngpwex7cxfc74n40.png" alt="Prop-drilling in ReactJS" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But Redux solves this problem by managing the application's state with the help of a single global object called &lt;code&gt;Store.&lt;/code&gt; This provides consistency to the application and makes testing easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-architecture"&gt;
  &lt;/a&gt;
  Redux -Architecture
&lt;/h2&gt;

&lt;p&gt;The Architecture consists of &lt;strong&gt;4 components&lt;/strong&gt; mainly - &lt;code&gt;Action, Reducer, Store and View&lt;/code&gt;. And believe me, they work in the same way as their name suggests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6c7dVhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm42cl1lpmqwjlya0qn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6c7dVhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm42cl1lpmqwjlya0qn0.png" alt="Redux Architecture" width="416" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Action is a plain object that describes the intention to cause change, like adding or deleting a task in a To-do-List app.&lt;/li&gt;
&lt;li&gt;Reducer is a function that determines changes to an application state. Like in the To-do-List app, action will trigger a change in the value of state &lt;code&gt;task_Array&lt;/code&gt; that the reducer will determine. It returns the new state and tells the store how to do it. Simply, it uses the action it receives to determine the change.&lt;/li&gt;
&lt;li&gt;Store projects all the state variables to the view, which is the UI of the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's make our hands dirty and start coding with an example to understand &lt;strong&gt;Redux&lt;/strong&gt; more deeply. I will tell you the concept and later, you can start with your stuff to do with it. Also, I have added some tasks for deep understanding in the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-redux-boilerplate"&gt;
  &lt;/a&gt;
  Example - Redux Boilerplate.
&lt;/h2&gt;

&lt;p&gt;Here we try &lt;strong&gt;to create a webApp where we define the states in different components and perform onclick events from different components. The states we define are the &lt;code&gt;countValue&lt;/code&gt; and &lt;code&gt;darkMode&lt;/code&gt; enabling.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you directly want to see the whole code, you can view it on Github. 🤠&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mohitm15/redux-boilerplate/tree/master/redux-boilerplate"&gt;View on Github&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-react-app"&gt;
  &lt;/a&gt;
  1. Setting Up React App
&lt;/h3&gt;

&lt;p&gt;Create a folder in your desktop named &lt;code&gt;redux-boilerplate&lt;/code&gt; and open it in the &lt;strong&gt;VSCode&lt;/strong&gt;. Now, open the terminal and create the react app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app redux-boilerplate&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You’ll need to have Node &amp;gt;= 14.0.0 and npm &amp;gt;= 5.6 on your machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now add the Bootstrap by using the CDN link of CSS (&lt;a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/#css"&gt;here&lt;/a&gt;) and script link (&lt;a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/#js"&gt;here&lt;/a&gt;) .&lt;/p&gt;

&lt;p&gt;If you are new , just simply copy the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; from both the links and paste it to the &lt;strong&gt;public&amp;gt;&amp;gt;index.html&lt;/strong&gt; file at appropriate place.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ProTip:&lt;/strong&gt;To check bootstrap added successfully, just simply paste the code to &lt;code&gt;App.js&lt;/code&gt; file and see red colored font.&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
function App() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1 className="text-danger"&amp;gt; Hello World!&amp;lt;/h1&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-navbar-and-shop-component"&gt;
  &lt;/a&gt;
  2. Creating NavBar and Shop Component
&lt;/h2&gt;

&lt;p&gt;Create a folder &lt;strong&gt;components&lt;/strong&gt; in &lt;code&gt;src&lt;/code&gt; folder. Now create a file &lt;code&gt;Navbar.js&lt;/code&gt; &amp;amp; another file &lt;code&gt;Shop.js&lt;/code&gt; both in components folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#navbarjs"&gt;
  &lt;/a&gt;
  NavBar.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

const Navbar = () =&amp;gt; {

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;nav className="navbar navbar-expand-lg navbar-dark bg-dark"&amp;gt;
        &amp;lt;div className="container-fluid"&amp;gt;
          &amp;lt;a className="navbar-brand" href="/"&amp;gt;
            Redux BoilerPlate
          &amp;lt;/a&amp;gt;
          &amp;lt;button
            className="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
          &amp;gt;
            &amp;lt;span className="navbar-toggler-icon"&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;/button&amp;gt;
          &amp;lt;div className="collapse navbar-collapse" id="navbarSupportedContent"&amp;gt;
            &amp;lt;ul className="navbar-nav me-auto mb-2 mb-lg-0"&amp;gt;
              &amp;lt;li className="nav-item"&amp;gt;
                &amp;lt;a className="nav-link active" aria-current="page" href="/"&amp;gt;
                  Home
                &amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li className="nav-item"&amp;gt;
                &amp;lt;a className="nav-link" href="/about"&amp;gt;
                  About
                &amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;

                &amp;lt;div className="form-check form-switch mx-4"&amp;gt;
                  &amp;lt;input className="form-check-input" type="checkbox" id="flexSwitchCheckDefault" /&amp;gt;
                  &amp;lt;label className="form-check-label text-light" htmlFor="flexSwitchCheckDefault"&amp;gt;Darkmode&amp;lt;/label&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;button className="btn btn-info mx-1"&amp;gt;CountValue : 0 &amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/nav&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Navbar;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shopjs"&gt;
  &lt;/a&gt;
  Shop.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

const Shop = () =&amp;gt; {

    return (
        &amp;lt;&amp;gt;
        &amp;lt;div className="container p-3"&amp;gt; 
        &amp;lt;div className={`alert alert-success` } role="alert"&amp;gt;
            &amp;lt;h2&amp;gt;Redux BoilerPlate&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
            &amp;lt;h3 className="my-5"&amp;gt;Simple Starter template for redux-store&amp;lt;/h3&amp;gt;

            &amp;lt;div className="container my-5"&amp;gt;
                &amp;lt;h1 className="display-1"&amp;gt;This is LightMode&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;div className="container d-flex"&amp;gt;
                &amp;lt;button className="btn-lg btn-success mx-4" &amp;gt; + &amp;lt;/button&amp;gt;
                    &amp;lt;h1 className="display-6"&amp;gt;You Count Value = 0 &amp;lt;/h1&amp;gt;
                &amp;lt;button className="btn-lg btn-danger mx-4" &amp;gt; - &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/&amp;gt;
    )
}

export default Shop;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the above code in &lt;strong&gt;Navbar.js&lt;/strong&gt; &amp;amp; &lt;strong&gt;Shop.js&lt;/strong&gt; respectively .Add the components in &lt;strong&gt;App.js&lt;/strong&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Navbar from './components/Navbar';
import Shop from './components/Shop';
.
.
.
  return (
    &amp;lt;&amp;gt;
      &amp;lt;Navbar /&amp;gt;
       &amp;lt;div className="container p-3"&amp;gt;
        &amp;lt;Shop /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show the navbar at top and Shop component on screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-installing-redux"&gt;
  &lt;/a&gt;
  3. Installing Redux
&lt;/h3&gt;

&lt;p&gt;To install the redux , just open a new tab in terminal and run &lt;br&gt;
          &lt;code&gt;npm i redux&lt;/code&gt;&lt;br&gt;
          &lt;code&gt;npm i react-redux&lt;/code&gt;&lt;br&gt;
          &lt;code&gt;npm i redux-thunk&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Get more info &lt;a href="https://www.npmjs.com/package/redux"&gt;here&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#4-creating-actioncreator-and-reducers"&gt;
  &lt;/a&gt;
  4. Creating Action-Creator and Reducers
&lt;/h3&gt;

&lt;p&gt;Now we'll create action-creators and reducers function which will change the &lt;code&gt;countValue&lt;/code&gt; and enable &lt;code&gt;darkMode&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As discussed, action-creators create the action to change the state variable and reducer is a pure function that takes action &amp;amp; the previous state of the application and returns the new state.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Action consists of &lt;em&gt;type&lt;/em&gt; and &lt;em&gt;payload&lt;/em&gt; to be supplied to Reducer function. The type defines the action-type and the payload defines the value to be substituted with the previous one.&lt;/p&gt;

&lt;p&gt;To do this, we will create a folder name &lt;code&gt;state&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; folder. Inside the &lt;code&gt;src&lt;/code&gt; folder, we create two more folders :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;action-creators&lt;/li&gt;
&lt;li&gt;reducer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61oJkAzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39n9pch22sbsmfjn9625.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61oJkAzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39n9pch22sbsmfjn9625.png" alt="directory structure" width="167" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we create &lt;code&gt;index.js&lt;/code&gt; file in &lt;code&gt;action-creators&lt;/code&gt; folder and write code for action-creator. We will create action here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const increaseCount = (countValue) =&amp;gt; {
    return (dispatch) =&amp;gt; {
        dispatch ({
            type: 'increase',
            payload: countValue
        })
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;strong&gt;increaseCount&lt;/strong&gt; is a function that returns a function named &lt;code&gt;dispatch&lt;/code&gt; which dispatches type &amp;amp; payload.  &lt;/p&gt;

&lt;p&gt;Try to write action-creators for &lt;code&gt;decreaseCount&lt;/code&gt;, &lt;code&gt;enableDarkMode&lt;/code&gt; and &lt;code&gt;enableLightMode&lt;/code&gt; in the same file.&lt;/p&gt;

&lt;p&gt;You can compare your code with the full code of &lt;code&gt;state/action-creators/index.js&lt;/code&gt; from &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/state/action-creators/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we make &lt;code&gt;Reducers&lt;/code&gt;. Reducers need not to be a single one, for the different states, we have different reducers. Like here, we'll create two reducers file named &lt;code&gt;countReducer.js&lt;/code&gt; and &lt;code&gt;darkmodeReducer.js&lt;/code&gt; inside &lt;code&gt;reducer&lt;/code&gt; folder, which will look after the &lt;code&gt;countValue&lt;/code&gt; and &lt;code&gt;darkMode&lt;/code&gt; state variables.&lt;/p&gt;

&lt;p&gt;Let's create &lt;code&gt;countReducer.js&lt;/code&gt; to change the count value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const reducer = (state=0, action) =&amp;gt; {
    if(action.type === 'increase') {
        return state +  action.payload;
    }
    else if(action.type === 'decrease') {
        return state - action.payload
    }
    else {
        return state;
    }

}

export default reducer;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, it takes the state variable and action from the action creator as a parameter and returns the modified state with the help of the action payload.&lt;/p&gt;

&lt;p&gt;Try to create &lt;code&gt;darkModeReducer.js&lt;/code&gt; by own first and compare your results from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const reducer = (state= 'OFF', action) =&amp;gt; {
    if(action.type === 'darkmode') {
        state = action.payload;
    }
    else if(action.type === 'lightmode') {
        state = action.payload;
    }
    return state;
}

export default reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h4&gt;

&lt;p&gt;Since for large complex applications, we know that we require many reducers and handling them individually is a messy task. So redux provides us &lt;a href="https://redux.js.org/api/combinereducers"&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt;, which combines all the reducer functions and export them as a single reducer function.&lt;/p&gt;

&lt;p&gt;For this, create a file &lt;code&gt;index.js&lt;/code&gt; in &lt;code&gt;reducer&lt;/code&gt; folder and paste the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { combineReducers } from "redux";
import countValueReducer from './countReducer';
import darkmodeReducer from './darkmodeReducer';

//combinnig all the reducers here
const reducer = combineReducers({
    countValue: countValueReducer,
    darkmode: darkmodeReducer
})

export default reducer;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-creating-store"&gt;
  &lt;/a&gt;
  5. Creating Store
&lt;/h3&gt;

&lt;p&gt;To recall, a store is a global place where all the things defined is exposed to all the application. Simply, every part of the application gets access to the store.&lt;/p&gt;

&lt;p&gt;Here, we will create a file &lt;code&gt;store.js&lt;/code&gt; inside the &lt;code&gt;state&lt;/code&gt; directory. Use to code below for &lt;code&gt;store.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { applyMiddleware, createStore } from "redux";
import thunk from "redux-thunk";
import reducer from "./reducer";

export const store = createStore(reducer,{}, applyMiddleware(thunk));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have seen many new things here, let's understand them one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://redux.js.org/api/createstore"&gt;createStore&lt;/a&gt;&lt;/strong&gt; : It takes the reducers, preloaded state and enhancer function(optional) to create the store. It returns an object that holds the complete state of your app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://redux.js.org/api/applymiddleware"&gt;applyMiddleware&lt;/a&gt;&lt;/strong&gt; : Returns a store enhancer that applies the given middleware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/reduxjs/redux-thunk#readme"&gt;redux-thunk&lt;/a&gt;&lt;/strong&gt;: Helps to execute asynchronous functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hurray! store is created. ✨&lt;/p&gt;

&lt;p&gt;Now I want to give access of store to the overall application. So we go to the file &lt;code&gt;src/index.js&lt;/code&gt; (main index.js file) and import the store here. The file will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
.
.
.
import { Provider } from 'react-redux';
import { store } from './state/store';

ReactDOM.render(
 .
 .
    &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
    &amp;lt;/Provider&amp;gt;
 .
 .
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See complete file &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also we create a file &lt;code&gt;index.js&lt;/code&gt; inside &lt;code&gt;state&lt;/code&gt; directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaS4mPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgi898gvhcwvrczu0mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaS4mPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgi898gvhcwvrczu0mp.png" alt="Image description" width="171" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will increase the accessbility of action-creators as we export all the action-creators from here to all the components like &lt;em&gt;Navbar.js&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export * as actionCreators from './action-creators/index';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-second-last-step"&gt;
  &lt;/a&gt;
  6. Second Last Step
&lt;/h3&gt;

&lt;p&gt;As far as now, we have not added any function to the &lt;code&gt;+&lt;/code&gt;/ &lt;code&gt;-&lt;/code&gt; button and &lt;code&gt;darkmode&lt;/code&gt; toggle, but now we got access to the state variables through store, we can use them to display their values on the UI.&lt;/p&gt;

&lt;p&gt;To access the state, we use &lt;a href="https://react-redux.js.org/api/hooks#useselector"&gt;&lt;code&gt;useSelector&lt;/code&gt;&lt;/a&gt; hook. In the &lt;code&gt;navbar.js&lt;/code&gt; file we import the hook first using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector } from "react-redux";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then use it as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
 const countValue = useSelector((state) =&amp;gt; state.countValue);
 const darkmode = useSelector((state) =&amp;gt; state.darkmode);
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And change the value of countValue from &lt;code&gt;0 to {countValue}&lt;/code&gt;, like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button className="btn btn-info mx-1"&amp;gt;CountValue : {countValue}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far we have use the countValue state, we also need to use &lt;code&gt;darkMode&lt;/code&gt; state in &lt;code&gt;App.js&lt;/code&gt; and &lt;code&gt;Shop.js&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appjs"&gt;
  &lt;/a&gt;
  App.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector } from "react-redux";
import './App.css';
import Navbar from './components/Navbar';
import Shop from './components/Shop';

function App() {

const darkmode = useSelector(state =&amp;gt; state.darkmode);

let darkmodeStyle = {
        backgroundColor:'#2d2d2d',
        color:'whitesmoke'
    }

  return (
    &amp;lt;&amp;gt;
      &amp;lt;Navbar /&amp;gt;
      &amp;lt;div className="container p-3" style={darkmodeStyle}&amp;gt;
        &amp;lt;Shop /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;shop.js&lt;/code&gt;, just simply import the &lt;code&gt;useSelector&lt;/code&gt; hook like in &lt;code&gt;Navbar.js&lt;/code&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector } from "react-redux";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then use it as inside &lt;code&gt;Shop&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
 const darkmode = useSelector((state) =&amp;gt; state.darkmode);
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-last-step"&gt;
  &lt;/a&gt;
  7. Last Step
&lt;/h3&gt;

&lt;p&gt;Now we have access to the variables that we use to bring the changes on view.&lt;/p&gt;

&lt;p&gt;Here, state values will be first changed by the user from the front-end. Then, we need to generate those actions, which triggers reducer functions and finally alter the values of the state on view.&lt;/p&gt;

&lt;p&gt;To do this we use &lt;a href="https://react-redux.js.org/api/hooks#usedispatch"&gt;&lt;code&gt;useDispatch&lt;/code&gt;&lt;/a&gt; hook, which dispatches the action-creators and &lt;a href="https://redux.js.org/api/bindactioncreators"&gt;&lt;code&gt;bindActionCreators&lt;/code&gt;&lt;/a&gt; to bind all action creators.&lt;/p&gt;

&lt;p&gt;Time to use them!&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Navbar.js&lt;/code&gt; and &lt;code&gt;Shop.js&lt;/code&gt;, import them as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector, useDispatch } from "react-redux";
import { bindActionCreators } from 'redux';
import { actionCreators } from '../state/index';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;code&gt;Navbar.js&lt;/code&gt;, we use &lt;code&gt;enableDarkMode&lt;/code&gt; action-creator to dispatch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dispatch = useDispatch();//to dispacth the action creator functions
  const {enableDarkMode} = bindActionCreators(actionCreators, dispatch);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add this &lt;code&gt;darkMode&lt;/code&gt; functionality to &lt;strong&gt;toggle button&lt;/strong&gt; present in navbar like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input className="form-check-input" onClick={()=&amp;gt;{darkmode === 'OFF'?enableDarkMode('ON'):enableDarkMode('OFF')}} type="checkbox" id="flexSwitchCheckDefault" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the styling in the &lt;code&gt;App.js&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.

const darkmode = useSelector(state =&amp;gt; state.darkmode);
let darkmodeStyle = {}

if(darkmode === 'ON') {
    darkmodeStyle = {
        backgroundColor:'#2d2d2d',
        color:'whitesmoke'
    }
}

  return (
    &amp;lt;&amp;gt;
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also change a &lt;strong&gt;div&lt;/strong&gt; component in &lt;code&gt;Shop.js&lt;/code&gt; to switch the title on the main page from &lt;code&gt;LightMode&lt;/code&gt; to &lt;code&gt;DarkMode&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shopjs"&gt;
  &lt;/a&gt;
  Shop.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="container my-5"&amp;gt;
                &amp;lt;h1 className="display-1"&amp;gt;This is {darkmode === "ON" ? "DarkMode" : "LightMode"}&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Now you will be able to change background color.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyr65oyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d13blemrjcym6o6k69be.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyr65oyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d13blemrjcym6o6k69be.gif" alt="darkMode GIF" width="600" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;countValue&lt;/code&gt; action-creator to dispatch,  we need to code in &lt;code&gt;Shop.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dispatch = useDispatch();
const balance = useSelector(state =&amp;gt; state.countValue);
const {increaseCount, decreaseCount} = bindActionCreators(actionCreators,dispatch);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add this &lt;code&gt;increaseCount/decreaseCount&lt;/code&gt; functionality to &lt;strong&gt;+ and - buttons&lt;/strong&gt; present in screen like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="container d-flex"&amp;gt;
                &amp;lt;button className="btn-lg btn-success mx-4" onClick={()=&amp;gt;(increaseCount(1))}&amp;gt; + &amp;lt;/button&amp;gt;
                    &amp;lt;h1 className="display-6"&amp;gt;You Count Value = {balance} &amp;lt;/h1&amp;gt;
                &amp;lt;button className="btn-lg btn-danger mx-4" onClick={()=&amp;gt;(decreaseCount(1))}&amp;gt; - &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Now you will be able to change the countValue.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02ub9Ok2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr8qd9e8y9qfbrmcz6qm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02ub9Ok2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr8qd9e8y9qfbrmcz6qm.gif" alt="countValue GIF" width="600" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For reference,&lt;br&gt;
Complete Navbar.js file is &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/components/Navbar.js"&gt;here&lt;/a&gt;.&lt;br&gt;
Complete Shop.js file is &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/components/Shop.js"&gt;here&lt;/a&gt;.&lt;br&gt;
Complete App.js file is &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/App.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Cheers! 🍻, you have build the basic template for redux. Now you can come up with as many functionalities and components to the application. You can take up some challenges by trying tasks like adding a login page, displaying the profile page, or categorizing the type of users. &lt;/p&gt;

&lt;p&gt;Try to come up with your own ideas and send the PRs over &lt;a href="https://github.com/mohitm15/redux-boilerplate/tree/master/redux-boilerplate"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your time. Happy Coding ! ☘️&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Linkedin Learning 🧑‍💻 Free For Lifetime</title>
      <author>Ravi Sharma</author>
      <pubDate>Sun, 21 Nov 2021 14:42:15 +0000</pubDate>
      <link>https://dev.to/ravics09/linkedin-learning-free-for-lifetime-4je</link>
      <guid>https://dev.to/ravics09/linkedin-learning-free-for-lifetime-4je</guid>
      <description>&lt;h2&gt;
  &lt;a href="#in-this-post-i-will-show-you-how-to-get-linkedin-learnings-lifetime-plan-for-free-"&gt;
  &lt;/a&gt;
  In this post I will show you how to get Linkedin Learning’s Lifetime plan for free 🥷 ! 
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#steps-to-follow"&gt;
  &lt;/a&gt;
  Steps to follow
&lt;/h1&gt;

&lt;p&gt;1.Enable any US VPN or Proxy then visit this &lt;a href="https://starklibrary.org/home/contact-us/qt/"&gt;Link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2.Now you will have to fill the form on the link above. However, you can’t fill in random info using fake generators as the websites validate the stress address &amp;amp; last name through some database. To bypass this, you need to visit this &lt;a href="https://www.ohioresidentdatabase.com/"&gt;Link&lt;/a&gt; and enter any name + city combo. (You can find a list of cities on that link).&lt;/p&gt;

&lt;p&gt;3.Use the info from there to fill the form. You can use your real email address &amp;amp; enter a pin that you will remember.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6n9lV6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn743y0r3st5i9pcm3zl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6n9lV6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn743y0r3st5i9pcm3zl.jpeg" alt="Input Form" width="796" height="1000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may skip the telephone field as it isn’t compulsory or enter any random number.&lt;/p&gt;

&lt;p&gt;4.That’s it, your form will be approved within seconds &amp;amp; you’ll get an email with the library card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBgQvVG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4buy7o2dniz29j5kvaww.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBgQvVG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4buy7o2dniz29j5kvaww.jpeg" alt="Stark Library eCard" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.Use that to log in here &lt;a href="https://www.linkedin%E2%80%A6login/go/oh0039"&gt;https://www.linkedin…login/go/oh0039&lt;/a&gt; 39 along with your pin. You should now have Linkedin Learning for free.&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once it expires, log out, clear cookies, clean browser, Repeat it again, so, it does make sense, why it says lifetime in the title! Happy Learning! ❤️&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>learning</category>
      <category>react</category>
    </item>
    <item>
      <title>Visually Review HTML file changes introduced on a Pull Request with Comment Webpage Screenshot GitHub Action</title>
      <author>Maksudul Haque</author>
      <pubDate>Sun, 21 Nov 2021 14:22:56 +0000</pubDate>
      <link>https://dev.to/saadmk11/visually-review-html-file-changes-introduced-on-a-pull-request-with-comment-webpage-screenshot-github-action-43gd</link>
      <guid>https://dev.to/saadmk11/visually-review-html-file-changes-introduced-on-a-pull-request-with-comment-webpage-screenshot-github-action-43gd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h2&gt;

&lt;p&gt;Comment Webpage Screenshot is a GitHub Action that &lt;strong&gt;captures screenshots of webpages&lt;/strong&gt; and &lt;strong&gt;HTML files&lt;/strong&gt; located in the repository, uploads them to an Image Upload Service and &lt;strong&gt;comments the screenshots&lt;/strong&gt; on the &lt;strong&gt;pull request&lt;/strong&gt; that triggered the action.&lt;/p&gt;

&lt;p&gt;This action helps maintainers &lt;strong&gt;visually review&lt;/strong&gt; HTML file changes introduced on a Pull Request by adding comments with the screenshots of the latest HTML file changes on the Pull Request&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h2&gt;

&lt;p&gt;Here are the links for Comment Webpage Screenshot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub repository:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/saadmk11"&gt;
        saadmk11
      &lt;/a&gt; / &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;
        comment-webpage-screenshot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Comment Webpage Screenshot is a GitHub Action that captures screenshots of web pages and HTML files located in the repository, uploads them to an Image Upload Service and comments the screenshots on the pull request that triggered the action
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Comment Webpage Screenshot&lt;/h1&gt;
&lt;p&gt;Comment Webpage Screenshot is a GitHub Action that &lt;strong&gt;captures screenshots&lt;/strong&gt; of
&lt;strong&gt;web pages&lt;/strong&gt; and &lt;strong&gt;HTML files&lt;/strong&gt; located in the repository
uploads them to an &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot#available-image-upload-services"&gt;Image Upload Service&lt;/a&gt; and
&lt;strong&gt;comments&lt;/strong&gt; the screenshots on the &lt;strong&gt;pull request&lt;/strong&gt; that &lt;strong&gt;triggered&lt;/strong&gt; the action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This Action Only Works on Pull Requests.&lt;/p&gt;
&lt;h2&gt;
Workflow inputs&lt;/h2&gt;
&lt;p&gt;These are the inputs that can be provided on the workflow.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Image Upload Service Name (Options are: &lt;code&gt;github_branch&lt;/code&gt;, &lt;code&gt;imgur&lt;/code&gt;) &lt;strong&gt;&lt;a href="https://github.com/saadmk11/comment-webpage-screenshot#available-image-upload-services"&gt;More Details&lt;/a&gt;&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;github_branch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;capture_changed_html_files&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Enable or Disable Screenshot Capture for Changed HTML Files on the Pull Request (Options are: &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;capture_html_file_paths&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Comma Seperated paths to the HTML files to be captured (Example: &lt;code&gt;/pages/index.html, about.html&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;capture_urls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Comma Seperated URLs to be captured (Example: &lt;code&gt;https://dev.example.com, https://dev.example.com/about.html&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;github_token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; provided by the workflow run or Personal Access Token (PAT)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;github.token&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Example Workflow&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Marketplace:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/marketplace/actions/comment-webpage-screenshot"&gt;https://github.com/marketplace/actions/comment-webpage-screenshot&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#example-capture-screenshots-for-static-html-pages-built-with-tailwindcss"&gt;
  &lt;/a&gt;
  Example: Capture Screenshots for Static HTML Pages built with TailwindCSS
&lt;/h3&gt;

&lt;p&gt;If your repository contains &lt;strong&gt;only static files&lt;/strong&gt; and does &lt;strong&gt;not require a server&lt;/strong&gt;. You can just put the &lt;strong&gt;file path&lt;/strong&gt; of the &lt;strong&gt;HTML files&lt;/strong&gt; you want to capture screenshot of.&lt;/p&gt;

&lt;p&gt;In this Example I'll show you how I used &lt;code&gt;saadmk11/comment-website-screenshot&lt;/code&gt; GitHub Action to Visually Review Static file Changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WorkFlow:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Capture Webpage Screenshot&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;opened&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;synchronize&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Capture Webpage Screenshot&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;saadmk11/comment-website-screenshot@v0.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;upload_to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github_branch&lt;/span&gt;
          &lt;span class="c1"&gt;# Capture Screenshots of Changed HTML Files&lt;/span&gt;
          &lt;span class="na"&gt;capture_changed_html_files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yes&lt;/span&gt;
          &lt;span class="c1"&gt;# Comma separated paths to any other HTML File&lt;/span&gt;
          &lt;span class="na"&gt;capture_html_file_paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;index.html"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Output Screenshot:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K7bXSYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0hm2wu92ionitnrv0va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K7bXSYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0hm2wu92ionitnrv0va.png" alt="comment-webpage-screenshot Example" width="880" height="1944"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The HTML Template Shown in this Example was Taken from Tailwind UI&lt;/strong&gt;&lt;br&gt;
Tailwind UI Provides Awesome Pre-Built TailwindCSS Components. Check them out here: &lt;a href="https://tailwindui.com/"&gt;https://tailwindui.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pull Request:&lt;/strong&gt; &lt;a href="https://github.com/saadmk11/static-page-screenshot-demo/pull/2"&gt;https://github.com/saadmk11/static-page-screenshot-demo/pull/2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo Repository:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/saadmk11"&gt;
        saadmk11
      &lt;/a&gt; / &lt;a href="https://github.com/saadmk11/static-page-screenshot-demo"&gt;
        static-page-screenshot-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
static-page-screenshot-demo&lt;/h1&gt;
&lt;p&gt;Templates Collected from Tailwind UI.&lt;/p&gt;
&lt;p&gt;Check it out here: &lt;a href="https://tailwindui.com/" rel="nofollow"&gt;https://tailwindui.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/saadmk11/static-page-screenshot-demo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;You can also use this for Dynamic Web Applications. See the &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;saadmk11/comment-webpage-screenshot&lt;/a&gt; documentation for more examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think this action will be really helpful for Open Source Maintainers to provide quick reviews on UI changes. If anyone is interested please try &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;saadmk11/comment-webpage-screenshot&lt;/a&gt; out and leave some feedback :)&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>So you want to fly to the moon? Start with AWS Cloud Practitioner Certification and Exam Tips</title>
      <author>Wendy Wong</author>
      <pubDate>Sun, 21 Nov 2021 14:16:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/so-you-want-to-fly-to-the-moon-start-with-the-aws-cloud-practitioner-certification-exam-tips-me6</link>
      <guid>https://dev.to/aws-builders/so-you-want-to-fly-to-the-moon-start-with-the-aws-cloud-practitioner-certification-exam-tips-me6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-your-learning-goals"&gt;
  &lt;/a&gt;
  What are your learning goals? 🎏
&lt;/h2&gt;

&lt;p&gt;"You are never too old to set another goal or to dream a new dream." – C.S. Lewis&lt;/p&gt;

&lt;p&gt;Your learning goals may include wanting to re-skill, upskill, re-enter the workforce, build something amazing for a side project, help your organization understand cloud or move workloads to the cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#every-goal-starts-with-a-setting-a-vision"&gt;
  &lt;/a&gt;
  Every goal starts with a setting a vision ✨
&lt;/h2&gt;

&lt;p&gt;It's been quite the journey. At the start of 2021, I set a  goal to learn more about cloud computing. &lt;/p&gt;

&lt;p&gt;In my Master's degree, unfortunately we did not have an elective on cloud computing, I tinkered with AWS at an AI startup who were part of the AWS Partner Network and I also used AWS in a data science hackathon.&lt;/p&gt;

&lt;p&gt;My goals to learn cloud computing included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To have an appreciation of the AWS ecosystem&lt;/li&gt;
&lt;li&gt;Understand core AWS services&lt;/li&gt;
&lt;li&gt;Understand fully managed databases (SQL and NoSQL) &lt;/li&gt;
&lt;li&gt;Understand AWS storage options so I can explain it to my leaders&lt;/li&gt;
&lt;li&gt;Understand AWS analytics services and explain it to my team&lt;/li&gt;
&lt;li&gt;Understand AWS data warehouse solutions to explain requirements to a data engineer and discuss non-technical concepts to business leaders and data analysts for our modernization strategy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-does-your-organization-need-to-understand-cloud"&gt;
  &lt;/a&gt;
  Why does your organization need to understand cloud? ☁️
&lt;/h2&gt;

&lt;p&gt;You can explain &lt;a href="https://aws.amazon.com/what-is-cloud-computing/?nc2=type_a"&gt;what is cloud computing&lt;/a&gt; and the &lt;a href="https://aws.amazon.com/what-is-cloud-computing/?nc2=h_ql_le_int_cc"&gt;benefits&lt;/a&gt; to different stakeholders to help get them on board for a digital transformation journey to cloud e.g. in banking, insurance and government. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjjjO37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qsurbmj0cp9cxb7fk09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjjjO37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qsurbmj0cp9cxb7fk09.png" alt="what is cloud" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#it-leader-what-are-the-benefits-of-moving-workloads-from-onpremises-the-cloud"&gt;
  &lt;/a&gt;
  IT Leader: What are the benefits of moving workloads from on-premises the cloud?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Cost savings -  with the pay as you go pricing model, you pay for what you use.&lt;/li&gt;
&lt;li&gt;Go global in minutes - you may deploy a solution in minutes into multiple geographic locations.&lt;/li&gt;
&lt;li&gt;Elasticity - You may scale up or scale down the right sizing of an Amazon resource and you do not have to provision it beforehand.&lt;/li&gt;
&lt;li&gt;Agility - you have access storage, databases and data lakes quickly when those resources are needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#platform-manager-what-is-the-current-costs-and-forecasts-by-launching-an-ec2-instance-and-building-machine-learning-models-for-our-data-science-team"&gt;
  &lt;/a&gt;
  Platform Manager: What is the current costs and forecasts by launching an EC2 instance and building machine learning models for our data science team?
&lt;/h4&gt;

&lt;p&gt;You may wish to use &lt;a href="https://aws.amazon.com/aws-cost-management/aws-cost-explorer/"&gt;AWS Cost Explorer&lt;/a&gt; to view your current usage and estimate your usage in the next 6 months especially if you are building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5bukLDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dti1g5j6a5nv47oa02l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5bukLDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dti1g5j6a5nv47oa02l0.png" alt="explorer" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might want to use &lt;a href="https://aws.amazon.com/organizations/"&gt;AWS Organizations&lt;/a&gt; to analyze a single bill for one member account across different departments such as product, analytics and engineering.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#legal-team-how-can-you-ensure-that-customer-data-is-protected-in-the-cloud-and-there-is-no-data-breach-or-reputational-risk-in-the-media"&gt;
  &lt;/a&gt;
  Legal Team: How can you ensure that customer data is protected in the cloud and there is no data breach or reputational risk in the media?
&lt;/h4&gt;

&lt;p&gt;You might give confidence to your data governance team to ensure that data privacy is maintained and customer sensitive data is protected in Amazon S3 buckets with machine learning and analyzing patterns using &lt;a href="https://aws.amazon.com/macie/"&gt;Amazon Macie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also provide your organization with access to Amazon's compliance reports using &lt;a href="https://aws.amazon.com/artifact/"&gt;Amazon Artifact&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#business-leader-how-can-my-team-innovate-with-cloud-and-start-experimenting-with-aws"&gt;
  &lt;/a&gt;
  Business Leader: How can my team innovate with cloud and start experimenting with AWS?
&lt;/h4&gt;

&lt;p&gt;You will receive an &lt;a href="https://aws.amazon.com/iam/"&gt;IAM role&lt;/a&gt; as a user from your administrator or platform team. If you work in a team, IAM users may be created for a group whereby permissions will be assigned to your team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXHXyLSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyqbcveuferjczk0k4px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXHXyLSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyqbcveuferjczk0k4px.png" alt="IAM role console" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#digital-team-what-aws-analytics-services-can-we-use-to-analyze-customer-campaigns"&gt;
  &lt;/a&gt;
  Digital Team: What AWS analytics services can we use to analyze customer campaigns?
&lt;/h4&gt;

&lt;p&gt;You may wish to use &lt;a href="https://aws.amazon.com/quicksight/"&gt;Amazon QuickSight&lt;/a&gt; to produce business intelligence dashboards if your role includes reporting results to your business leaders&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-the-aws-cloud-practitioner-certification-suitable-for-me"&gt;
  &lt;/a&gt;
  Is the AWS Cloud Practitioner Certification suitable for me? 📚
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUUB8Je7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ctau3mghaiufow3g0cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUUB8Je7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ctau3mghaiufow3g0cm.png" alt="CCP" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS Cloud Practitioner certification is for everyone, as long as you are curious and have the willingness to learn. The intended audience includes IT professionals, sales, business analysts, legal and project managers. However you are welcome to receive this free 6 hour digital training even if you are from a non-engineering background!&lt;/p&gt;

&lt;p&gt;You may access the 6 hours of free digital training from the AWS Skills Builder launched in October 2021 here is the &lt;a href="https://explore.skillbuilder.aws/learn/course/external/view/elearning/134/aws-cloud-practitioner-essentials?scr=detail&amp;amp;refid=em_championcreditcodes_432143_emea21_awsomedayq4&amp;amp;trkcampaign=emea21_awsomedayq4"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may sign-in to AWS Skills Builder using your existing AWS account, which is the Amazon account that you also use to sign-in to purchase Amazon products online or access the Management Console. If you don't already have an Amazon account, here is a &lt;a href="https://dev.to/aws-builders/getting-started-with-aws-a-sweet-journey-5cjj"&gt;link&lt;/a&gt; with steps to walk you through how to create an account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plRfuDKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvsze1bqppmz3voclki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plRfuDKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvsze1bqppmz3voclki.png" alt="learn on skills builder" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn-aws-cloud-practitioner-certification-course-outline"&gt;
  &lt;/a&gt;
  What will you learn? AWS Cloud Practitioner Certification: Course outline 🖊️
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#module-1-introduction-to-amazon-web-services"&gt;
  &lt;/a&gt;
  Module 1: Introduction to Amazon Web Services
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the benefits of AWS&lt;/li&gt;
&lt;li&gt;Describe differences between on-demand delivery and cloud deployments&lt;/li&gt;
&lt;li&gt;Summarize the pay-as-you-go pricing model&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-2-compute-in-the-cloud"&gt;
  &lt;/a&gt;
  Module 2: Compute in the Cloud
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Describe the benefits of Amazon Elastic Compute Cloud (Amazon EC2) at a basic level&lt;/li&gt;
&lt;li&gt;Identify the different Amazon EC2 instance types&lt;/li&gt;
&lt;li&gt;Differentiate between the various billing options for Amazon EC2&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon EC2 Auto Scaling&lt;/li&gt;
&lt;li&gt;Summarize the benefits of Elastic Load Balancing
Give an example of the uses for Elastic Load Balancing&lt;/li&gt;
&lt;li&gt;Summarize the differences between Amazon Simple Notification Service (Amazon SNS) and Amazon Simple Queue Services (Amazon SQS)
Summarize additional AWS compute options&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-3-global-infrastructure-and-reliability"&gt;
  &lt;/a&gt;
  Module 3: Global Infrastructure and Reliability
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the benefits of the AWS Global Infrastructure&lt;/li&gt;
&lt;li&gt;Describe the basic concept of Availability Zones&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon CloudFront and Edge locations&lt;/li&gt;
&lt;li&gt;Compare different methods for provisioning AWS services&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-4-networking"&gt;
  &lt;/a&gt;
  Module 4: Networking
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Describe the basic concepts of networking&lt;/li&gt;
&lt;li&gt;Describe the difference between public and private networking resources&lt;/li&gt;
&lt;li&gt;Explain a virtual private gateway using a real life scenario&lt;/li&gt;
&lt;li&gt;Explain a virtual private network (VPN) using a real life scenario&lt;/li&gt;
&lt;li&gt;Describe the benefit of AWS Direct Connect&lt;/li&gt;
&lt;li&gt;Describe the benefit of hybrid deployments&lt;/li&gt;
&lt;li&gt;Describe the layers of security used in an IT strategy&lt;/li&gt;
&lt;li&gt;Describe which services are used to interact with the AWS global network&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-5-storage-and-databases"&gt;
  &lt;/a&gt;
  Module 5: Storage and Databases
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the basic concept of storage and databases&lt;/li&gt;
&lt;li&gt;Describe benefits of Amazon Elastic Block Store (Amazon EBS)&lt;/li&gt;
&lt;li&gt;Describe benefits of Amazon Simple Storage Service (Amazon S3)&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon Elastic File System (Amazon EFS)&lt;/li&gt;
&lt;li&gt;Summarize various storage solutions&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon Relational Database Service (Amazon RDS)&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon DynamoDB&lt;/li&gt;
&lt;li&gt;Summarize various database services&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-6-security"&gt;
  &lt;/a&gt;
  Module 6: Security
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Explain the benefits of the shared responsibility model&lt;/li&gt;
&lt;li&gt;Describe multi-factor authentication (MFA)&lt;/li&gt;
&lt;li&gt;Differentiate between the AWS Identity and Access Management (IAM) security levels&lt;/li&gt;
&lt;li&gt;Describe security policies at a basic level&lt;/li&gt;
&lt;li&gt;Explain the benefits of AWS Organizations&lt;/li&gt;
&lt;li&gt;Summarize the benefits of compliance with AWS&lt;/li&gt;
&lt;li&gt;Explain primary AWS security services at a basic level&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-7-monitoring-and-analytics"&gt;
  &lt;/a&gt;
  Module 7: Monitoring and Analytics
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize approaches to monitoring your AWS environment&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon CloudWatch&lt;/li&gt;
&lt;li&gt;Describe the benefits of AWS CloudTrail&lt;/li&gt;
&lt;li&gt;Describe the benefits of AWS Trusted Advisor&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-8-pricing-and-support"&gt;
  &lt;/a&gt;
  Module 8: Pricing and Support
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand AWS pricing and support models&lt;/li&gt;
&lt;li&gt;Describe the AWS Free Tier&lt;/li&gt;
&lt;li&gt;Describe key benefits of AWS Organizations and consolidated billing&lt;/li&gt;
&lt;li&gt;Explain the benefits of AWS Budgets&lt;/li&gt;
&lt;li&gt;Explain the benefits of AWS Cost Explorer&lt;/li&gt;
&lt;li&gt;Explain the primary benefits of the AWS Pricing Calculator&lt;/li&gt;
&lt;li&gt;Distinguish between the various AWS Support Plans&lt;/li&gt;
&lt;li&gt;Describe the benefits of AWS Marketplace&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-9-migration-and-innovation"&gt;
  &lt;/a&gt;
  Module 9: Migration and Innovation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand migration and innovation in the AWS Cloud&lt;/li&gt;
&lt;li&gt;Summarize the AWS Cloud Adoption Framework (AWS CAF)&lt;/li&gt;
&lt;li&gt;Summarize six key factors of a cloud migration strategy&lt;/li&gt;
&lt;li&gt;Describe the benefits of various AWS data migration solutions, such as AWS Snowcone, AWS Snowball, and AWS Snowmobile&lt;/li&gt;
&lt;li&gt;Summarize the broad scope of innovative solutions that AWS offers&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-10-the-cloud-journey"&gt;
  &lt;/a&gt;
  Module 10: The Cloud Journey
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the five pillars of the AWS Well-Architected Framework&lt;/li&gt;
&lt;li&gt;Explain the six benefits of cloud computing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-11-aws-certified-cloud-practitioner-basics"&gt;
  &lt;/a&gt;
  Module 11: AWS Certified Cloud Practitioner Basics
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Determine resources for preparing for the AWS Certified Cloud Practitioner examination&lt;/li&gt;
&lt;li&gt;Describe benefits of becoming AWS Certified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will receive a certification of completion when you complete all the modules and an email from the AWS Training and Certification Team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exam-readiness-tips"&gt;
  &lt;/a&gt;
  Exam Readiness: Tips 🚀
&lt;/h2&gt;

&lt;p&gt;Here is a link covering useful resources to help you prepare for the &lt;a href="https://aws.amazon.com/certification/certified-cloud-practitioner/?ch=tile&amp;amp;tile=getstarted"&gt;AWS Cloud Practitioner Certification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 1: The next step is to book your exam 2-3 weeks ahead so you can also continue studying and prepare for your exam.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Book my exam 2-3 weeks ahead after completing the digital training and online modules. &lt;/li&gt;
&lt;li&gt;Book an online proctored exam with Pearson VUE on a Saturday or Sunday that does not interrupt your work schedule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: Prepare for the exam by following all the links recommended by AWS on Prepare for the Exam with the link &lt;a href="https://aws.amazon.com/certification/certified-cloud-practitioner/?ch=tile&amp;amp;tile=getstarted"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Step 3:  Download the &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-cloud-practitioner/AWS-Certified-Cloud-Practitioner_Exam-Guide.pdf"&gt;exam guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5afh0jvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p3x1srii2g1irikiwyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5afh0jvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p3x1srii2g1irikiwyl.png" alt="exam guide" width="880" height="948"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The exam guide will help you understand the scope of the domains covered including:&lt;/p&gt;

&lt;p&gt;Domain 1: Cloud Concepts 26%&lt;br&gt;
Domain 2: Security &amp;amp; Compliance 25%&lt;br&gt;
Domain 3: Technology 33%&lt;br&gt;
Domain 4: Billing &amp;amp; Pricing 16%&lt;/p&gt;

&lt;p&gt;There are 65 multiple choice questions and you have 90 minutes to complete the exam. &lt;/p&gt;

&lt;p&gt;Step 4: Download the sample exam questions located &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-cloud-practitioner/AWS-Certified-Cloud-Practitioner_Sample-Questions.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNTxUsaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctk7hyzfe1siph8miyfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNTxUsaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctk7hyzfe1siph8miyfu.png" alt="sample questions" width="880" height="934"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Complete the official AWS Certified Cloud Practitioner Practice Exam at this AWS Skill Builders &lt;a href="https://explore.skillbuilder.aws/learn/catalog?ctldoc-catalog-0=se-%22AWS%20Certification%20Official%20Practice%20Question%20Sets%22?cp=sec&amp;amp;sec=prep"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By completing the practice exam it will help you understand your overall performance and readiness for the exam preparation.&lt;/p&gt;

&lt;p&gt;Step 6: Attend an Exam Readiness webinar to consolidate your knowledge by booking a session &lt;a href="https://aws.amazon.com/training/events/?get-certified-vilt-courses-cards.sort-by=item.additionalFields.startDateSort&amp;amp;get-certified-vilt-courses-cards.sort-order=asc&amp;amp;awsf.get-certified-vilt-courses-type=*all&amp;amp;awsf.get-certified-vilt-courses-series=series%23aws-certification-exam-readiness&amp;amp;awsf.get-certified-vilt-audience=*all&amp;amp;awsf.get-certified-vilt-locations=*all&amp;amp;awsf.get-certified-vilt-countries=*all&amp;amp;awsf.get-certified-vilt-languages=*all&amp;amp;awsf.get-certified-vilt-courses-level=level%23100&amp;amp;awsf.get-certified-vilt-courses-tech-category=*all&amp;amp;cp=sec&amp;amp;sec=prep"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqzkVt8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29n55a9jq57naksu4umq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqzkVt8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29n55a9jq57naksu4umq.png" alt="readiness" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 7: Watch on-demand training on Twitch &lt;/p&gt;

&lt;p&gt;You may watch any of the AWS Power Hour: Cloud Practitioner &lt;a href="https://pages.awscloud.com/global-traincert-twitch-power-hour-cloud-practitioner.html?cp=sec&amp;amp;sec=prep"&gt;on-demand episodes&lt;/a&gt; and read the list of resources as provided to help further your preparation for the exam&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRFDWESl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjbfrf3hu0idpmyns4q8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRFDWESl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjbfrf3hu0idpmyns4q8.png" alt="power hour" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 8: Enrol into the AWS Cloud Practitioner course a second time via AWS Skill Builder for extra revision &lt;/p&gt;

&lt;p&gt;I completed the digital training a second time and took notes to reinforce my learning so I could explain to myself the areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is an availability zone?&lt;/li&gt;
&lt;li&gt;What is the difference between Amazon S3 and Amazon Elastic Block Store (Amazon EBS)?&lt;/li&gt;
&lt;li&gt;What is a VPC?&lt;/li&gt;
&lt;li&gt;What is a subnet?&lt;/li&gt;
&lt;li&gt;What is decoupling?&lt;/li&gt;
&lt;li&gt;What is the AWS Shared Responsibility Model?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yO8wH8ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgkbkryab3tvw5qfp1bn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yO8wH8ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgkbkryab3tvw5qfp1bn.png" alt="share" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the benefit of cloud computing?&lt;/li&gt;
&lt;li&gt;What are the different EC2 instances?&lt;/li&gt;
&lt;li&gt;What is the difference between elastic load balancing and auto scaling?&lt;/li&gt;
&lt;li&gt;What is Amazon Route 53?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 9: Read the suggested whitepapers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: &lt;a href="https://d1.awsstatic.com/whitepapers/aws-overview.pdf"&gt;Overview of Amazon Web Services&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl8LopoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h09tuizok8rsaagurohl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl8LopoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h09tuizok8rsaagurohl.png" alt="overview" width="880" height="977"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is useful to also understand the AWS core services by exploring the documentation listing to be able to understand the use cases for storage, compute, machine learning, analytics, security and other uncommon AWS services that are not covered in detail in the digital training.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" alt="documentation" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No coding is required for this certification. You may login to the Management Console to explore and 'play' with some of the AWS Services to understand how they fit into the overall picture for the exam.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: &lt;a href="https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/how-aws-pricing-works.pdf#welcome"&gt;Overview of how pricing works&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rwybS_oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1spef3rwtngaq55u8i8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rwybS_oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1spef3rwtngaq55u8i8s.png" alt="how pricing works" width="880" height="972"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: &lt;a href="https://aws.amazon.com/premiumsupport/plans/?cp=sec&amp;amp;sec=prep"&gt;Compare AWS Support Plans&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" alt="support plan" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 10: Optional: Review a AWS Cheat Sheets&lt;/p&gt;

&lt;p&gt;You may watch some helpful videos to consolidate your learning from the AWS cheat sheets provided by &lt;a href="https://tutorialsdojo.com/aws-cheat-sheets/"&gt;Tutorials Dojo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 11: Complete Practice Exams&lt;/p&gt;

&lt;p&gt;Tutorials Dojo: &lt;a href="https://tutorialsdojo.com/courses/aws-certified-cloud-practitioner-practice-exams/"&gt;https://tutorialsdojo.com/courses/aws-certified-cloud-practitioner-practice-exams/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 12: Join an AWS User Group near you that offer mentoring in AWS Certified Cloud Practitioner&lt;/p&gt;

&lt;p&gt;You can reach out and ask your local &lt;a href="https://aws.amazon.com/developer/community/usergroups/?intClick=dev-center-2021_main"&gt;AWS User Group&lt;/a&gt; if they have a current mentoring group for this certification so you may learn together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OknkS7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puln38yzew0mm3wveo6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OknkS7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puln38yzew0mm3wveo6o.png" alt="Find a user group" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the moment, if you identify as female there is an &lt;a href="https://www.meetup.com/AWSUG-BuildHers/"&gt;AWS User Group BuildHers&lt;/a&gt; based in Manila that currently offer mentoring in AWS Cloud Practitioner certification on Sunday at 1pm Manila local time. You may contact the organizer if you are interested in joining this community to learn together online.&lt;/p&gt;

&lt;p&gt;The next Meetup is on the 28 November, please contact the organizer if you would like to join.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vO-6TbqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xvchzuzo10mnwg0jhx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vO-6TbqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xvchzuzo10mnwg0jhx0.png" alt="Build Hers" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 13: Optional: Join She Builds Mentoring Program in 2022&lt;/p&gt;

&lt;p&gt;The 2021 AWS She Builds mentoring program commenced in September 2021(before I became an AWS Community Builder) and assisted women aged over 18 to study, receive mentoring, complete the AWS Cloud Practitioner certification and receive a free exam voucher sponsored by Accenture. Details of the program are explained by Code by Pratik &lt;a href="https://www.youtube.com/watch?v=RHpHDO311z4"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2tXr9lD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mtaw6blb8v0ghlm1brm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2tXr9lD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mtaw6blb8v0ghlm1brm.png" alt="code by pratik" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS She Builds Summit 2021 was broadcast on Twitch on 19 November 2021 it featured the AWS She Builds Mentoring Program in 2021 which was organized by President Kim Bonilla and the She Builds training team led Donna Edwards and AWS mentors including Navi Kaur.&lt;/p&gt;

&lt;p&gt;You may watch on &lt;a href="https://www.twitch.tv/aws_events"&gt;Twitch&lt;/a&gt; the AWS She Builds Summit 2021 starting at 00:39 minutes to learn more about the mentoring program in the AWS Cloud Practitioner certification for women and how you may join in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu0pbUU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3tu0j963iahsc0uivu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu0pbUU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3tu0j963iahsc0uivu7.png" alt="She Builds" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a supportive global community of women in the 2021 cohort who received optional weekly webinars to support learning from the digital modules, access to the exam readinesss webinars and access to weekend mentoring online from the Australian based training team for the time zones AESD and IST on Saturday and Sunday. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXsEFCNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tizhn39jj5br4dlz1bd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXsEFCNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tizhn39jj5br4dlz1bd.gif" alt="Thank you" width="498" height="498"&gt;&lt;/a&gt;&lt;br&gt;
Thank you to the 2021 AWS SheBuilds program for Kim, Donna, Navi, AWS and Accenture for the AWS Cloud Practitioner training and mentorship.&lt;/p&gt;

&lt;p&gt;Step 14: Final tips for the exam day&lt;/p&gt;

&lt;p&gt;Ensure you are adequately rested for your exam on the weekend.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have one morning coffee if your exam is scheduled in the afternoon&lt;/li&gt;
&lt;li&gt;Test your computer by following the emailed instructions you receive from your online proctor&lt;/li&gt;
&lt;li&gt;Important: Allow extra time as you would at an airport to complete the check-in process at least 30-minutes before your exam time so that you are feeling confident and do not need to worry about any computer glitches&lt;/li&gt;
&lt;li&gt;You will use your cell-phone as part of the check-in process to take photos of your testing environment. Ensure that your phone is fully charged.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words-of-encouragement"&gt;
  &lt;/a&gt;
  Final Words of Encouragement 😎
&lt;/h2&gt;

&lt;p&gt;Good luck with your certification. I know you've got this! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set aside a few hours a day for learning &lt;/li&gt;
&lt;li&gt;Build consistency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"Don't worry if you're making waves just by being yourself. The moon does it all the time." — Scott Stabile&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoQX7Tp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1hqrdtvjpb8mymapj66.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoQX7Tp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1hqrdtvjpb8mymapj66.jpg" alt="Never too late" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>cloudskills</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to use Preact with Astro</title>
      <author>Jannik Baranczyk</author>
      <pubDate>Sun, 21 Nov 2021 14:13:13 +0000</pubDate>
      <link>https://dev.to/wh1zk1d/how-to-use-preact-with-astro-4pnp</link>
      <guid>https://dev.to/wh1zk1d/how-to-use-preact-with-astro-4pnp</guid>
      <description>&lt;p&gt;I recently tried to use Preact with Astro. Since I found no decent tutorial on how to use those two together, I decided to write one.&lt;/p&gt;

&lt;p&gt;If you don't know &lt;a href="https://astro.build"&gt;Astro&lt;/a&gt;, you should definitely check it out. Astro is a new modern static site builder that allows us to use React/Preact, Svelte and Vue components all together, while shipping only the absolute necessary client-side JavaScript, using a technique called "Partial Hydration". That results in really fast sites with less JavaScript. They just released v0.21.0, which introduced a new, faster compiler written in Go a new build engine powered by Vite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://preactjs.com"&gt;Preact&lt;/a&gt; is a "Fast 3kB alternative to React with the same modern API". It's smaller than React but shares most of it's features (Hooks, Context), so you can write normal React code but benefit from better performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-can-i-use-preact-components-with-astro"&gt;
  &lt;/a&gt;
  So how can I use Preact components with Astro?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The fastest way to do this, is to select Preact as your framework in the Astro CLI when you setup a new project. This tutorial presupposes that you want to add Preact to an existing Astro project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First you need to install a &lt;em&gt;renderer&lt;/em&gt; for Preact, and the Preact library itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @astrojs/renderer-preact preact 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to add the just installed renderer to the Astro config file, astro.config.mjs. When you open it, the &lt;code&gt;renderers&lt;/code&gt; property should be an empty Array. Add the &lt;code&gt;@astrojs/renderer-preact&lt;/code&gt; package to the Array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@astrojs/renderer-preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all you need to setup Preact with Astro! 🎉&lt;/p&gt;

&lt;p&gt;Now you can write your Preact components as .jsx or .tsx files and import them to your Astro pages.&lt;/p&gt;

&lt;p&gt;For example, this is how you would write a simple Counter component in TypeScript (.tsx):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// /src/components/Counter.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact/hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can import the component like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;// /src/pages/index.astro&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Counter.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tip: The &lt;code&gt;client:load&lt;/code&gt; snippet you see above comes from Astro's Partial Hydration. If we leave this away, Astro would only render the components markup, without any interactivity, to ship less client-side JavaScript. You can learn more about Partial Hydration in the official &lt;a href="https://docs.astro.build/core-concepts/component-hydration/"&gt;Astro Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>jamstack</category>
      <category>react</category>
    </item>
    <item>
      <title>Ruby 3</title>
      <author>Shayan Holakouee</author>
      <pubDate>Sun, 21 Nov 2021 14:07:41 +0000</pubDate>
      <link>https://dev.to/shayanholakouee/ruby-3-1o2g</link>
      <guid>https://dev.to/shayanholakouee/ruby-3-1o2g</guid>
      <description>&lt;p&gt;Ruby 3 has been released. This major new version has goals of improving performance, concurrency and support for Typing. The headline improvement is the performance, with Yukihiro Matsumoto, aka Matz, the chief designer of Ruby, saying that Ruby 3 will be three times faster than Ruby 2.&lt;br&gt;
Ruby has gained popularity because, in addition to being fun to use, it is useful because of its mix of different programming styles — functional, dynamic and object-oriented.&lt;br&gt;
Tests run using the Optcarrot benchmark, which measures single thread performance based on NES’s game emulation workload, Ruby 3 has shown the promised three times faster performance than Ruby 2.0.&lt;/p&gt;

&lt;p&gt;The performance is achieved by Ruby 3.0 when used in JIT mode. This is new in Ruby 3, and should provide performance improvements in limited workloads, such as games, AI, and other applications where the majority of the time is spent in calling a few methods many times. The developers say that while Ruby 3.0 has significantly decreased the size of JIT-ed code, it is still not ready for optimizing workloads like Rails, which often spend time on many methods and therefore suffer from i-cache misses. This will be exacerbated by JIT, so the performance will actually be worse. The developers say Ruby 3.1 will offer further improvements on this issue.&lt;br&gt;
Another area that has helped performance is the move to add better concurrency support. The new release adds experimental support for Ractor, as well as Async Fiber. Ractor is an Actor-model like concurrent abstraction that can provide a parallel execution feature without thread-safety concerns. This is achieved because ractors don’t share normal objects; communication between ractors is supported by exchanging messages.&lt;br&gt;
The experimental nature of Ractor means the specification and implementation may be changed in the future.&lt;br&gt;
Fiber Scheduler has also been introduced for intercepting blocking operations. This allows for lightweight concurrency without changing existing code.&lt;br&gt;
Other improvements add support for static typing. The developers have created a “foundational type signature language” called RBS, which is used to describe the types of Ruby programs. The idea is that RBS will support commonly seen patterns in Ruby programs and will allow developers to create advanced types including union types, method overloading, and generics. It also supports duck typing with interface types.&lt;br&gt;
Ruby 3.0 ships with the rbs gem, which allows parsing and processing type definitions written in RBS. The Ruby team says type checkers including TypeProf and other tools supporting RBS will understand Ruby programs much better with RBS definitions.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Responsive Navbar Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sun, 21 Nov 2021 13:53:22 +0000</pubDate>
      <link>https://dev.to/nikhil27b/responsive-navbar-using-html-css-3aic</link>
      <guid>https://dev.to/nikhil27b/responsive-navbar-using-html-css-3aic</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;How are you all I am writing this post after so long break. Today I Created a simple responsive header menu using HTML &amp;amp; CSS I hope you like this also comments about your thoughts. also For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you 🙂!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/jOLyypp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>8 Programmer Life Lessons They Don’t Teach You At School</title>
      <author>python.land</author>
      <pubDate>Sun, 21 Nov 2021 13:31:37 +0000</pubDate>
      <link>https://dev.to/python_land/8-programmer-life-lessons-they-dont-teach-you-at-school-djp</link>
      <guid>https://dev.to/python_land/8-programmer-life-lessons-they-dont-teach-you-at-school-djp</guid>
      <description>&lt;p&gt;Some things you don’t learn at school. These lessons come right from the work floor; I learned them the hard way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/pythonland/8-programmer-life-lessons-they-dont-teach-you-at-school-dc8049f3e9e8?sk=73ac18dc9052e8f1cfb85e548b1a8594"&gt;Read the full article for free on Medium using this link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 44 of 100 Days of Code &amp; Scrum: Deadlines and Pressure</title>
      <author>Rammina</author>
      <pubDate>Sun, 21 Nov 2021 12:54:43 +0000</pubDate>
      <link>https://dev.to/rammina/day-44-of-100-days-of-code-scrum-deadlines-and-pressure-il0</link>
      <guid>https://dev.to/rammina/day-44-of-100-days-of-code-scrum-deadlines-and-pressure-il0</guid>
      <description>&lt;p&gt;Happy Sunday, everyone!&lt;/p&gt;

&lt;p&gt;I decided that I will focus on my website primarily for this week. I must create an output that I can deploy and show at the end of the week. I'm giving myself a deadline so that I'm forced to work the best that I can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;Just like I do every weekend, I did my 6th Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I set up my weekly Sprint Goals, which will mostly basic concern my &lt;strong&gt;company website's homepage&lt;/strong&gt;. The others are secondary goals, which I will work on for a little bit each day without compromising my main objective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;finish my company website's homepage (and avoid getting distracted by more interesting projects).&lt;/li&gt;
&lt;li&gt;continue to learn Next.js and Typescript by using concepts while I build my website.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great week, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-receive-emails-via-your-sites-contact-us-form-with-aws-ses-lambda-api-gateway/"&gt;How to Receive Emails from Your Site's "Contact Us" form Using AWS SES, Lambda, &amp;amp; API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to check me in other media and reach out to me!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 8 Docker Best Practices for using Docker in Production ✅</title>
      <author>Techworld with Nana</author>
      <pubDate>Sun, 21 Nov 2021 12:53:45 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/top-8-docker-best-practices-for-using-docker-in-production-1m39</link>
      <guid>https://dev.to/techworld_with_nana/top-8-docker-best-practices-for-using-docker-in-production-1m39</guid>
      <description>&lt;p&gt;Docker adoption rises constantly 📈 and many are familiar with it, but not everyone is using Docker according to the best practices. 👀&lt;/p&gt;




&lt;p&gt;Before moving on, if you don't know what Docker is, you can learn everything you need to get started in this &lt;a href="https://youtu.be/3c-iBn73dDE"&gt;free Docker Crash Course 🐳&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-using-best-practices"&gt;
  &lt;/a&gt;
  Why using Best Practices? 🤷‍♀️
&lt;/h2&gt;

&lt;p&gt;So, in my &lt;a href="https://youtu.be/8vXoMqWgbQQ"&gt;new video 'Top 8 Docker Production Best Practices'&lt;/a&gt; I want to show you 8 ways you can use Docker in a right way in your projects to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ &lt;strong&gt;improve security&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;optimize&lt;/strong&gt; the &lt;strong&gt;image size&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;✅ take advantage of some of the useful Docker features &lt;/li&gt;
&lt;li&gt;✅ and also write &lt;strong&gt;cleaner and more maintainable Dockerfiles&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  1️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use an official and verified Docker image as a base image, whenever available.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say you are developing a Node.js application and want to build and run it as a Docker image. &lt;/p&gt;

&lt;p&gt;Instead of taking a base operating system image and installing node.js, npm and whatever other tools you need for your application, use the official node image for your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zc-ArYbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spd6rkqkwnitp2riio29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zc-ArYbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spd6rkqkwnitp2riio29.png" alt="1st best practice" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cleaner Dockerfile&lt;/li&gt;
&lt;li&gt;Official and verified image, which is already built with the best practices&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  2️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use specific Docker image versions&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, so we have selected the base image, but now when we build our applications image from this Dockerfile, it will always use the &lt;code&gt;latest&lt;/code&gt; tag of the node image.&lt;/p&gt;

&lt;p&gt;Now why is this a problem? 🤔&lt;br&gt;
❌ - you might get a different image version as in the previous build &lt;br&gt;
❌ - the new image version may break stuff&lt;br&gt;
❌ - &lt;code&gt;latest&lt;/code&gt; tag is unpredictable, causing unexpected behavior &lt;/p&gt;

&lt;p&gt;So instead of a random latest image tag, you want to fixate the version and just like you deploy your own application with a specific version you want to use the official image with a specific version. &lt;br&gt;
And the rule here is: &lt;strong&gt;the more specific the better&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIWh6vcV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zikxyawtnrwk526xov6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIWh6vcV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zikxyawtnrwk526xov6z.png" alt="2nd best practice" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transparency to know exactly what version of the base image you're using&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  3️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use Small-Sized Official Images&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When choosing a Node.js image, you will see there are actually multiple official images. Not only with different version numbers, but also with &lt;strong&gt;different operating system distributions&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXYUDcn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4szjwytxzttkc4wovxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXYUDcn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4szjwytxzttkc4wovxz.png" alt="Node image versions" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the question is: Which one do you choose and why is it important? 🤷🏻‍♂️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Image Size&lt;/strong&gt;&lt;br&gt;
❌  Well, if the image is based on a &lt;strong&gt;full-blown OS distribution&lt;/strong&gt; like Ubuntu or Centos, you will have a bunch of tools already packaged in the image. So the &lt;strong&gt;image size will be larger&lt;/strong&gt;, but you &lt;strong&gt;don't need most of these tools&lt;/strong&gt; in your application images.&lt;/p&gt;

&lt;p&gt;✅  In contrast having &lt;strong&gt;smaller images means you need less storage space&lt;/strong&gt; in image repository as well as on a deployment server and of course you can transfer the images faster when pulling or pushing them from the repository. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Security Issue&lt;/strong&gt;&lt;br&gt;
❌  In addition to that, with lots of tools installed inside, you need to consider the security aspect. Because such base images usually contain &lt;a href="https://snyk.io/blog/opensourcesecurity-2020survey/"&gt;hundreds of known vulnerabilities&lt;/a&gt; and basically create a &lt;strong&gt;larger attack surface&lt;/strong&gt; to your application image.&lt;/p&gt;

&lt;p&gt;This way you basically end up introducing unnecessary security issues from the beginning to your image! 🙉&lt;/p&gt;

&lt;p&gt;✅  In comparison by using &lt;strong&gt;smaller images with leaner OS distributions&lt;/strong&gt;, which only bundle the necessary system&lt;br&gt;
tools and libraries, you're also minimizing the attack surface and making sure that you build &lt;strong&gt;more secure images&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So the best practice here would be to select an image with a specific version based on a leaner OS distribution like alpine for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNbFYYmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36oou4hn3wq55n14u9dz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNbFYYmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36oou4hn3wq55n14u9dz.png" alt="3rd best practice" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alpine has everything you need to start your application in a container, but is much more lightweight. And for most of the images that you look on a Docker Hub, you will see a version tag with alpine distribution inside.&lt;/p&gt;

&lt;p&gt;It is one of the most common and popular base images for Docker containers.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  4️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Optimize caching for image layers when building an image&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what are image layers and what does caching and image layer mean? 🤔&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) What are Image Layers?&lt;/strong&gt;&lt;br&gt;
A Docker image is built based on a Dockerfile.&lt;br&gt;
And in a Dockerfile &lt;strong&gt;each command or instruction creates an image layer&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxX5q4x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmtb90pbzqygh0h86a10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxX5q4x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmtb90pbzqygh0h86a10.png" alt="Docker Image Layers" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So when we use a base image of node alpine like in the above example it already has layers, because it was already built using its own Dockerfile. Plus, in our Dockerfile on top of that we have a couple of other commands that each will add a new layer to this image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Now what about caching?&lt;/strong&gt;&lt;br&gt;
Each layer will get cached by Docker. 👍&lt;br&gt;
So when you rebuild your image, if your Dockerfile hasn't changed, Docker will just use the cached layers to build the image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt; of cached image layers:&lt;br&gt;
✅  - Faster image building&lt;br&gt;
✅  - Faster pulling and pushing of new image versions: &lt;br&gt;
If I pull a new image version of the same application and let's say 2 new layers have been added in the new version: Only the newly added layers will be downloaded, the rest are already locally cached by Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Optimize the Caching&lt;/strong&gt;&lt;br&gt;
So to optimize the caching, you need to know that:&lt;br&gt;
Once a layer changes, &lt;strong&gt;all following or downstream layers have to be re-created as well&lt;/strong&gt;. In other words: when you change the contents of one line in the Dockerfile, caches of all the following lines or layers will be busted and invalidated. 😣&lt;/p&gt;

&lt;p&gt;So the rule here and the best practice is:&lt;br&gt;
&lt;strong&gt;Order your commands&lt;/strong&gt; in the Dockerfile &lt;strong&gt;from the least to the most frequently changing commands&lt;/strong&gt; to take advantage of caching and this way optimize how fast the image gets built. 🚀&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  5️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;.dockerignore&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now usually when we build the image, we don't need everything we have in the project to run the application inside. We&lt;br&gt;
&lt;strong&gt;don't need the auto-generated folders&lt;/strong&gt;, like &lt;code&gt;targets&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; folder, we don't need the &lt;code&gt;readme&lt;/code&gt; file etc.&lt;/p&gt;

&lt;p&gt;So how do we exclude such content from ending up in our application image? 🤔&lt;br&gt;
👉 Using a &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;It's pretty straightforward. We basically just create this &lt;code&gt;.dockerignore&lt;/code&gt; file and &lt;strong&gt;list all the files and folders that we want to be ignored&lt;/strong&gt; and when building the image, Docker will look at the contents and ignore anything specified inside.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAIQkTEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fso63260yg2o7sddcxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAIQkTEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fso63260yg2o7sddcxa.png" alt="5th best practice" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduced image size&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  6️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Make use of Multi-Stage Builds&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But now let's say there are some contents (like development, testing tools and libraries) in your project that you NEED for building the image - so during the&lt;br&gt;
build process - but you DON'T NEED them in the final image itself to run the application.&lt;/p&gt;

&lt;p&gt;If you keep these artifacts in your final image even though they're absolutely unnecessary for running the application, it will again result in an increased image size and increased attack surface. 🧐&lt;/p&gt;

&lt;p&gt;So how do we &lt;strong&gt;separate the build stage from the runtime stage&lt;/strong&gt;.&lt;br&gt;
In other words, how do we exclude the build dependencies from the image, while still having them available while building the image? 🤷‍♀️&lt;/p&gt;

&lt;p&gt;Well, for that you can use what's called &lt;strong&gt;multi-stage builds&lt;/strong&gt; 💡&lt;/p&gt;

&lt;p&gt;The multi-stage builds feature allows you to use multiple temporary images during the build process, but keep only&lt;br&gt;
the latest image as the final artifact:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr2zxvmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trdfkkdl96x1tkj4ffkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr2zxvmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trdfkkdl96x1tkj4ffkh.png" alt="6th best practice" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So these previous steps (marked "1st" in the above picture) will be discarded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separation of Build Tools and Dependencies from what's needed for runtime&lt;/li&gt;
&lt;li&gt;Less dependencies and reduced image size&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  7️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use the Least Privileged User&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, when we create this image and eventually run it as a container, &lt;strong&gt;which operating system user&lt;/strong&gt; will be used to start the application inside? 🤔&lt;br&gt;
By default, when a Dockerfile does not specify a user, it uses a &lt;strong&gt;root user&lt;/strong&gt;. 🙉  But in reality there is mostly no reason to run containers with root privileges.&lt;/p&gt;

&lt;p&gt;❌  This basically introduces a security issue, because when container starts on the host it, will potentially have root access on the Docker host.&lt;br&gt;
So running an application inside the container with a root user will make it &lt;strong&gt;easier for an attacker to escalate privileges on the host&lt;/strong&gt; and basically get hold of the underlying host and its processes, not only the container itself 🤯  Especially if the application inside the container is vulnerable to exploitation.&lt;/p&gt;

&lt;p&gt;✅  To avoid this, the best practice is to simply &lt;strong&gt;create a dedicated user&lt;/strong&gt; and a dedicated group in the Docker image to run the application and also &lt;strong&gt;run the application&lt;/strong&gt; inside the container &lt;strong&gt;with that user&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AD-IE3a9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrjr4m1885u1yqbnsjik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AD-IE3a9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrjr4m1885u1yqbnsjik.png" alt="7th best practice" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use a directive called &lt;code&gt;USER&lt;/code&gt; with the username and then start the application conveniently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Some images already have a &lt;strong&gt;generic user&lt;/strong&gt; bundled in, which you can use. So you don't have to create a new one. For example the node.js image already bundles a generic user called &lt;code&gt;node&lt;/code&gt;, which you can simply use to run the application inside the container. 👍&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  8️⃣ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scan your Images for Security Vulnerabilities&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, how do you make sure and validate the image you build has a few or no security vulnerabilities? 🧐&lt;/p&gt;

&lt;p&gt;So my final best practice is, once you build the image to &lt;strong&gt;scan it for security vulnerabilities&lt;/strong&gt; using the &lt;code&gt;docker scan&lt;/code&gt; command. 🔍&lt;/p&gt;

&lt;p&gt;In the background Docker actually uses a service called snyk to do the vulnerability scanning of the images. The scan uses a database of vulnerabilities, which gets constantly updated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example output&lt;/strong&gt; of &lt;code&gt;docker scan&lt;/code&gt; command:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kS-pa8yP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmwear5nj98iyfm63rik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kS-pa8yP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmwear5nj98iyfm63rik.png" alt="docker scan output" width="879" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see: &lt;br&gt;
1) the &lt;strong&gt;type of vulnerability&lt;/strong&gt;, &lt;br&gt;
2) a &lt;strong&gt;URL for more information&lt;/strong&gt; &lt;br&gt;
3) but also what's very useful and interesting you see &lt;strong&gt;which version&lt;/strong&gt; of the relevant library actually &lt;strong&gt;fixes that vulnerability&lt;/strong&gt;. So you can update your libraries to get rid of these issues. 👍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automate the scanning 🚀&lt;/strong&gt;&lt;br&gt;
In addition to scanning your images manually with &lt;code&gt;docker scan&lt;/code&gt; command on a CLI, you can also &lt;strong&gt;configure Docker Hub&lt;/strong&gt; to &lt;strong&gt;scan the images automatically&lt;/strong&gt;, when they get pushed to the repository. And of course you can &lt;strong&gt;integrate&lt;/strong&gt; this check in your &lt;strong&gt;CI/CD pipeline&lt;/strong&gt; when building your Docker images.&lt;/p&gt;



&lt;p&gt;So these are &lt;strong&gt;8 production best practices that you can apply today to make your Docker images leaner and more secure&lt;/strong&gt;! 🚀😊  Hope it is helpful for some of you! Of course there are many more best practices related to Docker, but I think applying these will already give you great results when using Docker in production.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you know some other best practices, which you think are&lt;br&gt;
super important and have to be mentioned? &lt;br&gt;
Please share them in the comments for others 🙌 👍&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The full video is available here: 🤓&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8vXoMqWgbQQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 😍 for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram - Posting many behind-the-scene stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
