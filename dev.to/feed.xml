<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Automatic authorization in Postman</title>
      <author>Iacovos Constantinou</author>
      <pubDate>Thu, 04 Nov 2021 18:04:47 +0000</pubDate>
      <link>https://dev.to/iacons/automatic-authorization-in-postman-34dk</link>
      <guid>https://dev.to/iacons/automatic-authorization-in-postman-34dk</guid>
      <description>&lt;p&gt;Working with short lived JWTs can be painful when you don't have an automated mechanism in place to refresh the token. This is quite common when setting up a new collection in Postman. &lt;/p&gt;

&lt;p&gt;In this post we will be looking on how we can automate this, so that we retrieve, refresh and use the token right before each API call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#environment-configuration"&gt;
  &lt;/a&gt;
  Environment configuration
&lt;/h2&gt;

&lt;p&gt;Before we get started, we need to define a few environment variables in Postman. These are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;baseUrl&lt;/code&gt; API URL&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt; The username to connect with&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;password&lt;/code&gt; The password for the above username&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, there's no way to display the password as a ... password field. Postman will store and display everything in clear text, so have that in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequest-script"&gt;
  &lt;/a&gt;
  Pre-request script
&lt;/h2&gt;

&lt;p&gt;Then, we need to edit the collection and configure the Pre-request script code. To do that, right click on the collection, select edit and then "Pre-request scripts"&lt;/p&gt;

&lt;p&gt;Here is an example. As you can see the implementation is quite generic so most likely you will need to adjust a few things to make that work for you.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Initially we check whether we have a token stored. If not we go ahead and retrieve a new one along with expiration time.&lt;/p&gt;

&lt;p&gt;We store both in environment variables. You don't need to create these variables, the script will create them whenever necessary.&lt;/p&gt;

&lt;p&gt;If the token exists, we check also whether it has expired.  In that case, we refresh the token and similarly to above we store the new token and its expiry date.&lt;/p&gt;

&lt;p&gt;In either case, the token will be stored in a new environment variable called &lt;code&gt;accessToken&lt;/code&gt;. This can be used to define the default authorization method. To do this right click on the collection, select edit, then Authorisation and use the variable &lt;code&gt;{{accessToken}}&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you find this approach useful and hopefully it will save you from some time from manual actions.&lt;/p&gt;

&lt;p&gt;Make sure to follow me on &lt;a href="https://dev.to/iacons"&gt;dev.to&lt;/a&gt;, &lt;a href="https://medium.com/@softius"&gt;Medium&lt;/a&gt; or &lt;a href="https://twitter.com/iacons"&gt;Twitter&lt;/a&gt; to read more about PHP, Docker and other dev topics.&lt;/p&gt;

</description>
      <category>postman</category>
      <category>javascript</category>
      <category>jwt</category>
      <category>api</category>
    </item>
    <item>
      <title>Created my own React Boilerplate</title>
      <author>Souza, Matheus</author>
      <pubDate>Thu, 04 Nov 2021 17:27:06 +0000</pubDate>
      <link>https://dev.to/cl4pper/created-my-own-react-boilerplate-i31</link>
      <guid>https://dev.to/cl4pper/created-my-own-react-boilerplate-i31</guid>
      <description>&lt;p&gt;A good way to learn how some tech works is drilling it until you get inside. So I've decided to build my own react boilerplate.&lt;/p&gt;

&lt;p&gt;Actually I'm using it only for personal projects, but I'm keen to share it and get some feedbacks from other devs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cl4pper-react-boilerplate.herokuapp.com/"&gt;App&lt;/a&gt;, &lt;a href="https://github.com/cl4pper/react-boilerplate"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel yourself free to use it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>4 Reasons to Use Yugabyte Cloud to Build Cloud Native Applications</title>
      <author>Chirag Narang</author>
      <pubDate>Thu, 04 Nov 2021 17:19:30 +0000</pubDate>
      <link>https://dev.to/yugabyte/4-reasons-to-use-yugabyte-cloud-to-build-cloud-native-applications-37h4</link>
      <guid>https://dev.to/yugabyte/4-reasons-to-use-yugabyte-cloud-to-build-cloud-native-applications-37h4</guid>
      <description>&lt;p&gt;Developers are using YugabyteDB for its PostgreSQL compatibility, linear scalability, resilience, and growing open source community. It has become the database of choice for organizations building cloud native applications that demand a highly scalable and resilient modern architecture. YugabyteDB is designed to run anywhere their cloud native applications run, across public, private, hybrid, and multi-cloud environments. However, developers don’t want to worry about the infrastructure, operations, and toil of typical DBA tasks. Plus, not all enterprises have the expertise and resources to oversee all the functions and understand the intricacies of running distributed databases.&lt;/p&gt;

&lt;p&gt;Yugabyte Cloud delivers the power of distributed SQL with the ease of use of a cloud database service. Developers can create and connect to an infinitely scalable, resilient PostgreSQL and Cassandra compatible database in minutes with zero operational overhead. It makes running YugabyteDB effortless in the public cloud, whether you’re building a new application or running a system-of-record that serves millions of transactions per day with several terabytes of data under management.&lt;/p&gt;

&lt;p&gt;Developers expect easy and on-demand access to a cloud native database. In this post, we reveal four key reasons to use this DBaaS offering of YugabyteDB to build cloud native applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-instantly-productive-with-a-simple-intuitive-design"&gt;
  &lt;/a&gt;
  Get Instantly Productive with a Simple Intuitive Design
&lt;/h2&gt;

&lt;p&gt;With Yugabyte Cloud, developers are instantly productive building great applications while leaving day-to-day database operations to Yugabyte. In addition to industry-standard APIs, the service applies best practices to manage your infrastructure and database securely, offering capabilities such as daily backups, non-disruptive software upgrades, continuous availability, database usage monitoring, logging, auditing, identity and access management, data encryption, and key rotation.&lt;/p&gt;

&lt;p&gt;With a few simple clicks, you get a distributed database in the cloud provider and region of your choice, provisioned appropriately for your application’s needs. You don’t have to worry about manual sharding, backups, upgrades, and monitoring. Yugabyte Cloud takes care of hardware failures automatically. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-globally-in-any-of-the-leading-public-clouds"&gt;
  &lt;/a&gt;
  Deploy Globally in Any of the Leading Public Clouds
&lt;/h2&gt;

&lt;p&gt;Yugabyte Cloud abstracts away the underlying cloud complexities, giving developers the freedom to build a cloud-agnostic operational model and manage a database across different cloud providers. &lt;/p&gt;

&lt;p&gt;You can deploy Yugabyte Cloud globally to over 30 regions supported by your preferred cloud provider. This helps you reduce latency, improve resilience, and comply with critical data residency regulations. Developers want to move faster, not be slowed down with the worry of cloud vendor lock-in and the burden of a complex migration process. Yugabyte Cloud is currently available for production on AWS and GCP, and will soon support Azure deployments. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-confidently-with-security-by-design"&gt;
  &lt;/a&gt;
  Use Confidently with Security by Design
&lt;/h2&gt;

&lt;p&gt;Data loss, theft, and privacy often top the list of data concerns for organizations, particularly in security-sensitive and regulated industries. When companies contemplate cloud adoption, they correctly focus on the negative impacts these can have. Built with security-by-design principles, Yugabyte Cloud enforces security best practices, regardless of which cloud providers and regions developers choose to use.&lt;/p&gt;

&lt;p&gt;Yugabyte Cloud protects your clusters and cloud infrastructure by automatically employing highly-secure encryption in transit and encryption at rest. Yugabyte Cloud also provides DDoS and application-layer protection by automatically defending network protocol and volumetric DDoS attacks. &lt;/p&gt;

&lt;p&gt;For network isolation, Yugabyte Cloud allows dedicated VPCs and IP allowlists for accepting connections from trusted IP addresses only. Additional features such as identity and access management, database access logging, auditing, and role-based access control ensure developers get best-in-class data security via intuitive admin controls. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-from-a-variety-of-flexible-pricing-options"&gt;
  &lt;/a&gt;
  Choose from a Variety of Flexible Pricing Options
&lt;/h2&gt;

&lt;p&gt;Yugabyte Cloud’s pricing is straightforward, based on the number of vCPUs and amount of data storage, both of which can be scaled separately as needed. Developers can choose between pay-as-you-go pricing and an annual subscription option. To make it even more effortless to get started, Yugabyte offers a perpetual free tier of Yugabyte Cloud. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Yugabyte Cloud is an easy way for developers to get started with a distributed SQL database. Now you can ensure continuous availability and limitless scale of your cloud native applications, while leaving database operations to Yugabyte.&lt;/p&gt;

</description>
      <category>cloudnative</category>
      <category>database</category>
      <category>postgres</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Help us understand how you use Open Source Puppet</title>
      <author>Ben Ford</author>
      <pubDate>Thu, 04 Nov 2021 17:13:52 +0000</pubDate>
      <link>https://dev.to/puppet/help-us-understand-how-you-use-open-source-puppet-51aj</link>
      <guid>https://dev.to/puppet/help-us-understand-how-you-use-open-source-puppet-51aj</guid>
      <description>&lt;p&gt;The core of Puppet is an open source story. In the years that Puppet has existed — first as a project that Luke built a consultancy around, and then later as the core of our product as Reductive Labs evolved into Puppet Labs and then Puppet, Inc. — we have relied on the vision and expertise of our open source community. It’s a symbiotic relationship and the very definition of an ecosystem.&lt;/p&gt;

&lt;p&gt;After all, Puppet was built by practitioners for practitioners. Our pain points were your pain points because you were right there in the trenches with us. Many core features, like &lt;a href="https://tickets.puppetlabs.com/browse/PUP-1072"&gt;PUP-1072&lt;/a&gt;, were originally contributed by community members solving their own problems. And as we grew, your bug reports and feature requests guided our development trajectory.&lt;/p&gt;

&lt;p&gt;Today, we'd like to ask for some product roadmap feedback. If you’re using Open Source Puppet (OSP), please take a few minutes to respond to our brief survey and make your voice heard. We want to hear from you about how you’re using it, which features you focus on, the breadth and depth of your usage, and much more. Understanding your needs and implementation enables us to build the best possible roadmap for the future of Puppet.&lt;/p&gt;

&lt;p&gt;For each survey response, Puppet will donate $1 to &lt;a href="https://voxpupuli.org/"&gt;Vox Pupuli&lt;/a&gt; via &lt;a href="https://www.spi-inc.org"&gt;Software in the Public Interest (SPI)&lt;/a&gt;. Plus you can opt in to a raffle to win a new Apple Watch Series 7.&lt;/p&gt;

&lt;p&gt;This survey takes less than 15 minutes to complete. This research is being conducted by an independent research firm for internal use only. All responses will remain anonymous, of course.&lt;/p&gt;

&lt;p&gt;Take the &lt;a href="https://clearpathstrategies.sjc1.qualtrics.com/jfe/form/SV_71WebwzdacZtYjA"&gt;Open Source Puppet user survey&lt;/a&gt; by Friday, 19 November, 2021, at midnight PT.&lt;/p&gt;

</description>
      <category>puppet</category>
      <category>opensource</category>
      <category>roadmap</category>
    </item>
    <item>
      <title>Software Complexity, Facebook’s Facial Recognition System, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 04 Nov 2021 17:12:38 +0000</pubDate>
      <link>https://dev.to/devteam/software-complexity-facebooks-facial-recognition-system-more-on-devnews-me</link>
      <guid>https://dev.to/devteam/software-complexity-facebooks-facial-recognition-system-more-on-devnews-me</guid>
      <description>&lt;p&gt;Don't miss this week's episode of DevNews — the podcast where we read between the lines of today's most pressing software development-related stories&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E2 - Software Complexity, Facebook’s Facial Recognition System, and the Use of AI in a Mass Layoff&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e2-software-complexity-facebook-s-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff"&gt;
      &lt;img id="episode-profile-image" alt="S6:E2 - Software Complexity, Facebook’s Facial Recognition System, and the Use of AI in a Mass Layoff" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/scarey102"&gt;Scott Carey&lt;/a&gt;, enterprise technology journalists at InfoWorld,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this episode, we talk about Facebook’s plan to shut down its Facial Recognition System, and a mass firing at a Russian payment services company fueled by AI productivity measurement tools. Then we speak with Scott Carey, enterprise technology journalists at InfoWorld, about how the growing complexity of modern software systems might be “killing” software developers.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e2-software-complexity-facebooks-facial-recognition/id1525581923?i=1000540728305"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/3DxXvByISHHZLtbachDJ00"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQy?sa=X&amp;amp;ved=0CAQQkfYCahcKEwiA0ee3mf_zAhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e2-software-complexity-facebooks-facial-recognition-system-and-the-use-of-ai-in-a-mass-layoff-88043659"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s6e2-software-complexity--hU63i8N4Xe/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=167486558"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/227"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsor: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the show this week! 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>How to configure import aliases in Vite, TypeScript and Jest</title>
      <author>sand4rt</author>
      <pubDate>Thu, 04 Nov 2021 17:06:04 +0000</pubDate>
      <link>https://dev.to/sand4rt/how-to-configure-import-aliases-in-vite-typescript-and-jest-418i</link>
      <guid>https://dev.to/sand4rt/how-to-configure-import-aliases-in-vite-typescript-and-jest-418i</guid>
      <description>&lt;p&gt;Most people have seen them, those immensely long import paths like the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../../../../modules/module.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To improve this, you can use import aliases and make it look like the example&lt;br&gt;
below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/modules/module.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The benefit of this is readability and that you can move files and folders to sub or parent directories without changing the import paths.&lt;/p&gt;

&lt;p&gt;Tools like Vue CLI are supporting this out-of-the-box, but if you want to use the new blazing-fast build tool Vite, you'll need to &lt;em&gt;(at the time of writing)&lt;/em&gt;&lt;br&gt;
configure it manually. I've included TypeScript and Jest because they are often used in combination.&lt;/p&gt;

&lt;p&gt;For this to work, all tools need to know that import aliases are used by modifying each tool's configuration file.&lt;/p&gt;

&lt;p&gt;Vite has a configuration file called &lt;code&gt;vite.config.ts&lt;/code&gt; and by adding the &lt;code&gt;resolve&lt;/code&gt; object Vite will know that import aliases are being used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vite.config.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding a &lt;code&gt;paths&lt;/code&gt; object to the &lt;code&gt;compilerOptions&lt;/code&gt; inside the &lt;code&gt;tsconfig.json&lt;/code&gt; like the example below TypeScript will also know that import aliases are being used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tsconfig.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"@/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last Jest knows that aliasses are being used by adding the &lt;code&gt;moduleNameMapper&lt;/code&gt; to the &lt;code&gt;jest.config.ts&lt;/code&gt; configuration file like the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest.config.ts&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;moduleNameMapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^@/(.*)$&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;rootDir&amp;gt;/src/$1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vite</category>
      <category>typescript</category>
      <category>jest</category>
      <category>javascript</category>
    </item>
    <item>
      <title>P-PL.com Seeking JS and Python Experts</title>
      <author>Lambda Technology Inc</author>
      <pubDate>Thu, 04 Nov 2021 17:04:44 +0000</pubDate>
      <link>https://dev.to/lambdatechnologyinc/p-plcom-seeking-js-and-python-experts-55ge</link>
      <guid>https://dev.to/lambdatechnologyinc/p-plcom-seeking-js-and-python-experts-55ge</guid>
      <description>&lt;p&gt;&lt;strong&gt;Calling All Developers!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So very recently, a small crew of some very talented Devs and I put together a little project called P-PL.com&lt;/p&gt;

&lt;p&gt;This platform is designed for code experts and experienced/seasoned programmers to be able to sell their expertise and time to others that are seeking knowledge within that code base. Currently, at launch we are focusing heavily on two languages:&lt;br&gt;
-JavaScript&lt;br&gt;
-Python&lt;/p&gt;

&lt;p&gt;If you're great at slinging code and would like to freelance some of your time, at your own convenience, P-PL.com is the site for you! Help others solve their code issues, or tutor someone looking to learn. We are looking to onboard as many seasoned coders as possible, so please feel free to share our content within your circles!&lt;/p&gt;

&lt;p&gt;Check out our socials: @p_pl_talk on Instagram and Twitter. Search 'P-PL' on Youtube for a 5 minute rundown tutorial of our super easy-to-use webapp.  &lt;/p&gt;

&lt;p&gt;Sign up, give yourself a title, a brief description about yourself, and choose the code/tech categories you're interested in. Give yourself an avatar, and you're rockin' 'n rollin'!&lt;/p&gt;

&lt;p&gt;For the best experience, we ask that you access the platform from a Desktop Machine or Laptop, and utilize a browser like Chrome.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>7 WordPress plugins to generate Sitemap on your website</title>
      <author>CodeWatchers</author>
      <pubDate>Thu, 04 Nov 2021 17:01:42 +0000</pubDate>
      <link>https://dev.to/codewatchers_en/7-wordpress-plugins-to-generate-sitemap-on-your-website-e0b</link>
      <guid>https://dev.to/codewatchers_en/7-wordpress-plugins-to-generate-sitemap-on-your-website-e0b</guid>
      <description>&lt;p&gt;If you are an internet enthusiast or want to create a website, you may have heard of the sitemap; this protocol set up by Google to facilitate the monitoring of websites. But if you don't actually know what it is for and how to use it, then you've come to the right place. Together, we'll see what it is, how it can help you, and especially how to add this feature to your WordPress site.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-a-sitemap" class="anchor"&gt;
  &lt;/a&gt;
  What is a sitemap?
&lt;/h2&gt;

&lt;p&gt;A sitemap is a file that lists all the URLs (addresses) of your website. This map of your site, accessible to your users, can also help search engine robots obtain information about the structure of your content, while speeding up the indexing of your site.&lt;/p&gt;

&lt;p&gt;Today, search engine bots are able to visit your site on their own, browsing through your internal links. To put it simply, during the indexing phase, robots store your content in a database, before it is returned to Internet users via the search results. It should be noted that a sitemap is an XML file, and therefore you can update it regularly. And while it all sounds pretty complicated, it's pretty straightforward to add this functionality to your website, especially with WordPress plugins. We are going to see some of them here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-best-wordpress-plugins-to-add-a-sitemap-to-your-site" class="anchor"&gt;
  &lt;/a&gt;
  The best WordPress plugins to add a sitemap to your site
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-simple-sitemap" class="anchor"&gt;
  &lt;/a&gt;
  1. Simple Sitemap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vxnp5Nyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/10-WordPress-plugins-to-generate-Sitemap-on-your-website-5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vxnp5Nyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/02/10-WordPress-plugins-to-generate-Sitemap-on-your-website-5.jpg" alt="" width="717" height="302"&gt;&lt;/a&gt;Simple Sitemap is another free plugin for generating Sitemaps on WordPress. It is very popular, especially because it offers the possibility of generating and previewing a sitemap directly in the text editor. Practice is not it!&lt;/p&gt;

&lt;p&gt;Additionally, it supports multiple sitemaps per page.&lt;/p&gt;

&lt;p&gt;Simple Sitemap offers beautiful 100% CSS sitemap tabs (no JavaScript). You have the option of choosing between standard or tabbed layouts. No need for coding knowledge to be able to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://wordpress.org/plugins/simple-sitemap/#description"&gt;Details&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://demo.wpgothemes.com/flexr/simple-sitemap-pro-demo/"&gt;Demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://codewatchers.com/aff/hostings/go"&gt;Hosting&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewatchers.com/en/list/7-wordpress-plugins-to-generate-sitemap-on-your-website?utm_campaign=content-trimming&amp;amp;utm_source=dev.to&amp;amp;utm_medium=link"&gt;Read The Full Tutorial.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My First Time Using JS</title>
      <author>Dorthy Thielsen</author>
      <pubDate>Thu, 04 Nov 2021 16:51:25 +0000</pubDate>
      <link>https://dev.to/dotnotation/my-first-time-using-js-5506</link>
      <guid>https://dev.to/dotnotation/my-first-time-using-js-5506</guid>
      <description>&lt;p&gt;This week I started learning JS in my Flatiron bootcamp. This is the language I was most excited to learn. It is definitely more challenging than I anticipated and I still have very basic questions about so many aspects of the language. For instance, semicolons, when to use them? The arrow function expressions are still really muddy for me. Division of concerns is not as clear to me in JS as it was in Ruby. It is only my first week so I am giving myself some room to struggle. &lt;/p&gt;

&lt;p&gt;Most of the labs this week were basically code alongs with no real substance. They were very helpful for me, but overall not that interesting. I wanted to share my first real lab in the JS course which is called Task Lister Lite. The point of the lab is to use &lt;code&gt;.preventDefault()&lt;/code&gt; so that every time someone submits a new task to the list, the page doesn't refresh. Bonus points for doing anything else. I decided to also add an edit and delete buttons as well. This is purely front end so none of the information is persisted to a database of any sorts. &lt;/p&gt;

&lt;p&gt;Instead of doing my usual explanations, I have decided to just share all of the pseudo code I did. Since I am so new to the language, I wrote so much pseudo code that I think is more helpful than me describing every aspect. Anyways I hope you enjoy my first JS project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;editMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;create-task-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// grab form&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskForm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;taskForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// add event listener for submit and handling submit&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent the default so the page won't reload&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new-task-description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// grab input field&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;editMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;editMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;taskInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="c1"&gt;// edit the children of the individual task and the first child is the text&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit-task&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create New Task&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// resetting the submit button to say Create New Task again&lt;/span&gt;
    &lt;span class="nx"&gt;editMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// ending edit mode&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// add the value of the input to the task list&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;taskInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// resetting the input field text&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasksDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// grab the tasks div&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// create a new div for each task&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskSpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// create a span for each task&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// create 'x' element for deletion &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// create edit button&lt;/span&gt;

  &lt;span class="nx"&gt;deleteIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;#10006;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// making delete icon look like an x&lt;/span&gt;
  &lt;span class="nx"&gt;taskSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// add the text to the task span&lt;/span&gt;
  &lt;span class="nx"&gt;editButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;deleteIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//grabbing the parent element of the delete icon (taskDiv) and deleting it&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;editButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleEdit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;taskDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskSpan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;editButton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// add the task span, delete icon, and edit button to the individual task div&lt;/span&gt;
  &lt;span class="nx"&gt;tasksDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;taskDiv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// add the individual task divs to the div container&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;taskDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// grabbing the parent to the individual task div&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;taskDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// grab the individual task div&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit-task&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// grab submit button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new-task-description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// get the text input&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// change the value of the text input to the comment we are editing&lt;/span&gt;
  &lt;span class="nx"&gt;submitButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// change the submit button to say Edit&lt;/span&gt;
  &lt;span class="nx"&gt;editMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;taskDiv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// edit the individual task div&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The fundamental of JavaScript vs React</title>
      <author>Yonatan Kawo</author>
      <pubDate>Thu, 04 Nov 2021 16:46:56 +0000</pubDate>
      <link>https://dev.to/yonatankawo/the-fundamental-of-javascript-vs-react-2b8g</link>
      <guid>https://dev.to/yonatankawo/the-fundamental-of-javascript-vs-react-2b8g</guid>
      <description>&lt;p&gt;I recently completed a React Portfolio project and thought it would be fantastic to share my journey with the rest of the wolrd.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-javascript-concepts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basic JavaScript Concepts&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;My initial project was JavaScript(JS)-based, and it should be considered garbage in the world of web developers. At the time, I thought I had mastered the frontend web development by creating a simple &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;JS&lt;/a&gt; app. Friends, that's an example of "a little knowledge is dangerous" and please do not be this guy :).&lt;br&gt;
Anyway, what are some of the fundamental JavaScript concepts that every programmer should understand? The next stage of web development would be incredibly difficult without a thorough knowledge of these &lt;a href="https://www.geeksforgeeks.org/7-javascript-concepts-that-every-developer-must-know/"&gt;fundeamentals&lt;/a&gt;. So, the followings are the basics of JS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Comparisons&lt;/li&gt;
&lt;li&gt;Logical Operators &lt;/li&gt;
&lt;li&gt;Functions(callback function)&lt;/li&gt;
&lt;li&gt;Data Structures &amp;amp; Types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; I cannot emphasize enough the importance of networking and participating in various web development communities in order to enhance one's coding skills - a lesson I learnt the hard way.&lt;br&gt;
&lt;strong&gt;Note 2:&lt;/strong&gt; Understanding &lt;a href="http://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git"&gt;GIT&lt;/a&gt; and &lt;a href="https://docs.github.com/en/get-started/using-git/about-git#how-github-works"&gt;GITHUB&lt;/a&gt; as well as learning programming languages, go hand in hand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-react-concepts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basic React Concepts&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I didn't appreciate the significance of JS core concepts until I began working with &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started"&gt;React&lt;/a&gt;, the next stage of frontend web development. At a high level, I picture JS being the backbone of React just as HTML is for JS. &lt;/p&gt;

&lt;p&gt;Similarly, in order to have a solid understanding of React's essential notions, one must be familiar with the following &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;core concepts&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSX(JavaScript XML)&lt;/li&gt;
&lt;li&gt;React Elements&lt;/li&gt;
&lt;li&gt;Components &amp;amp; Props&lt;/li&gt;
&lt;li&gt;State &amp;amp; Lifecycle&lt;/li&gt;
&lt;li&gt;Handling Events&lt;/li&gt;
&lt;li&gt;Conditional endering&lt;/li&gt;
&lt;li&gt;Lists &amp;amp; Keys&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;React-router&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note 3:&lt;/strong&gt; At the end of react trainings, one should be able to explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The difference between React and plain JS &lt;/li&gt;
&lt;li&gt;The difference types of React hooks&lt;/li&gt;
&lt;li&gt;How to modify React State hooks&lt;/li&gt;
&lt;li&gt;The three ways to use React useEffects&lt;/li&gt;
&lt;li&gt;The difference between Props and States&lt;/li&gt;
&lt;li&gt;The difference between HTML DOM(Document Object Model) &amp;amp; 
 Virtual DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If I could start over my programming journey, I'd start with HTML(HyperText Markup Language) and CSS(Cascading Style Sheets), then go on to JavaScript. Before diving into React, I'd make sure I understand the connection and interdependencies between HTML, CSS, and JavaScript. More importantly, I won't start React if I'm not comfortable with JavaScript.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How Do You Become a Developer Advocate?</title>
      <author>Rizel Scarlett</author>
      <pubDate>Thu, 04 Nov 2021 16:45:01 +0000</pubDate>
      <link>https://dev.to/blackgirlbytes/how-did-i-become-a-developer-advocate-1n7d</link>
      <guid>https://dev.to/blackgirlbytes/how-did-i-become-a-developer-advocate-1n7d</guid>
      <description>&lt;p&gt;Ever since I posted this &lt;a href="https://twitter.com/blackgirlbytes/status/1427382988283723781?s=20"&gt;tweet&lt;/a&gt;,  friends, acquaintances, and random strangers have reached out to me asking some version of the same question: "How do I become a developer advocate?"&lt;/p&gt;

&lt;p&gt;Unfortunately, although I'd love to answer everyone, I don't have the time. Instead of answering everyone individually, I decided to write a detailed breakdown of how I became a developer advocate.&lt;/p&gt;

&lt;p&gt;To be clear, people take many different routes into Developer Relations, so my route is not the only way and not the best. My path to DevRel could've been shorter and more straightforward. Similar to those asking me, I was also dying to figure out how to get into Developer Relations. A year ago, I was also sliding into DMs asking the same question.  Fortunately, I found plenty of informative content from DevRel leaders on how to break into this field. In summary, the general advice for those seeking to become developer advocates has been:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn in public by creating content in the form of:

&lt;ul&gt;
&lt;li&gt;Public Speaking&lt;/li&gt;
&lt;li&gt;Technical Blogging&lt;/li&gt;
&lt;li&gt;Youtube Videos&lt;/li&gt;
&lt;li&gt;Twitch Streams&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Develop Empathy

&lt;ul&gt;
&lt;li&gt;By working as a software developer&lt;/li&gt;
&lt;li&gt;Through building and helping developer communities&lt;/li&gt;
&lt;li&gt;By contributing to open source&lt;/li&gt;
&lt;li&gt;As a teacher&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Build your developer brand 

&lt;ul&gt;
&lt;li&gt;Through social media (ex: Twitter)&lt;/li&gt;
&lt;li&gt;By publicly showcasing that you're doing the above items&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because there is already a lot of advice about becoming a developer advocate, and for me, some of the items above seemed unattainable and overwhelming, I'll take a different approach. Instead of creating similar content, in this post, I will evaluate how each of my professional experiences helped me gain the skills I needed to get an offer to work as a Developer Advocate at GitHub. &lt;/p&gt;

&lt;p&gt;It's likely that you have already developed the requisite skills or are already doing the work, but you don't yet realize it. My daily work already incorporated many relevant experiences and transferable skills, so I didn't need to pick up new skills, start a podcast, stream on Twitch, or even contribute to open source before interviewing. I just needed to package my experiences into a story that in&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-off-what-is-developer-relations"&gt;
  &lt;/a&gt;
  First off, what is Developer Relations? 🤷‍♀️
&lt;/h2&gt;

&lt;p&gt;Developer Relations is the team responsible for building developer communities. The team consists of Community Managers, Developer Advocates, Developer Experience Engineers, Developer Evangelists, Technical Writers, and more. &lt;/p&gt;

&lt;p&gt;I specifically wanted to become a Developer Advocate. According to Mary Thengvall, Director of Developer Relations at Camunda, "a developer advocate is someone who's got a developer or coding background but also enjoys writing, speaking, and generally empowering the technical audience to better understand a product. They advocate internally for the technical audience's needs."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-get-there"&gt;
  &lt;/a&gt;
  How did I get there? 🤔
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#before-tech-empathy-for-customer"&gt;
  &lt;/a&gt;
  Before Tech: Empathy for Customer 💜
&lt;/h3&gt;

&lt;p&gt;Between 2014 and 2016, I worked multiple jobs: Planet Fitness, H&amp;amp;M, Let's Get Ready, Mass General Hospital. Some of them I worked at the same time. For example, after my shift at H&amp;amp;M, I would run over to Planet Fitness. After dropping out of college for financial reasons, I developed an unhealthy obsession with money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: I developed customer service skills and empathy for the user in these roles. Even when the customers had disagreeable personalities, I learned to understand their frustration. I also learned that having this many jobs was ridiculous regardless of my monetary goals!&lt;/p&gt;

&lt;p&gt;During this time, I also pursued my Associate's degree in Computer Information Systems. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Through community college, I learned about the importance of internships and theoretical IT problem-solving skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-support-internships-problemsolving-and-learning-in-public"&gt;
  &lt;/a&gt;
  IT Support Internships: Problem-Solving and Learning in Public 🔧
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Federal Home Loan Bank of Boston&lt;/strong&gt;: This was my first technical internship. I went in not knowing anything, and I made it clear that I didn't know things, but I wanted to learn. In addition to migrating employees from Windows 7 to Windows 10 and implementing two-factor authentication on their mobile devices, I mostly helped employees troubleshoot their technical issues, which forced me to break down technical concepts in a way they could understand. People genuinely embraced my journey, and it made me feel like I belonged in tech. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Confidence, terminal/command line basics, willingness to learn in front of others, ability to explain technical concepts to less technical people, empathy, and patience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HubSpot&lt;/strong&gt;: I held two internships at HubSpot as a data analyst for the AV support team and a help desk technician. HubSpot was a goal for me because I wanted exposure to the latest technologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: I learned about APIs and bash scripting within my six months at HubSpot. I also learned more about coding and decided to pursue a career in software development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-and-inperson-networking"&gt;
  &lt;/a&gt;
  Social and In-Person Networking 🤝
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: In 2016, I made a Twitter account dedicated to connecting with people in the tech industry and documenting my journey. Although my follower count was low, I made a few friendships and felt like I gained insight into people's experiences in the tech industry. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In-person conferences&lt;/strong&gt;: My internships, especially at the Federal Home Loan Bank of Boston, sponsored me to attend local conferences. I gained inspiration, observed well-delivered conference talks, and learned to network with industry leaders through conferences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-bootcamp-learning-to-code"&gt;
  &lt;/a&gt;
  Coding Bootcamp: Learning to Code 👩‍💻
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Resilient Coders&lt;/strong&gt;: In January 2018, I joined a non-profit coding bootcamp for people of color. People told me attending a bootcamp is hard, and I didn't believe them until I experienced it. Because so much work was due at once, I had to consume information and quickly produce solutions to problems, which mirrored my future experiences as a software engineer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Front-end development, backend development, building fast prototypes, quickly solving problems on a deadline,  and reading and understanding copied code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skillist&lt;/strong&gt;: While I completed my coding bootcamp, I worked as a Content Marketing intern at a startup called Skillist, which is now acquired. I mostly wrote career and interview prep tips. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: This experience reignited my love for writing and reminded me of my creative and content creation skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-engineering-internships-production-code-and-computer-science-theory"&gt;
  &lt;/a&gt;
  Software Engineering Internships: Production Code and Computer Science Theory 🧠
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Formlabs&lt;/strong&gt;: Before I completed my bootcamp, I landed a role at Formlabs, a 3D printing company based in Massachusetts. I sat on a newly formed Business Systems team where they tasked me with building two internal tools that would help them integrate their systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Although I doubt they still use my web apps, the experience was invaluable because that was my first time using unfamiliar programming languages to build a full-stack web application from scratch. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Veson Nautical&lt;/strong&gt;: Fortunately, at Veson Nautical, they used data tables, which coincidentally, I used to build my applications at Formlabs. During this time, I also enrolled in Boston University's Accelerated Degree Program for Computer Science. At the end of my internship, Veson offered me a full-time role. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Version control, writing production code, React, and navigating complicated systems. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boston University&lt;/strong&gt;: As I mentioned, I enrolled in BU to earn my bachelor's degree in Computer Science. It was stressful to balance both school and my job. I would not do it again. After completing a bootcamp and experiencing culture shock at all my prior internships, I was beyond exhausted, and I didn't give myself a chance to absorb what I learned. However, I gained exposure to computer science theory, which helped me better discuss advanced technical topics with engineers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Data Structures and Algorithms, Computer Networking, Java, Operating Systems, Calculus, Data Management, and Computer Architecture&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fulltime-software-engineering-system-design-%F0%9F%8F%97"&gt;
  &lt;/a&gt;
  Full-time Software Engineering: System Design 🏗
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hi Marley&lt;/strong&gt;: In February of 2019, I wanted to push myself more, so I worked at a startup. This company moved quickly. In terms of my skills, I was behind the curve, so I tried to keep up. I'm still grateful for this experience because the features I built were impactful and complex, making for great conversation in interviews. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: How to solve coding problems quickly, thinking about system architecture, AWS (Cloudwatch, CloudFront, DynamoDB, S3, and Lambdas), Redux, Microservices, Git Workflow, and debugging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#volunteering-building-inclusive-developer-communities"&gt;
  &lt;/a&gt;
  Volunteering: Building Inclusive Developer Communities 🌍
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;G{Code}&lt;/strong&gt;: As I completed my degree and continued working at Hi Marley, I helped to build a non-profit organization alongside the founder Bridgette Wallace and my colleague Bailey Siber. At G{Code}, we teach women of color and non-binary people of color the fundamentals of web development. In addition to creating digestible educational content, I had to think about their overall wellbeing, like if they needed transportation or food. Today, about 70% of our alumni have continued their technical journeys. Some of them currently work as Software Engineers at Intuit and Vertex Pharmaceuticals. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Inclusive and equitable community building, technical curriculum development, mentoring, instructing, cold calling, cold emailing, technical event planning, and career coaching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hack.Diversity&lt;/strong&gt;: One of the ways that I landed new jobs like HubSpot was through Hack.Diversity. As an alumnus from their pilot cohort, I felt grateful for their opportunities, so I served on their Alumni Leadership Council. We held alumni tech talks, and I led a team of 8 in building the MVP of an alumni website. I used this as a space to practice my technical presentation skills. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Speaking skills, management, and event planning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mentorship-get-someone-to-help-you-shine"&gt;
  &lt;/a&gt;
  Mentorship: Get Someone to Help You Shine ✨
&lt;/h3&gt;

&lt;p&gt;In 2020, I discovered Developer Advocacy, but people always told me to wait until I had at least five years of experience in software engineering, or they said I would lose my technical skills if I did.&lt;/p&gt;

&lt;p&gt;I took the above advice sparingly because I saw people like Chloe Condon and Ceora Ford doing exceedingly well in their roles as Advocates but didn't have 5+ years of software engineering experience.&lt;/p&gt;

&lt;p&gt;My mentor, Anita Patel, supported my dreams and encouraged me to blog about what I learned, so I wrote my first &lt;a href="https://dev.to/blackgirlbytes/a-faster-way-to-track-down-bugs-2aod"&gt;post&lt;/a&gt; in April 2020 about the command: git bisect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech-blogging-building-a-developer-brand"&gt;
  &lt;/a&gt;
  Tech blogging: Building a Developer Brand  ✍️
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Botany&lt;/strong&gt;: After suffering from burnout and severe anxiety, I was just trying to regain my self-esteem and love for coding. At Botany, my manager made it easy to do that. He encouraged me to write a blog post after I merged a PR to reflect on my learnings. His advice aligned with my mentor's advice, so I started technical blogging in between tickets. Here's one of my first &lt;a href="https://blackgirlbytes.dev/how-to-sync-an-s3-bucket-with-github-actions"&gt;posts&lt;/a&gt; about GitHub Actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;: Effectively communicating more advanced technical topics in written format, slowly regained my confidence, GitHub Actions, React Hooks, and TypeScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviewing-the-moment-of-truth"&gt;
  &lt;/a&gt;
  Interviewing: The Moment of Truth
&lt;/h3&gt;

&lt;p&gt;By the time that I started interviewing, I was able to demonstrate that I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Could build developer communities and connect with members in various communities&lt;/li&gt;
&lt;li&gt;Had experience giving technical presentations (to small, local groups)&lt;/li&gt;
&lt;li&gt;Had strong writing skills &lt;/li&gt;
&lt;li&gt;Loved helping others&lt;/li&gt;
&lt;li&gt;Had varied experience with solving complex problems in web development with code&lt;/li&gt;
&lt;li&gt;Knew how to exercise empathy&lt;/li&gt;
&lt;li&gt;Had experience organizing events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While my interviews were not all successful, I went into the the interviews confidently because I knew I had strong examples to demonstrate my skillset.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Whether you have been a teacher, a waiter, or a marketer, your past professional experiences helped you develop relevant skills needed to work as a Developer Advocate. Start reflecting on your experiences, and don't sell yourself short!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>developeradvocate</category>
      <category>developerrelations</category>
    </item>
    <item>
      <title>How to Export to CSV with Ruby on Rails</title>
      <author>Nicholas Dill</author>
      <pubDate>Thu, 04 Nov 2021 16:41:08 +0000</pubDate>
      <link>https://dev.to/nicholasdill/how-to-export-to-csv-with-ruby-on-rails-2igm</link>
      <guid>https://dev.to/nicholasdill/how-to-export-to-csv-with-ruby-on-rails-2igm</guid>
      <description>&lt;p&gt;So, you need to export a CSV.&lt;/p&gt;

&lt;p&gt;As with everything in Ruby on Rails, it's really easy to do this. &lt;/p&gt;

&lt;p&gt;I will walk through how I built this feature to export sales leads on another Rails app of mine. But this same approach can be applied to any data you want to export as a CSV file.&lt;/p&gt;

&lt;p&gt;We are going to build an endpoint that a user can navigate to, that will trigger a download of the CSV file.&lt;/p&gt;

&lt;p&gt;The idea is, they land on a route like this &lt;code&gt;https://example.com/export/leads.csv&lt;/code&gt; and we start a download instead of rendering a normal page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-route"&gt;
  &lt;/a&gt;
  Create the Route
&lt;/h2&gt;

&lt;p&gt;First we need to create a route that we point the user to.&lt;/p&gt;

&lt;p&gt;Add something like this to your &lt;code&gt;config/routes.rb&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'leads/export'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'leads#export'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the name of your controller to whatever you want. Same with the method name. I went with &lt;code&gt;export&lt;/code&gt; because that makes it clear what this method is responsible for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-controller"&gt;
  &lt;/a&gt;
  Create the Controller
&lt;/h2&gt;

&lt;p&gt;Rails will expect the leads controller to be defined at &lt;code&gt;app/controllers/leads_controller.rb&lt;/code&gt;, let's create that.&lt;/p&gt;

&lt;p&gt;Initially, the contents of this controller should look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'csv'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LeadsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;export&lt;/span&gt;
    &lt;span class="vi"&gt;@leads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Leads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;organization_id: &lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;csv&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text/csv'&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Disposition'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"attachment; filename=leads.csv"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need our &lt;code&gt;export&lt;/code&gt; method to do a few things here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pull data from the database&lt;/li&gt;
&lt;li&gt;convert our data into a CSV file&lt;/li&gt;
&lt;li&gt;format the response so we download the CSV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First let's pull the data. We'll need to build a query and save the results to an instance variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="vi"&gt;@leads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Leads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;organization_id: &lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organization_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we have to convert the result of this query into the CSV format.&lt;/p&gt;

&lt;p&gt;At the top of our controller let's import the built-in Rails &lt;code&gt;csv&lt;/code&gt; library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'csv'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can format our controller to respond when CSV is requested. Rails uses the &lt;code&gt;respond_to&lt;/code&gt; method to allow controller endpoints to respond to multiple formats. You will see a lot of endpoints that respond with HTML, JSON, and even XML.&lt;/p&gt;

&lt;p&gt;Here's what those formats would normally look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="vi"&gt;@leads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;xml: &lt;/span&gt;&lt;span class="vi"&gt;@leads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_xml&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll need to slightly modify this to return CSV data.&lt;/p&gt;

&lt;p&gt;Our version will instead respond to &lt;code&gt;format.csv&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;csv&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text/csv'&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Disposition'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"attachment; filename=leads.csv"&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;template: &lt;/span&gt;&lt;span class="s2"&gt;"path/to/index.csv.erb"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means when someone makes a request to our URL, which was &lt;code&gt;https://example.com/export/leads.csv&lt;/code&gt;, the tailing &lt;code&gt;leads.csv&lt;/code&gt; extension tells our server to respond with the csv format.&lt;/p&gt;

&lt;p&gt;Also, these &lt;a href="https://testsuite.io/content-type-header"&gt;Content-Type headers&lt;/a&gt; tell the browser that we are returning a CSV file to download.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-csv-file"&gt;
  &lt;/a&gt;
  Building the CSV File
&lt;/h2&gt;

&lt;p&gt;Our backend is fully wired up to export CSV for the user.&lt;/p&gt;

&lt;p&gt;Now we need to generate the actual CSV file. The controller will automatically render the template found at &lt;code&gt;app/views/leads/export.csv.erb&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's create that, and then here's what it will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%-&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Date'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_line&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%-&lt;/span&gt; &lt;span class="vi"&gt;@leads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_line&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%-&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Formatting a CSV file is very straightforward in Rails. We just need to call &lt;code&gt;CSV.generate_line&lt;/code&gt; to add a row.&lt;/p&gt;

&lt;p&gt;First we declare a variable called &lt;code&gt;headers&lt;/code&gt;, and store the headers of our CSV file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%-&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Date'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we generate the first row for these headers with this call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_line&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And last, we loop through our query result and again generate a row for each lead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%-&lt;/span&gt; &lt;span class="vi"&gt;@leads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;CSV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_line&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;lead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%-&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. &lt;/p&gt;

&lt;p&gt;Now we have an endpoint that a user can access to download their data as a CSV. You can point users to this endpoint with a button and the download should begin automatically.&lt;/p&gt;

&lt;p&gt;Something like this should do the trick!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/leads/export.csv"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Export CSV&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, replace the query I used and pull whatever records you want in your controller.&lt;/p&gt;

&lt;p&gt;Pass &lt;code&gt;CSV.generate_line()&lt;/code&gt; as many arguments as you want columns, and don't forget to pass headers in the first line to match!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
