<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build a CRUD API with Fastify</title>
      <author>Elijah Trillionz</author>
      <pubDate>Thu, 22 Jul 2021 19:18:29 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/build-a-crud-api-with-fastify-688</link>
      <guid>https://dev.to/elijahtrillionz/build-a-crud-api-with-fastify-688</guid>
      <description>&lt;p&gt;Hello everyone, in this article we are going to build a NodeJS CRUD API with &lt;a href="https://fastify.com"&gt;Fastify&lt;/a&gt;. Fastify is a NodeJS framework for building fast NodeJS servers. With this wonderful tool, you can create a server with NodeJS, create routes (endpoints), handle requests to each endpoint, and lots more.&lt;/p&gt;

&lt;p&gt;Fastify is an alternative of Express (L express) which you must have heard of if you are familiar with NodeJS before. In fact, Fastify draws its inspiration from Express only that Fastify servers are way faster compared to Express servers.&lt;/p&gt;

&lt;p&gt;I have tested it, and I can testify of its speed. I am currently building a Mobile Application, and in this app, I use Fastify for my API.&lt;/p&gt;

&lt;p&gt;So in this article, we will be building a basic NodeJS server with Fastify. This server will have endpoints to Create data, Read data, Update data, and Delete data (CRUD). We will also be doing some authentication using jwt (next article), just to introduce you to the Fastify plugin ecosystem and how cool it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;br&gt;
What are the things you need to know before getting started with Fastify:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt;: You should know a good amount of JavaScript especially es5 and es6. &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;CodeCademy&lt;/a&gt; has great courses that would guide you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NodeJS&lt;/strong&gt;: You should also be familiar with NodeJS. You can also find NodeJS courses on &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Codecademy.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Express&lt;/strong&gt;: This is totally optional, but if you already know express then you will learn Fastify at a faster paste.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So enough with the introduction, let's jump right into the code.&lt;/p&gt;

&lt;p&gt;See the complete &lt;a href="https://github.com/Elijah-trillionz/fastify-api"&gt;code on Github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-familiar-with-fastify"&gt;
  &lt;/a&gt;
  Getting Familiar with Fastify
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-the-app"&gt;
  &lt;/a&gt;
  Setting up the App
&lt;/h3&gt;

&lt;p&gt;Just as we would create a server with Express and use a simple endpoint to test if it's running, I am going to show you how we would do this with Fastify. We will initialize the server, register a port and listen for events via the port.&lt;/p&gt;

&lt;p&gt;Let's initialize a package.json file. You can do that with &lt;code&gt;npm init -y&lt;/code&gt; in a terminal, this will create a file called package.json with some information about your app in JSON.&lt;/p&gt;

&lt;p&gt;Now let's install Fastify using NPM. You can use yarn also. Use the &lt;code&gt;npm install Fastify&lt;/code&gt; command to install Fastify. Other packages we will be installing are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nodemon: for automatically restarting the server whenever we make any changes. We will install this package as a dev dependency. Using NPM is &lt;code&gt;npm install -D nodemon&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;config: for storing secrets. Useful when you want to publish to GitHub. Installing it would be &lt;code&gt;npm install config&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other packages will be introduced and installed when needed. Let's move on to setting up our package.json.&lt;/p&gt;

&lt;p&gt;Go to your package.json and change the value of &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;server.js&lt;/code&gt;, because the file we will create our server in is going to be called server.js. Furthermore, delete the &lt;code&gt;test&lt;/code&gt; property and value. Paste the following code inside the &lt;code&gt;script&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon server.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simply means when we run the command &lt;code&gt;npm start&lt;/code&gt; on the terminal, it will run our &lt;em&gt;server.js&lt;/em&gt; file which will be created soon. But when we run the command &lt;code&gt;npm run server&lt;/code&gt; on the terminal, it will run our &lt;em&gt;server.js&lt;/em&gt; file using nodemon.&lt;/p&gt;

&lt;p&gt;Now create a &lt;em&gt;server.js&lt;/em&gt; file and get ready to create your first NodeJS server using Fastify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-server"&gt;
  &lt;/a&gt;
  Creating our Server
&lt;/h3&gt;

&lt;p&gt;We go into our &lt;em&gt;server.js&lt;/em&gt; file and import Fastify. I.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt; &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;logger: true;&lt;/code&gt; key value is an option for activating logging on our terminal from Fastify. So the information of requests, server starting, response, errors will all be logged in the terminal.&lt;/p&gt;

&lt;p&gt;The next thing we would do is to assign a port to a &lt;code&gt;PORT&lt;/code&gt; variable, I will use 5000 for mine. Why we create a variable for it is for the sake of deploying to production. So you should have something like &lt;code&gt;const PORT = process.env.PORT || 5000&lt;/code&gt;. As such we are either using the port of the host company (like Heroku or digital ocean) or our customized 5000.&lt;/p&gt;

&lt;p&gt;Now let's create a simple route for get requests to &lt;code&gt;/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isn't that familiar? Looks just like Express right? Yeah, so working with Fastify is going to be so easy for those already familiar with Express, its syntax is alike.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;req&lt;/code&gt; and &lt;code&gt;reply&lt;/code&gt; stands for request and reply (response). They are parameters obviously, so you can call it whatever you like. But we would go with this simple and readable form.&lt;/p&gt;

&lt;p&gt;Ok now let's get our server running by listening for events. We use &lt;code&gt;fastify.listen(port)&lt;/code&gt; to listen for requests to our server. But this function returns a promise, so we would create a function that handles this promise using async and await.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You wanna make sure you log the error and exit the server if an error occurs. Now we can just call &lt;code&gt;startServer()&lt;/code&gt; and run &lt;code&gt;npm run server&lt;/code&gt; on the terminal to get the server started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6gSRHzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqudkwx42uw6yfv8zqur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6gSRHzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqudkwx42uw6yfv8zqur.png" alt="Fastify api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see your URL address in the log info in your terminal like in the image above or simply use &lt;code&gt;http://localhost:5000&lt;/code&gt;. Use any API testing tool of your choice to test and you should get a &lt;strong&gt;Hello world&lt;/strong&gt; message as a response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-more-routes"&gt;
  &lt;/a&gt;
  Creating more Routes
&lt;/h3&gt;

&lt;p&gt;Now you wouldn't want all your routes to be in &lt;em&gt;server.js&lt;/em&gt; file, so we will create a folder called &lt;strong&gt;routes.&lt;/strong&gt; This we will use to handle and organize all the different routes of our API.&lt;/p&gt;

&lt;p&gt;This API is going to be for a blog, so our data will basically be about posts, and admins making these posts. So in the &lt;strong&gt;routes&lt;/strong&gt; folder, create a _ posts.js_, and &lt;em&gt;admins.js&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;To make these files work as endpoints on our server, we need to register them as a plugin. Now don't panic, it's easier than you think. Add the code below to &lt;em&gt;server.js&lt;/em&gt; just before the &lt;code&gt;startServer&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// we will be working with posts.js only for now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will register the post routes. You could first import and assign it to a variable and then pass the variable as a parameter in the &lt;code&gt;register&lt;/code&gt; function, choice is yours.&lt;/p&gt;

&lt;p&gt;If you save, it's going to generate an error, now this is because we haven't created any route in &lt;em&gt;posts.js&lt;/em&gt; yet.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;posts.js&lt;/em&gt;, create a function called &lt;code&gt;postRoutes&lt;/code&gt; and pass these three parameters &lt;strong&gt;fastify&lt;/strong&gt;, &lt;strong&gt;options&lt;/strong&gt;, and &lt;strong&gt;done&lt;/strong&gt;. This function is going to make an instance of our fastify server, which means with the first parameter we can do everything we could do in &lt;em&gt;server.js&lt;/em&gt; with the &lt;code&gt;fastify&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Now you can cut the get request from &lt;em&gt;server.js&lt;/em&gt; into the &lt;code&gt;postRoutes&lt;/code&gt; function in &lt;em&gt;posts.js.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;postRoutes&lt;/code&gt; should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;options&lt;/strong&gt; (sometimes written as &lt;strong&gt;opts&lt;/strong&gt;) parameter is for options on the routes, we will not be using this.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;done&lt;/strong&gt; parameter is a function we would call at the end of the &lt;code&gt;postRoutes&lt;/code&gt; function, to indicate we are done. Just like making a middleware in Express and calling next to move on.&lt;/p&gt;

&lt;p&gt;So you should have &lt;code&gt;done()&lt;/code&gt; at the last line of the &lt;code&gt;postRoutes&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Now, let's export the function and save our file. Use the following command at the last line of the &lt;em&gt;posts.js&lt;/em&gt; file to export: &lt;code&gt;module.exports = postRoutes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Save your file and test your route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organizing-routes"&gt;
  &lt;/a&gt;
  Organizing Routes
&lt;/h3&gt;

&lt;p&gt;We could create more routes just like the one above and call it a day, but then we will hinder ourselves from some of the great features of Fastify. With Fastify we can better organize our API by separating concerns.&lt;/p&gt;

&lt;p&gt;With Fastify we can create schemas for requests coming to a route and responses going out. For requests, we can tell Fastify what to expect from the body of the request, or the headers, or params, etc.&lt;/p&gt;

&lt;p&gt;We can also tell Fastify what we intend to send as a response e.g the data that will be sent on a 200 response, or 400 response or 500 response, etc.&lt;/p&gt;

&lt;p&gt;For example, let's make a schema for our get request above. In our get request we sent &lt;strong&gt;Hello world&lt;/strong&gt; (a string) as a response, now we will be sending an array of posts like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make a schema for it. A schema in Fastify is an object, this object will be passed as a value for a &lt;code&gt;schema&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the way we will be defining our routes, the get method (could be post or any method) will take two parameters, the first being the route and the last is an object of options.&lt;/p&gt;

&lt;p&gt;The three properties of the object of options we will be using in this API are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;schema&lt;/code&gt;: defines how our data should be set up, what data should come in, and what data should go out, including their types (string, boolean, number, etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;preHandler&lt;/code&gt;: a function that defines what should be done before requests are handled by the &lt;code&gt;handler&lt;/code&gt; below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;handler&lt;/code&gt;: a function that handles the request.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may not be clear to you now, but when we make examples you will get it straight up. The &lt;code&gt;preHandler&lt;/code&gt; is going to be used for authentication, which means it will be used on protected routes only.&lt;/p&gt;

&lt;p&gt;Enough with the explanation, if you want more explanation check out the &lt;a href="//www.fastify.io"&gt;docs&lt;/a&gt;. Let's dive into codes.&lt;/p&gt;

&lt;p&gt;Our get request is about to look way better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it has now become better, I presume it is now more confusing. Well, it's simple, let's analyze the schema object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  schema
&lt;/h4&gt;

&lt;p&gt;In the schema object, we are telling Fastify that on a 200 response what we will send is an array. And each item in this array is an object and the properties of these objects are &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;body&lt;/code&gt; which are of type &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, and &lt;code&gt;string&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Simple right. You should take note of the names of the properties used i.e &lt;code&gt;response&lt;/code&gt;, &lt;code&gt;200&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;. The &lt;code&gt;items&lt;/code&gt; and &lt;code&gt;properties&lt;/code&gt; can be any name but I recommend using these names.&lt;/p&gt;

&lt;p&gt;If you try removing the &lt;code&gt;id&lt;/code&gt; property and value from the schema object you would notice the &lt;code&gt;id&lt;/code&gt; property is no longer sent as part of the response. While if you try changing the &lt;code&gt;id&lt;/code&gt; property from type &lt;code&gt;number&lt;/code&gt; to type &lt;code&gt;string&lt;/code&gt;, you would see it as a string in the response. Cool right!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handler"&gt;
  &lt;/a&gt;
  handler
&lt;/h4&gt;

&lt;p&gt;The handler function is clear enough, we simply copied what we had in our get request.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;opts&lt;/em&gt; object is specific to a route. Unless you want to handle different requests on different routes with one response. If that's not the case, then you should make sure the name of the object is unique.&lt;/p&gt;

&lt;p&gt;For example in our get request, since we are getting posts we could change the name to &lt;code&gt;getPostsOpts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our &lt;em&gt;posts.js&lt;/em&gt; should now look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine, having 10 routes with different schemas and handlers and maybe some preHandlers. You can tell the code is going to be very bucky and scary to read. This is where controllers come in.&lt;/p&gt;

&lt;p&gt;Controllers is not some kind of plugin or package as it sounds. It's just a folder we will create to separate our routes from our schemas and handlers.&lt;/p&gt;

&lt;p&gt;Inside of our &lt;strong&gt;controllers&lt;/strong&gt; folder, I am going to create two other folders called schemas and handlers. It makes it look cleaner and easy to read.&lt;/p&gt;

&lt;p&gt;In our &lt;strong&gt;schemas&lt;/strong&gt; folder we will create a file called &lt;em&gt;posts.js.&lt;/em&gt; This file will contain all the schemas for our post routes (getting all posts, creating a post, deleting a post, etc.).&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;schemas/posts.js&lt;/em&gt;, create an object called &lt;code&gt;getPostsSchema&lt;/code&gt; and cut the value of the &lt;code&gt;schema&lt;/code&gt; property (from &lt;em&gt;routes/posts.js&lt;/em&gt;) and paste it as the object. Your code should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's export it;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// our schemas&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will import it in our &lt;em&gt;routes/posts.js&lt;/em&gt; file so we can use it as the value of the &lt;code&gt;schema&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/schemas/posts.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;strong&gt;handlers&lt;/strong&gt; folder, let's create a file called &lt;em&gt;posts.js.&lt;/em&gt; This file will contain all our handler functions for our post routes (getting all posts, creating a post, deleting a post, etc.).&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;handlers/posts.js&lt;/em&gt;, create a function called &lt;code&gt;getPostsHandler&lt;/code&gt; with &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;reply&lt;/code&gt; as our params. Copy the function body from the &lt;em&gt;routes/posts.js&lt;/em&gt; file and paste it here, after which export the function. It should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsHandler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import the &lt;code&gt;getPostsHandler&lt;/code&gt; into the &lt;em&gt;routes/posts.js&lt;/em&gt; file, and set it as the value of the handler method. Your &lt;em&gt;routes/posts.js&lt;/em&gt; would look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/schemas/posts.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/handlers/posts.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPostsHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks cleaner right? Now save the file and test it, it should work fine as before.&lt;/p&gt;

&lt;p&gt;I would have loved to talk about organizing authentication here, but it would make this article too long, so I will make another article on authentication.&lt;/p&gt;

&lt;p&gt;Alright Elijah, can we just build the CRUD API already? Yeah sure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-your-first-crud-api-with-fastify"&gt;
  &lt;/a&gt;
  Building your first CRUD API with Fastify
&lt;/h2&gt;

&lt;p&gt;We will create a blog API where we can create a post, read all posts, read a post, delete a post, and update a post. We will also be able to create admins, log admins in, and make protected routes. But we will do this in another article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-all-posts"&gt;
  &lt;/a&gt;
  Get all Posts
&lt;/h3&gt;

&lt;p&gt;Since we already have a working get request, I will simply make some changes to the routes and the array of posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In &lt;em&gt;routes/posts.js&lt;/em&gt;.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should make the route look more like an API endpoint.&lt;/p&gt;

&lt;p&gt;Let's create a folder in the root directory called &lt;strong&gt;cloud&lt;/strong&gt; and create a &lt;em&gt;posts.js file.&lt;/em&gt; This file will act as our database because we will be storing all our posts there. Paste the code below in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is post three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// you can add as many as you want&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;em&gt;handlers/posts.js&lt;/em&gt;, import posts and replace it with the array in the &lt;code&gt;send&lt;/code&gt; function i.e&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In &lt;em&gt;handlers/posts.js&lt;/em&gt;.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../cloud/posts.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsHandler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file and run the program, recall the routes have changed. To get all posts use &lt;code&gt;http://localhost:your_port/api/posts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are four files called &lt;em&gt;posts.js.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;cloud/posts.js:&lt;/em&gt; where the array of posts is stored (our database).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;routes/posts.js:&lt;/em&gt; where we handle all routes of our blog posts.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;handlers/posts.js:&lt;/em&gt; where we handle responses to our post routes.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;schemas/posts.js:&lt;/em&gt; where we specify the schemas of our post routes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will make reference to each one of them with their folder so you can easily know who is who.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-a-post"&gt;
  &lt;/a&gt;
  Get a Post
&lt;/h3&gt;

&lt;p&gt;The next route we would make is to get a post, we will do this with its id. So we get an &lt;code&gt;id&lt;/code&gt; as a parameter from the request and we will filter the &lt;code&gt;posts&lt;/code&gt; array to find that post.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-route-in-routespostsjs"&gt;
  &lt;/a&gt;
  Create the Route in &lt;em&gt;routes/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;routes/posts.js,&lt;/em&gt; just below our first route, paste the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// the :id route is a placeholder for an id (indicates a parameter)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create the &lt;code&gt;getPostOpts&lt;/code&gt; object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPostSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will be created in schemas/posts.js&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPostHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will be created in handlers/posts.js&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-schema-in-schemaspostsjs"&gt;
  &lt;/a&gt;
  Create the Schema in &lt;em&gt;schemas/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Create an object called &lt;code&gt;getPostSchema&lt;/code&gt; and paste the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The params property indicates what data should be collected in the params of the route. I am using it to format the id to a number. By default is a string. Since the ids in our posts array are a number, I simply want them to be of the same type.&lt;/p&gt;

&lt;p&gt;Then, since we are fetching just one post, it means our response is going to be an object with id, title, and body as its properties. Export the &lt;code&gt;getPostSchema&lt;/code&gt;, simply add it to the object being exported i.e &lt;code&gt;module.exports = { getPostsSchema, getPostSchema };&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now take a good look at your &lt;em&gt;routes/posts.js,&lt;/em&gt; you would observe you have repeated yourself. So refactor it to make sure you are not repeating yourself, this is what I did&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// since i will be using this type a lot&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostsSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostSchema&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-handler-in-handlerspostsjs"&gt;
  &lt;/a&gt;
  Create the Handler in &lt;em&gt;handlers/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;handlers/posts.js,&lt;/em&gt; create an object called &lt;code&gt;getPostHandler&lt;/code&gt; and paste the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPostHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of the function body is how we fetch the id from the request route. So a route like &lt;code&gt;http://localhost:5000/api/posts/4&lt;/code&gt; will return 4 as its id.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reply.status&lt;/code&gt; function tells Fastify what status code the response should be. If the post is not found a customized error message is sent, with Fastify we could also use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when a post is not found Fastify will send the JSON below as a response&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"statusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Not Found"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post not found"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now export &lt;code&gt;getPostHandler&lt;/code&gt; and save all files. Run the program and test your new route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-new-posts"&gt;
  &lt;/a&gt;
  Creating new Posts
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#create-the-route-in-routespostsjs"&gt;
  &lt;/a&gt;
  Create the Route in &lt;em&gt;routes/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;First, let's create the route in the &lt;code&gt;postRoutes&lt;/code&gt; function. Just after the last route we created, paste the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addPostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;/api/posts/new&lt;/code&gt; is our endpoint to add a new post to our array of posts. The next thing we'd do is create the &lt;code&gt;addPostOpts&lt;/code&gt; object outside of our routes function and pass a value for schema and handler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addPostOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;addPostSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will be created in schemas/posts.js&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;addPostHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will be created in handlers/posts.js&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my next article, I will make this route a private route, which means we will add a &lt;code&gt;preHandler&lt;/code&gt; to the object above in the next article.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-schema-in-schemaspostsjs"&gt;
  &lt;/a&gt;
  Create the Schema in &lt;em&gt;schemas/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;We will tell Fastify what data should come in from our request body and what data we will be sending out as a response.&lt;/p&gt;

&lt;p&gt;Create an object called &lt;code&gt;addPostSchema&lt;/code&gt;, assign the code below to it;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addPostSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// recall we created typeString earlier&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// sending a simple message as string&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;body&lt;/code&gt; as a property to tell Fastify what to expect from the request body of our post route. Just like we did with &lt;code&gt;params&lt;/code&gt; above. We can also do the same for &lt;code&gt;headers&lt;/code&gt; (I will show you this during authentication).&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;required&lt;/code&gt; property we are telling Fastify to return an error if both &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; are not part of the request body.&lt;/p&gt;

&lt;p&gt;Fastify will return a &lt;strong&gt;400 Bad Request&lt;/strong&gt; error as a response if a required field is not provided.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;addPostSchema&lt;/code&gt; to the object being exported out of this file (&lt;em&gt;schemas/posts.js&lt;/em&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-handler-in-handlerspostsjs"&gt;
  &lt;/a&gt;
  Create the Handler in &lt;em&gt;handlers/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;We will create an id for the data that is sent to us and append it to our array of posts. Simple right!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addPostHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// no body parser required for this to work&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// posts is imported from cloud/posts.js&lt;/span&gt;
  &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post added&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;code&gt;addPostHandler&lt;/code&gt; to the object being exported out of this file (&lt;em&gt;handlers/posts.js&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Before saving your files and running your program, make sure to add &lt;code&gt;addPostSchema&lt;/code&gt; and &lt;code&gt;addPostHandler&lt;/code&gt; to the object being imported into &lt;em&gt;routes/posts.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To verify your post has been created you can run &lt;code&gt;http://localhost:your_port/api/posts&lt;/code&gt; (our first endpoint), you would see it at the bottom of the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-a-post"&gt;
  &lt;/a&gt;
  Updating a Post
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#create-the-route-in-routespostsjs"&gt;
  &lt;/a&gt;
  Create the Route in &lt;em&gt;routes/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;We will use the &lt;code&gt;put&lt;/code&gt; method for this route. Add the code below to your &lt;code&gt;postRoutes&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/edit/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updatePostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next thing is to create the &lt;code&gt;updatePostOpts&lt;/code&gt; object outside of the &lt;code&gt;postRoutes&lt;/code&gt; function. As before, we will pass a value for the &lt;code&gt;schema&lt;/code&gt; and &lt;code&gt;handler&lt;/code&gt; properties i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatePostOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updatePostSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will be created in schemas/posts.js&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updatePostHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will be created in handlers/posts.js&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before moving to the other files quickly add &lt;code&gt;updatePostSchema&lt;/code&gt; and &lt;code&gt;updatePostHandler&lt;/code&gt; to the imported objects in this file (&lt;em&gt;routes/posts.js&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-schema-in-schemaspostsjs"&gt;
  &lt;/a&gt;
  Create the Schema in &lt;em&gt;schemas/posts.js&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Create an object called &lt;code&gt;updatePostSchema&lt;/code&gt; and use this code for it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatePostSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// converts the id param to number&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// a simple message will be sent&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add the &lt;code&gt;updatePostSchema&lt;/code&gt; to the object being exported out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-handler-in-handlerspostsjs"&gt;
  &lt;/a&gt;
  Create the Handler in &lt;em&gt;handlers/posts.js&lt;/em&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatePostHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add the &lt;code&gt;updatePostHandler&lt;/code&gt; to the object being exported out.&lt;/p&gt;

&lt;p&gt;Now you can save your files and test your new route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-a-post"&gt;
  &lt;/a&gt;
  Deleting a Post
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#create-the-route-in-routespostsjs"&gt;
  &lt;/a&gt;
  Create the Route in &lt;em&gt;routes/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;We will follow the same procedure we have been following in the previous routes, we will only change the route and method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deletePostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;deletePostOpts&lt;/code&gt; object would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletePostOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deletePostSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deletePostHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-schema-in-schemaspostsjs"&gt;
  &lt;/a&gt;
  Create the Schema in &lt;em&gt;schemas/posts.js&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;You should note that creating schemas is completely optional, for a route like this, you may not have to create a schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletePostSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// converts the id param to number&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-handler-in-handlerspostsjs"&gt;
  &lt;/a&gt;
  Create the Handler in &lt;em&gt;handlers/posts.js&lt;/em&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletePostHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Post deleted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Export your handler and schema, and import them in &lt;em&gt;routes/posts.js&lt;/em&gt; accordingly. Save your files and test your new route.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;These are my final words for this article, not for Fastify. We are yet to add admins' routes that will involve authentication. We will do that next, so you wanna make sure you get the notification when that is out.&lt;/p&gt;

&lt;p&gt;With that being said, I want to congratulate you on building your first CRUD API with Fastify. In this project, we created routes for Creating data, Reading data, Updating data, and Deleting data. We also explained a tiny bit of Fastify. So great job.&lt;/p&gt;

&lt;p&gt;If you find this article useful please do like and share. You can also support me with a &lt;a href="https://buymeacoffee.com/elijahtrillionz"&gt;cup of coffee&lt;/a&gt;. Thanks for reading and happy hacking.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>CSS Grid vs Flexbox - What is the difference?</title>
      <author>Jean Japheth Ezekiel</author>
      <pubDate>Thu, 22 Jul 2021 19:07:02 +0000</pubDate>
      <link>https://dev.to/iamdejean/css-grid-vs-flexbox-what-is-the-difference-19i8</link>
      <guid>https://dev.to/iamdejean/css-grid-vs-flexbox-what-is-the-difference-19i8</guid>
      <description>&lt;p&gt;The internet is made up of over 1.7 Billion web pages with different page layouts. Technology  nowadays is responsive to any screen orientation or dimension of the screen in our devices. Making page layout comes in handy with the use of Cascading Style Sheet also refers to as CSS. CSS is one of the cornerstones of the web. More like the flesh covering the bones of the body. It is easy to understand and there are lots of resources available on how to use this amazing piece of technology.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So how is this related to our topic? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSS is use to design layout and the appearance of those web pages but creating multi-layouts is a huddle for beginners who intend to create project with that feature. &lt;br&gt;
To solve these complications, Devs invented proper responsive layout models available natively in the browser, out of which - Flexbox, CSS Grid and Bootstrap became most popular and are widely supported across all platforms &amp;amp; browsers. &lt;br&gt;
I will try to strike the difference between CSS Grid and Flexbox fundamentals and probably  when to use which layout. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pfCbCJC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/drda5zneo/image/upload/v1626978735/images_2_6_zdy52t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfCbCJC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/drda5zneo/image/upload/v1626978735/images_2_6_zdy52t.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CSS Grid: This is a two-dimensional grid-based layout system with rows and columns, making it easier to design web pages without having to use floats and positioning. Like tables, grid layout allow us to align elements into columns and rows.&lt;br&gt;
To get started you have to define a container element as a grid with &lt;code&gt;display:grid&lt;/code&gt;, set the column and row sizes with &lt;code&gt;grid-template-columns&lt;/code&gt; and &lt;code&gt;grid-template-rows&lt;/code&gt;, and then place its child elements into the grid with &lt;code&gt;grid-column&lt;/code&gt; and &lt;code&gt;grid-row&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexbox: The CSS Flexbox offers a one-dimensional layout. It is helpful in allocating and aligning the space among items in a container (made of grids). It works with all kinds of display devices and screen sizes.&lt;br&gt;
To get started you have to define a container element as a grid with &lt;code&gt;display: flex;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the line of divide between these two? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a. CSS Grid Layout is of two-dimensional , that means it can handle columns and rows, not like flexbox that is basically a one-dimensional.&lt;br&gt;
b. A core distinction between CSS Grid and Flexbox is their approach — CSS Grid’s &lt;br&gt;
approach is layout-first whereas Flexbox’ approach is content-first.&lt;br&gt;
c. The Flexbox layout is best suited to application components and small-scale layouts, while the Grid layout is designed for larger-scale layouts that are not linear in design.&lt;br&gt;
d. CSS Grid deploys fractional measure units for grid fluidity and auto-keyword functionality to automatically adjust columns or rows.&lt;/p&gt;

</description>
      <category>css</category>
      <category>ui</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Running WordPress on AWS – the cheap and easy way</title>
      <author>Mishi</author>
      <pubDate>Thu, 22 Jul 2021 19:05:29 +0000</pubDate>
      <link>https://dev.to/aws-builders/running-wordpress-on-aws-the-cheap-and-easy-way-1ff2</link>
      <guid>https://dev.to/aws-builders/running-wordpress-on-aws-the-cheap-and-easy-way-1ff2</guid>
      <description>&lt;p&gt;You probably heard a lot of good things about AWS and would like to start (or move) your WordPress site there, but you find it difficult to choose the right service and pricing model for it – AWS has over 200 services to choose from with different pricing models. You’re at the right place, this is the article for you! Let’s get started! 🏁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;p&gt;What are the advantages of moving to AWS?&lt;/p&gt;

&lt;p&gt;First, it has a global footprint! A large hosting provider has only about 2-3 locations where you can host your website. (Small ones have only one). And not only that, you have to decide this during signup so you are stuck with that location for the rest of your life. On the other hand, AWS has dozens of locations (called regions) to choose from and you aren’t stuck with any of them. You can have a WordPress site in Tokyo and another one in Singapore. This is good for a number of reasons: getting closer to your clients (thus they can access your site faster) plus compliance with local regulations.&lt;/p&gt;

&lt;p&gt;The other advantage compared to hosting providers is security. AWS is built with security in mind and you can expect that if your WordPress site is set up correctly it will be reliably running. Other users will not impact your websites performance.&lt;/p&gt;

&lt;p&gt;AWS can adapt to your current needs and you can easily add or remove resources when needed. You only pay for the resources you consume.&lt;/p&gt;

&lt;p&gt;Lastly, you will get a free static IP for each website compared to shared hosting where you share the same IP with others. This is excellent for eCommerce websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The service I will guide you through is called Amazon Lightsail. It has a simplified user interface compared to other AWS services and has fixed monthly pricing. The focus of this article is on how we can have a reliable website up and running but with the cheapest option available. We will use Let’s Encrypt’s free SSL certificate compared to Lightsail CDN which is currently free for the first year (up to 50GB) but costs $2.50 USD/month later. Not to mention that if your visitors increase you may be charged $35 USD/mo. This is why we will only use services that have a fixed fee even if your visitor numbers increase. 💰&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-an-aws-account"&gt;
  &lt;/a&gt;
  Setting up an AWS account
&lt;/h2&gt;

&lt;p&gt;If you don’t already have an AWS account you can create one by visiting the &lt;a href="https://aws.amazon.com/"&gt;AWS website&lt;/a&gt; and clicking in the “Create an AWS Account” button on the top right corner. You will be asked to provide your Email address, password, username, personal information including your phone number and your credit card information. Your card will only be charged for the services you use. It is a good idea to secure your account right after creation. Read my &lt;a href="https://roadtoaws.com/2021/03/16/first-things-to-set-on-a-newly-created-aws-account/"&gt;First things to set on a newly created AWS account&lt;/a&gt; post on how to enable Multi-Factor Authentication on your account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-lightsail"&gt;
  &lt;/a&gt;
  Amazon Lightsail
&lt;/h2&gt;

&lt;p&gt;Log in to your AWS account and let’s jump into Amazon Lightsail. In the top bar type lightsail and select the Lightsail service or click on &lt;a href="https://lightsail.aws.amazon.com/ls/webapp/home"&gt;this link&lt;/a&gt; to start it directly. If this is your first time you will be asked to select your language. Select it, and click on the &lt;em&gt;Let’s get started&lt;/em&gt; button. You will immediately notice that Lightsail has a much more friendlier interface. 🤝&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ub3Ka-ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lneefrorpg2t7d0w7jnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ub3Ka-ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lneefrorpg2t7d0w7jnp.png" alt="Select language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-wordpress"&gt;
  &lt;/a&gt;
  Setting up WordPress
&lt;/h2&gt;

&lt;p&gt;Let’s start by creating an Instance. Lightsail will automatically take you to the instance setup with a Welcome message to start your instance. Later you can create it under the Instances tab, with the &lt;em&gt;Create instance&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TF31sT7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbyf5n8xua4cwgwuihxs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TF31sT7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbyf5n8xua4cwgwuihxs.png" alt="Welcome screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vI5rPpIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d36mafp27jd13drd0nr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vI5rPpIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d36mafp27jd13drd0nr6.png" alt="Instances"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-instance"&gt;
  &lt;/a&gt;
  Creating an instance
&lt;/h2&gt;

&lt;p&gt;On the select your instance location you choose the location based on the parameters I outlined before. The good thing about Amazon Lightsail, compared to other AWS services, is that the prices are the same in all regions. (This is not true for other AWS services.) You can freely choose a region and the prices won’t change. I will select the Frankfurt region due to GDPR.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFPwQpQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyx4s0jpso4313cldrgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFPwQpQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyx4s0jpso4313cldrgb.png" alt="Lightsail regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we select the instance image. Since this article is about WordPress, we will select WordPress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6ZDuqkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyyxw1fe4d8mfrquf4wm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6ZDuqkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyyxw1fe4d8mfrquf4wm.png" alt="Lightsail images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here comes the tricky part, that you may have missed if you haven’t read this article. 🤠&lt;br&gt;
You should always select Enable Automatic Snapshots. AWS doesn’t guarantee you that your instance won’t fail, and if it fails your data might be lost. This is why we enable automatic snapshots so we can recover our data easily in case of an emergency. 🦺&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLpIfVBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmvk1mklaa0xinfrigxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLpIfVBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmvk1mklaa0xinfrigxq.png" alt="Enable automatic snapshots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select a pricing option. Choose the option that meets your needs and fits your budget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f4yu5xDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57mvh8rdxnip8h8f198x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f4yu5xDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57mvh8rdxnip8h8f198x.png" alt="Lightsail instance plans"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Identify your instance with a friendly name. This is just for display purposes; it has no effect on the instance, but you cannot change it later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZRRn_54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2yd85i4vfiiqatssts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZRRn_54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2yd85i4vfiiqatssts.png" alt="Instance name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;em&gt;Create instance&lt;/em&gt;. Please wait a couple of minutes while your instance is being created in the background. After the instance has been created it will show the state “Running” on your Instances tab. Your WordPress site is now up and running, but there are a couple of important things we should set before going on a coffee break. ☕&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attaching-a-static-ip"&gt;
  &lt;/a&gt;
  Attaching a static IP
&lt;/h2&gt;

&lt;p&gt;Click on the instance name and select the Networking tab. Select &lt;em&gt;Create static IP&lt;/em&gt;. Name your static IP and click &lt;em&gt;Create&lt;/em&gt;. You may ask why this is important when there is already an IP address associated with your instance. The problem is that this IP is from a dynamic pool. This means when you restart your instance your IP address will change, and we don’t want this. By attaching a free static IP, our IP address will stay the same all the time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z989TzjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvbsi0hktf3dwxf7a230.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z989TzjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvbsi0hktf3dwxf7a230.png" alt="Create static IP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-dns"&gt;
  &lt;/a&gt;
  Set up DNS
&lt;/h2&gt;

&lt;p&gt;Now it’s time to connect your domain with this IP address. If you don’t have a domain yet, I suggest registering one at &lt;a href="http://www.dynadot.com/?s8to9Q6E6GA8u64"&gt;Dynadot&lt;/a&gt; because they have cheap and predictable pricing; but if you would like to stick with AWS, you can use Route 53 for that.&lt;/p&gt;

&lt;p&gt;Point your domain name to the static IP we created earlier. This can be done by updating your A record with this IP.&lt;/p&gt;

&lt;p&gt;If everything is set up correctly by entering your domain name in your browser a fresh new WordPress site will appear. 🎉🎉🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-ssl"&gt;
  &lt;/a&gt;
  Setting up SSL
&lt;/h2&gt;

&lt;p&gt;Having an SSL certificate is mandatory nowadays and there are several ways to achieve this. I will be showing how to set up Let’s Encrypt, which is a free SSL certificate authority. For this, I have created a simple script that does the heavy work for you. You can find this script on &lt;a href="https://github.com/suhajda3/lightsail-ssl"&gt;GitHub&lt;/a&gt;. To set up SSL first log into your instance via SSH. This is done by selecting the Connect tab on your instance and clicking on the &lt;em&gt;Connect using SSH&lt;/em&gt; button. You will be directed to a terminal window but don’t worry we won’t spend much time here. 😀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dV34ybd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wcyhmdb3vftiu6tq5sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dV34ybd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wcyhmdb3vftiu6tq5sv.png" alt="Connect to your instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new popup will appear with a terminal. We will paste a simple script in the terminal or you can type it manually. Whichever you prefer.&lt;/p&gt;

&lt;p&gt;To paste the script you will find a clipboard icon on the bottom right corner of the window. Click on it and paste the following script in it, then click on the terminal and enter CONTROL + SHIFT + V (or COMMAND + V if you are on a Mac).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wget -O - https://raw.githubusercontent.com/suhajda3/lightsail-ssl/main/lightsail-ssl.sh | sudo bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The script will ask for your domain name and email address. If everything is set up correctly the script will update your system, set up Let’s Encrypt, and will auto-renew it every 90 days, plus it will display your WordPress credentials. Everything we need. 😎&lt;/p&gt;

&lt;p&gt;You can run this script any time you would like to update your system.&lt;/p&gt;

&lt;p&gt;📝 Make note of your username and password because we will need this later.&lt;/p&gt;

&lt;p&gt;Type &lt;em&gt;exit&lt;/em&gt; to log out of the terminal and close the window.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-your-instance-optional"&gt;
  &lt;/a&gt;
  Securing your instance (optional)
&lt;/h2&gt;

&lt;p&gt;Since we don’t need terminal access to the instance all the time, it is a good idea to disable SSH access. To do this, head over to the Networking tab and click on the trash icon next to the SSH row. Be sure that HTTP and HTTPS are still there because without them we couldn’t access our site. When you would like to run the script again or get terminal access, add the SSH rule again. 🔒&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3mDOHI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbfuhgxlfsnqkjsn9u62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3mDOHI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbfuhgxlfsnqkjsn9u62.png" alt="IPv4 Firewall"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizing-your-wordpress-install"&gt;
  &lt;/a&gt;
  Finalizing your WordPress install
&lt;/h2&gt;

&lt;p&gt;Our WordPress instance is now set up correctly. Log in to your WordPress site by adding /wp-login.php to the end of your URL. Here you can log into your site with the credentials that the script displayed before.&lt;/p&gt;

&lt;p&gt;Before you leave we should change one last thing. Add your Email address in case you lose your password. On the top right corner select Edit Profile and change your Email address then click Update Profile at the bottom of the page. Next click on Settings, General on the left side and change the Administration Email Address as well.&lt;/p&gt;

&lt;p&gt;Your WordPress site is now up and running. Congratulations! 😌 🥳&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>aws</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>10 Reasons to Choose Ionic for Mobile Development</title>
      <author>Max Lynch</author>
      <pubDate>Thu, 22 Jul 2021 18:47:57 +0000</pubDate>
      <link>https://dev.to/ionic/10-reasons-to-choose-ionic-for-mobile-development-213a</link>
      <guid>https://dev.to/ionic/10-reasons-to-choose-ionic-for-mobile-development-213a</guid>
      <description>&lt;p&gt;The &lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt; stack makes it easy to build iOS, Android, Desktop, and Progressive Web Apps using standard web technology. There are a lot of options for cross-platform mobile and web app development, so when should you or your team consider using Ionic?&lt;/p&gt;

&lt;p&gt;Here are 10 reasons you might want to choose Ionic:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-youre-a-web-developer"&gt;
  &lt;/a&gt;
  1. You’re a web developer
&lt;/h2&gt;

&lt;p&gt;One of the best reasons to choose Ionic is if you’re a web developer and want to stay in the web development world. The Ionic stack is built on standard web development technologies meaning you can build the majority of your app directly in a browser and use standard browser development tools and technologies, while still deploying and building a traditional native app.&lt;/p&gt;

&lt;p&gt;Other cross-platform toolkits don’t use the web development stack so aren’t the best fit for web developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-are-building-a-new-app-dev-engineering-team"&gt;
  &lt;/a&gt;
  2. You are building a new app dev engineering team
&lt;/h2&gt;

&lt;p&gt;Because the Ionic stack is focused on web developers, it’s the easiest cross-platform technology to hire for because there are considerably more web developers in the world than any other mobile technology. Any web developer can easily learn to build apps using the Ionic stack and it will be the most familiar to them, and have the best compatibility with popular web frameworks like React, Angular, and Vue.&lt;/p&gt;

&lt;p&gt;And hiring web developers means they can then develop for mobile, desktop, and web without the need to hire specialist teams for each platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-youre-an-enterprise-or-work-at-one"&gt;
  &lt;/a&gt;
  3. You’re an enterprise (or work at one)
&lt;/h2&gt;

&lt;p&gt;Ionic is the only cross-platform development stack that has &lt;a href="https://ionic.io/"&gt;Enterprise support and integrations&lt;/a&gt; for teams building employee and customer-facing apps. Ionic offers dedicated support, security features like &lt;a href="https://ionic.io/products/identity-vault"&gt;Biometrics&lt;/a&gt; and &lt;a href="https://ionic.io/products/auth-connect"&gt;Single Sign-on&lt;/a&gt;, and cloud services for &lt;a href="https://ionic.io/appflow"&gt;remote app updates, app builds, and app store distribution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ionic is the industry leader in enterprise app development with hundreds of Fortune 1000 customers, and &lt;a href="https://www.g2.com/products/ionic/reviews"&gt;customers love it&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-you-have-existing-web-experiences-and-investments"&gt;
  &lt;/a&gt;
  4. You have existing web experiences and investments
&lt;/h2&gt;

&lt;p&gt;Because the Ionic stack is based around standard web development, it’s the only cross-platform solution that supports bringing existing web experiences, libraries, and other web code into an app.&lt;/p&gt;

&lt;p&gt;This is particularly important for enterprises or teams with a heavy web presence that want to bring those experiences into existing apps, such as traditional native apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-want-to-join-a-massive-community-of-developers"&gt;
  &lt;/a&gt;
  5. You want to join a massive community of developers
&lt;/h2&gt;

&lt;p&gt;Building apps with popular technologies makes it easier to hire for, easier to find partners, and easier to find resources on the web as you build your app.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://ionicframework.com/community"&gt;Ionic developer community&lt;/a&gt; is massive, with millions of developers around the world having built apps on the stack. Passionate community members build and share tutorials, add-ons, templates, and more, and developers can find help on the &lt;a href="https://forum.ionicframework.com/"&gt;Ionic forum&lt;/a&gt; and Stack Overflow.&lt;/p&gt;

&lt;p&gt;But Ionic is unique in that the community isn’t just limited to Ionic’s bubble. Because Ionic is based on standard web technologies, the addressable community goes beyond Ionic and overlaps with the broader web development community, such as the React, Angular, and Vue communities. This is critical when considering building out app dev teams because an Ionic team can be built with web developers, but other technologies require hiring specialists on languages and technologies that are not widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-youre-on-a-tight-deadline"&gt;
  &lt;/a&gt;
  6. You’re on a tight deadline
&lt;/h2&gt;

&lt;p&gt;We often hear from teams who spent months building their app using a different technology, failed to hit deadlines, and then switched to Ionic and had the new app working and surpassing the old one within weeks.&lt;/p&gt;

&lt;p&gt;Ionic is highly productive because the web is highly productive. And one app can run on multiple platforms so development time can be upwards of 3-4x faster than traditional native development!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-you-want-your-apps-to-be-on-ios-android-web-and-even-desktop-on-day-one"&gt;
  &lt;/a&gt;
  7. You want your apps to be on iOS, Android, Web, and even desktop on day one
&lt;/h2&gt;

&lt;p&gt;Ionic apps run anywhere the web runs, and with the same code! And Ionic has official support for iOS, Android, Desktop, and Web, so teams can hit the ground running — targeting all these platforms and their respective user bases at launch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-want-to-be-able-to-benefit-from-both-app-store-and-web-traffic"&gt;
  &lt;/a&gt;
  8. You want to be able to benefit from both app store &lt;em&gt;and&lt;/em&gt; web traffic
&lt;/h2&gt;

&lt;p&gt;Because the Ionic stack is based on web technology, teams can target the web and build a high-performance Progressive Web App (PWA).&lt;/p&gt;

&lt;p&gt;This means teams can reach users both in traditional app stores but also on the web and through Google search to maximize reach and have the best chance for a successful app project. We’ve &lt;a href="https://dev.to/ionic/app-store-or-web-why-not-both-3fa2"&gt;talked at length&lt;/a&gt; about how the Ionic stack gives you the best distribution optionality of any cross-platform technology in the market.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-you-already-have-web-developers-on-your-team"&gt;
  &lt;/a&gt;
  9. You already have web developers on your team
&lt;/h2&gt;

&lt;p&gt;If you already have web developers on your team or at your company, using the Ionic stack is a no-brainer! Web developers can easily become mobile developers by learning to use the Ionic stack, including Ionic’s &lt;a href="https://ionicframework.com/docs/components"&gt;100+ mobile-optimized UI components&lt;/a&gt; and &lt;a href="https://capacitorjs.com/"&gt;the native runtime&lt;/a&gt; that provides hooks into functionality on each platform. Ionic also supplies the means to build and deploy those apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-youre-a-student-or-new-to-app-development"&gt;
  &lt;/a&gt;
  10. You’re a student or new to app development
&lt;/h2&gt;

&lt;p&gt;Ionic is the most accessible platform for cross-platform app development. If you’re familiar with basic web development you can build real mobile apps (and desktop + web apps) today! &lt;/p&gt;

&lt;p&gt;Learning Ionic requires learning a few new HTML tags, some new JavaScript APIs for native functionality, and then just building your app using your framework of choice (React/Angular/Vue/etc).&lt;/p&gt;

&lt;p&gt;And the best thing is you continue to build your web development skills at the same time and don't have to change your technical career focus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-today"&gt;
  &lt;/a&gt;
  Get started today
&lt;/h2&gt;

&lt;p&gt;There you have it, ten good reasons you and your team might want to adopt Ionic.&lt;/p&gt;

&lt;p&gt;If you're interested in building cross-platform apps using Ionic and modern web technologies, &lt;a href="https://ionicframework.com/"&gt;Get started&lt;/a&gt; with Ionic today.&lt;/p&gt;

</description>
      <category>ionic</category>
      <category>mobile</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ditching try...catch and null checks with Rust</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 22 Jul 2021 18:47:41 +0000</pubDate>
      <link>https://dev.to/logrocket/ditching-try-catch-and-null-checks-with-rust-1p21</link>
      <guid>https://dev.to/logrocket/ditching-try-catch-and-null-checks-with-rust-1p21</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/benholmes/"&gt;Ben Holmes&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;This post is written by a JavaScript developer just entering the world of Rust. A JS background isn’t required to get value from this article! But if you’re a fellow web-developer-turned-Rustacean, you’ll empathize with my points a bit more.&lt;/p&gt;

&lt;p&gt;It seems like languages built in the last decade are following a common trend: down with object-oriented models, and in with &lt;a href="https://blog.logrocket.com/functional-programming-in-go/"&gt;functional programming&lt;/a&gt; (FP).&lt;/p&gt;

&lt;p&gt;Web developers may have seen the FP pattern emerge in modern frontend frameworks like React using &lt;a href="https://blog.logrocket.com/react-hooks-cheat-sheet-unlock-solutions-to-common-problems-af4caf699e70/"&gt;their hooks model&lt;/a&gt;. But moving to Rust, you’ll see how powerful FP can be when you build an entire programming language around it — and the approach to the &lt;code&gt;try...catch&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are just the tip of the iceberg!&lt;/p&gt;

&lt;p&gt;Let’s explore the flaws of throwing and catching exceptions, what Rust’s &lt;code&gt;Result&lt;/code&gt; enum and pattern matching can do for you, and how this extends to handling &lt;code&gt;null&lt;/code&gt; values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rust"&gt;
  &lt;/a&gt;
  What is Rust?
&lt;/h2&gt;

&lt;p&gt;For you new &lt;a href="https://www.rust-lang.org/"&gt;Rustaceans&lt;/a&gt; (yee-claw! 🦀), Rust is built to be a lower-level, typed language that’s friendly enough for all programmers to pick up. Much like C, Rust compiles directly to machine code (raw binary), so Rust programs can compile and run blazingly fast. They also take communication and documentation very seriously, with a thriving &lt;a href="https://www.rust-lang.org/community"&gt;community of contributors&lt;/a&gt; and a &lt;a href="https://www.rust-lang.org/learn"&gt;plethora of excellent tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-shouldnt-use-raw-trycatch-endraw-blocks-in-rust"&gt;
  &lt;/a&gt;
  Why you shouldn’t use &lt;code&gt;try...catch&lt;/code&gt; blocks in Rust
&lt;/h2&gt;

&lt;p&gt;If you’re like me, you’re used to doing the &lt;code&gt;catch&lt;/code&gt; dance all throughout your JavaScript codebase. Take this scenario:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Scenario 1: catching a dangerous database call&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dangerousDatabaseCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// couldn't find the user! Time to tell the client&lt;/span&gt;
    &lt;span class="c1"&gt;// it was a bad request&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a typical server pattern. Go call the database, send the response to the user when it works, and send some error code like &lt;code&gt;400&lt;/code&gt; when it doesn’t.&lt;/p&gt;

&lt;p&gt;But how did we know to use &lt;code&gt;try...catch&lt;/code&gt; here? Well, with a name like &lt;code&gt;dangerousDatabaseCall&lt;/code&gt; and some intuition about databases, we &lt;em&gt;know&lt;/em&gt; it’ll probably throw an exception when something goes wrong.&lt;/p&gt;

&lt;p&gt;Now let’s take this scenario:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Scenario 2: forgetting to catch a dangerous file reading&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/applySepiaFilter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/assets/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathToImageAsset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageWithSepiaFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applySepiaFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageWithSepiaFilter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a contrived example, of course. But, in short, whenever we call &lt;code&gt;applySepiaFilter&lt;/code&gt;, we want to read the requested file out of our server’s &lt;code&gt;/assets&lt;/code&gt; and apply that color filter.&lt;/p&gt;

&lt;p&gt;But wait, we forgot to wrap a &lt;code&gt;try...catch&lt;/code&gt; around this! So, whenever we request some file that doesn’t exist, we’ll receive a nasty internal server error. This would ideally be a &lt;code&gt;400&lt;/code&gt; “bad request” status. 😕&lt;/p&gt;

&lt;p&gt;Now you might be thinking, “Okay, but &lt;em&gt;I&lt;/em&gt; wouldn’t have forgotten that &lt;code&gt;try...catch&lt;/code&gt;…” Understandable! Some Node.js programmers may immediately recognize that &lt;code&gt;readFile&lt;/code&gt; throws exceptions. =&lt;/p&gt;

&lt;p&gt;But this gets more difficult to predict when we’re either working with library functions &lt;em&gt;without&lt;/em&gt; documented exceptions or working with our own abstractions (maybe without documentation at all if you’re scrappy like me 😬).&lt;/p&gt;

&lt;p&gt;Summing up some core problems with JS exception handling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;If a function ever&lt;/strong&gt; &lt;code&gt;throw&lt;/code&gt;&lt;strong&gt;s, the caller must &lt;em&gt;remember&lt;/em&gt; to handle that exception.&lt;/strong&gt; And no, your fancy &lt;a href="https://eslint.org/"&gt;ESlint&lt;/a&gt; setup won’t help you here! This can lead to what I'll call &lt;code&gt;try...catch&lt;/code&gt; anxiety: wrapping everything in a &lt;code&gt;try&lt;/code&gt; block in case something goes wrong. Or worse, you’ll forget to &lt;code&gt;catch&lt;/code&gt; an exception entirely, leading to show-stopping failures like our uncaught &lt;code&gt;readFile&lt;/code&gt; call&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;The type of that exception can be unpredictable.&lt;/strong&gt; This could be a problem for &lt;code&gt;try...catch&lt;/code&gt; wrappers around multiple points of failure. For example, what if our &lt;code&gt;readFile&lt;/code&gt; explosion should return one status code, and an &lt;code&gt;applySepiaFilter&lt;/code&gt; failure should return another? Do we have multiple &lt;code&gt;try...catch&lt;/code&gt; blocks? What if we need to look at the exception’s &lt;code&gt;name&lt;/code&gt; field (which &lt;a href="https://stackoverflow.com/questions/3656854/javascript-list-of-exceptions"&gt;may be unreliable&lt;/a&gt; browser-side)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at Rust’s &lt;code&gt;Result&lt;/code&gt; enum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-rusts-raw-result-endraw-enum-and-pattern-matching"&gt;
  &lt;/a&gt;
  Using Rust’s &lt;code&gt;Result&lt;/code&gt; enum and pattern matching
&lt;/h2&gt;

&lt;p&gt;Here’s a surprise: Rust doesn’t have a &lt;code&gt;try...catch&lt;/code&gt; block. Heck, they don’t even have “exceptions” as we’ve come to know them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-raw-match-endraw-in-rust"&gt;
  &lt;/a&gt;
  Understanding &lt;code&gt;match&lt;/code&gt; in Rust
&lt;/h3&gt;

&lt;p&gt;💡 &lt;em&gt;Feel free to skip to the next section if you already understand pattern matching.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before exploring how that’s even possible, let’s understand Rust’s idea of pattern matching. Here’s a scenario:&lt;/p&gt;

&lt;p&gt;A hungry customer asks for a &lt;code&gt;meal&lt;/code&gt; from our Korean street food menu, and we want to serve them a different &lt;code&gt;meal&lt;/code&gt; depending on the &lt;code&gt;orderNumber&lt;/code&gt; they chose.&lt;/p&gt;

&lt;p&gt;In JavaScript, you might reach for a series of conditionals like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orderNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bulgogi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bibimbap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kimchi Jjigae&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;meal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is readable enough, but it has a noticeable flaw (besides using an ugly &lt;code&gt;switch&lt;/code&gt; statement): Our &lt;code&gt;meal&lt;/code&gt; needs to start out as &lt;code&gt;null&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; needs to use &lt;code&gt;let&lt;/code&gt; for reassignment in our &lt;code&gt;switch&lt;/code&gt; cases. If only &lt;code&gt;switch&lt;/code&gt; could actually &lt;em&gt;return&lt;/em&gt; a value like this…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Note: this is not real JavaScript!
const meal = switch(orderNumber) {
  case 1: "Bulgogi"
  case 2: "Bibimbap"
  default: "Kimchi Jjigae"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Guess what? Rust lets you do exactly that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;order_number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Bulgogi"&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Bibimbap"&lt;/span&gt;
  &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Kimchi Jjigae"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Holy syntax, Batman! 😮 This is the beauty of Rust’s expression-driven design. In this case, &lt;code&gt;match&lt;/code&gt; is considered an expression that can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Perform some logic on the fly (matching our order number to a meal string)&lt;/li&gt;
&lt;li&gt; Return that value at the end (assignable to &lt;code&gt;meal&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conditionals can be expressions, too. Where JavaScript devs may reach for a ternary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orderNumber&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bulgogi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something else&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rust just lets you write an &lt;code&gt;if&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;order_number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Bulgogi"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Something else"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And yes, you can skip the word &lt;code&gt;return&lt;/code&gt;. The last line of a Rust expression is always the return value. 🙃&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-raw-match-endraw-to-exceptions"&gt;
  &lt;/a&gt;
  Applying &lt;code&gt;match&lt;/code&gt; to exceptions
&lt;/h3&gt;

&lt;p&gt;Alright, so how does this apply to exceptions?&lt;/p&gt;

&lt;p&gt;Let’s jump into the example first this time. Say we’re writing the same &lt;code&gt;applySepiaFilter&lt;/code&gt; endpoint from earlier. I’ll use the same &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; helpers for clarity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// first, read the requested file to a string&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nf"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/assets/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="py"&gt;.path_to_image_asset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// if the image came back ay-OK...&lt;/span&gt;
  &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// apply the filter to that raw_image...&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sepia_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;apply_sepia_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// and send the result.&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sepia_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c"&gt;// otherwise, return a status of 400&lt;/span&gt;
  &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hm, what’s going on with those &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; wrappers? Let’s compare the return type for Rust’s &lt;code&gt;read_to_string&lt;/code&gt; to Node’s &lt;code&gt;readFile&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  In Node land, &lt;code&gt;readFile&lt;/code&gt; returns a &lt;code&gt;string&lt;/code&gt; you can &lt;em&gt;immediately&lt;/em&gt; work with&lt;/li&gt;
&lt;li&gt;  In Rust, &lt;code&gt;read_to_string&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; return a string, but instead, returns &lt;a href="https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html"&gt;a &lt;code&gt;Result&lt;/code&gt; type&lt;/a&gt; wrapping &lt;em&gt;around&lt;/em&gt; a string. The full return type looks something like this: &lt;code&gt;Result&amp;lt;std::string::String, std::io::Error&amp;gt;&lt;/code&gt;. In other words, this function returns a result that’s &lt;em&gt;either&lt;/em&gt; a string &lt;em&gt;or&lt;/em&gt; an I/O error (the sort of error you get from reading and writing files)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means we can’t work with the result of &lt;code&gt;read_to_string&lt;/code&gt; until we “unwrap” it (i.e., figure out whether it’s a string or an error). Here’s what happens if we try to treat a &lt;code&gt;Result&lt;/code&gt; as if it’s a string already:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/assets/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="py"&gt;.path_to_image_asset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;// ex. try to get the length of our image string&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;// 🚨 Error: no method named `len` found for enum&lt;/span&gt;
&lt;span class="c"&gt;// `std::result::Result&amp;lt;std::string::String, std::io::Error&amp;gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first, more dangerous way to unwrap it is by calling the &lt;code&gt;unwrap()&lt;/code&gt; function yourself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;raw_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/assets/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="py"&gt;.path_to_image_asset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚨 But this isn’t very safe! If you try calling &lt;code&gt;unwrap&lt;/code&gt; and &lt;code&gt;read_to_string&lt;/code&gt; returns some sort of error, the whole program will crash from what’s called a &lt;a href="https://doc.rust-lang.org/std/macro.panic.html"&gt;panic&lt;/a&gt;. And remember, Rust doesn’t have a &lt;code&gt;try...catch&lt;/code&gt;, so this could be a pretty nasty issue.&lt;/p&gt;

&lt;p&gt;The second and safer way to unwrap our result is through pattern matching. Let’s revisit that block from earlier with a few clarifying comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nf"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/assets/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="py"&gt;.path_to_image_asset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// check whether our result is "Ok," a subtype of Result that&lt;/span&gt;
  &lt;span class="c"&gt;// contains a value of type "string"&lt;/span&gt;
  &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// here, we can access the string inside that wrapper!&lt;/span&gt;
    &lt;span class="c"&gt;// this means we're safe to pass that raw_image to our filter fn...&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sepia_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;apply_sepia_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// and send the result&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sepia_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c"&gt;// otherwise, check whether our result is an "Err," another subtype&lt;/span&gt;
  &lt;span class="c"&gt;// that wraps an I/O error. &lt;/span&gt;
  &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we’re using an underscore &lt;code&gt;_&lt;/code&gt; inside that &lt;code&gt;Err&lt;/code&gt; at the end. This is the Rust-y way of saying, “We don’t care about this value,” because we’re always returning a status of &lt;code&gt;400&lt;/code&gt;. If we did care about that error object, we could grab it similarly to our &lt;code&gt;raw_image&lt;/code&gt; and even do another layer of pattern matching by exception type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-pattern-matching-is-the-safer-way-to-handle-exceptions"&gt;
  &lt;/a&gt;
  Why pattern matching is the safer way to handle exceptions
&lt;/h3&gt;

&lt;p&gt;So why deal with all these inconvenient “wrappers” like &lt;code&gt;Result&lt;/code&gt;? It may seem annoying at first glance, but they’re really annoying by design because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; You’re forced to handle errors whenever they appear, defining behavior for both the success and failure cases with pattern matching. And, for the times you really want to get your result and move on, you can opt-in to unsafe behavior using &lt;code&gt;unwrap()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; You always know when a function &lt;em&gt;could&lt;/em&gt; error based on its return type, which means no more &lt;code&gt;try...catch&lt;/code&gt; anxiety, and no more janky type checking 👍&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-raw-null-endraw-in-rust"&gt;
  &lt;/a&gt;
  How to use &lt;code&gt;null&lt;/code&gt; in Rust
&lt;/h2&gt;

&lt;p&gt;This is another hairy corner of JS that Rust can solve. For function return values, we reach for &lt;code&gt;null&lt;/code&gt; (or &lt;code&gt;undefined&lt;/code&gt;) when we have some sort of special or default case to consider. We may throw out a &lt;code&gt;null&lt;/code&gt; when some conversion fails, an object or array element doesn’t exist, etc.&lt;/p&gt;

&lt;p&gt;But in these contexts, null is just a nameless exception! We may reach for &lt;code&gt;null&lt;/code&gt; return values in JS because &lt;code&gt;throw&lt;/code&gt;ing an exception feels unsafe or extreme. What we want is a way to raise an exception, but without the hassle of an error type or error message, and hoping the caller uses a &lt;code&gt;try...catch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Rust recognized this, too. So, Rust banished &lt;code&gt;null&lt;/code&gt; from the language and introduced &lt;a href="https://doc.rust-lang.org/std/option/"&gt;the &lt;code&gt;Option&lt;/code&gt; wrapper&lt;/a&gt;. ✨&lt;/p&gt;

&lt;p&gt;Say we have a &lt;code&gt;get_waiter_comment&lt;/code&gt; function that gives the customer a compliment depending on the tip they leave. We may use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_waiter_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tip_percentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tip_percentage&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"That's one generous tip!"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could have returned an empty string &lt;code&gt;""&lt;/code&gt; when we don’t want a compliment. But by using &lt;code&gt;Option&lt;/code&gt; (much like using a &lt;code&gt;null&lt;/code&gt;), it’s easier to figure out whether we have a compliment to display or not. Check out how readable this &lt;code&gt;match&lt;/code&gt; statement can be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nf"&gt;get_waiter_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;tell_customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;None&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;walk_away_from_table&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-to-use-raw-option-endraw-vs-raw-result-endraw-"&gt;
  &lt;/a&gt;
  When to use &lt;code&gt;Option&lt;/code&gt; vs. &lt;code&gt;Result&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The line between &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt; is blurry. We could easily refactor the previous example to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_waiter_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tip_percentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tip_percentage&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SOME_ERROR_TYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"That's one generous tip!"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nf"&gt;get_waiter_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;tell_customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;walk_away_from_table&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference is that we need to provide some error object to our &lt;code&gt;Err&lt;/code&gt; case, which can be a hassle because the callee needs to come up with an error &lt;code&gt;type /&lt;/code&gt; message to use, and the caller needs to check whether the error message is actually worth reading and matching on.&lt;/p&gt;

&lt;p&gt;But here, it’s pretty clear that an error message won’t add much value to our &lt;code&gt;get_waiter_comment&lt;/code&gt; function. This is why I’d usually reach for an &lt;code&gt;Option&lt;/code&gt; until I have a good reason to switch to the &lt;code&gt;Result&lt;/code&gt; type. Still, the decision’s up to you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-no-pun-intended"&gt;
  &lt;/a&gt;
  Wrapping up (no pun intended)
&lt;/h2&gt;

&lt;p&gt;Rust’s approach to &lt;code&gt;exception&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; handling is a huge win for type safety. Armed with the concepts of expressions, pattern matching, and wrapper types, I hope you’re ready to safely handle errors throughout your application!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-production-rust-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt;: Full visibility into production Rust apps
&lt;/h2&gt;

&lt;p&gt;Debugging Rust applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking performance of your Rust apps, automatically surfacing errors, and tracking slow network requests and load time, &lt;a href="https://logrocket.com/signup"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your Rust app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Rust apps — &lt;a href="https://logrocket.com/signup"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>3 Lessons from React that can make you a better Svelte Developer</title>
      <author>Ryan Carniato</author>
      <pubDate>Thu, 22 Jul 2021 18:01:14 +0000</pubDate>
      <link>https://dev.to/this-is-learning/3-lessons-from-react-that-can-make-you-a-better-svelte-developer-23c4</link>
      <guid>https://dev.to/this-is-learning/3-lessons-from-react-that-can-make-you-a-better-svelte-developer-23c4</guid>
      <description>&lt;p&gt;&lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; is an amazing JavaScript framework that has been getting a lot of attention the last year. While it has been around since late 2016 it has recently passed the tipping point where there are a critical mass of developers enthusiastic about incorporating Svelte in their projects.&lt;/p&gt;

&lt;p&gt;What this means is we are seeing a lot of new developers trying &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; for the first time as their first framework, and even more coming from having used other frameworks in the past.&lt;/p&gt;

&lt;p&gt;At a time like this there is a lot to be excited about. &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; offers a shiny coat of paint on the tried and true patterns of frontend. However, we shouldn't be looking at this as an opportunity to throw out the baby with the bath water. There are learnt best practices and patterns from other frameworks that are incredibly important that may have not reached into Svelte vernacular but are every bit as relevant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keys-on-each"&gt;
  &lt;/a&gt;
  1. Keys on {#each}
&lt;/h2&gt;

&lt;p&gt;I've seen some talk about how keys are suddenly not needed on loops when moving to Svelte. This is of course completely unfounded. Svelte might not nag on you like React but not including them has exactly the same impact as it does in &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;. Svelte's implementation is equivalent to just muting those warnings.&lt;/p&gt;

&lt;p&gt;Why is &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; so insistent?&lt;br&gt;
&lt;a href="https://www.stefankrause.net/wp/?p=342"&gt;Keyed vs Non-Keyed&lt;/a&gt;&lt;br&gt;
&lt;a href="https://robinpokorny.medium.com/index-as-a-key-is-an-anti-pattern-e0349aece318#.qgzvk154k"&gt;Index as a Key is an Anti-Pattern&lt;/a&gt;&lt;br&gt;
&lt;a href="https://vuejs.org/v2/guide/list.html#Maintaining-State"&gt;Maintaining State&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honestly, the list goes on. The problem boils down to any scenario where the DOM can hold nested state like forms, animations, 3rd party widgets, webcomponents, etc.. there is potential for inconsistent state and state corruption. Luckily adding a key to Svelte is so easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{#each things as thing (thing.id)}
  &amp;lt;Thing name={thing.name}/&amp;gt;
{/each}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, keys aren't needed in every scenario but if you are writing general purpose libraries and components you should definitely as least support keyed iteration. The reason is that once you opt out of keying you've opted out all descendants. Any future changes or potential hiccups might be related to something further up in the hierarchy that you aren't even accounting for.&lt;/p&gt;

&lt;p&gt;Every framework author knows this but it is sometimes underplayed in docs for ease of onboarding. But this is an important idea that is omni-present in React and understanding it will help you be a better Svelte developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-single-value-stores-dont-scale"&gt;
  &lt;/a&gt;
  2. Single Value Stores don't Scale
&lt;/h2&gt;

&lt;p&gt;That is probably pretty obvious and Svelte's Store mechanism is very simple and powerful. In fact you can do pretty much anything with it. You can store a single value, jam a reducer in it, or even a state machine.&lt;/p&gt;

&lt;p&gt;But a single store is based off a single set of subscriptions. Every component that listens to that store triggers an update on any and every change to that store. This does not scale. There is also considerations around synchronization costs when distributed stores need to keep in sync with each other. Not all state needs to go in a single store but there is definitely a balance.&lt;/p&gt;

&lt;p&gt;It is the motivation for things like selectors and normalized forms in &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;, and complicated boilerplate around the Connect wrapper. Or why &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; and &lt;a href="https://mobx.js.org/"&gt;MobX&lt;/a&gt; use proxies to track individual updates. Svelte Stores do not solve this problem alone and re-introducing this when the time is right will bring along a lot of the familiar boilerplate.&lt;/p&gt;

&lt;p&gt;It is really convenient that there is such a simple out of the box solution already present. Most Reactive frameworks actually do come with a reactive atom solution built in, like &lt;a href="https://v3.vuejs.org/api/refs-api.html"&gt;Vue's &lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;, but interestingly enough it is not usually their recommended path for stores, based on how quickly it is outscaled.&lt;/p&gt;

&lt;p&gt;So this is a good thing to keep in mind as you grow your Svelte apps and are looking for data architecture wins on performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-immutable-interfaces"&gt;
  &lt;/a&gt;
  3. Immutable Interfaces
&lt;/h2&gt;

&lt;p&gt;But Svelte just lets you assign values. Yes. I don't mean making everything immutable. The challenge of mutable data structures is once they leave the scope in which they are defined it is hard to know what to expect. The classic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// do we know this is even true&lt;/span&gt;
&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For all we know &lt;code&gt;value&lt;/code&gt; isn't even defined object anymore. You see this time and time again in system architecture the importance of providing read only interface with explicit setters. Using things like events or commands with a dispatch function. Even mutable reactive data stores like MobX recommend using Actions and have a strict mode to prevent writes except for where they are intended. In a reactive system this is doubly important as a change to some value can have cascading effects elsewhere in your app.&lt;/p&gt;

&lt;p&gt;Luckily Svelte compiler has some built-in protection. Other than using an explicit bind syntax it is actually difficult to pass writable reactive values out of your template. Svelte's &lt;code&gt;let&lt;/code&gt; variables are basically keyed to the component and can't escape the template, and Svelte's Stores are built using explicit syntax.&lt;/p&gt;

&lt;p&gt;So most of this comes down to understanding the repercussions of when to bind and not and how to design your stores as your application grows. Often explicit setters or using events increases code clarity at an application level and improves modularity. But it even is good model for explaining the need to assign arrays to update them. Immutable changes on &lt;code&gt;let&lt;/code&gt; variables work without any inconsistency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; has done an amazing job of making learning a new Framework fun and easy. It also has all the tools needed to implement the best practices to create applications that scale. Just remember similar to moving to live in a new country, while the culture and traditions might be a bit different, the same physical laws of nature apply.&lt;/p&gt;

&lt;p&gt;The same tools and patterns you learned in other frameworks are just as important now as ever. And while we might sometimes not like the boilerplate these things exist for good reason. Accepting this is the first step in becoming a next-level &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; developer.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>svelte</category>
      <category>react</category>
    </item>
    <item>
      <title>Best Web Development IDE's</title>
      <author>Excalizan</author>
      <pubDate>Thu, 22 Jul 2021 17:43:52 +0000</pubDate>
      <link>https://dev.to/excalizan/best-web-development-ide-s-g67</link>
      <guid>https://dev.to/excalizan/best-web-development-ide-s-g67</guid>
      <description>&lt;p&gt;Hello! I am Excalizan and its my first post. I need help with some web development IDE's. I was originally using VS Code but its broken now. It doesn't auto-close brackets and doesn't highlight my code properly for any language. Currently I am using PyCharm and WebStorm but you know WebStorm is not free. I am using the 30 days trial now but it won't be enough in the future. That's why I need your help. If you can comment down your prefered free web development IDE's, I will apprichate it. Thanks!&lt;/p&gt;

</description>
      <category>help</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Discussing Bloom Filters</title>
      <author>Akarshan Gandotra</author>
      <pubDate>Thu, 22 Jul 2021 17:26:52 +0000</pubDate>
      <link>https://dev.to/akarshan96/discussing-bloom-filters-3ee3</link>
      <guid>https://dev.to/akarshan96/discussing-bloom-filters-3ee3</guid>
      <description>&lt;p&gt;Let's start this blog by discussing a few scenarios and analyzing the search algorithms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-1"&gt;
  &lt;/a&gt;
  Scenario 1
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HOAqsSQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/s34gzsyxtnyfth1jd7vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HOAqsSQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/s34gzsyxtnyfth1jd7vb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This is the classic case of the use of Bloom Filter. For instance, you are creating a new username for Instagram and suddenly it flashes 'this username is already being taken up'. This happens in a fraction of a second. But give it a thought, how it can read millions of record in the database to search for the name in such a short time. The first thought pops up is using search algorithms. But the &lt;strong&gt;linear search&lt;/strong&gt; is not efficient enough to pull the results from the database that fast. On the other hand, &lt;strong&gt;Binary search&lt;/strong&gt; comes with a restriction that all the user records are stored alphabetically and also not accurate when dealing with words. So, Instagram must be using Bloom Filter to achieve this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-2"&gt;
  &lt;/a&gt;
  Scenario 2
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqJoyC06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/wcnjvr17w1mqsycscrgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqJoyC06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/wcnjvr17w1mqsycscrgv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Social media sites generate so much content each second and one of it's most awesome feature is of it is that we generally don't see the same content (posts, stories, etc.) again and again. This means these sites maintain a record of the content that is already viewed by the user. &lt;br&gt;
Now let's wonder the ways they can achieve this. One is to store the content accessed by the user in the database and continuously query it to check if the content is visited by the user before. This is not both time and space-efficient since the application needs to maintain a huge amount of data per user and also iterate through it. To make the process more efficient, Bloom Filter is maintained for each user. Both &lt;strong&gt;Medium&lt;/strong&gt; and &lt;strong&gt;Quora&lt;/strong&gt; use this to solve the above problem.&lt;/p&gt;

&lt;p&gt;We discussed the scenarios where we can overcome space and time complexities with the help Bloom Filters. Now let's understand what is Bloom Filter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explaining-bloom-filter"&gt;
  &lt;/a&gt;
  Explaining Bloom Filter
&lt;/h3&gt;

&lt;p&gt;Bloom Filter is a &lt;strong&gt;probabilistic&lt;/strong&gt; data structure. By probabilistic it means this data structure can the likelihood of an element in a set. &lt;br&gt;
Bloom Filter generates &lt;strong&gt;False Positive&lt;/strong&gt; results which mean it tells if an element is not in a set but isn't sure about if it in the set.  It tells either "possibly in the set" or "definitely not in set". Let's demystify it a little bit.&lt;br&gt;
Bloom Filter is a bit array of fixed length. The value of a bit either can be 1 or 0. This bit array is initialized with all bits set to 0. When an element needs to be added, it is passed through a no. of hash functions and the result of each hash function becomes indices of bit array which are then set to 1.&lt;/p&gt;

&lt;p&gt;Let's say we have a bit array of length 10.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vs0WUmSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzneanbep7fkox29fb1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vs0WUmSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzneanbep7fkox29fb1i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say we are using 2 hash functions h1 and h2. We receive 2 strings "apple" and "orange".&lt;/p&gt;

&lt;p&gt;Suppose, &lt;br&gt;
h1("apple") % 10 = 3&lt;br&gt;
h2("apple") % 10 = 7&lt;/p&gt;

&lt;p&gt;So we will set 3rd and 7th index in array as 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2BZ3lFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scodr5x2bissjhgfaynq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2BZ3lFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scodr5x2bissjhgfaynq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For string "orange", suppose&lt;br&gt;
h1("orange") % 10 = 2&lt;br&gt;
h2("orange") % 10 = 9&lt;/p&gt;

&lt;p&gt;Looking at the current array we can see 2nd and 9th are 0 means no orange string never received otherwise the bit at those index would be 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--goomg-B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqmc11sxehvgm6u8rdkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goomg-B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqmc11sxehvgm6u8rdkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take another example,&lt;br&gt;
We receive "pear" string and suppose &lt;br&gt;
h1("pear") % 10 = 2&lt;br&gt;
h2("pear") % 10 = 5&lt;/p&gt;

&lt;p&gt;So, hash function h1 for "orange" already set bit at index 2 as 1. But still since we also get index 5 which currently 0, it means we didn't ever receive or stored "pear" before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAwU1Ehn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5zxudzi2mftc6769v8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAwU1Ehn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5zxudzi2mftc6769v8j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we get "apple" again,&lt;br&gt;
h1("apple") % 10 = 2 and h2("apple") % 10 = 9, Since both of these index already set as 1, we do know it already exists in the set.&lt;/p&gt;

&lt;p&gt;There might be a chance where we get a string even doesn't exist in the set or the storage have indexes received from hash functions as 1 in the bit array. We can certainly reduce the probability of the collisions by &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;increasing no. of hash function&lt;/li&gt;
&lt;li&gt;increasing length of bit array&lt;/li&gt;
&lt;li&gt;both 1. and 2.
This totally depends the frequency of data we receive for which we have to implement bloom filter.
If we need to calculate the size of bit array or the size of bit array based on data we receive, we can do using following formulas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;m = - (n lnP)/(ln2)^2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;k = (m/n) * ln2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;where m is size of bit array,&lt;br&gt;
n is expected number of elements,&lt;br&gt;
P is desired false positive probability,&lt;br&gt;
k is no. of hash functions.&lt;/p&gt;

</description>
      <category>bloom</category>
      <category>filter</category>
      <category>datastructure</category>
    </item>
    <item>
      <title>API vs. Microservices: A Beginners Guide to Understand Them</title>
      <author>Jaden Baptista</author>
      <pubDate>Thu, 22 Jul 2021 17:24:56 +0000</pubDate>
      <link>https://dev.to/jadenguitarman/api-vs-microservices-a-beginners-guide-to-understand-them-49fn</link>
      <guid>https://dev.to/jadenguitarman/api-vs-microservices-a-beginners-guide-to-understand-them-49fn</guid>
      <description>&lt;p&gt;Not so long ago, the technology used to build a website was quite simple.&lt;/p&gt;

&lt;p&gt;HTML, CSS, and JavaScript were all you needed in the good old days. And most of the time, you didn’t even need the last one!&lt;/p&gt;

&lt;p&gt;But now, things are getting a bit more complex. You have all these new techniques and technology you need to keep track of. While they might be confusing at first, learning about them can help make us more productive developers.&lt;/p&gt;

&lt;p&gt;One of these concepts we hear a lot about nowadays is the microservice architecture. It caused quite a stir, especially recently, because it's not usually explained well...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKHOS28p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205920/confused.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKHOS28p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205920/confused.gif" alt="Confused"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even experienced developers have no idea what microservices are, and that's alright. Usually, when asked about what they think microservices are, most web developers are going to say something like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Doesn't that have something to do with APIs?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer is &lt;em&gt;kind of&lt;/em&gt;. In the Jamstack world, we often talk about them as the same thing, but really they're complementary concepts. Learning about each idea's details can help us, especially when we only need one between APIs vs. microservices. &lt;/p&gt;

&lt;p&gt;Let's explore these two concepts. We'll start with the dictionary definitions, but don't worry. I'll move past the janky jargon and get to the meat of it in a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-api-and-microservice"&gt;
  &lt;/a&gt;
  What are API and microservice?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; stands for &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface. According to &lt;a href="https://en.wikipedia.org/wiki/API"&gt;Wikipedia&lt;/a&gt;, an API "defines interactions between multiple software applications. It defines the kinds of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc." In the web development world, we most often use APIs that can be accessed through the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt; are, according to &lt;a href="https://microservices.io/"&gt;microservices.io&lt;/a&gt;, pieces of "an architectural style that structures an application as a collection of services that are highly maintainable and testable, loosely coupled, independently deployable, organized around business capabilities, [and] owned by a small team."&lt;/p&gt;

&lt;p&gt;These definitions might seem a bit obtuse, so here's how I would define them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://snipcart.com/blog/integrating-apis-introduction"&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/a&gt; stands for &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface. APIs define how two pieces of software can connect and talk to each other. If your application were a big company, your API's job would be to keep in touch with external parties (customers or company partners, for example). Most APIs are organized around some standard, like &lt;a href="https://restfulapi.net/"&gt;REST&lt;/a&gt; or &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;, so that everybody knows how to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt; are pieces of software (often just isolated functions) that do a single, tiny, independent part of a bigger application. If your application were a big company, each employee would be a microservice, each playing their own specific and small role, working alongside but independently from their coworkers. This lets you make changes to individual microservices without affecting the rest of the application. In a big company replacing or retasking one employee in a large team would probably not affect the rest of the company all that much.&lt;/p&gt;

&lt;p&gt;It's the evolution of the monolith architecture. Instead of having one block composing the whole application, every component is divided into smaller building blocks.&lt;/p&gt;

&lt;p&gt;Put like that, does it make a bit more sense how they're different and how they can work together?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-apis-and-microservices-actually-means-irl"&gt;
  &lt;/a&gt;
  What APIs and microservices actually means IRL
&lt;/h2&gt;

&lt;p&gt;Let's dive into a more practical use case to help you understand furthermore.&lt;/p&gt;

&lt;p&gt;Say I've got this completely original payment processor service that I'm calling Tripe (you know, because it's &lt;a href="https://dictionary.cambridge.org/us/dictionary/english/tripe#cald4-us-1-2"&gt;a silly idea&lt;/a&gt;, not because I got inspired by any existing company in particular 😉). &lt;/p&gt;

&lt;p&gt;There's a ton of little bits of functionality that this application is going to need. Here are some off the top of my head:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reading from the database&lt;/li&gt;
&lt;li&gt;Inserting into or updating the database&lt;/li&gt;
&lt;li&gt;Creating invoice PDFs&lt;/li&gt;
&lt;li&gt;Contacting the banks&lt;/li&gt;
&lt;li&gt;Scheduling a recurring task for subscriptions&lt;/li&gt;
&lt;li&gt;Running an actual transaction&lt;/li&gt;
&lt;li&gt;Sending emails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these little pieces of functionality are given their own functions and are all maintained separately. Boom—that's the microservice architecture in a nutshell. All of those individual tasks are microservices. That makes debugging way easier, too, since you can narrow down the problem to a single function almost immediately. And that's awesome if you're like me and hate debugging: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JyMSQA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205922/debugging.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JyMSQA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205922/debugging.png" alt="Debugging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go further with this. Tripe will probably let their users trigger some of these functions, right? Creating invoices, customers profile, subscriptions, charges, and returns are five actions the user can start, and all of them would use some of the microservices mentioned above. So the solution here would be to create five new microservices, one for each of the new actions we're exposing to the outside world.&lt;/p&gt;

&lt;p&gt;For example, the new invoicing microservice would call the microservice reading the database, then the one that makes the PDFs, and then the one sending emails. You could think of it in terms of that analogy I gave earlier about the big company; you could have some employees whose whole job is to collect work done by their coworkers to present to people outside the company. Essentially we're creating a set of microservices that collect work done by other microservices and deliver it to users across the Internet. They only exist to &lt;strong&gt;i&lt;/strong&gt;nterface between your &lt;strong&gt;a&lt;/strong&gt;pplication and the outside world via &lt;strong&gt;p&lt;/strong&gt;rogrammed HTTP requests. &lt;/p&gt;

&lt;p&gt;Sound familiar? Well, it's because that's an &lt;strong&gt;API&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick sidenote: An API is technically how any two programs (including microservices themselves) communicate, but in web development, we usually mean an HTTP-facing API. An API follows a protocol like REST or GraphQL to expose data and functionality to the wider Internet. When I talk about an API in this article, that's what I'm referring to, though it's useful to know that the definition is pretty wide.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Those five microservices let users directly access Tripe's API. Not every microservice has to be part of an API, just like how not every employee needs to be part of the team communicating with customers. Many employees just do internal tasks and help out the customer-facing workers, just like how many microservices only do internal tasks or help out the API functions. There are also many ways to make an API without using microservices, so these technologies are more complementary than competing.&lt;/p&gt;

&lt;p&gt;Let's make this more visual with the helping hand of a diagram! &lt;/p&gt;

&lt;p&gt;Tripe's architecture would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1kUpa4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205919/tripe_architecture.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1kUpa4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205919/tripe_architecture.jpeg" alt="APIs vs Microservices Tripe_Architecture.jpeg"&gt;&lt;/a&gt;&lt;/p&gt; &lt;em&gt;Our totally fictional payment processor Tripe's totally fictional architecture.&lt;br&gt;
Note that the microservices are squares, and the third parties (customers, banks, etc.) are circular.&lt;/em&gt; 

&lt;p&gt;This looks a little complex on the surface, but it's a payment processor, after all. I wouldn't really be comfortable giving my credit card information to anything simpler than this...&lt;/p&gt;

&lt;p&gt;Let's go through the columns one by one. On the far left, we have Tripe's users. They only have access to the microservices in the External API column. Combined, the endpoints in the second column (External API) make up the API. They're the only microservices with a defined way to talk to the users (through specific JSON objects set by the API docs, for example). They individually accomplish tasks independently and use some other microservices (in the Business Logic column) to do tasks users aren't allowed to trigger directly. Most business logic functions also call each other, demonstrating that the whole Tripe application is broken down into its tiniest, reusable, isolated, independent pieces.&lt;/p&gt;

&lt;p&gt;Building your application with microservices reduces complexity and makes maintenance a lot easier because you can edit these little pieces individually. It's like building a site out of Legos: if you don't like one of them, you can just replace it and leave the rest of the site intact. That means your technical debt goes down to almost nothing, and if you keep with this approach, you'll never run into one of those lose-lose architecture dilemmas that we all hate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PYwpAgYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205923/techdept.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PYwpAgYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205923/techdept.png" alt="Technical dept"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microservices-and-apis-realworld-applications"&gt;
  &lt;/a&gt;
  Microservices and APIs real-world applications
&lt;/h2&gt;

&lt;p&gt;Our Tripe graph might look pretty complex because of all the lines, but it was relatively simple when matched up against the same graph for bigger companies like Amazon or Netflix:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MiLlSeBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205916/amazonnetflix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MiLlSeBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205916/amazonnetflix.png" alt="Amazon &amp;amp; Netflix Architecture Graph"&gt;&lt;/a&gt;&lt;/p&gt; &lt;em&gt;Microservice node graphs for Amazon and Netflix. Source: &lt;a href="https://www.divante.com/blog/10-companies-that-implemented-the-microservice-architecture-and-paved-the-way-for-others"&gt;Divante&lt;/a&gt;&lt;/em&gt; 

&lt;p&gt;The structure starts to get a bit unwieldy to look at, but it's far easier to work with. The article where the image is taking from jokes that the Amazon microservice node graph "looks almost like a Death Star, but is way more powerful." &lt;/p&gt;

&lt;p&gt;When you think about it, this architecture makes perfect sense for big companies like Amazon and Netflix. Their developers don't have to edit the entire codebase or redeploy the entire site when they want to make an update. Netflix's engineers, for example, are improving their product 24/7. Imagine if they had to take down the site for just a moment whenever they wanted an internal feature added. Netflix would be down constantly; bye-bye binge-watching! 😧&lt;/p&gt;

&lt;p&gt;Instead, they only have to work with one manageable chunk of code at a time, just one of the dots on that graph.&lt;/p&gt;

&lt;p&gt;In contrast, think about how few of the nodes on Netflix’s graph of microservices are actually meant to communicate with the outside world. &lt;a href="https://netflixtechblog.com/engineering-trade-offs-and-the-netflix-api-re-architecture-64f122b277dd"&gt;Netflix has been revising their API lately&lt;/a&gt; so I couldn’t figure out exactly how many of the nodes are facing outward. However, it’s still quite a small amount compared to the number of microservices they actually use internally. Take this image, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z97P31DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205917/api_microservices.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z97P31DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205917/api_microservices.png" alt="APIs and Microservices"&gt;&lt;/a&gt;&lt;/p&gt; &lt;em&gt;&lt;a href="https://netflixtechblog.com/engineering-trade-offs-and-the-netflix-api-re-architecture-64f122b277dd"&gt;Source&lt;/a&gt;&lt;/em&gt; 

&lt;p&gt;Here's the accompanying explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Suppose a user clicks the "play" button for Stranger Things Episode 1 on their mobile phone. For playback to begin, the mobile phone sends a "play" request to the API. The API, in turn, calls several microservices under the hood. Some of these calls can be made in parallel because they don’t depend on each other. Others have to be sequenced in a specific order. The API contains all the logic to sequence and parallelize the calls as necessary. The device, in turn, doesn’t need to know anything about the orchestration that goes on under the hood when the customer clicks "play".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interesting, right? I want to highlight one phrase in particular: "The API contains all the logic to sequence and parallelize the calls as necessary." This means that the client (person watching Netflix)&amp;lt;!-- Is it the client you're referring to here? --&amp;gt; called the API endpoint when they pressed the "play" button, which is, in itself, a microservice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: as I understand it, the API Netflix refers to here isn't available to the public. Remember, an API is just a defined way for "two pieces of software to connect and talk to each other". Those "two pieces of software" are, in this case, Netflix's backend and Netflix's frontend. It's still an API even if you and I can't use it over the Internet because that interaction between the frontend and the backend is given a structure and rules to follow. This is an important note to remember because it means that you've probably created more APIs than you realize in your career. Anytime we internally connect two services and give them a way to talk to one another, we're making one. We should be cognizant of that because it gives us a chance to think through our architecture before it gets out of hand.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr-theyre-complimentary"&gt;
  &lt;/a&gt;
  TLDR; They're complimentary.
&lt;/h2&gt;

&lt;p&gt;What's the conclusion? APIs can be made up, wholly or partially, out of microservices. Microservices can be used for a lot more, though. The original definition (the really wordy, nerdy one) called microservices pieces of "an architectural style". The whole application, business logic and all, can be broken down into tiny, reusable, single-purpose chunks of code, and that's the microservice architecture.&lt;/p&gt;

&lt;p&gt;Here's a Venn diagram if you'd like another way to visualize it. As you can see, microservices can be an API (the overlapping of the circles), but APIs aren't necessarily a microservice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_pKoCrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205918/blank_diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_pKoCrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205918/blank_diagram.png" alt="APIs vs. Microservices Diagram.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember how I said earlier that some APIs are made up of microservices (like our fictional Tripe API), but they don't always have to work together? Some microservices aren't part of APIs (the right section on the Venn diagram), such as the business logic in our Tripe example, because they don't have to be accessible to the outside world. On the other hand, there are a &lt;em&gt;ton&lt;/em&gt; of ways to make an API, and most of them don't involve microservices. Most of the web backends made with the traditional backend languages (PHP, Ruby, Java, etc.) are &lt;em&gt;monolithic&lt;/em&gt;, a.k.a. not made of microservices. Even backends made with JavaScript can be monolithic if you don't separate all the functionality into their smallest pieces.&lt;/p&gt;

&lt;p&gt;APIs and microservices are now massive parts of the modern web development process. We can't move forward without them. So if you're making your way past the traditional monolithic web architecture and/or want to learn more about how these newer technologies work together, here are some more links for additional education:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.divante.com/blog/10-companies-that-implemented-the-microservice-architecture-and-paved-the-way-for-others"&gt;10 companies that implemented the microservice architecture and paved the way for others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/engineering-trade-offs-and-the-netflix-api-re-architecture-64f122b277dd"&gt;Engineering Trade-Offs and The Netflix API Re-Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/jamstack-tools-services-apis/"&gt;100 Jamstack Tools, APIs &amp;amp; Services to Power Your Sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snipcart.com/blog/jamstack"&gt;New to Jamstack? Everything You Need to Know to Get Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snipcart.com/blog/integrating-apis-introduction"&gt;A Beginner's Guide to APIs: How to Integrate and Use Them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you've got any other questions, feel free to reach out to me on &lt;a href="http://twitter.com/jadenguitarman"&gt;Twitter&lt;/a&gt; or in the comments below. I'd love to hear from you!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Engineering Productivity &amp; Culture at Netflix w/ Kathryn Koehler</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 22 Jul 2021 16:49:51 +0000</pubDate>
      <link>https://dev.to/linearb/engineering-productivity-culture-at-netflix-w-kathryn-koehler-o9b</link>
      <guid>https://dev.to/linearb/engineering-productivity-culture-at-netflix-w-kathryn-koehler-o9b</guid>
      <description>&lt;p&gt;What is it like to work at Netflix as a developer? How do they think about culture, their customers and engineering productivity? &lt;/p&gt;

&lt;p&gt;In this incredible episode of &lt;a href="https://devinterrupted.com/podcast/engineering-productivity-culture-at-netflix/"&gt;Dev Interrupted&lt;/a&gt;, we bring in Kathryn Koehler, the Director of Productivity Engineering at Netflix, to chat about what makes Netflix so unique and why they are standardizing data-driven engineering today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0cQVpceM7vvzdzxeN31JMB"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How Netflix measures productivity&lt;/li&gt;
&lt;li&gt;Netflix's approach to company culture&lt;/li&gt;
&lt;li&gt;The "restaurant" approach to &lt;a href="https://linearb.io/blog/engineering-productivity/"&gt;engineering productivity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Standardizing data-driven metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9t9cmftftbs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>engineering</category>
      <category>culture</category>
      <category>data</category>
    </item>
    <item>
      <title>How to start your open source journey with UNICEF?</title>
      <author>Rachita Saha</author>
      <pubDate>Thu, 22 Jul 2021 16:31:58 +0000</pubDate>
      <link>https://dev.to/rachita_saha/how-to-start-your-open-source-journey-with-unicef-2hd</link>
      <guid>https://dev.to/rachita_saha/how-to-start-your-open-source-journey-with-unicef-2hd</guid>
      <description>&lt;p&gt;If you are looking for ways to start your open source journey and would like to use your technical skills to contribute towards achieving sustainable development, here’s an article you might find useful.&lt;/p&gt;

&lt;p&gt;All you need to contribute to UNICEF’s open source projects are working knowledge of Git, GitHub, web development, and enough determination to make that first pull request! The feeling of fulfillment you will receive when the first PR gets merged will keep you motivated to continue learning and contributing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-digital-public-goods"&gt;
  &lt;/a&gt;
  💻 What are Digital Public Goods?
&lt;/h2&gt;

&lt;p&gt;In alignment with the UN Secretary-General’s 2020 &lt;a href="https://www.un.org/en/content/digital-cooperation-roadmap/"&gt;Roadmap for Digital Cooperation&lt;/a&gt;, Digital Public Goods (DPGs) are defined as &lt;em&gt;“open source software, open data, open AI models, open standards, and open content that adhere to privacy and other applicable best practices, do no harm and are of high relevance for attaining the UN’s 2030 Sustainable Development Goals (SDGs)”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many types of digital technologies, data, and content – from open data to apps, visualization tools to educational curricula – could accelerate the achievement of the SDGs. However, it is only if they are &lt;strong&gt;freely and openly available, with minimal restrictions on how they can be distributed, adapted, and reused&lt;/strong&gt; that we can think of them as “digital public goods”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-digital-public-goods-alliance"&gt;
  &lt;/a&gt;
  🏢 What is the Digital Public Goods Alliance?
&lt;/h2&gt;

&lt;p&gt;UNICEF along with the Governments of Norway and Sierra Leone, and the India-based think tank iSPIRT have jointly established the &lt;a href="https://digitalpublicgoods.net/who-we-are/"&gt;Digital Public Goods Alliance (DPGA)&lt;/a&gt;, a multi-stakeholder initiative to accelerate the attainment of the SDGs in low- and middle-income countries by facilitating the discovery, development, use of, and investment in digital public goods. The DPGA is an effort to convene a network of partners from different sectors that will contribute to the identification, support, scale-up, and use of software, data, and algorithms that can advance humanity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-contribute"&gt;
  &lt;/a&gt;
  👩‍💻 How can you contribute?
&lt;/h2&gt;

&lt;p&gt;There are a few projects of the DPGA that you can contribute to, but instead of jumping straight into the code base, I would recommend the following approach to best understand the goals of the DPGA and make meaningful contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nominate-a-dpg"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/unicef/publicgoods-candidates/issues/66"&gt;Nominate a DPG&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This process involves identifying open source solutions that &lt;br&gt;
contribute to an equitable world and adhere to the &lt;a href="https://github.com/DPGAlliance/DPGStandard/blob/master/standard.md"&gt;DPG Standard&lt;/a&gt;. The &lt;a href="https://github.com/unicef/publicgoods-candidates"&gt;unicef/publicgoods-candidates&lt;/a&gt; repository is used to manage the process of adding nominees for consideration as Digital Global Public Goods. &lt;/p&gt;

&lt;p&gt;While you can easily make a contribution through the &lt;a href="https://digitalpublicgoods.net/public-goods/"&gt;submission form&lt;/a&gt;, I would strongly suggest opening a pull request, making sure it passes the CI build, and getting it merged. The instructions for nominating DPGs through both methods are mentioned very clearly in the &lt;a href="https://github.com/unicef/publicgoods-candidates/blob/master/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Go ahead and make that first contribution!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-dpg-submissions"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/unicef/publicgoods-candidates/issues/178"&gt;Validate DPG submissions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You can participate by reviewing open source projects against the &lt;a href="https://digitalpublicgoods.net/standard/"&gt;Digital Public Goods Standard&lt;/a&gt; with the ultimate goal of determining if a project qualifies as a DPG. &lt;/p&gt;

&lt;p&gt;This community sourcing exercise will give you the opportunity to delve into some of the largest up-and-coming open source projects, understand their licenses and documentation, and how they’re designing for best practices, standards, privacy, and more. &lt;/p&gt;

&lt;p&gt;By participating, you’ll get a better understanding of open &lt;br&gt;
projects that are making a difference in the world, particularly those that are advancing practical solutions to help achieve the SDGs. You will also join a growing number of innovators working on Technology for Development (T4D). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solve-issues-in-the-various-repositories"&gt;
  &lt;/a&gt;
  Solve issues in the various repositories
&lt;/h3&gt;

&lt;p&gt;The next step is to take a look at the various issues listed on UNICEF’s GitHub repositories. When you find an issue that interests you, drop a comment asking to be assigned to it. If you don’t understand the issue entirely, ask for help through comments. Below is a list of the various UNICEF repositories &lt;br&gt;
you can contribute to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unicef/publicgoods-candidates"&gt;https://github.com/unicef/publicgoods-candidates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unicef/publicgoods-scripts"&gt;https://github.com/unicef/publicgoods-scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unicef/publicgoods-wordpress"&gt;https://github.com/unicef/publicgoods-wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lacabra/submission-digitalpublicgoods"&gt;https://github.com/lacabra/submission-digitalpublicgoods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lacabra/validate-digitalpublicgoods"&gt;https://github.com/lacabra/validate-digitalpublicgoods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before diving into the solutions, I would strongly recommend you to go through the documentation thoroughly and set up the project on your local machine. Then, move to the &lt;code&gt;Issues&lt;/code&gt; tab on any repository, find an issue with the tag &lt;code&gt;good first issue&lt;/code&gt; and try solving it. If you don’t find any issues that interest you, you can create a new one! You just need to take a look at the code and try to identify bugs or make suggestions to improve the content, design, documentation, etc. &lt;/p&gt;

&lt;p&gt;The large codebase might appear intimidating at first, but it is not as hard as it appears. I was a beginner too when I started contributing, and I understand that it takes some effort to navigate through it all, but the satisfaction of seeing your changes merged into the repository, ultimately contributing towards the good of the public, is absolutely worth the effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  📝 Conclusion
&lt;/h2&gt;

&lt;p&gt;Open source represents an opportunity to fundamentally alter power balances in international development. UNICEF aims to harness that power through the cooperation of its many contributors, and this is your chance to be one! Being an open source contributor was one of the best learning experiences for me, and I encourage everyone to give it a try. &lt;/p&gt;

&lt;p&gt;I hope this blog helped you in some way. If you have any other questions related to the process, feel free to drop a comment below. &lt;/p&gt;

&lt;p&gt;Best of luck and happy coding! 😃&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Cloud cost reporting alone isn’t going to cut your AWS bill</title>
      <author>CAST AI</author>
      <pubDate>Thu, 22 Jul 2021 16:12:27 +0000</pubDate>
      <link>https://dev.to/castai/cloud-cost-reporting-alone-isn-t-going-to-cut-your-aws-bill-2ipa</link>
      <guid>https://dev.to/castai/cloud-cost-reporting-alone-isn-t-going-to-cut-your-aws-bill-2ipa</guid>
      <description>&lt;p&gt;As containerization rises in popularity, traditional cost optimization methods like monitoring and reporting are put to the test. &lt;/p&gt;

&lt;p&gt;Getting a detailed report of your cloud spend is just &lt;strong&gt;one side of the coin&lt;/strong&gt;. The other - and arguably more important one - is &lt;strong&gt;doing something about these findings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Keep on reading to find out why adding automated optimization techniques to the mix makes all the difference (and generates some serious savings).&lt;/p&gt;

&lt;h2&gt;Cloud cost reporting is a must-have, there’s no doubt about it&lt;/h2&gt;

&lt;p&gt;Teams usually use Kubernetes in dynamic and multi-tenant environments. Since increasing resources is so easy, losing control over cloud spend is even easier. If left unchecked, a missed bug or architecture oversight might easily snowball into a massive expense.&lt;/p&gt;

&lt;p&gt;Consider this story:&lt;/p&gt;

&lt;p&gt;One of &lt;strong&gt;Adobe’s&lt;/strong&gt; development teams once &lt;strong&gt;burned $80,000 per day&lt;/strong&gt; because of a computing job left running on Azure. Before someone discovered it and pulled the plug, &lt;strong&gt;the bill snowballed to more than &lt;a href="https://www.teampay.co/insights/manage-cloud-costs/"&gt;half a million dollars&lt;/a&gt;&lt;/strong&gt;. One simple alert would be enough to prevent this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;That’s why users need a solid cost reporting tool that brings them cost visibility in detailed reports and sends alerts when certain parts of the infrastructure go beyond the set thresholds. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cost reporting is incredibly important, but like I said - it’s just one side of the cost optimization coin.&lt;/p&gt;

&lt;h2&gt;But cost reporting alone doesn’t cut the chase&lt;/h2&gt;

&lt;p&gt;You need more than cost reports to make a real difference in your setup. After all, what cost monitoring and reporting tools give you are static recommendations that require a human to implement them.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you have a small environment, a human engineer can make it work. But think about the scale of a mid-sized company or enterprise. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Applying all the recommendations manually and on a regular basis translates into time, which translates into cost (not to mention all the lost optimization opportunities for sudden traffic spikes and such).&lt;/p&gt;

&lt;p&gt;What you need is to add &lt;strong&gt;automated cost optimization&lt;/strong&gt; to the mix.&lt;/p&gt;

&lt;p&gt;If you’re wondering how the combination of Kubernetes cost reporting and optimization works in practice, here’s a case study that shows it step by step.&lt;/p&gt;

&lt;h2&gt;How automated cost optimization helped reduce Amazon EKS costs in 15 minutes&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Wyc-kQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/WL4gQe96MxZzUmjME-U_DtSnAO5hvq9KpTU2utUhZvXWy0qqL8nTQcffz5Ff6GfQ3z_8uT-qKtlx4UDBbvivWW6k2bjnx3w09C74QYeCILFvyQHovesDw-Musp3T2BGbnuIltvh1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Wyc-kQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/WL4gQe96MxZzUmjME-U_DtSnAO5hvq9KpTU2utUhZvXWy0qqL8nTQcffz5Ff6GfQ3z_8uT-qKtlx4UDBbvivWW6k2bjnx3w09C74QYeCILFvyQHovesDw-Musp3T2BGbnuIltvh1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I provisioned an e-commerce app (&lt;a href="https://github.com/castai/examples"&gt;see it here&lt;/a&gt;) on an EKS cluster with 6 m5 nodes (2 vCPU, 8 GiB) on the Amazon EKS platform. Then, I deployed &lt;a href="https://cast.ai/eks-optimizer/"&gt;an AI engine&lt;/a&gt; to go through my application and suggest some optimizations. I got some pretty interesting recommendations in the Savings Report, so I activated the automated optimization feature.&lt;/p&gt;

&lt;p&gt;Here are the results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initial cluster cost: $414 / month.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Within &lt;strong&gt;15 minutes&lt;/strong&gt; after turning the automation on, the cluster cost got down to &lt;strong&gt;$207 (a 50% reduction) &lt;/strong&gt;by eliminating 3 nodes.&lt;/li&gt;
&lt;li&gt;And &lt;strong&gt;5 minutes&lt;/strong&gt; later, the solution added Spot Instances which made the cluster costs go down to &lt;strong&gt;$138 per month (a 66% reduction!)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Here’s a more detailed take on this case study&lt;/h3&gt;

&lt;h3&gt;Step 1: Generating the Savings Report&lt;/h3&gt;

&lt;p&gt;After creating and deploying my EKS cluster, I connected it to CAST AI by creating a free account and selecting &lt;em&gt;Connect your cluster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFwwuQQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/fc3rkSJxugy-Q1AyBnB3a27HN4PAVYJOJNCtNTLYF14CuWFjF2_-cMeapNRR494-dW6_O1vyjOtn8-NVJTinEUc6Z3MmVJT2iC7fEMuewQIyI5UmvTGW31j9rR8jesrPrvjRBvKK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFwwuQQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/fc3rkSJxugy-Q1AyBnB3a27HN4PAVYJOJNCtNTLYF14CuWFjF2_-cMeapNRR494-dW6_O1vyjOtn8-NVJTinEUc6Z3MmVJT2iC7fEMuewQIyI5UmvTGW31j9rR8jesrPrvjRBvKK" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRzh44KR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/oSRjPaBQifDoRwW_v1t3-9IyuI6KiFEqKv92dQWBaeG22G7JfcahK2dgmh1w6cZKLB-Aj6AT8-5F2_KBVM_bnGUWxnCj3_4z9fvh5b594uumkvPaakQvfbQkHs8OrRfNhKutVMOL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRzh44KR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/oSRjPaBQifDoRwW_v1t3-9IyuI6KiFEqKv92dQWBaeG22G7JfcahK2dgmh1w6cZKLB-Aj6AT8-5F2_KBVM_bnGUWxnCj3_4z9fvh5b594uumkvPaakQvfbQkHs8OrRfNhKutVMOL" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I then copied and ran the script successfully in my terminal.&lt;/p&gt;

&lt;p&gt;The CAST AI agent analyzed my EKS cluster in read-only mode and generated this Savings Report:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oOIWFeK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/ibksdy3608iGxRkN9wEJ-KvTr4ClJWi3xuV44AJK3b28yCV8FQw9oQuKYOK70LbCOq_ro5tSNSGjWPZa89nKT5_xLDbbIx8rRK6LbZkPPXp_Rn_LqmRoVU1LSCpfaW7Oi6sm2NCB" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oOIWFeK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/ibksdy3608iGxRkN9wEJ-KvTr4ClJWi3xuV44AJK3b28yCV8FQw9oQuKYOK70LbCOq_ro5tSNSGjWPZa89nKT5_xLDbbIx8rRK6LbZkPPXp_Rn_LqmRoVU1LSCpfaW7Oi6sm2NCB" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it turns out, if I switched my 6 m5.large to 3 c5a.large, I could slash my bill by almost 60%. &lt;/p&gt;

&lt;p&gt;And I could get even higher savings (66.5%!) if I decided to use Spot Instances:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_bwqt-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Dur8N8u7MUgcwIzcpinxLiihk2BCv36sShMGSVolYw68ZRJLlnwTZMxFo4a5TI2ThD6e0Lxg5teSTgTll0gERUwujFt4jfHmFDntaLk55AUibDIwRO46dISvaFMH8roM2oApMqeR" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_bwqt-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Dur8N8u7MUgcwIzcpinxLiihk2BCv36sShMGSVolYw68ZRJLlnwTZMxFo4a5TI2ThD6e0Lxg5teSTgTll0gERUwujFt4jfHmFDntaLk55AUibDIwRO46dISvaFMH8roM2oApMqeR" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 2: Activating the cost optimization&lt;/h3&gt;

&lt;p&gt;Turning automated optimization on made a lot of sense, so I had to grab my AWS access key ID and Secret access key, and add both to the platform. &lt;/p&gt;

&lt;p&gt;To get the access keys, I had to run this script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---c7lc2oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/gyvjtYMafi6cMNAb-G9wJZH1MztwY-pQxrJgCmCuLTYkNpiLJRD_znqs_6BDGEWMw0QpbWnouBKcWLvumJwUBqYQcAgat4F-R4evh97YdywQvaFmCWmECQH_brmmVdYz_NXiYCLm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---c7lc2oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/gyvjtYMafi6cMNAb-G9wJZH1MztwY-pQxrJgCmCuLTYkNpiLJRD_znqs_6BDGEWMw0QpbWnouBKcWLvumJwUBqYQcAgat4F-R4evh97YdywQvaFmCWmECQH_brmmVdYz_NXiYCLm" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 3: Enabling cost policies&lt;/h3&gt;

&lt;p&gt;To achieve maximum cost savings, I turned on all the policies available in CAST AI:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;CPU Policy: I used this policy to set the maximum budget of 200 CPUs.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Node autoscaler: Whenever I get unscheduled pods, CAST AI will start looking for a place to run them - starting with Spot Instances (if they’re Spot Instance-friendly) or On-Demand instances.&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;Node Deletion + Evictor: Evictor is a background process that continuously reduces the cluster to the minimum number of nodes by bin-packing pods. Once a node becomes empty, it’s instantly deleted. &lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Step 4: Running Evictor&lt;/h3&gt;

&lt;p&gt;This is what the last policy and Evictor tool look like in action:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One node (marked in red) is identified as a good candidate for eviction.&lt;/li&gt;
&lt;li&gt;Evictor automatically moves pods to other nodes for “bin-packing.”&lt;/li&gt;
&lt;li&gt;Once the node becomes empty, it’s deleted from the cluster.&lt;/li&gt;
&lt;li&gt;Evictor returns to step 1 and keeps on looking for other nodes that could be deleted to cut costs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After about 10 minutes, Evictor deleted 3 nodes and left just 3 nodes running. CPUs were at a much healthier 80% rate.&lt;/p&gt;

&lt;p&gt;The cost of my cluster is now $207.36 per month - so, 50% of the initial cost ($414 per month_.&lt;/p&gt;

&lt;h3&gt;Step 5: Moving workloads to new optimized nodes&lt;/h3&gt;

&lt;p&gt;This is a more advanced and optional step where CAST AI actively replaced my current nodes with more optimized ones - for example, Spot Instances. To do that, CAST AI cordons the cluster, drains nodes, and then replaces them with more optimized nodes.&lt;/p&gt;

&lt;p&gt;So, my nodes were cordoned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cyHD3Zwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/rkJiSSY6WiznSOo2EHu7XY5C-TMNpP53qZyQOX2UFayBkySWO3TF1ndw4Qfh8d1O0FRUlepUsrrt00xNmHuYfoBrR-IqNeYNlBZA3-F1ioCoCcDg9aFGvuHlecxzdtBQjUz3dP15" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cyHD3Zwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/rkJiSSY6WiznSOo2EHu7XY5C-TMNpP53qZyQOX2UFayBkySWO3TF1ndw4Qfh8d1O0FRUlepUsrrt00xNmHuYfoBrR-IqNeYNlBZA3-F1ioCoCcDg9aFGvuHlecxzdtBQjUz3dP15" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first two nodes were drained, and the AI engine selected the best instance type for these nodes. Here’s what I saw in my CAST AI dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1UrJvpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/HIUzBn-QnMHndSrzb2qATRve_a6t0YF2gN2wHVRsvq1fVfwxWEXuapwEMjn4cZdlLjko4pQ1FWaPhC_E_HxH9m8-y6FZAB1zdd_i6jY4MObMN7yi96sByIp_DGotY2pw2lhdpT99" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1UrJvpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/HIUzBn-QnMHndSrzb2qATRve_a6t0YF2gN2wHVRsvq1fVfwxWEXuapwEMjn4cZdlLjko4pQ1FWaPhC_E_HxH9m8-y6FZAB1zdd_i6jY4MObMN7yi96sByIp_DGotY2pw2lhdpT99" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, my cluster is now running on 2 nodes that cost me $138 per month. It’s hard to believe that I initially got a monthly EKS bill of $414.72!&lt;/p&gt;

&lt;h2&gt;Running clusters on Amazon EKS? Give automated optimization a try&lt;/h2&gt;

&lt;p&gt;Run the free &lt;a href="https://cast.ai/eks-optimizer/"&gt;CAST AI Savings Report&lt;/a&gt; to check how much you could potentially save. It also gives you actionable steps to reduce the bill that other tools ask you to pay for. And when you’re ready, turn automated cost optimization on to see how your cloud bill shrinks with every minute. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>startup</category>
    </item>
  </channel>
</rss>
