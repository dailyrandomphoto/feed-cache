<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Router  - Route ( WTF Moment )</title>
      <author>Santiago Correa</author>
      <pubDate>Fri, 16 Apr 2021 21:02:54 +0000</pubDate>
      <link>https://dev.to/scorreaui/react-router-route-wtf-moment-3102</link>
      <guid>https://dev.to/scorreaui/react-router-route-wtf-moment-3102</guid>
      <description>&lt;p&gt;Recently I was working on a project which consisted of books, and I realized that my whole web app was mounting and unmounting instead of the components re-rendering. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More details:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project consisted of 2 pages.&lt;/p&gt;

&lt;p&gt;Here's a quick wireframe I whipped up:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQLGMPcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxgbeeegbjcqi0gwe0l4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQLGMPcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxgbeeegbjcqi0gwe0l4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Home&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I used react-router to create the navigation between pages.&lt;/p&gt;

&lt;p&gt;What I didn't know, until I further read their documentation, is that if you use the prop component in &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; it uses React.createElement to create a new React element from the given component.&lt;/p&gt;

&lt;p&gt;That means if you provide an inline function to the component prop, you would create a new component every render. This results in the existing component unmounting and the new component mounting instead of just updating the existing component. &lt;/p&gt;

&lt;p&gt;This caused undesired behavior which was when I was on the search page and updated the App state it would refresh everything and I would lose the state I had in the Search page. &lt;/p&gt;

&lt;p&gt;Instead, to just make sure the component updates and doesn't mount and unmount when there is an update, &lt;strong&gt;use render&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route
  path='/'
  exact
  render={() =&amp;gt; ( 
   &amp;lt;Home 
    currentlyReading={this.state.currentlyReading} 
    read={this.state.read}
    wantToRead={this.state.wantToRead}
    updateBookShelf={(book, shelf) =&amp;gt; 
    this.updateBookShelf(book, shelf)} /&amp;gt;
  )}
&amp;gt;&amp;lt;/Route&amp;gt;               
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route
  path='/'
  exact
  render={() =&amp;gt; ( 
   &amp;lt;Search 
    allBooks={this.state.books}
    updateBookShelf={(book, shelf) =&amp;gt; 
    this.updateBookShelf(book, shelf)} /&amp;gt;
  )}
&amp;gt;&amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Component unmounts and mounts a new component.&lt;/li&gt;
&lt;li&gt;Render updates components, instead of unmounting and mounting.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>lesson</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Random act of kindness</title>
      <author>Jasper de Jager üê§ü•á</author>
      <pubDate>Fri, 16 Apr 2021 21:00:38 +0000</pubDate>
      <link>https://dev.to/jmdejager/random-act-of-kindness-2mi4</link>
      <guid>https://dev.to/jmdejager/random-act-of-kindness-2mi4</guid>
      <description>&lt;p&gt;I came across this post whilst scrolling through my new followers (very rewarding thing to do btw)&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/raeclaude" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xo1CNB26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hKtGmwk1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615576/ff77bc5b-0e19-449f-987c-951ff9724bb4.png" alt="raeclaude image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/raeclaude/new-friend-1mei" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;new friend&lt;/h2&gt;
      &lt;h3&gt;lawson peter „Éª Apr 16 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;It triggered meüòä Let's help a comedian out and give this post some love, and perhaps some funny comments üòÖ I'm sure a comedian can appreciate something like that. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Top 5 DEV Comments of the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 16 Apr 2021 20:07:18 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-4jpb</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-4jpb</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/technoglot"&gt;@technoglot&lt;/a&gt;
 had some &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-1jd5"&gt;amazing wins&lt;/a&gt; this week! Keep the good work coming!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/technoglot"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1s7673F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dh0H24sF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/technoglot"&gt;
        &lt;span class="comment-username"&gt;Amelia Vieira Rosado&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/technoglot/comment/1d9ce" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  9
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Let's see...This week was great for me! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I made progress on a small game I'm working on (college stuffs) üïπ&lt;/li&gt;
&lt;li&gt;I got my 4 week streak shiny badge. Consistency for the win! üòÅ&lt;/li&gt;
&lt;li&gt;My posts on productivity did really well too üòä (Feel free to check them out, no pressure)&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;Take a look at this &lt;a href="https://dev.to/alvaromontoro/bezos-calculator-4b7h"&gt;brilliant yet sobering calculator&lt;/a&gt; and you'll see what &lt;a class="mentioned-user" href="https://dev.to/crfries"&gt;@crfries&lt;/a&gt;
 means. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/crfries"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmiwuuwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--o_7lsoTK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/519865/10f72ebb-4176-45be-82ad-8d2cf7b92b50.png" alt="crfries profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/crfries"&gt;
        &lt;span class="comment-username"&gt;crfries&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/crfries/comment/1dcbk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 13
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This is amazing and depressing at the same time. &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes, all we need is a little advice from others to get our &lt;a href="https://dev.to/crfries/portfolio-advice-4m1o"&gt;portfolios in shape&lt;/a&gt;. This is a helpful adjustment, &lt;a class="mentioned-user" href="https://dev.to/peterlunch"&gt;@peterlunch&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/peterlunch"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GPZ-yvdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--thyPdIOK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/358832/da87fb8f-ff37-491a-b1a6-54bef42f0eb7.jpeg" alt="peterlunch profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/peterlunch"&gt;
        &lt;span class="comment-username"&gt;Peter&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/peterlunch/comment/1dblb" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 12
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;On your intro you say - "I am currently seeking a position at a company to grow and expand my abilities."&lt;/p&gt;

&lt;p&gt;I'd personally adjust to "I am currently seeking a position at a company where I can contribute with my x, y, z skills while I learn and grow from other developers."&lt;/p&gt;

&lt;p&gt;It's always good to say explicitly what you are offering the organization.  &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Choosing your &lt;a href="https://dev.to/bobbyiliev/what-is-your-linux-distribution-of-choice-and-why-2ijf"&gt;Linux distribution&lt;/a&gt; can be a tricky decision to make. Thanks for stating your case and making that choice easier, &lt;a class="mentioned-user" href="https://dev.to/cmuralisree"&gt;@cmuralisree&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/cmuralisree"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6ek2QQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jyGkl1dJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/554716/b30ee849-0d7c-4245-9b00-1c585cb101db.jpg" alt="cmuralisree profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/cmuralisree"&gt;
        &lt;span class="comment-username"&gt;Chittoji Murali Sree Krishna&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/cmuralisree/comment/1d88k" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  8
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;h1&gt;
  &lt;a href="#i-use-vanilla-arch"&gt;
  &lt;/a&gt;
  I use Vanilla arch
&lt;/h1&gt;

&lt;p&gt;I love it, bcz&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It's extremely lightweight,&lt;/li&gt;
&lt;li&gt;You are building your own system, so it will be solid stable&lt;/li&gt;
&lt;li&gt;Pacman and AUR,&lt;/li&gt;
&lt;li&gt;Availability of software&lt;/li&gt;
&lt;li&gt;Infamous archwiki,&lt;/li&gt;
&lt;/ol&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In so many ways, &lt;a href="https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac"&gt;reading can make you a better Software Developer&lt;/a&gt;, and these suggestions are heading to the top of the list, for sure. Thanks for choosing our next reads, &lt;a class="mentioned-user" href="https://dev.to/eljayadobe"&gt;@eljayadobe&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/eljayadobe"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyh0m08q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--J6Pjmr4x--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/16481/7c9b8fa1-9004-4b63-94e9-c282f821bf24.png" alt="eljayadobe profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/eljayadobe"&gt;
        &lt;span class="comment-username"&gt;Eljay-Adobe&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/eljayadobe/comment/1db4l" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 11
  &lt;/time&gt;

    ‚Ä¢ Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Apr 11&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I wasn't even aware of any of those books.  They're on my book queue now!&lt;/p&gt;

&lt;p&gt;Here's my four non-computer books that I have helped my programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Goal&lt;/strong&gt; by Eliyahu M. Goldratt&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Design of Everyday Things&lt;/strong&gt; by Don Norman&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Advanced Dungeons &amp;amp; Dragons&lt;/strong&gt; (1st edition) by Gary Gygax, et al&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To Do Doing Done&lt;/strong&gt; by Snead &amp;amp; Wycoff&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ‚úå&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>When to use Svelte vs SvelteKit vs Sapper?</title>
      <author>Dana Woodman</author>
      <pubDate>Fri, 16 Apr 2021 19:38:40 +0000</pubDate>
      <link>https://dev.to/danawoodman/when-to-use-svelte-vs-sveltetkit-vs-sapper-4o6a</link>
      <guid>https://dev.to/danawoodman/when-to-use-svelte-vs-sveltetkit-vs-sapper-4o6a</guid>
      <description>&lt;p&gt;Confused as to when you should use Svelte vs SvelteKit vs Sapper? Hopefully I can help you get a little more clarity with this short guide. Let's go! üëá&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#use-svelte-if"&gt;
  &lt;/a&gt;
  Use Svelte if...
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You don't need/want SSR (Server Side Rendering)&lt;/li&gt;
&lt;li&gt;You want to render a component into an existing page&lt;/li&gt;
&lt;li&gt;You want to output things like a vanilla component, a WebComponent or a React component adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#use-sveltekit-if"&gt;
  &lt;/a&gt;
  Use SvelteKit if...
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You're ok with Beta software and living on the bleeding edge&lt;/li&gt;
&lt;li&gt;You want SSR like Next.js/Nuxt.js&lt;/li&gt;
&lt;li&gt;You want to have a backend API as part of your project&lt;/li&gt;
&lt;li&gt;You want your app to work in a Serverless environment (e.g. Vercel/Netlify)&lt;/li&gt;
&lt;li&gt;You want super fast hot reloading in development (via Vite) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that SvelteKit supports static rendering with &lt;a href="https://www.npmjs.com/package/@sveltejs/adapter-static"&gt;adapter-static&lt;/a&gt; which you can use to render a static site with built in routing in case you don't want/need any API/SSR.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-sapper-if"&gt;
  &lt;/a&gt;
  Use Sapper if...
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You don't want to use Beta software and don't want to deal with the potential roadblocks of Beta software&lt;/li&gt;
&lt;li&gt;You want/need access directly to Express/Polka&lt;/li&gt;
&lt;li&gt;You're ok using a product that will no longer be maintained (SvelteKit will replace Sapper)&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h1&gt;

&lt;p&gt;Still not sure what to use? Maybe these scenarios will help you decide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;"I'm building a brand new web app (with backend/API)"&lt;/em&gt;: &lt;strong&gt;Use SvelteKit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I want to build an SPA (Single Page App) and I have a pre-existing backend and don't need SSR"&lt;/em&gt;: &lt;strong&gt;Use Svelte&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I want to use Svelte in an existing web app"&lt;/em&gt;: &lt;strong&gt;Use Svelte&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I'm cautious of new things but want SSR/routing"&lt;/em&gt;: &lt;strong&gt;Use Sapper&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I'm building a rocket ship üöÄ"&lt;/em&gt;: &lt;strong&gt;Use something else&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Note that if you end up using Sapper, you can always &lt;a href="https://kit.svelte.dev/migrating"&gt;migrate to SvelteKit later&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See any reasons missing from the above list? Drop them in the comments below üí¨&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; ü§ì&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>sapper</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The JavaScript console cheat sheet</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 16 Apr 2021 19:32:40 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/the-javascript-console-cheat-sheet-4o76</link>
      <guid>https://dev.to/mrwolferinc/the-javascript-console-cheat-sheet-4o76</guid>
      <description>&lt;p&gt;This cheat sheet provides a quick overview of all the methods of the JavaScript &lt;code&gt;console&lt;/code&gt; object. Please note that non-standard methods are not documented.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#basic-methods"&gt;
  &lt;/a&gt;
  Basic methods
&lt;/h1&gt;

&lt;p&gt;This section provides information on the basic methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleclear-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.clear&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Clears the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoledebug-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.debug&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a message to the web console at the "debug" log level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoleerror-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.error&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs an error message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoleinfo-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.info&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs an informational message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Information&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolelog-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.log&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolewarn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.warn&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a warning message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#advanced-methods"&gt;
  &lt;/a&gt;
  Advanced methods
&lt;/h1&gt;

&lt;p&gt;This section provides information on the advanced methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleassert-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.assert&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Writes an error message to the web console if the assertion is false.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assertion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assertion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-assertion-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;assertion&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Any boolean expression. If the assertion is false, the message is written to the console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The number &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;errorMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The number &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is not even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolecount-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Logs the number of times that this particular call to &lt;code&gt;count()&lt;/code&gt; was called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string. If supplied, this method outputs the number of times it has been called with that label. If omitted, &lt;code&gt;count()&lt;/code&gt; behaves as though it was called with the "default" label.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolecountreset-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.countReset&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Resets the counter used with &lt;code&gt;console.count()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string. If supplied, this method resets the count for that label to 0. If omitted, &lt;code&gt;countReset()&lt;/code&gt; resets the default counter to 0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoledir-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.dir&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays an interactive list of the properties of a specific JavaScript object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-object-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;object&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript object whose properties should be output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoledirxml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.dirxml&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dirxml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-object-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;object&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript object whose properties should be output.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consolegroup-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a new inline group in the web console log. This indents following console messages by an additional level until &lt;code&gt;console.groupEnd()&lt;/code&gt; is called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Label for the group. This does not work with &lt;code&gt;console.groupEnd&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the outer level&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Level 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Level 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;More of level 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Back to level 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Back to the outer level&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolegroupcollapsed-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.groupCollapsed&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a new inline group in the web console. Unlike &lt;code&gt;console.group()&lt;/code&gt;, the new group is created collapsed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Label for the group.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consolegroupend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.groupEnd&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Exits the current inline group in the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoletable-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays tabular data as a table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-data-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;data&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The data to display. This must be either an array or an object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-columns-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;columns&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;An array containing the names of columns to include in the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// An array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oranges&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// An array of objects&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;city1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;city2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chicago&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Illinois&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;city3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Los Angeles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;California&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;city1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoletime-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Starts a timer that you can use to track how long an operation takes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The name to give the new timer. This will identify the timer; use the same name when calling &lt;code&gt;console.timeEnd()&lt;/code&gt; to stop the timer and get the time output to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;answer time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click to continue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;answer time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Do a bunch of other stuff...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;answer time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoletimeend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.timeEnd&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Stops a timer that was previously started by calling &lt;code&gt;console.time()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The name of the timer to stop. Once stopped, the elapsed time is automatically outputted to the web console.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoletimelog-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.timeLog&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Logs the current value of a timer that was previously started by calling &lt;code&gt;console.time()&lt;/code&gt; to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The name of the timer to log to the console.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoletrace-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.trace&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a stack trace to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-any-data-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;...any, ...data&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Zero or more objects to be output to console along with the trace. These are assembled and formatted the same way they would be if passed to the &lt;code&gt;console.log()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>console</category>
      <category>cheatsheet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Self-care strategies for (slightly!) less social media scrolling during covid</title>
      <author>Noƒçnica Fee</author>
      <pubDate>Fri, 16 Apr 2021 19:19:04 +0000</pubDate>
      <link>https://dev.to/rudderstack/self-care-strategies-for-slightly-less-social-media-scrolling-during-covid-4o8b</link>
      <guid>https://dev.to/rudderstack/self-care-strategies-for-slightly-less-social-media-scrolling-during-covid-4o8b</guid>
      <description>&lt;p&gt;&lt;em&gt;cover by &lt;a href="https://commons.wikimedia.org/w/index.php?curid=83165549"&gt;Michal Klajban - Own work, CC BY-SA 4.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can work out more, read more, cook more, and do any other 'self-care' to not be on screens, yet it's still surprisingly hard to not constantly log into social media like checking a baby breathing. At least, this is extremely the case for myself. It's easy for me to notice in others addictive social media posting patterns, but it's much harder to notice my own kinds of madness! But since shaming doesn't particularly work (and honestly, we deserve to be kinder to ourselves about our social media screentime given that we're all surviving an uprecedented pandemic in isolation), what's a better way to positively reframe this as to figure out the root of the problem and then care for our true needs?&lt;/p&gt;

&lt;p&gt;Anyone who is 'too online' is really just craving connection to something rewarding. And this isn't at all an unreasonable or bad thing in the first place, particularly in a time where social distancing saves lives! Our whole lives have been upended and we still no longer have access to the offline activities and social life we once had before. Therefore, it's imperative to incorporate small, gentle ways to spend less time staring at screens, and more time doing activities that retain a similar 'validation loop' and social availability that social media offers. Here's a few ways that help mitigate the chronic disconnect that leads to endless scrolling:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Changing your twitter account to private, or having locked/private social media, is especially helpful as to finally retrain your mind to use social media not as a tool for branding or virality but just to keep up with your favorite people who are just sharing parts of their everyday lives. It's a wonderful change to finally get to know people on more intimate and human level instead of just follow and keep up with those who write content for clicks!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly to the first tip, hanging out on instagram live streams or twitch channels is a great way to still be on social media but not have to feel the compulsion to 'perform' yet you get to watch the stream hosts and chat with their community in real time. It's a much different social media energy than twitter or facebook and is much more similar in experience as listening to podcasts, except with the added fun of live interaction and getting to comment on the stream.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hobbies that require using both hands, especially involving crafts, such as cooking, doing a puzzle, or woodworking, are game-changingly helpful soothers. Drawing especially has been a rewarding hobby for me to personally get back into; the joy of seeing my own artistic improvement on an immediate basis, via practicing in a sketchbook and filling up more and more pages every day, allows for a sense of ensuring a 'validation loop' reward for putting in the work, which has significantly helped me not feel a need to scroll endlessly on social media. As humans, we all love to see something we create or build grow a little bit every day with our own efforts - through daily creative rituals that relax or excite us, that ideally involves both hands to do, we can manage our chronic disconnect in an emotionally soothing and rewarding manner.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember, you don't need to do a hardcore 'digital detox' and refrain cold turkey from all social media! It's unrealistic to uninstall all your apps, stop checking your email, and refrain from socializing and keeping up with others entirely. Being online is a much more normal part of daily life now - with a set of planned strategies to make the best use of your energy, you will find yourself able to recuperate during social isolation better and better.&lt;/p&gt;

</description>
      <category>selfcare</category>
      <category>discuss</category>
      <category>worklife</category>
    </item>
    <item>
      <title>My first git alias</title>
      <author>Jamund Ferguson</author>
      <pubDate>Fri, 16 Apr 2021 19:04:50 +0000</pubDate>
      <link>https://dev.to/xjamundx/my-first-git-alias-4ldh</link>
      <guid>https://dev.to/xjamundx/my-first-git-alias-4ldh</guid>
      <description>&lt;p&gt;At work I'm often jumping back and forth between various branches and pull requests and I sometimes find myself struggling to remember the name of a recent branch I need to use.&lt;/p&gt;

&lt;p&gt;For years I've used &lt;code&gt;git reflog&lt;/code&gt; as a short-cut to look at my git history and identify my recent work. It works okay, but it's very hard to make sense of:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bj3aQpSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by2umf5k9jqztnpil2ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bj3aQpSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by2umf5k9jqztnpil2ym.png" alt="git reflog output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other times I try to use &lt;code&gt;git branch&lt;/code&gt;, but that doesn't give you much context about anything and of course it can be easy to drown in the large number of branches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/d/n/webapp (typescript ‚úî) git branch
  add-cognito-auth
  doritos
  eslint-prettier
  main
* typescript
  updated-husky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recently I got frustrated by this and decided to find a solution and stumbled on this stackoverflow question, &lt;a href="https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit"&gt;How can I get a list of git branches ordered by most recent commit?&lt;/a&gt;, which taught me two really useful techniques.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;You can sort branches by commit date&lt;/strong&gt; using &lt;code&gt;git branch --sort=-committerdate&lt;/code&gt; which is great in an of itself (watch out for the &lt;code&gt;-&lt;/code&gt; after &lt;code&gt;sort=&lt;/code&gt; which puts the most recent branches first)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can enhance this output a bit&lt;/strong&gt; using this wild syntax &lt;code&gt;git branch --sort=-committerdate --format='%(HEAD)%(color:yellow)%(refname:short) | %(color:bold green)%(committerdate:relative) | %(color:blue)%(subject)%(color:reset)' --color=always&lt;/code&gt; which I'm never going to remember.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Which led me to create my first git alias after over 12 years of using it. Here's how I did it and here's what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global alias.branches "branch --sort=-committerdate --format='%(HEAD)%(color:yellow)%(refname:short) | %(color:bold green)%(committerdate:relative) | %(color:blue)%(subject)%(color:reset)' --color=always"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That command added this to the boottom of my &lt;code&gt;~/.gitconfig&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[alias]
        branches = branch --sort=-committerdate --format='%(HEAD)%(color:yellow)
%(refname:short) | %(color:bold green)%(committerdate:relative) | %(color:blue)%(subject)%(color:reset)' --color=always
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I type &lt;code&gt;git branches&lt;/code&gt; I see this lovely output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IF8hRmrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua9191j2s8wlcq8rc61k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IF8hRmrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua9191j2s8wlcq8rc61k.png" alt="nicely formatted git branch list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git isn't always the easiest to use, but this alias has made it just a little bit better, for me anyway. What kind of aliases do you use?&lt;/p&gt;

</description>
      <category>github</category>
      <category>linux</category>
    </item>
    <item>
      <title>CodeFactory for Visual Studio (free license)</title>
      <author>Bill Fencken</author>
      <pubDate>Fri, 16 Apr 2021 18:39:42 +0000</pubDate>
      <link>https://dev.to/bfencken/codefactory-for-visual-studio-free-license-50l5</link>
      <guid>https://dev.to/bfencken/codefactory-for-visual-studio-free-license-50l5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MflrjYrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcqn904eowcsxp2q0z1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MflrjYrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcqn904eowcsxp2q0z1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about the power of auto-transformation and legacy app modernization using CodeFactory &lt;a href="http://www.linktr.ee/codefactory"&gt;www.linktr.ee/codefactory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeFactory for VisualStudio enables architects &amp;amp; dev leads to auto-generate &amp;amp; implement consistent design pattern adherence across the entire dev team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lots-of-community-projects-available-and-looking-for-contributors-httpsgithubcomcodefactoryllcpublicprojects"&gt;
  &lt;/a&gt;
  Lots of community projects available and looking for contributors - &lt;a href="https://github.com/CodeFactoryLLC/Public-Projects"&gt;https://github.com/CodeFactoryLLC/Public-Projects&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>opensource</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Top 14 Python Projects to learn GitHub Actions üöÄ</title>
      <author>Aahnik Daw</author>
      <pubDate>Fri, 16 Apr 2021 18:31:37 +0000</pubDate>
      <link>https://dev.to/aahnik/top-14-python-projects-to-learn-github-actions-ge5</link>
      <guid>https://dev.to/aahnik/top-14-python-projects-to-learn-github-actions-ge5</guid>
      <description>&lt;p&gt;GitHub actions help developers to automate workflows. You can run tests, build and publish packages, check coverage, lint the codebase, and do tons of other cool stuff, using GitHub actions.&lt;/p&gt;

&lt;p&gt;Some of the best and most popular python projects are using GitHub actions to automate their workflow.&lt;/p&gt;

&lt;p&gt;GitHub actions are defined using a yaml file under the &lt;code&gt;.github/workflows&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;If you are completely new to GitHub actions, the official documentation can help: &lt;a href="https://docs.github.com/en/actions"&gt;https://docs.github.com/en/actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best way to learn is by seeing examples. Below is the compilation of links to great GitHub action workflows.&lt;/p&gt;

&lt;p&gt;(the order of listing is completely random)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;poetry&lt;/strong&gt;  &lt;a href="https://github.com/python-poetry/poetry/tree/master/.github/workflows"&gt;https://github.com/python-poetry/poetry/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;fastapi&lt;/strong&gt; &lt;a href="https://github.com/tiangolo/fastapi/tree/master/.github/workflows"&gt;https://github.com/tiangolo/fastapi/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;mkdocs&lt;/strong&gt; &lt;a href="https://github.com/mkdocs/mkdocs/tree/master/.github/workflows"&gt;https://github.com/mkdocs/mkdocs/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;material mkdocs&lt;/strong&gt; &lt;a href="https://github.com/squidfunk/mkdocs-material/tree/master/.github/workflows"&gt;https://github.com/squidfunk/mkdocs-material/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;typer&lt;/strong&gt; &lt;a href="https://github.com/tiangolo/typer/tree/master/.github/workflows"&gt;https://github.com/tiangolo/typer/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;pytest&lt;/strong&gt; &lt;a href="https://github.com/pytest-dev/pytest/tree/main/.github/workflows"&gt;https://github.com/pytest-dev/pytest/tree/main/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;pylint&lt;/strong&gt; &lt;a href="https://github.com/PyCQA/pylint/tree/master/.github/workflows"&gt;https://github.com/PyCQA/pylint/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;mypy&lt;/strong&gt; &lt;a href="https://github.com/python/mypy/tree/master/.github/workflows"&gt;https://github.com/python/mypy/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;requests&lt;/strong&gt; &lt;a href="https://github.com/psf/requests/tree/master/.github/workflows"&gt;https://github.com/psf/requests/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;aiohttp&lt;/strong&gt; &lt;a href="https://github.com/aio-libs/aiohttp/tree/master/.github/workflows"&gt;https://github.com/aio-libs/aiohttp/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;black&lt;/strong&gt; &lt;a href="https://github.com/psf/black/tree/master/.github/workflows"&gt;https://github.com/psf/black/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;python-youtube&lt;/strong&gt; &lt;a href="https://github.com/sns-sdks/python-youtube/tree/master/.github/workflows"&gt;https://github.com/sns-sdks/python-youtube/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;pygithub&lt;/strong&gt; &lt;a href="https://github.com/PyGithub/PyGithub/tree/master/.github/workflows"&gt;https://github.com/PyGithub/PyGithub/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;coverage&lt;/strong&gt; &lt;a href="https://github.com/nedbat/coveragepy/tree/master/.github/workflows"&gt;https://github.com/nedbat/coveragepy/tree/master/.github/workflows&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>python</category>
      <category>discuss</category>
      <category>testing</category>
    </item>
    <item>
      <title>Free Appointment Scheduling Tool for Remote Teams</title>
      <author>Spurwing</author>
      <pubDate>Fri, 16 Apr 2021 18:26:16 +0000</pubDate>
      <link>https://dev.to/spurwing/free-appointment-scheduling-tool-for-remote-teams-19g1</link>
      <guid>https://dev.to/spurwing/free-appointment-scheduling-tool-for-remote-teams-19g1</guid>
      <description>&lt;p&gt;Remote Work and Work From Home is here to stay. Even post-pandemic the majority of office workers are in favor of a hybrid of fully remote setting. This also means we need to use better &amp;amp; smarter tools to be more productive and efficient.&lt;/p&gt;

&lt;p&gt;Today we release our Free and Improved &lt;strong&gt;Appointment Scheduling Tool&lt;/strong&gt; for international and &lt;strong&gt;remote teams&lt;/strong&gt;. This software is inspired by online tools like Doodle, which allow team members to indicate their availability. The results can be monitored in real-time and show all overlapping dates and times where all users can attend.&lt;/p&gt;

&lt;p&gt;Live demo: &lt;a href="https://cloud.spurwing.io/Availability/S01/"&gt;https://cloud.spurwing.io/Availability/S01/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VehzYEmXvlc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPeJ3W4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q099a57m27c82f2axyfd.png" alt="free appointment scheduling tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full YouTube Demo: &lt;a href="https://www.youtube.com/watch?v=VehzYEmXvlc"&gt;https://www.youtube.com/watch?v=VehzYEmXvlc&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;The homepage calendar remains untouched for most of it. The major improvement is that we now get a shareable single link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f09NCN4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b39qy97xjmh9374190cy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f09NCN4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b39qy97xjmh9374190cy.png" alt="scheduling tool for remote teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the new link each user can select the cells to indicate their availability for a given date and time. A name and email address must be provided in order to submit the answer. Updating an already submitted answer is possible by re-submitting using the same email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uG2-b768--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw6u61d9otwgnp74cant.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uG2-b768--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw6u61d9otwgnp74cant.png" alt="appointment scheduler for remote teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results sections shows the strict overlap of all the answers, of each submitted user. But also allows you to toggle individual members to see the overlap or intersection.&lt;/p&gt;

&lt;p&gt;As in the initial version, all submissions and dates/times are displayed with respect to the attendee's and viewer's time zones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;The full implementation of this team scheduling solution is available on &lt;a href="https://github.com/Spurwing/Availability-Solutions/tree/main/solution_01"&gt;GitHub&lt;/a&gt;. We use JavaScript/jQuery for the front-end client with the help of a few libraries, and NodeJS + Express for the back-end server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;No matter your front-end or back-end stack, you can easily integrate this solution into your existing system. For inquiries, problems or other issues please reach to us.&lt;/p&gt;

&lt;p&gt;Support email: &lt;a href="mailto:ilya@spurwing.io"&gt;ilya@spurwing.io&lt;/a&gt;&lt;br&gt;
Discord community: &lt;a href="https://discord.gg/j3gd5Qk5uW"&gt;https://discord.gg/j3gd5Qk5uW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to follow our blog for all new releases. For more tools and resources check out our github: &lt;a href="https://github.com/Spurwing/"&gt;https://github.com/Spurwing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Deploying your first ReactJS application into the Cloud</title>
      <author>Bradston Henry</author>
      <pubDate>Fri, 16 Apr 2021 18:06:35 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/deploying-your-first-reactjs-application-into-the-cloud-31je</link>
      <guid>https://dev.to/ibmdeveloper/deploying-your-first-reactjs-application-into-the-cloud-31je</guid>
      <description>&lt;p&gt;In one of my &lt;a href="http://ibm.biz/how-to-containerize-react-app-031821-bradstondev"&gt;previous posts&lt;/a&gt;, I went through the process of showing you how to containerized a ReactJS application using Docker. But once you get your application containerized and built beautifully with Docker, what should an awesome dev like you do now?!?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How about deploy a React application into the cloud to share with the world!!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Don't believe you can do it! Well after this Blog, you will have an awesome Dad Jokes React Site in the cloud just like this one: &lt;a href="http://ibm.biz/dad-joke-app-ibm-cloud-bradstondev"&gt;Dad Joke React App Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2UzXkAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c40f6slqpnjnffexrtwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2UzXkAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c40f6slqpnjnffexrtwp.png" alt="Dad-Joke-App-ScreenShot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So today, I am going to show you step-by-step, how to take a React application and deploy it using &lt;a href="//ibm.biz/ibm-cloud-homepage"&gt;IBM Cloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special thanks to &lt;a href="https://www.linkedin.com/in/kyle-smith-67393b80/"&gt;Kyle Smith&lt;/a&gt; for creating the visual design for our React site.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-things-first"&gt;
  &lt;/a&gt;
  First Things First
&lt;/h1&gt;

&lt;p&gt;So in order for us to deploy our application into IBM Cloud, we will need to sign up for a &lt;a href="//ibm.biz/IBM-Cloud-Signup"&gt;free IBM Cloud Lite account&lt;/a&gt;. This account will allow you to deploy your application for üî•freeüî• using IBM Cloud and let you try out different technologies on the cloud. Definitely a great way to get Cloud exposure.&lt;/p&gt;

&lt;p&gt;Next, download my sample React JS application called &lt;a href="http://ibm.biz/dad-jokes-appv1-git-bradstondev"&gt;Dad Jokes App&lt;/a&gt;. This is based off my previous &lt;a href="//ibm.biz/dad-jokes-uiv1-github"&gt;"Dad Joke UI"&lt;/a&gt; code but has a slight change that allows you to do the needed REST API calls within the application without the need of NodeJS Server such as my previously created &lt;a href="//ibm.biz/blog-3-docker-dad-jokes-nodejs"&gt;"Dad Jokes API"&lt;/a&gt;. Here is a link to my github to download the code we will be deploying into the cloud: &lt;a href="http://ibm.biz/dad-jokes-appv1-git-bradstondev"&gt;Dad Jokes App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have a IBM Cloud account and the code we need, let's get ready to deploy our code into the cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-your-cloud-environment"&gt;
  &lt;/a&gt;
  Setting up your Cloud Environment
&lt;/h1&gt;

&lt;p&gt;So the first thing we are going to need to do is to make sure we are signed into our IBM Cloud account and navigate to the &lt;a href="http://ibm.biz/ibm-cloud-dashboard-bradstondev"&gt;IBM Cloud dashboard&lt;/a&gt;. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2sHxzjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c87i24vajhm9h77apjag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2sHxzjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c87i24vajhm9h77apjag.png" alt="IBM-Cloud-Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once on the dashboard, we are going to select the button "Create resource" located in the top right corner of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMHkEJh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wwt0j61h780k6lgpjoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMHkEJh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wwt0j61h780k6lgpjoj.png" alt="IBM-Cloud-Dashboard-Create-Resource"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we select that, we will be brought to the IBM Cloud catalog which shows all the different services that are available for use. Definitely checkout all the different services that are offered like AI, databasing, etc. at a later time but for now we will be looking for a specific resource:  &lt;strong&gt;Cloud Foundry&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To easily find Cloud Foundry, type "Cloud Foundry" in the "Search the catalog..." box located in the top-center of the page and then press Enter/Return on your keyboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQNJwWQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5blgnrxac164kiqisog.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQNJwWQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5blgnrxac164kiqisog.gif" alt="IBM-Cloud-service-search-original"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should now be presented with a list of results that match the keyboard we just typed. The first result should be Cloud Foundry and should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMvmXeRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/150kxcazcyvpgmp5glo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMvmXeRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/150kxcazcyvpgmp5glo2.png" alt="IBM-Cloud-cloud-foundry"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select Cloud Foundry and allow the page to to load. You should now see the Cloud Foundry Dashboard page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---s3OZDT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poo93wtxwjm2rixwpp04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---s3OZDT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poo93wtxwjm2rixwpp04.png" alt="Cloud-Foundry-Dashboard-Empty"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just a note, we will be specifically be using Cloud Foundry to deploy our ReactJS application into the Cloud. Cloud Foundry allows us to easily deploy applications with different runtime languages into the cloud with relative ease. If you'd like to learn more about Cloud Foundry and what it is check out &lt;a href="http://ibm.biz/ibm-cloud-foundry-homepage-bradstondev"&gt;this link&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;Now that we are on the dashboard, we need to go ahead and create our resource that will be used to host our ReactJS application. On the right side of the page, select the "Create" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53pMtCYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asjvjuoxnl73lsccrb05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53pMtCYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asjvjuoxnl73lsccrb05.png" alt="Cloud-Foundry-Dashboard-Empty-Create-Button"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once selected, you should be presented with the "Create a Cloud Foundry Sample App" page. We will use this page to configure our application environment:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wZb8V3N9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13hnkyssxklqf7279mqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZb8V3N9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13hnkyssxklqf7279mqg.png" alt="Create-Cloud-Foundry-App-Blank"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First thing we will do is select the location we would like our application to be hosted out of. I recommend using the closest location to where you are currently located:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTXUfamR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pf8425lit3j6qk5jlay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTXUfamR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pf8425lit3j6qk5jlay.png" alt="Create-Cloud-Foundry-App-Location"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we will select our pricing plan. Select the lite Plan, as it is free, with 64MB of memory as our application is pretty light-weight.:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3XrAHu4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j19hfvyke2bs9ceasq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3XrAHu4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j19hfvyke2bs9ceasq8.png" alt="Create-Cloud-Foundry-App-Pricing-Plan"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we will be select the runtime that our application will be running in for deployment. We will be selecting "SDK for Node.js". But as you can see there are many other environments you can choose from for applications in the future:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JTVkUQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3b8m1v88o64hzqo2d0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JTVkUQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3b8m1v88o64hzqo2d0g.png" alt="Create-Cloud-Foundry-App-Configure-Runtime"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we will enter a unique host application name and a unique host name. For ease I recommend setting the application name and unique name as &lt;strong&gt;"Dad Joke App-" + your initials&lt;/strong&gt; for the name and &lt;strong&gt;"dad-joke-app-" + your initials&lt;/strong&gt; for the host name. So in my case my application name will be "Dad Joke App-BSH" and my unique host name will be "dad-joke-app-bsh". Once you have entered your names, you most likely don't need to change anything else unless you would like to change the domain, organization or space:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tP36J1tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pu84jx6q260yg1i4rc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tP36J1tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pu84jx6q260yg1i4rc.png" alt="Create-Cloud-Foundry-App-Configure-Name"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you desire, you can add tags to your application which can be used for "categorizing" your app and for searching in the future. This not necessary at this point: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NyWe32EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsljwqcz1gszavdm2myv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NyWe32EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsljwqcz1gszavdm2myv.png" alt="Create-Cloud-Foundry-App-Tags"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all fields are filled appropriately,  you can confirm the details of our soon to be created resource in the upper right side of the page and then select the "Create" button on the bottom right of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J089DUsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcmypkgisigd8qyfnul6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J089DUsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcmypkgisigd8qyfnul6.png" alt="Create-Cloud-Foundry-App-Create"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your resource is created, you should be presented with a page that looks similar to this. If you select the "Visit App URL" link in the top center of the page you will be able to see your newly created resource with a starter app already hosted there. When you first arrive at the page you likely see that your application is just starting but it should be up and running soon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ItdeKqnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5x3wgedl1zulqf6uscp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ItdeKqnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5x3wgedl1zulqf6uscp2.png" alt="CF-App-Dashboard-Starting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the starter app has finished starting, the starting text and icon should be replaced by a green check and the word "Running":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hl_vJ9Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpzemqzgqupkrwsvitx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hl_vJ9Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpzemqzgqupkrwsvitx7.png" alt="CF-App-Dashboard-Running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to explore our newly created resource page to check out the different information about our application. The Overview page is a great place to look to check the health of our application and if we would like to manually scale our application memory size and number of instances:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KgayLNFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1himt18lm2cohjrff06r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgayLNFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1himt18lm2cohjrff06r.png" alt="CF-App-Dashboard-Overview"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-our-react-app-to-be-deployed-to-the-cloud"&gt;
  &lt;/a&gt;
  Setting up our React App to Be Deployed to the Cloud
&lt;/h1&gt;

&lt;p&gt;Now that we have our resource created, it is time to deploy our Dad Jokes App code into the cloud. In order to do that we will need to do one quick thing to ensure that our local machine can communicate directly with our IBM Cloud account. We will need to download the &lt;a href="https://www.ibm.com/cloud/cli"&gt;IBM Cloud CLI&lt;/a&gt;. This will allow us to run commands that will allow us to interact and modify our IBM Cloud account from our local machines terminal as well as  allow us deploy our application. You only need to do this step once and you will always have the tools you need to access IBM cloud from your local machine terminal. Here is the &lt;a href="https://github.com/IBM-Cloud/ibm-cloud-cli-release/releases/"&gt;link to the IBM Cloud installers&lt;/a&gt;. Select the appropriate installer and install the IBM Cloud CLI on your machine. The above link should bring you to a page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--99iOcTVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utqn16xet2vtum6p46vt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--99iOcTVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utqn16xet2vtum6p46vt.png" alt="IBM-Cloud-CLI-Releases"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Depending on when you are viewing this post, there may be a newer addition of the installer. So please only use the above image as reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-ibm-cloud-cli-command-line-interface-for-deploying-our-app"&gt;
  &lt;/a&gt;
  Setting up IBM Cloud CLI (Command Line Interface) for deploying our app
&lt;/h3&gt;

&lt;p&gt;Now that you have installed the CLI, let's do a quick check to ensure that IBM Cloud CLI is correctly installed on our machine. Type this command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see some information populate your terminal window about IBM Cloud and its version and usage. If you do not see this information, please check that you installed the tools correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irU1kjJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp31fdts5hy4hz3znobe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irU1kjJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp31fdts5hy4hz3znobe.png" alt="IBM-Cloud-CLI-Confirm"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have installed the CLI, we are almost ready to deploy our application in the wild.&lt;/p&gt;

&lt;p&gt;With our terminal window open, we are going to type this command to log into our IBM Cloud account via the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be presented with the API endpoint your are connected to and the Region. Type in and enter your email followed by entering your password. NOTE: If you are a SSO user of IBM Cloud you will have to use the command "ibmcloud login --sso" and follow the process presented there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" alt="CLI-IBM-Cloud-Login"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once successfully logged in, your terminal should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" alt="CLI-Authenticated-Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: If you already had the IBM Cloud CLI installed, you may be prompted to update your CLI. Please feel free to update your version if you so desire.&lt;/p&gt;

&lt;p&gt;In some cases, your "Resource group", "CF API endpoint", "Org" and "Space" may already be correctly assigned, but to be sure we are pointing to correct place, we going to quickly assign them with the information we desire. So in our terminal window we are going to insert this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;imbcloud target &lt;span class="nt"&gt;--cf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will target our Cloud Foundry org and space to ensure we are pointing to the correct location to host our app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" alt="CLI-Target-CF"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: In some cases, your Resource group may say "No resource group targeted". In our case, this won't have an impact, but if you have and know your resource group and would like to set that value enter the command &lt;em&gt;ibmcloud target -g resource-group-name&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a sanity check to make sure that we have all the necessary Cloud Foundry CLI tools installed on our system, lets run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud cf &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it asks you to update to latest version, go ahead and update to have the latest working version on your system.&lt;/p&gt;

&lt;p&gt;Now we will briefly check to make sure everything is configured correctly. Type this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud cf apps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will list all apps in out Cloud Foundry organization and space. You should see your recently created "Dad Joke APP-" in the list applications printed out in the terminal. If you do not, please revisit the steps above and ensure your are targeting the Cloud Foundry org and space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fon9ziKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yay2pry0kne9wsqe75yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fon9ziKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yay2pry0kne9wsqe75yr.png" alt="CLI-CF-Apps"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our IBM Cloud environment configured in our terminal, there is only a few steps left. We need to push our application code into the cloud so it will run in our environment and be should at our URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-our-react-app-to-be-deployed"&gt;
  &lt;/a&gt;
  Configuring our React App to be deployed
&lt;/h3&gt;

&lt;p&gt;First, we must navigate into the root directory of our application code that we downloaded from Github. If you are not already in that directory in your terminal, your command should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;your-directory-path&amp;gt;/Dad-Joke-App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we can deploy the application, we need build the React code and make some minor changes to the github code to ensure that our code properly deploys. &lt;/p&gt;

&lt;p&gt;So, now that we are in the folder we are going to run two commands. First will be this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install all needed frameworks we need to run our application locally. In our case, any React related frameworks and our networking package, &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt;, for doing API requests to the &lt;a href="https://icanhazdadjoke.com/"&gt;icanhazdadjokes API&lt;/a&gt; to get our dad jokes.&lt;/p&gt;

&lt;p&gt;Now we will build our react application using the build command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will need to run this command in order to make a production ready build of our React application that can be hosted on our Cloud foundry hosting environment. If your build was successful, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOIRgCL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmplwypb2m048ybzbwz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOIRgCL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmplwypb2m048ybzbwz0.png" alt="React-Run-Build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we've done that, all we will do is navigate to our folder that holds our Dad Joke app and open the file that is called the "manifest.yml" and edit some lines.  In the file you will change two lines: "name" and "- route". You will need to update them from what they are currently to reflect the names that we used when we created our resource. The name is what is displayed in your resource dashboard page in the top left corner and the route is the link that you are sent to when you select the "Visit App URL" link. &lt;/p&gt;

&lt;p&gt;So in my case, those lines will change from this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;name: my-app-name
...
- route: route.server.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;name: Dad Joke App-BSH
...
- route: dad-joke-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what my final manifest.yml file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Dad Joke App-BSH
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: dad-joke-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Ensure that your " - name" field and " - route" field matches the route and names of your created Cloud Foundry application. If they do not, you will accidentally make a new application and/or route(website URL) in our upcoming steps.&lt;/p&gt;

&lt;p&gt;You may have noticed that on "buildpack" line we have "staticfile_buildpack". Since we will be deploying a static webpage using React, this ensures that Cloud foundry prepares the correct environment for us. If you are interested in learning more about why this buildpack was chosen, check out &lt;a href="https://docs.cloudfoundry.org/buildpacks/staticfile/index.html"&gt;this link&lt;/a&gt; for more info on the Static file buildpack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-our-react-app-into-the-cloud"&gt;
  &lt;/a&gt;
  Deploying our React app into the Cloud
&lt;/h1&gt;

&lt;p&gt;Now that we have made those minor changes, we are ready to deploy our application into the cloud.&lt;/p&gt;

&lt;p&gt;In the same terminal we used to log into IBM Cloud, while still in the application directory, enter this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You do not have to specify the application name at the end of the terminal command "ibmcloud cf push" because IBM Cloud CLI uses the manifest.yml file to determine what you are pushing.&lt;/p&gt;

&lt;p&gt;Your code is now being pushed to IBM cloud to be deployed. This may take a few minutes. You can check the status of the push by navigating to the resource dashboard page and selecting Runtime in the left-hand panel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwgNJ6NQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vhlrgy2yisrhimqhhus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwgNJ6NQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vhlrgy2yisrhimqhhus.png" alt="CF-App-Runtime-Button"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the application is up and running you should see the green check and words "Running" showing near the app name in the top left corner as well as information about app running under the "Instances" section of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4r5rngvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87mq03wzzwxvmvpmul2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4r5rngvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87mq03wzzwxvmvpmul2b.png" alt="CF-App-Runtime-Dashboard"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once it is up and running, select the "Visit App URL" to see your Dad Joke App live and in action.&lt;/p&gt;

&lt;p&gt;üî•&lt;strong&gt;And just like that, you deployed a React application into the cloud!&lt;/strong&gt;üî•&lt;/p&gt;

&lt;p&gt;If this is your first time deploying an application into the cloud, this can seem like a lot of steps, but after you do it once our twice, it will feel a lot more natural and you will probably be able to condense some of these steps down to be more efficient. Also, once you really understand the basics using the IBM Cloud CLI, you can create and push your app without ever having to use the IBM Cloud UI. In the future, I may create a follow up blog post showing how easy that really is!üòâ&lt;/p&gt;

&lt;p&gt;Beyond that, I encourage you to experiment and test pushing up different configurations of this application into the cloud to see what works and doesn't. One of the key skills you should aim to acquire when it comes to developing in the cloud is &lt;strong&gt;what things work and do not work&lt;/strong&gt;. There is no better time than now to experiment with the Cloud and learn along the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you have any questions, thoughts or topics you would like to see me cover next, please feel free to leave a comment below&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in learning more about IBM Cloud check out this link: &lt;a href="//ibm.biz/ibm-cloud-homepage"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn how to containerize a ReactJS app using Docker Check out this link: &lt;a href="https://ibm.biz/how-to-containerize-react-app-031821-bradstondev"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven't already, sign-up for your üî•freeüî• IBM Cloud lite account so you can get hands on experience with cloud and all of the services it has to offer. Check out this link to sign-up: &lt;a href="//ibm.biz/IBM-Cloud-Signup"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for checking out this blog post. Have a great one!&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding TypeScript Decorators</title>
      <author>Shakil Ahmed</author>
      <pubDate>Fri, 16 Apr 2021 17:49:53 +0000</pubDate>
      <link>https://dev.to/shakil/understanding-typescript-decorators-54jj</link>
      <guid>https://dev.to/shakil/understanding-typescript-decorators-54jj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvAqw87f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1599256630445-67b5772b1204%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dmax%26fm%3Djpg%26ixid%3DMnwxMTc3M3wwfDF8c2VhcmNofDh8fHdyZW5jaHxlbnwwfHx8fDE2MTg1OTM0MDM%26ixlib%3Drb-1.2.1%26q%3D80%26w%3D2000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvAqw87f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1599256630445-67b5772b1204%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dmax%26fm%3Djpg%26ixid%3DMnwxMTc3M3wwfDF8c2VhcmNofDh8fHdyZW5jaHxlbnwwfHx8fDE2MTg1OTM0MDM%26ixlib%3Drb-1.2.1%26q%3D80%26w%3D2000" alt="Understanding TypeScript Decorators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Decorators are used to modify classes and its members (methods, properties).&lt;br&gt;&lt;br&gt;
The question may be, &lt;strong&gt;why do we need decorators to change those things? Why not directly change in the declarations?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Directly changing is not scalable. If you need the same changes in 100 classes, you have to write it 100 times. Using decorators, you write it once and apply it as many times as you want.&lt;/p&gt;

&lt;p&gt;Decorators give you a central point of change which easier to work with. Frameworks like &lt;code&gt;NestJS&lt;/code&gt;, &lt;code&gt;Angular&lt;/code&gt; use decorators extensively.&lt;/p&gt;

&lt;p&gt;In TypeScript, you can decorate the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;method&lt;/li&gt;
&lt;li&gt;property&lt;/li&gt;
&lt;li&gt;accessor&lt;/li&gt;
&lt;li&gt;parameter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Decorators are a TypeScript feature and are not officially included in JavaScript yet. However, they are likely to be added in the future (Currently in stage 2).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#class-decorator"&gt;
  &lt;/a&gt;
  Class decorator
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The following decorator makes any class more Funky&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeFunky&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;funkIt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Get The Funk Outta My Face&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;makeFunky&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;wheels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pause&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="nx"&gt;drive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;funkIt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// logs: Get The Funk Outta My Face&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Decorators are just functions, &lt;code&gt;makeFunky&lt;/code&gt; is the decorator above. &lt;code&gt;makeFunky&lt;/code&gt; gets the class &lt;code&gt;Car&lt;/code&gt; it's applied to as a parameter. It returns a new class which is just a modified version of the original class.&lt;/p&gt;

&lt;p&gt;Decorators are called when the class is declared‚Äînot when an object is instantiated.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#method-decorator"&gt;
  &lt;/a&gt;
  Method decorator
&lt;/h3&gt;

&lt;p&gt;Decorators applied to a method gets the following parameters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt; : for static methods, &lt;code&gt;target&lt;/code&gt; is the constructor function of the class. For an instance method, &lt;code&gt;target&lt;/code&gt; is the prototype of the class.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;propertyKey&lt;/strong&gt; : The name of the method.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;descriptor&lt;/strong&gt; : The Property Descriptor for the method
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arguments are &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`result is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descript&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Calculator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;log&lt;/span&gt;
    &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/*
[LOG]: "arguments are ",  {
  "0": 10,
  "1": 20
} 
[LOG]: "result is 30" 
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#property-decorator"&gt;
  &lt;/a&gt;
  Property decorator
&lt;/h3&gt;

&lt;p&gt;Similar to method decorator. Gets the same parameters &lt;code&gt;target&lt;/code&gt;, &lt;code&gt;propertyKey&lt;/code&gt;, and &lt;code&gt;descriptor&lt;/code&gt; as the method decorators. Its return value is ignored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new value is &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;newVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newVal&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_val&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;logMutation&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;

&lt;span class="cm"&gt;/*
[LOG]: "new value is 20" 
[LOG]: "new value is 40" 
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accessor-and-parameter-decorators"&gt;
  &lt;/a&gt;
  Accessor and parameter decorators
&lt;/h3&gt;

&lt;p&gt;Accessor decorators are same as method decorators, but they are applied to either the getter or setter method of a single member.&lt;/p&gt;

&lt;p&gt;Parameter decorators are applied on, you got it, parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decorator-factory"&gt;
  &lt;/a&gt;
  Decorator Factory
&lt;/h2&gt;

&lt;p&gt;A common pattern in decorator usage is calling a function that returns a decorator. Here's the previously mentioned method decorator &lt;code&gt;log&lt;/code&gt; , returned by invoking the function logger&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method name: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arguments are &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`result is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Calculator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/*
[LOG]: "method name: add" 
[LOG]: "arguments are ", {
  "0": 10,
  "1": 20
} 
[LOG]: "result is 30" 
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#decorator-in-the-wild"&gt;
  &lt;/a&gt;
  Decorator in the wild
&lt;/h2&gt;

&lt;p&gt;Some use cases of decorators as being utilized by popular libraries/frameworks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NestJS&lt;/strong&gt; uses the class decorator &lt;code&gt;@Controller('pathName')&lt;/code&gt; to define a class as a controller. Decorators associate classes with required metadata and enable Nest to create a routing map (tie requests to the corresponding controllers). It also uses decorators to define modules, injectable instances for its dependency injection system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeORM&lt;/strong&gt; uses decorators to define a class as an entity &lt;code&gt;@Entity()&lt;/code&gt;, tagging properties as columns &lt;code&gt;@Column()&lt;/code&gt;, auto-incremented ID etc.&lt;/li&gt;
&lt;li&gt;The NPM package &lt;strong&gt;class-validator&lt;/strong&gt; is used for validating properties in an object (used in validations such as income data, arguments of a function). It has decorators like &lt;code&gt;@IsInt()&lt;/code&gt; &lt;code&gt;@Min(5)&lt;/code&gt; &lt;code&gt;@Max(25)&lt;/code&gt; to set restrictions on a particular field.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
