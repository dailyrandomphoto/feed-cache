<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simple Analog Clock Using Html, CSS &amp; Javascript</title>
      <author>Foolish Developer</author>
      <pubDate>Thu, 15 Jul 2021 15:30:09 +0000</pubDate>
      <link>https://dev.to/code_mystery/simple-analog-clock-using-html-css-javascript-2c6a</link>
      <guid>https://dev.to/code_mystery/simple-analog-clock-using-html-css-javascript-2c6a</guid>
      <description>&lt;p&gt;In this article I am going to show you how to make an analog clock using HTML CSS and JavaScript code. I have already designed &lt;a href="https://www.foolishdeveloper.com/search/label/clock"&gt;many types of analog clocks&lt;/a&gt;. This watch is made in the shape of a dark neumorphism design. Like a typical analog kite there are three hands to indicate hours minutes and seconds. Here I have used symbols instead of numbers from 1 to 12.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/07/simple-analog-clock-html-css-javascript.html"&gt;watch the live demo&lt;/a&gt; to see how this analog clock works. Since I made it with the help of neumorphism design, I have used the same color in the background of the clock and in the background of the page. First of all I made a box with &lt;code&gt;30 rem width and 30 rem height&lt;/code&gt; on a web page. &lt;code&gt;Border-radius 50%&lt;/code&gt; has been used to round this box. I have used box-shadow here to implement neumorphism design.&lt;/p&gt;

&lt;p&gt;It's very simple and in general I made. Below I show the complete step-by-step how I made it analog clock. First of all you create an HTML and CSS file. Be sure to attach your CSS file to the html file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-the-basic-design-of-the-clock"&gt;
  &lt;/a&gt;
  Step 1: Create the basic design of the clock
&lt;/h3&gt;

&lt;p&gt;I have made the background of this analog clock using the following HTML and CSS code. I created the structure of this clock using the code &lt;code&gt;&amp;lt;div class = "clock"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;. First of all I gave the background color of the page (&lt;code&gt;background: # 282828;&lt;/code&gt;) in the CSS code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clock"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
 &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#282828&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.clock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#282828&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXiO_m_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqqxk7q0gyzvja421ap4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXiO_m_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqqxk7q0gyzvja421ap4.jpg" alt="Create the basic design of the clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-draw-two-colorful-lines-in-the-clock"&gt;
  &lt;/a&gt;
  Step 2: Draw two colorful lines in the clock
&lt;/h3&gt;

&lt;p&gt;I used the following HTML and CSS codes to make the symbol that I used to indicate the time in this watch. First of all I made two lines using the following codes. I put those two lines at a &lt;code&gt;90 degree angle&lt;/code&gt; to each other. I used &lt;code&gt;background: # 282828&lt;/code&gt; to make the lines brighter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"outer-clock-face"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#282828&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="nc"&gt;.marking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1df52f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VZ22EIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4es1mm19z01zdm84s6q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VZ22EIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4es1mm19z01zdm84s6q.jpg" alt="Draw two colorful lines in the clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-make-four-more-lines"&gt;
  &lt;/a&gt;
  Step 3: Make four more lines
&lt;/h3&gt;

&lt;p&gt;I have made four more lines in this clock using the following HTML and CSS code. Using CSS code, I have angled those lines as needed. I have used white color, you can use any other color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"marking marking-one"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"marking marking-two"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"marking marking-three"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"marking marking-four"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="nc"&gt;.marking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bdbdcb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="nc"&gt;.marking.marking-one&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="nc"&gt;.marking.marking-two&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="nc"&gt;.marking.marking-three&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-clock-face&lt;/span&gt; &lt;span class="nc"&gt;.marking.marking-four&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;150deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;150deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;150deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3-IBq69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnrofck204zr0mi4qh1e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3-IBq69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnrofck204zr0mi4qh1e.jpg" alt="Make four more lines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-draw-a-circle-in-the-middle-of-the-analog-clock"&gt;
  &lt;/a&gt;
  Step 4: Draw a circle in the middle of the analog clock
&lt;/h3&gt;

&lt;p&gt;I made a circle in the middle of this clock. This circle is at the junction of pre-drawn lines. The resulting lines have become symbols.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inner-clock-face"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inner-clock-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#282828&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.inner-clock-face&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4d4b63&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6FlVdZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lwlujn4dpd7h7s40jju.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6FlVdZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lwlujn4dpd7h7s40jju.jpg" alt="Draw a circle in the middle of the analog clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-make-three-hands-in-the-clock"&gt;
  &lt;/a&gt;
  Step 5: Make three hands in the clock
&lt;/h3&gt;

&lt;p&gt;Like a normal analog clock, I have used three hands to indicate hours, minutes and seconds. I created and designed those hands using the HTML and CSS code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hand hour-hand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hand min-hand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hand second-hand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#61afff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hand.hour-hand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hand.min-hand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hand.second-hand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ee791a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzYbIUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8fgzjxewpdmb3f3t8dg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzYbIUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8fgzjxewpdmb3f3t8dg.jpg" alt="Make three hands in the clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-activate-the-analog-clock-with-javascript-code"&gt;
  &lt;/a&gt;
  Step 6: Activate the analog clock with JavaScript code
&lt;/h3&gt;

&lt;p&gt;We have done the work of designing this analog watch. Now we will implement this watch with the help of JavaScript. In this case I did not use any plugin or JavaScript library. I have only executed the hands in this watch using JavaScript. Even if you are a beginner, you can understand this design. Below each code I have given a complete explanation of why I used that code.&lt;/p&gt;

&lt;p&gt;We are going to grab the reference for the following using &lt;code&gt;querySelector()&lt;/code&gt;:&lt;br&gt;
     ➤ .second-hand&lt;br&gt;
     ➤.min-hand&lt;br&gt;
     ➤.hour-hand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondHand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.second-hand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minsHand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.min-hand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hourHand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hour-hand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;➤ &lt;code&gt;new Date()&lt;/code&gt; creates an instance of the Date class from which we can get all kinds of things like current date, hours, minutes, seconds, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondsDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;secondHand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondsDegrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;➤ I have stored in &lt;code&gt;'secondsDegrees'&lt;/code&gt; how the second hand will rotate.&lt;br&gt;
 ➤ Then I use &lt;code&gt;rotate(${secondsDegrees}deg)&lt;/code&gt; to rotate the hand.&lt;br&gt;
 ➤ I divided by 60 becose 1 minute is equal to 60 seconds.&lt;br&gt;
 ➤ I multiplied by 360 because a circle is formed by 360 degrees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minsDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;minsHand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;minsDegrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;➤ I have stored in &lt;code&gt;'minsDegrees'&lt;/code&gt; how to turn the hand of the minute.&lt;br&gt;
 ➤ Then use&lt;code&gt;rotate(${minsDegrees}deg)&lt;/code&gt; to rotate the hand.&lt;br&gt;
 ➤ I divided by 60 because 1 hour is equal to 60 minutes.&lt;br&gt;
 ➤ Added second hand position with minutes. Becase the minute's hand is in the right place depending on the second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hourDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hourHand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hourDegrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;➤ We need to call this &lt;code&gt;rotate()&lt;/code&gt; function every 1 second (&lt;code&gt;1000 milliseconds&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwogMxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anwr9ff5iakor16a3zis.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwogMxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anwr9ff5iakor16a3zis.jpg" alt="Activate the analog clock with JavaScript code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-javascript-code"&gt;
  &lt;/a&gt;
  Final Javascript code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondHand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.second-hand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minsHand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.min-hand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hourHand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hour-hand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondsDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;secondHand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondsDegrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minsDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;minsHand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;minsDegrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hourDegrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hourHand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hourDegrees&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully from this tutorial you have learned &lt;a href="https://www.foolishdeveloper.com/2021/07/simple-analog-clock-html-css-javascript.html"&gt;how to make this analog clock&lt;/a&gt;. If you have any questions you can ask me by commenting. Of course you can let me know if I did something wrong.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Github Copilot: Should you be concerned?</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 15 Jul 2021 15:00:58 +0000</pubDate>
      <link>https://dev.to/codesphere/github-copilot-should-you-be-concerned-19kd</link>
      <guid>https://dev.to/codesphere/github-copilot-should-you-be-concerned-19kd</guid>
      <description>&lt;p&gt;Unless you've been living under a rock for the past couple of weeks, you've heard of Github Copilot, Github's AI code suggester powered by OpenAI. Even without being officially released, Copilot has sparked intense debate, concern, and excitement from all corners of the dev world.&lt;/p&gt;

&lt;p&gt;It's worth noting, however, that this isn't even the first AI Code suggester(See Tabnine or Kite), but is probably just the most novel one. Nevertheless, many younger developers have expressed anxiety over whether their jobs are at risk of being automated out by Copilot and whether the type of coding that they're practicing will soon be obsolete.&lt;/p&gt;

&lt;p&gt;So should you be concerned? Short Answer - No. Long Answer - Still no, but maybe be a little conscious about Copilot.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#this-is-far-from-autopilot"&gt;
  &lt;/a&gt;
  This is Far From Autopilot
&lt;/h3&gt;

&lt;p&gt;The most important aspect to realize about Copilot is that it's called Copilot, not Autopilot. On the Copilot homepage, Github admits that "the code it suggests may not always work, or even make sense".&lt;/p&gt;

&lt;p&gt;Copilot is a developer tool, not a developer. Just as using ReactJS is useless if you don't know HTML and CSS, using Copilot is useless if you don't actually know how to code. You're going to need to review and verify every line that Copilot spits out regardless, so the most it can do is save you time, not replace you.&lt;/p&gt;

&lt;p&gt;More importantly, the mark of a good developer isn't the ability to write a Python function or a CSS declaration themselves. Let's be honest here, no matter how long you've been programming you're probably still checking Stackoverflow to remind yourself how to perform these kinds of functions. The only way Copilot is going to change your job, therefore, is just speed up the process of writing these repetitive functions.&lt;/p&gt;

&lt;p&gt;The true mark of a good developer is connecting pieces to build coherent software. As long as you know how to build, your job isn't going anywhere. The only thing that Copilot really makes obsolete is a problem set for a Computer Science course.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bad-data-means-bad-suggestions"&gt;
  &lt;/a&gt;
  Bad Data means Bad Suggestions
&lt;/h3&gt;

&lt;p&gt;So our jobs are safe… why is there more to this article? Well, as I said earlier, there are some things about Copilot that we should be a bit worried about.&lt;/p&gt;

&lt;p&gt;Copilot is trained off of all public Github repositories. While this a great source of data in terms of its size, there are also tremendous opportunities for this data to be flawed. When it comes to machine learning, flawed data can produce incredibly flawed results (see Microsoft's Tay for a reminder).&lt;br&gt;
A significant amount of public repositories are inevitably going to include code that is inefficient, vulnerable, and generally has bad practices baked into it. If you're going to use Copilot, you need to be conscious about this. You should hold any code generated by AI assistants under a close microscope to make sure that you're not weakening the software that you build.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#licensing-issues"&gt;
  &lt;/a&gt;
  Licensing Issues
&lt;/h3&gt;

&lt;p&gt;Another concern that many have expressed about Copilot is that it is training off of public repositories regardless of the license of said repositories.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;oh my gods. they literally have no shame about this.&lt;br&gt;&lt;br&gt;GitHub Support just straight up confirmed in an email that yes, they used all public GitHub code, for Codex/Copilot regardless of license. &lt;a href="https://t.co/pFTqbvnTEK"&gt;pic.twitter.com/pFTqbvnTEK&lt;/a&gt;&lt;/p&gt;— ✨ Nora Tindall, automated relay 🪐 (@NoraDotCodes) &lt;a href="https://twitter.com/NoraDotCodes/status/1412741339771461635?ref_src=twsrc%5Etfw"&gt;July 7, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;While Github says "We found that about 0.1% of the time, the suggestion may contain some snippets that are verbatim from the training set", this doesn't necessarily absolve you from plagiarizing code.&lt;/p&gt;

&lt;p&gt;Even if Github is providing a snippet based on a number of data sets, that snippet could still be derivative of a codebase that is copyrighted, opening you up to liability.&lt;br&gt;
So moral of the story: Unless Github starts checking the licenses of its training data, be cognizant of the code you take from it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-danger-of%C2%A0crutches"&gt;
  &lt;/a&gt;
  The Danger of Crutches
&lt;/h3&gt;

&lt;p&gt;There's a tendency for many parts of the developer community to be critical of new tools and frameworks that make our jobs easier. Whether they're arguing that C is too abstracted from Assembly or that you should only be using Vanilla JS, there is a common sentiment to be wary of crutches.&lt;/p&gt;

&lt;p&gt;While you certainly shouldn't avoid everything that makes development easier, there is a level of merit to this concern. As stated earlier, using Copilot without a strong knowledge of programming can be incredibly dangerous. You need to be able to understand, verify, and optimize anything that Copilot gives you, or else AI code suggestions are going to do you more harm than good.&lt;/p&gt;

&lt;p&gt;In addition, if you're an aspiring developer, the rise of AI coding assistants does not mean that you can skip out on your algorithms class. Even if you're not going to be writing the code yourself you need to be able to know how that code fits into the larger software that you're building.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-development-is%C2%A0evolving"&gt;
  &lt;/a&gt;
  How Development is Evolving
&lt;/h3&gt;

&lt;p&gt;Regardless of whether Github's Copilot lives up to the hype, there is no question that the way we code is evolving. While previous innovations in the development industry have focused more on languages and frameworks, we're entering an age where our very work processes are changing.&lt;/p&gt;

&lt;p&gt;Your code editor is no longer just some program to edit the contents of a file. It's a tool to remove the mechanical and repetitive parts of software development.&lt;/p&gt;

&lt;p&gt;When dev tools like Copilot and Codesphere succeed at accomplishing this, development can become a more creative endeavor. For Copilot, that's done by saving you the time of writing cookie-cutter functions. For Codesphere, that's done by saving you the time of managing and configuring your infrastructure.&lt;/p&gt;

&lt;p&gt;So is your job as a developer safe? Yes. But your job as a developer isn't going to be what it is today. Development is becoming less like working on an assembly line and more like working in a music studio every day - And I for one am excited about that.&lt;/p&gt;




&lt;p&gt;Disagree with our take? Comment down below what you think about Copilot!&lt;/p&gt;

&lt;p&gt;Happy Coding from your good friends at &lt;a href="https://link.codesphere.com/BH"&gt;Codesphere&lt;/a&gt;, the next-generation provider&lt;/p&gt;

</description>
      <category>ai</category>
      <category>github</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Bing Video Scraping</title>
      <author>Rosalex A.</author>
      <pubDate>Thu, 15 Jul 2021 14:54:19 +0000</pubDate>
      <link>https://dev.to/silanoa/bing-video-scraping-55hp</link>
      <guid>https://dev.to/silanoa/bing-video-scraping-55hp</guid>
      <description>&lt;p&gt;Hello everyone i'm new to python programming and trying to write python code to scrap bing videos. Someone can help me?&lt;/p&gt;

</description>
      <category>python</category>
      <category>webscraping</category>
    </item>
    <item>
      <title>Bootstrap 5 Toasts</title>
      <author>MD Bootstrap</author>
      <pubDate>Thu, 15 Jul 2021 14:49:47 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/bootstrap-5-toasts-1eb8</link>
      <guid>https://dev.to/mdbootstrap/bootstrap-5-toasts-1eb8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-bootstrap-toasts"&gt;
  &lt;/a&gt;
  What are Bootstrap Toasts?
&lt;/h2&gt;

&lt;p&gt;Bootstrap Toast component is a non-disruptive message in the corner of the interface. It provides quick "at-a-glance" feedback on the outcome of an action.&lt;/p&gt;

&lt;p&gt;Push notifications to your visitors with a 'toast', a lightweight and easily customizable alert message. Toasts are designed to mimic the push notifications that have been popularized by mobile and desktop operating systems.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#manual-installation-zip-package"&gt;
  &lt;/a&gt;
  Manual installation (zip package)
&lt;/h4&gt;

&lt;p&gt;To take advantage of  our Bootstrap images component and use them in your project, you first need to install the &lt;a href="https://mdbootstrap.com/docs/standard/getting-started/installation/#section-manual-installation"&gt;MDB 5 Free package&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#mdb-cli"&gt;
  &lt;/a&gt;
  MDB CLI
&lt;/h4&gt;

&lt;p&gt;Watch our &lt;a href="https://mdbootstrap.com/docs/standard/getting-started/quick-start/"&gt;&lt;strong&gt;Quick Start Tutorial&lt;/strong&gt;&lt;/a&gt; to discover and use the full potential of MDB 5 and MDB CLI&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  NPM
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h6&gt;

&lt;p&gt;Before starting the project make sure to install &lt;a href="https://nodejs.org/en/"&gt;Node LTS (12.x.x recommended)&lt;/a&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h6&gt;

&lt;p&gt;To install MDB UI KIT in your project easily type the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm i mdb-ui-kit 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-js-modules"&gt;
  &lt;/a&gt;
  Importing JS modules
&lt;/h6&gt;

&lt;p&gt;You can import the entire library or just individual modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;import * as mdb from 'mdb-ui-kit';&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;// lib
&lt;span class="gp"&gt;import { Input } from 'mdb-ui-kit';&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;// module 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-css-file"&gt;
  &lt;/a&gt;
  Importing CSS file
&lt;/h6&gt;

&lt;p&gt;To import MDB stylesheet please use the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;@import '~mdb-ui-kit/css/mdb.min.css';&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-scss-modules"&gt;
  &lt;/a&gt;
  Importing SCSS modules
&lt;/h6&gt;

&lt;p&gt;You can also import individual SCSS modules. To do it properly, we recommend to copy them from the node_modules/mdb-ui-kit/src/scss location directly to your project and import in the same way as CSS files.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#webpack-integration"&gt;
  &lt;/a&gt;
  Webpack integration
&lt;/h6&gt;

&lt;p&gt;You can significantly speed up the process of creating a new project based on Webpack using our &lt;a href="https://github.com/mdbootstrap/mdb-webpack-starter"&gt;Starter&lt;/a&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#cdn"&gt;
  &lt;/a&gt;
  CDN
&lt;/h4&gt;

&lt;p&gt;Installation via CDN is one of the easiest methods of integrating MDB UI KIT with your project. Just copy the latest compiled JS script tag and CSS link tag from &lt;a href="https://cdnjs.com/libraries/mdb-ui-kit"&gt;cdnjs&lt;/a&gt; to the application.&lt;/p&gt;

&lt;p&gt;Don't forget to add also Font Awesome and Roboto font if you need. Here's an example code:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;Font&lt;/span&gt; &lt;span class="nt"&gt;Awesome&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;Google&lt;/span&gt; &lt;span class="nt"&gt;Fonts&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;MDB&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.3.0/mdb.min.css"&lt;/span&gt;
  &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;MDB&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.3.0/mdb.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic example
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Trigger buttons --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-primary-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Primary&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-secondary"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-secondary-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Secondary
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-success"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-success-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Success&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-danger"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-danger-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Danger&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-warning"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-warning-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Warning&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-info-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Info&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-light"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-light-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Light&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-dark-trigger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Toasts --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-primary-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Primary Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-secondary-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"secondary"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Secondary Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-success-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Success Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-danger-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"danger"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Danger Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-warning-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"warning"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Warning Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-info-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"info"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Info Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-light-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"light"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Light Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"basic-dark-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-delay=&lt;/span&gt;&lt;span class="s"&gt;"2000"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-append-to-body=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-stacking=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-width=&lt;/span&gt;&lt;span class="s"&gt;"350px"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-color=&lt;/span&gt;&lt;span class="s"&gt;"dark"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close btn-close-white"&lt;/span&gt; &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark Basic Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toasts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-primary-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-secondary-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-success-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-danger-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-warning-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-info-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-light-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-dark-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triggers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-primary-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-secondary-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-success-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-danger-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-warning-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-info-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-light-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;basic-dark-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;basicInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toasts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;basicInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h5&gt;
  &lt;a href="#static-example"&gt;
  &lt;/a&gt;
  Static example
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast show fade mx-auto"&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"static-example"&lt;/span&gt;
  &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"assertive"&lt;/span&gt;
  &lt;span class="na"&gt;aria-atomic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-mdb-autohide=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;strong&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MDBootstrap&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;11 mins ago&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-close"&lt;/span&gt;
      &lt;span class="na"&gt;data-mdb-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"toast"&lt;/span&gt;
      &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toast-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Static Example&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;staticInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;static-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;staticInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-can-see-more-customization-examples-on-the-toasts-documentation-page"&gt;
  &lt;/a&gt;
  You can see more customization examples on the &lt;a href="https://mdbootstrap.com/docs/standard/components/toasts/"&gt;📄 Toasts documentation page&lt;/a&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#crucial-resources"&gt;
  &lt;/a&gt;
  Crucial Resources
&lt;/h2&gt;

&lt;p&gt;Here are the resources that we have prepared to help you work with this component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read &lt;a href="https://mdbootstrap.com/docs/standard/components/toasts/"&gt;📄 Toasts documentation page&lt;/a&gt; &amp;lt;-- start here&lt;/li&gt;
&lt;li&gt;In to get the most out of your project, you should also get acquainted with other Components options related to Toasts. See the section below to find the list of them.&lt;/li&gt;
&lt;li&gt;You can use predesigned Components in &lt;a href="https://mdbootstrap.com/freebies/"&gt;📥 Starter Bootstrap 5 templates&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Templates are a part of &lt;a href="https://mdbootstrap.com/docs/standard/"&gt;📦 Free UI Kit for Bootstrap 5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;After finishing the project you can publish it with CLI in order to receive &lt;a href="https://mdbootstrap.com/docs/standard/cli/"&gt;💽 Free hosting (beta)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#related-content-and-styles-options-amp-features"&gt;
  &lt;/a&gt;
  Related Content and Styles options &amp;amp; features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/accordion/"&gt;Accordion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/alerts/"&gt;Alerts &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/buttons/"&gt;Buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/badges/"&gt;Badges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/cards/"&gt;Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/button-group/"&gt;Button Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/carousel/"&gt;Carousel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/chips/"&gt;Chips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/collapse/"&gt;Collapse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/dropdowns/"&gt;Dropdowns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/lightbox/"&gt;Lightbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/modal/"&gt;Modal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/list-group/"&gt;List Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/popconfirm/"&gt;Popconfirm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/popovers/"&gt;Popovers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/progress/"&gt;Progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/rating/"&gt;Rating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/spinners/"&gt;Spinners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/stepper/"&gt;Stepper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mdbootstrap.com/docs/standard/components/tooltips/"&gt;Tooltips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#learn-bootstrap-5-in-15h"&gt;
  &lt;/a&gt;
  Learn Bootstrap 5 in 1.5H
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c9B4TPnak1A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional resources
&lt;/h2&gt;

&lt;p&gt;Learn web development with our &lt;strong&gt;learning roadmap&lt;/strong&gt;:&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/docs/standard/getting-started/"&gt;🎓 Start Learning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our mailing list &amp;amp; receive &lt;strong&gt;exclusive resources&lt;/strong&gt; for developers&lt;br&gt;
&lt;strong&gt;&lt;a href="https://mdbootstrap.com/newsletter/"&gt;🎁 Get gifts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join our private FB group for &lt;strong&gt;inspiration &amp;amp; community experience&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.facebook.com/groups/682245759188413"&gt;👨‍👩‍👧‍👦 Ask to join&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support creation of open-source packages&lt;/strong&gt; with a STAR on GitHub&lt;br&gt;
&lt;a href="https://github.com/mdbootstrap/mdb-ui-kit/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKY5TtAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/mdbootstrap/mdb-ui-kit%3Flabel%3DStar%2520now%26style%3Dsocial" alt="GitHub Stars"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>The Road to Ember 4.0</title>
      <author>Ember.js</author>
      <pubDate>Thu, 15 Jul 2021 14:39:17 +0000</pubDate>
      <link>https://dev.to/emberjs/the-road-to-ember-4-0-7f1</link>
      <guid>https://dev.to/emberjs/the-road-to-ember-4-0-7f1</guid>
      <description>&lt;p&gt;Contributors to the Ember project have been hard at work since &lt;a href="https://blog.emberjs.com/octane-is-here/"&gt;Ember Octane&lt;/a&gt; was released in December 2019.&lt;/p&gt;

&lt;p&gt;Over the duration of a challenging (and sometimes devastating) year and a half, we've shipped a powerful new feature (&lt;a href="https://api.emberjs.com/ember/3.26/modules/@glimmer%2Fcomponent#passing-multiple-blocks"&gt;Named Blocks&lt;/a&gt;) and supported an ecosystem shifting to Octane conventions. We've more closely aligned Ember with wider frontend conventions through improved publishing &amp;amp; build tooling (&lt;a href="https://github.com/embroider-build/embroider"&gt;Embroider&lt;/a&gt;) and better support for TypeScript (both through &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt; and reducing reliance on type-unsafe framework features).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcing-ember-40"&gt;
  &lt;/a&gt;
  Announcing Ember 4.0
&lt;/h2&gt;

&lt;p&gt;In his &lt;a href="https://www.youtube.com/watch?v=pJPUQQQ9QDg"&gt;EmberConf 2021 keynote&lt;/a&gt;, Yehuda shared a name for Ember's next edition: &lt;strong&gt;Polaris&lt;/strong&gt;. In order to unblock Polaris providing the best, most productive experience the Ember project can build, we're going to remove already-deprecated APIs in a 4.0 release.&lt;/p&gt;

&lt;p&gt;Ember 3.27, which has already been released, was the final version of Ember to include new deprecations targeting Ember 4.0.&lt;/p&gt;

&lt;p&gt;Ember 3.28, which has been released as a beta, will be released as stable around August 9th. It will not introduce additional deprecations targeting Ember 4.0. Six weeks after its stable release, around September 20th, Ember 3.28 will become a &lt;a href="https://emberjs.com/releases/lts/"&gt;Long-Term Support&lt;/a&gt; release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember 4.0 will be released around September 20th.&lt;/strong&gt; Ember 4.0 itself is not an LTS candidate.&lt;/p&gt;

&lt;p&gt;Ember 4.4 will be the first LTS candidate of the 4.x series. It will be released as stable around February 2022 and as an LTS around March 2022.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-a-40"&gt;
  &lt;/a&gt;
  Whats in a 4.0?
&lt;/h2&gt;

&lt;p&gt;Since the release of Ember 2.0, major versions of Ember have been about removal of deprecated API, and not about the introduction of new features or development styles. &lt;strong&gt;Ember 4.0 follows that tradition, and will contain no new features.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Additionally, Ember 4.0 does not remove the &lt;code&gt;EmberComponent&lt;/code&gt; API or the core parts of the &lt;code&gt;EmberObject&lt;/code&gt; system. These APIs are widely used, even after the release of Octane, by existing application and addon code.&lt;/p&gt;

&lt;p&gt;Ember 4.0 will remove &lt;a href="https://deprecations.emberjs.com/v3.x"&gt;all APIs deprecated in Ember 3.x&lt;/a&gt; and targeting Ember 4.0. These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Ember.Logger&lt;/code&gt; is removed in favor of native &lt;code&gt;console&lt;/code&gt; APIs. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-console-deprecate-logger"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Copyable&lt;/code&gt; mixin is removed in favor of the &lt;a href="https://github.com/emberjs/ember-copy"&gt;ember-copy addon&lt;/a&gt;. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-runtime-deprecate-copy-copyable"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sendAction&lt;/code&gt; is removed in favor of calling closure actions like any other callback. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-component-send-action"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;willTransition&lt;/code&gt; and &lt;code&gt;didTransition&lt;/code&gt; are removed in favor of router service events. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_deprecate-router-events"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Computed Property &lt;code&gt;volatile()&lt;/code&gt; calls are removed in favor of native getters. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_computed-property-volatile"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this.$()&lt;/code&gt; and other jQuery APIs are deprecated in favor of native browser equivalents. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_jquery-apis"&gt;Guide here&lt;/a&gt;. An optional feature which restored this and other jQuery-specific features is also removed. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_optional-feature-jquery-integration"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{{partial}}&lt;/code&gt; is removed in favor of template-only components. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-partial"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Using the built-in global resolver (&lt;code&gt;App.FooController&lt;/code&gt; anyone?) is deprecated in favor of using &lt;a href="https://github.com/ember-cli/ember-resolver"&gt;ember-resolver&lt;/a&gt;, already the default for Ember CLI generated apps. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-deprecate-globals-resolver"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ambiguous references to a component's properties are removed. You must now write &lt;code&gt;{{this.someProp}}&lt;/code&gt;. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_this-property-fallback"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;renderTemplate&lt;/code&gt; is removed in favor of &lt;code&gt;{{in-element}}&lt;/code&gt; or other rendering target redirection like &lt;a href="https://github.com/yapplabs/ember-wormhole"&gt;ember-wormhole&lt;/a&gt;. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_route-render-template"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for the &lt;code&gt;Ember&lt;/code&gt; global on &lt;code&gt;window&lt;/code&gt; is removed in favor of importing the &lt;code&gt;Ember&lt;/code&gt; object or using the module-based API. &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-global"&gt;Guide here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Support for specific features of the &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Input&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Textarea&amp;gt;&lt;/code&gt; components are removed. See guides on &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-glimmer-link-to-positional-arguments"&gt;positional arguments&lt;/a&gt;, &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-built-in-components-legacy-arguments"&gt;legacy arguments&lt;/a&gt;, &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-built-in-components-legacy-attribute-arguments"&gt;legacy HTML attributes&lt;/a&gt;, and &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_ember-built-in-components-import"&gt;importing legacy built-in components&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Finally, &lt;strong&gt;Ember classic is deprecated in favor of Ember Octane&lt;/strong&gt;. Although
many APIs from Ember classic (like &lt;code&gt;EmberComponent&lt;/code&gt;) continue to be available,
the optional features and application configuration which define Ember Octane
must be enabled in 4.0. See &lt;a href="https://deprecations.emberjs.com/v3.x#toc_editions-classic"&gt;the deprecation guide
entry&lt;/a&gt; and
&lt;a href="https://guides.emberjs.com/v3.27.0/upgrading/current-edition/"&gt;upgrading to Ember
Octane&lt;/a&gt; guide for
more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above APIs, listed as an example of what will be removed but not defining the complete list, show that API removals in 4.x largely consist of APIs that date back to Ember 1.x, and are rarely used now (or should be rarely used).&lt;/p&gt;

&lt;p&gt;An additional important change is the completion of Ember 3.x's browser support policy. Ember 4.0 will support two classes of browsers: Evergreen (those on a weeks-long, auto-upgrade release cycle) and non-evergreen. This classification system allows us to create a rolling minimum version for evergreen browsers, while using a more traditional, pinned minimum version for non-evergreen browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specifically, the Ember 4.x release policy includes support for Google Chrome, Mozilla Firefox, Microsoft Edge, and Apple Safari on desktop and mobile. It does not include support for any version of Internet Explorer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read more about this change in &lt;a href="https://deprecations.emberjs.com/v3.x/#toc_3-0-browser-support-policy"&gt;the deprecation guide&lt;/a&gt; and at &lt;a href="https://emberjs.com/browser-support/"&gt;Ember's browser support policy page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Existing Ember users should note that Ember 3.27 has already removed IE11 from the default target list for production and testing builds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-your-upgrade-to-40"&gt;
  &lt;/a&gt;
  Planning your upgrade to 4.0
&lt;/h2&gt;

&lt;p&gt;For each API removed in Ember 4.0, you can find an entry in the &lt;a href="https://deprecations.emberjs.com/v3.x/"&gt;Ember 3.x deprecation guide&lt;/a&gt;. As many of the removed APIs have not been included in best practices or common documentation for the entire 3.x cycle, applications started on 3.x are expected to have a fairly smooth upgrade path.&lt;/p&gt;

&lt;p&gt;Consider using the &lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt; addon as part of your upgrade process. The addon allows you to create a configuration file to silence most deprecations. This means you can focus on one or a few warnings at a time. Additionally, you can configure the addon to throw an error when a deprecation that was previously addressed is re-introduced. If you work with a large codebase and many contributors, this helps you prevent backsliding in your upgrade process.&lt;/p&gt;

&lt;p&gt;In contrast to prior major releases, we have no plans to offer an &lt;code&gt;ember-3-legacy&lt;/code&gt; package that makes Ember 3.x APIs available for a limited time in Ember 4.0. This is based on fairly low use of these packages in the past.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't panic.&lt;/strong&gt; We expect many Ember users to enthusiastically adopt our 4.0 release. If you prefer a conservative upgrade path, we suggest using Ember's Long-Term Support releases. Ember 3.28, the last version of the 3.x cycle, will become an LTS in September 2021. The first 4.x release to be promoted to LTS will be Ember 4.4 around March 2022. This timeline provides a long window for your business to address any remaining 4.0-targeted deprecations (while using 3.28-LTS) before 4.4-LTS is promoted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributing-to-ember-40"&gt;
  &lt;/a&gt;
  Contributing to Ember 4.0
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://github.com/emberjs/ember.js"&gt;Ember.js&lt;/a&gt;, &lt;a href="https://github.com/emberjs/data"&gt;Ember Data&lt;/a&gt;, and &lt;a href="https://github.com/ember-cli/ember-cli"&gt;Ember CLI&lt;/a&gt; repos, the final beta cycle of 3.x has already started. The &lt;code&gt;master&lt;/code&gt; branch is ready for code changes targeting 4.0. You are welcome to contribute to these repos by removing already deprecated functionality and IE11 compatibility code.&lt;/p&gt;

&lt;p&gt;The core framework effort to prepare for 4.0 is tracked at &lt;a href="https://github.com/emberjs/ember.js/issues/19545"&gt;emberjs/ember.js#19545&lt;/a&gt;, and a list of deprecated APIs we need help to remove is tracked at &lt;a href="https://github.com/emberjs/ember.js/issues/19617"&gt;emberjs/ember.js#19617&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.com/invite/emberjs"&gt;Discord&lt;/a&gt; in the &lt;code&gt;#dev-ember-js&lt;/code&gt;, &lt;code&gt;#dev-ember-data&lt;/code&gt;, &lt;code&gt;#dev-ember-cli&lt;/code&gt;, or &lt;code&gt;#dev-ember-learning&lt;/code&gt; channels to find out how you can contribute.&lt;/p&gt;

&lt;p&gt;In less than six weeks, we expect the first betas for 4.0 to be released. Please help test the betas on your applications and addons so that we can catch any regressions.&lt;/p&gt;

&lt;p&gt;We're looking forward to working with the community on Ember 4.0 and on the opportunities beyond it. As always we appreciate your support, your trust, and our common partnership.&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>news</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Job Searches and Career Changes When You're Not the "Default"</title>
      <author>Nicole Aldurien</author>
      <pubDate>Thu, 15 Jul 2021 14:29:46 +0000</pubDate>
      <link>https://dev.to/nicolealdurien/job-searches-and-career-changes-when-you-re-not-the-default-4c4p</link>
      <guid>https://dev.to/nicolealdurien/job-searches-and-career-changes-when-you-re-not-the-default-4c4p</guid>
      <description>&lt;p&gt;There's been a lot of focus in recent years on improving diversity in the workplace, especially in tech. I am totally behind this goal. My bootcamp cohort was 78% BIPOC and 22% women, and the engineering team at my internship is majority-women, both of which I take as encouraging signs, but I know the field as a whole is rather different. &lt;/p&gt;

&lt;p&gt;What I've found problematic are some of the ways the industry has tried to work toward this goal, and the advice we give people looking to get into tech when they don't fit the expected image of a developer. For the most part, the industry's approach appears to boil down to the following:&lt;/p&gt;

&lt;p&gt;"Women and people of color approach the workplace differently than white dudes, so we need to...&lt;br&gt;
1) seem to remove hurdles that block candidates in disproportionate demographic ways (emphasis on seem there)&lt;br&gt;
2) encourage them to study the way white dudes approach the job search and the workplace, and to mimic those behaviors"&lt;/p&gt;

&lt;p&gt;This isn't a new problem; it's been going on for decades. The earliest study of "imposter syndrome" was done in the late '70s. It essentially pathologized the "I don't belong here" pressure felt by high-achieving women working in fields that constantly subtly told them "you don't belong here". This article points out much more eloquently than I could that imposter syndrome is a reaction to the way workplaces are structured; it's not a problem with the perception of the person experiencing it. But in recent years, this concept has been massively diluted, as self-doubt in any high performer gets labeled "imposter syndrome", and articles abound on how to fight it. In the chaos, the question of how we can build workspaces that help more people thrive and do their best work gets lost.&lt;/p&gt;

&lt;p&gt;As part of my tech bootcamp, we received an avalanche of career advice, for which I'm immensely grateful. But some of that advice did reflect today's common wisdom about job seeking, falling into that "think more like white dudes" approach. However well-meaning they may be, people giving this advice never stop to think that perhaps the differences in the way folks of color and women approach the job hunt are due to the very real differences in their lived experiences in this area.&lt;/p&gt;

&lt;p&gt;We get told, "if a job description lists qualifications you don't have, don't let it stop you from applying. White guys tend to apply if they only meet 60% of the qualifications on a job description. And even if they don't consider you for that job, you'll be on their radar the next time an opening comes up that you are qualified for." Some companies have gone so far as to reword their job descriptions, listing their desired qualifications as "nice to haves" or adding a disclaimer saying "even if you don't meet all of these qualifications, apply anyway - our approach considers everything a candidate has to offer". This is that "seeming to remove hurdles" bit.&lt;/p&gt;

&lt;p&gt;But here's the thing. White guys who apply for jobs while only meeting 60% of the qualifications do so because they know, consciously or not, that simply being a white dude is the other 40%. In their lived experience, the return they get for putting in for those jobs, in terms of getting interviews, eventual offers, or just further leads, is worthwhile. For everyone else, experience tells them that if they want to stand a chance of being contacted at all, they need to meet 90+% of the qualifications. Otherwise, they're just wasting their time.&lt;/p&gt;

&lt;p&gt;So those reworded job descriptions, as inclusive as they may seem, and as much as they may feel like a step forward...they're actually insidious, because they encourage people to apply for positions they have no shot at getting. I have applied for jobs with descriptions that are worded to have zero mention of a specific amount of experience required, and with a list of technologies that 100% matches those I've used. Yet more than once, after taking the time to craft a cover letter and apply, literally as soon as my application was reviewed by a human, I got a rejection email stating "Thanks, but we're looking for someone with more experience." No phone screen, no tech screen, just, "Oh, you're just starting out? Yep, we're gonna pass." If they'd worded the job description to list minimum years of experience, I wouldn't have wasted my time.&lt;/p&gt;

&lt;p&gt;Even for jobs that are truly intended to be entry-level, barriers exist that can alter the collective diversity of your eventual hires. I applied for positions labeled "junior" and "new grad" that didn't list a minimum level of experience or a CS/CE/etc degree requirement, but the first thing they did is send me a tech screen with algorithms ranked at the hardest difficulty on LeetCode. One was even specifically listed as being for "experienced developers".&lt;/p&gt;

&lt;p&gt;This may seem like an innocuous, meritocratic way to screen candidates, but what it's actually doing is screening for candidates who either have a CS degree or have specifically dedicated a huge chunk of time to understanding and practicing algorithms. The former obviously tilts the candidate pool in a less-diverse direction.&lt;/p&gt;

&lt;p&gt;And in terms of determining who has the skills to do the job, algorithm challenges aren't great. Building this skillset can help broaden your understanding of data structures and how to write clean code, but being bad at it doesn't mean you're bad at building things. I know programmers with over a decade of experience in the field - including principal-level engineers - who can build anything you want and build it well, but couldn't begin to tell you how to implement a bubble sort. And why should they? It's О(n2)! Actually putting it to use in the real world would make no sense.&lt;/p&gt;

&lt;p&gt;Conversely, being good at algorithm challenges doesn't necessarily mean you're good at building things. I'll admit that my bootcamp instructor may be somewhat of a biased source. But when we were only six weeks in, just after finishing our first front-end project, he claimed that we had created something more complicated at that point than he had in the entirety of his time in college earning his CS degree.&lt;/p&gt;

&lt;p&gt;Finally, negotiation is another area in which we hear "common wisdom" about the way people with different backgrounds have different approaches, and how we should all just strive to act like white guys. And again, this ignores people's lived experiences. Salary disparities get blamed on differences in a willingness to negotiate. But every time in my life when I've tried to negotiate, I've been shut down hard. &lt;/p&gt;

&lt;p&gt;I've had a potential employer offer me less than I was earning in my current position &lt;em&gt;despite knowing exactly what I made&lt;/em&gt;. It was a required question on their application. They were unwilling to budge when I asked if they could work with me, because the 8% increase I was looking for over their offer was "more than some people make who've been working here for a year". &lt;/p&gt;

&lt;p&gt;For a different job years later, the recruiter extended an offer that once again undercut my current salary, quite drastically this time. Then after I explained the situation, she implied that I must be lying about how much I made and requested a copy of my paystub before they would negotiate further. &lt;/p&gt;

&lt;p&gt;I walked away from both of these job offers.&lt;/p&gt;

&lt;p&gt;All of this is not to say you shouldn't try to negotiate. But I think it's fair to say that some people have more success with it than others, and that boiling down salary disparities to variation in candidates' willingness to negotiate is ridiculous.&lt;/p&gt;

&lt;p&gt;So what's the takeaway? Recruiters and hiring managers:&lt;/p&gt;

&lt;p&gt;1) If you have hard requirements for a position, don't leave them out of the job description.&lt;/p&gt;

&lt;p&gt;2) If you're truly looking to increase diversity, maybe increase your willingness to take a chance on bootcamp grads and other folks without a CS degree for a junior spot. Or if you insist on a degree, consider targeting HBCUs/Sarah Lawrence/Seven Sisters schools for job fairs and intern pipelines.&lt;/p&gt;

&lt;p&gt;3) If you're willing to look beyond a degree, maybe decrease your reliance on algorithm challenges as part of your screening. Consider instead conducting tech screenings by having candidates perform a code review, or complete a project where they build you a small application. If you're truly screening for ability to do the job, and not for a 'did you major in CS?' shibboleth, a code review or project will serve just as well or better.&lt;/p&gt;

&lt;p&gt;4) Negotiate with respect. If your offer is firm, it's better to simply say that than to give some patronizing excuse. Consider as well whether or not you truly approach negotiation in the same manner with every candidate.&lt;/p&gt;

&lt;p&gt;Everyone else: Don't take it personally if negotiating an offer or applying for jobs that are a bit of stretch doesn't work as well for you as you've heard it should. And good luck out there!&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>hiring</category>
      <category>career</category>
      <category>negotiation</category>
    </item>
    <item>
      <title>Angular + Azure Static Web Apps</title>
      <author>Lucas Silvério</author>
      <pubDate>Thu, 15 Jul 2021 14:28:12 +0000</pubDate>
      <link>https://dev.to/silverio27/angular-azure-static-web-apps-2kda</link>
      <guid>https://dev.to/silverio27/angular-azure-static-web-apps-2kda</guid>
      <description>&lt;p&gt;Oi Pessoal!&lt;/p&gt;

&lt;p&gt;Nesse post vou mostrar como implantar um aplicativo angular no Azure Static Web Apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#voc%C3%AA-precisa-ter-instalado-em-sua-m%C3%A1quina"&gt;
  &lt;/a&gt;
  Você precisa ter instalado em sua máquina:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/pt-br/p/windows-terminal/9n0dx20hk701"&gt;Windows Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/download/"&gt;NodeJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angular.io/cli"&gt;Angular - CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/pt-br/cli/azure/install-azure-cli-windows?tabs=azure-cli"&gt;Azure - CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cli.github.com/"&gt;GitHub - CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e também uma assinatura no &lt;a href="https://portal.azure.com/"&gt;Azure&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Você pode criar uma conta no azure e consumir os créditos para teste, mas nesse artigo os recursos que irei consumir são gratuítos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#coaltime"&gt;
  &lt;/a&gt;
  Coaltime
&lt;/h2&gt;

&lt;p&gt;O &lt;a href="https://dev.to/silverio27/implantar-um-aplicativo-angular-no-azure-pela-cli-4gl9"&gt;Coaltime&lt;/a&gt;, aplicação fictícia que apresentei em outros artigos, além de precisar de mais agilidade de implantação devido a contínuas mudanças no código, precisa de baixo custo de hospedagem pois estamos em uma fase embrionária, após analisarmos os custos de uma máquina windows e linux, vimos que para escalar ou ter distribuição global, seria uma melhor solução o Azure Static Web Apps , saiba mais sobre esse recurso &lt;a href="https://azure.microsoft.com/pt-br/services/app-service/static/#documentation"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Faça download do Coaltime (não clone)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/silverio27"&gt;
        silverio27
      &lt;/a&gt; / &lt;a href="https://github.com/silverio27/Coaltime"&gt;
        Coaltime
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Utilize o windows terminal e navegue até a pasta do projeto.&lt;br&gt;
&lt;strong&gt;Execute todos os comandos na pasta do projeto&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Esse projeto utiliza a versão Angular CLI: 12.0.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#azure-cli-e-github-cli"&gt;
  &lt;/a&gt;
  Azure CLI e GitHub CLI
&lt;/h2&gt;

&lt;p&gt;Esse artigo prioriza a utilização da CLI para fins didáticos, a operação descrita a seguir possui uma experiência muito mais intuitiva utilizando o portal do &lt;a href=""&gt;azure&lt;/a&gt; e do &lt;a href="https://github.com/"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Abaixo você encontra os links com a lista completa de comandos para ambos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cli.github.com/manual/"&gt;GitHub CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h2&gt;

&lt;p&gt;Vamos definir algumas variáveis no terminal, para facilitar a escrita dos demais comandos&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;substitua o &lt;strong&gt;&amp;lt;nome exclusivo do app&amp;gt;&lt;/strong&gt; por por exemplo:&lt;br&gt;
&lt;strong&gt;coaltimelsv1990&lt;/strong&gt;, na qual a primeira parte é o nome do app, e a segunda parte são as iniciais do meu nome seguido do ano em que nasci, (Lucas Silvério Vargas, 1990 - lsv1990).&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$group="StaticCoalTime"
$app="&amp;lt;nome exlusivo do app&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Faça login no GitHub pelo terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gh auth login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Os comandos abaixo vão iniciar o repositório local e remoto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
gh repo create $app
git branch -M main
git add .
git commit -m "first commit"
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;essa operação pode levar alguns minutos para ser concluída&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Salve a url do seu repositório em uma variável, vamos utilizar mais a frente na implantação:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$url=(gh repo view &amp;lt;account&amp;gt;/$app --json "url" --jq ".url")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;no meu caso o comando vai ficar assim&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$url=(gh repo view silverio27/$app --json "url" --jq ".url")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#azure"&gt;
  &lt;/a&gt;
  Azure
&lt;/h2&gt;

&lt;p&gt;Faça login na sua conta do azure e defina uma conta padrão para esse tutorial, assim você garante que a operação será feita no tenant correto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az login
az account set --subscription &amp;lt;subscriptionid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Os comandos a seguir criarão um grupo de recursose o aplicativo web estático e irá implantar nosso código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az group create -n $group -l eastus2
az staticwebapp create -n $app -g $group -s $url -l eastus2 -b main --login-with-github --output-location "./dist/app" --app-location "/" --api-location "api"
az staticwebapp show -n staticoaltime --query "{url:defaultHostname}" -o tsv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;O parâmetro --login-with-github irá solicitar o login ao github para que o azure crie um segredo, e o arquivo yml de implantação. O terminal vai pedir que você acesse o portal e informe um código de autenticação. Por padrão o recurso é criado na camada gratuita.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKfu3ovU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1of34m4zmmnmvh6rfixw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKfu3ovU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1of34m4zmmnmvh6rfixw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dyDmSs8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnbxeeeuvotmxtltxhll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dyDmSs8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnbxeeeuvotmxtltxhll.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;essa operação pode levar alguns minutos para ser concluída&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Acompanhe a implantação no portal do github.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_21g2po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo3k63bl9pzpqlf5r514.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_21g2po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo3k63bl9pzpqlf5r514.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto! Agora toda vez que você comitar alterações na main, ele será implantado automaticamente.&lt;/p&gt;

&lt;p&gt;Obtenha a url do app para acessar o portal do app implantado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az staticwebapp show -n $app --query "{url:defaultHostname}" -o tsv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5awVk8rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amlbmdxa5fjwuov164dv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5awVk8rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amlbmdxa5fjwuov164dv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No terminal execute o comando para puxar as alterações feita no repositório, e você verá o arquivo yml que o azure criou.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
cd .\.github\workflows\
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SK_56o2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc303vuv20zfcsf69vs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SK_56o2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fc303vuv20zfcsf69vs7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero que isso te ajude!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>github</category>
      <category>angular</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Swift além do iOS e do macOS - Parte 1</title>
      <author>Rafael Leandro</author>
      <pubDate>Thu, 15 Jul 2021 14:26:41 +0000</pubDate>
      <link>https://dev.to/raafas/swift-alem-do-ios-e-do-macos-parte-1-596m</link>
      <guid>https://dev.to/raafas/swift-alem-do-ios-e-do-macos-parte-1-596m</guid>
      <description>&lt;p&gt;Eu trabalho com desenvolvimento iOS e não costumo fazer nada no backend, o que é um problema em projetos pessoais. Não quis investir tempo estudando JS e seus frameworks (não tenho nem espaço pro cache do npm) e comecei a procurar uma solução mais prática, foi aí que encontrei o Vapor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instala%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Instalação
&lt;/h2&gt;

&lt;p&gt;🍎 A instalação do Vapor é feita através do &lt;a href="https://brew.sh"&gt;homebrew&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;vapor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para ter certeza que a instalação foi feita corretamente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vapor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E essa deve ser a saída:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Usage: vapor &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

Vapor Toolbox &lt;span class="o"&gt;(&lt;/span&gt;Server-side Swift web framework&lt;span class="o"&gt;)&lt;/span&gt;

Commands:
       build Builds an app &lt;span class="k"&gt;in &lt;/span&gt;the console.
       clean Cleans temporary files.
      heroku Commands &lt;span class="k"&gt;for &lt;/span&gt;working with Heroku
         new Generates a new app.
         run Runs an app from the console.
             Equivalent to &lt;span class="sb"&gt;`&lt;/span&gt;swift run &lt;span class="nt"&gt;--enable-test-discovery&lt;/span&gt; Run&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
  supervisor Commands &lt;span class="k"&gt;for &lt;/span&gt;working with Supervisord
       xcode Opens an app &lt;span class="k"&gt;in &lt;/span&gt;Xcode.

Use &lt;span class="sb"&gt;`&lt;/span&gt;vapor &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--help&lt;/span&gt;,-h]&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more information on a command.
Error: Missing &lt;span class="nb"&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🐧 No Linux é necessário que o Swift 5.2 (ou superior) esteja instalado.&lt;br&gt;
A instalação é feita compilando o toolchain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/vapor/toolbox.git
&lt;span class="nb"&gt;cd &lt;/span&gt;toolbox
git checkout &amp;lt;versao&amp;gt;
make &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-vapor"&gt;
  &lt;/a&gt;
  Hello, Vapor.
&lt;/h2&gt;

&lt;p&gt;Criando um novo projeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vapor new first-project &lt;span class="nt"&gt;-n&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;first-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A flag &lt;code&gt;-n&lt;/code&gt; responde não automaticamente para todas as perguntas feitas depois de clonar o template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFWKRJBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ncz20gy8q41qk10z6se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFWKRJBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ncz20gy8q41qk10z6se.png" alt="Captura de Tela 2021-07-15 às 11.13.32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rodando o primeiro projeto:&lt;br&gt;
🍎 no macOS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vapor xcode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🐧 no Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;swift run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se tudo ocorrer bem, a saída no console deve ser essa:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ INFO ] Server starting on http://127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pra testar, basta abrir o endereço no navegador.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIseR2O6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1brwxm8u05dlgkfkchp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIseR2O6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1brwxm8u05dlgkfkchp.png" alt="Captura de Tela 2021-07-15 às 11.23.05"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>backend</category>
      <category>vapor</category>
      <category>linux</category>
    </item>
    <item>
      <title>5 coisas que deixaram meu estágio mais produtivo</title>
      <author>Lys</author>
      <pubDate>Thu, 15 Jul 2021 14:23:18 +0000</pubDate>
      <link>https://dev.to/lys/5-coisas-que-deixaram-meu-estagio-mais-produtivo-5ehf</link>
      <guid>https://dev.to/lys/5-coisas-que-deixaram-meu-estagio-mais-produtivo-5ehf</guid>
      <description>&lt;p&gt;Estar em um estágio é sempre um mix de emoções. Estou no meu terceiro e posso dizer que foram experiências muito diferentes, mas a síndrome do impostor, a insegurança e o medo de não dar conta sempre estiveram presentes em todos, então nesse artigo eu quero mostrar um pouco das coisas que me ajudaram e continuam me ajudando a lidar com essa jornada.&lt;/p&gt;

&lt;p&gt;Baseado no meu primeiro artigo, &lt;a href="https://dev.tocomo-consegui-meu-primeiro-estagio-e-dicas-para-lhe-ajudar-a-conseguir-o-seu-5e7o"&gt;com dicas para te ajudar a conseguir um estágio&lt;/a&gt;, fiz esse aqui para ajudar as pessoas que, como eu, já estão estagiando e querem aproveitar ao máximo essa fase que pode ser maravilhosa e, ao mesmo tempo, angustiante.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-programa%C3%A7%C3%A3o-pareada"&gt;
  &lt;/a&gt;
  1 - Programação pareada
&lt;/h3&gt;

&lt;p&gt;Há quem ame, há quem odeie, mas com certeza a programação pareada está sendo muito boa pra mim nesse estágio em que estou atualmente. Nunca havia tido essa experiência, mas parear com alguém que tem mais experiência que você e poder aprender os conceitos enquanto prática está sendo enriquecedor. &lt;/p&gt;

&lt;p&gt;Além de tudo, como estamos trabalhando remotamente, a programação pareada dá uma sensação de suporte maior e, para um começo de carreira, o apoio, estar mais presente para entender a dificuldade da pessoa, pode ser um grande aliado para fazer você evoluir melhor e mais rápido.&lt;/p&gt;

&lt;p&gt;Se você não trabalha com programação, substitua essa parte por fazer tarefas da sua área com o apoio de alguém que trabalha com você, compartilhando ideias e conhecimentos durante o processo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNrqdIkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0khl0drar8vu082f4h1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNrqdIkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0khl0drar8vu082f4h1.jpeg" alt="Imagem mostrando um exemplo de como funciona a programação pareada, um piloto e o co-piloto dando ideias sobre como seguir o caminho"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-estudar-um-pouco-por-dia-e-ap%C3%B3s-os-estudos-comentar-sobre-o-que-estudou"&gt;
  &lt;/a&gt;
  2 - Estudar um pouco por dia e após os estudos comentar sobre o que estudou
&lt;/h3&gt;

&lt;p&gt;Sabemos que estudar vai ser sempre essencial, independentemente da área, mas uma coisa que anda me ajudando muito é pegar uma hora por dia do estágio para estudar. O que você irá aprender depende muito de onde você quer chegar, é legal falar com o seu líder ou com quem te acompanha sobre um possível guia de estudos para te ajudar, eu, por exemplo, como faço os cursos da Alura, tento manter a frequência de fazer de um a dois capítulos do curso por dia. &lt;/p&gt;

&lt;p&gt;Se você não puder pegar um horário do estágio, estude um horário antes, ou depois, o legal de ter horários pré definidos é para deixar sua rotina organizada e ser mais difícil de "sabotar" os estudos,  já que você deixou o horário fixo na sua agenda.&lt;/p&gt;

&lt;p&gt;No dia seguinte, eu comento um pouco com meu líder sobre o que estudei, isso é bem legal, porque nós podemos comentar sobre o que foi trabalhado, consigo tirar algumas dúvidas e ele pode até me mostrar algo que aprendi que é usado no nosso dia a dia no trabalho. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACfMVGvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csp4nbblolt2mxhiqn4z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACfMVGvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csp4nbblolt2mxhiqn4z.jpeg" alt="Computador e em volta mostrando o logo de algumas línguas de programação, como: python, javascript, c++, swift etc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-conversar-com-meu-l%C3%ADder-sobre-quem-eu-quero-ser-quando-crescer"&gt;
  &lt;/a&gt;
  3 - Conversar com meu líder sobre "quem eu quero ser quando crescer"
&lt;/h3&gt;

&lt;p&gt;Uma vez por mês eu tenho uma conversa (chamamos de 1:1) com meu líder sobre meus planos futuros. Pra mim, alinhar suas expectativas com a do lugar que você está trabalhando é essencial, te dá mais motivação sobre quem você quer ser e aonde você quer chegar. Eu sei que são coisas muito complicadas de se saber no início, e tá tudo bem mudar de ideia depois, mas se você já tiver uma ideia, ter conversas sobre isso podem te ajudar muito a se organizar melhor profissionalmente e alcançar seus objetivos com mais facilidade.&lt;/p&gt;

&lt;p&gt;Seu(a) líder, também sabendo dos seus objetivos, pode adaptar melhor uma rotina de trabalho, te ajudando a alcançar suas metas no futuro. Eu, por exemplo, quero ser uma colaboradora do blog da Alura no futuro e, como ajuda, meu líder revisa as coisas que eu escrevo para ajudar a me preparar quando isso for acontecer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDqziE5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cmt1mseupsndjkmo0gh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDqziE5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cmt1mseupsndjkmo0gh.jpeg" alt="Duas mulheres fazendo um one-a-one conversando sobre carreira, objetivos etc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-a-vida-n%C3%A3o-%C3%A9-s%C3%B3-trabalho-descanse"&gt;
  &lt;/a&gt;
  4 - A vida não é só trabalho, descanse
&lt;/h3&gt;

&lt;p&gt;No meu primeiro estágio eu me descuidei muito nisso e não recomendo: descansar é essencial para que possamos ter um dia de trabalho melhor e mais produtivo. Eu sei que a síndrome do impostor ataca e a gente parece estar sempre atrasado e que se não estudarmos o tempo todo não vamos evoluir, mas isso não é verdade. Se só ocuparmos nossa mente com trabalho e estudos o tempo todo, a longo prazo isso não vai ser saudável (&lt;a href="https://www.jornalcontabil.com.br/sindrome-de-burnout-e-o-esgotamento-no-trabalho/"&gt;leia sobre burnout&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Tenha hobbies que te façam bem: cozinhar, tocar algum instrumento, assistir séries/filmes, fazer exercícios físicos ou o que você quiser, mas sempre lembre da sua saúde mental e, se possível, faça terapia: acompanhamento psicológico é sempre bom, principalmente em começo de carreira, em que estamos nos descobrindo e sempre ansiosos com o que vem pela frente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6nWLk7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgds8rokb07wqlf0oza9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6nWLk7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgds8rokb07wqlf0oza9.png" alt="Desenho de uma mulher sentada e dormindo em uma mesa com vários objetos de estudos como livros etc, estava cansada de tanto estudar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-ter-contato-com-outros-estagi%C3%A1rios"&gt;
  &lt;/a&gt;
  5 - Ter contato com outros estagiários
&lt;/h3&gt;

&lt;p&gt;Sei que às vezes no início somos muito tímidos, conversar com outras pessoas é um desafio e tanto, mas ter essa experiência me ajudou muito por todos os lugares que passei.&lt;/p&gt;

&lt;p&gt;Já passei por duas situações diferentes: em uma, eu trabalhava com outros estagiários de tecnologia e às vezes pegávamos tarefas juntos, em outra, eu era a única estagiária de tecnologia do meu time. Se a sua situação se parecer com a primeira, troque experiências, conhecimentos com seus colegas, discuta sobre suas tarefas, ter alguém na mesma posição que você pode ser muito confortante e te motivar a crescer junto com a pessoa que você trabalha. Se a sua situação se parecer com a segunda, veja se tem algum grupo de estagiários onde você trabalha. Em um lugar que trabalhei tínhamos um grupo no slack só de estagiários, às vezes tinha algum happy hour online para podermos conversar, e essa proximidade com as pessoas do seu trabalho pode ser um grande motivador, já que estar em um ambiente colaborativo e acolhedor faz o trabalho ficar mais leve e produtivo (&lt;a href="https://www.qulture.rocks/blog/ambiente-de-trabalho-e-produtividade/"&gt;leia um pouco sobre "Ambiente de trabalho e produtividade"&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSjvp1lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpycw2leelqpj49eeve1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSjvp1lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpycw2leelqpj49eeve1.jpeg" alt='Desenho de quatro pessoas estagiarias em cima de livros, duas estão em uma posição mais alta (com mais livros em baixo delas) e estão tentando puxar as duas outras pessoas para chegar na "altura" delas, ou seja, estão querendo que os outros evoluam como eles'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dito isso, não se cobre para evoluir extremamente rápido no seu estágio, vá no seu tempo, dê o seu melhor que a evolução vem aos poucos, aproveite essa fase e vai dar tudo certo! &lt;/p&gt;

&lt;p&gt;Obrigada por ler até aqui, qualquer dúvida que tiver, pode me chamar em alguma das minhas redes sociais! &amp;lt;3&lt;/p&gt;

</description>
      <category>estagio</category>
      <category>trabalho</category>
      <category>dicas</category>
    </item>
    <item>
      <title>Why you should use Array.some instead of 'for' loop or forEach?</title>
      <author>Yuvaraj</author>
      <pubDate>Thu, 15 Jul 2021 14:02:46 +0000</pubDate>
      <link>https://dev.to/yuvgeek/why-you-should-use-array-some-instead-of-for-loop-or-foreach-37g8</link>
      <guid>https://dev.to/yuvgeek/why-you-should-use-array-some-instead-of-for-loop-or-foreach-37g8</guid>
      <description>&lt;p&gt;In this article, we are going to learn why we should use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"&gt;Array.some&lt;/a&gt; instead of  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"&gt;Array.forEach&lt;/a&gt;  (or) for loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objective"&gt;
  &lt;/a&gt;
  Objective
&lt;/h2&gt;

&lt;p&gt;In a given array, find if the student failed in any one of the subjects. The pass criteria for students is to score at least 40 marks in all the subjects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;English&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Science&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Social&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#traditional-approach"&gt;
  &lt;/a&gt;
  Traditional approach
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Solution 1&lt;/strong&gt;: Using Array.forEach&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checking subject =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// failed&lt;/span&gt;
    &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is student failed =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;English&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Maths&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Science&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Social&lt;/span&gt;

&lt;span class="nx"&gt;Is&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The student is failed because he doesn't meet the pass criteria in the &lt;strong&gt;Science&lt;/strong&gt; subject. &lt;/p&gt;

&lt;p&gt;But, if you look at the output, it is unnecessary to check the &lt;strong&gt;Social&lt;/strong&gt; subject because he failed in &lt;strong&gt;Science&lt;/strong&gt; subject and the position of Science subject is before Social. So, in order to stop further checking, we can update the existing code as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// added this condition to prevent further checking&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isFailed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checking subject =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// failed&lt;/span&gt;
      &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is student failed =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;English&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Maths&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Science&lt;/span&gt;

&lt;span class="nx"&gt;Is&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks like we have solved the issue but it's not. Even though we wrapped our logic inside &lt;strong&gt;if&lt;/strong&gt;&lt;br&gt;
block, the iteration still happens. Try checking it by adding &lt;strong&gt;else&lt;/strong&gt; block. &lt;/p&gt;

&lt;p&gt;Imagine if we have 1000 elements in an Array and if the condition to fail is at &lt;strong&gt;10th&lt;/strong&gt; position, then the remaining &lt;strong&gt;990&lt;/strong&gt; iteration still runs which is not needed. It takes both time &amp;amp; computation. 🤯&lt;/p&gt;

&lt;p&gt;So, this is the Wrong solution to this problem. ❌&lt;/p&gt;

&lt;p&gt;Let's move on to the second traditional approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution 2&lt;/strong&gt;: Using for() loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checking subject =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// failed&lt;/span&gt;
    &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// prevents further execution&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is student failed =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This solution is better than the previous approach. The reason is, when the fail condition is met, further iteration is stopped with &lt;code&gt;break&lt;/code&gt; keyword. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The break statement is used to jump out of a loop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem with this approach is, this is not the right way to solve this problem. Like how we use the &lt;strong&gt;for&lt;/strong&gt; loop &amp;amp; &lt;strong&gt;Array.forEach&lt;/strong&gt; to iterate the Array, there is an inbuilt Array method to solve this problem. &lt;/p&gt;

&lt;p&gt;So, this is also not a correct solution. ❌&lt;/p&gt;

&lt;p&gt;Let's see in the next section!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#correct-approach"&gt;
  &lt;/a&gt;
  Correct Approach
&lt;/h2&gt;

&lt;p&gt;The correct approach to solve this problem is to use, &lt;code&gt;Array.prototype.some()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"&gt;MDN&lt;/a&gt; ,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what we wanted. If at least one element passes the condition, it should return &lt;strong&gt;true&lt;/strong&gt; otherwise it should return as &lt;strong&gt;false&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Here is the solution to our problem,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is student failed =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works as expected. The solution is in a single line. 🤯&lt;/p&gt;

&lt;p&gt;But, how do we know, if further execution is stopped once the condition is met?&lt;/p&gt;

&lt;p&gt;Let's check it out by updating the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checking subject =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is student failed =&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;isFailed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;English&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Maths&lt;/span&gt;
&lt;span class="nx"&gt;checking&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Science&lt;/span&gt;

&lt;span class="nx"&gt;Is&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code works as expected. &lt;/p&gt;

&lt;p&gt;So, this is the correct solution to solve our problem. ✅&lt;/p&gt;

&lt;p&gt;Now, the Code is much &lt;strong&gt;readable&lt;/strong&gt;, &lt;strong&gt;simpler&lt;/strong&gt; &amp;amp; &lt;strong&gt;efficient&lt;/strong&gt; than the other approaches. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed this article or found it helpful. &lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://twitter.com/yuvgeek"&gt;Twitter&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/yuvgeek"&gt;Github&lt;/a&gt; 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support 🙌
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/yuvgeek"&gt;Buy me a coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>AWS Well-Architected Framework | AWS Whitepaper Summary</title>
      <author>Ahmed Samir</author>
      <pubDate>Thu, 15 Jul 2021 13:43:01 +0000</pubDate>
      <link>https://dev.to/aseldesouky/aws-well-architected-framework-aws-whitepaper-summary-335b</link>
      <guid>https://dev.to/aseldesouky/aws-well-architected-framework-aws-whitepaper-summary-335b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39PiRUTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://volansys.com/wp-content/uploads/2019/03/VOLANSYS-Pillars-of-AWS-Well-Architected-update-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39PiRUTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://volansys.com/wp-content/uploads/2019/03/VOLANSYS-Pillars-of-AWS-Well-Architected-update-1.png" alt="AWS Well-Architected Framework"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi folks , Today I will go through with one of the most important whitepapers in AWS&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/framework/wellarchitected-framework.pdf"&gt;Original One&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS Well-Architected Framework helps you understand the pros and cons of decisions you make while building systems on AWS. By using the Framework, you will learn architectural best practices for designing and operating reliable, secure, efficient, and cost-effective systems in the cloud. It provides a way for you to consistently measure your architectures against best practices and identify areas for improvement.&lt;/p&gt;

&lt;p&gt;AWS also provides a service for reviewing your workloads at no charge. &lt;a href="https://aws.amazon.com/well-architected-tool/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cards.sort-order=desc"&gt;The AWS Well-Architected Tool (AWS WA Tool)&lt;/a&gt; is a service in the cloud that provides a consistent process for you to review and measure your architecture using the AWS Well-Architected Framework. The AWS WA Tool provides&lt;br&gt;
recommendations for making your workloads more reliable, secure, efficient, and cost-effective&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-five-pillars-of-the-framework"&gt;
  &lt;/a&gt;
  The Five Pillars of the Framework
&lt;/h1&gt;

&lt;p&gt;The AWS Well-Architected Framework is based on five pillars — &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Operational excellence&lt;/strong&gt;
The ability to support development and run workloads effectively, gain insight into their operations, and to continuously improve supporting processes and procedures to deliver business value&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt;
The security pillar describes how to take advantage of cloud technologies to protect data, systems, and assets in a way that can improve your security posture.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt;
The reliability pillar encompasses the ability of a workload to perform its intended function correctly and consistently when it’s expected to. This includes the ability to operate and test the workload through its total lifecycle.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance efficiency&lt;/strong&gt;
The ability to use computing resources efficiently to meet system requirements, and to maintain that efficiency as demand changes and technologies evolve.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost optimization&lt;/strong&gt;
The ability to run systems to deliver business value at the lowest price point&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#general-design-principles"&gt;
  &lt;/a&gt;
  General Design Principles
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#-stop-guessing-your-capacity-needs"&gt;
  &lt;/a&gt;
  * Stop guessing your capacity needs:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-test-systems-at-production-scale"&gt;
  &lt;/a&gt;
  * Test systems at production scale:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-automate-to-make-architectural-experimentation-easier"&gt;
  &lt;/a&gt;
  * Automate to make architectural experimentation easier
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-allow-for-evolutionary-architectures"&gt;
  &lt;/a&gt;
  * Allow for evolutionary architectures
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-drive-architectures-using-data"&gt;
  &lt;/a&gt;
  * Drive architectures using data
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-improve-through-game-days"&gt;
  &lt;/a&gt;
  * Improve through game days
&lt;/h4&gt;

&lt;h1&gt;
  &lt;a href="#1-operational-excellence"&gt;
  &lt;/a&gt;
  (1) Operational Excellence
&lt;/h1&gt;

&lt;p&gt;The Operational Excellence pillar includes the ability to support development and run workloads effectively, gain insight into their operations, and to continuously improve supporting processes and procedures to deliver business value&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h4&gt;

&lt;p&gt;1.Perform operations as code&lt;br&gt;
2.Make frequent, small, reversible changes&lt;br&gt;
3.Refine operations procedures frequently&lt;br&gt;
4.Anticipate failure&lt;br&gt;
5.Learn from all operational failures&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;four&lt;/strong&gt; best practice areas for operational excellence in the cloud:&lt;br&gt;
&lt;strong&gt;1.Organization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your teams need to have a shared understanding of your entire workload and shared business goals to set the priorities that will enable business success.&lt;/li&gt;
&lt;li&gt;Evaluate internal and external customer needs involving key stakeholders, including business, development, and operations teams, to determine where to focus efforts.&lt;/li&gt;
&lt;li&gt;Evaluating customer needs will ensure that you have a thorough understanding of the support that is required to achieve business outcomes.&lt;/li&gt;
&lt;li&gt;Understanding the business value of each component, process, and procedure, of why those resources are in place or activities are performed, and why that ownership exists will inform the actions of your team members.&lt;/li&gt;
&lt;li&gt;Define agreements between teams describing how they work together to support each other and your business outcomes.&lt;/li&gt;
&lt;li&gt;Provide support for your team members so that they can be more effective in taking action and supporting your business outcomes.&lt;/li&gt;
&lt;li&gt;Empower team members to take action when outcomes are at risk to
Provide timely, clear, and actionable communications of known risks and planned events so that team members can take timely&lt;/li&gt;
&lt;li&gt;If there are external regulatory or compliance requirements that apply to your organization, you should use the resources provided by AWS Cloud Compliance to help educate your teams so that they can determine the impact on your priorities.&lt;/li&gt;
&lt;li&gt;You should use the resources provided by AWS Support (AWS Knowledge Center, AWS Discussion Forums, and AWS Support Center) and AWS Documentation to educate your teams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.Prepare&lt;/strong&gt;&lt;br&gt;
When you understand your workloads and their expected behaviors, capture a broad set of information to enable situational awareness (for example, changes in state, user activity, privilege access, utilization counters), knowing that you can use filters to select the most useful information over time.&lt;/p&gt;

&lt;p&gt;These accelerate beneficial changes entering production:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Limit issues deployed&lt;/li&gt;
&lt;li&gt;Enable rapid identification and remediation of issues introduced through deployment&lt;/li&gt;
&lt;li&gt;Adopt approaches that provide fast feedback on quality and enable rapid recovery from changes that do not have desired outcomes.&lt;/li&gt;
&lt;li&gt;Be aware of planned activities in your environments so that you can manage the risk of changes impacting planned activities.&lt;/li&gt;
&lt;li&gt;Understand the benefits and risks to make informed decisions to allow changes to enter production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.Operate&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Successful operation of a workload is measured by the achievement of business and customer outcomes.&lt;/li&gt;
&lt;li&gt;Define expected outcomes, &lt;/li&gt;
&lt;li&gt;Determine how success will be measured&lt;/li&gt;
&lt;li&gt;Identify metrics that will be used in those calculations to determine if your workload and operations are successful.&lt;/li&gt;
&lt;li&gt;Use collected metrics to determine if you are satisfying customer and business needs, and identify areas for improvement. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Efficient and effective management of operational events is required to achieve operational excellence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Evolve&lt;/strong&gt;&lt;br&gt;
You must learn, share, and continuously improve to sustain operational excellence. Include feedback loops within your procedures to rapidly identify areas for improvement and capture learnings from the execution of operations.&lt;/p&gt;

&lt;p&gt;Analyze trends within lessons learned and perform cross-team retrospective analysis of operations metrics to identify opportunities and methods for improvement.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Successful evolution of operations is founded in: frequent small improvements; providing safe environments and time to experiment, develop, and test improvements; and environments in which learning from failures is encouraged. Operations support for sandbox, development, test, and production environments, with increasing level of operational controls, facilitates development and increases the predictability of successful results from changes deployed into production&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#2-security"&gt;
  &lt;/a&gt;
  (2) Security
&lt;/h1&gt;

&lt;p&gt;The Security pillar encompasses the ability to protect data, systems, and assets to take advantage of cloud technologies to improve your security&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h4&gt;

&lt;p&gt;1.Implement a strong identity foundation (least privilege, separation of duties, no long-term static credentials)&lt;br&gt;
2.Enable traceability (Monitor, alert, and audit actions)&lt;br&gt;
3.Apply security at all layers&lt;br&gt;
4.Automate security best practices&lt;br&gt;
5.Protect data in transit and at rest&lt;br&gt;
6.Keep people away from data&lt;br&gt;
7.Prepare for security events&lt;/p&gt;

&lt;p&gt;There are six best practice areas for security in the cloud:&lt;br&gt;
&lt;strong&gt;1.Security&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must apply overarching best practices to every area of security.&lt;/li&gt;
&lt;li&gt;Staying up to date with AWS and industry recommendations and threat intelligence&lt;/li&gt;
&lt;li&gt;Automate security processes, testing, and validation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.Identity and Access Management&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should define principals (that is, accounts, users, roles, and services that can perform actions in your account)&lt;/li&gt;
&lt;li&gt;Build out policies aligned with these principals&lt;/li&gt;
&lt;li&gt;Implement strong credential management&lt;/li&gt;
&lt;li&gt;You should apply granular policies in IAM Service &lt;/li&gt;
&lt;li&gt;Apply strong password practices&lt;/li&gt;
&lt;li&gt;Use temporary credentials&lt;/li&gt;
&lt;li&gt;Credentials must not be shared between any user or system&lt;/li&gt;
&lt;li&gt;Follow least-privilege approach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.Detection&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use detective controls to identify a potential security threat or incident&lt;/li&gt;
&lt;li&gt;Use internal auditing, an examination of controls&lt;/li&gt;
&lt;li&gt;Automate alerting notifications based on defined conditions&lt;/li&gt;
&lt;li&gt;CloudTrail logs, AWS API calls, and CloudWatch provide monitoring of metrics with alarming, and AWS Config provides configuration history&lt;/li&gt;
&lt;li&gt;Use GuardDuty to detect malicious or unauthorized behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4.Infrastructure Protection&lt;/strong&gt;&lt;br&gt;
Any workload that has some form of network connectivity, whether it’s the internet or a private network, requires multiple layers of defense to help protect from external and internal network-based threats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Data Protection&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can encrypt your data and manage keys&lt;/li&gt;
&lt;li&gt;Detailed logging that contains important content, such as file access and changes, is available&lt;/li&gt;
&lt;li&gt;Versioning, which can be part of a larger data lifecycle management process&lt;/li&gt;
&lt;li&gt;AWS never initiates the movement of data between Regions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5.Incident Response&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detailed logging is available that contains important content, such as file access and changes&lt;/li&gt;
&lt;li&gt;Events can be automatically processed and trigger tools that automate responses through the use of
AWS APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure that you have a way to quickly grant access for your security team, and automate the isolation of instances as well as the capturing of data and state for forensics&lt;/p&gt;

&lt;p&gt;The AWS Shared Responsibility Model enables organizations that adopt the cloud to achieve their security and compliance goals. Because AWS physically secures the infrastructure that supports our cloud services, as an AWS customer you can focus on using services to accomplish your goals.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-reliability"&gt;
  &lt;/a&gt;
  (3) Reliability
&lt;/h1&gt;

&lt;p&gt;Is the ability of a workload to perform its intended function correctly and consistently when it’s expected to.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Automatically recover from failure&lt;/li&gt;
&lt;li&gt;Test recovery procedures&lt;/li&gt;
&lt;li&gt;Scale horizontally to increase aggregate workload availability&lt;/li&gt;
&lt;li&gt;Stop guessing capacity&lt;/li&gt;
&lt;li&gt;Manage change in automation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are four best practice areas for reliability in the cloud:&lt;br&gt;
&lt;strong&gt;1.Foundations&lt;/strong&gt;&lt;br&gt;
It’s the responsibility of AWS to satisfy the requirement for sufficient networking and compute capacity service quotas (which are also referred to as service limits). These quotas exist to prevent accidentally provisioning more resources than you need and to limit request rates on API operations so as to protect services from abuse&lt;br&gt;
&lt;strong&gt;2.Workload Architecture&lt;/strong&gt;&lt;br&gt;
AWS SDKs take the complexity out of coding by providing language-specific APIs for AWS services. These SDKs, plus the choice of languages, allow developers to implement the reliability best practices listed here&lt;br&gt;
Your workload must operate reliably despite data loss or latency in these networks&lt;br&gt;
&lt;strong&gt;3.Change Management&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changes like (spikes in demand, feature deployments and security patches) must be anticipated&lt;/li&gt;
&lt;li&gt;You can monitor the behavior of your workload and take action like add additional servers as a workload gains more users&lt;/li&gt;
&lt;li&gt;You can control who has permission to make workload changes and audit the history of these changes&lt;/li&gt;
&lt;li&gt;Controls on change management ensure that you can enforce the rules that deliver the reliability you need.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4.Failure Management&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Workloads must be able to both withstand failures and automatically repair issues&lt;/li&gt;
&lt;li&gt;With AWS , when a particular metric crosses a threshold, you can trigger an automated action to remedy the problem&lt;/li&gt;
&lt;li&gt;You can replace failed resources without wasting time to fix it&lt;/li&gt;
&lt;li&gt;Regularly back up your data and test your backup files&lt;/li&gt;
&lt;li&gt;Actively track KPIs, as well as the recovery time objective (RTO) and recovery point objective (RPO)&lt;/li&gt;
&lt;li&gt;Your recovery processes should be as well exercised as your normal production processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-performance-efficiency"&gt;
  &lt;/a&gt;
  (4) Performance Efficiency
&lt;/h1&gt;

&lt;p&gt;Is the ability to use computing resources efficiently to meet system requirements, and to maintain that efficiency as demand changes and technologies evolve&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Democratize advanced technologies (Rather than asking your IT team to learn about hosting and running a new technology, consider consuming the technology as a service)&lt;/li&gt;
&lt;li&gt;Go global in minutes (Multiple AWS Regions)&lt;/li&gt;
&lt;li&gt;Use serverless architectures&lt;/li&gt;
&lt;li&gt;Experiment more often&lt;/li&gt;
&lt;li&gt;Consider mechanical sympathy i.e.: Understand how cloud services are consumed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are four best practice areas for performance efficiency in the cloud:&lt;br&gt;
&lt;strong&gt;1.Selection&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a data-driven approach to select the patterns and implementation for your architecture and achieve a cost effective solution&lt;/li&gt;
&lt;li&gt;The implementation of your architecture will use the AWS services that are specific to the optimization of your architecture's performance&lt;/li&gt;
&lt;li&gt;Here we will discuss the four main resource types to consider (compute, storage, database, and network).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compute&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have 3 types (Instances, Containers and Functions)&lt;/li&gt;
&lt;li&gt;The optimal compute solution for a workload varies based on application design, usage patterns, and configuration settings&lt;/li&gt;
&lt;li&gt;You can use different compute solutions for various components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud storage is typically more reliable, scalable, and secure&lt;/li&gt;
&lt;li&gt;Storage is available in three forms: object, block, and file&lt;/li&gt;
&lt;li&gt;The optimal storage solution for a system varies based on the kind of access method (block, file, or object), patterns of access (random or sequential), required throughput, frequency of access (online, offline, archival), frequency of update (WORM, dynamic), and availability and durability constraints. Well-architected systems use multiple storage solutions and enable different features to improve performance and use resources efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cloud offers purpose-built database services that address different problems presented by your workload&lt;/li&gt;
&lt;li&gt;You have relational, key-value, document, in-memory, graph, time series, and ledger databases&lt;/li&gt;
&lt;li&gt;You don’t need to worry about database management tasks such as server provisioning, patching, setup, configuration, backups, or recovery&lt;/li&gt;
&lt;li&gt;The optimal database solution for a system varies based on requirements for availability, consistency, partition tolerance, latency, durability, scalability, and query capability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Network&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must determine the workload requirements for bandwidth, latency, jitter, and throughput&lt;/li&gt;
&lt;li&gt;On AWS, networking is virtualized and is available in a number of different types and configurations&lt;/li&gt;
&lt;li&gt;You must consider location when deploying your network. You can choose to place resources close to where they will be used to reduce distance&lt;/li&gt;
&lt;li&gt;By taking advantage of Regions, placement groups, and edge services, you can significantly improve performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.Review&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must ensure that workload components are using the latest technologies and approaches to continually improve performance&lt;/li&gt;
&lt;li&gt;You must continually evaluate and consider changes to your workload components&lt;/li&gt;
&lt;li&gt;Use Machine learning and artificial intelligence (AI) will enable you to innovate across all of your business workloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.Monitoring&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must monitor its performance so that you can remediate any issues before they impact your customers&lt;/li&gt;
&lt;li&gt;Amazon CloudWatch is your hero!&lt;/li&gt;
&lt;li&gt;AWS X-Ray helps developers analyze and debug production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4.Tradeoffs&lt;/strong&gt;&lt;br&gt;
You could trade consistency, durability, and space for time or latency, to deliver higher performance.&lt;br&gt;
As you make changes to the workload, collect and evaluate metrics to determine the impact of those changes. Measure the impacts to the system and to the end-user to understand how your trade-offs impact your workload. Use a systematic approach, such as load testing, to explore whether the tradeoff improves performance.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-cost-optimization"&gt;
  &lt;/a&gt;
  (5) Cost Optimization
&lt;/h1&gt;

&lt;p&gt;Is the ability to run systems to deliver business value at the lowest price point&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Implement Cloud Financial Management&lt;/li&gt;
&lt;li&gt;Adopt a consumption model (Pay only for the computing resources that you require)&lt;/li&gt;
&lt;li&gt;Measure overall efficiency (Business output Vs Cost)&lt;/li&gt;
&lt;li&gt;Stop spending money on undifferentiated heavy lifting (AWS will do!)&lt;/li&gt;
&lt;li&gt;Analyze and attribute expenditure (This helps measure return on investment (ROI))&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are five best practice areas for cost optimization in the cloud:&lt;br&gt;
&lt;strong&gt;1.Practice Cloud Financial Management&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use Cost Explorer, and optionally Amazon Athena and Amazon QuickSight with the Cost and Usage Report (CUR), to provide cost and usage awareness throughout your organization&lt;/li&gt;
&lt;li&gt;AWS Budgets provides proactive notifications for cost and usage&lt;/li&gt;
&lt;li&gt;Implement cost awareness in your organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.Expenditure and usage awareness&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accurate cost attribution allows you to know which products are truly profitable, and allows you to make more informed decisions about where to allocate budget&lt;/li&gt;
&lt;li&gt;You create an account structure with AWS Organizations for cost and usage&lt;/li&gt;
&lt;li&gt;You can also use resource tagging to apply business and organization information to your usage and cost&lt;/li&gt;
&lt;li&gt;Use AWS Cost Explorer for visibility into your cost and usage&lt;/li&gt;
&lt;li&gt;Create customized dashboards and analytics with Amazon Athena and Amazon QuickSight&lt;/li&gt;
&lt;li&gt;Controlling your cost with AWS Budgets&lt;/li&gt;
&lt;li&gt;You can use cost allocation tags to categorize and track your AWS usage and costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3.Cost-effective resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the appropriate instances and resources for your workload is key to cost savings&lt;/li&gt;
&lt;li&gt;Use managed services to reduce costs&lt;/li&gt;
&lt;li&gt;AWS offers a variety of flexible and cost-effective pricing options to acquire instances from Amazon EC2 (On-Demand Instances/ Savings Plans/ Reserved Instances/ Spot Instances)&lt;/li&gt;
&lt;li&gt;Use CloudFront to minimize data transfer, or completely eliminate costs&lt;/li&gt;
&lt;li&gt;Utilizing Amazon Aurora on RDS to remove expensive database licensing costs&lt;/li&gt;
&lt;li&gt;Use AWS Trusted Advisor to regularly review your AWS usage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4.Manage demand and supply resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can supply resources to match the workload demand at the time they’re needed, this eliminates the need for costly and wasteful over Resources provisioning&lt;/li&gt;
&lt;li&gt;Auto Scaling using demand or time-based approaches allow you to add and remove resources as needed&lt;/li&gt;
&lt;li&gt;You can use Amazon API Gateway to implement throttling, or Amazon SQS to implementing a queue in your workload. These will both allow you to modify the demand on your workload components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5.Optimize over time&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementing new features or resource types can optimize your workload incrementally&lt;/li&gt;
&lt;li&gt;You can also replace or add new components to the workload with new services&lt;/li&gt;
&lt;li&gt;You must Regularly review your workload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally , Thanks for your patient to read this summary and I Hope you saw it useful&lt;/p&gt;

&lt;p&gt;Salam!&lt;br&gt;
Ahmed Samir&lt;br&gt;
&lt;a href="https://aws.amazon.com/developer/community/heroes/ahmed-samir/"&gt;AWS HERO&lt;/a&gt;&lt;br&gt;
You can follow me on &lt;a href="https://twitter.com/aseldesouky"&gt;twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/aseldesouky/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>architecture</category>
      <category>aws</category>
    </item>
    <item>
      <title>My 100DaysOfCode in a nutshell 🥜</title>
      <author>Kirill Inoz</author>
      <pubDate>Thu, 15 Jul 2021 13:28:35 +0000</pubDate>
      <link>https://dev.to/inkuantum/my-100daysofcode-in-a-nutshell-17mn</link>
      <guid>https://dev.to/inkuantum/my-100daysofcode-in-a-nutshell-17mn</guid>
      <description>&lt;p&gt;At the end of November 2020, I became more active on Twitter. I started to follow more content creators and just great people who gave me insides and tips about a fairly new domain for me called web development. This was the time when I also found the 100DaysOfCode challenge. Although I saw a lot of great projects people were working on as part of this challenge, I still didn't want to participate in it. The main excuse was lack of time, which was caused by school (so I thought at that time). But with a new lockdown announced at the start of December and a new course by &lt;a href="https://twitter.com/florinpop1705"&gt;Florin Pop&lt;/a&gt; and &lt;a href="https://twitter.com/traversymedia"&gt;Brad Traversy&lt;/a&gt; all the stars aligned for me to start with this challenge.&lt;/p&gt;

&lt;p&gt;So this is "My 100DaysOfCode in a nutshell 🥜".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-day-1-to-day-50"&gt;
  &lt;/a&gt;
  From Day 1 to Day 50
&lt;/h3&gt;

&lt;p&gt;The challenge began on December 4th when I started with the course "50ProjectsIn50Days". This course is made by the people I mentioned above and is oriented to practising the fundamentals of HTML, CSS and JavaScript. I found this very useful as I was lacking experience, especially in the JavaScript sector. Another beauty of this course was its perfect match to the 100DaysOfCode challenge, as I wouldn't need to plan anything for the first half of my challenge.&lt;/p&gt;

&lt;p&gt;So that's what I did. I followed this course and worked every day on a new project. Most of the projects took me about 20-30 minutes to complete. But I didn't stop there...&lt;/p&gt;

&lt;p&gt;Another blessing of this course was the creative part. Because the projects are so small, you have enough possibilities and time to customize your projects. I took another 20-30 minutes for customizations. I tried to keep them simple but also useful in the context of the current project. Sometimes it was a design change, other times an additional functionality, I tried everything.&lt;/p&gt;

&lt;p&gt;After finishing this course, I was confident enough to try out a framework. I chose Vue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-day-51-to-day-61"&gt;
  &lt;/a&gt;
  From Day 51 to Day 61
&lt;/h3&gt;

&lt;p&gt;To be honest, it wasn't my first encounter with Vue. But it was the first time that I was building a fully fledged web application with this framework.&lt;/p&gt;

&lt;p&gt;I decided to build a weather application, as I wanted to try to incorporate some kind of Rest API into my app. To make it more interesting and different from other weather applications, I saw out there, I decided to use glassmorphism as the main design theme. I read a lot about it in the past and found some great websites which made it easier to create glass panels with CSS.&lt;/p&gt;

&lt;p&gt;I didn't have any big problems building it and in just 10 days of code I finished it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to find out more about glassmorphism and why you should use it, check out my blog post 👉 &lt;a href="https://dev.to/inkuantum/glassmorphism-what-s-so-interesting-about-it-4fb0"&gt;Glassmorphism - what's so interesting about it?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#from-day-62-to-day-68"&gt;
  &lt;/a&gt;
  From Day 62 to Day 68
&lt;/h3&gt;

&lt;p&gt;The next project I wanted to do was an e-commerce type of application. As product, I decided to go with fast food like sandwiches and additional drinks, deserts etc. The project consists of a landing page, menu and sandwich builder.&lt;/p&gt;

&lt;p&gt;To make the sandwich builder more authentic and realistic, I went on the Subway page and looked up ingredients they use in their sandwiches. When constructing your perfect sandwich, you're limited on how many ingredients you're able to choose. This is because a lot of companies do that to not run into any financial problems because the sandwich price stays consistent. The menu is split into two parts, the menu itself and a basket where you can see what products you have already selected.&lt;/p&gt;

&lt;p&gt;This was pretty much it. In the end, I never published the project as I didn't like how the design turned out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-day-69-to-day-71"&gt;
  &lt;/a&gt;
  From Day 69 to Day 71
&lt;/h3&gt;

&lt;p&gt;After the blow with Empare (that's what the last project was called), I decided to uplift my UI and CSS skills. I read more about design and followed more accounts which posted about it on Twitter. For a long time, I've been following &lt;a href="https://twitter.com/Prathkum"&gt;Pratham&lt;/a&gt; and &lt;a href="https://twitter.com/jh3yy"&gt;Jay&lt;/a&gt; on Twitter, who post beautiful CSS art. That's when I decided to try it out myself.&lt;/p&gt;

&lt;p&gt;There is not a lot to say about it except that it seemed more difficult than it actually was. Then I wrote a full breakdown of this project and published it on Hashnode and DevTo. It was my first blog post that really took off and received a lot of attention.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to find out more about this project, check out my blog post 👉 &lt;a href="https://dev.to/inkuantum/ukulele-with-css-1e12"&gt;Ukulele with CSS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#from-day-72-to-day-90"&gt;
  &lt;/a&gt;
  From Day 72 to Day 90
&lt;/h3&gt;

&lt;p&gt;Besides ukulele, for which I created a CSS art, I have another passion which is football. For a long time, I wanted to create &lt;a href="http://www.higherlowergame.com/"&gt;The Higher Lower Game&lt;/a&gt; clone, but with footballers and their goals. The problem then was that I didn't know how to get the information (such as footballer's names, goals, etc.) and how to set up the backend. At this point of time, I already knew how to get the first one done and that's what I've directly taken care of as well as the frontend. The backend was completely new to me, so I decided to take &lt;a href="https://www.udemy.com/course/the-complete-nodejs-developer-course-2/"&gt;The Complete Node.js Developer Course&lt;/a&gt; on the side while working on the other things for this project. I learned about Node.js and Express that allowed me to finish this project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to find out how I got the information on footballers for this project, check out my blog post 👉 &lt;a href="https://dev.to/inkuantum/web-scraping-with-puppeteer-kj7"&gt;Web Scraping with Puppeteer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#from-day-91-to-day-100"&gt;
  &lt;/a&gt;
  From Day 91 to Day 100
&lt;/h3&gt;

&lt;p&gt;The last but not least is my current project - Circlist. It's a web app that allows you to gather people, you interact the most on Twitter with, in one or multiple lists. This isn't my first take on the Twitter API, but surely the biggest. The project nears its first beta-testing and likewise its final release. I already finished the application. The last thing to do is the landing page, which will take some time to design and then to build. So certainly not one I could complete in the last 10 days and which goes beyond this challenge.&lt;/p&gt;

&lt;p&gt;So that was "My 100DaysOfCode in a nutshell 🥜". Thanks for reading and have an amazing day! ♥&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-i-find-these-projects"&gt;
  &lt;/a&gt;
  Where can I find these projects?
&lt;/h3&gt;

&lt;p&gt;50Projects50Days | &lt;a href="https://github.com/Inkuantum/50-projects-in-50-days"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Holo Weather | &lt;a href="https://holo-weather.netlify.app/"&gt;Website&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/Inkuantum/holo-weather"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Empare | Never published&lt;/p&gt;

&lt;p&gt;Ukulele | &lt;a href="https://ukulele-css.netlify.app/"&gt;Website&lt;/a&gt;, &lt;a href="https://codepen.io/inkuantum/pen/XWpKNOz"&gt;CodePen&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/Inkuantum/ukulele-css"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FootGuess | &lt;a href="https://soccerstatues.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Circlist | Currently in works 🚧&lt;/p&gt;




&lt;p&gt;In case you want to try out 100DaysOfCode for yourself, you'll find out more information on the following website (&lt;a href="https://www.100daysofcode.com/"&gt;https://www.100daysofcode.com/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you liked this article, consider following me on &lt;a href="https://twitter.com/Inkuantum"&gt;Twitter&lt;/a&gt;. I post tips around web development and progress on my projects. If you have any questions, my DMs on Twitter are always open.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkPFt9MK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626339263324/PrLP627fE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkPFt9MK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626339263324/PrLP627fE.png" alt="buymecookie.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
  </channel>
</rss>
