<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Tips to Increase Domain &amp; Page Authority</title>
      <author>Bhavyashah</author>
      <pubDate>Fri, 15 Oct 2021 11:13:28 +0000</pubDate>
      <link>https://dev.to/bhavyashah/10-tips-to-increase-domain-page-authority-973</link>
      <guid>https://dev.to/bhavyashah/10-tips-to-increase-domain-page-authority-973</guid>
      <description>&lt;p&gt;According to Moz, Domain Authority is a score that ranges from 0 to 100 that predicts how well a website will rank on search engines. If you have a high Domain Authority, it means that your website has a good chance of getting good rankings if it gets listed in Search Engine Result Pages (SERPs). Page Authority, on the other hand, is a score measuring the relative "authority" of any given web page and is used as part of Google's page ranking algorithm.&lt;/p&gt;

&lt;p&gt;Here are 10 Steps to &lt;a href="https://www.blogtriggers.com/2021/06/increase-da-and-pa-in-website.html"&gt;increase Domain and Page Authority&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use link-building to increase your DA&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimize your page titles and meta descriptions for search engines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimize your images for search results&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure your content is unique and relevant to your target audience&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your site regularly, but make sure you don't overdo it!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve user experience with good design and straightforward navigation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you don't have broken links on your site (use the broken link checker tool)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use social media for more inbound links to increase your DA and PA&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get links from other high-ranking sites(backlinko, neilpatel, search-engine-journal)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to do guest posts to improve your site's reputation and da pa score&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>website</category>
      <category>tips</category>
    </item>
    <item>
      <title>JavaScript Promises: Everything You Need to Know</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Fri, 15 Oct 2021 10:55:08 +0000</pubDate>
      <link>https://dev.to/aravsanj/javascript-promises-everything-you-need-to-know-18cj</link>
      <guid>https://dev.to/aravsanj/javascript-promises-everything-you-need-to-know-18cj</guid>
      <description>&lt;p&gt;In today's post, I promise to give you the best article on JavaScript promises you ever read. See what I did there? A promise in JavaScript is an object that is returned after an asynchronous operation. The object will be returned regardless of whether the asynchronous operation was a success or failure. This is why it is called a &lt;strong&gt;promise&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main purpose of using promise is to avoid &lt;em&gt;callback hell&lt;/em&gt;. In this post, we will learn about JavaScript promises, what they are, what they can do, and how to use them.&lt;/p&gt;

&lt;p&gt;To start off, we will discuss what existed before promise was introduced. Before promise, we used to pass callback functions directly as an argument.&lt;/p&gt;

&lt;p&gt;Let's take the example of an asynchronous function that downloads a certain image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DownloadImageAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function has to accept three arguments,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The url of the image&lt;/li&gt;
&lt;li&gt;A function that is executed after the image is successfully downloaded&lt;/li&gt;
&lt;li&gt;A function that is executed after the image download failed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two functions are called callback functions. Without callback functions, we cannot act up on the result of an asynchronous operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failure&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;DownloadImageAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how a typical asynchronous operation is structured. The problem with this approach start when we try to run several asynchronous operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;asyncFunctionOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;asyncFunctionTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;asyncFunctionThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;failure&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;failure&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see above is called a callback hell. This will get worse as more asynchronous operations are added. This is where JavaScript promises sweeps in with a better syntax.&lt;/p&gt;

&lt;p&gt;As I already mentioned, a promise in JavaScript is an object that is returned after an asynchronous operation. We will get to creating promises later down the post. For now, let's rewrite the above code for promises.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;asyncFunctionOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncFunctionTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncFunctionThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each asynchronous functions above returns a promise. In a promise, we can attach the &lt;code&gt;then&lt;/code&gt; method where we pass the next function. From the above code you should take away three things,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises are far shorter and simpler in syntax&lt;/li&gt;
&lt;li&gt;You only need to pass the failure callback once&lt;/li&gt;
&lt;li&gt;A promise must always return results (check arrow function syntax, it is returning results which is passed to the next &lt;code&gt;then&lt;/code&gt; block)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;It is important to note that for most of our JavaScript life, we will be using already-made promises instead of creating them ourselves.&lt;/em&gt; With that being said, let's learn to create promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-promise"&gt;
  &lt;/a&gt;
  Creating a promise
&lt;/h2&gt;

&lt;p&gt;To create promises, we use the &lt;code&gt;Promise&lt;/code&gt; constructor object in JavaScript. The &lt;code&gt;new&lt;/code&gt; keyword is used to create a new instance of a user-defined object or constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A promise has to be resolved (success) or rejected (failure). In both cases, a function is executed (as demonstrated above). We pass these functions as arguments of an arrow function passed to the &lt;code&gt;Promise&lt;/code&gt; constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the arrow function, we create the definition and condition for resolve or reject to be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We already saw how to consume the promise. By using &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from catch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// output: from then success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the condition is satisfied (which it is), the resolve function is triggered and &lt;code&gt;then&lt;/code&gt; method is executed. Otherwise, the &lt;code&gt;catch&lt;/code&gt; method is executed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;then&lt;/code&gt; method above itself returns another promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from catch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use &lt;code&gt;then&lt;/code&gt; method again on the new promise object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better way to do this is to just tuck in the &lt;code&gt;then&lt;/code&gt; methods one after another (as we saw in the first example).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from catch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is called a promise chain.&lt;/p&gt;

&lt;p&gt;To recap,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Promise&lt;/code&gt; is an object (constructor) in JavaScript&lt;/li&gt;
&lt;li&gt;An instance of the object is created using &lt;code&gt;new&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;A function is passed as an argument to the constructor&lt;/li&gt;
&lt;li&gt;The function accepts two other functions as arguments - resolve &amp;amp; reject&lt;/li&gt;
&lt;li&gt;Conditions and definitions for these functions are defined in the function definition&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods are executed for resolve and reject accordingly&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;then&lt;/code&gt; method itself returns a promise that can attach another &lt;code&gt;then&lt;/code&gt; method creating a promise chain&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#states-of-a-promise"&gt;
  &lt;/a&gt;
  States of a promise
&lt;/h2&gt;

&lt;p&gt;A promise always has to be in one of the following three states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pending&lt;/li&gt;
&lt;li&gt;Fullfilled&lt;/li&gt;
&lt;li&gt;Rejected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Pending&lt;/em&gt; is the initial state of the the promise. The promise is &lt;em&gt;fullfilled&lt;/em&gt; when it is a success. The promise is &lt;em&gt;rejected&lt;/em&gt; when it is a failure.&lt;/p&gt;

&lt;p&gt;When a promise is rejected, it is still returning another promise. That means we can also use &lt;code&gt;then&lt;/code&gt; method instead of &lt;code&gt;catch&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;code&gt;then&lt;/code&gt; method in this case is used to execute another asynchronous operation. It should not be confused with &lt;code&gt;catch&lt;/code&gt; which is used for error handling. A &lt;code&gt;catch&lt;/code&gt; is always necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; method is instantly executed when confronted with an error. It doesn't matter how many &lt;code&gt;then&lt;/code&gt; methods it had to skip.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;catch&lt;/code&gt; method also returns a promise. So we can tuck in a &lt;code&gt;then&lt;/code&gt; method after the &lt;code&gt;catch&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somethingElse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;somethingElse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we can still trigger another asynchronous operation after error handling.&lt;/p&gt;

&lt;p&gt;If you want to execute something regardless of whether your promise is fulfilled or rejected, use &lt;code&gt;finally&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onRejection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from then &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somethingElse&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;somethingElse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whatever&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whatever goes in to the &lt;code&gt;finally&lt;/code&gt; block is always executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-resolve-and-reject-methods"&gt;
  &lt;/a&gt;
  The resolve() and reject() methods
&lt;/h2&gt;

&lt;p&gt;When we created a promise earlier, we defined the condition for resolving or rejecting that promise. But there is a way to resolve or reject a promise unconditionally.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.resolve()&lt;/code&gt; method returns a promise object that is already resolved by a given value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Promise.reject()&lt;/code&gt; method returns a promise object that is rejected with a given reason.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating promises that are unconditionally resolved or rejected is particularly useful when handling multiple independent promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-multiple-independent-promises"&gt;
  &lt;/a&gt;
  Handling multiple independent promises
&lt;/h2&gt;

&lt;p&gt;We can handle multiple independent promises using &lt;code&gt;Promise.all()&lt;/code&gt; and &lt;code&gt;Promise.race()&lt;/code&gt; methods. Both methods accept an array of promises.&lt;/p&gt;

&lt;p&gt;While using &lt;code&gt;Promise.all()&lt;/code&gt;, the &lt;code&gt;then&lt;/code&gt; method is only triggered after the last promise is resovled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// [ result1, result1, result3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While using &lt;code&gt;Promise.race()&lt;/code&gt;, the &lt;code&gt;then&lt;/code&gt; method is triggered the moment first promise is resolved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promise3&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// result1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since these are simple promises, &lt;code&gt;promise1&lt;/code&gt; will be resolved first. This may not be the case with complex ones. This enables us to run multiple asynchronous operations and act up on the one that finishes first.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🔥 How to create a Landing Page with Next JS in 5 minutes and deploy in production 🚀</title>
      <author>Remi W.</author>
      <pubDate>Fri, 15 Oct 2021 10:45:28 +0000</pubDate>
      <link>https://dev.to/ixartz/how-to-create-a-landing-page-with-next-js-in-5-minutes-and-deploy-in-production-5e08</link>
      <guid>https://dev.to/ixartz/how-to-create-a-landing-page-with-next-js-in-5-minutes-and-deploy-in-production-5e08</guid>
      <description>&lt;p&gt;The first thing you do for your SaaS products is to create a landing page. It's also applied for open source projects, Startups, selling online products, etc. Building your Landing Page is the best way to promote your projects and find your audience.&lt;/p&gt;

&lt;p&gt;In this article, I'll show you how you can create and deploy your landing page in production. In 5 minutes, you'll have a marketing website where you can start promoting your projects or products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-js-landing-page-template"&gt;
  &lt;/a&gt;
  Next JS Landing Page Template
&lt;/h2&gt;

&lt;p&gt;Recently, Next JS has grown among React community. With Next JS pre-render pages at build time (SSG), you are now able to write your React components for creating a Landing Page or marketing website.&lt;/p&gt;

&lt;p&gt;To create a landing page in 5 minutes and deploy it in production, you need to get some help. Otherwise, it'll take you several days or weeks to make it.&lt;/p&gt;

&lt;p&gt;I have built an open-source and free Next JS landing page with React, TypeScript and Tailwind CSS. So, you don't need to create and code the design yourself. The code is hosted on GitHub at &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;Next JS Landing Page Template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In one click, you'll able to deploy your landing page on Netlify. You'll find the &lt;a href="https://github.com/ixartz/Next-js-Boilerplate#deploy-to-netlify"&gt;one-click deploy button&lt;/a&gt; inside the REAMDE file of the project.&lt;/p&gt;

&lt;p&gt;After clicking on the Netlify button, you'll redirect to Netlify wizard to set up the landing page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44n9TB-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-one-deploy-landing-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44n9TB-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-one-deploy-landing-page.png" alt="Netlify one-click deploy Next JS Landing Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything should be already configured for you, you only need to indicate the name of your project. At the end of the setup wizard, you should see this UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh7sgRr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-dashboard-deployment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh7sgRr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/netlify-dashboard-deployment.png" alt="Netlify one-click deploy Next JS Landing Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait until the landing page is deployed, you can now click the link to your website which follows this format &lt;code&gt;https://XXXXXXXX.netlify.app&lt;/code&gt;. Here is the final result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8QJkwaOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-landing-page-netlify.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QJkwaOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-landing-page-netlify.png" alt="Next JS Landing Page Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;By following this tutorial, you have created and deployed your landing page in production. Now, you can customize the page to meet your needs and requirements.&lt;/p&gt;

&lt;p&gt;You can also check out our other &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;Next JS Landing Page Template&lt;/a&gt; with prebuilt premium components like Testimonials, Pricing cards, FAQs, or Stats.&lt;/p&gt;

&lt;p&gt;If you want to build SaaS products, I've also created a &lt;a href="https://nextlessjs.com"&gt;Next JS SaaS Boilerplate&lt;/a&gt;. It includes everything you need to build your SaaS products faster with authentication, Stripe integration, prebuilt landing page, prebuilt user dashboard, form and error handling, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>List of currencies of the world</title>
      <author>Jessica Wanda ✤</author>
      <pubDate>Fri, 15 Oct 2021 10:44:14 +0000</pubDate>
      <link>https://dev.to/currency-converter/list-of-currencies-of-the-world-3ndk</link>
      <guid>https://dev.to/currency-converter/list-of-currencies-of-the-world-3ndk</guid>
      <description>&lt;p&gt;There are over 195 countries in the world and seven continents such as Africa, Asia, Australia, Europe, North America, South America and Antarctica. Each country is different with its own history, architecture, struggles, culture and political identity. One thing that invariably is common amongst all countries is the use of money as a medium of exchange. All countries irrespective of whether they are small or big, landlocked or island-based, rich or poor, have a specific currency used for all monetary transactions. Discover the history, interesting facts and details about the most important currencies worldwide. How they were created, which are the banknotes and coins and what they are worth. You can see the table by the name of the currency or the name of the country. What money do you use depends on where are you living or planning to travel. Totally, there are 170 official national currencies circulating around the world. Although the number of the independent countries is 197 plus about five dozen of dependent territories. The matter is, that some of them don't have their own money and officially use the foreign currency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#countries-and-their-currency"&gt;
  &lt;/a&gt;
  Countries and their currency
&lt;/h2&gt;

&lt;p&gt;Our currency table lists the currencies and subcurrencies in use in more than 170+ countries and territories around the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Country&lt;/strong&gt;&lt;br&gt;
We have used the popular rather than the formal names of countries and territories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Currency Name&lt;/strong&gt;&lt;br&gt;
In many cases a number of countries share the same currency&lt;br&gt;
name, but not the same currency. To lessen confusion, we have&lt;br&gt;
included the country name in the currency column.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Currency Codes&lt;/strong&gt;&lt;br&gt;
The International Organization for Standardization has established alpha and numeric codes for all currencies. These are the formal codes that banks and currency dealers use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Symbols&lt;/strong&gt;&lt;br&gt;
Most every currency in the world has a symbol or abbreviation&lt;br&gt;
that is more commonly used than the formal ISO codes. For example, $, € and £.&lt;/p&gt;

&lt;p&gt;★ All &lt;strong&gt;currencies of the world&lt;/strong&gt; with their ISO-4217 codes, listed by countries and dependent territories ➔ &lt;a href="https://currencyconverts.com/currencies-of-the-world"&gt;https://currencyconverts.com/currencies-of-the-world&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>currency</category>
      <category>world</category>
    </item>
    <item>
      <title>MediaStream API in Javascript</title>
      <author>Zygimantas Sniurevicius</author>
      <pubDate>Fri, 15 Oct 2021 10:34:03 +0000</pubDate>
      <link>https://dev.to/producthackers/mediastream-api-in-javascript-16h2</link>
      <guid>https://dev.to/producthackers/mediastream-api-in-javascript-16h2</guid>
      <description>&lt;p&gt;Hello fellow dev’s today we are gonna see how easy it is to record your voice or screen in the browser using Mediastream Recording API, with just a few lines we can have something working immediately, first  let’s see how MDN defines &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder"&gt;Mediastream Recording API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“The MediaStream Recording API is comprised of a single major interface, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder"&gt;MediaRecorder&lt;/a&gt;, which does all the work of taking the data from a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream"&gt;MediaStream&lt;/a&gt; and delivering it to you for processing. The data is delivered by a series of dataavailable events, already in the format you specify when creating the &lt;code&gt;MediaRecorder&lt;/code&gt;”&lt;/p&gt;

&lt;p&gt;There are a lot of technical words in that explanation but in a extremely simplified way mediaStream provides us the tools to control audio and videos using streams of data to deliver information with events like &lt;strong&gt;dataavailable&lt;/strong&gt; or &lt;strong&gt;onstop&lt;/strong&gt;, after that we manipulate this information however we see fit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial setup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coKleKBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibo0ru8aqeojtob3bdm1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coKleKBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibo0ru8aqeojtob3bdm1.JPG" alt="repository header"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;all the code you see in this article is available in the following &lt;a href="https://github.com/zygisS22/MediaStreamAPI"&gt;REPOSITORY&lt;/a&gt;&lt;br&gt;
and if you wanna test the code directly you can do it &lt;a href="https://zygiss22.github.io/MediaStreamAPI/"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project uses only javascript vanilla, we don’t need anything eccentric like react.js or vue.js, but of course if you want to try it using some framework go ahead because it’s basically the same.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;The HTML file is a simple template, with links to our css and js files, other than that we some buttons and a gallery, this is where we gonna display all our audios/videos.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;As for the styling I added some basic flex styles just for centering and a fancy button gradient just for presentation purpose.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h2&gt;

&lt;p&gt;Now, here we have the main dish, let’s go through  almost line by line.&lt;/p&gt;

&lt;p&gt;We start by declaring all the HTML selectors we'll end up using for future events, mediaRecorder is gonna be the main object that dictates if we recording audio or our screen and the chunks variable is where we gonna store our recording data before converting it into an HTML element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const buttons = document.querySelectorAll(".button");
const startAudioButton = document.querySelector("#startAudio");
const startScreenButton = document.querySelector("#startScreen");
const stopButton = document.querySelector("#stopAudio");
const audioList = document.querySelector("#audio-list");
const videoList = document.querySelector("#video-list");

let mediaRecorder = null;
let chunks = [];

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we add click events to our three beautiful buttons so each one calls the function associate with the HTML element when we want to start or stop recording.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;startAudioButton .addEventListener("click", recordAudio);
stopButton.addEventListener("click", stopRecording);
startScreenButton.addEventListener("click", recordSCreen);


function recordAudio() {
    // ...code
}

function  stopRecording() {
    // ...code
}

function  recordSCreen() {
    // ...code
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first “big” function we have is for recording audio, here we have a promise that calls the method &lt;strong&gt;.getUserMedia()&lt;/strong&gt; with a json object to specify that we need only audio, this pops up a window asking for our &lt;strong&gt;permission&lt;/strong&gt; to use the microphone inside the browser, after that we get a stream.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SluIUWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhok6ep8e573xf6yv46b.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SluIUWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhok6ep8e573xf6yv46b.JPG" alt="microphone permission"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This stream can be obtained from audio or video, but in our case we want to capture our microphones stream, so we use it to initialize a new MediaRecorder object.&lt;/p&gt;

&lt;p&gt;During the recording we will get a continues flow of data from the event &lt;strong&gt;ondataavailable&lt;/strong&gt;, this data has the following structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sEqwBF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtcfmi8p7ffvsm0tzlp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEqwBF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhtcfmi8p7ffvsm0tzlp.JPG" alt="console.log data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the definition of a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob"&gt;Blob&lt;/a&gt; for those that dont know what it means.&lt;/p&gt;

&lt;p&gt;“The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream “&lt;/p&gt;

&lt;p&gt;we store all this information inside the array chunks as we are gonna need it later to create the audio element with it.&lt;/p&gt;

&lt;p&gt;Then whenever we stop recording we call another function that creates the  HTML audio element using the chunks array (Blobs).&lt;/p&gt;

&lt;p&gt;Lastly we start the recording with...you guessed it &lt;strong&gt;mediaRecorder.start(x)&lt;/strong&gt; by default it saves the entire file into a single Blob, but if we specify a duration then it creates a Blob every X milliseconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function recordAudio() {
  navigator.mediaDevices
    .getUserMedia({ audio: true})
    .then((stream) =&amp;gt; {
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.ondataavailable = (e) =&amp;gt; {
        chunks.push(e.data);
      };
      mediaRecorder.onstop = (e) =&amp;gt; {
        createMediaElement("audio", "audio/mp3", audioList);
      };
      mediaRecorder.onerror = (e) =&amp;gt; {};
      mediaRecorder.start(1000);
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We stop the recording by simply calling mediaRecorder.stop()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function stopRecording() {
  mediaRecorder.stop();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we stop a recording we automatically create a &lt;strong&gt;mediaRecorder.onstop&lt;/strong&gt; event , this then calls the function &lt;strong&gt;createMediaElement(...)&lt;/strong&gt; with the mediaType (audio or video), fileType and the placeToAdd (where to insert the element we just created).&lt;/p&gt;

&lt;p&gt;Now we use all the stored information in the chunks array to create one Blob and make it into a url.&lt;/p&gt;

&lt;p&gt;Then we create the HTML element passing the url as src and we reset the let variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function createMediaElement(mediaType, fileType, placeToAdd) {
  const blob = new Blob(chunks, {
    type: fileType,
  });
  const mediaURL = window.URL.createObjectURL(blob);
  const element = document.createElement(mediaType);
  element.setAttribute("controls", "");
  element.src = mediaURL;
  placeToAdd.insertBefore(element, placeToAdd.firstElementChild);
  mediaRecorder = null;
  chunks = [];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Screen recording is more or less the same thing, the only big differences is that we call &lt;strong&gt;getDisplayMedia&lt;/strong&gt; instead of &lt;strong&gt;getUserMedia&lt;/strong&gt; and when we create the media element we pass the chunks type as fileType.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function recordSCreen() {
  navigator.mediaDevices
    .getDisplayMedia({ mediaSource: "screen"})
    .then((stream) =&amp;gt; {
      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.ondataavailable = (e) =&amp;gt; {
        chunks.push(e.data);
      };
      mediaRecorder.onstop = (e) =&amp;gt; {
        createMediaElement("video", chunks[0].type, videoList);
      };
      mediaRecorder.start();
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we have basically covered the entire thing, as you can see there is not much to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;As always thanks for reading and I hope you learnt something new today, stay safe and healthy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glLGqkXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abi41zpbiej9ql2roslh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glLGqkXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abi41zpbiej9ql2roslh.gif" alt="Goodbye gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>decentralized and encrypted cloud storage</title>
      <author>Patrick</author>
      <pubDate>Fri, 15 Oct 2021 10:30:08 +0000</pubDate>
      <link>https://dev.to/patrickwilson41/decentralized-and-encrypted-cloud-storage-4h03</link>
      <guid>https://dev.to/patrickwilson41/decentralized-and-encrypted-cloud-storage-4h03</guid>
      <description>&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;I've just found out about Internxt, a decentralized cloud storage that is secured and encrypted&lt;/p&gt;

&lt;p&gt;Apparently they are a new project and I really liked it.&lt;br&gt;
Prices are fine (1tb 99€ is not bad) but I got the code BLURWEB to get 2 TB for free for one year.&lt;/p&gt;

&lt;p&gt;You guys should check it!!&lt;/p&gt;

</description>
      <category>encryptation</category>
      <category>beginners</category>
      <category>storage</category>
      <category>opensource</category>
    </item>
    <item>
      <title>DeepfakeHTTP v6.1.1</title>
      <author>Alexander</author>
      <pubDate>Fri, 15 Oct 2021 10:20:55 +0000</pubDate>
      <link>https://dev.to/xnbox1/deepfakehttp-v611-241o</link>
      <guid>https://dev.to/xnbox1/deepfakehttp-v611-241o</guid>
      <description>&lt;p&gt;The new release of &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;DeepfakeHTTP&lt;/a&gt; brings new features.&lt;/p&gt;

&lt;p&gt;One of the cool new features is that templates can now be populated with data from an external &lt;strong&gt;JSON&lt;/strong&gt; file.&lt;br&gt;
Moreover, requests can modify this file dynamically using &lt;strong&gt;JavaScript&lt;/strong&gt; and give a full impression of a real server. At any time you can export a dump with updated JSON and use it in the future.&lt;/p&gt;

&lt;p&gt;In this release (v6.1.1):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New option &lt;code&gt;--db &amp;lt;file|url&amp;gt;&lt;/code&gt; json/yaml/csv memory file to populate templates&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--db-export &amp;lt;file&amp;gt;&lt;/code&gt; export memory to json file&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--db-path &amp;lt;path&amp;gt;&lt;/code&gt; serve live memory file at specified context&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--js &amp;lt;file|url&amp;gt;... &lt;/code&gt; JavaScript file(s) for script engine context&lt;/li&gt;
&lt;li&gt;New option &lt;code&gt;--no-bak&lt;/code&gt; disable backup old memory file before overwrite&lt;/li&gt;
&lt;li&gt;New response header &lt;code&gt;X-Handler-XGI&lt;/code&gt; XGI (Extended Gateway Interface) program&lt;/li&gt;
&lt;li&gt;New response header &lt;code&gt;X-Handler-CGI&lt;/code&gt; CGI (Common Gateway Interface) program&lt;/li&gt;
&lt;li&gt;New response header &lt;code&gt;X-Handler-JS&lt;/code&gt; JavaScript response handler function&lt;/li&gt;
&lt;li&gt;Default 'Not found' status changed from &lt;code&gt;400&lt;/code&gt; to &lt;code&gt;404&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Cheatsheet page updated.&lt;/li&gt;
&lt;li&gt;Bug fixes&lt;/li&gt;
&lt;li&gt;Minor code enhancements&lt;/li&gt;
&lt;li&gt;Documentation updated&lt;/li&gt;
&lt;li&gt;Release on top of Tommy v10.0.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you to all the people who helped with advice, suggestions, and participation!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>news</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Major branches of artificial intelligence</title>
      <author>Analytics steps</author>
      <pubDate>Fri, 15 Oct 2021 10:19:14 +0000</pubDate>
      <link>https://dev.to/analyticsstepss/major-branches-of-artificial-intelligence-4a7k</link>
      <guid>https://dev.to/analyticsstepss/major-branches-of-artificial-intelligence-4a7k</guid>
      <description>&lt;p&gt;Artificial Intelligence can be characterized as the improvement of PC frameworks that are fit for performing errands that require human knowledge, for example, dynamic, object discovery, tackling complex issues, etc. &lt;/p&gt;

&lt;p&gt;Presently how about we comprehend the various stages or the kinds of learning in &lt;a href="https://www.analyticssteps.com/blogs/6-major-branches-artificial-intelligence-ai"&gt;Artificial Intelligence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artificial Narrow Intelligence&lt;br&gt;
Artificial General Intelligence&lt;br&gt;
Artificial Super Intelligence&lt;/p&gt;

&lt;p&gt;Artificial Narrow Intelligence- It is also known as Weak AI, ANI is the phase of Artificial Intelligence including machines that can perform just a barely characterized set of explicit assignments. At this stage, the machine doesn't have any reasoning capacity, it simply plays out a bunch of pre-characterized capacities.&lt;/p&gt;

&lt;p&gt;Artificial General Intelligence-  Also called Strong AI, AGI is the stage in the advancement of Artificial Intelligence wherein machines will have the capacity to think and settle on choices very much like us people. &lt;/p&gt;

&lt;p&gt;There are presently no current instances of Strong AI, in any case, it is accepted that we can before long make machines that are pretty much as keen as people.&lt;/p&gt;

&lt;p&gt;Artificial Super Intelligence- ASI is the phase of Artificial Intelligence when the capacity of PCs will outperform people. ASI is right now a theoretical circumstance as portrayed in films and sci-fi books, where machines have assumed control over the world.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>business analysis techniques</title>
      <author>Analytics steps</author>
      <pubDate>Fri, 15 Oct 2021 10:17:52 +0000</pubDate>
      <link>https://dev.to/analyticsstepss/business-analysis-techniques-54h</link>
      <guid>https://dev.to/analyticsstepss/business-analysis-techniques-54h</guid>
      <description>&lt;p&gt;Business analysis has taken a change in outlook over the most recent couple of years with the creative methodologies of best business investigation procedures. The sole reason for these methods is to get the best result as a business arrangement. &lt;/p&gt;

&lt;p&gt;In addition, it isn't so much that the best business examination methods are utilized all through the venture. It very well may be relevant for a particular period of an undertaking like toward the start of the venture or when the task is finished. Also, not that the very best &lt;a href="https://www.analyticssteps.com/blogs/8-most-popular-business-analysis-techniques-used-business-analyst"&gt;business analysis&lt;/a&gt; strategies are pertinent for all activities. They are projected explicitly and utilized for specific purposes.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 things you can do to improve as a developer</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 15 Oct 2021 10:16:06 +0000</pubDate>
      <link>https://dev.to/pascavld/5-things-you-can-do-to-improve-as-a-developer-1jm6</link>
      <guid>https://dev.to/pascavld/5-things-you-can-do-to-improve-as-a-developer-1jm6</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All developers want to get better&lt;/p&gt;

&lt;p&gt;But doing this can be hard. Especially in the beginning...&lt;/p&gt;

&lt;p&gt;Here are 5 things you can do to improve as a developer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-read-others-code"&gt;
  &lt;/a&gt;
  1. Read other's code
&lt;/h2&gt;

&lt;p&gt;This was really important for me in the beginning, especially when I was struggling with some concepts&lt;/p&gt;

&lt;p&gt;Just think about this:&lt;/p&gt;

&lt;p&gt;If you never read other developer's code, you'll always write the exact same code&lt;/p&gt;

&lt;p&gt;And you have no idea if that is good or not&lt;/p&gt;

&lt;p&gt;But what can you do about it?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a project you want to work on&lt;/li&gt;
&lt;li&gt;Build it yourself&lt;/li&gt;
&lt;li&gt;After you finished it go on GitHub and search for similar projects and read that code&lt;/li&gt;
&lt;li&gt;Improve your own code&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-use-platform-like-codewars-or-leetcode"&gt;
  &lt;/a&gt;
  2. Use platform like Codewars or Leetcode
&lt;/h2&gt;

&lt;p&gt;I already talked about this a few times in the past too,  but it's never too much&lt;/p&gt;

&lt;p&gt;I use both of these platforms for almost 6 months every day and I think it's one of the best things I did as a developer&lt;/p&gt;

&lt;p&gt;But, here is the thing...&lt;/p&gt;

&lt;p&gt;Don't use them as everyone does it&lt;/p&gt;

&lt;p&gt;Use them just to learn the language. Don't focus on creating the fastest solution&lt;/p&gt;

&lt;p&gt;Code on your own and focus on learning rather than on the score&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-join-a-community"&gt;
  &lt;/a&gt;
  3. Join a community
&lt;/h2&gt;

&lt;p&gt;I wasn't that consistent with coding until I joined Tech Twitter&lt;/p&gt;

&lt;p&gt;That was about one year ago and since then I have learned a lot (and I also formed the habit of coding every day)&lt;/p&gt;

&lt;p&gt;Don't overthink this. Just create a Twitter and start documenting&lt;/p&gt;

&lt;p&gt;You could also engage with other people...&lt;/p&gt;

&lt;p&gt;But that helps only if you want to grow an audience on Twitter (which I recommend doing too)&lt;/p&gt;

&lt;p&gt;And if you want to do that too, here is a great course that can help you get started - &lt;a href="https://gumroad.com/a/886314099"&gt;https://gumroad.com/a/886314099&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-be-consistent"&gt;
  &lt;/a&gt;
  4. Be consistent
&lt;/h2&gt;

&lt;p&gt;I know that you hear this a lot but it's really important&lt;/p&gt;

&lt;p&gt;I started coding in 2019 but I wasn't consistent until the end of 2020&lt;/p&gt;

&lt;p&gt;Since I started being more consistent I learned 10x more than before&lt;/p&gt;

&lt;p&gt;But why do you want to be consistent in the first place?&lt;/p&gt;

&lt;p&gt;Well coding is something new for your brain&lt;/p&gt;

&lt;p&gt;And if you want it to understand how to code you need to expose it to code a little bit every day&lt;/p&gt;

&lt;p&gt;Yes! Every day for as little as possible&lt;/p&gt;

&lt;p&gt;Trust me, this will make a huge difference in your career as a developer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-contribute-to-open-source"&gt;
  &lt;/a&gt;
  5. Contribute to open source
&lt;/h2&gt;

&lt;p&gt;Maybe you are afraid to work on your projects right now&lt;/p&gt;

&lt;p&gt;I understand that. I've been there too&lt;/p&gt;

&lt;p&gt;But building projects is the key to learning how to code&lt;/p&gt;

&lt;p&gt;So how to go about that?&lt;/p&gt;

&lt;p&gt;You contribute to open source projects&lt;/p&gt;

&lt;p&gt;Just find an open-source project on GitHub and start working on it&lt;/p&gt;

&lt;p&gt;I guarantee that your skills will skyrocket in less 3 months&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Read other's code&lt;/li&gt;
&lt;li&gt;Use platform like Codewars or Leetcode&lt;/li&gt;
&lt;li&gt;Join a community&lt;/li&gt;
&lt;li&gt;Be consistent&lt;/li&gt;
&lt;li&gt;Contribute to open source&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any questions feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>An Easy One-Stop Solution for Salvage Car Rebuilding
</title>
      <author>Tech News</author>
      <pubDate>Fri, 15 Oct 2021 10:09:09 +0000</pubDate>
      <link>https://dev.to/technewsky/an-easy-one-stop-solution-for-salvage-car-rebuilding-2ek3</link>
      <guid>https://dev.to/technewsky/an-easy-one-stop-solution-for-salvage-car-rebuilding-2ek3</guid>
      <description>&lt;p&gt;CITY, IL., (10.12.2021): For more than a decade, Illinois Licensed Rebuilder-AP1H has provided services on all salvage title vehicles including cars, trucks, trailers, motorcycles and RVs. Services include salvage, safety, and police inspection, as well as part receipts. Illinois Licensed Rebuilder-AP1H also provides relief to customers by being the middleman with the Secretary of State.&lt;/p&gt;

&lt;p&gt;In Illinois City, the government gives salvage titles when repair expenses exceed a damaged vehicle’s current market value. Illinois Licensed Rebuilder-AP1H offers authorized services to repair or replace the vehicles. Rebuilder handles projects with high-quality service to ensure vehicle owners have a stress-free experience. Services include:&lt;/p&gt;

&lt;p&gt;Safety Inspection&lt;br&gt;
In this inspection, all the body parts of the vehicle are tested and inspected. This includes cars, trucks, trailers, motorcycles, and other appliances required by code to check.&lt;/p&gt;

&lt;p&gt;Police Inspection&lt;br&gt;
All salvage vehicles require a police inspection to identify and review the documentation. But before being brought here, vehicles must pass the safety lane inspection and test from the Illinois Department of Vehicles. The appointed counties inspect the salvage vehicles, and Illinois Licensed Rebuilder, as the middleman, offers this service to customers.&lt;/p&gt;

&lt;p&gt;Parts Receipt&lt;br&gt;
In Illinois City it is mandatory for a Secretary State of Police to inspect all salvaged vehicle parts  before a review title is issued. With Rebuilder, the vehicle owner doesn’t have to go through the process themselves. Rebuilder provides all the essential parts receipts. Time is saved by using a selected code list for each vehicle.&lt;/p&gt;

&lt;p&gt;Salvage Inspection&lt;br&gt;
There are several steps necessary to take before making an appointment for a salvage inspection. The vehicle must pass the safety inspection, as well as safety lane rules. The salvage vehicle should be in operating condition during the review. Some parts may be removed and rechecked in the inspection area. All of these services are handled by our team.&lt;/p&gt;

&lt;p&gt;Contact Detail – &lt;br&gt;
Illinois Licensed Rebuilder-AP1H&lt;br&gt;
1-815-513-2744&lt;br&gt;
&lt;a href="mailto:office@ap1h.com"&gt;office@ap1h.com&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.illinoislicensedrebuilder.com"&gt;www.illinoislicensedrebuilder.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/0miqyKIr7Ug"&gt;https://youtu.be/0miqyKIr7Ug&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
    </item>
    <item>
      <title>OS hackathon ideas drive EV infrastructure improvements forward</title>
      <author>Charley Glynn</author>
      <pubDate>Fri, 15 Oct 2021 10:03:00 +0000</pubDate>
      <link>https://dev.to/charleyglynn/os-hackathon-ideas-drive-ev-infrastructure-improvements-forward-4ncm</link>
      <guid>https://dev.to/charleyglynn/os-hackathon-ideas-drive-ev-infrastructure-improvements-forward-4ncm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#experts-and-enthusiasts-from-startups-private-enterprise-and-public-sector-create-solutions-to-tackle-obstacles-such-as-where-to-locate-public-charging-points-in-future"&gt;
  &lt;/a&gt;
  Experts and enthusiasts from start-ups, private enterprise and public sector create solutions to tackle obstacles such as where to locate public charging points in future.
&lt;/h3&gt;

&lt;p&gt;Ordnance Survey’s two-day OS Map and Hack event was declared an “amazing demonstration of creativity” after collaborators worked on ways to enhance electric vehicle (EV) infrastructure in Britain.&lt;/p&gt;

&lt;p&gt;Participants were given the task of overcoming problems such as where charge points should be developed, how to attract more non-EV owners, and how can EV infrastructure be levelled up in remote communities.&lt;/p&gt;

&lt;p&gt;They were handed premium OS data and APIs, as well as other relevant data sources including UK wide datasets from EV routing planning and charger app &lt;a href="https://www.wattsup.app/"&gt;WattsUp&lt;/a&gt;, and full support and expertise from OS’s team of GIS specialists to help with the challenge.&lt;/p&gt;

&lt;p&gt;Four concepts were presented in front of a judging panel at the hackathon final.&lt;/p&gt;

&lt;p&gt;The winning idea was an EV Charging Site Planner app created by Arcadis. Designed with local authorities and private developers in mind, it identifies suitable locations for installing EV charging points. The app assesses potential charging point sites, then refines and characterises any search by pinpointing red, amber and green dots on a map to show the best locations. Pulling in data from OS Maps API, OS Features API, OS Greenspace, OS MasterMap and council land registry information, it takes into account factors such as proximity to existing charge point infrastructure, driving times, land ownership, priority land without any charging points, grid supply from sub stations, amenities (likely places where people would want to leave their vehicles) and greenspaces.&lt;/p&gt;

&lt;p&gt;Leeds was the example tested during the hackathon, with the app revealing 144 of the best potential charge point sites to be found on city council land, and a further 650 possible sites elsewhere that could be considered.&lt;/p&gt;

&lt;p&gt;Another benefit is how the app helps users to review sites without wasting time on site visits at unsuitable locations. Information can also be shared in on-screen reports to interested stakeholders.&lt;/p&gt;

&lt;p&gt;Arcadis Technical Director Simon Ross said: “The hackathon gave us the opportunity to expand our site planning toolset using the OS Features API to access feature-rich MasterMap data. As a result of the team’s efforts, we now have a cost-effective and fully automatable workflow that further refines site evaluations by characterising land areas based on their OS MasterMap attributes.&lt;/p&gt;

&lt;p&gt;“Through the hackathon we’ve been able to start to bring this entire site identification process into a single application, incorporating not only site suitability and land characterisation, but also the capability for users to share preferences for new installation sites with other project stakeholders. This interactivity around the planning process will enable us to give a significantly enhanced experience to our customers and to the businesses and public that ultimately benefit from robust planning of an expanded EV charging network.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Through the hackathon workshops and cross-team networking we’ve identified other OS datasets that can be integrated to the site planner application in the future and we look forward to continuing to work with OS to maximise the benefits their data can bring to our planning platform.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qba0dOU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1gd12h010b60zfecmll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qba0dOU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1gd12h010b60zfecmll.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OS API Product Manager and hackathon judge Charley Glynn said: “We were so impressed with how much data Arcadis brought together. The creativity and innovation of the idea, not only in the application, but also how tangible the positive impact will be for society, and they deserve a huge congratulations.”&lt;/p&gt;

&lt;p&gt;Circuit Finder from the Department for Transport was an app which calculates how long a journey will take for EV owners with different needs. Users put in their start point and destination for journeys, and the app finds the best route for them according to their preferences. If someone wants to be in a comfortable place while they wait for their car to charge, they can select that, or if they want to get charged and away as quick as possible, that can be factored in too. Circuit Finder gives a map of the journey with charge points, bespoke stats related to car charging capacity, and timings for how long it will take to charge it. It uses Open Street Map, Open Source Routing Engine API and National Chargepoint Registry data.&lt;/p&gt;

&lt;p&gt;Plonkers designed by Ofgem was a concept aimed at levelling up rural communities to help them transition towards becoming EV friendly. The prototype app focused on Thurso in Scotland and investigated where was best to plonk charge points. Using OS Maps API and OS Places API to provide household addresses, and Open Street Map data for tourists, hotels and caravan parks, it investigated households who share the same charging points and distances from the nearest charger.&lt;/p&gt;

&lt;p&gt;Rate My Charger was a concept created by RAC Agilysis to promote the best chargers in the country. The idea for the app was to look at what real EV journeys are like and understand what kind of qualities people expect to see from public charging points. The quality of EV charging points was scored based on availability of factors (how safe people felt using them, the quality of a mobile phone signal, whether there were any public conveniences nearby, how scenic the location was, and other amenities nearby). It pulled in data from OS Open Map Local and added open data sources such as Toilet map, CodePoint and UPRN from OS for mobile signal and crime rate open data. Longer term the aim was to understand data about how long people stay at charging points based on its quality and location.&lt;/p&gt;

&lt;p&gt;OS’s Head of Geovation Carly Morris said: “It is great to see the combined efforts of start-ups, private enterprise and the public sector, working together and to see what great things have come out of that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“A particular highlight for a lot of the judges has been the creativity over the two days. It is an amazing breadth and variation we have seen. Of course, it has only been two days but there is potential for even more impact to come from these ideas and OS wants to work closely with them to help grow and develop these ideas through our Geovation community.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Geospatial Commission’s Head of Policy and hackathon judge Ruth Cookman said: “Innovative uses of location data will be vital in enabling the UK’s pathway to net zero and transition to electric vehicles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“The OS Map &amp;amp; Hack event demonstrated the huge potential of location data and where this impact could be realised — from optimising the location of new infrastructure to improving consumer experience. As a judge, it was impressive to see the amount teams achieved in the two days, including the creativity, complexity and range of ideas.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ODI’s Head of Consultancy for Data Programmes and hackathon judge Lisa Allen added: “Geospatial data is core data infrastructure and is a vital component of resilient modern societies. It is as essential as roads, railways and the electricity network. Not only in Great Britain but around the world. Events like this help drive innovation, can be a catalyst for growth and build economic and social prosperity in the long run by giving a platform for novel ideas to surface.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To learn more and explore the Data Hub, visit &lt;a href="https://osdatahub.os.uk/?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=hackathon-winners"&gt;osdatahub.co.uk&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ordnancesurvey</category>
      <category>programming</category>
      <category>hackathon</category>
    </item>
  </channel>
</rss>
