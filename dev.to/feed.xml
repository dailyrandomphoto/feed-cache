<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Is Machine Learning generated music finally useful? [for Indie Game Devs]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 10 Oct 2021 17:52:10 +0000</pubDate>
      <link>https://dev.to/inhuofficial/is-machine-learning-generated-music-finally-useful-for-indie-game-devs-1flp</link>
      <guid>https://dev.to/inhuofficial/is-machine-learning-generated-music-finally-useful-for-indie-game-devs-1flp</guid>
      <description>&lt;p&gt;A short post about a service I stumbled across called AIVA.&lt;/p&gt;

&lt;p&gt;I have been working on systemising my processes for content creation. &lt;/p&gt;

&lt;p&gt;One thing that I want to do is to create some YouTube shorts (1-2 minute videos, same as TikTok / Instagram stories type videos) and I was looking for some subtle background music that wouldn't be copyrighted.&lt;/p&gt;

&lt;p&gt;While searching I stumbled across &lt;a href="https://aiva.ai/"&gt;https://aiva.ai/&lt;/a&gt; - a service to generate AI music.&lt;/p&gt;

&lt;p&gt;As with anything new and interesting, I had to have a play!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-impressions"&gt;
  &lt;/a&gt;
  First impressions
&lt;/h2&gt;

&lt;p&gt;It was easy to use, even for a dummy like me!&lt;/p&gt;

&lt;p&gt;You just select a few things such as what style of music / instrumentation you want, duration (up to 3 minutes for free tier), tempo, key and time signature and then select how many tracks you want the AI to produce (up to 5 at a time).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UpG_b3aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/err1f9febjvtvhpgagtk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UpG_b3aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/err1f9febjvtvhpgagtk.jpg" alt="Screen allowing you to set the instrumentation, duration, tempo, key that you would like AIVA to generate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you press "Create Your Track" and wait for a minute or two.&lt;/p&gt;

&lt;p&gt;You can then listen to the AI masterpiece...or disaster!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-results"&gt;
  &lt;/a&gt;
  Consistency / results
&lt;/h2&gt;

&lt;p&gt;From about 100 tracks I generated I would say that 1 in 15 tracks are decent enough that you could possibly use them, a lot of them end up with too heavy a drum beat or some weird transitions etc.&lt;/p&gt;

&lt;p&gt;Despite that I am impressed with the results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-enough-for-indie-game-developers"&gt;
  &lt;/a&gt;
  Good enough for Indie game developers?
&lt;/h2&gt;

&lt;p&gt;They aren't perfect, but if you have next to no budget for sound tracks they will probably be good enough! &lt;/p&gt;

&lt;p&gt;I found about 6 tracks that I think would work for a low budget Indie game, which isn't bad considering I did no editing on the tracks (other than removing some weird bits from the end of the first example below).&lt;/p&gt;

&lt;p&gt;With a bit of work and tweaking I imagine you could make them feel like high quality pieces composed just for the game. &lt;/p&gt;

&lt;p&gt;Or at the very least use them as inspiration pieces to make the ideation part of music design a lot shorter (and therefore a lot cheaper!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Here are three examples I downloaded of tracks that I think are pretty much good enough for usage.&lt;/p&gt;

&lt;p&gt;I have given them some fun names and the sort of game I think they would work for, enjoy AIVAs work!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-draigon-born"&gt;
  &lt;/a&gt;
  Example 1 - DrAIgon born
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/1//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-pairates-adventures"&gt;
  &lt;/a&gt;
  Example 2 - PAIrates Adventures
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-in-spaice-no-one-can-hear-you-scraim"&gt;
  &lt;/a&gt;
  Example 3 - In SpAIce, no one can hear you scrAIm
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-do-you-think"&gt;
  &lt;/a&gt;
  So what do you think?
&lt;/h2&gt;

&lt;p&gt;Do you think Machine Learning has come far enough to generate some useful music / sound tracks?&lt;/p&gt;

&lt;p&gt;Could you picture a game with one of these sound tracks in it?&lt;/p&gt;

&lt;p&gt;I personally think some of the Hip Hop, Low-Fi and Easy Listening stuff it produces would make great background music for streams and videos (the main reason I am exploring the service) with a very slim chance of a copyright strike! &lt;/p&gt;

&lt;p&gt;I would encourage you to have a play yourself and see what you think!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quick-poll"&gt;
  &lt;/a&gt;
  Quick Poll
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/mVI1C_cFsibjD0kNayrE1/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Cover image: &lt;a href="https://unsplash.com/photos/U3sOwViXhkY?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt; &lt;/p&gt;

</description>
      <category>music</category>
      <category>machinelearning</category>
      <category>discuss</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>How to Enable SSL for Local Laravel Sail Development Caddy and Docker</title>
      <author>Adrian Mejias</author>
      <pubDate>Sun, 10 Oct 2021 17:21:02 +0000</pubDate>
      <link>https://dev.to/adrianmejias/how-to-enable-ssl-for-local-development-using-laravel-sail-and-docker-51ee</link>
      <guid>https://dev.to/adrianmejias/how-to-enable-ssl-for-local-development-using-laravel-sail-and-docker-51ee</guid>
      <description>&lt;p&gt;Let's talk SSL and local development; don't worry, I've been searching too.&lt;/p&gt;

&lt;p&gt;There is an issue with developing locally, not just with &lt;code&gt;Laravel&lt;/code&gt;, where developers who are building saas products aren't able to get a &lt;code&gt;clean&lt;/code&gt; setup for &lt;code&gt;SSL&lt;/code&gt; in the browser. This makes setting things up like &lt;code&gt;PWA&lt;/code&gt;s or &lt;code&gt;Google&lt;/code&gt; sign-in buttons impossible if the certificate isn't valid.&lt;/p&gt;

&lt;p&gt;Given the power of &lt;code&gt;Docker&lt;/code&gt; and &lt;code&gt;Caddy&lt;/code&gt;, the dream is real. You can absolutely use this for non-Laravel &lt;code&gt;Sail&lt;/code&gt; web applications as well.&lt;/p&gt;

&lt;p&gt;The end result of implementing the code below should give you a couple of certificates &lt;code&gt;(intermediate.crt, laravel.test.crt)&lt;/code&gt; that you can install to your local system.&lt;/p&gt;

&lt;p&gt;GitHub Gist: &lt;a href="https://gist.github.com/adrianmejias/0997f2b8a20715428f594a4798e034f5"&gt;https://gist.github.com/adrianmejias/0997f2b8a20715428f594a4798e034f5&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker/

&lt;ul&gt;
&lt;li&gt;caddy/&lt;/li&gt;
&lt;li&gt;authorities/ (intermediate.crt)&lt;/li&gt;
&lt;li&gt;certificates/

&lt;ul&gt;
&lt;li&gt;laravel.test/ (laravel.test.crt)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Caddyfile&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;start-container&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  docker-compose.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="na"&gt;laravel.test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Comment or remove ports&lt;/span&gt;
        &lt;span class="c1"&gt;# ports:&lt;/span&gt;
        &lt;span class="c1"&gt;#     - "${APP_PORT:-80}:80"&lt;/span&gt;
   &lt;span class="c1"&gt;# ...&lt;/span&gt;
   &lt;span class="na"&gt;caddy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy"&lt;/span&gt;
            &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile&lt;/span&gt;
            &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;WWWGROUP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${WWWGROUP}"&lt;/span&gt;
        &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${APP_PORT:-80}:80"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${APP_SSL_PORT:-443}:443"&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;LARAVEL_SAIL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="na"&gt;HOST_DOMAIN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;laravel.test&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/Caddyfile:/etc/caddy/Caddyfile"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.:/srv:cache"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/certificates:/data/caddy/certificates/local"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/authorities:/data/caddy/pki/authorities/local"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sailcaddy:/data:cache"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sailcaddyconfig:/config:cache"&lt;/span&gt;
        &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sail&lt;/span&gt;
        &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;laravel.test&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="na"&gt;sailcaddy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;sailcaddyconfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddydockerfile"&gt;
  &lt;/a&gt;
  docker/caddy/Dockerfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; caddy:alpine&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Adrian Mejias"&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; WWWGROUP&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; TZ=UTC&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-snf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class="nv"&gt;$TZ&lt;/span&gt; /etc/localtime &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$TZ&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/timezone

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; bash &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; nss-tools &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup &lt;span class="nt"&gt;-S&lt;/span&gt; &lt;span class="nv"&gt;$WWWGROUP&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;adduser &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="nv"&gt;$WWWGROUP&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; 1337 &lt;span class="nt"&gt;-S&lt;/span&gt; sail

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; start-container /usr/local/bin/start-container&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x /usr/local/bin/start-container

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["start-container"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddystartcontainer"&gt;
  &lt;/a&gt;
  docker/caddy/start-container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WWWUSER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;addgroup &lt;span class="nv"&gt;$WWWUSER&lt;/span&gt; sail
&lt;span class="k"&gt;fi

if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# @todo find alpine equivilent of below&lt;/span&gt;
    &lt;span class="c"&gt;# exec gosu $WWWUSER "$@"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    /usr/bin/caddy run &lt;span class="nt"&gt;--config&lt;/span&gt; /etc/caddy/Caddyfile &lt;span class="nt"&gt;--adapter&lt;/span&gt; caddyfile
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddycaddyfile"&gt;
  &lt;/a&gt;
  docker/caddy/Caddyfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    admin off
    # debug

    on_demand_tls {
        ask http://laravel.test/caddy
    }

    local_certs
}

:80 {
    reverse_proxy laravel.test {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Port 443
        # header_up X-Forwarded-Proto {scheme}

        health_timeout 5s
    }
}

:443 {
    tls internal {
        on_demand
    }

    reverse_proxy laravel.test {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Port 443
        # header_up X-Forwarded-Proto {scheme}

        health_timeout 5s
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#apphttpcontrollerscaddycontrollerphp"&gt;
  &lt;/a&gt;
  app/Http/Controllers/CaddyController.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaddyController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'domain'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caddy.authorized'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Domain Authorized'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configcaddyphp"&gt;
  &lt;/a&gt;
  config/caddy.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Authorized Domains
    |--------------------------------------------------------------------------
    |
    | Domains that are authorized to be viewed through Caddy.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'authorized'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'laravel.test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// 'app.laravel.test',&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#apphttpmiddlewaretrustproxiesphp"&gt;
  &lt;/a&gt;
  app/Http/Middleware/TrustProxies.php
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Middleware&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Middleware\TrustProxies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TrustProxies&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Middleware&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * The trusted proxies for this application.
     *
     * @var array|string|null
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Add wildcard or specific domain(s)&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_FOR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_HOST&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_PORT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_PROTO&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_AWS_ELB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routeswebphp"&gt;
  &lt;/a&gt;
  routes/web.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\CaddyController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/caddy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CaddyController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caddy'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>ssl</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Dotnet code generation overview by example</title>
      <author>Maxim Tkachenko</author>
      <pubDate>Sun, 10 Oct 2021 17:06:55 +0000</pubDate>
      <link>https://dev.to/maximtkachenko/dotnet-code-generation-overview-by-example-1m16</link>
      <guid>https://dev.to/maximtkachenko/dotnet-code-generation-overview-by-example-1m16</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Code generation is a very interesting topic. Instead of just writing code you can write code to write code. You can do code generation at compile time (new fancy source generators) and at runtime (expressions, emit IL). Anyway the idea to create methods and classes at runtime sounds like a magic to me. Runtime code generation feature is used quite heavily under the hood of DI frameworks, ORMs, different types of object mappers etc. Now when I have a sufficient understanding of the topic I realized that in the past I had some tasks which could be solved in more efficient and elegant way by using code generation. Unfortunately during those times I knew nothing about it. Searching the internet gave me results with quite high entry threshold and they didn't give an entire understanding of the feature. Most of examples in articles are quite trivial so it's still unclear how to apply it in practice. Here as the first step I want to describe a particular problem which could be solved with &lt;a href="https://en.wikipedia.org/wiki/Metaprogramming"&gt;metaprogramming&lt;/a&gt; and then to give an overview of different code generation approaches. There will be a lot of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-description"&gt;
  &lt;/a&gt;
  Task description
&lt;/h2&gt;

&lt;p&gt;Let's imagine our application receives a data from some source as an array of strings (for simplicity only string, integer and datetime values are expected in an input array):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;["John McClane", "1994-11-05T13:15:30", "4455"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I need a generic way to parse this input into the instance of a particular class. This is an interface to create a parser delegate (i.e. it accepts an array of strings as the input and returns an instance of &lt;code&gt;T&lt;/code&gt; as the output):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public interface IParserFactory
{
    Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use &lt;code&gt;ParserOutputAttribute&lt;/code&gt; to identify classes used as parser's output. And I use &lt;code&gt;ArrayIndexAttribute&lt;/code&gt; to understand which property corresponds to each of the array elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ParserOutput]
public class Data
{
    [ArrayIndex(0)] public string Name { get; set; } // will be "John McClane"
    [ArrayIndex(2)] public int Number { get; set; } // will be 4455
    [ArrayIndex(1)] public DateTime Birthday { get; set; } // will be 1994-11-05T13:15:30
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If array element can't be parsed to the target type then it's ignored.&lt;br&gt;
So as a general idea I don't want to limit implementation by &lt;code&gt;Data&lt;/code&gt; class only. I want to produce a parser delegate for any type with the proper attributes. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#plain-c"&gt;
  &lt;/a&gt;
  Plain C#
&lt;/h2&gt;

&lt;p&gt;First of all I want to write a plain C# code without code generation or reflection at all for a known type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var data = new Data();
if (0 &amp;lt; inputArray.Length)
{
    data.Name = inputArray[0];
}
if (1 &amp;lt; inputArray.Length &amp;amp;&amp;amp; DateTime.TryParse(inputArray[1], out var bd))
{
    data.Birthday = bd;
}
if (2 &amp;lt; inputArray.Length &amp;amp;&amp;amp; int.TryParse(inputArray[2], out var n))
{
    data.Number = n;
}
return data;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quite simple, right? But now I want to generate the same code for an arbitrary type at runtime or compile time. Let's go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reflection"&gt;
  &lt;/a&gt;
  Reflection
&lt;/h2&gt;

&lt;p&gt;In the first approach with &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection"&gt;reflection&lt;/a&gt; I'm not going to generate a parser delegate. Instead I'm going to create an instance of the target type and set its properties using reflection API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class ReflectionParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        return ArrayIndexParse&amp;lt;T&amp;gt;;
    }

    private static T ArrayIndexParse&amp;lt;T&amp;gt;(string[] data) where T : new()
    {
        // create a new instance of target type
        var instance = new T();
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        //go through all public and non-static properties
        //read and parse corresponding element in array and if success - set property value
        for (int i = 0; i &amp;lt; props.Length; i++)
        {
            var attrs = props[i].GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0 || order &amp;gt;= data.Length) continue;

            if (props[i].PropertyType == typeof(string))
            {
                props[i].SetValue(instance, data[order]);
                continue;
            }

            if (props[i].PropertyType == typeof(int))
            {
                if (int.TryParse(data[order], out var intResult))
                {
                    props[i].SetValue(instance, intResult);
                }

                continue;
            }

            if (props[i].PropertyType == typeof(DateTime))
            {
                if (DateTime.TryParse(data[order], out var dtResult))
                {
                    props[i].SetValue(instance, dtResult);
                }
            }
        }
        return instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works and it's quite readable. But it's &lt;a href="https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/"&gt;slow&lt;/a&gt; (check &lt;a href="#benchmarks"&gt;benchmarks&lt;/a&gt; section below too). If you want to call this code very often it could be an issue. I want to implement something more sophisticated using &lt;strong&gt;real&lt;/strong&gt; code generation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-generation"&gt;
  &lt;/a&gt;
  Code generation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#expression-trees"&gt;
  &lt;/a&gt;
  Expression trees
&lt;/h3&gt;

&lt;p&gt;From the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/"&gt;official documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Expression trees represent code in a tree-like data structure, where each node is an expression, for example, a method call or a binary operation such as x &amp;lt; y. You can compile and run code represented by expression trees.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/how-to-execute-expression-trees"&gt;How to execute expression trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions?view=netcore-3.1#classes"&gt;Expression classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Expression trees give primitive building blocks like &lt;code&gt;Expression.Call&lt;/code&gt; to call a method, &lt;code&gt;Expression.Loop&lt;/code&gt; to add some repeating logic etc. Then using these blocks we build a parser delegate as a &lt;code&gt;tree&lt;/code&gt; of instructions and finally compile it into the delegate at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class ExpressionTreeParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        //declare an input parameter of the delegate
        ParameterExpression inputArray = Expression.Parameter(typeof(string[]), "inputArray");
        //declare an output parameter of the delegate
        ParameterExpression instance = Expression.Variable(typeof(T), "instance");

        //create a new instance of target type
        var block = new List&amp;lt;Expression&amp;gt;
        {
            Expression.Assign(instance, Expression.New(typeof(T).GetConstructors()[0]))
        };
        var variables = new List&amp;lt;ParameterExpression&amp;gt; {instance};

        //go through all public and non-static properties
        foreach (var prop in props)
        {
            var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0) continue;

            //validate an index from ArrayIndexAttribute
            var orderConst = Expression.Constant(order);
            var orderCheck = Expression.LessThan(orderConst, Expression.ArrayLength(inputArray));

            if (prop.PropertyType == typeof(string))
            {
                //set string property
                var stringPropertySet = Expression.Assign(
                    Expression.Property(instance, prop),
                    Expression.ArrayIndex(inputArray, orderConst));

                block.Add(Expression.IfThen(orderCheck, stringPropertySet));
                continue;
            }

            //get parser method from the list of available parsers (currently we parse only Int and DateTime)
            if (!TypeParsers.Parsers.TryGetValue(prop.PropertyType, out var parser))
            {
                continue;
            }

            var parseResult = Expression.Variable(prop.PropertyType, "parseResult");
            var parserCall = Expression.Call(parser, Expression.ArrayIndex(inputArray, orderConst), parseResult);
            var propertySet = Expression.Assign(
                Expression.Property(instance, prop),
                parseResult);

            //set property if an element of array is successfully parsed
            var ifSet = Expression.IfThen(parserCall, propertySet);

            block.Add(Expression.IfThen(orderCheck, ifSet));
            variables.Add(parseResult);
        }

        block.Add(instance);

        //compile lambda expression into delegate
        return Expression.Lambda&amp;lt;Func&amp;lt;string[], T&amp;gt;&amp;gt;(
            Expression.Block(variables.ToArray(), Expression.Block(block)), 
            inputArray).Compile();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#emit-il"&gt;
  &lt;/a&gt;
  Emit IL
&lt;/h3&gt;

&lt;p&gt;Dotnet compiler transforms your C# code into intermediate language (&lt;a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language"&gt;CIL or just IL&lt;/a&gt;) and then dotnet runtime translates IL into machine instructions. For instance, using &lt;a href="https://sharplab.io/"&gt;sharplab.io&lt;/a&gt; you can easily check how generated IL will look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDgpcrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtkachenko.me/blog/assets/sharplab_msil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDgpcrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtkachenko.me/blog/assets/sharplab_msil.png" alt="C# and corresponding IL from https://sharplab.io/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit?view=net-5.0"&gt;System.Reflection.Emit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods"&gt;How to: Define and Execute Dynamic Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes?view=netcore-3.1#fields"&gt;OpCodes list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/help/resharper/Viewing_Intermediate_Language.html"&gt;ReSharper IL viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we are going to write ("emit") IL instructions directly and then compile them into the delegate at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class EmitIlParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        var dm = new DynamicMethod($"from_{typeof(string[]).FullName}_to_{typeof(T).FullName}", 
            typeof(T), new [] { typeof(string[]) }, typeof(EmitIlParserFactory).Module);
        var il = dm.GetILGenerator();

        //create a new instance of target type
        var instance = il.DeclareLocal(typeof(T));
        il.Emit(OpCodes.Newobj, typeof(T).GetConstructors()[0]);
        il.Emit(OpCodes.Stloc, instance);

        //go through all public and non-static properties
        foreach (var prop in props)
        {
            var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0) continue;

            var label = il.DefineLabel();

            if (prop.PropertyType == typeof(string))
            {
                //check whether order from ArrayIndexAttribute is a valid index of the input array
                il.Emit(OpCodes.Ldc_I4, order);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldlen);
                il.Emit(OpCodes.Bge_S, label);

                //set string property
                il.Emit(OpCodes.Ldloc, instance);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldc_I4, order);
                il.Emit(OpCodes.Ldelem_Ref);
                il.Emit(OpCodes.Callvirt, prop.GetSetMethod());

                il.MarkLabel(label);
                continue;
            }

            //get parser method from the list of available parsers (currently we parse only Int and DateTime)
            if (!TypeParsers.Parsers.TryGetValue(prop.PropertyType, out var parser))
            {
                continue;
            }

            //check whether order from ArrayIndexAttribute is a valid index of the input array
            il.Emit(OpCodes.Ldc_I4, order);
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldlen);
            il.Emit(OpCodes.Bge_S, label);

            var parseResult = il.DeclareLocal(prop.PropertyType);

            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldc_I4, order);
            il.Emit(OpCodes.Ldelem_Ref);
            il.Emit(OpCodes.Ldloca, parseResult);
            il.EmitCall(OpCodes.Call, parser, null);
            il.Emit(OpCodes.Brfalse_S, label);

            //set property if an element of array is successfully parsed
            il.Emit(OpCodes.Ldloc, instance);
            il.Emit(OpCodes.Ldloc, parseResult);
            il.Emit(OpCodes.Callvirt, prop.GetSetMethod());

            il.MarkLabel(label);
        }

        il.Emit(OpCodes.Ldloc, instance);
        il.Emit(OpCodes.Ret);

        //create delegate from il instructions
        return (Func&amp;lt;string[], T&amp;gt;)dm.CreateDelegate(typeof(Func&amp;lt;string[], T&amp;gt;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sigil"&gt;
  &lt;/a&gt;
  Sigil
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kevin-montrose/Sigil"&gt;A fail-fast validating helper for .NET CIL generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach is quite similar to the previous one, but now we use sigil which gives us a syntax sugar and more understandable error messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class SigilParserFactory : IParserFactory
{
    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        var props = typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public);

        var il = Emit&amp;lt;Func&amp;lt;string[], T&amp;gt;&amp;gt;.NewDynamicMethod($"from_{typeof(string[]).FullName}_to_{typeof(T).FullName}");

        var instance = il.DeclareLocal&amp;lt;T&amp;gt;();
        il.NewObject&amp;lt;T&amp;gt;();
        il.StoreLocal(instance);

        foreach (var prop in props)
        {
            var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
            if (attrs.Length == 0) continue;

            int order = ((ArrayIndexAttribute)attrs[0]).Order;
            if (order &amp;lt; 0) continue;

            var label = il.DefineLabel();

            if (prop.PropertyType == typeof(string))
            {
                il.LoadConstant(order);
                il.LoadArgument(0);
                il.LoadLength&amp;lt;string&amp;gt;();
                il.BranchIfGreaterOrEqual(label);

                il.LoadLocal(instance);
                il.LoadArgument(0);
                il.LoadConstant(order);
                il.LoadElement&amp;lt;string&amp;gt;();
                il.CallVirtual(prop.GetSetMethod());

                il.MarkLabel(label);
                continue;
            }

            if (!TypeParsers.Parsers.TryGetValue(prop.PropertyType, out var parser))
            {
                continue;
            }

            il.LoadConstant(order);
            il.LoadArgument(0);
            il.LoadLength&amp;lt;string&amp;gt;();
            il.BranchIfGreaterOrEqual(label);

            var parseResult = il.DeclareLocal(prop.PropertyType);

            il.LoadArgument(0);
            il.LoadConstant(order);
            il.LoadElement&amp;lt;string&amp;gt;();
            il.LoadLocalAddress(parseResult);
            il.Call(parser);
            il.BranchIfFalse(label);

            il.LoadLocal(instance);
            il.LoadLocal(parseResult);
            il.CallVirtual(prop.GetSetMethod());

            il.MarkLabel(label);
        }

        il.LoadLocal(instance);
        il.Return();

        return il.CreateDelegate();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cache-compiled-parsers"&gt;
  &lt;/a&gt;
  Cache compiled parsers
&lt;/h3&gt;

&lt;p&gt;We have implemented three approaches to create a parser delegate: expression tree, emit IL and sigil. In all cases we have the same problem: &lt;code&gt;IParserFactory.GetParser&lt;/code&gt; does a hard job (builiding an expression tree or emitting IL and then creating delegate) every time you call it. Solution is quite simple - just cache it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class CachedParserFactory : IParserFactory
{
    private readonly IParserFactory _realParserFactory;
    private readonly ConcurrentDictionary&amp;lt;string, Lazy&amp;lt;object&amp;gt;&amp;gt; _cache;

    public CachedParserFactory(IParserFactory realParserFactory)
    {
        _realParserFactory = realParserFactory;
        _cache = new ConcurrentDictionary&amp;lt;string, Lazy&amp;lt;object&amp;gt;&amp;gt;();
    }

    public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new()
    {
        return (Func&amp;lt;string[], T&amp;gt;)(_cache.GetOrAdd($"aip_{_realParserFactory.GetType().FullName}_{typeof(T).FullName}", 
            new Lazy&amp;lt;object&amp;gt;(() =&amp;gt; _realParserFactory.GetParser&amp;lt;T&amp;gt;(), LazyThreadSafetyMode.ExecutionAndPublication)).Value);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we reuse compiled versions of delegates which is more efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roslyn-based-approaches"&gt;
  &lt;/a&gt;
  Roslyn based approaches
&lt;/h3&gt;

&lt;p&gt;Roslyn is a dotnet compiler platform which doesn't only compile code but gives an ability to do syntax analysis and to generate code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#roslyn-runtime-code-generation"&gt;
  &lt;/a&gt;
  Roslyn runtime code generation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gunnarpeipman.com/using-roslyn-to-build-object-to-object-mapper/amp/"&gt;Using Roslyn to build object to object mapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Roslyn approach is quite interesting because it gives an ability to write plain C# (as a string though) instead of writing IL instructions or combining  expression tree blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static class RoslynParserInitializer
{
    public static IParserFactory CreateFactory()
    {
        //get all types marked with ParserOutputAttribute
        var targetTypes =
            (from a in AppDomain.CurrentDomain.GetAssemblies()
                from t in a.GetTypes()
                let attributes = t.GetCustomAttributes(typeof(ParserOutputAttribute), true)
                where attributes != null &amp;amp;&amp;amp; attributes.Length &amp;gt; 0
                select t).ToArray();

        var typeNames = new List&amp;lt;(string TargetTypeName, string TargetTypeFullName, string TargetTypeParserName)&amp;gt;();
        var builder = new StringBuilder();
        builder.AppendLine(@"
using System;
using Parsers.Common;

public class RoslynGeneratedParserFactory : IParserFactory 
{");
        //go through all types
        foreach (var targetType in targetTypes)
        {
            var targetTypeName = targetType.Name;
            var targetTypeFullName = targetType.FullName;
            var targetTypeParserName = targetTypeName + "Parser";
            typeNames.Add((targetTypeName, targetTypeFullName, targetTypeParserName));

            //generate private parser method for each target type
            builder.AppendLine($"private static T {targetTypeParserName}&amp;lt;T&amp;gt;(string[] input)");

            builder.Append($@"
{{
var {targetTypeName}Instance = new {targetTypeFullName}();");

            var props = targetType.GetProperties(BindingFlags.Instance | BindingFlags.Public);

            //go through all properties of the target type
            foreach (var prop in props)
            {
                var attrs = prop.GetCustomAttributes(typeof(ArrayIndexAttribute)).ToArray();
                if (attrs.Length == 0) continue;

                int order = ((ArrayIndexAttribute)attrs[0]).Order;
                if (order &amp;lt; 0) continue;

                if (prop.PropertyType == typeof(string))
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length)
{{
{targetTypeName}Instance.{prop.Name} = input[{order}];
}}
");
                }

                if (prop.PropertyType == typeof(int))
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; int.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }

                if (prop.PropertyType == typeof(DateTime))
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; DateTime.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }
            }

            builder.Append($@"
object obj = {targetTypeName}Instance;
return (T)obj;
}}");
        }

        builder.AppendLine("public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new() {");
        foreach (var typeName in typeNames)
        {
            builder.Append($@"
if (typeof(T) == typeof({typeName.TargetTypeFullName}))
{{
return {typeName.TargetTypeParserName}&amp;lt;T&amp;gt;;
}}
");
        }
        builder.AppendLine("throw new NotSupportedException();}");

        builder.AppendLine("}");

        var syntaxTree = CSharpSyntaxTree.ParseText(builder.ToString());

        //reference assemblies
        string assemblyName = Path.GetRandomFileName();
        var refPaths = new List&amp;lt;string&amp;gt; {
            typeof(Object).GetTypeInfo().Assembly.Location,
            typeof(Enumerable).GetTypeInfo().Assembly.Location,
            Path.Combine(Path.GetDirectoryName(typeof(GCSettings).GetTypeInfo().Assembly.Location), "System.Runtime.dll"),
            typeof(RoslynParserInitializer).GetTypeInfo().Assembly.Location,
            typeof(IParserFactory).GetTypeInfo().Assembly.Location,
            Path.Combine(Path.GetDirectoryName(typeof(GCSettings).GetTypeInfo().Assembly.Location), "netstandard.dll"),
        };
        refPaths.AddRange(targetTypes.Select(x =&amp;gt; x.Assembly.Location));

        var references = refPaths.Select(r =&amp;gt; MetadataReference.CreateFromFile(r)).ToArray();

        // compile dynamic code
        var compilation = CSharpCompilation.Create(
            assemblyName,
            syntaxTrees: new[] { syntaxTree },
            references: references,
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        //compile assembly
        using (var ms = new MemoryStream())
        {
            var result = compilation.Emit(ms);

            //to get a proper errors
            if (!result.Success)
            {
                throw new Exception(string.Join(",", result.Diagnostics.Where(diagnostic =&amp;gt;
                    diagnostic.IsWarningAsError ||
                    diagnostic.Severity == DiagnosticSeverity.Error).Select(x =&amp;gt; x.GetMessage())));
            }
            ms.Seek(0, SeekOrigin.Begin);

            // load assembly from memory
            var assembly = AssemblyLoadContext.Default.LoadFromStream(ms);

            var factoryType = assembly.GetType("RoslynGeneratedParserFactory");
            if (factoryType == null) throw new NullReferenceException("Roslyn generated parser type not found");

            //create an instance of freshly generated parser factory
            return (IParserFactory)Activator.CreateInstance(factoryType);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#source-generator"&gt;
  &lt;/a&gt;
  Source generator
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Overview of source generators from the &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"&gt;official documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source generator gives a very interesting ability of building parser's delegate during the compilation step, i.e. in advance. So in that case we don't have any runtime overhead to build a parser delegate at the first time which is amazing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Generator]
public class ParserSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        //uncomment to debug
        //System.Diagnostics.Debugger.Launch();
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var compilation = context.Compilation;
        var parserOutputTypeSymbol = compilation.GetTypeByMetadataName("Parsers.Common.ParserOutputAttribute");
        var attributeIndexTypeSymbol = compilation.GetTypeByMetadataName("Parsers.Common.ArrayIndexAttribute");
        var typesToParse = new List&amp;lt;ITypeSymbol&amp;gt;();

        foreach (var syntaxTree in compilation.SyntaxTrees)
        {
            var semanticModel = compilation.GetSemanticModel(syntaxTree);

            //get all types marked with ParserOutputAttribute
            typesToParse.AddRange(syntaxTree.GetRoot()
                .DescendantNodesAndSelf()
                .OfType&amp;lt;ClassDeclarationSyntax&amp;gt;()
                .Select(x =&amp;gt; semanticModel.GetDeclaredSymbol(x))
                .OfType&amp;lt;ITypeSymbol&amp;gt;()
                .Where(x =&amp;gt; x.GetAttributes().Select(a =&amp;gt; a.AttributeClass)
                    .Any(b =&amp;gt; b == parserOutputTypeSymbol)));
        }

        var typeNames = new List&amp;lt;(string TargetTypeName, string TargetTypeFullName, string TargetTypeParserName)&amp;gt;();
        var builder = new StringBuilder();
        builder.AppendLine(@"
using System;
using Parsers.Common;
namespace BySourceGenerator
{
public class Parser : IParserFactory 
{");

        //go through all types
        foreach (var typeSymbol in typesToParse)
        {
            var targetTypeName = typeSymbol.Name;
            var targetTypeFullName = GetFullName(typeSymbol);
            var targetTypeParserName = targetTypeName + "Parser";
            typeNames.Add((targetTypeName, targetTypeFullName, targetTypeParserName));
            builder.AppendLine($"private static T {targetTypeParserName}&amp;lt;T&amp;gt;(string[] input)");

            builder.Append($@"
{{
var {targetTypeName}Instance = new {targetTypeFullName}();");

            var props = typeSymbol.GetMembers().OfType&amp;lt;IPropertySymbol&amp;gt;();

            //go through all properties of the target type
            foreach (var prop in props)
            {
                var attr = prop.GetAttributes().FirstOrDefault(x =&amp;gt; x.AttributeClass == attributeIndexTypeSymbol);
                if (attr == null || !(attr.ConstructorArguments[0].Value is int)) continue;

                int order = (int) attr.ConstructorArguments[0].Value;
                if (order &amp;lt; 0) continue;

                if (GetFullName(prop.Type) == "System.String")
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length)
{{
{targetTypeName}Instance.{prop.Name} = input[{order}];
}}
");
                }

                if (GetFullName(prop.Type) == "System.Int32")
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; int.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }

                if (GetFullName(prop.Type) == "System.DateTime")
                {
                    builder.Append($@"
if({order} &amp;lt; input.Length &amp;amp;&amp;amp; DateTime.TryParse(input[{order}], out var parsed{prop.Name}))
{{
{targetTypeName}Instance.{prop.Name} = parsed{prop.Name};
}}
");
                }
            }

            builder.Append($@"
object obj = {targetTypeName}Instance;
return (T)obj;
}}");
        }

        builder.AppendLine("public Func&amp;lt;string[], T&amp;gt; GetParser&amp;lt;T&amp;gt;() where T : new() {");
        foreach (var typeName in typeNames)
        {
            builder.Append($@"
if (typeof(T) == typeof({typeName.TargetTypeFullName}))
{{
return {typeName.TargetTypeParserName}&amp;lt;T&amp;gt;;
}}
");
        }

        builder.AppendLine("throw new NotSupportedException();}");

        builder.AppendLine("}}");

        var src = builder.ToString();
        context.AddSource(
            "ParserGeneratedBySourceGenerator.cs",
            SourceText.From(src, Encoding.UTF8)
        );
    }

    private static string GetFullName(ITypeSymbol typeSymbol) =&amp;gt;
        $"{typeSymbol.ContainingNamespace}.{typeSymbol.Name}";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;The post wouldn't be comprehensive without benchmarks. I would like to compare two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;warm up step, i.e. generation of parser;&lt;/li&gt;
&lt;li&gt;invocation of already generated parser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Benchmarks are measured using &lt;a href="https://github.com/dotnet/BenchmarkDotNet"&gt;BenchmarkDotNet&lt;/a&gt;. &lt;code&gt;μs&lt;/code&gt; - microsecond, &lt;code&gt;ns&lt;/code&gt; - nanosecond, 1 μs = 1000 ns.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19043.1237 (21H1/May2021Update)
Intel Core i7-8550U CPU 1.80GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores
.NET SDK=5.0.401
  [Host]     : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT
  DefaultJob : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#generation-of-parser"&gt;
  &lt;/a&gt;
  Generation of parser
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;  Method&lt;/th&gt;
&lt;th&gt;  Mean&lt;/th&gt;
&lt;th&gt; Error&lt;/th&gt;
&lt;th&gt;StdDev&lt;/th&gt;
&lt;th&gt;Gen 0&lt;/th&gt;
&lt;th&gt;Gen 1&lt;/th&gt;
&lt;th&gt;Gen 2&lt;/th&gt;
&lt;th&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EmitIl&lt;/td&gt;
&lt;td&gt;22.02 μs&lt;/td&gt;
&lt;td&gt;0.495 μs&lt;/td&gt;
&lt;td&gt;1.429 μs&lt;/td&gt;
&lt;td&gt;1.2817&lt;/td&gt;
&lt;td&gt;0.6409&lt;/td&gt;
&lt;td&gt;0.0305&lt;/td&gt;
&lt;td&gt;5 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ExpressionTree&lt;/td&gt;
&lt;td&gt;683.68 μs&lt;/td&gt;
&lt;td&gt;13.609 μs&lt;/td&gt;
&lt;td&gt;31.268 μs&lt;/td&gt;
&lt;td&gt;2.9297&lt;/td&gt;
&lt;td&gt;0.9766&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;14 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sigil&lt;/td&gt;
&lt;td&gt;642.63 μs&lt;/td&gt;
&lt;td&gt;12.305 μs&lt;/td&gt;
&lt;td&gt;29.243 μs&lt;/td&gt;
&lt;td&gt;112.3047&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;460 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Roslyn&lt;/td&gt;
&lt;td&gt;71,605.64 μs&lt;/td&gt;
&lt;td&gt;2,533.732 μs&lt;/td&gt;
&lt;td&gt;7,350.817 μs&lt;/td&gt;
&lt;td&gt;1000.0000&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;5,826 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#invocation-of-parser"&gt;
  &lt;/a&gt;
  Invocation of parser
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;   Method&lt;/th&gt;
&lt;th&gt; Mean&lt;/th&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;th&gt;StdDev&lt;/th&gt;
&lt;th&gt;Ratio&lt;/th&gt;
&lt;th&gt;RatioSD&lt;/th&gt;
&lt;th&gt;Gen 0&lt;/th&gt;
&lt;th&gt;Allocated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EmitIl&lt;/td&gt;
&lt;td&gt;374.7 ns&lt;/td&gt;
&lt;td&gt;7.75 ns&lt;/td&gt;
&lt;td&gt;22.36 ns&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ExpressionTree&lt;/td&gt;
&lt;td&gt;378.1 ns&lt;/td&gt;
&lt;td&gt;7.56 ns&lt;/td&gt;
&lt;td&gt;20.57 ns&lt;/td&gt;
&lt;td&gt;1.03&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reflection&lt;/td&gt;
&lt;td&gt;13,625.0 ns&lt;/td&gt;
&lt;td&gt;272.60 ns&lt;/td&gt;
&lt;td&gt;750.81 ns&lt;/td&gt;
&lt;td&gt;37.29&lt;/td&gt;
&lt;td&gt;2.29&lt;/td&gt;
&lt;td&gt;0.7782&lt;/td&gt;
&lt;td&gt;3,256 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sigil&lt;/td&gt;
&lt;td&gt;378.9 ns&lt;/td&gt;
&lt;td&gt;7.69 ns&lt;/td&gt;
&lt;td&gt;21.06 ns&lt;/td&gt;
&lt;td&gt;1.03&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Roslyn&lt;/td&gt;
&lt;td&gt;404.2 ns&lt;/td&gt;
&lt;td&gt;7.55 ns&lt;/td&gt;
&lt;td&gt;17.80 ns&lt;/td&gt;
&lt;td&gt;1.10&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SourceGenerator&lt;/td&gt;
&lt;td&gt;384.4 ns&lt;/td&gt;
&lt;td&gt;7.79 ns&lt;/td&gt;
&lt;td&gt;21.46 ns&lt;/td&gt;
&lt;td&gt;1.05&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ManuallyWritten&lt;/td&gt;
&lt;td&gt;367.8 ns&lt;/td&gt;
&lt;td&gt;7.36 ns&lt;/td&gt;
&lt;td&gt;15.68 ns&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;td&gt;0.0095&lt;/td&gt;
&lt;td&gt;40 B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;All approaches besides direct usage of reflection give results almost identical to &lt;a href="#plain-c"&gt;manually written C# parser&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;Here is &lt;a href="https://github.com/MaximTkachenko/dotnet-code-generation-overview-by-example"&gt;github repository&lt;/a&gt; with parser factories, unit tests and benchmarks.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>LnipLesson4
</title>
      <author>joinmoin0002</author>
      <pubDate>Sun, 10 Oct 2021 16:51:25 +0000</pubDate>
      <link>https://dev.to/joinmoin0002/lniplesson4-2el</link>
      <guid>https://dev.to/joinmoin0002/lniplesson4-2el</guid>
      <description>&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#include"&gt;
  &lt;/a&gt;
  include 
&lt;/h1&gt;

&lt;p&gt;typedef long long ll;&lt;/p&gt;

&lt;p&gt;int main2() {&lt;br&gt;
  int n = 0;&lt;br&gt;
  int base = 10;&lt;br&gt;
  std::cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; base;&lt;br&gt;
  std::string result;&lt;br&gt;
  while (n &amp;gt; 0) {&lt;br&gt;
    char c = char(n % base) + '0';&lt;br&gt;
    n /= base;&lt;br&gt;
    result += c;&lt;br&gt;
  }&lt;br&gt;
  std::reverse(result.begin(), result.end());&lt;br&gt;
  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;int CharToInt(char c) {&lt;br&gt;
  if (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9') return c - '0';&lt;br&gt;
  if (c &amp;gt;= 'A' &amp;amp;&amp;amp; c &amp;lt;= 'Z') return c - 'A' + 10;&lt;br&gt;
  if (c &amp;gt;= 'a' &amp;amp;&amp;amp; c &amp;lt;= 'z') return c - 'a' + 10;&lt;br&gt;
  throw std::runtime_error("Very Bad Symbol");&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;ll Bebra(std::string&amp;amp; s, int base) {&lt;br&gt;
  ll result = 0;&lt;br&gt;
  // Схема Горнера.&lt;br&gt;
//  result = (((s[0]&lt;em&gt;10 + s[1])&lt;/em&gt; 10 + s[2])*10 + s[3])*10 + ... + s[l-1];&lt;br&gt;
  for (int i = 0; i &amp;lt; s.length(); ++i) {&lt;br&gt;
    result = result * base + CharToInt(s[i]);&lt;br&gt;
  }&lt;br&gt;
  return result;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;int main() {&lt;br&gt;
  std::string s;&lt;br&gt;
  int base = 10;&lt;br&gt;
  std::cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; base;&lt;/p&gt;

&lt;p&gt;try {&lt;br&gt;
    std::cout &amp;lt;&amp;lt; Bebra(s, base) &amp;lt;&amp;lt; std::endl;&lt;br&gt;
  } catch (std::runtime_error&amp;amp; e) {&lt;br&gt;
    std::cout &amp;lt;&amp;lt; e.what();&lt;br&gt;
  }&lt;br&gt;
  return 0;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sphero.instructure.com/courses/4427/pages/star-giveaway-dot-hack-%60-ptiktok-followers-generatorpp-working-at-daily-codes-star-legit-star-working-%24%7Bgar4p0-at-number-giveaway-dot-hack%7D%24"&gt;.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build 10 CSS Projects in 10 days: Project 8</title>
      <author>Amrin</author>
      <pubDate>Sun, 10 Oct 2021 16:49:59 +0000</pubDate>
      <link>https://dev.to/coderamrin/build-10-css-projects-in-10-days-project-8-2bjb</link>
      <guid>https://dev.to/coderamrin/build-10-css-projects-in-10-days-project-8-2bjb</guid>
      <description>&lt;p&gt;This is day 8 and project 8 of Build 10 CSS Projects in 10 days. &lt;br&gt;
If you haven't read the other articles from this series, check them out first. You can find them at the end of this article. &lt;/p&gt;

&lt;p&gt;Today we are going to build &lt;a href="https://www.frontendmentor.io/challenges/base-apparel-coming-soon-page-5d46b47f8db8a7063f9331a0"&gt;"Base Apparel coming soon page&lt;br&gt;
"&lt;/a&gt; from the &lt;a href="https://www.frontendmentor.io/"&gt;Frontendmentor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oVPWeqi7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633424679316/CZPPSJGHZ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oVPWeqi7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633424679316/CZPPSJGHZ.jpeg" alt="desktop-design.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#before-starting"&gt;
  &lt;/a&gt;
  Before starting:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Download the starter files &lt;a href="(https://www.frontendmentor.io/challenges/base-apparel-coming-soon-page-5d46b47f8db8a7063f9331a0)"&gt;from here&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Open the starter files on your code editor. &lt;/li&gt;
&lt;li&gt;Create a style.css file and link it to the HTML file &lt;/li&gt;
&lt;li&gt;And check out the style-guide.md file &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#part-1-html"&gt;
  &lt;/a&gt;
  Part 1: HTML
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- displays site properly based on user's device --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;
      &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"32x32"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./images/favicon-32x32.png"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Frontend Mentor | Base Apparel coming soon page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./images/logo.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./images/hero-mobile.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"hero-mobile"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mobile-hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
          &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;We're&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; coming soon&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            Hello fellow shoppers! We're currently building our new fashion store.
            Add your email below to stay up-to-date with announcements and our
            launch deals.
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email Address"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./images/icon-arrow.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;          
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"right desktop-hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the HTML, copy and paste it. And scan through it once, so that you know what we will be styling. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-css"&gt;
  &lt;/a&gt;
  Part 2: CSS
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300;400;600&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Josefin Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First, we imported the font from google fonts. Then added a box-sizing border-box to every element so the border and padding stay inside the width.&lt;br&gt;&lt;br&gt;
After that, we added the font to the body and removed margin and padding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* main style */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* right */&lt;/span&gt;
&lt;span class="nc"&gt;.desktop-hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("./images/hero-desktop.jpg")&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we centred the container with flex box. Then, gave the left section width of 60% and right section width of 40%. &lt;br&gt;
And added the background image to the right section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNW8H-4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633738415014/DMHKA06IJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNW8H-4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633738415014/DMHKA06IJ.png" alt="screencapture-127-0-0-1-5500-index-html-2021-10-08-18_12_47.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mobile-hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.9rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;135deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;86%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;74%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;74%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this part, we removed the mobile-hero, so it just shows up on mobile. After that, we styled the title, paragraph, and form. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kE-MTgHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633738630615/SDXmWCUnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kE-MTgHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633738630615/SDXmWCUnp.png" alt="screencapture-127-0-0-1-5500-index-html-2021-10-08-18_16_30.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.desktop-hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.mobile-hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
         &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the mobile design. In here we removed the fixed height of the container. And made the title and paragraph a little smaller. &lt;br&gt;
And removed the desktop hero and inserted the mobile hero. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgWGRiEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633738871672/EcF8DGxxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgWGRiEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633738871672/EcF8DGxxv.png" alt="screencapture-127-0-0-1-5500-index-html-2021-10-08-18_19_56.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;That's it for today's project. If you liked the article and want more articles like this one consider following.&lt;br&gt;
You can also connect with me on Twitter &lt;a href="https://twitter.com/CoderAmrin"&gt;@coderamrin&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Thanks for reading.  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build 10 CSS Projects in 10 days: Project 6</title>
      <author>Amrin</author>
      <pubDate>Sun, 10 Oct 2021 16:36:55 +0000</pubDate>
      <link>https://dev.to/coderamrin/build-10-css-projects-in-10-days-project-6-10ae</link>
      <guid>https://dev.to/coderamrin/build-10-css-projects-in-10-days-project-6-10ae</guid>
      <description>&lt;p&gt;Welcome again. This is day 6 and project 6 of Build 10 CSS Projects in 10 days. &lt;br&gt;
If you haven't read the other articles from this series, check them out first. You can find them at the end of this article. &lt;/p&gt;

&lt;p&gt;Today we are going to build &lt;a href="https://www.frontendmentor.io/challenges/intro-component-with-signup-form-5cf91bd49edda32581d28fd1"&gt;"Intro component with sign-up form"&lt;/a&gt; from the &lt;a href="https://www.frontendmentor.io/"&gt;Frontendmentor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3wWGoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633415162598/g_gjVIL5b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3wWGoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633415162598/g_gjVIL5b.jpeg" alt="desktop-design.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#before-starting"&gt;
  &lt;/a&gt;
  Before starting:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Download the starter files &lt;a href="https://www.frontendmentor.io/challenges/intro-component-with-signup-form-5cf91bd49edda32581d28fd1"&gt;from here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Open the starter files on your code editor. &lt;/li&gt;
&lt;li&gt;Create a style.css file and link it to the HTML file &lt;/li&gt;
&lt;li&gt;And check out the style-guide.md file &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are done with the setup. Let's finish this project.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-1-html"&gt;
  &lt;/a&gt;
  Part 1: HTML
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- displays site properly based on user's device --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;
      &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"32x32"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./images/favicon-32x32.png"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Frontend Mentor | Intro component with sign up form&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Learn to code by watching others&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          See how experienced developers solve problems in real-time. Watching
          scripted tutorials is great, but understanding how developers think is
          invaluable.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Try it free 7 days&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; then $20/mo. thereafter
        &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"First Name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Last Name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email Address"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Claim your free trial&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;
            By clicking the button, you are agreeing to our
            &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt; Terms and Services&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/small&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As always copy and paste this HTML to your HTML file and scan through it. So that you know what we are styling. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-css"&gt;
  &lt;/a&gt;
  Part 2: CSS
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("./images/bg-intro-desktop.png")&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;74%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we imported the recommended (in style.md file) font from google fonts. &lt;br&gt;
And removed margin and padding from every element and added box-sizing border box. &lt;/p&gt;

&lt;p&gt;Then added the font, background, image, and color to the body. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLr2f571--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633419688896/QoTskZW3C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLr2f571--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633419688896/QoTskZW3C.png" alt="1.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* main styles */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.9rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we centered the container horizontally and vertically with the flexbox. And gave it a fixed width. &lt;br&gt;
Then we gave the left section width of 50% and some padding. After that, we styled the title and description. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBjR2l4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633421615178/_CKkmLJel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBjR2l4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633421615178/_CKkmLJel.png" alt="2.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* right styles */&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.9rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="nl"&gt;word-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;248&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bold&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn-green&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;154&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;51%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this part, we gave the right section width of 50% and styled the form and the buttons.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9Nb3U8O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633421939898/teZMzQ1Up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9Nb3U8O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633421939898/teZMzQ1Up.png" alt="3.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;246&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;77%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.9rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nt"&gt;small&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;246&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;77%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we styled the input and the text at the bottom of the form. &lt;/p&gt;

&lt;p&gt;The Desktop design is done.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3bXZkPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633422014223/ep6qqkHUp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3bXZkPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633422014223/ep6qqkHUp.png" alt="screencapture-127-0-0-1-5500-a-intro-component-with-signup-form-master-index-html-2021-10-05-14_19_56.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the mobile design, we just made the design display block. So, the sections stay on top of each other. &lt;br&gt;
And added width of 80% to each section. Also made the title smaller.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cjI_SxMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633422253034/l64hNdcM9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjI_SxMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633422253034/l64hNdcM9.png" alt="screencapture-127-0-0-1-5500-a-intro-component-with-signup-form-master-index-html-2021-10-05-14_23_19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;That's it for today's project. If you liked the article and want more articles like this one consider following.&lt;br&gt;
You can also connect with me on Twitter &lt;a href="https://twitter.com/CoderAmrin"&gt;@coderamrin&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Thanks for reading. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to test a &lt;select&gt; element with React Testing Library</title>
      <author>ReturnOfTheMac 🚀</author>
      <pubDate>Sun, 10 Oct 2021 15:52:27 +0000</pubDate>
      <link>https://dev.to/returnofthemac/how-to-test-a-select-element-with-react-testing-library-3e4b</link>
      <guid>https://dev.to/returnofthemac/how-to-test-a-select-element-with-react-testing-library-3e4b</guid>
      <description>&lt;p&gt;I recently needed to add tests for a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element I was developing, and I couldn't find a lot of resources on how to do this with  &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;, so I'll share the approach I went with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-ltselectgt-endraw-element"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;First of all, let's create a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element with some options. Here I have an array with 3 countries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Austria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isoCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;United States&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isoCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isoCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element itself, it has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A default placeholder &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; asking the user to "Select a country".&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;.map&lt;/code&gt; method so we can iterate over the &lt;code&gt;countries&lt;/code&gt; array and add an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element for each one.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Select a country&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isoCode&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isoCode&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element which displays some countries, let's go ahead and write some tests! Yay...my favourite part 😀&lt;/p&gt;

&lt;p&gt;The beauty of React Testing Library is that it makes you focus more on writing tests the way an actual user would interact with your application, so that's the approach I've taken with the tests below. Of course you may have your own unique scenarios, if you do, just think &lt;em&gt;"How would a real user interact with my select element?"&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-selection"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Default selection&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should correctly set default option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Select a country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#correct-number-of-options"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Correct number of options&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should display the correct number of options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#change-selected-option"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Change selected option&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow user to change country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Find the select element, like a real user would.&lt;/span&gt;
    &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;combobox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// Find and select the Ireland option, like a real user would.&lt;/span&gt;
    &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gotchas"&gt;
  &lt;/a&gt;
  Gotchas
&lt;/h2&gt;

&lt;p&gt;Initially when I started to look into writing tests for these scenarios I went with the following approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow user to change country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;combobox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the difference? I was only checking that the "Ireland" &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; existed instead of checking if it was actually selected. Yet my test was still passing 🤔&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at why this happened. When the component is loaded, the following is rendered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Select a country&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"US"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;United States&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"IE"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ireland&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"AT"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Austria&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So from JSDOM's point of view, the "Ireland" &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; &lt;strong&gt;always&lt;/strong&gt; exists within the document, causing my test to pass!&lt;/p&gt;

&lt;p&gt;Whereas the correct approach is to use &lt;code&gt;.selected&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gotchas like this can be just as dangerous as not writing the test in the first place as it gives you false confidence about your tests. This is why I always recommend intentionally causing your tests to fail, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Austria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;❌ Test failed: should allow user to change country
Expected: &lt;span class="nb"&gt;true
&lt;/span&gt;Received: &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way you can be confident that it only passes for the intended scenario 🥳&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code-example"&gt;
  &lt;/a&gt;
  Full code example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/testing-a-select-element-with-react-testing-library-wtxze?file=/src/App.test.js"&gt;Here's a codesandox&lt;/a&gt; which includes the basic examples shown above. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;So there it is, you should now be able to write some basic tests for your &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements using React Testing Library. Of course, I'm not an expert on this topic, I'm simply sharing what I learned in the hope that I can pass on some knowledge.&lt;/p&gt;

&lt;p&gt;If you found this article useful, please give it a like and feel free to leave any feedback in the comments 🙏&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>LOCAL SCRIPT
</title>
      <author>joinmoin0002</author>
      <pubDate>Sun, 10 Oct 2021 15:51:15 +0000</pubDate>
      <link>https://dev.to/joinmoin0002/local-script-1hi7</link>
      <guid>https://dev.to/joinmoin0002/local-script-1hi7</guid>
      <description>&lt;p&gt;local PLAYER = game.Players.LocalPlayer&lt;br&gt;
local PET = PLAYER:WaitForChild("EQUIPPED_PET", true)&lt;br&gt;
local PETS_LIST = require(game.ReplicatedStorage.PETS_LIST)&lt;/p&gt;

&lt;p&gt;local STEPPED = nil&lt;br&gt;
local POS = nil&lt;br&gt;
local GYR = nil&lt;/p&gt;

&lt;p&gt;local function GET_PET(CHAR, NAME)&lt;br&gt;
    for _, v in pairs(CHAR:GetChildren()) do&lt;br&gt;
        if v:IsA("BasePart") and table.find(PETS_LIST, v.Name) then&lt;br&gt;
            if table.find(PETS_LIST, v.Name) then&lt;br&gt;
                return v&lt;br&gt;
            end&lt;br&gt;
        end&lt;br&gt;
    end&lt;br&gt;
end&lt;/p&gt;

&lt;p&gt;local function GET_MOVERS(PET)&lt;br&gt;
    for _, v in pairs(PET:GetChildren()) do&lt;br&gt;
        warn(v.ClassName)&lt;br&gt;
        if v:IsA("BodyPosition") then&lt;br&gt;
            POS = v&lt;br&gt;
        end&lt;br&gt;
        if v:IsA("BodyGyro") then&lt;br&gt;
            GYR = v&lt;br&gt;
        end&lt;br&gt;
    end&lt;/p&gt;

&lt;p&gt;end&lt;/p&gt;

&lt;p&gt;PET.Changed:Connect(function(NAME)&lt;br&gt;
    local PET = GET_PET(PLAYER.Character, NAME)&lt;br&gt;
    print(PET)&lt;br&gt;
    if PET ~= nil then&lt;br&gt;
        GET_MOVERS(PET)&lt;br&gt;
        print(POS, GYR)&lt;br&gt;
        if STEPPED then&lt;br&gt;
            STEPPED:Disconnect()&lt;br&gt;
        end&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    STEPPED = game:GetService("RunService").Stepped:Connect(function()
        if PLAYER.Character.Humanoid.Health &amp;gt; 0 then
            local DEST = CFrame.new(PLAYER.Character.Head.CFrame * Vector3.new(1, 0, 2)).p
            local CF = PLAYER.Character.Head.CFrame

            POS.Position = DEST
            print(POS.Position)
            GYR.CFrame = CF
        else
            if STEPPED then
                STEPPED:Disconnect()
            end
            POS.MaxForce = Vector3.new(0, 0, 0)
            POS = nil
            GYR = nil
        end
    end)


end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sphero.instructure.com/courses/4427/pages/star-giveaway-dot-hack-%60-ptiktok-followers-generatorpp-working-at-daily-codes-star-legit-star-working-%24%7Bgar4p0-at-number-giveaway-dot-hack%7D%24"&gt;.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is TypeScript and why should you care?</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Sun, 10 Oct 2021 15:43:46 +0000</pubDate>
      <link>https://dev.to/abhirajb/what-is-typescript-and-why-should-you-care-285k</link>
      <guid>https://dev.to/abhirajb/what-is-typescript-and-why-should-you-care-285k</guid>
      <description>&lt;p&gt;I  am sure that in your web development career you must have used JavaScript at least once. And I am sure you must have found it very useful and very powerful. But what if I say there is another language that is just as powerful as JavaScript and has way lesser bugs when compared to when you use JavaScript in your app.&lt;/p&gt;

&lt;p&gt;That language is TypeScript.&lt;/p&gt;

&lt;p&gt;What is &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;?&lt;br&gt;
TypeScript is a programming language developed and maintained by Microsoft licensed. TypeScript is a superset of JavaScript, meaning that all the concepts of JavaScript are present in TypeScript which is combined with TypeScript's own concepts that make the language increasingly powerful.&lt;/p&gt;

&lt;p&gt;If you know JavaScript, it mustn't be a problem switching to TypeScript as it essentially has the same concepts as JavaScript except a few of TypeScript's own concepts.&lt;/p&gt;

&lt;p&gt;So what are the advantages of using TypeScript?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Concepts similar to JavaScript&lt;br&gt;
TypeScript has similar concepts as JavaScript which makes the switch seamless&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript is type-safe&lt;br&gt;
This means that you have to define the type of the variable before initializing it.&lt;br&gt;
Making your code type-safe decreases the number of bugs evolved in your app over time and makes it cleaner.&lt;br&gt;
Types give superior integration to your editor which improves editor support meaning increased developer productivity and gives you a better codebase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It keeps JavaScript in check&lt;br&gt;
TypeScript keeps your JavaScript in check. Meaning that it validates your code before it's even run which gives you an edge over using simple JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Runs on multiple places&lt;br&gt;
TypeScript runs in multiple places. It converts your JavaScript which can be run on the web, on a phone, or on Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Inference&lt;br&gt;
It uses something called type inference which is nothing but adding types to your code which gives safety enabled without you writing long and additional lines of code making your app faster and scalable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is developed and maintained by Microsoft&lt;br&gt;
TypeScript is developed and maintained by Microsoft and widely used by many companies which means it's nowhere near to reaching its end. So you can expect regular updates and fixes to the language.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's move on to some testimonials!&lt;/p&gt;

&lt;p&gt;TypeScript is widely used and loved by developers around the world. Here are some testimonials given by popular companies which is another indication that switching to TypeScript is worth it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;According to Slack, the switch to TypeScript made their life a lot easier in terms of bug-fixing and productivity. They also said Static Analysis which analyzes your code and tries to infer types and warns the developer in advance before the code even runs.&lt;br&gt;
They were overwhelmed by the amount of bugs found when they were converting their code to TypeScript. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;According to Airbnb, TypeScript prevented 38% of the bugs based on their analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TypeScript lets developers be productive and safe at the same time.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;StackOverflow's developer survey in 2020&lt;/a&gt;, TypeScript was declared to be the 2nd most loved programming language&lt;br&gt;
TypeScript was used by 78% of the 2020 State of JS survey and 93% went on to say that they would use it again. It was also awarded the Most Adopted Technology based on year-to-year growth.&lt;/p&gt;

&lt;p&gt;I hope I was able to share some knowledge through this post.&lt;br&gt;
Thanks for reading.&lt;/p&gt;




&lt;p&gt;Let's connect!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/rainboestrykr"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>URL and DNS explained!</title>
      <author>namitmalasi</author>
      <pubDate>Sun, 10 Oct 2021 15:37:00 +0000</pubDate>
      <link>https://dev.to/namitmalasi/url-and-dns-explained-4aef</link>
      <guid>https://dev.to/namitmalasi/url-and-dns-explained-4aef</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Whenever you search for any resource(website, docs, images etc) on the internet, you can see their address in the address bar. This address tells us that the particular resource is hosted on that address server. The address is called URL and searching the server is done using DNS.&lt;/p&gt;

&lt;p&gt;So in this article we are going to learn about &lt;em&gt;URL&lt;/em&gt; and &lt;em&gt;DNS&lt;/em&gt;. This article is an overview and i haven't got into too much details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-url"&gt;
  &lt;/a&gt;
  1) &lt;u&gt;URL&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;URL&lt;/strong&gt; stands for Uniform Resource Locator. URL is the address of the website which you can find in the address bar of your web browser. It is a reference to a resource on the internet, be it images, hypertext pages, audio/video files, etc.&lt;br&gt;
For example: &lt;code&gt;https://www.google.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are different parts of a URL, they are shown in the image below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JV_tmxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Flh4.googleusercontent.com%252F-Lx69aIsa078%252FTXuNzpIGRbI%252FAAAAAAAAACw%252F95JWAs_yYsw%252Fs1600%252FURL.png%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JV_tmxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Flh4.googleusercontent.com%252F-Lx69aIsa078%252FTXuNzpIGRbI%252FAAAAAAAAACw%252F95JWAs_yYsw%252Fs1600%252FURL.png%26f%3D1%26nofb%3D1" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-scheme"&gt;
  &lt;/a&gt;
  a) Scheme
&lt;/h3&gt;

&lt;p&gt;The first part of the URL is the scheme, which indicates the protocol that the browser must use to request the resource (a protocol is a set method for exchanging or transferring data around a computer network). Usually for websites the protocol is HTTPS or HTTP (its unsecured version). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-wwwsubdomain"&gt;
  &lt;/a&gt;
  b) WWW(Sub-domain)
&lt;/h3&gt;

&lt;p&gt;After protocol comes the famous WWW, it simply means that the resource you are seeking by the means of this URL resides in the WWW subdomain of your domain name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c-domain-name"&gt;
  &lt;/a&gt;
  c) Domain name
&lt;/h3&gt;

&lt;p&gt;Then the name of the resource owner (i.e. domain name) comes which is google in our example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-toplevel-domain"&gt;
  &lt;/a&gt;
  d) Top-level domain
&lt;/h3&gt;

&lt;p&gt;Domain name is followed by the type of category in which the owner domain is registered. &lt;em&gt;.com&lt;/em&gt; means that the website which is making this resource available to you is of the commercial nature. There are a lot of other types of categories as well. For example, .org for organizational website, .edu for educational institutions, .gov for government websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#e-file-path"&gt;
  &lt;/a&gt;
  e) File Path
&lt;/h3&gt;

&lt;p&gt;The path refers to the exact location of a page, post, file, or other asset. The path resides after the hostname and is separated by “/” (forward slash). The path/file also consists of any asset file extension, such as images (.jpg or .png, etc.), documents (.pdf or .docx), and more. &lt;br&gt;
But it is not compulsory that all URL will display the path.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dns"&gt;
  &lt;/a&gt;
  2) &lt;u&gt;DNS&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt; is short for Domain Name System. Like a phone-book, DNS maintains and maps the name of the website, i.e. URL, and particular IP address it links to. Every URL on the internet has a unique IP address which is of the computer which hosts the server of the website requested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-dns-works"&gt;
  &lt;/a&gt;
  How DNS works?
&lt;/h3&gt;

&lt;p&gt;When you type a URL in the browser, the following steps take place:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The browser checks for a DNS record to find the corresponding IP address of the website.&lt;/li&gt;
&lt;li&gt;Once the browser receives the correct IP address, it will build  a connection with the server that matches the IP address to transfer information.&lt;/li&gt;
&lt;li&gt;The browser sends an HTTP request to the server.&lt;/li&gt;
&lt;li&gt;The server handles the request and sends back a response.&lt;/li&gt;
&lt;li&gt;The browser displays the HTML content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. If you have any doubt or you think i missed something let me know in the comments. Feel free to like and share the post. &lt;br&gt;
You can connect with me on:&lt;/p&gt;

&lt;p&gt;Twitter:&lt;a href="https://twitter.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;br&gt;
LinkedIn:&lt;a href="https://www.linkedin.com/in/namit-malasi-a4b56310a/"&gt;Namit Malasi&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>url</category>
      <category>browser</category>
    </item>
    <item>
      <title>Building Your Online Presence</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Sun, 10 Oct 2021 15:23:36 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/building-your-online-presence-1fjf</link>
      <guid>https://dev.to/apoorvtyagi/building-your-online-presence-1fjf</guid>
      <description>&lt;p&gt;Back in October 2020 I realized the importance of having an online presence when I saw this tweet on Twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtKSO33X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ekf6VOFU8AImeZm.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFQo2Pzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1251370705985302528/S3hD_wEU_normal.jpg" alt="Daniel Vassallo profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Daniel Vassallo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dvassallo"&gt;@dvassallo&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Just crossed ¼ of a million sales on Gumroad from 2 products in 10mo.&lt;br&gt;&lt;br&gt;Ads:                    $12,949&lt;br&gt;Gumroad fees:  $12,102&lt;br&gt;Affiliate fees:       $8,185&lt;br&gt;--------------&lt;br&gt;Cost of sales:   $33,236&lt;br&gt;&lt;br&gt;Ask me anything. I don’t have all the answers, but I can give you my perspective. 👇 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      02:49 AM - 17 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1317296660700016640" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1317296660700016640" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1317296660700016640" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It was really astounding to me when I learned that Daniel Vassallo has made over $250,000 just by selling couple of his courses on Gumroad and more importantly by leveraging social media. &lt;/p&gt;

&lt;p&gt;It turns out that you can in fact replace your 9-5 job salary if you effectively use Twitter or any social media application for that matter as a marketing channel for your products.&lt;/p&gt;

&lt;p&gt;As a software developer, we spend so much of our time writing tech blogs, created websites and apps, building SAAS products, making YouTube videos, so why don't we monetize our side hustle?&lt;/p&gt;

&lt;p&gt;Having an online presence can definitely help us with that, it can provide you numerous of opportunities. It can give you the freedom to control your time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Controlling your time is the highest dividend money pays&lt;/strong&gt; - "The Psychology of Money"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article I'll share some of the points that I have learned in last one year that you need to focus on to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cant-you-succeed-without-having-online-presence"&gt;
  &lt;/a&gt;
  Can't you succeed without having online presence?
&lt;/h2&gt;

&lt;p&gt;You definitely can. I wanted to make this thing clear before moving on. There are various ways of making money on the internet these days.&lt;/p&gt;

&lt;p&gt;But the problem is just having a profile, blog, product or YouTube channel might not be enough for you. Sure you can have great content and people might discover it on their own and it becomes a hit, but the probability of this happening is less when everyone is surrounded with what I call the "Internet noise". Your have to stand apart &amp;amp; to achieve it, one of the good ways is to build your credibility on the internet.&lt;/p&gt;

&lt;p&gt;You need to have a group of people who consume the content you're producing. You need subscribers to watch the videos you're creating, you need audience to read the articles you're writing. You need clients to get freelancing gigs.&lt;/p&gt;

&lt;p&gt;A strong online presence allows you to build your brand and credibility that you need to attract more consumers for your work. It provides a way for people to find your work easily. You don't want to have a killer product that provides so much value but you struggle to sell it.&lt;/p&gt;

&lt;p&gt;I started being active on twitter since July last year and I was tweeting about various topics related to software engineering. Seeing my work, many people have started to DM me on twitter offering freelance jobs just because I was providing value and they liked what I was posting. &lt;/p&gt;

&lt;p&gt;Even though I was not selling anything(except tweeting about my blogs) or trying to find a job, opportunities started coming my way. This is the power of building your credibility.&lt;/p&gt;

&lt;p&gt;To sell your content you should have true fans. A true fan is someone who is always ready to buy anything you create just because you've given them so much value from your work for free in the past.&lt;/p&gt;

&lt;p&gt;Think of this as an example, Imagine you have 100 true fans. If you create a product which provides 500$ - 1000$ worth of value per year, you can make 50k $ - 100k $ per year by selling it to your true fans. True fans also spread the word about your products voluntarily and there is no bigger marketing than word of mouth from your existing customers itself.&lt;/p&gt;

&lt;p&gt;In the beginning, do not worry about true fans in the beginning. Just focus on providing value to your audience. You'll eventually see them coming your way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-to-build-an-online-presence"&gt;
  &lt;/a&gt;
  Tips to Build An Online Presence
&lt;/h2&gt;

&lt;p&gt;Honestly, building an online presence is very time consuming process and takes lot of effort, hard work and consistency.&lt;/p&gt;

&lt;p&gt;You need to build credibility by providing value through your content. You'll have to consistently post quality content and interact with others' content as well.&lt;/p&gt;

&lt;p&gt;Here are few tips that will help you get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pick a social media channel depending on the type of content you want to create. YouTube, Twitter, LinkedIn, Instagram etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pick your niche. Topics which your love talking about, topics which you're currently exploring a lot or you're an expert at. For instance, I'm a software developer so I generally tweet about programming, algorithms etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Post quality content everyday. Interact with other players of your niche. Eventually big accounts will notice you and they will start interacting with your content. And that's how you start growing big. Remember, &lt;strong&gt;consistency is the key.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve your BIO. When people hoover over your name in their timeline the first thing they see is your face &amp;amp; bio. YOUR bio is about what you bring THEM! Write about how you're helping your followers. What will they get if they decide to follow you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow big players in your niche Before you can talk you first have to listen. Follow the players who have 10x the number of followers you have. For example, if you have 100 followers follow someone who has 1k-10k followers in your niches and see what they&lt;br&gt;
talk about. Follow people with high engagement. Accounts that consistently get 10+ retweets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Comment on big players' timelines. The guys you followed in the previous step, use their base to grow yours. Whenever you follow&lt;br&gt;
someone you can turn on notifications. When they tweet you get a notification. Add value to their timeline as quickly as you&lt;br&gt;
can. Do this once a day per account max. This is going to be your best friend until you hit 5k followers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do this for several months consistently and see the response you get. Keep doing experiments along the way with respect to what kind of posts your audience likes or dislikes. Double down on the ones that you will your audience is enjoying a lot.&lt;/p&gt;

&lt;p&gt;But there's one caveat to this experiment. Sometimes people interact with something which is very controversial but do not provide any value at all. Make sure you do not double down on such things because it can harm your reputation in long run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The important thing is to provide value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This topic is so big that an investment in a detailed course can help you a lot in getting started better. &lt;em&gt;I have mentioned one of the good eBook that I bought and loved and can totally recommend who wants to start out&lt;/em&gt; (Link at the end of the article).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-not-to-do-while-building-online-presence"&gt;
  &lt;/a&gt;
  What Not to Do While Building Online Presence?
&lt;/h2&gt;

&lt;p&gt;Initially it might get a little frustrating to keep posting content but not having anyone to see and engage with it. The truth is everyone goes through that. But believe me, if you're creating quality content, people will eventually start noticing you.&lt;/p&gt;

&lt;p&gt;In running this long term race, many people tend to make mistakes in order to gain some traction early, some of which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Copying other's content and posting it as your own without giving credit to the original author.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Asking follow for follow, likes, retweets etc. Yes people do such things just to increase those follower numbers. You will get the numbers but not the true fans.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not being consistent with posting their content. You have to grind every single day of the week&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Posting lot of content without any quality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start selling your products, sharing links to your blogs/videos from day one. Remember that you have to give a lot first before asking for anything. These tweets might even result in loosing followers if you overdo it. Your audience decided to follow you for your valuable content, not for your advertising.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Avoid making these mistakes and be authentic with your content. &lt;strong&gt;The &lt;a href="https://gumroad.com/a/752219251/XFFpt"&gt;eBook&lt;/a&gt; I mentioned below talk about these things in detail so if you're very serious around building your own brand, you should definitely consider buying it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading and all the best for your journey :)&lt;/p&gt;




&lt;p&gt;If you're interested to learn more about building an online presence in detail, here's &lt;a href="https://gumroad.com/a/752219251/XFFpt"&gt;one eBook&lt;/a&gt; that I found extremely useful&lt;br&gt;
(It has a good rating as well):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/752219251/XFFpt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y01rMF6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75ju5gfcjva1hh1bl7yc.png" alt="Twitter Guide"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>twitter</category>
      <category>motivation</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>User Login Authentication</title>
      <author>labrahimiimrane</author>
      <pubDate>Sun, 10 Oct 2021 14:51:51 +0000</pubDate>
      <link>https://dev.to/labrahimiimrane/user-login-authentication-2eei</link>
      <guid>https://dev.to/labrahimiimrane/user-login-authentication-2eei</guid>
      <description>&lt;p&gt;In this &lt;a href="https://github.com/saidMounaim/auth0-nextjs"&gt;Repo&lt;/a&gt;, we will show how to add basic user login with authentication to a Next.js app using Auth0.&lt;/p&gt;

&lt;p&gt;Auth0 is the easiest way for developers to add authentication and build secure applications. &lt;/p&gt;

&lt;p&gt;Check out documentation for more details &lt;a href="https://github.com/auth0/nextjs-auth0"&gt;@auth0/nextjs-auth0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Repo : &lt;a href="https://github.com/saidMounaim/auth0-nextjs"&gt;https://github.com/saidMounaim/auth0-nextjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow Him : &lt;a href="https://github.com/saidMounaim/"&gt;https://github.com/saidMounaim/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
