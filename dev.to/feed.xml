<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>4 Must-Know TypeScript Tips &amp; Tricks</title>
      <author>Sam Piggott</author>
      <pubDate>Mon, 07 Dec 2020 09:21:08 +0000</pubDate>
      <link>https://dev.to/sam_piggott/4-must-know-typescript-tips-tricks-3g8b</link>
      <guid>https://dev.to/sam_piggott/4-must-know-typescript-tips-tricks-3g8b</guid>
      <description>&lt;p&gt;TypeScript has some incredibly nifty utilities that can be used to make your codebase more readable, efficient and safer. &lt;/p&gt;

&lt;p&gt;In this article, I've compiled a list of four of my favourite utilities that I use in my daily workflow, along with some examples and explanations of each. &lt;/p&gt;

&lt;p&gt;They've helped my TypeScript workflow - I hope they help yours, too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Before we get started...
&lt;/h2&gt;

&lt;p&gt;If you're new to TypeScript, I have a full course for beginners available right here on my &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;YouTube channel!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It covers all the essentials you need to get started with TypeScript as a JavaScript developer. &lt;/p&gt;

&lt;p&gt;If that sounds like something you're looking for, &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;check it out here&lt;/a&gt; - I'd love to hear your thoughts on it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pick-and-omit" class="anchor"&gt;
  &lt;/a&gt;
  Pick and Omit
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Pick&lt;/code&gt; and &lt;code&gt;Omit&lt;/code&gt; are special utility types that TypeScript provides as a way to add more convenience and power when creating new types for object shapes. Let's take a look at each one in detail with some examples...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pick" class="anchor"&gt;
  &lt;/a&gt;
  Pick
&lt;/h3&gt;

&lt;p&gt;In the following example, we've constructed an &lt;code&gt;interface&lt;/code&gt; type called &lt;code&gt;Consumable&lt;/code&gt;, which has got a bunch of properties that relate to something you could eat or drink.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;TypeScript provides the &lt;code&gt;Pick&lt;/code&gt; utility to allow us to "pluck" properties from our object shape types, and create a new type from that. Let's create a new type, &lt;code&gt;Pizza&lt;/code&gt;, by simply picking out the relevant properties from the &lt;code&gt;Consumable&lt;/code&gt; type.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Nice! Let's go over that in a little more detail. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first parameter that we pass into the &lt;code&gt;Pick&lt;/code&gt; utility is the type that we want to pick from. &lt;/li&gt;
&lt;li&gt;The second parameter is either a single value or a union type of all of the properties we want to pick out from the type we passed in as the first parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above example, we're picking &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;caloriesPerServing&lt;/code&gt; from the &lt;code&gt;Consumable&lt;/code&gt; type to construct our brand new type, &lt;code&gt;Pizza&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's go one step further. The cool thing about creating a new type is that we can use it just like anything else - so let's extrapolate our &lt;code&gt;Pizza&lt;/code&gt; type and add a &lt;code&gt;toppings&lt;/code&gt; property to our object shape...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In this example, we're declaring &lt;code&gt;Pizza&lt;/code&gt; as an &lt;code&gt;interface&lt;/code&gt;, so that we can extend from our new &lt;code&gt;Pick&lt;/code&gt;ed type and add a brand new parameter, &lt;code&gt;toppings&lt;/code&gt;, to it. That means that our &lt;code&gt;Pizza&lt;/code&gt; interface, after being compiled, would have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;size&lt;/strong&gt;: 'large' | 'medium' | 'small'&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;caloriesPerServing&lt;/strong&gt;: number&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toppings&lt;/strong&gt;: string[]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#omit" class="anchor"&gt;
  &lt;/a&gt;
  Omit
&lt;/h3&gt;

&lt;p&gt;Omit works just like &lt;code&gt;Pick&lt;/code&gt; - but the inverse. &lt;/p&gt;

&lt;p&gt;We pass &lt;code&gt;Pick&lt;/code&gt; the properties we wish to pluck out from the object type, but with &lt;code&gt;Omit&lt;/code&gt;, we pass the properties we wish to &lt;strong&gt;exclude&lt;/strong&gt; from the initial object type.&lt;/p&gt;

&lt;p&gt;Let's take a look at an example to make things a little clearer. Just like with &lt;code&gt;Pick&lt;/code&gt;, we'll use the same &lt;code&gt;Consumable&lt;/code&gt; type once again as a base - but this time, we'll create a new type called &lt;code&gt;Sandwich&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;Consumable&lt;/code&gt; type has a property on it called &lt;code&gt;millilitresPerServing&lt;/code&gt;. That's not really relevant to a sandwich - so by using &lt;code&gt;Omit&lt;/code&gt;, we can pass in two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the type that we wish to use as a base... &lt;/li&gt;
&lt;li&gt;...followed by a single or union type of the keys that we wish to &lt;strong&gt;omit&lt;/strong&gt; from that interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Just like with &lt;code&gt;Pick&lt;/code&gt;!)&lt;/p&gt;

&lt;p&gt;That means in this example, our &lt;code&gt;Sandwich&lt;/code&gt; type would have the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;size&lt;/strong&gt;: 'large' | 'medium' | 'small'&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;caloriesPerServing&lt;/strong&gt;: number&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;gramsPerServing&lt;/strong&gt;: number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that &lt;code&gt;millilitresPerServing&lt;/code&gt; isn't present in that list - that's because our &lt;code&gt;Sandwich&lt;/code&gt; type intentionally omits that from our new type by using the &lt;code&gt;Omit&lt;/code&gt; utility as described above.&lt;/p&gt;

&lt;p&gt;What's just as cool - just like with &lt;code&gt;Pick&lt;/code&gt;, the previous example, we can use the new type generated by the &lt;code&gt;Omit&lt;/code&gt; utility as a base to extend from. Let's extend our &lt;code&gt;Sandwich&lt;/code&gt; type by adding some &lt;code&gt;fillings&lt;/code&gt;...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Omit&lt;/strong&gt; and &lt;strong&gt;Pick&lt;/strong&gt; really come into their own in more complex applications, particularly when you have a lot of overlapping object shapes that have properties which should remain identical in type. They're a dream for composition!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#required-amp-partial" class="anchor"&gt;
  &lt;/a&gt;
  Required &amp;amp; Partial
&lt;/h2&gt;

&lt;p&gt;Just like &lt;code&gt;Pick&lt;/code&gt; and &lt;code&gt;Omit&lt;/code&gt; that we covered above, &lt;code&gt;Required&lt;/code&gt; and &lt;code&gt;Partial&lt;/code&gt; are utility types that allow us to create new types from our object types. Let's take a look into each one to see how they could be used as part of a workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#required" class="anchor"&gt;
  &lt;/a&gt;
  Required
&lt;/h3&gt;

&lt;p&gt;Okay, simple example - we have an interface for a (fictional) sign-up form on a website, with all the usual suspects present.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Notice that in the above example, we've got a few &lt;code&gt;?&lt;/code&gt;s in there. &lt;/p&gt;

&lt;p&gt;Those are use to indicate that those properties are &lt;strong&gt;optional&lt;/strong&gt; - which means that they're allowed to be &lt;code&gt;undefined&lt;/code&gt;. Let's create an input object using our type:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;(Note: I could have also just omitted all of of the properties with &lt;code&gt;undefined&lt;/code&gt; as a value, but I wanted this example to be a bit more explicit for easy reading!)&lt;/p&gt;

&lt;p&gt;Let's say for example that we have another form in our web app elsewhere, which uses the same shape of input - but this time, requires that we supply values to &lt;strong&gt;all&lt;/strong&gt; of the properties in our &lt;code&gt;MyFormInputs&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If we wanted to, we could just re-write that same interface again, keeping all our keys and value types the same - but removing those pesky &lt;code&gt;?&lt;/code&gt;s to ensure that we can't pass any &lt;code&gt;undefined&lt;/code&gt; values in...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;...but, following the classic DRY rule, this should start to leave a bit of a bad taste in your mouth. There must be a better way...&lt;/p&gt;

&lt;p&gt;Thankfully, that's where the wonderful &lt;code&gt;Required&lt;/code&gt; utility comes in!&lt;/p&gt;

&lt;p&gt;Let's create a new type called &lt;code&gt;MyFormInputsRequired&lt;/code&gt; and make all of the properties on it non-nullable.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Required&lt;/code&gt; simply takes one parameter - the interface or object type that we want to make all properties enforced. In the above example, we also create a new object using that interface, and ensure that every single property has a corresponding value.&lt;/p&gt;

&lt;p&gt;If the key wasn't present in &lt;code&gt;requiredInputs&lt;/code&gt;, or if we supplied &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as any of the values, this would throw an exception at compile-time. &lt;/p&gt;

&lt;p&gt;Nice and safe!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partial" class="anchor"&gt;
  &lt;/a&gt;
  Partial
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Partial&lt;/code&gt; is the exact opposite of &lt;code&gt;Required&lt;/code&gt; - instead of making all the properties in an interface or object type &lt;strong&gt;required&lt;/strong&gt;, it makes them all &lt;strong&gt;optional&lt;/strong&gt;. (if you've read this entire article from the top, you're probably beginning to notice a pattern...)&lt;/p&gt;

&lt;p&gt;Let's take a look at an example on how it could be used. We'll go back to videogames to maintain some semblance of variation...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the above example, we've introduced our &lt;code&gt;VideoGame&lt;/code&gt; interface, which has three properties on it which are all &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we wanted to create a new type making all of the properties &lt;strong&gt;optional&lt;/strong&gt;. We'll use the power of &lt;code&gt;Partial&lt;/code&gt; to make this happen...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the example above, we create a new type named &lt;code&gt;VideoGamePartial&lt;/code&gt;, and, just like how we used &lt;code&gt;Required&lt;/code&gt; above, we pass the &lt;code&gt;Partial&lt;/code&gt; utility a single object type.&lt;/p&gt;

&lt;p&gt;This creates a new type, copying the exact shape of the &lt;code&gt;VideoGame&lt;/code&gt; interface, but making all of the properties optional.&lt;/p&gt;

&lt;p&gt;When we create a new object using our new &lt;code&gt;VideoGamePartial&lt;/code&gt; type (as demonstrated in the &lt;code&gt;nintendoGame&lt;/code&gt; value at the bottom of the above example), we can see that we're able to skip two of the previously required values - &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;ageRating&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Taking this to an extreme, because &lt;code&gt;Partial&lt;/code&gt; makes &lt;strong&gt;all&lt;/strong&gt; of our properties optional, it would actually be valid to use that type to simply create an empty object...&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;...but that's probably more of a hypothetical use-case, as I can't imagine that being super useful in day-to-day 😅&lt;/p&gt;

&lt;p&gt;Finally, topping it all off (and attempting to drive home how cool these utilities are) - let's use our new &lt;code&gt;Partial&lt;/code&gt; type as a base to extend from!&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the above example, we create a new type called &lt;code&gt;SonyVideoGame&lt;/code&gt;, which extends from our &lt;code&gt;VideoGame&lt;/code&gt; type that has a set of properties which are all optional.&lt;/p&gt;

&lt;p&gt;We've then added a new (required!) type to it called &lt;code&gt;platform&lt;/code&gt;. That means that all of the properties (and their respective optional states would be as follows):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt;: string - &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;description&lt;/strong&gt;: string - &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ageRating&lt;/strong&gt;: '3+' | '10+' | '16+' - &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform&lt;/strong&gt;: 'PS2' | 'PS3' | 'PS4' | 'PS5' - &lt;strong&gt;Required&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using composition and the power of TypeScript utilities, we've created a complex type which has a series of properties which are both optional &amp;amp; required. Neat, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;And that concludes our whistle-stop tour on some of TypeScript's powerful utilities that are provided with the language. There's plenty of others that you can delve into &lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;over at the TypeScript handbook&lt;/a&gt; - but these four are some of my favourites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9o6PKG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QO9lI9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9o6PKG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QO9lI9f.png" alt="CodeSnap Promo Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're looking for more TypeScript learnings, I have a full video course on the basics of TypeScript over on my &lt;a href="https://www.youtube.com/watch?v=vugSEGpPsEo&amp;amp;list=PL7siRj7spTbBfiNQ1kBVuytL8-I8DZWZq"&gt;YouTube channel&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Happy TypeScript'ing!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything about package.json</title>
      <author>Sanchithasr</author>
      <pubDate>Mon, 07 Dec 2020 07:58:42 +0000</pubDate>
      <link>https://dev.to/sanchithasr/everything-about-package-json-2119</link>
      <guid>https://dev.to/sanchithasr/everything-about-package-json-2119</guid>
      <description>&lt;p&gt;&lt;strong&gt;Package.json&lt;/strong&gt; is a file in the root directory of a Node.js project that holds various information relevant to the project. This file gives information to npm that allows it to identify the project as well as handle the project’s dependencies.&lt;/p&gt;

&lt;p&gt;A package.json file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;lists the packages your project is dependent on&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;specifies versions of a package that your project can use/ using&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;makes your build reproducible, and therefore easier to share with other developers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;contains other metadata such as a &lt;em&gt;project description, the version of the project in a particular distribution, license information, even configuration data etc&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is vital to both &lt;em&gt;npm&lt;/em&gt; and the end-users of the package&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-the-packagejson-file" class="anchor"&gt;
  &lt;/a&gt;
  How to create the package.json file?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the command line, navigate to the root directory of your project.&lt;/li&gt;
&lt;li&gt;Run the following command
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Answer the questionnaire in the command line.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IE0zub3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGfsaaSHySsyhlmOU7UK4eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IE0zub3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGfsaaSHySsyhlmOU7UK4eg.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the following command if you want to create the file using default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init --yes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TQDD7RDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQlNpEYhWUe_gU60G8X77mA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQDD7RDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQlNpEYhWUe_gU60G8X77mA.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-properties-of-packagejson" class="anchor"&gt;
  &lt;/a&gt;
  Understanding the Properties of package.json
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#name-" class="anchor"&gt;
  &lt;/a&gt;
  name —
&lt;/h4&gt;

&lt;p&gt;This is the most important and required field in the package.json file. This should represent the name of the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"name": "my-blog-backend",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#version-" class="anchor"&gt;
  &lt;/a&gt;
  version —
&lt;/h4&gt;

&lt;p&gt;This is also a mandatory property of the package.json file just like the name. This property represents the version of the module of the project. The rules to be followed for this field are specified here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"version": "1.0.0",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#description-" class="anchor"&gt;
  &lt;/a&gt;
  description —
&lt;/h4&gt;

&lt;p&gt;You can type in the description of the project with more specifics to understand the project as a string. This helps people discover your package, as it’s listed in npm search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"description": "This project is the personal blog",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#main-" class="anchor"&gt;
  &lt;/a&gt;
  main —
&lt;/h4&gt;

&lt;p&gt;The main field represents the file which is the primary entry point to your program. This should point to the file that serves as the entry point to your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"main": "server.js",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scripts-" class="anchor"&gt;
  &lt;/a&gt;
  scripts —
&lt;/h4&gt;

&lt;p&gt;The “scripts” property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event and the value is the command to run at that point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "start": "npx babel-node src/server.js",
  "dev": "npx babel-node src/server.js",
  "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1",
  "lint": "eslint ./server"
},
people fields: author, contributors —
The “author” is one person. “contributors” are an array of people. We can use either of the fields according to our needs to list the people involved in the project.
"author": {
  "name": "Sanchitha",
  "email": "s@sharma.com",
  "url": "http://wordspoolsite.wordpress.com/"
},
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bugs-" class="anchor"&gt;
  &lt;/a&gt;
  bugs —
&lt;/h4&gt;

&lt;p&gt;This field contains the URL to your project’s issue tracker and/or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"bugs":
{
  "url": "https://github.com/owner/project/issues",
  "email": "project@hostname.com"
},
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#homepage-" class="anchor"&gt;
  &lt;/a&gt;
  homepage —
&lt;/h4&gt;

&lt;p&gt;The URL to the project homepage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"homepage": "https://github.com/owner/project#readme"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#keywords-" class="anchor"&gt;
  &lt;/a&gt;
  keywords —
&lt;/h4&gt;

&lt;p&gt;This helps people discover your package as it’s listed in npm search You can add the keywords in it as an array of strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"keywords": [
    "node",
    "vue",
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#private-" class="anchor"&gt;
  &lt;/a&gt;
  private —
&lt;/h4&gt;

&lt;p&gt;If you set "private": true in your package.json, then npm will refuse to publish it. The default value will be false .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dependencies-" class="anchor"&gt;
  &lt;/a&gt;
  dependencies —
&lt;/h4&gt;

&lt;p&gt;Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string that has one or more space-separated descriptors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependencies": {
  "express": "^4.17.1"
},
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#devdependencies-" class="anchor"&gt;
  &lt;/a&gt;
  devDependencies —
&lt;/h4&gt;

&lt;p&gt;If someone is planning on downloading and using your module in their program, then they probably don’t want or need to download and build the external test or documentation framework that you use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"devDependencies": {
  "@babel/cli": "^7.12.8",
  "@babel/core": "^7.12.9",
  "@babel/node": "^7.12.6",
  "@babel/preset-env": "^7.12.7"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#repository-" class="anchor"&gt;
  &lt;/a&gt;
  repository —
&lt;/h4&gt;

&lt;p&gt;Specify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the npm docs command will be able to find you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"repository": {
  "type" : "git",
  "url" : "https://github.com/npm/cli.git"
}
"repository": {
  "type" : "svn",
  "url" : "https://v8.googlecode.com/svn/trunk/"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#license-" class="anchor"&gt;
  &lt;/a&gt;
  license —
&lt;/h4&gt;

&lt;p&gt;You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you’re placing on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“license”: “ISC”,
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Below is the example of the package.json file that has all the fields that I have explained here. There are still many other fields in package.json. You can find more about them &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {
    "name": "my-blog-backend",
    "version": "1.0.0",
    "description": "This project is the personal blog",
    "private": true,
    "main": "index.js",

    "scripts": {
      "start": "npx babel-node src/server.js",
      "dev": "npx babel-node src/server.js",
      "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1",
      "lint": "eslint ./server"
    },
    "keywords": [
      "node",
      "vue"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/npm/cli.git"
    },
    "author": {
      "name": "Sanchitha",
      "email": "s@sharma.com",
      "url": "http://wordspoolsite.wordpress.com/"
    },
    "bugs": 
    {
      "url": "https://github.com/owner/project/issues",
      "email": "project@hostname.com"
    },
    "homepage": "https://github.com/owner/project#readme",
    "license": "ISC",
    "dependencies": {
      "express": "^4.17.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.12.8",
      "@babel/core": "^7.12.9",
      "@babel/node": "^7.12.6",
      "@babel/preset-env": "^7.12.7"
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>UI Design Trend of 2021</title>
      <author>Harsh Singh</author>
      <pubDate>Mon, 07 Dec 2020 03:46:26 +0000</pubDate>
      <link>https://dev.to/harshhhdev/ui-design-trend-of-2021-4fb7</link>
      <guid>https://dev.to/harshhhdev/ui-design-trend-of-2021-4fb7</guid>
      <description>&lt;p&gt;In todays tutorial we're going to briefly go over what glassmorphism is, and create a design using it in &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;The new UI trend we're going to be talking about today is Glassmorphism.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXDu1704--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5008109/screenshots/14702832/media/7ab3b7e6f73b0493ec7693bdc1d3ad20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXDu1704--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5008109/screenshots/14702832/media/7ab3b7e6f73b0493ec7693bdc1d3ad20.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Glassmorphism is possibly the new UI Design Trend of 2021, which in my opinion has a lot of potential.&lt;/p&gt;

&lt;p&gt;The design trend for 2020 was Neumorphism... which had some rather obvious issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uag4FsnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101303255-a04b0980-380b-11eb-982b-963a392676a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uag4FsnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101303255-a04b0980-380b-11eb-982b-963a392676a5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People started to use this with a lot of things, which were driving people a little bonkers. &lt;/p&gt;

&lt;p&gt;I'm not bashing neumorphism, I myself like the idea of it somewhat, but there are of course accesibility issues for people who have eyeshight issues, which I'm not fond of to say the least.&lt;/p&gt;

&lt;p&gt;Glassmorphism, in my humble opinion, in terms of accesibility has improved SIGNFICANTLY if you compare it with glassmorphism. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qTU1F-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1344595/screenshots/14707126/media/3be1aec8be15423677abe06f46cfde80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qTU1F-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1344595/screenshots/14707126/media/3be1aec8be15423677abe06f46cfde80.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image above, the visibility of the text, the layout, everything is much more visible as compared to Neumorphism, and it doesn't get annoying to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-make-our-first-design" class="anchor"&gt;
  &lt;/a&gt;
  Let's make our first design!
&lt;/h1&gt;

&lt;p&gt;So, let's hop into &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; and create a new file. &lt;/p&gt;

&lt;p&gt;Next, I'll search for some &lt;a href="https://duckduckgo.com/?q=mesh+gradients&amp;amp;t=brave&amp;amp;atb=v248-7&amp;amp;iax=images&amp;amp;ia=images"&gt;Mesh Gradients&lt;/a&gt; and pick one which I really like. I think I'll settle for this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNNNA7AE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304060-72ff5b00-380d-11eb-8c58-a3172d791c9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNNNA7AE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304060-72ff5b00-380d-11eb-8c58-a3172d791c9c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's just copy and paste this image file into Figma. I'll set the size to 1920x1080px. &lt;/p&gt;

&lt;p&gt;Next, let's just create a simple rectangle. I'll dimensions to 900x500px and set the border radius to 30px.&lt;/p&gt;

&lt;p&gt;Now, let's go in the rectangle toggle a few things. &lt;/p&gt;

&lt;p&gt;First, I'll get started by the colour. Go over to the fill, and change it from solid to a linear gradient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll move the two points diagonally across the small box we just made. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l8JAbMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304677-d6d65380-380e-11eb-9ba9-64451b0d3d91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l8JAbMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304677-d6d65380-380e-11eb-9ba9-64451b0d3d91.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's toggle the colours for these two. I'll go to the one up top and change the colour white (#FFFFFF) and set opacity to 70%.&lt;/p&gt;

&lt;p&gt;Let's toggle the bottom one. I'll set the colour to white (#FFFFFF) and set opacity to 40%.&lt;/p&gt;

&lt;p&gt;Here's a code for the linear gradient, for those interested.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;107&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;18&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;84&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, let's give it a small outline. I'll go to outline, hit the "+" and create a new outline. I'll give this a thickness of 5px.&lt;/p&gt;

&lt;p&gt;Let's go into colours again, and also make the colour on this a gradient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdayiv3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101304659-c7570a80-380e-11eb-9fff-9f7045dd3fd7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll follow the same process as I did last time with the background colour. I'll move the two points diagonally from the top left corner to the bottom right one. &lt;/p&gt;

&lt;p&gt;I'll give the top one a colour of white (#FFFFFF) with a opacity of 30%.&lt;/p&gt;

&lt;p&gt;I'll give the top one a colour of white (#FFFFFF) with an opacity of 20%.&lt;/p&gt;

&lt;p&gt;Great! Now we have a cool looking outline. &lt;/p&gt;

&lt;p&gt;Next, let's add some blur. Go into "effects", hit "+" and toggle the setting to layer blur.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IK1RxAWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305354-7f38e780-3810-11eb-99ec-5f25b07a6594.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IK1RxAWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305354-7f38e780-3810-11eb-99ec-5f25b07a6594.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's not go anywhere too crazy on this. I'll just set it 5.&lt;/p&gt;

&lt;p&gt;Now, let's add some background blur. Do the same as said before. I'll set it to... maybe 15 for now. &lt;/p&gt;

&lt;p&gt;Then, to show this effect I'll just add some text. Let's choose a colour of white (#FFFFFF), size of 144px a font of Poppins Bold.&lt;/p&gt;

&lt;p&gt;Let's move it below the glass rectangle we created, and tada 🎉 you can now see the effect. &lt;/p&gt;

&lt;p&gt;Spoiler: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlW_vbWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305713-451c1580-3811-11eb-822b-973faa5c740e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlW_vbWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/101305713-451c1580-3811-11eb-822b-973faa5c740e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#foreword" class="anchor"&gt;
  &lt;/a&gt;
  Foreword
&lt;/h1&gt;

&lt;p&gt;I have a Linux system (and no money) so I can't use Adobe Xd, therefore I'm only able to show this effect to you in Figma. &lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://www.youtube.com/watch?v=0cmVsdOFyiI"&gt;tutorial&lt;/a&gt; I will recommend to you, if you're interested in learning how to achieve this in Adobe Xd.&lt;/p&gt;

&lt;p&gt;I personally have been learning about an experimenting with glassmorphism myself too. Check out this &lt;a href="https://dribbble.com/shots/14714519-Glassmorphism-Resturaunt-Landing-Page"&gt;dribbble design post&lt;/a&gt; for my latest creation with it!&lt;/p&gt;

&lt;p&gt;You can view the &lt;a href="https://www.figma.com/file/ivRYzAHY3CXDWB3MzHXUJo/Glassmorphism?node-id=4%3A0"&gt;Figma Board&lt;/a&gt; for this project, along with the board for my &lt;a href="https://www.figma.com/file/uBv1BSHYEOmJSndLVIESZc/Maharaja?node-id=0%3A1"&gt;First one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To sum everything up, Glassmorphism is in my opinion a great new design trend which I seem emerging and taking the place of Neumorphism in 2020. It has a lot of potential, as there are not nearly as many accessibility issues with it as when compared to Neumorphism.&lt;/p&gt;

</description>
      <category>design</category>
      <category>tutorial</category>
      <category>css</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>5 Things I Learned by Asking Developers One Question</title>
      <author>Shaundai Person</author>
      <pubDate>Mon, 07 Dec 2020 02:49:12 +0000</pubDate>
      <link>https://dev.to/shaundai/5-things-i-learned-by-asking-developers-one-question-52h7</link>
      <guid>https://dev.to/shaundai/5-things-i-learned-by-asking-developers-one-question-52h7</guid>
      <description>&lt;p&gt;Breaking into engineering is no easy task.&lt;/p&gt;

&lt;p&gt;Over the past year, I’d gradually built the skills needed to transition from the only career I’ve ever known - sales - into UI engineering.    Prior to beginning this self-taught journey, I had no technical background &lt;em&gt;(uh, unless a basic working knowledge of Excel counts)&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;As a full-time working mom, I needed to be strategic about how I spent my time.  To make sure I was learning the right things and building the right stuff, I went to developers at all levels - from Junior to VP - and asked the same question: &lt;em&gt;As someone coming from a non-technical role - how can I make myself stand out?&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-yes-you-should-build-a-portfolio" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(1) Yes, you &lt;em&gt;should&lt;/em&gt; build a portfolio&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Especially consider putting together a portfolio if you’re coming in at an entry level or switching to engineering from an otherwise non-traditional role &lt;em&gt;(like me)&lt;/em&gt;.  Don’t worry - you don’t need to spend months building a portfolio from scratch.  Host one easily using Github Pages or a website-generation platform like Wix or Squarespace.&lt;/p&gt;

&lt;p&gt;The most important part is being strategic about the &lt;em&gt;types&lt;/em&gt; of projects you put in your portfolio.  Remember that recruiters and hiring managers are looking through a lot of other portfolios like yours and when they get 200 applicants for one opening, they need to make tough decisions about how to narrow down the applicant pool.  Make your portfolio stand out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make it obvious which languages/frameworks you've used so they can see how your skills match the role you’re looking for.&lt;/li&gt;
&lt;li&gt;Narrow it down to 2-4 key projects that really show the breadth and depth of your skills and only include these in the portfolio.  There is no way a recruiter is going to look through all 25-30 of the projects from every single candidate who crosses their path.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;IMPORTANT:&lt;/b&gt; Go for "corporate-style" projects.  Yes, the random gif generators and random cat generators are adorable.  If you're applying to work at a corporation (or an agency that does work for corporations), the recruiter will want to see polished projects that aim to serve a business purpose.  &lt;em&gt;(Think fake client websites, clones of part of an existing platform like Twitter or Uber, or something that solves a problem in your everyday life)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-build-a-network" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(2) Build a network&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;You might be wondering why/if building a network is really important.&lt;/p&gt;

&lt;p&gt;First, being an employee referral increases your chances of getting the job by 10x.  That’s not all — building a network will help you to stay on top of new things going in the tech industry, meet potential mentors/mentees/advocates/hiring managers/etc, enhance the skills you'll need to level up your career, and keep you motivated during those tough times.&lt;/p&gt;

&lt;p&gt;For the introverts out there, I get it.  Networking can be pretty awkward and super stressful.  But it's a necessary evil and with practice, it will just get easier.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-if-you-want-to-be-a-good-frontend-developer-you-should-learn-at-least-a-little-about-a-backend-framework" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(3) If you want to be a good frontend developer, you should learn at least a little about a backend framework&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Or vice versa.  While you’re at it, learn a little bit about design, too - especially if you want to freelance, work for a large company, or eventually move into management.  Your work as a dev will require you to understand requirements from someone who essentially is speaking a different language than you, then pass off your work to someone who uses &lt;em&gt;another&lt;/em&gt; language!&lt;/p&gt;

&lt;p&gt;Coming from the software sales world, I see how often devs get stuck in their own bubble and oftentimes don't even know how to use the product they're building!  They don't take the time to get a wholistic understanding of their product from the customer side, sales side, or even the design side.  You can make yourself stand out by understanding at least a little about what is going on over the fence and how the work you do will make an impact, or what you could do to make your colleagues' jobs easier.  Take a course in something new or talk with someone else who is in the role.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-several-lines-readable-of-code-gt-one-line-of-code-that-only-you-understand" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(4) Several lines readable of code &amp;gt; one line of code that only you understand&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This goes along with the last piece of advice.  Even if you don’t expect to be working on a team, remember that one day, you’ll need to read your own code again after not-having looked at it for several months.  Do your future self/future colleagues a favor and name your functions something like &lt;em&gt;formatPhoneNumber&lt;/em&gt; instead of &lt;em&gt;fixFon&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5talk-about-what-youre-working-on-a-lot" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;(5)Talk about what you're working on (a LOT)&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;It’s YOUR JOB to make sure you’re putting your work in front of the people who need to see it.  Talk about what you’re working on (often) and show off your progress.  It’s a tough shift to make for people who - like me - were taught that tooting your own horn makes you braggy.  Here are some ways to put yourself out there without coming off as obnoxious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Solve a problem/complete a project, then write a blog post about how you did it.  Share the blog post with an engineering manager and ask for feedback&lt;/li&gt;
&lt;li&gt;Commit to writing social media posts 3x week about the progress on your current project&lt;/li&gt;
&lt;li&gt;Invite engineers from your company or from meetups to talk 1:1 over coffee (or tea. or water.) Ask about their career journey and exciting projects they are working on.  Tell them what you're working on and ask for their feedback on current projects or your portfolio.&lt;/li&gt;
&lt;li&gt;Accept compliments by simply saying “thank you.”  This may sound like a no-brainer but for women in particular, we often meet compliments with fairly negative comments or we use it as an opportunity to give someone else credit for our work ("Well, without so-and-so, this would have never gotten done!" or "Oh, this was so stressful to do and I'm not really happy with the way it came out because...").  Just say thank you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What advice would you give to developers trying to move into engineering from non-traditional roles?&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.twitter.com/shaundai"&gt;Twitter&lt;/a&gt; and on &lt;a href="https://www.linkedin.com/in/shaundai"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding attr methods in Ruby!</title>
      <author>Kate (she/her)</author>
      <pubDate>Mon, 07 Dec 2020 00:15:34 +0000</pubDate>
      <link>https://dev.to/kateh/understanding-attr-methods-in-ruby-412</link>
      <guid>https://dev.to/kateh/understanding-attr-methods-in-ruby-412</guid>
      <description>&lt;p&gt;If you've worked with Ruby, you've likely encounter &lt;strong&gt;attr&lt;/strong&gt; methods such as &lt;code&gt;attr_accessor&lt;/code&gt;, &lt;code&gt;attr_reader&lt;/code&gt;, and &lt;code&gt;attr_writer&lt;/code&gt; sprinkled at the top of the class.&lt;/p&gt;

&lt;p&gt;To truly understand what each of these &lt;code&gt;attr&lt;/code&gt; methods are and how to use them, we must understand the very basics of how data is stored in a Ruby class. (If you already have the basics down, skip to &lt;a href="#here"&gt;here&lt;/a&gt;!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-data-stored-and-access-in-a-ruby-class" class="anchor"&gt;
  &lt;/a&gt;
  How is data stored and access in a Ruby class?
&lt;/h2&gt;

&lt;p&gt;Let’s say we’re creating a Ruby on Rails web app for a veterinary hospital 😸🐶. We want to store information about each dog patient. To start with, we will need a &lt;code&gt;Dog&lt;/code&gt; class that stores &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Ruby, this class may look something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we have a &lt;code&gt;Dog&lt;/code&gt; class. This &lt;code&gt;Dog&lt;/code&gt; class has an &lt;code&gt;initialize&lt;/code&gt; method which expects a &lt;code&gt;name&lt;/code&gt; parameter. Within this &lt;code&gt;initialize&lt;/code&gt; method we instantiate an &lt;strong&gt;instance variable&lt;/strong&gt; &lt;code&gt;@name&lt;/code&gt; which stores the &lt;code&gt;name&lt;/code&gt;&lt;br&gt;
parameter that is passed in when a &lt;code&gt;Dog&lt;/code&gt; instance is created.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-an-instance-variable" class="anchor"&gt;
  &lt;/a&gt;
  What is an instance variable?
&lt;/h3&gt;

&lt;p&gt;In Ruby, instance variables are prefixed with &lt;code&gt;@&lt;/code&gt;. You may recognize instance variables being used to pass data between the controller and the view in a Ruby on Rails app. (Under the hood, Ruby on Rails is set up so that an instance variable in a controller method is accessible in the corresponding view.)&lt;/p&gt;

&lt;p&gt;Even outside of a Rails-y context, instance variables are used to store data for a regular Ruby class.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#an-instance-variable-can-be-accessed-by-any-method-within-the-class" class="anchor"&gt;
  &lt;/a&gt;
  An instance variable can be accessed by any method within the class.
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Here's an Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;barks&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; says WOOF"&lt;/span&gt; &lt;span class="c1"&gt;# This method has access to @name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The catch here is that instance variables are accessible by any method within a class, but are NOT accessible outside the class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If instantiate a &lt;code&gt;Dog&lt;/code&gt; instance and try to call &lt;code&gt;.name&lt;/code&gt;, we get a &lt;code&gt;NoMethodError&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; &amp;lt;Dog:0x00007fb72cd0aa30 @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; NoMethodError: undefined method `name` for #&amp;lt;Dog:0x00007fb72eab6bb0 @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we want to read the &lt;code&gt;@name&lt;/code&gt; value stored on a &lt;code&gt;Dog&lt;/code&gt; instance, we'll need to access it through a method.&lt;/p&gt;

&lt;p&gt;Let's define a simple method that returns &lt;code&gt;@name&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Method that returns @name&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we are able to access the value of &lt;code&gt;@name&lt;/code&gt; by calling the name method!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "Tomi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This simple &lt;code&gt;name&lt;/code&gt; method we just defined is what we call a &lt;strong&gt;getter&lt;/strong&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-getter-method-returns-the-value-of-an-instance-variable" class="anchor"&gt;
  &lt;/a&gt;
  A getter method returns the value of an instance variable.
&lt;/h3&gt;

&lt;p&gt;In the previous example, we had the &lt;code&gt;name&lt;/code&gt; method simply return &lt;code&gt;@name&lt;/code&gt;. However, if you wanted  &lt;code&gt;@name&lt;/code&gt; to be returned in a certain format, you can easily achieve that by customizing your getter method.&lt;/p&gt;

&lt;p&gt;Let's write a custom getter method that returns &lt;code&gt;dog.name&lt;/code&gt; in all caps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;Dog:0x00007fb7475df010 @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "TOMI"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that here, &lt;code&gt;@name&lt;/code&gt; itself is not modified. We’ve simply defined a method that returns &lt;code&gt;@name&lt;/code&gt; in the desired format.&lt;/p&gt;

&lt;p&gt;Say we initialize a &lt;code&gt;Dog&lt;/code&gt; instance but realize we have made a typo! If we try to reset &lt;code&gt;name&lt;/code&gt;, we'll get a &lt;code&gt;NoMethodError&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Whoops!&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Tomi'&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; NoMethodError: undefined method `name=' for #&amp;lt;Dog:0x00007fb7483dd9a0 @name="Tomu"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similar to how we need to define a getter method to read the &lt;code&gt;@name&lt;/code&gt; value, we also need a method to set &lt;code&gt;@name&lt;/code&gt; a value. Though we're setting the value of &lt;code&gt;@name&lt;/code&gt; on initialize, we don't have anything in place to change it later.&lt;/p&gt;

&lt;p&gt;We need a &lt;strong&gt;setter method&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-setter-method-sets-the-value-of-an-instance-variable" class="anchor"&gt;
  &lt;/a&gt;
  A setter method sets the value of an instance variable.
&lt;/h3&gt;

&lt;p&gt;Let's create a setter method that allows us to change the name attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Getter method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Setter method&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that a setter method follows the format &lt;code&gt;def attribute=(attribute)&lt;/code&gt;. Now with a setter method, we can easily update the value of &lt;code&gt;@name&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomuu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Tomi'&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;Dog:0x00007fb7483dd9a0 @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-attraccessor-endraw-raw-attrwriter-endraw-and-raw-attrreader-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;attr_accessor&lt;/code&gt;, &lt;code&gt;attr_writer&lt;/code&gt;, and &lt;code&gt;attr_reader&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Now that we understand the basics of how data is stored and accessed in a Ruby class, let’s revisit the original question. What are these &lt;code&gt;attr&lt;/code&gt; methods? Well... they're ✨magic✨!&lt;/p&gt;

&lt;p&gt;Getting and setting an attribute of a class is a pretty basic operation. If we want a &lt;code&gt;Dog&lt;/code&gt; class that has &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;breed&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, and any number of attributes, we need a getter and setter method for each of these attributes. Writing methods for something very simple can quickly get very repetitive.&lt;/p&gt;

&lt;p&gt;You might've heard of Ruby as a very developer-friendly language. Aside from being very human-readable, Ruby aims to make our lives easier via metaprogramming. In other words, as a programming language, Ruby takes care of a lot of things so that developers don't have to! &lt;code&gt;attr&lt;/code&gt; methods are one of those things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-attraccessor-endraw-provides-a-shorthand-way-to-define-getter-and-setter-methods-for-specified-attributes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;attr_accessor&lt;/code&gt; provides a shorthand way to define getter and setter methods for specified attributes.
&lt;/h3&gt;

&lt;p&gt;Desired attributes are passed in to &lt;code&gt;attr&lt;/code&gt; methods as a symbol:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;

    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
      &lt;span class="vi"&gt;@breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;
      &lt;span class="vi"&gt;@age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With a single &lt;code&gt;attr_accessor :name, :breed, :age&lt;/code&gt; line, we were able to define six methods!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;attr_accessor&lt;/code&gt; combines &lt;code&gt;attr_reader&lt;/code&gt; and &lt;code&gt;attr_writer&lt;/code&gt;. If you only want to shorthand a getter method, you can use &lt;code&gt;attr_reader&lt;/code&gt;. If you want to shorthand a writer method, you can use &lt;code&gt;attr_writer&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;attr_accessor&lt;/code&gt; - creates a getter and setter method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;attr_reader&lt;/code&gt; - creates a getter method only&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;attr_writer&lt;/code&gt; - creates a setter method only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It might make sense to use &lt;code&gt;attr_reader&lt;/code&gt; or &lt;code&gt;attr_writer&lt;/code&gt; in situations where we want to customize one method, but not the other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-we-want-raw-dogage-endraw-to-return-raw-age-endraw-in-a-certain-format-but-dont-want-to-change-how-raw-age-endraw-is-stored" class="anchor"&gt;
  &lt;/a&gt;
  Example: We want &lt;code&gt;dog.age&lt;/code&gt; to return &lt;code&gt;@age&lt;/code&gt; in a certain format, but don't want to change how &lt;code&gt;@age&lt;/code&gt; is stored.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;

    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:breed&lt;/span&gt;
    &lt;span class="nb"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt; &lt;span class="c1"&gt;# Default setter method to set @age&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
      &lt;span class="vi"&gt;@breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;
      &lt;span class="vi"&gt;@age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Defining our own getter method to return a formatted age&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;age&lt;/span&gt;
      &lt;span class="s2"&gt;"Age &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomi'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'pug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;Dog:0x00007fb72debcdf0 @age=2, @breed="pug", @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;age&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; "Age 2"&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;Dog:0x00007fb72debcdf0 @age=2, @breed="pug", @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-we-want-raw-age-endraw-to-always-be-set-in-a-certain-format" class="anchor"&gt;
  &lt;/a&gt;
  Example: We want &lt;code&gt;@age&lt;/code&gt; to always be set in a certain format.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;

    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;
    &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt; &lt;span class="c1"&gt;# Default getter method to read @age&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
      &lt;span class="vi"&gt;@breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;
      &lt;span class="vi"&gt;@age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Age &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;# Set @age to age in desired format.&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Defining our own setter method so @age is always set in desired format&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Age &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Tomi'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'pug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;Dog:0x00007fb73383efe0 @age="Age 2", @breed="pug", @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; 3&lt;/span&gt;
&lt;span class="n"&gt;dog&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;Dog:0x00007fb73383efe0 @age="Age 3", @breed="pug", @name="Tomi"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Instance variables hold data in a Ruby class instance.&lt;/li&gt;
&lt;li&gt;Instance variables can only be directly accessed within a Ruby class.&lt;/li&gt;
&lt;li&gt;To access an instance variable outside of a Ruby class, we must define methods.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;attr_reader&lt;/code&gt;, &lt;code&gt;attr_writer&lt;/code&gt;, and &lt;code&gt;attr_accessor&lt;/code&gt; are convenient shorthands for writing
getter and setter methods.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>beginners</category>
      <category>rails</category>
    </item>
    <item>
      <title>Need assistance with useEffect() dependencies</title>
      <author>Yar</author>
      <pubDate>Sun, 06 Dec 2020 23:50:04 +0000</pubDate>
      <link>https://dev.to/ptifur/need-assistance-with-requestanimationframe-in-react-5gdc</link>
      <guid>https://dev.to/ptifur/need-assistance-with-requestanimationframe-in-react-5gdc</guid>
      <description>&lt;p&gt;Hey there! So I'm trying to figure out how to use &lt;code&gt;canvas&lt;/code&gt; element in React.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-TltgnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dkegj1ektl36mglre0jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-TltgnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dkegj1ektl36mglre0jf.png" alt="raf-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how my playground looks like. Canvas element, a dot travelling around the board and a button to start / stop the animation &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue" class="anchor"&gt;
  &lt;/a&gt;
  The Issue
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The button is giving me hard time pausing and resuming the animation. When the dot stops programmatically, it takes a couple of extra clicks on the Start button to keep it moving. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I suspect it has to do with &lt;code&gt;useEffect&lt;/code&gt; and its dependencies.&lt;/p&gt;

&lt;p&gt;Do you think you could take a look and give me some advice?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code" class="anchor"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;I use &lt;code&gt;requestAnimationFrame()&lt;/code&gt; method to update the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reqRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// some animation&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deltaTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;
    &lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// stop&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// start the loop&lt;/span&gt;
    &lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// clean up&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reqRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;previousTimeRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;animate()&lt;/code&gt; function loops itself &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect()&lt;/code&gt; starts the animation &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;requestAnimationFrame()&lt;/code&gt; method generates new &lt;code&gt;reqRef&lt;/code&gt; value with each run &lt;/li&gt;
&lt;li&gt;in order to stop the animation you have to use &lt;code&gt;cancelAnimationFrame(reqRef.current)&lt;/code&gt; with the current reqRef&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#approach" class="anchor"&gt;
  &lt;/a&gt;
  Approach
&lt;/h2&gt;

&lt;p&gt;I use &lt;code&gt;shouldStop&lt;/code&gt; as a key to pause the animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShouldStop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShouldStop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At the start it works as expected&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The button flips the key &lt;/li&gt;
&lt;li&gt;useEffect fires, as &lt;code&gt;shouldStop&lt;/code&gt; is set as its dependency, and sets the loop
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positionX&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setPositionX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;290&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setPositionY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;165&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setShouldStop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;shouldStop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the dot bounces at the edge, the app resets its position and flips the key back to &lt;code&gt;true&lt;/code&gt;. The dot rests in the middle of the screen. &lt;/p&gt;

&lt;p&gt;And now when I press the button, the key switches to &lt;code&gt;false&lt;/code&gt; yet nothing happens. After the second click key switches to &lt;code&gt;true&lt;/code&gt; again. And only on the third time the key switches to &lt;code&gt;false&lt;/code&gt; and the dot starts moving.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so" class="anchor"&gt;
  &lt;/a&gt;
  So
&lt;/h2&gt;

&lt;p&gt;I guess I have three questions 😼&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it a proper approach overall?&lt;/li&gt;
&lt;li&gt;What am I missing about the useEffect()?&lt;/li&gt;
&lt;li&gt;How do you trace / investigate those issues?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>help</category>
      <category>discuss</category>
      <category>react</category>
    </item>
    <item>
      <title>Duck Typing in Python</title>
      <author>Renan Moura</author>
      <pubDate>Sun, 06 Dec 2020 22:01:27 +0000</pubDate>
      <link>https://dev.to/renanmouraf/duck-typing-in-python-4g75</link>
      <guid>https://dev.to/renanmouraf/duck-typing-in-python-4g75</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dynamic Typed languages like Python and JavaScript have an interesting characteristic of letting an object respond to a call according to the definitions of methods and attributes it has independently of its type.&lt;/p&gt;

&lt;p&gt;This means that the type of the object, i.e, its own class, or the class it inherits from doesn't matter, the interpreter only cares about the interfaces of the object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Duck&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quack_and_swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quack and swim'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quack_and_swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quack and swim'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Frog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ribbit_and_swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ribbit and swim'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_duck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quack_and_swim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;duck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Duck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;bird&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;frog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Frog&lt;/span&gt;
    &lt;span class="n"&gt;check_duck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duck&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;check_duck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;check_duck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output of the code above is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;quack and swim
quack and swim
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 7, in &amp;lt;module&amp;gt;
  File "&amp;lt;stdin&amp;gt;", line 2, in is_duck
AttributeError: type object 'Frog' has no attribute 'quack_and_swim'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first and second objects &lt;code&gt;duck&lt;/code&gt; and &lt;code&gt;bird&lt;/code&gt; could successfully respond to the of &lt;code&gt;quack_and_swim()&lt;/code&gt; while the &lt;code&gt;frog&lt;/code&gt; object couldn't and throws an exception.&lt;/p&gt;

&lt;p&gt;In terms of code, the classes &lt;code&gt;Duck&lt;/code&gt; and &lt;code&gt;Bird&lt;/code&gt; are not related at all, they don't share a parent class through inheritance, but they have the &lt;strong&gt;same interface&lt;/strong&gt; for the function &lt;code&gt;quack_and_swim()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The type of the object is not important, the &lt;em&gt;interface&lt;/em&gt; of the object when you use it is what matters.&lt;/p&gt;

&lt;p&gt;In the end, if the object behaves like a duck, for practical purposes, it is a duck, no matter what bird it is, as long as it has the right interface.&lt;/p&gt;

&lt;p&gt;But what do we do about the thrown exception?&lt;/p&gt;

&lt;p&gt;Since we don't check the type of the object or if it has certain attributes, the Pythonic way to handle any &lt;a href="https://renanmf.com/handling-exceptions-python/"&gt;exception&lt;/a&gt; is to use a &lt;code&gt;try/except&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;check_duck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;AttributeError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The treated exception above will output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 2, in &amp;lt;module&amp;gt;
NameError: name 'check_duck' is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So we always assume the object has the method or attribute we need, if it doesn't, we catch the exception with the &lt;code&gt;try&lt;/code&gt; block and treat it accordingly.&lt;/p&gt;

&lt;p&gt;If you had any trouble following this article, I recommend this series of articles about Object-Oriented Programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://renanmf.com/classes-objects-python/"&gt;Classes and Objects in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://renanmf.com/object-oriented-programming-encapsulation-in-python/"&gt;Object-Oriented Programming: Encapsulation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://renanmf.com/inheritance-python/"&gt;Inheritance in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://renanmf.com/object-oriented-programming-polymorphism-in-python/"&gt;Object-Oriented Programming: Polymorphism in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, consider reading &lt;a href="https://renanmf.com/handling-exceptions-python/"&gt;Handling Exceptions in Python&lt;/a&gt; to learn more about how to deal with exceptions in Python.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why I turned my homepage into a timeline</title>
      <author>Mike Nikles</author>
      <pubDate>Sun, 06 Dec 2020 21:32:28 +0000</pubDate>
      <link>https://dev.to/mikenikles/why-i-turned-my-homepage-into-a-timeline-h9</link>
      <guid>https://dev.to/mikenikles/why-i-turned-my-homepage-into-a-timeline-h9</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@fprado?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Félix Prado&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/line?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-has-happened-so-far" class="anchor"&gt;
  &lt;/a&gt;
  What has happened so far?
&lt;/h2&gt;

&lt;p&gt;On December 21, 2019 I migrated my blog from Medium to my own infrastructure (&lt;a href="https://dev.to/mikenikles/migrating-from-medium-to-my-own-blog-1nj8"&gt;this blog post has more details&lt;/a&gt;). The main reason was to own my content rather than leaving it on servers owned by a company. It also gives me more flexibility should the need arise to provide my content in other formats, e.g. RSS feed.&lt;br&gt;
In summer of 2020, I launched &lt;a href="https://dev.to/blog/my-personal-website-v2-0"&gt;v2 of my website&lt;/a&gt; in preparation for the publication of my first book, &lt;a href="https://dev.to/cloud-native-web-development"&gt;Cloud Native Web Development&lt;/a&gt;. The main goal of v2 was to significantly simplify the architecture.&lt;/p&gt;

&lt;p&gt;As of v2, the homepage displayed a list of blog post previews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tn9KWtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rskoce9bdanth9g159s9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tn9KWtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rskoce9bdanth9g159s9.png" alt="v2 homepage with blog post thumbnails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was great up until just about now, read December 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-a-timeline-as-my-homepage" class="anchor"&gt;
  &lt;/a&gt;
  Why choose a timeline as my homepage?
&lt;/h2&gt;

&lt;p&gt;The latest evolution of the homepage looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0kxfk0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egnxcndi49oigsf2nnfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0kxfk0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egnxcndi49oigsf2nnfb.png" alt="Timeline homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lightweight version of the timeline is used on mobile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-8iR2zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nowka2m0wvaom4wc08h0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-8iR2zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nowka2m0wvaom4wc08h0.png" alt="Mobile intro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpvNZRp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilwiuu13j1rwytr9h5j0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpvNZRp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilwiuu13j1rwytr9h5j0.png" alt="Mobile timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://twitter.com/mikenikles/status/1334305377500925953"&gt;this Twitter thread&lt;/a&gt; for progress updates and how the homepage came together.&lt;/p&gt;

&lt;p&gt;The reason to show a timeline is twofold and inspired by &lt;a href="https://www.florin-pop.com/timeline"&gt;Florin Pop's timeline on his website&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;It's about more than blog posts&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#simplicity" class="anchor"&gt;
  &lt;/a&gt;
  Simplicity
&lt;/h3&gt;

&lt;p&gt;A bit over 1,000 visitors per month read a single blog post where I explain why I moved from React to Svelte, according to &lt;a href="https://your-analytics.org/mikenikles.com?preset=30days"&gt;my public website analytics&lt;/a&gt;.&lt;br&gt;
The second most visited page is the homepage with roughly 800 visitors per month. While the previous version was colorful and had nice images and blog post summaries, I received feedback from people saying they look at the titles and if anything sounds interesting, they click and read the blog post.&lt;/p&gt;

&lt;p&gt;The new timeline view reflects that and only displays a blog post's title, with a call to action to read the post.&lt;/p&gt;

&lt;p&gt;A nice side effect with the new view is a much more performant homepage given there is only a single image to load.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-about-more-than-blog-posts" class="anchor"&gt;
  &lt;/a&gt;
  It's about more than blog posts
&lt;/h3&gt;

&lt;p&gt;Throughout my career, I have mentored others, answered questions in online communities and worked on side projects.&lt;br&gt;
With the timeline view, I have a place to showcase this work and help others find me online and see what I'm up to.&lt;/p&gt;

&lt;p&gt;The filter &amp;amp; search features help narrow down what is displayed in the timeline. Starting in 2021, I am going to revive my &lt;a href="https://www.youtube.com/channel/UCgEvLz_YbByFqn8f32wh9lA"&gt;YouTube channel&lt;/a&gt;, so expect there to be new entries on the timeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Technical implementation
&lt;/h2&gt;

&lt;p&gt;The majority of the work happened in &lt;a href="https://github.com/mikenikles/www-mikenikles-com/pull/252"&gt;PR 252&lt;/a&gt;. There are about 10 lines of custom CSS code, the rest is styled with &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; and of course still based on &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; &amp;amp; &lt;a href="https://sapper.svelte.dev"&gt;Sapper&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Drawing a snowman in CSS... with no HTML elements!</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 06 Dec 2020 18:56:25 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/drawing-a-snowman-in-css-with-no-html-elements-57g7</link>
      <guid>https://dev.to/alvaromontoro/drawing-a-snowman-in-css-with-no-html-elements-57g7</guid>
      <description>&lt;p&gt;The snowman from the image was drawn in CSS, without using JavaScript or HTML, as you can see in the following &lt;a href="https://codepen.io/alvaromontoro/full/QWKNbrQ"&gt;snippet&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/QWKNbrQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And here you can see a video of the drawing being coded step by step just using CSS (explanation of how it was done at the end of this post):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RhO0UmcREGo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But what type of witchcraft is this? How is it possible?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9jo6rdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/skikd7jc8omzhnmdc4cl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9jo6rdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/skikd7jc8omzhnmdc4cl.gif" alt='Animated gif of a strange-looking man saying "magic" while moving his hands dramatically'&gt;&lt;/a&gt;&lt;/p&gt;
Web development sometimes feels like this!



&lt;p&gt;Obviously, there's a trick. Codepen and other online editors, don't show the basic structure of the document that the user is editing. The written HTML code is then wrapped in something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"link.to.css.code.from.editor"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"link.to.js.code.from.editor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Here goes the HTML from the editor --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the snippet itself, there's nothing in the HTML or JavaScript boxes, which makes it look like there's no other code but CSS, but the code above (or something similar) is auto-generated to run.&lt;/p&gt;

&lt;p&gt;Because it looks like there's no HTML, some people call this type of CSS drawings a zero-element or no-div drawing... but truly there is an element: the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; (or the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; in the case of the snowman).&lt;/p&gt;

&lt;p&gt;Mystery solved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-was-done" class="anchor"&gt;
  &lt;/a&gt;
  How it was done
&lt;/h2&gt;

&lt;p&gt;As it can be seen in the &lt;a href="https://www.youtube.com/watch?v=RhO0UmcREGo"&gt;video above&lt;/a&gt;, we used 3 elements for this drawing: the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, and its &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before"&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after"&gt;&lt;code&gt;::after&lt;/code&gt;&lt;/a&gt; pseudo-elements.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;html&lt;/code&gt; tag was used to generate the snowy background (we even added a small animation). It is all a bunch of different sized circles generated with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient()"&gt;&lt;code&gt;radial-gradient&lt;/code&gt;&lt;/a&gt;, and positioned all over the place using the diverse properties of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the body of the snowman, we used the &lt;code&gt;body::before&lt;/code&gt;. We made it into a circle using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"&gt;&lt;code&gt;border-radius: 50%&lt;/code&gt;&lt;/a&gt; that will be the left eye. Then used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/a&gt; to create more circles of different sizes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the other eye,&lt;/li&gt;
&lt;li&gt;the nose,&lt;/li&gt;
&lt;li&gt;the head,&lt;/li&gt;
&lt;li&gt;the buttons in the middle section,&lt;/li&gt;
&lt;li&gt;the middle section,&lt;/li&gt;
&lt;li&gt;the bottom section,&lt;/li&gt;
&lt;li&gt;some shadows between the different parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For one of the buttons, we used two circles so it would not look exactly like a circle. This was on purpose to break a little bit the symmetry of the cartoon.&lt;/p&gt;

&lt;p&gt;For the shadows between the different sections of our snowman, we added &lt;code&gt;box-shadows&lt;/code&gt; with a little bit of a blur.&lt;/p&gt;

&lt;p&gt;Finally, with the &lt;code&gt;body::after&lt;/code&gt; we made a transparent rectangle that covered the whole snowman. And tiltet it a little bit (again, to break the symmetry).&lt;/p&gt;

&lt;p&gt;With three &lt;code&gt;box-shadow&lt;/code&gt;s we generated the hat. And then used multiple &lt;code&gt;linear-gradient&lt;/code&gt; to create the arms, hands, and broom.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Et voilà !&lt;/em&gt; Our snowman is complete!&lt;/p&gt;

</description>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I started JavaScript</title>
      <author>JavierCunat</author>
      <pubDate>Sun, 06 Dec 2020 17:55:42 +0000</pubDate>
      <link>https://dev.to/javiercunat/how-i-started-javascript-39kf</link>
      <guid>https://dev.to/javiercunat/how-i-started-javascript-39kf</guid>
      <description>&lt;p&gt;Hello Enthusiasts of the Computer Science World!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-javascript" class="anchor"&gt;
  &lt;/a&gt;
  What is JavaScript?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; can be the biggest step you can take in your developer career, however when first starting JavaScript it was the hardest thing to grasp, I remember being confused and frustrated along the way. Although this is true I'm here to tell you this is the right option and you need to stick through it, just like learning any language with enough time and practice you will become fluent. Lets stay strong and stay determined. &lt;/p&gt;

&lt;p&gt;JavaScript was created in 1995 by the Netscape web browser, it was a way to add actions to websites, JavaScript is like the verb of a website, call to action. In 1995 it was a way to beat the competition, JavaScript became the standard also called &lt;code&gt;ECMAScript&lt;/code&gt; when it was first introduced. Every website nowadays uses an excessive amount of JavaScript for example, adding something to your cart on Amazon, signing in to your account in any website, liking a post on DEV, virtual reality, robotics, this is all made possible through JavaScript. This one skill will take you very far into your career and opens up a lot of possibilities, however take things step by step and think simply that JavaScript is just a file that you can write instructions to a computer telling it to do as you desire and code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#principles-of-javascript" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Principles of JavaScript&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First lets talk about &lt;code&gt;JavaScript types&lt;/code&gt;, there a seven types or &lt;code&gt;primitive values&lt;/code&gt; , you can open and try these commands in any console, example go to any website, right click, inspect element, open console:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Types&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;2+2 = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;"Hello" + "World"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Represents and Gives either True or False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;td&gt;Used when nothing is assigned to a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;the value represents the intentional absence of any object value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol&lt;/td&gt;
&lt;td&gt;returns a value of type symbol, has static properties that expose several members of built-in objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;objects are containers for named values called properties or methods they follow name:value pairs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Secondly we have &lt;code&gt;JavaScript Comparisons&lt;/code&gt;, these come in very useful with Booleans and they are very simple to understand as they are literally just comparing any type to another:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Comparisons&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;!==&lt;/td&gt;
&lt;td&gt;3!==3 the ! basically means not, therefore 3 doesn't not equal three would return false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;3=3 would not work therefore always 3===3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;3&amp;gt;=3 three is greater than or equal to three would return true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;3&amp;lt;=3 three is less than or equal to three would return true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;3&amp;gt;3 would return false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;3&amp;lt;3 would return false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Next you would look into &lt;code&gt;JavaScript Variables&lt;/code&gt; now this is when JavaScript starts to get fun, this is how a program starts to remember things. A variable stores something and we can access that content through it for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is my blog about starting JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Type in post now in console &lt;/span&gt;
&lt;span class="nx"&gt;post&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is my blog about starting JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These variables are super important and can hold any type of content here are the different ways of calling them:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Variables&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;var&lt;/td&gt;
&lt;td&gt;var= "hello" the first and basic way to declare a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;let&lt;/td&gt;
&lt;td&gt;let= "hello" the new and improved version to declare a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;const="hello" unlike the other two this variable you cannot modify its not interchangeable like others, hence its constant&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Fourth on the list is &lt;code&gt;JavaScript Conditionals&lt;/code&gt;, these conditionals are to control and make decisions that you have written in your code, there are a few:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Conditionals&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;basically if would say if this is right then right true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;if its anything other than the if or later on else if then finally run this&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;else if&lt;/td&gt;
&lt;td&gt;the computer would run after the if the else to see if that is correct to run that&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Billy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Billy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi Billy!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;P.S. All alert() does is make a pop up for the user to display that information that it is correct so the computer will return a pop up saying HI Billy! when running in console.&lt;/p&gt;

&lt;p&gt;Afterwards there are three &lt;code&gt;logical operators&lt;/code&gt; in JavaScript. Although they are called “logical”, they can be applied to values of any type, not only boolean. Their result can also be of any type. Let's take a look:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Logical Operators&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;The AND operator is represented with two ampersands &amp;amp;&amp;amp;. AND returns true if both operands are truthy and false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"//"&lt;/td&gt;
&lt;td&gt;OR is meant to manipulate Boolean values only. If any of its arguments are true, it returns true, otherwise it returns false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;The Boolean NOT operator is represented with an exclamation sign ! Converts the operand to Boolean type: true/false. Returns the inverse value.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Finally we have &lt;code&gt;JavaScript Functions&lt;/code&gt; these are the most important values you will learn in JavaScript to execute everything, they are pieces of code that perform actions, without them JavaScript wouldn't really do anything these actions can preform one or multiple. All functions are followed by () these call the function and then are {} these are the arguments, what's given to functions. These are different types of function:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaScript Functions&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;var a = function name() {}&lt;/td&gt;
&lt;td&gt;function declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;function name () {}&lt;/td&gt;
&lt;td&gt;anonymous function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;this returns a value in a function, it's important to have this to make sure the function acts the way we want it to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;console.log()&lt;/td&gt;
&lt;td&gt;the Console method log() outputs a message to the web console&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Function Explanation Diagram&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DxPYAx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxxjaw7lbgti4w1w0nly.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DxPYAx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxxjaw7lbgti4w1w0nly.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully now you have a better understanding of JavaScript and realize that it goes a lot further than just these principles and fundamentals which you should practice and master to continue your path smoothly. I hope it wasn't as bad as you thought because at first I really did, and if you're still not there continue practicing, make fun simple projects I believe those maximize your understanding and comprehension in a not so frustrating way. Thank you for reading and remember to keep coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>introduction</category>
    </item>
    <item>
      <title>Questions YOU should ask when being interviewed</title>
      <author>Dimitris Platis</author>
      <pubDate>Sun, 06 Dec 2020 15:38:50 +0000</pubDate>
      <link>https://dev.to/platisd/questions-you-should-ask-when-being-interviewed-57de</link>
      <guid>https://dev.to/platisd/questions-you-should-ask-when-being-interviewed-57de</guid>
      <description>&lt;h3&gt;
  &lt;a href="#reverse-interview-questions-for-software-engineers" class="anchor"&gt;
  &lt;/a&gt;
  🔄 Reverse interview questions for Software Engineers
&lt;/h3&gt;

&lt;p&gt;As a Software Engineer, you will go through several interviews in your career. These interviews are typically set up by the potential employers to evaluate your &lt;strong&gt;cultural and technical fitness&lt;/strong&gt; for the role.&lt;br&gt;
From the candidate's point of view, the interview process should not &lt;em&gt;just&lt;/em&gt; be about convincing the employer. That is of course important, however, it should not be your &lt;em&gt;primary&lt;/em&gt; concern unless you are in &lt;em&gt;dire&lt;/em&gt; need of a job. Instead, you should mainly aim to understand what the company works with, how your future teammates operate, what would your development be, and so on.&lt;br&gt;
In other words, you should strive to collect the necessary information which will allow &lt;strong&gt;you&lt;/strong&gt; to assess the technical and cultural suitability of the workplace, its tech and the people in it.&lt;/p&gt;

&lt;p&gt;This is what lead me to create a set of &lt;em&gt;reverse&lt;/em&gt; interview questions.&lt;br&gt;
It is tailored for &lt;em&gt;product companies&lt;/em&gt; and, nonetheless, should be adjusted depending on the setting as well as common sense. Do not try to blindly follow it irrespective of the flow of the conversation, it will just be awkward.&lt;br&gt;
Usually, the interviewer will ask you if you have any questions. This is your chance to start with them, taking into consideration what has already been discussed. No need to ask all of them, or in a particular order either. The &lt;strong&gt;context&lt;/strong&gt; matters!&lt;br&gt;
Most, if not all, questions are open-ended and there is &lt;strong&gt;no "correct" answer&lt;/strong&gt;. More precisely, it is up to you to determine whether the responses satisfy you or not. They are also best-addressed towards individuals involved with development. Do not ask them to a human resources representative or a recruiter. Furthermore, topics that should be covered in every interview, such as benefit package, working hours, salary etc, are not included.&lt;/p&gt;

&lt;p&gt;Overall, personal experience shows these questions make it easier for the interviewers to illustrate in depth &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;what&lt;/em&gt; they work with. Thus far, they have been warmly welcomed and even helped to make a good impression. To say the least, they show the candidate is highly interested and seriously engaged with the process.&lt;br&gt;
More importantly, they enable you, as a Software Engineer, to make well-informed career decisions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology-stack" class="anchor"&gt;
  &lt;/a&gt;
  👩‍💻 Technology stack 👨‍💻
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What does your technology stack look like?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Unless already mentioned, do not forget to ask about programming languages, target operating system, build system or framework, continuous integration and version control software.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#way-of-working" class="anchor"&gt;
  &lt;/a&gt;
  ⚙️ Way of Working ⚙️
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Before a team member starts working on a task, what preparatory work has taken place and what occurs after?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Is the task is written down in some tool and who writes it? Are the tasks derived from a certain set of requirements? Who maintains those requirements? How is traceability ensured? How does the code get peer-reviewed?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you have a specific workstation setup in regards to the operating system, the IDE etc?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;In some projects, there is a very well-defined toolset, either due to company guidelines or constraints set by the product domain. Others let developers freely select their own. The latter is not always the better choice since it may be trickier to set up an efficient workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you use any containers for your development environment and/or the product?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Using containers makes it easier to get all necessary dependencies, however, may be less flexible.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you do pair programming?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Some like pair-programming, some do not. In any case, it is something good to know in advance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you ensure knowledge sharing?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Knowledge sharing is important and there are different ways to do it, which may or may not suit you.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Are there usually person-specific tasks or can everything be taken up by anyone?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This is one of the most important questions for me. I strongly prefer it when everyone can potentially take up any task in the team. However, others like to go deep and specialize in particular sub-domains.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you write documentation?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Do they maintain separate documents, is it contained in the code, or is everything self-documenting so there is no need for extra documentation?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you work with bugs?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;What happens after a bug is discovered? Who usually reports them? How does the emergence of a bug affect their planning?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you collaborate with other sites?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is often fun to work with colleagues located in different parts of the world, however, this does come with its set of challenges.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;When developing a feature, is the team able to complete it in its entirety?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This will give you a hint on the &lt;em&gt;size&lt;/em&gt; of the system you will be working with as well as how &lt;em&gt;vertical&lt;/em&gt; the team's domain of responsibility is.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#agile" class="anchor"&gt;
  &lt;/a&gt;
  🚅 Agile 🚅
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you follow any development methodology, e.g. Agile? If so, how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Are there daily standups, retrospectives etc?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you write tasks?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Are they formulated as user stories? Are they estimated?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you release software?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;How often do the releases take place? Are they automatically built and deployed?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#open-source" class="anchor"&gt;
  &lt;/a&gt;
  🚀 Open source 🚀
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Are you working with open source software? If so, how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Can they name some open source packages they heavily utilize? Do they upstream any changes? Working with open source can be a valuable experience to carry with to the next job and upstreamed changes offer great visibility. On the other hand, there may be multiple do's and don'ts which can make your life difficult.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#relations-with-customers" class="anchor"&gt;
  &lt;/a&gt;
  🧑‍🤝‍🧑 Relations with customers 🧑‍🤝‍🧑
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you collaborate with the customers?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dependencies, communication and collaboration with the customer can vary between projects or even teams in the same project. There are those who enjoy being tightly engaged with the customer while others prefer working more isolated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How smooth do customer deliveries usually go?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Delivering software may require intense collaboration with the customer for the new software to be integrated. Some thrive in such situations and view them as a chance to understand the customer needs better. Others try to avoid them.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#testing" class="anchor"&gt;
  &lt;/a&gt;
  🐜 Testing 🐜
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How do you test your code?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Testing and verification may happen at different levels. From unit and integration tests to manual verification and trying things out in hardware or software in the loop rigs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What test frameworks do you use?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Not all frameworks appeal the same to everyone. It is good if you know this in advance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What are your thoughts on Test Driven Development?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Do they use TDD? If not, why?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#career-path" class="anchor"&gt;
  &lt;/a&gt;
  🤵 Career path 🤵
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;What do you think I will love about this job?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A good indicator of the extent they have understood your personal goals and style as well as the incentives they have to offer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Where do you see me in 5 years?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A question often addressed to you as an interviewee. Reversing it offers you insights on the available career development paths.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How common is it for employees from this branch/department/team to advance in the higher organizational hierarchy?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Are the ones on the top coming from a different background from yours? Can your loyalty potentially pay off?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#selfdevelopment" class="anchor"&gt;
  &lt;/a&gt;
  📚 Self-development 📚
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;How often do your employees attend conferences, courses, seminars or hackathons?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;All companies &lt;em&gt;claim&lt;/em&gt; they care for the personal development of their employees. However few have concrete examples of how they do it. Not all activities will satisfy all engineers, therefore getting input on this can be crucial.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#collaboration-with-3rd-parties" class="anchor"&gt;
  &lt;/a&gt;
  🤝 Collaboration with 3rd parties 🤝
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you work with external suppliers? If so, how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Working with external suppliers can be both fun and/or challenging. It is good if you can find out how this synergy works.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Do you collaborate with academia? If so, how? If not, would you be open to?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Participating in research projects can be interesting and rewarding. However, it may consume a portion of your time and it is not everyone's cup of tea.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#innovation" class="anchor"&gt;
  &lt;/a&gt;
  💡 Innovation 💡
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Question(s)&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Who comes up with novel features and how?&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Does the responsibility for coming up with new features lie with the customer or the company's higher management? Is there an "advanced engineering" team that is tasked with this? Do the employees themselves often propose novel product functionality? Or is it interns that get to experiment with the fun stuff?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;What kind of functionality are you mostly working with, in this branch?&lt;/strong&gt;&lt;br&gt;&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Commodity&lt;/strong&gt; functionality constitutes all functionality that customers typically expect in a product or system, but that is also offered by competing companies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Differentiating&lt;/strong&gt; functionality contains the functionality that makes customers select our products or systems over those from competitors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Innovation&lt;/strong&gt; functionality is experimental functionality. Company experiments with different innovative ideas to identify new future differentiation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;The three types of functionality are found in Jan Bosch's 3LPM. &lt;a href="https://www.researchgate.net/publication/260584542_Achieving_Simplicity_with_the_Three-Layer_Product_Model"&gt;[1]&lt;/a&gt;, &lt;a href="https://janbosch.com/blog/index.php/2017/01/28/9-out-of-10-in-rd-work-on-commodity/"&gt;[2]&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6t0FEslo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cVoKY4Z.png" alt="3LPM Jan Bosch"&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>interview</category>
    </item>
    <item>
      <title>How to create a CLI with NodeJS</title>
      <author>Josias Aurel</author>
      <pubDate>Sun, 06 Dec 2020 14:15:59 +0000</pubDate>
      <link>https://dev.to/josiasaurel/how-to-create-a-cli-with-nodejs-1obf</link>
      <guid>https://dev.to/josiasaurel/how-to-create-a-cli-with-nodejs-1obf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#build-a-cli-with-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Build a CLI with NodeJs
&lt;/h1&gt;

&lt;p&gt;Hey there. In this tutorial, I am going to show you how to build a CLI app using NodeJS. This is going to be a simple app that will print a greeting to user, provided his/her name. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-cli" class="anchor"&gt;
  &lt;/a&gt;
  What is a CLI
&lt;/h3&gt;

&lt;p&gt;CLI stands for Command Line Interface. This is the kind of interface where a user makes use of commands in a terminal/console/shell in order to carry out tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-start" class="anchor"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h3&gt;

&lt;p&gt;First things first, let's create a new directory to contain our app source code.&lt;br&gt;
We are going to name that directory &lt;code&gt;greet&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;greet
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next thing is to move to that directory and initialise a new node project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Running the above command to create a new node project is going to ask you some questions, you can choose to skip all of them by continually pressing the &lt;code&gt;enter&lt;/code&gt; key.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that whatever you do, the name you choosed when asked the questions should match the name you want for your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next things is to actually write the code for the app.&lt;br&gt;
Open index.js (or whatever name you gave to the main file) and add the following code at the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="c1"&gt;// ...your code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You might have seen such code somewhere, especially if you have used python before. That line of code is called a shebang. What it does is : it makes your program executable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-does-a-shebang-work-" class="anchor"&gt;
  &lt;/a&gt;
  But how does a shebang work ?
&lt;/h3&gt;

&lt;p&gt;It is a program loader, which will essentially look for an interpreter for the kind of instructions the program contains and run it, passing as first argument the path to the main file.&lt;br&gt;
In this case, it will look for node executable in &lt;code&gt;usr/bin&lt;/code&gt; and run it, passing the path to your main javascript file as first argument.&lt;/p&gt;

&lt;p&gt;Next comes our main program. Our program needs to take the name of the user as first argument. Luckily, Nodejs makes it easy to access command line arguments. This arguments are accessed through &lt;code&gt;process.argv&lt;/code&gt;.&lt;br&gt;
Add the following to your code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now try running your program. You will notice the following output :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;'/data/data/com.termux/files/usr/bin/node'&lt;/span&gt;,
  &lt;span class="s1"&gt;'/data/data/com.termux/files/home/greet/index.js'&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are not adding any arguments to our node programs but we get two. By default, Nodejs will pass two arguments to you program, regardless if it has to take any. The first is the absolute path to the Nodejs executable and the second is the absolute path to your file. &lt;br&gt;
Now try running your program again, passing anything as argument. Try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js hello
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;'/data/data/com.termux/files/usr/bin/node'&lt;/span&gt;,
  &lt;span class="s1"&gt;'/data/data/com.termux/files/home/greet/index.js'&lt;/span&gt;,
  &lt;span class="s1"&gt;'hello'&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So our argument comes after the first two. We therefore need to &lt;em&gt;slice&lt;/em&gt; those two first away from the array to get a new array containing only our arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your code should look like this now&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now try running your script passing it any two arguments. You will get back an array containing the arguments you passed.&lt;/p&gt;

&lt;p&gt;Now we want to access the first argument as the name of the user to greet. That should be the first element of the arguments array.&lt;br&gt;
You will end up with such code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the last line we are sending a Hello message + the first argument we get which should be the name of the user. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-turn-it-into-a-cli" class="anchor"&gt;
  &lt;/a&gt;
  Time to turn it into a CLI
&lt;/h2&gt;

&lt;p&gt;Now we want to turn the app into a CLI that we can use anywhere in our terminal. &lt;br&gt;
Follow the below steps .&lt;br&gt;
First add a &lt;code&gt;bin&lt;/code&gt; key to your &lt;code&gt;package.json&lt;/code&gt; and set it's value to the name of your main script. Here is what mine looks like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A simple cli to greet users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;
   },
   &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;Josias&lt;/span&gt; &lt;span class="nx"&gt;Aurel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,
   &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;
 }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, in the root of your project, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What this command does, is it creates a &lt;code&gt;symlink&lt;/code&gt; i.e, links your script to a global executable, making your script available globally in your terminal.&lt;br&gt;
Now you can use your CLI like you will use any other.&lt;br&gt;
Try running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;greet Mike
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you should get a greeting saying &lt;em&gt;Hello Mike&lt;/em&gt; in your terminal. You are free to close your terminal or try it anywhere in it and it will work.&lt;/p&gt;

&lt;p&gt;You have reached the end of this tutorial.&lt;/p&gt;

&lt;p&gt;Thank you for reading ♥️.&lt;/p&gt;

</description>
      <category>node</category>
      <category>cli</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
