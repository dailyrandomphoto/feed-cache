<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>บ่นโค้ดใน Smart Contract ของ Pancake Bunny</title>
      <author>Chakrit Likitkhajorn</author>
      <pubDate>Thu, 20 May 2021 05:59:39 +0000</pubDate>
      <link>https://dev.to/chrisza4/smart-contract-pancake-bunny-1g7n</link>
      <guid>https://dev.to/chrisza4/smart-contract-pancake-bunny-1g7n</guid>
      <description>&lt;p&gt;อันนี้จะบ่นสั้นๆ คือวันนี้อยากรู้ว่า Pancake Bunny มันพลาดตรงไหน แล้วเห็นโค้ดชุดนึงที่น่าพูดถึง&lt;/p&gt;

&lt;p&gt;คือออกตัวก่อน เวลาเขียน Smart contract มันจะมีเรื่องค่า Gas ซึ่งมันมีผลให้การเขียนโค้ดแบบปกติอาจจะสิ้นเปลือง จุดนี้ผมยังไม่เข้าใจมาก และที่เขาเขียนมันอาจจะดีที่สุดในโดเมน Smart Contract แล้วก็ได้นะครับ&lt;/p&gt;

&lt;p&gt;แต่ถ้าเราเอามาเขียนในภาษาอื่นๆ ที่ไม่มีค่า Gas อย่าลอกเขามาทื่อๆ นะ&lt;/p&gt;

&lt;p&gt;จากภาพนี้&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjWKruKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2ALz5NRsBjyS4uy0pD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjWKruKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2ALz5NRsBjyS4uy0pD.jpeg" alt="Src"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ต้นทาง &lt;a href="https://peckshield.medium.com/pancakebunny-incident-root-cause-analysis-7099f413cc9b"&gt;https://peckshield.medium.com/pancakebunny-incident-root-cause-analysis-7099f413cc9b&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ขอลอกส่วนนี้มา&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token0&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;valueInUSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueInBNB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priceOfBNB&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1e18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;valueInUSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueInBNB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priceOfBNB&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1e18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ต่อ ไม่ได้เอามาด้วย
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;จาก&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// และ 
&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;สองบรรทัดนี้เหมือนกันเด๊ะๆ เลยแค่ใช้ reserve คนละตัว แล้วพอรวมกับ &lt;code&gt;if token1() == WBNB&lt;/code&gt; ทำให้รู้ว่าจุดประสงค์ของโค้ดนี้คือมันต้องการจะเอา Reserve ของ WBNB มาใช้ในสูตร &lt;code&gt;amount * reserve * 2 / totalSupply()&lt;/code&gt; นั่นแหละครับ&lt;/p&gt;

&lt;p&gt;ดังนั้นการเขียนให้เจตนาตรงนี้เคลียร์กว่า ทำได้แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;reserveBNB&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token0&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;reserveBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reserve0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;reserveBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reserve1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserveBNB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;โค้ดชุดหลังมันทำให้อ่านปราดเดียวรู้เลยว่า มันมีสูตรคำนวนแค่สูตรเดียวนะ และสูตรต้องการค่า BNB ที่อยู่ใน Pool มาใช้งานนะ ต่างกับชุดแรกที่ต้องเพ่งนานมากกว่าจะรู้ว่า "อ้อ สูตรเหมือนกันนั่นแหละไม่มีอะไรหรอก แค่ต้องเลือก Reserve มาให้ถูกที่" ผมเพ่งหลายนาทีกว่าจะถึงบางอ้อ&lt;/p&gt;

&lt;p&gt;ผมเดาว่าที่เขาไม่เขียนแบบนี้เพราะจริงๆ มันมี Condition ที่ 3 แล้วใน Solidity การเช็ค if ทุกครั้งมันมีค่า Gas ซึ่งผมไม่เชี่ยวชาญพอที่จะบอกได้ว่าโค้ดแบบนี้ในบริบทของ Solidity ดีหรือไม่ดี อาจจะดีสุดแล้วก็ได้พอเอาเรื่องความประหยัดเข้ามาร่วม&lt;/p&gt;

&lt;p&gt;แต่อยากจะบอกโปรแกรมเมอร์ที่เขียนโปรแกรมทั่วๆ ไปว่า โค้ดแบบนี้จริงๆ อย่าลอกไปใช้ในภาษาที่ไม่ติดเรื่องค่า Gas นะครับ มันอ่านยากครับ&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Learn to Code</title>
      <author>Hemanth Varma</author>
      <pubDate>Thu, 20 May 2021 05:48:30 +0000</pubDate>
      <link>https://dev.to/killingclown007/how-to-learn-to-code-429m</link>
      <guid>https://dev.to/killingclown007/how-to-learn-to-code-429m</guid>
      <description>&lt;p&gt;Software development is an incredibly rewarding skill that can be extremely valuable. It’s remote-work friendly, and no matter where you live in the world, if you get good enough, you can qualify for great paying work ranging from $100k/year — $200k+/year (USD). Some of the highest-paid JavaScript developers make close to $500k/year. But to qualify for those great salaries, you have to get undeniably good at what you do.&lt;br&gt;
Even if you’re already a professional software developer, you need to learn how to learn to code. Choosing a career in software development is choosing a path of lifelong learning.&lt;br&gt;
In my role as a mentor I’ve had a peek into the learning process of hundreds of developers. What shocked me most is how much faster some learn than others. Some with little or no coding background learn new concepts more than 10 times faster than others who may have 10+ year’s experience in the craft. The secret is, you can, too.&lt;br&gt;
There are a handful of learning secrets that can put you on a rocket to mastery of the craft.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code
The best way to learn to code is to code. Jump into a development environment, and write some code. If you’re reading a book or blog post and you encounter a code example, type it out in a code editor and try to make it work. Once you get it working, play with it. Change things up. Try to think of other ways to apply it, or other things you can do with the same technique. Play with the code.
Book smarts will only get you so far. The best learning will come from doing.&lt;/li&gt;
&lt;li&gt;Drive
The best way to get great at something is to do it. A lot. You need to be motivated and determined to learn. One way to get motivated is to give yourself the time and patience to gain some mastery. You don’t need to be an expert right away. It’s like learning a musical instrument. You can’t sit down at a piano and immediately be the next Debussy, but you can master the C major scale in your first sitting.
Likewise, you’re not going to sit down and immediately crank out the next Instagram, TikTok or Fortnite.
As you begin to master each small lesson, you’ll realize you can do this. You can get good at this. You can start to see your goal begin to materialize, and you’ll be more motivated to drive toward that goal.
Keep at it.&lt;/li&gt;
&lt;li&gt;Focus
I’ve seen a lot of developers try to master everything all at once and get nowhere, fast. Their progress slows to an excruciatingly glacial crawl rather than a gold medal sprint.
If you want to learn something quickly, you can’t have your attention scattered everywhere except where you need it. Pick one language (start with JavaScript), one framework (start with React), one book, one course, one topic, etc. Whatever you pick, focus on that one thing until you have a sufficient mastery of it before you move on to something else.
I tell people all the time, concentrate on one language full time for at least a year before you branch out and learn another language. Decades ago, it used to be that a typical software developer would actually need to learn many languages in the course of their career to stay competitive in the field.
While it’s still true that learning more than one language can teach you different ways of seeing things, and even deepen your understanding of your primary language, these days a single language (JavaScript) can get you through the majority of your career.
Tip from a hiring manager: The skills you specialize in are your most valuable skills. If you commit to being a lifelong generalist bouncing from language to language, you’ll put an artificial ceiling on your mastery and earning potential.&lt;/li&gt;
&lt;li&gt;Read
Many of the most useful insights available to software developers come from books. There are lots of good YouTube videos and courses online, but books are the standard bearers of software development culture and knowledge. In particular, I’ve found the following books extremely valuable:
Eloquent JavaScript
Composing Software (Disclaimer: I wrote this one. The printed version is available on Amazon.)
Code Complete: 2nd Edition
Clean Code: A Handbook for Agile Software Craftsmanship
Test Driven Development By Example
Refactoring: Improving the Design of Existing Code 2nd Edition&lt;/li&gt;
&lt;li&gt;Review
If you want to move a new concept from a familiar-sounding idea into long-term memory, reviewing a topic is your friend. The mistake most learners make is that they quickly read a book or a blog post, and then promptly forget what they read the next day. If you read something interesting that you want to remember, review it the next day. Test yourself. Then test yourself again the day after. And the day after. Do that 4 days in a row, and your chances of committing the learning to long-term memory increase dramatically.&lt;/li&gt;
&lt;li&gt;Mix Mediums
Some people learn best by reading, others by watching videos, but if you mix it up — watch a video, then do some reading, then practice with some interactive code sessions, you’ll repeat the concepts from multiple angles, and multiple examples. You’ll naturally drill some review, and get some practice in while you’re at it.&lt;/li&gt;
&lt;li&gt;Build Projects
Learning the concept doesn’t mean you’ll know how to use it in a real app. Once you’ve been coding with exercises for a few weeks, it’ll be time to build something of your own. Need an idea? Instead of the ubiquitous todo app, try implementing The Rejection App.&lt;/li&gt;
&lt;li&gt;Value Principles Over Frameworks and Languages
Frameworks and APIs change fast. Software design principles are evergreen. Learn principles that translate across language barriers.
Examples:
“A small change in requirements should lead to only a small change in implementation.” (Paraphrased from “A Practical Handbook for Software Development”)
Do One Thing (DOT) — Simplified from Doug McIlroy’s “Do One Thing and Do It Well (DOTADIW)” — a function should have one job. It should not fetch data AND process data AND draw to the screen. It should only fetch data. Or only process data. Or only draw to the screen. (Time to split your React components into smaller parts!)
“Program to an interface, not an implementation.” — Gang of Four, “Design Patterns”
“Favor object composition over class inheritance.” — Gang of Four, “Design Patterns”
Avoid shared mutable state.
“Premature optimization is the root of all evil.” ~ Donald Knuth
“You Aren’t Gonna Need It (YAGNI)” — Don’t write code for something that isn’t actually required, yet.&lt;/li&gt;
&lt;li&gt;Share, Document, and Mentor
“Dr. Hoenikker used to say that any scientist who couldn’t explain to an eight-year-old what he was doing was a charlatan.” ~ Kurt Vonnegut — Cat’s Cradle
Learning how to code is just part of the equation. When you’re collaborating with other developers, your code will be reviewed by other people, and they will sometimes challenge your choices. As you try to explain yourself, you may find that you didn’t understand well enough to defend your position. Practice explaining, documenting, and teaching the concepts to your coworkers and other collaborators on your projects.&lt;/li&gt;
&lt;li&gt;Practice, practice, practice!
Anybody who’s ever learned an acquired skill can attest, practice is key. But to get better you can’t just practice the concepts you already know. You need to challenge yourself and extend beyond the realm of what is familiar. If you constantly practice at the edge of your current abilities, you will excel.
The book, “Peak: The New Science of Expertise” delves into the study of deliberate practice and offers a wealth of insights that you can apply in your daily life to get better at practice. I strongly recommend reading it so that you can make your practice time and side-projects more productive.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Spring Boot + Oracle example: Build a CRUD app</title>
      <author>Tien Nguyen</author>
      <pubDate>Thu, 20 May 2021 05:02:30 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-oracle-example-build-a-crud-app-5g6a</link>
      <guid>https://dev.to/tienbku/spring-boot-oracle-example-build-a-crud-app-5g6a</guid>
      <description>&lt;p&gt;In this tutorial, we're gonna build a Spring Boot and Oracle example with database connection that uses Hibernate, Spring Data JPA to make CRUD Operations. You'll know:&lt;/p&gt;

&lt;ul&gt;
        &lt;li&gt;How to configure Spring Data, JPA, Hibernate to work with Oracle Database&lt;/li&gt;
        &lt;li&gt;How to define Data Models and Repository interfaces&lt;/li&gt;
    &lt;li&gt;Way to create Spring Rest Controller to process HTTP requests&lt;/li&gt;
    &lt;li&gt;Way to use Spring Data JPA to interact with Oracle Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full Article at: &lt;a href="https://bezkoder.com/spring-boot-hibernate-oracle/"&gt;https://bezkoder.com/spring-boot-hibernate-oracle/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview of Spring Boot and Oracle example&lt;/h2&gt;

&lt;p&gt;We will build a Spring Boot + Hibernate + Oracle example that exports Rest CRUD API for a Tutorial application:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutotial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;Apis help to create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;Apis also support custom finder methods such as find by published status or by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are APIs that we need to provide:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/published&lt;/td&gt;
&lt;td&gt;find all published Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Hibernate and Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database will be Oracle 12c/19c by configuring project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run the Spring Boot + Oracle example, &lt;strong&gt;&lt;em&gt;tutorials&lt;/em&gt;&lt;/strong&gt; table will be automatically generated in Oracle Database.&lt;br&gt;
You can see things like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mP3-vvci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzo9ywb1skwmid4ldh75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mP3-vvci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzo9ywb1skwmid4ldh75.png" alt="spring-boot-oracle-example-database-table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create some Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lgNesy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dffyo2kup4hlmk9c10vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lgNesy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dffyo2kup4hlmk9c10vw.png" alt="spring-boot-oracle-example-crud-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Oracle database after create operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-SCknk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxujs4st4h79uuhxg8mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-SCknk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxujs4st4h79uuhxg8mw.png" alt="spring-boot-oracle-example-crud-database-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update some Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVZU3gSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puf1ewdah5y7mxm11is7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVZU3gSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puf1ewdah5y7mxm11is7.png" alt="spring-boot-oracle-example-crud-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Oracle database after update operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsfPLhV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtevrg87d05ybgikfqmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsfPLhV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtevrg87d05ybgikfqmi.png" alt="spring-boot-oracle-example-crud-database-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get all Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSlZVJMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk30sr91owi2pedviany.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSlZVJMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk30sr91owi2pedviany.png" alt="spring-boot-oracle-example-crud-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get a Tutorial by Id:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrCQEwJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cunnf1n4fq2b2uko94fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrCQEwJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cunnf1n4fq2b2uko94fs.png" alt="spring-boot-oracle-example-crud-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find all &lt;em&gt;&lt;strong&gt;published&lt;/strong&gt;&lt;/em&gt; Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSXSAIiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02m6atkpezs5iogy8yb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSXSAIiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02m6atkpezs5iogy8yb6.png" alt="spring-boot-oracle-example-crud-search-tutorial-active"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find all Tutorials which title contains 'ring':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1niONinP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk53i5zzydc7bwy55k2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1niONinP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk53i5zzydc7bwy55k2c.png" alt="spring-boot-oracle-example-crud-search-tutorial-title"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete a Tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MsFgd86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flj0ngtwev2xt2o7d0b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MsFgd86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flj0ngtwev2xt2o7d0b1.png" alt="spring-boot-oracle-example-crud-delete-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Oracle database after delete Operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fz93eEXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ucpsnnoxkajn8ewcftk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fz93eEXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ucpsnnoxkajn8ewcftk.png" alt="spring-boot-oracle-example-crud-database-delete-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete all Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOJsF0Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w1pzjrxfkql003y5kyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOJsF0Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w1pzjrxfkql003y5kyj.png" alt="spring-boot-oracle-example-crud-delete-all-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the table has no record:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lrr_YQSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fjnpupux06xnuze8lgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lrr_YQSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fjnpupux06xnuze8lgr.png" alt="spring-boot-oracle-example-crud-database-delete-all-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;Oracle 12c or 19c&lt;/li&gt;
        &lt;li&gt;Maven 3.6.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhE1Pbhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygmbkwywj36jxgi070p6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhE1Pbhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygmbkwywj36jxgi070p6.png" alt="spring-boot-oracle-example-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me explain it briefly.&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and Oracle.&lt;/p&gt;

&lt;p&gt;For step by step and Github, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-hibernate-oracle/"&gt;https://bezkoder.com/spring-boot-hibernate-oracle/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;If you want to add Pagination to this Spring project, you can find the instruction at:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-pagination-filter-jpa-pageable/"&gt;Spring Boot Pagination &amp;amp; Filter example | Spring JPA, Pageable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To sort/order by multiple fields:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-data-sort-multiple-columns/"&gt;Spring Data JPA Sort/Order by multiple Columns | Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Handle Exception for this Rest APIs is necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-controlleradvice-exceptionhandler/"&gt;Spring Boot @ControllerAdvice &amp;amp; @ExceptionHandler example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-restcontrolleradvice/"&gt;@RestControllerAdvice example in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or way to write Unit Test for the JPA Repository:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-unit-test-jpa-repo-datajpatest/"&gt;Spring Boot Unit Test for JPA Repositiory with @DataJpaTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More Practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-rest-xml/"&gt;Spring Boot Rest XML example – Web service with XML Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-file-upload/"&gt;Spring Boot Multipart File upload example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-pagination-sorting-example/"&gt;Spring Boot Pagination and Sorting example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>spring</category>
      <category>oracle</category>
      <category>java</category>
      <category>webdev</category>
    </item>
    <item>
      <title>useAxios: React hook for any Axios call</title>
      <author>Kevin White</author>
      <pubDate>Thu, 20 May 2021 02:40:01 +0000</pubDate>
      <link>https://dev.to/kwhitejr/useaxios-react-hook-for-any-axios-call-12b7</link>
      <guid>https://dev.to/kwhitejr/useaxios-react-hook-for-any-axios-call-12b7</guid>
      <description>&lt;p&gt;&lt;code&gt;useAxios()&lt;/code&gt; is a React hook that simplifies async fetching and state management. &lt;a href="https://github.com/kwhitejr/use-axios"&gt;Source code&lt;/a&gt; and &lt;a href="https://codesandbox.io/s/use-axios-nydlk"&gt;live example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to suggest an improvement? I'm all ears! Please file an issue or open a PR!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./use-axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axiosConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;axiosConfig&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoadingIcon&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMsg&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useAxios&lt;/code&gt; is an &lt;a href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt;-specific implementation of my generic &lt;a href="https://github.com/kwhitejr/use-async-func"&gt;useAsyncFunc&lt;/a&gt; React hook.&lt;/p&gt;

&lt;p&gt;One issue for async operations is when the return value is no longer required. For example, the user leaves the page (the requesting component is unmounted) or the user provides a new search query (the old search query's response is superfluous).&lt;/p&gt;

&lt;p&gt;You might see an error like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In these situations, we want to cancel the initial request. The browser Web API provides the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController"&gt;&lt;code&gt;AbortController&lt;/code&gt; interface&lt;/a&gt;; it is a controller object that allows you to abort one or more Web requests. Axios provides similar capability with the &lt;a href="https://github.com/axios/axios#cancellation"&gt;CancelToken&lt;/a&gt; class. CancelTokens are straightforward to implement if you are already using the Axios library. You read a little more about each implementation &lt;a href="https://medium.datadriveninvestor.com/aborting-cancelling-requests-with-fetch-or-axios-db2e93825a36"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useaxios"&gt;
  &lt;/a&gt;
  useAxios
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * @param {string} url      - The url to call
 * @param {object} [config] - The axios config object; defaults to GET, etc
 * @returns {state}         - { isLoading, isError, response }
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useReducer manages the local complex state of the async func hook's lifecycle.&lt;/span&gt;
  &lt;span class="c1"&gt;// See the source code for the full reducer!&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: it is easy to modify or expand the reducer to fit your needs.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare Axios cancel token&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Define the axios call&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callAxios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Begin with a clean state&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_INIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Straightforward axios call,&lt;/span&gt;
        &lt;span class="c1"&gt;// With cancel token inserted into config&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_SUCCESS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Two options on error:&lt;/span&gt;
        &lt;span class="c1"&gt;// 1. If error is an axios cancel, simply return and move on&lt;/span&gt;
        &lt;span class="c1"&gt;// 2. For all other errors, assume async failure and dispatch failure action&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Canceled request.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_FAILURE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Invoke the defined axios call&lt;/span&gt;
    &lt;span class="nx"&gt;callAxios&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// On unmount, cancel the request&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Operation canceled.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// NOTE: here be dragon!&lt;/span&gt;
    &lt;span class="c1"&gt;// My instinct was include the axios config in this array, e.g. [url, config]&lt;/span&gt;
    &lt;span class="c1"&gt;// This causes an infinite re-render loop that I have not debugged yet :-/&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It is good to cancel superfluous requests so that they do not become memory leaks! I hope you find this example helpful.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>.NET Core Apps on Linux</title>
      <author>Bob Rundle</author>
      <pubDate>Thu, 20 May 2021 02:22:17 +0000</pubDate>
      <link>https://dev.to/bobrundle/net-core-apps-on-linux-1a0d</link>
      <guid>https://dev.to/bobrundle/net-core-apps-on-linux-1a0d</guid>
      <description>&lt;p&gt;One of the great benefits in working with .NET Core is knowing that your code will be cross platform.  In particular it will run on Linux.  This opens up a lot of possibilities.  But does it really run on Linux if you have never seen it run?  But even if you have seen it run, is it really working if you have never run the unit tests on Linux? In my way of looking at the world…no.&lt;/p&gt;

&lt;p&gt;So in this post I will lay out how to get your cross platform .NET Core apps running and tested on Linux in the most straightforward and efficient way.&lt;/p&gt;

&lt;p&gt;The approach is to develop code on Windows and test in Linux containers.  This is the best combination in my view.  So on your windows dev box the set up you need is Hyper-V and Docker.  Getting this setup right is not without its challenges which I will not get into here, but I am pleased to report that once you get this working it stays working and I have had this setup working for years now through all manner of Windows and Docker updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJ5jk_a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brweedu7sge7y306idue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJ5jk_a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brweedu7sge7y306idue.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also needed are the dotnet CLI and VS Code for this optimum (in my view) setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BS7yMog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6yaq7nijmocw9q7w9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BS7yMog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6yaq7nijmocw9q7w9v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the code for this tutorial can be found at &lt;a href="https://github.com/bobrundle/dotnettolinux"&gt;https://github.com/bobrundle/dotnettolinux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll start by creating a simple console app that adds the numbers that appear as arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiKzQIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj0w78pcsvc1uupp56bk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiKzQIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj0w78pcsvc1uupp56bk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In VS Code…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Oo1NEWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjwpd328hk8fd9txb605.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Oo1NEWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjwpd328hk8fd9txb605.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build and run on windows…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ra9tYluH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k47v6xyabgtidyo7hn66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ra9tYluH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k47v6xyabgtidyo7hn66.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is where it gets interesting.  Create a dockerfile for Linux deployment…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrIAx6xW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ugzo0qqnvqrjlcg78s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrIAx6xW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ugzo0qqnvqrjlcg78s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build a Linux docker image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FVcR7NHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi7mu720acwqmf8asvfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVcR7NHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi7mu720acwqmf8asvfu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try running it…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4XLqEUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x22u6957zgkz0qaogumr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4XLqEUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x22u6957zgkz0qaogumr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oops.  ICU stands for Internationalization components for Unicode which is used to handle culture dependent APIs.  .NET 5.0 requires ICU by default and it is not available by default on Linux.  For a simple app such as ours, the easiest thing to do is disable globalization support.&lt;/p&gt;

&lt;p&gt;To disable globalization support we need to add another property to our add.csproj project file…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;InvariantGlobalization&amp;gt;true&amp;lt;/InvariantGlobalization&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets build and run again…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUY7Hb-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azf33anzau163297e380.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUY7Hb-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azf33anzau163297e380.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add unit tests.  You test-first wingnuts will be very disappointed that I didn't write these first, but I am simply not a test first guy.  I could say more but need to stay focused. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtkEmGvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fccwoaw6h5dq4v0hf7r4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtkEmGvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fccwoaw6h5dq4v0hf7r4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need to add a project reference to add.csproj…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;

    &amp;lt;IsPackable&amp;gt;false&amp;lt;/IsPackable&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.7.1" /&amp;gt;
    &amp;lt;PackageReference Include="xunit" Version="2.4.1" /&amp;gt;
    &amp;lt;PackageReference Include="xunit.runner.visualstudio" Version="2.4.3"&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
    &amp;lt;PackageReference Include="coverlet.collector" Version="1.3.0"&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;ProjectReference Include="../add/add.csproj"/&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our unit tests…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;
using Xunit;
using add;
using System.IO;

namespace AddTests
{
    public class ProgramTests
    {
        [Theory]
        [InlineData(new string[] {}, "0",0)]
        [InlineData(new string[] {"1","2","3"}, "6",0)]
        [InlineData(new string[] {"1","2","a"}, "",1)]
        [InlineData(new string[] {"1.1","2.2","3.3"}, "6.6",0)]
        [InlineData(new string[] {"-1e6","1e6"}, "0",0)]
        public void MainTest(string[] args0, string r0, int e0)
        {
            string outfile = Path.GetTempFileName();
            var outstream = File.CreateText(outfile);
            Console.SetOut(outstream);
            int e1 = Program.Main(args0);
            Console.Out.Close();
            string r1 = File.ReadAllText(outfile);
            Assert.Equal(e0, e1);
            if(e0 == 0)
            {
                Assert.Equal(r0 + Environment.NewLine,r1);    
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the unit tests and run them…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6OHJt_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2goo11142upz14brpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6OHJt_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p2goo11142upz14brpi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run the unit tests in Linux we need to more than move binaries…we have to setup a development environment and build the code before running the tests.  To do this we need a Docker file in the parent directory to both code and test folders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6tyQq6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ys831r34p98q0lrxvji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6tyQq6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ys831r34p98q0lrxvji.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Dockerfile…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/sdk:5.0

WORKDIR /src
COPY /add add
COPY /addtests addtests
WORKDIR /src/addtests

CMD ["dotnet","test"]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build and run on Linux…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd4KkLo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wjqjudhkuhy6ffcrkp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd4KkLo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wjqjudhkuhy6ffcrkp9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-discussion"&gt;
  &lt;/a&gt;
  Summary and Discussion
&lt;/h2&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A simple Windows console app was created, built and run on Windows.&lt;/li&gt;
&lt;li&gt;The console app was built for Linux on Windows and run in a Linux container.&lt;/li&gt;
&lt;li&gt;A xUnit testing library was created to run tests against the console app.  It was built and run on Windows.&lt;/li&gt;
&lt;li&gt;The source for both the console app and the xUnit tests were built and run in a Linux container.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following questions about this approach come to mind...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why are you not a test-first guy?&lt;/strong&gt; My answer is too long to be considered here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your "unit tests" are actually integration tests!&lt;/strong&gt; This is semantics. What we can agree on is 100% code coverage is the gold standard of automated testing and this has been achieved in this example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about macOS?&lt;/strong&gt; You cannot run macOS containers on Windows.  You can only run macOS containers on Macs.  There might be a way to test all 3 platforms (Windows, Linux, macOS) on a Mac with containers.  I will experiment when I get a chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why build in the Linux container?  Why not simply use a test runner to run the binaries?&lt;/strong&gt; Indeed, this is a good idea.  I simply don't know how to get this to work with xUnit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not construct a CI/CD pipeline to build and test on Windows and Linux in the cloud?&lt;/strong&gt; Indeed, the next logical step. However, you still cannot reach macOS in the cloud.&lt;/p&gt;

&lt;p&gt;I hope what I have done is useful and addresses some questions you might have.  I spent about a day researching the various aspects of this problem. I came to this issue when I was designing a command line tool for Windows and came to realize that the tool would be useful on Linux.  Then I began to look into building and testing on Linux and discovered the approach was not well documented and not straight-forward and so suggested a post to capture the learnings.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>docker</category>
      <category>linux</category>
    </item>
    <item>
      <title>Implementing Redux pattern </title>
      <author>Jucian0</author>
      <pubDate>Thu, 20 May 2021 02:03:36 +0000</pubDate>
      <link>https://dev.to/jucian0/implementing-redux-pattern-1oj0</link>
      <guid>https://dev.to/jucian0/implementing-redux-pattern-1oj0</guid>
      <description>&lt;p&gt;If you are a software developer and aren't in another world, you have probably read or heard something about Redux. Today Redux is very popular, but not as much as some years ago. The first time that I heard about React, the second word was always Redux, "How to init with react and redux", "Todo app with react redux", and another hundred names. Even though Redux is not as popular today as in the past, I think it's very helpful that you know how Redux works and how you can create a simple version of this famous pattern. &lt;/p&gt;

&lt;p&gt;Redux is a pattern that provides a way to manage your application state. Redux pattern increased in popularity when front-end applications became more complex, and when we started to develop applications with many components, sharing the same state. You can find a lot of libraries that implement this, we have Redux for React and RXJS for Angular. &lt;/p&gt;

&lt;p&gt;Since Redux is very popular I assume that you know how it works and how to use it, but I will provide some basic information about it. If you want to know more, however, I recommend that you read the documentation about the patterns and how some libraries do this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-explanations"&gt;
  &lt;/a&gt;
  Redux explanations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actions - basically actions are like instructions that drive your intentions, you need a &lt;code&gt;type&lt;/code&gt; that describes what you want to do, and if you need some data to perform your intentions, it's necessary to provide a &lt;code&gt;payload&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Push up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reducers - reducers are pure functions that perform your intentions in the application state, that function receives the current state and the action, that is running. For every action, you should provide a reaction in your reducer.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// do something&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// do another thing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store - I like to think about Store as a place where you have the real state, and it provides the resources to get the state &lt;code&gt;store.getState()&lt;/code&gt;, and register listeners.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-redux-api"&gt;
  &lt;/a&gt;
  Our Redux API
&lt;/h2&gt;

&lt;p&gt;This is how we will initiate our Store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our redux implementation has some public methods and private method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dispatch() - This method will receive the instruction that will drive how the state will be changed.&lt;/li&gt;
&lt;li&gt;subscriber() - With this method, we can subscribe listeners to know when the application state is changed. These listeners will be simple functions that can receive the new state changed by argument.&lt;/li&gt;
&lt;li&gt;value() - These methods will return the current state of the application.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need another method to perform the state changes, &lt;code&gt;reducer&lt;/code&gt; is the last method that we need in our implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, we need more than methods in our redux implementation, we need a property to hold the state application, &lt;code&gt;state&lt;/code&gt; and another to hold the reducers application and one more to hold the subscribers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#constructor"&gt;
  &lt;/a&gt;
  Constructor
&lt;/h3&gt;

&lt;p&gt;Let's go ahead. You may notice that I'm using typescript, but feel free to use javascript. Our first step is to write the constructor method, &lt;code&gt;constructor&lt;/code&gt; needs to receive the reducers and the initialState, so let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we assign &lt;code&gt;reducers&lt;/code&gt; and &lt;code&gt;initialState&lt;/code&gt; to &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;reducers&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoReducer&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoReducer&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:[]}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, reduce will perform and return the state changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we iterate reducers registered in Store and invoke every reducer passing by argument the current state and the current action. After that, we save the result returned by every reducer in the correct state property. Finally, we return to the new state. Since the reduce method is a private method it will not be available to use out of class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscribe"&gt;
  &lt;/a&gt;
  Subscribe
&lt;/h2&gt;

&lt;p&gt;Subscribe will allow us to have many state change listeners, so let's implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;thi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we received a function that will be invoked when some changes happen in the state, &lt;code&gt;subscriber&lt;/code&gt; will add the &lt;code&gt;fn&lt;/code&gt; argument into &lt;code&gt;subscribers&lt;/code&gt; property. The last part of this method will return another function that when invoked will remove the &lt;code&gt;fn&lt;/code&gt; function passed by argument. The function that will be returned knows the &lt;code&gt;subscriber&lt;/code&gt; method context, for this reason, we can compare &lt;code&gt;fn&lt;/code&gt; argument with every subscriber registered in our Store and decide who needs to be removed.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;// wii remove callback function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dispatch"&gt;
  &lt;/a&gt;
  Dispatch
&lt;/h3&gt;

&lt;p&gt;Let's implement this method and learn how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;reduce&lt;/code&gt; method is invoked it returns a new state and assigns it to &lt;code&gt;state&lt;/code&gt; property of the store. After that, we iterate &lt;code&gt;subscribers&lt;/code&gt; property and invoke every subscribed function passing the new state by argument, this way every listener will be notified with the new application state.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Push up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#value"&gt;
  &lt;/a&gt;
  Value
&lt;/h3&gt;

&lt;p&gt;Our last method implementation will be a get method that will return us the current state, let's implement it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have a simple implementation of redux, this implementation does not reflect any redux library implementation, it's just a possible implementation of redux. The principal goal of this post is to show you a simple way of how redux works. If you are more interested in a functional approach, let me know and we can address it in the next post.&lt;/p&gt;

&lt;p&gt;I hope that you enjoyed this post. Stay Safe!!!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>redux</category>
      <category>react</category>
    </item>
    <item>
      <title>Minimum Effective Development: What You Need to Know Before You Start Learning Code</title>
      <author>Michael Caveney</author>
      <pubDate>Thu, 20 May 2021 00:38:11 +0000</pubDate>
      <link>https://dev.to/dylanesque/what-you-need-to-know-before-you-start-learning-code-nc9</link>
      <guid>https://dev.to/dylanesque/what-you-need-to-know-before-you-start-learning-code-nc9</guid>
      <description>&lt;p&gt;Welcome to the first entry in Minimum Effective Development, a blog series focused on sorting out signal from noise when it comes to learning front-end software development. There's a LOT to potentially learn out there, and I'm going to guide you towards what you really need to know when you're getting started! &lt;/p&gt;

&lt;p&gt;Taking the self-directed path to learning code is difficult for a lot of reasons, not the least of which are &lt;a href="https://en.wikipedia.org/wiki/There_are_known_knowns"&gt;unknown unknowns&lt;/a&gt;. You can spend a lot of time unnecessarily spinning your wheels getting good at software development: hours, days, weeks, or you can start learning with a framework to be organized and efficient. To help you do just that, I've put together this guide to prepare you to learn to code the right way!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-how-to-learn-efficiently"&gt;
  &lt;/a&gt;
  Learn How to Learn Efficiently
&lt;/h1&gt;

&lt;p&gt;Learning efficiently is a great skill to have regardless of your field of study, but the wide array of knowledge and fluid nature of web development makes the most efficient approach to learning much more of a must than a nice-to-have. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKmJD5FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nsiakzkb3x4ft1p0v95g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKmJD5FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nsiakzkb3x4ft1p0v95g.png" alt="Cover image of Learning to Learn course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My recommendation here is to go through Andrei Neagoies's Learning to Learn course (available on both &lt;a href="https://www.udemy.com/course/learning-to-learn-efficient-learning-zero-to-mastery/"&gt;Udemy&lt;/a&gt; and his &lt;a href="https://zerotomastery.io/"&gt;Zero To Mastery platform&lt;/a&gt;. Here, Andrei breaks down techniques and mindsets that will enable you to learn as efficiently as possible while wasting the least amount of time. Andrei is very good about referencing where he got certain tactics from, so there's a large and helpful bibliography that comes with this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-effective-habits"&gt;
  &lt;/a&gt;
  Build Effective Habits
&lt;/h1&gt;

&lt;p&gt;Coding can (and should be fun), but it is work, and it takes effort to engage in certain types of practice or practicing at all when you'd rather be doing something else. If I could only recommend one book to the brand-new coder, it would be James Clear's indispensable &lt;a href="https://jamesclear.com/atomic-habits"&gt;&lt;em&gt;Atomic Habits&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6EnQlrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4au4usz906h4phxy3znm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6EnQlrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4au4usz906h4phxy3znm.png" alt="Cover of Atomic Habits"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The long and short of it is that you want to make good habits automatic and easy to perform, and bad habits more difficult. I was good about practicing code before I read this, but I got a lot better at the right kind of practice and got WAY more consistent with exercise, which really helped weather a lot of pandemic stress. Absolutely, positively, do not begin learning to code without reading this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#map-it-out"&gt;
  &lt;/a&gt;
  Map It Out
&lt;/h1&gt;

&lt;p&gt;Part of effective learning is understanding the scope of the knowledge area you're learning, and for learning to code, there are various &lt;a href="https://roadmap.sh/"&gt;developer roadmaps&lt;/a&gt;. These roadmaps have been created to illustrate what goes into these technologies and provide some guidance into what methodologies/libraries/etc to prefer when you have a choice between several of them. I'll be making heavy use of these roadmaps (particularly the front-end roadmap) in future blog entries. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-your-goals-and-track-your-progress"&gt;
  &lt;/a&gt;
  Set Your Goals and Track Your Progress
&lt;/h1&gt;

&lt;p&gt;Learning to code can be complicated and overwhelming at first, especially on the front-end. One way you can help yourself stay focused on effective action is to use &lt;a href="https://en.wikipedia.org/wiki/SMART_criteria"&gt;SMART criteria&lt;/a&gt; to outline what you're working on at any particular moment. &lt;/p&gt;

&lt;p&gt;When it comes to tracking that progress, you'll want to avail yourself of &lt;a href="https://trello.com/en-US"&gt;Trello&lt;/a&gt; or &lt;a href="https://dev.to/aellon/agile-scrum-kanban-oh-my-116d"&gt;some other type of kanban board&lt;/a&gt;. I don't know what it is about this, but there was a shocking "before" and "after" in my consistency and productivity after making regular use of Trello in my day-to-day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#write-it-down"&gt;
  &lt;/a&gt;
  Write It Down
&lt;/h1&gt;

&lt;p&gt;Studies have shown that physically taking notes with pen/pencil and paper leads to better retention, so strongly consider doing just that. Additionally, recording what you're learning gives you the opportunity to rephrase it in your own words, forcing you to think critically about the topic.&lt;/p&gt;

&lt;p&gt;What I personally do is maintain a folder of Markdown files on my desktop that I use to takes notes on a variety of topics, which I save to &lt;a href="https://github.com/dylanesque/Cheatsheets"&gt;Github&lt;/a&gt;. I make this tradeoff because it's easier for me to organize, update, and use as a reference for blog posts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#understand-that-it-wont-happen-immediately"&gt;
  &lt;/a&gt;
  Understand That It Won't Happen Immediately...
&lt;/h1&gt;

&lt;p&gt;There's a game I like to play with articles that have titles like "I Learned to Code and Got A Job in 6 Months!!!" I call "find the caveat", where I look for the part where they were previously a lawyer or stockbroker or some other high-paying job, or that their spouse supported them while they did nothing but code for months on end. I mention this because while these stories can be inspiring, they're not very realistic or reflective of the norm. The simple truth that web development has gotten a lot more complicated since that time, and an effective early career dev now has to have a much more varied toolkit now than they did 5+ years ago, when knowing HTML, CSS, and some basic JavaScript was enough. Because of this, I want you to...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#be-patient-with-yourself"&gt;
  &lt;/a&gt;
  ...Be Patient With Yourself
&lt;/h1&gt;

&lt;p&gt;Everybody is different and has different strengths, weaknesses, and constraints. You might have work or family obligations. You might be recovering from an injury or illness, or living with a disability of some kind. You shouldn't compare yourself or your progress to others because everybody's circumstances are so different. As countless others have said before me, this is a marathon, not a sprint, and you need to embrace that mindset and be good to yourself while you're working towards your goals.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-how-and-where-to-ask-for-help"&gt;
  &lt;/a&gt;
  Learning How and Where to Ask For Help
&lt;/h1&gt;

&lt;p&gt;This can be tricky to get a feel for at first, but there is a time and a place for struggling in learning. Some struggle IS essential for truly understanding new concepts, but too much frustration isn't a good thing. This is something I learned via trial and error in my first production job, and the way I approach it is something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is this struggle helping me understand the thing I'm struggling with better? This is good struggle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Am I banging my head against the wall and have circled back to solutions that I've already tried and didn't work, or have I spent more than 30 minutes on a problem with no forward motion whatsoever? This is bad struggle and you need to get a second pair of eyes on the issue ASAP.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to where to look for help, this can vary a lot from technology to technology: When I do blog entries on specific technologies, I'll go into recommended sources, but I will note that you'll generally want to favor sources that are active and real-time based, over forums and message boards. If there's an official Slack or Discord channel for the technology in question, you'll want to be on there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this advice helps you: My goal with a lot of my blog entries to help people avoid some of the mistakes that I made when I was first learning to code, and I'll be going into more detail regarding how to approach specific technologies in the future, and I hope to see you there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>(Realistic) List of Web Dev Resources 💻🚀</title>
      <author>Maureen T'O </author>
      <pubDate>Thu, 20 May 2021 00:25:58 +0000</pubDate>
      <link>https://dev.to/maureento8888/realistic-list-of-web-dev-resources-253c</link>
      <guid>https://dev.to/maureento8888/realistic-list-of-web-dev-resources-253c</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@lucabravo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Luca Bravo&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I've been finding a lot of articles on DEV lately that garner a TON of reactions, especially ones that provide lists of more than 20 to 50+ resources!&lt;/p&gt;

&lt;p&gt;That's a lot. 🤯&lt;/p&gt;

&lt;p&gt;A lot of choice paralysis, too.&lt;/p&gt;

&lt;p&gt;In reality, it's not about how popular the resources are, or how many you can add to your archive list (where you may not even pick up to read). Instead, it's about &lt;strong&gt;what problems these resources solve&lt;/strong&gt; for you that makes a list successful. So, I will do just that!&lt;/p&gt;

&lt;p&gt;Keep in mind these are &lt;strong&gt;my own opinions&lt;/strong&gt; and by all means, if you like those really long resource lists, do use them. This list is meant to be accessible, cost-effective, and focused! &lt;strong&gt;These are also resources that have been successful for my learning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My resources are all &lt;strong&gt;multimodal ways of learning&lt;/strong&gt; (audiovisual, reading) - some may not be fully accessible by nature. At the end of the day, you know what works best for you!&lt;/p&gt;

&lt;p&gt;Lastly, my resources are &lt;strong&gt;NOT hundreds of hours long&lt;/strong&gt;! I studied all I have of web development throughout the last year of my &lt;strong&gt;full-time undergraduate degree&lt;/strong&gt;, so when it comes to time-management, I've got you covered ☺️&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#skip-links"&gt;
  &lt;/a&gt;
  Skip links 👇🏼
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#html-css"&gt;HTML / CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vuejs-nuxtjs"&gt;Vue.js / Nuxt.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#version-control"&gt;Version Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#responsive-web-design"&gt;Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forums"&gt;Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#html-css"&gt;
  &lt;/a&gt;
  HTML / CSS
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Absolute must if you're going into web development, and 100% needed for frontend development. These two are the builders of the visual front of the web&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/html-handbook/"&gt;HTML handbook&lt;/a&gt; [FREE] - a true, beginner-friendly, comprehensive, and easy read that gets you up and running with HTML quickly&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/css-handbook/"&gt;CSS handbook&lt;/a&gt; [FREE] - a comprehensive CSS resource and easy read&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://scrimba.com"&gt;Scrimba&lt;/a&gt;'s &lt;a href="https://scrimba.com/learn/cssgrid"&gt;CSS Grid&lt;/a&gt; - what I used to nail down CSS Grid, and revisit it&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q"&gt;Dev Ed&lt;/a&gt;'s &lt;a href="https://youtu.be/gXkqy0b4M5g"&gt;Responsive Navigation Bar Tutorial | HTML CSS JAVA...&lt;/a&gt; [FREE] - Don't ask... Just watch until 13:00 mins. I didn't understand HTML hierarchy until the 13 mins! ☺️&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Literally the language of the modern web. You'll definitely need this to learn the whole ecosystem of the web, from Node.js to package bundlers like Webpack&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com"&gt;Code with Mosh&lt;/a&gt;'s &lt;a href="https://codewithmosh.com/p/javascript-basics-for-beginners"&gt;JavaScript for Beginners&lt;/a&gt; - ALL the basics of JS in bitesized, audiovisual format&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com"&gt;Code with Mosh&lt;/a&gt;'s &lt;a href="https://codewithmosh.com/p/object-oriented-programming-in-javascript"&gt;JavaScript OOP&lt;/a&gt; - everything you need to know about JS OOP in quick, bite-sized and well-explained audiovisual format&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org"&gt;freeCodeCamp.org&lt;/a&gt;'s &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JavaScript Algorithms and Data Structures &lt;/a&gt; [FREE] - to practice JS you've learned, and learn DS &amp;amp; A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-nuxtjs"&gt;
  &lt;/a&gt;
  Vue.js / Nuxt.js
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you're learning Vue.js, these are the BEST resources I've stuck with, from basics to advanced&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Vue Mastery has courses on Nuxt.js!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/vue-handbook/"&gt;Vue.js 2 Handbook&lt;/a&gt; [FREE] - great to get you started in Vue 2 without mismatched YouTube tutorials (syntax doesn't differ between v2 and v3)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuemastery.com"&gt;Vue Mastery&lt;/a&gt;'s courses - choose from &lt;a href="https://www.vuemastery.com/courses-path/beginner"&gt;beginner&lt;/a&gt;, &lt;a href="https://www.vuemastery.com/courses-path/intermediate"&gt;intermediate&lt;/a&gt;, and &lt;a href="https://www.vuemastery.com/courses-path/advanced"&gt;advanced&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://debbie.codes"&gt;Debbie O'Brien&lt;/a&gt;'s &lt;a href="https://www.youtube.com/c/DebbieOBrien"&gt;YouTube&lt;/a&gt; [FREE] - for AWESOME &lt;a href="https://nuxtjs.org"&gt;Nuxt.js&lt;/a&gt; tidbits!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#version-control"&gt;
  &lt;/a&gt;
  Version Control
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Must have if you're to work in teams / companies, or track versions of your projects&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codecademy.com"&gt;Codecademy&lt;/a&gt;'s &lt;a href="https://www.codecademy.com/learn/learn-git"&gt;Learn Git&lt;/a&gt; course&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#responsive-web-design"&gt;
  &lt;/a&gt;
  Responsive Web Design
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The most necessary skillset you can add to your web design / development career&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.kevinpowell.co"&gt;Kevin Powell&lt;/a&gt;'s &lt;a href="https://courses.kevinpowell.co/conquering-responsive-layouts"&gt;Conquering Responsive Layouts&lt;/a&gt; course - BEST and most comprehensive course on responsive web design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.samanthaming.com"&gt;Samantha Ming&lt;/a&gt;'s &lt;a href="https://www.samanthaming.com/flexbox30/"&gt;Flexbox 30&lt;/a&gt; [FREE] - the one flexbox resource I stuck with through visually engaging and adorable examples of flexbox in action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#forums"&gt;
  &lt;/a&gt;
  Forums
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In learning anything, you'll almost always get by with a little help from friends and fellow classmates. Take a quick coffee break ☕️ and hop on these places for some help&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com"&gt;StackOverFlow&lt;/a&gt; - I don't find  sO helpful for asking (am I the only one that gets shamed for a slightly unclear question? 🥲). Instead, I use SO for finding issues that others have answers for.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://discord.com/invite/HBherRA"&gt;Vue Land Discord&lt;/a&gt; Code Help channels&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://discord.com/invite/ps2h6QT"&gt;Nuxt.js Discord&lt;/a&gt; Help channels&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alrighty, that's it for today. This post will be updated as I find new info. 2 out of 2 posts today done! ✅&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My first post today if you want to read:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/maureento8888" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9iK2LNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AGIbGBya--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/300766/109fc338-716f-4285-b336-aa29c8eeaeea.png" alt="maureento8888 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/maureento8888/how-to-create-named-routes-in-nuxt-js-4i94" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create named routes in Nuxt.js&lt;/h2&gt;
      &lt;h3&gt;Maureen T'O  ・ May 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nuxt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;It's about time I collected all my resources I've &lt;strong&gt;successfully&lt;/strong&gt; learned from into a list so it can be helpful to others! My rule of thumb is I don't learn from the most popular teachers like Wes Bos or Traversy Media (Brad Traversy), even though I know how amazing they are ❤️&lt;/p&gt;

&lt;p&gt;This way, I don't force myself into learning from popular teachers even when the teaching style doesn't work for me 🌟&lt;/p&gt;

&lt;p&gt;This way of learning web dev has really helped me reduce anxiety (longggg lists of 50+ resources scares me 😬), and helps me focus rather than suffering from &lt;a href="https://en.wikipedia.org/wiki/Shiny_object_syndrome"&gt;"shiny object syndrome"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have you had any resources you stick by? What learning style works for you? Drop them in the comments below!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Optimize for Change</title>
      <author>swyx</author>
      <pubDate>Thu, 20 May 2021 00:16:31 +0000</pubDate>
      <link>https://dev.to/swyx/how-to-optimize-for-change-a2n</link>
      <guid>https://dev.to/swyx/how-to-optimize-for-change-a2n</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a href="https://www.freecodecamp.org/news/how-to-optimize-for-change-software-development/"&gt;FreeCodeCamp&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Imagine you worked at Magic Money Corp, which runs on just three lines of JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collect underpants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;profit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// $$$!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine something's wrong with the left phalange and we need to take &lt;code&gt;doStuff&lt;/code&gt; down for maintenance. What happens if you temporarily comment out the second line?&lt;/p&gt;

&lt;p&gt;Oh no! &lt;code&gt;profit()&lt;/code&gt; is erroring all over the place. You've broken our magic money machine! To solve this, you would now have to read through the entire source code of &lt;code&gt;doStuff&lt;/code&gt; to understand what it does and replace critical code for &lt;code&gt;profit&lt;/code&gt; to function. &lt;/p&gt;

&lt;p&gt;Maybe it's better to just leave &lt;code&gt;doStuff&lt;/code&gt; there... we don't &lt;em&gt;need&lt;/em&gt; a functioning phalange right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we are afraid of making changes to our code, it starts to ossify and bloat.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's imagine if we had built Magic Money Corp on immutable data structures instead (or used a functional language):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ImmutableMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collect underpants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;profit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// $$$!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It &lt;em&gt;looks&lt;/em&gt; the same, but now I can remove &lt;code&gt;doStuff&lt;/code&gt;, and have no fear of breaking Magic Money Corp! &lt;/p&gt;

&lt;p&gt;I've been obsessed with Dan Abramov's concept of &lt;a href="https://overreacted.io/optimized-for-change/"&gt;Optimizing for Change&lt;/a&gt; since he wrote about it two years ago. It clearly articulates a core design principle of React (the rest are &lt;a href="https://reactjs.org/docs/design-principles.html"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/reactjs/react-basic"&gt;here&lt;/a&gt;). For me, it is one of &lt;a href="https://twitter.com/swyx/status/1383516418205835264"&gt;the 7 lessons that will outlive React&lt;/a&gt; that I now try to apply everywhere else.&lt;/p&gt;

&lt;p&gt;The main question it doesn't answer: &lt;em&gt;how&lt;/em&gt; exactly do you optimize for change?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Plan for Common Changes&lt;/li&gt;
&lt;li&gt;Use Simple Values&lt;/li&gt;
&lt;li&gt;Minimize Edit Distance&lt;/li&gt;
&lt;li&gt;Catch Errors Early&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-optimize-for-change"&gt;
  &lt;/a&gt;
  Why Optimize for Change
&lt;/h2&gt;

&lt;p&gt;First, an obligatory explanation of this idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hard-to-delete code drives out easy-to-delete code over time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Many layers of bandaids over hard-to-delete code causes technical mummification&lt;/li&gt;
&lt;li&gt;Therefore we must try to optimize for change from the earliest design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The inspiration for this came from "Easy-to-replace systems tend to get replaced with hard-to-replace systems" (&lt;a href="https://twitter.com/cramforce/status/1139925981051801600"&gt;&lt;em&gt;Malte Ubl&lt;/em&gt;&lt;/a&gt;) and "Write code that is easy to delete, not easy to extend" (&lt;a href="https://programmingisterrible.com/post/139222674273/how-to-write-disposable-code-in-large-systems"&gt;&lt;em&gt;tef&lt;/em&gt;&lt;/a&gt;)&lt;strong&gt;.&lt;/strong&gt; Economics fans will recognize this as &lt;a href="https://twitter.com/swyx/status/1286624921532080129"&gt;an application&lt;/a&gt; of &lt;a href="https://en.wikipedia.org/wiki/Gresham%27s_law"&gt;Gresham's Law&lt;/a&gt;. The idea is the same — a form of anti-entropy where &lt;em&gt;inflexibility&lt;/em&gt; increases, instead of disorder.&lt;/p&gt;

&lt;p&gt;It's not that we don't &lt;em&gt;know&lt;/em&gt; when our systems are hard-to-replace. It is that the most expedient response is usually to slap on a workaround and keep going. After one too many bandaids, our codebase mummifies. This is the consequence of not allowing room for &lt;em&gt;change&lt;/em&gt; in our original designs, a related (but distinct) idea to "technical debt" (which has its &lt;a href="https://redmonk.com/rstephens/2017/08/08/technical-debt/"&gt;own&lt;/a&gt; &lt;a href="https://twitter.com/jessitron/status/1123310331957145601"&gt;problems&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The reason we must allow for changes is that &lt;a href="https://stackoverflow.blog/2020/02/20/requirements-volatility-is-the-core-problem-of-software-engineering/"&gt;requirements volatility is a core problem of software engineering&lt;/a&gt;. We devs often fantasize that our lives would be a lot easier if product specs were, well, fully &lt;em&gt;specified&lt;/em&gt; upfront. But that's the &lt;a href="https://en.wikipedia.org/wiki/Spherical_cow"&gt;spherical frictionless cow&lt;/a&gt; of programming. In reality, the only constant is change. We should carefully design our abstractions and APIs acknowledging this fact.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hLMXdKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1078j8opalnrzuu8p4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hLMXdKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1078j8opalnrzuu8p4u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-for-common-changes"&gt;
  &lt;/a&gt;
  Plan for Common Changes
&lt;/h2&gt;

&lt;p&gt;Once you're bought in to the need to optimize for change, it is easy to go overboard and be overcome by analysis paralysis. &lt;em&gt;How&lt;/em&gt; do you design for &lt;em&gt;anything&lt;/em&gt; when EVERYTHING could change?!&lt;/p&gt;

&lt;p&gt;We could overdo it by, for example, putting abstract facades on every interface or turning every function asynchronous. It’s clear that doubling the size of your codebase in exchange for no difference in feature set is not desirable either.&lt;/p&gt;

&lt;p&gt;A reasonable way to draw the line is to design for small, common tweaks, and not worry about big, infrequent migrations. Hillel Wayne calls these &lt;a href="https://twitter.com/hillelogram/status/1189024161127190528"&gt;requirement perturbations&lt;/a&gt; — small, typical feature requests should not throw your whole design out of whack. &lt;/p&gt;

&lt;p&gt;For the probabilistically inclined, the best we can do is make sure our design adapts well to 1-3 "standard deviation" changes. Bigger changes than that are rare (by definition), and justify a more invasive rewrite when they happen.&lt;/p&gt;

&lt;p&gt;This way, we also avoid optimizing for change that may never come, which can be a significant source of software bloat and complexity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Common changes can be accumulated with experience - the humorous example of this is &lt;a href="http://www.catb.org/jargon/html/Z/Zawinskis-Law.html"&gt;Zawinski's Law&lt;/a&gt;, but there are many far less extreme changes that are entirely routine and can be anticipated, whether by &lt;a href="https://www.swyx.io/preemptive-pluralization/"&gt;Preemptive Pluralization&lt;/a&gt; or &lt;a href="https://www.swyx.io/dev-guide-to-tech-strategy/"&gt;Business Strategy&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-simple-values"&gt;
  &lt;/a&gt;
  Use Simple Values
&lt;/h2&gt;

&lt;p&gt;Once we have constrained the scope of our ambitions, I like to dive straight into thinking about API design. The end goal is clear. In order to make code easy to change: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has to first be easy to &lt;strong&gt;&lt;em&gt;delete...&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;which then makes it easier to &lt;strong&gt;&lt;em&gt;cut and paste&lt;/em&gt;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;which makes it easier to create and break apart &lt;strong&gt;&lt;em&gt;abstractions&lt;/em&gt;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;and so on, until you cover all routine maintenance tasks, including logging, debugging, testing and performance optimization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rich Hickey is well known for preaching the &lt;a href="https://www.infoq.com/presentations/Value-Values/"&gt;Value of Values&lt;/a&gt; and &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simplicity&lt;/a&gt;. It is worth deeply understanding the implications of this approach for API design. Where you might pass class instances or objects with dynamic references, you could instead pass simple, immutable values. This eliminates a whole class of potential bugs (and unlocks logging, serialization and other goodies). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4xn2R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olrtcg8p9ress0j3klob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4xn2R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olrtcg8p9ress0j3klob.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Out of these requirements for simple uncomplected values, you can derive from first principles a surprising number of "best" practices — &lt;a href="https://www.youtube.com/watch?v=bFuRvcAEiHg"&gt;immutable programming&lt;/a&gt;, constraining state with a &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell"&gt;functional core, imperative shell&lt;/a&gt;, &lt;a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"&gt;parse don't validate&lt;/a&gt;, and &lt;a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/"&gt;managing function color&lt;/a&gt;. The pursuit of simplicity isn't a cost-free proposition, but a variety of techniques from &lt;a href="https://twitter.com/jordwalke/status/959018527091904512"&gt;structural sharing&lt;/a&gt; to static analysis can help.&lt;/p&gt;

&lt;p&gt;Instead of memorizing a table of good/bad examples, the better approach is to understand that these are all instances of the same general rule: &lt;strong&gt;Complexity arises from coupling.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minimize-edit-distance"&gt;
  &lt;/a&gt;
  Minimize Edit Distance
&lt;/h2&gt;

&lt;p&gt;I mentally picture the braids from &lt;em&gt;Simple Made Easy&lt;/em&gt; now, whenever I think about complexity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--am9riybL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj20hvtks9erpk2y4wzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--am9riybL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj20hvtks9erpk2y4wzp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have multiple strings next to each other, you can braid them and knot them up. This is complexity — complexity is difficult to unwind. It is only when you have just one string that it becomes impossible to braid. &lt;/p&gt;

&lt;p&gt;More to the point, we should try to reduce our reliance on &lt;em&gt;order&lt;/em&gt; as much as possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execution order — If I delete something on line 2, how easily can the developer tell if something in line 3 will blow up? How many changes do I need to make to fix it?&lt;/li&gt;
&lt;li&gt;Resolution order — If concurrent processes resolve out of order, how easily can I correct for or guarantee against race conditions?&lt;/li&gt;
&lt;li&gt;Filesystem order — If I move some code from one place to another, how many other files need to be edited to reflect this?&lt;/li&gt;
&lt;li&gt;Argument order — If I swap the position of some arguments, whether in a function call or a class constructor or a YAML config file, does the program implode?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;this is an ad hoc list; there are probably some big ones I'm missing here, please let me know&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can even quantify this complexity with a notion of "&lt;a href="https://en.wikipedia.org/wiki/Edit_distance"&gt;edit distance&lt;/a&gt;":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I use multi-arity functions, then I cannot easily add or remove or rearrange parameters without then updating &lt;em&gt;all&lt;/em&gt; the callsites, or adding default params I don't actually want. Single arity functions/languages with named params require only essential updates and no more. (This isn't without tradeoffs of course — more discussion &lt;a href="https://twitter.com/swyx/status/1198632709834326021"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Turning a stateless component stateful with React (pre-Hooks) used to require edits/additions of 7 lines of code. With React Hooks, it just takes 1.&lt;/li&gt;
&lt;li&gt;Asynchrony and Data Dependency tend to propagate in a codebase. If one requirement changed and something at the bottom needed to be async (e.g. it needs one data fetch), I used to have to switch between at least 3 files and folders, and add reducers and actions and selectors with Redux to coordinate this. Better to decomplect parent-child relationships — a design goal prominent in &lt;a href="https://twitter.com/acdlite/status/969747179731533824"&gt;React Suspense&lt;/a&gt;, &lt;a href="https://twitter.com/swyx/status/1193112002413117440"&gt;Relay Compiler&lt;/a&gt; and &lt;a href="https://sophiebits.com/2020/01/01/fast-maintainable-db-patterns.html"&gt;GraphQL's dataloader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could even imagine a complexity measure similar to the CSS specificity formula - a complexity of &lt;code&gt;C(1,0,0,0)&lt;/code&gt; would be harder to change than &lt;code&gt;C(0,2,3,4)&lt;/code&gt;.  So optimizing for change would mean reducing the "edit distance" complexity profile of common operations.&lt;/p&gt;

&lt;p&gt;I haven't exactly worked out what the formula is yet, but we can &lt;em&gt;feel&lt;/em&gt; it when a codebase is hard to change. Development progresses slower as a result. But that's just the visible effect — because it isn't &lt;em&gt;fun&lt;/em&gt; to experiment in the codebase, &lt;strong&gt;novel ideas are never found&lt;/strong&gt;. The invisible cost of missed innovation is directly related to how easy it is to try stuff out or change your mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To make code easy to change, make it impossible to "braid" your code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#catch-errors-early"&gt;
  &lt;/a&gt;
  Catch Errors Early
&lt;/h2&gt;

&lt;p&gt;As much as we can try to contain the &lt;a href="https://medium.com/background-thread/accidental-and-essential-complexity-programming-word-of-the-day-b4db4d2600d4"&gt;accidental&lt;/a&gt; complexity of our code by API design and code style, we can never completely eliminate it except for the most trivial programs. For the remaining essential complexity, we have to keep our feedback loops as short as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yh9Kkgpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft6xbdkm4mpzitumho5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yh9Kkgpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft6xbdkm4mpzitumho5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IBM coined the term "&lt;a href="https://devops.com/shift-left-can-you-be-left-out/"&gt;Shift Left&lt;/a&gt;" after finding that &lt;a href="https://www.researchgate.net/publication/255965523_Integrating_Software_Assurance_into_the_Software_Development_Life_Cycle_SDLC"&gt;the earlier you catch errors, the cheaper they are to fix&lt;/a&gt;. If you arrange the software development lifecycle from left (design) to right (production), the idea is that if you shift your errors "left" then you'd save actual money by catching errors earlier (For more on this, see my discussion and sources in &lt;a href="https://dev.to/dx/language-servers-are-the-new-frameworks-1lbm"&gt;Language Servers are the New Frameworks&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In concrete terms this might translate to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests that pinpoint what broke in your code when you refactor&lt;/li&gt;
&lt;li&gt;types that &lt;a href="https://css-tricks.com/types-or-tests-why-not-both/"&gt;codify the contracts&lt;/a&gt; between data and functions&lt;/li&gt;
&lt;li&gt;continuous deploys that take &lt;a href="https://stackoverflow.blog/2021/01/19/fulfilling-the-promise-of-ci-cd/"&gt;less than 15 minutes&lt;/a&gt; (you probably have easy wins to make in &lt;a href="https://twitter.com/housecor/status/1213093680501993472?s=20"&gt;frontend&lt;/a&gt; or &lt;a href="https://charity.wtf/2020/12/31/why-are-my-tests-so-slow-a-list-of-likely-suspects-anti-patterns-and-unresolved-personal-trauma/"&gt;backend&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/swyx/status/1115632067885375491"&gt;local development servers&lt;/a&gt; that emulate your cloud environment&lt;/li&gt;
&lt;li&gt;"live" values either provided by &lt;a href="https://dev.to/dx/language-servers-are-the-new-frameworks-1lbm"&gt;language servers&lt;/a&gt; or &lt;a href="https://quokkajs.com/"&gt;editor plugins&lt;/a&gt; or &lt;a href="https://replay.io/"&gt;replay recording&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The causality may be &lt;strong&gt;&lt;em&gt;bidirectional&lt;/em&gt;&lt;/strong&gt;. If you make it easier to change things, you will be able to make changes more frequently. It could work the other way too — because you expect to make frequent changes, you are more incentivized to make things easy to change. An extreme example of this involves not just code, but community - the longer a library (or language) stays on version 1, the harder the difficulty of switching to version 2, whereas ecosystems that regularly publish breaking versions (in exchange for clear improvements) seem to avoid stasis by sheer exposure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-caution-against-too-much-change"&gt;
  &lt;/a&gt;
  A caution against &lt;em&gt;too much&lt;/em&gt; change
&lt;/h2&gt;

&lt;p&gt;Any good idea turns bad when taken to the extreme. If you change things &lt;em&gt;too much&lt;/em&gt; you might be favoring &lt;em&gt;velocity over stability&lt;/em&gt; — and stability is very much a feature that your users and code consumers rely on. &lt;a href="https://www.hyrumslaw.com/"&gt;Hyrum's law&lt;/a&gt; guarantees that with sufficient users and time, even your &lt;em&gt;bugs&lt;/em&gt; will be relied on, and people will get upset if you fix them.&lt;/p&gt;

&lt;p&gt;That said, overall, I find Optimizing for Change a net win in my programming, product, and system design decisions and am happy that I've boiled it down to four principles: Plan for Common Changes, Use Simple Values, Minimize Edit Distance, and Catch Errors Early!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-reads"&gt;
  &lt;/a&gt;
  Related reads
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.swyx.io/preemptive-pluralization/"&gt;Pre-emptive Pluralization is Probably Not Evil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twyx.ck.page/posts/swyx-io-7-lessons-to-outlive-react"&gt;7 Lessons to Outlive React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learnings</category>
      <category>apidesign</category>
      <category>tech</category>
    </item>
    <item>
      <title>Proof-of-concept for inline editable areas in rich text fields in Kentico Xperience MVC</title>
      <author>Vera van Klaveren</author>
      <pubDate>Wed, 19 May 2021 23:35:05 +0000</pubDate>
      <link>https://dev.to/truelime/proof-of-concept-for-inline-editable-areas-in-rich-text-fields-in-kentico-xperience-mvc-1lnl</link>
      <guid>https://dev.to/truelime/proof-of-concept-for-inline-editable-areas-in-rich-text-fields-in-kentico-xperience-mvc-1lnl</guid>
      <description>&lt;p&gt;One thing I have always liked about Kentico Kontent is the out-of-the-box support for inserting arbitrary objects into rich text. This harnesses the powers of structured content, like better portability across different use cases, but still allows editors to spruce up their content with elements that would be difficult or even impossible to construct from standard rich text editor capabilities.&lt;/p&gt;

&lt;p&gt;For an upcoming project using the full Kentico Xperience platform, we had identified the need for a similar amount of freedom in composing content. Xperience has somewhat comparable functionality in the form of its Page Builder. However, the page builder requires hard-coding the editable areas into the page, which means that there is a fixed number of editable areas per page, in fixed positions, and outside of any structured content.&lt;/p&gt;

&lt;p&gt;To get around this limitation, we needed a solution that allowed editors to insert editable areas into their rich text. An additional requirement was that the functionality should be accessible even to low-tech content editors, ideally allowing them to insert editable areas into their text at the press of a button, and requiring no further tinkering.&lt;/p&gt;

&lt;p&gt;This post describes our proof-of-concept build of this functionality, and the decisions we made along the way. The source code is &lt;a href="https://github.com/vErsateX/xperience13-InlineEditableAreasPoC"&gt;available on GitHub&lt;/a&gt;. The resulting functionality can be seen in the following screen capture:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXcYZF7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5uquzm6arhbnovelpwwh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXcYZF7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5uquzm6arhbnovelpwwh.gif" alt="A quick demo of the built functionality."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The functionality as described was developed for Xperience 13. Keep this in mind if you plan to follow along, as things might need some tweaking for earlier versions. If you can't get it to work, your best bet would probably be to look for differences in the relevant documentation for Xperience 13 and your version, and go from there.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-editable-area-placeholders-to-our-rich-text"&gt;
  &lt;/a&gt;
  Adding editable area placeholders to our rich text
&lt;/h2&gt;

&lt;p&gt;Our basic idea was to insert a placeholder into the content, which could then be resolved into an actual editable area when the content is being rendered in the MVC view. For the placeholder, we chose the following markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;editable-area&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"areaIdentifier"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/editable-area&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our reasoning was that this would fit in well with the rest of the HTML, and also has a lower chance of colliding with any actual content typed by the editors. Of course, any arbitrary piece of markup could be used, as long as the parsing logic is changed along with it. The only requirement here is that the placeholder specifies its own &lt;code&gt;areaIdentifier&lt;/code&gt;, which allows us to deterministically relate our placeholder to its rendered editable area. Otherwise, we might lose the contents of the area when some change leaves us unable to generate the same identifier that was used when the area was originally created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resolving-placeholders-into-editable-areas"&gt;
  &lt;/a&gt;
  Resolving placeholders into editable areas
&lt;/h2&gt;

&lt;p&gt;On the MVC side, we retrieve our page data as usual, up to the point where we have to render our rich text content. To simplify the calling code, we will make our functionality available as an extension method to the &lt;code&gt;IHtmlHelper&lt;/code&gt; object, which can be accessed in the view by the &lt;code&gt;Html&lt;/code&gt; property. Keep this in mind when reading the following code snippets, as this means we cannot directly use the usual &lt;code&gt;@Html.Raw(...)&lt;/code&gt; and whatnot, since our code won't be running directly in the view.&lt;/p&gt;

&lt;p&gt;First off, we need to separate our editable area placeholders from the actual text, and render each in order. We chose to use a regular expression for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@"&amp;lt;editable-area id=""(.*?)""&amp;gt;&amp;lt;\/editable-area&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally, I wouldn't recommend parsing HTML(-like) strings using regular expressions, as detailed in &lt;a href="https://stackoverflow.com/a/1732454"&gt;this StackOverflow answer&lt;/a&gt;. However, as detailed in &lt;a href="https://stackoverflow.com/a/1733489"&gt;the answer below it&lt;/a&gt;, "it's sometimes appropriate to use them for parsing a &lt;em&gt;limited&lt;/em&gt;, &lt;em&gt;known&lt;/em&gt; set of HTML", which is the case here. This does mean the solution is vulnerable to minor changes in the placeholder markup. You could tweak the pattern a bit to be more robust, but since the HTML is not really meant to be manipulated directly, we didn't think it necessary in our case, and this simple pattern also has the added benefit of being easier to understand and reason about.&lt;/p&gt;

&lt;p&gt;As for the pattern, note that we have introduced a capturing group for the value of the &lt;code&gt;id&lt;/code&gt; attribute. &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.split?view=net-5.0#System_Text_RegularExpressions_Regex_Split_System_String_System_String_"&gt;An interesting feature of the &lt;code&gt;Regex.Split(...)&lt;/code&gt; overloads&lt;/a&gt; is that the substrings captured by the capturing groups in the regex are themselves included in the returned array. This means that our &lt;code&gt;components&lt;/code&gt; variable now references an array containing pieces of HTML, interspersed with the IDs of our editable areas. Specifically, this means the HTML is located at the &lt;em&gt;even&lt;/em&gt; indices, and the editable area IDs at the &lt;em&gt;odd&lt;/em&gt; indices. Thus, we can render everything to the view using the following loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isEditableArea&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEditableArea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To keep things readable, we have extracted the exact logic for rendering the HTML components into separate methods (or more specifically, local functions). Starting with the &lt;code&gt;RenderHtml(string)&lt;/code&gt; method, this is implemented as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHtmlContent&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we still use the equivalent of &lt;code&gt;Html.Raw(...)&lt;/code&gt; to render the HTML, just as we would do when rendering it directly inside of a view, but that we have to manually write this to the view output.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;RenderEditableAreaAsync(string)&lt;/code&gt; method is implemented using the same &lt;code&gt;RenderContent(IHtmlContent)&lt;/code&gt; method, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Kentico&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, nothing special is going on here. We just call the same methods as we would do in our view, but we have to manually write their output to the view output.&lt;/p&gt;

&lt;p&gt;All of this combined gives us the following class. Note that we have added it to the same namespace as Kentico's own &lt;code&gt;EditableAreaAsync(...)&lt;/code&gt; method to make it accessible wherever you might otherwise directly render the editable areas. Also note that to allow our method to be called with the &lt;code&gt;@Html.DoSomething&lt;/code&gt; syntax in our views, we have to return an &lt;code&gt;object&lt;/code&gt; reference. However, since the output is written directly to the view context, we will always return &lt;code&gt;null&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Kentico.Web.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.Rendering&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text.RegularExpressions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Kentico.PageBuilder.Web.Mvc&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// A static class implementing operations for working with inline editable areas.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InlineEditableAreas&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Resolves the editable areas in the given HTML string and writes the result to the view context.&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name="htmlHelper"&amp;gt;An &amp;lt;see cref="IHtmlHelper"/&amp;gt; object containing the view context.&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name="html"&amp;gt;The HTML string.&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;The return value is not used and will always be null.&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ResolveEditableAreasAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IHtmlHelper&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"&amp;lt;editable-area id=""(.*?)""&amp;gt;&amp;lt;\/editable-area&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isEditableArea&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEditableArea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Kentico&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

            &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHtmlContent&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our views, we can then call our extension method as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;@await&lt;/span&gt; &lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ResolveWidgetAreasAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SomeRichTextField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-button-to-the-editor-for-inserting-editable-areas"&gt;
  &lt;/a&gt;
  Adding a button to the editor for inserting editable areas
&lt;/h2&gt;

&lt;p&gt;While we &lt;em&gt;could&lt;/em&gt; just instruct the content editors to copy-paste some markup directly into their HTML, that wouldn't be very user-friendly. Therefore, we also have to add a button that can directly insert these editable area placeholders into the rich text field, without ever having to directly work with the underlying HTML. Luckily, the CKEditor Kentico uses for its WYSIWYG editor has great support for adding custom plugins.&lt;/p&gt;

&lt;p&gt;Basically, you create a plugin by adding a new folder in the &lt;code&gt;CMS/CMSAdminControls/CKeditor/plugins&lt;/code&gt; folder. The name of this folder determines the name of your plugin, which is important for later. Inside of this folder, you create a JavaScript file named &lt;code&gt;plugin.js&lt;/code&gt;, which will contain the actual button behaviour, and an &lt;code&gt;icons&lt;/code&gt; folder containing an image for our button icon, which should have the same name as our plugin. In our case, this gives us the following folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CMS/CMSAdminControls/CKeditor/plugins
└───inlineeditableareas
    ├───plugin.js
    └───icons
        └───inlineeditableareas.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following snippet contains our &lt;code&gt;plugin.js&lt;/code&gt; script. In it, we create a new plugin, which defines a new command, &lt;code&gt;insertEditableArea&lt;/code&gt;, and adds a button that executes that command when clicked. When executed, the command generates a random ID value for our placeholder, and then inserts the placeholder markup into the editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;CKEDITOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;icons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;insertEditableArea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;editableAreaId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;editable-area id="&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;editableAreaId&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&amp;lt;/editable-area&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;editableArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CKEDITOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFromHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editableArea&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Insert widget area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;insertEditableArea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;insert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this in place, we just need to add our plugin to the CKEditor. This is done in the &lt;code&gt;config.js&lt;/code&gt; file, which is located at &lt;code&gt;/CMS/CMSAdminControls/CKeditor/config.js&lt;/code&gt;. This file should contain one big function that receives a &lt;code&gt;config&lt;/code&gt; object as a parameter. This object has a &lt;code&gt;plugins&lt;/code&gt; field that we need to &lt;em&gt;add&lt;/em&gt; our plugin to, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;+=&lt;/code&gt;, and the leading comma. This is important because the &lt;code&gt;plugins&lt;/code&gt; field will already contain a comma-separated list of plugins, and we need to append a new element to it. Also, if your &lt;code&gt;config.js&lt;/code&gt; file already contains a line that adds some plugins to this field, you can of course combine the two and add the plugin to the existing assignment.&lt;/p&gt;

&lt;p&gt;Finally, we need to actually add our button to the relevant toolbars. This is done in the same file, and takes the form of assigning a jagged array to a field like &lt;code&gt;config.toolbar_Standard&lt;/code&gt;. The nested arrays define the sub-sections of the toolbar. You can either choose to add our &lt;code&gt;inlineeditableareas&lt;/code&gt; to one of the existing nested arrays, or add a new array containing the new button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-placeholders-visible-in-the-editor"&gt;
  &lt;/a&gt;
  Making the placeholders visible in the editor
&lt;/h2&gt;

&lt;p&gt;At this point, we have fully functional inline editable areas. However, they are only visible in the &lt;em&gt;Page&lt;/em&gt; tab, meaning they are still quite hard to work with, requiring us to switch to the page builder to even see that we have actually inserted an editable area. We can remedy this by adding some custom editor styling to make the editable areas stand out a bit more. In previous versions of the CMS, we could add a style sheet for this directly in Kentico, in the &lt;em&gt;CSS stylesheets&lt;/em&gt; module, and add it to our site in the &lt;em&gt;Sites&lt;/em&gt; module. For Xperience 13, we instead have to add a style sheet to the &lt;code&gt;wwwroot&lt;/code&gt; of our MVC project, and specify it in the &lt;code&gt;Content &amp;gt; Content management &amp;gt; CSS stylesheet for WYSIWYG editor&lt;/code&gt; setting in the &lt;em&gt;Settings&lt;/em&gt; module. For example, if our MVC project contained a file &lt;code&gt;/wwwroot/css/editor.css&lt;/code&gt;, we would specify &lt;code&gt;~/css/editor.css&lt;/code&gt; as our setting value.&lt;/p&gt;

&lt;p&gt;Of course, there are infinite possibilities for styling these placeholders. We came up with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;editable-area&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;widget area&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;darkgrey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to note about this style sheet is that we style the &lt;code&gt;::before&lt;/code&gt;, instead of the element itself. Beside the &lt;code&gt;::before&lt;/code&gt; allowing us to add a bit of text to better describe its purpose, this also prevents the element from being modified in the WYSIWYG editor. If we had styled the element itself, and thus given it actual dimensions, the editor would actually allow you to enter text inside of it like any other container element, thus changing the placeholder structure and preventing our regular expressions from recognising it. Again, this could be remedied by changing the regular expression a bit, but since we don't want anything to be entered inside of the placeholder anyway, we thought this was the better solution.&lt;/p&gt;

&lt;p&gt;Another minor thing is that we chose to refer to the editable area here as a &lt;em&gt;widget area&lt;/em&gt;. Our reasoning was that calling it an &lt;em&gt;editable&lt;/em&gt; area in a location where you cannot actually edit it might be confusing to the content editors, and we consider &lt;em&gt;editable area&lt;/em&gt; to be more of a technical, under-the-hood term anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With all this in place, we have reached our goal of enabling content editors to use the page builder functionality &lt;em&gt;inside&lt;/em&gt; of their rich text, rather than having to choose between just using it &lt;em&gt;around&lt;/em&gt; it, or letting go of structured content completely and just putting the rich text into the page builder as well. This promotes applicability of the content to more use cases, potentially putting less strain on future wishes or requirements. This also improves reusability of existing page types, as the pages can be composed into different forms more freely. Of course, if a consistent pattern emerges among these, a dedicated page type or template might be of more use, since this reduces the manual work required.&lt;/p&gt;

&lt;p&gt;I think the main shortcomings of the current solution lie mostly with the WYSIWYG representation of the editable areas. While the initial flow of adding a new editable area works well, moving them around afterwards can be a bit tricky, since the editor thinks its just a regular empty container with a funny name. The CKEditor does have support for the concept of an 'object', which is actually what Kentico used for its own inline widgets before, which might be worthwhile to investigate further.&lt;/p&gt;

&lt;p&gt;All in all, this has been a fun project to dig into. I hope you have found this post insightful or helpful in any way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@halacious?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;HalGatewood.com&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/website?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>kentico</category>
      <category>xperience</category>
      <category>pagebuilder</category>
      <category>richtext</category>
    </item>
    <item>
      <title>Streams, byte streams.</title>
      <author>Tristan Elliott</author>
      <pubDate>Wed, 19 May 2021 22:15:54 +0000</pubDate>
      <link>https://dev.to/theplebdev/streams-byte-streams-55gl</link>
      <guid>https://dev.to/theplebdev/streams-byte-streams-55gl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This is going to be my first post on streams in java and we are going to start with byte streams. A quick disclaimer about byte streams, you are probably never going to use them because there are usually streams better suited for the situation. However, with that being said, all other streams are based off of byte streams. So it is helpful to know and understand them. I have also created a &lt;a href="https://www.youtube.com/watch?v=x2XDo4vx_WM"&gt;Youtube&lt;/a&gt; version of this post. So please make sure to check that out as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#io-streams"&gt;
  &lt;/a&gt;
  I/O Streams
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Before we get into byte streams lets first get a solid understanding about what streams are. A stream is a generic term that represents data moving from one point to another. A stream can represent many different kinds of sources and destinations, like disk files, devices, other programs and even memory arrays.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some streams simply pass data while others manipulate and transform the data in useful ways. There are two main kind of streams,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1) &lt;strong&gt;InputStreams&lt;/strong&gt;: a program uses an input stream to read data from a destination&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1) &lt;strong&gt;OutputStreams&lt;/strong&gt;: a program uses an output stream to write data to a destination one item at a time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#byte-streams"&gt;
  &lt;/a&gt;
  Byte Streams
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Programs use byte streams to perform input and output of 8-bit bytes. A byte simply being what we call 8 bits packaged together. Now we will get into the creating of our Byte Stream, I have created a &lt;a href="https://www.youtube.com/watch?v=x2XDo4vx_WM"&gt;YouTube&lt;/a&gt; video of the code and I would recommend that you watch that video and do a code along. You will get much more out of the video than this text.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class CopyBytes {
    public static void main(String[] args) throws IOException{
        FileInputStream in = null;
        FileOutputStream out = null;

        try {

                in = new FileInputStream("anotherOne.txt");
                out = new FileOutputStream("itDoBeLikeThat.txt");
                int c;

                while((c = in.read())!= -1) {
                    out.write(c);
                }
            //close the streams 
        }finally {
            if(in != null) {
                in.close();
            }
            if(out != null) {
                out.close();
            }
        }

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#understanding-the-code"&gt;
  &lt;/a&gt;
  Understanding the code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1) &lt;strong&gt;main&lt;/strong&gt; this method is called "public static void main(String[] args)", this is a special method in java. Every application in java must have this method as it acts as the starting point for the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2) &lt;strong&gt;throws&lt;/strong&gt; this is a mechanism for handle exceptions in Java. If you are unfamiliar with exception handling in Java I would highly recommend that you give that a quick google. Essentially throws allows us to handle the IOException exception without having to fully implement try/catch &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3) &lt;strong&gt;FileInputStream&lt;/strong&gt; is for obtaining input bytes from a file in the file system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4) &lt;strong&gt;FileOutputStream&lt;/strong&gt; is for writing data to a file &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5) &lt;strong&gt;try&lt;/strong&gt; is another part of exception handling in java. The try{} is called a try block. Code that has a chance of throwing an exception should always be placed inside of a try block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6)  &lt;strong&gt;new FileInputStream("anotherOne.txt")&lt;/strong&gt; this creates a new FileInputStream from the file called "anotherOne.txt", please make sure that you have already pre created this folder inside of your root directory. If you fail to do this then an error will occur.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;7)  &lt;strong&gt;new FileOutStream("itDoBeLikeThat.txt")&lt;/strong&gt; this is us creating and output stream, which is going to be a new file called "itDoBeLikeThat.txt" in the root directory and this is where all the text from "anotherOne.txt" is going to be placed.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;8) &lt;strong&gt;int c;&lt;/strong&gt; this is where we created a simple integer and call it c. This will be used for looping and writing data to the desired file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;9) &lt;strong&gt;while((c = in.read())!= -1) {out.write(c);}&lt;/strong&gt;  this is how we loop through "anotherOne.txt"s data. The read() method will return a number between 0 - 255 on each interaction and at the end of the data it will return -1. read() returning -1 is how we know that there is no more data left to read. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;10) &lt;strong&gt;finally&lt;/strong&gt; this is another part of java exception handling. For the purpose of this post all we need to know is that it will run no matter what. Even if an exception does occur, this block of code will still execute. When closing streams, put the code responsible for closing the streams inside the finally block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;11) &lt;strong&gt;.close()&lt;/strong&gt; this is responsible for closing the streams and it is very important that we do so. Closing streams helps us avoid serious resource leaks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of you day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/Tristanthewebd1"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also make sure to checkout my &lt;a href="https://www.youtube.com/channel/UCN9jWE9COJ0wN1m4huDFqzw/playlists"&gt;YouTube&lt;/a&gt; channel for more programming tutorials.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>streams</category>
    </item>
    <item>
      <title>Angular directives: Interesting ways to use it.</title>
      <author>Rahman Adewale Hafeez</author>
      <pubDate>Wed, 19 May 2021 22:04:40 +0000</pubDate>
      <link>https://dev.to/dwale/angular-directives-interesting-ways-to-use-it-1k4b</link>
      <guid>https://dev.to/dwale/angular-directives-interesting-ways-to-use-it-1k4b</guid>
      <description>&lt;p&gt;This article will be using the angular directive to create a reusable custom user validation field. A typical use case will be an account lookup field or any user validation field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGRAelUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp7a4smvh4wgumcddaoo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGRAelUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp7a4smvh4wgumcddaoo.gif" alt="gif for validate account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be using a bank account validation feature for this document. I came about this idea due to my experience in the fintech industry, where I've had to implement this across various applications, this will allow you to keep your code DRY and it also looks cool 😉.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" [appAccountLookup] = "bankInformationForm.value"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create our angular application using the Angular CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new account-validation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that's done, we need to navigate into our application and create our directive, it should be added automatically to your declarations array in your app.module.ts file. You can achieve that with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd account-validation
ng generate directive accountLookup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our app folder, let's create an interface that will help define the signature of the object our directive will accept as an input. It should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**bankInfo.ts**

export class IBankInfo {
   bankCode: string;
   bankAccountNumber: string;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our newly created directive should have the structure displayed below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** account-lookup.directive.ts **

import { Directive } from '@angular/core';

@Directive({
selector: '[appAccountLookup]'
})

export class AccountLookupDirective {
constructor() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we continue with our directive, let's create the form that will house the input that will use the directive. It should look like this once you are done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**app.component.ts**

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  bankInformationForm!: FormGroup;

  constructor (private formBuilder: FormBuilder) {}
  ngOnInit(): void {
     this.initializeForm();
  }

  private initializeForm():void {
   this.bankInformationForm = this.formBuilder.group({
      bankCode: ["", Validators.required],
      bankAccountNumber: ["", Validators.required]
  });
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, let's bind our template to the form and use our directive in the account number input field&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**app.component.html**

&amp;lt;form  [formGroup]= "bankInformationForm"&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;div class="input__field--row"&amp;gt;
      &amp;lt;label &amp;gt;Bank&amp;lt;/label&amp;gt;
      &amp;lt;span class="input__wrapper"&amp;gt;
       &amp;lt;select name="bankCode" id="bankCode" formControlName="bankCode"&amp;gt;
   &amp;lt;option [disabled]=true value=""&amp;gt;Choose Bank&amp;lt;/option&amp;gt;
   &amp;lt;option value="038"&amp;gt;GTBank&amp;lt;/option&amp;gt;
       &amp;lt;/select&amp;gt;
      &amp;lt;/span&amp;gt;
     &amp;lt;/div&amp;gt;

    &amp;lt;div class="input__field--row"&amp;gt;
      &amp;lt;label&amp;gt;Account Number&amp;lt;/label&amp;gt;
      &amp;lt;span class="input__wrapper"&amp;gt;
       &amp;lt;input type="text" name="bankAccountNumber"id="bankAccountNumber" formControlName="bankAccountNumber" [appAccountLookup] = "bankInformationForm.value"/&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/fieldset&amp;gt; 
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's bring in all the elements we need to bring this directive to life.&lt;/p&gt;

&lt;p&gt;Our directive will accept the bank details we retrieve from our BankInformation form. We will be making use of reactive forms so don't forget to import the ReactiveFormsModule in your app.module.ts file, we will need to import the &lt;a href="https://angular.io/api/core/Input"&gt;Input&lt;/a&gt; decorator. We are also going to need the &lt;a href="https://angular.io/api/core/Renderer2"&gt;Renderer2&lt;/a&gt; and &lt;a href="https://angular.io/api/core/ElementRef"&gt;ElementRef&lt;/a&gt; classes to be injected in here to make this work, now your directive should look like this.&lt;br&gt;
It will take the &lt;strong&gt;bankDetails&lt;/strong&gt; object as its Input so we can declare it as it is below. We would also be adding a loading text and a default text to the element that will perform the action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** account-lookup.directive.ts **
import { Directive, ElementRef, Input, Renderer2} from '@angular/core';
@Directive({
  selector: '[appAccountLookup]'
})
export class AccountLookupDirective {
 @Input('appAccountLookup') bankDetails!: IBankInfo;
 defaultActionText: string = 'Verify Account';
 loadingActionText: string = 'Verifying...';

  constructor(private renderer: Renderer2, private el: ElementRef)                                                    {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! next up, let's code the method that will modify our input by adding the necessary elements to it which will be called in the constructor of our AccountLookupDirective class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private modifyField():void {

  // Set style of parent
  const parent =  this.renderer.parentNode(this.el.nativeElement)
  this.renderer.setStyle(parent, 'position', 'relative');

  // Create action element inside the input field
  const actionButton = this.renderer.createElement('span');
  this.renderer.addClass(actionButton, 'inside__input--button');
this.renderer.setProperty(actionButton,'innerHTML',this.defaultActionText);

  actionButton.addEventListener('click', (event:any) =&amp;gt; {
  // Method that will return the account name
  });

  this.renderer.appendChild(parent, actionButton);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above we've created the &lt;em&gt;"Verify"&lt;/em&gt; action, we also gave it a class of &lt;em&gt;"inside__input - button"&lt;/em&gt;, the CSS class will be styled like this. Let's also add the class our account name will be displayed, &lt;em&gt;"result__under - text"&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.inside__input--button {
   position: absolute;
   font-size: 10px;
   right: 13px;
   top:30%;
   cursor: pointer;
   user-select: none;
 }
.result__under--text {
   position: absolute;
   font-size: 12px;
   left: 0px;
   bottom: -50%;
   cursor: pointer;
   user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we just did above was to add a verify button inside our input element so our users can click on that button and fetch the account name from the account validation API.&lt;/p&gt;

&lt;p&gt;Let's create a utility service that will contain the method which will make the API call to the service to validate the user's bank details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate service utility
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the method that will make the API call, your service should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**utility.service.ts**
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class UtilityService {
  constructor( private httpClient: HttpClient ) { }

  public validateAccount(validateAccount): Observable&amp;lt;any&amp;gt; {

    return this.httpClient.post('this.apis.verifyAccount', validateAccount)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now import the service in our directive and inject it via the constructor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** app.component.ts **
import { IBankInfo } from './bankInfo';
import { UtilityService } from './utility-service.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's code the method that will make this API call and the actions that will be performed after the account name is returned. We will call this method &lt;strong&gt;verifyAccountDetails&lt;/strong&gt;. This is where we retrieve the account name and append it to the input field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**account-lookup.directive.ts**

  private verifyAccountDetails(actionButton: HTMLElement,  parent:HTMLElement){
this.renderer.setProperty(actionButton,'innerHTML',this.loadingActionText);

  const accountNameDisplay = this.renderer.createElement('span');
  this.renderer.addClass(accountNameDisplay, 'result__under--text');

  this.renderer.appendChild(parent, accountNameDisplay);

 this.utilityService.validateAccount(this.bankDetails)
 .subscribe((resp)=&amp;gt; {
   actionButton.innerHTML = this.defaultActionText;
this.renderer.setProperty(accountNameDisplay,'innerHTML',resp.accountName);
},
 (error: any)=&amp;gt; {
   actionButton.innerHTML = this.defaultActionText;
   console.log(error);
  })
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, our method accepts the actionButton and the parent element as compulsory parameters. We created the element the returned account name will be displayed and gave a class of &lt;em&gt;result_under - text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With that, we can easily reuse this directive in any component across our application. You can find the code on my &lt;a href="https://github.com/dwale/account-lookup-directive-in-angular"&gt;Github&lt;/a&gt;, please leave your comments and suggestions.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>directives</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
