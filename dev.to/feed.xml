<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating a Continuous Deployment workflow using Github Actions to deploy your application to ECS</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Thu, 23 Sep 2021 09:16:34 +0000</pubDate>
      <link>https://dev.to/alichherawalla/creating-a-continuous-deployment-workflow-using-github-actions-to-deploy-your-application-to-ecs-4l78</link>
      <guid>https://dev.to/alichherawalla/creating-a-continuous-deployment-workflow-using-github-actions-to-deploy-your-application-to-ecs-4l78</guid>
      <description>&lt;p&gt;A well-written Continuous Deployment (CD) pipeline ensures that on every merge to a release branch, an artifact is created and deployed to the correct environment.  &lt;/p&gt;

&lt;p&gt;While working with containerized applications the CD pipeline needs to contain the following steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code checkout&lt;/li&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Build the image&lt;/li&gt;
&lt;li&gt;Push to a container registry&lt;/li&gt;
&lt;li&gt;Use the latest image for the next deployment&lt;/li&gt;
&lt;li&gt;Trigger a new deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, we will write a CD pipeline that does all of the above tasks using Github Actions. We will deploy our application using AWS ECS.&lt;/p&gt;

&lt;p&gt;AWS ECS is a fully managed container orchestration service from AWS. It helps you easily deploy, manage and scale containerized applications. &lt;/p&gt;

&lt;p&gt;This tutorial assumes that you have a solid understanding of &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/ecs/index.html"&gt;AWS ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions"&gt;Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also makes the implicit assumption that your application is already deployed on ECS. At the end of this tutorial you will be able automate your deployments on merge to a release branch. &lt;/p&gt;

&lt;p&gt;In this tutorial I will take you through how to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trigger a workflow on merge to a release branch.&lt;/li&gt;
&lt;li&gt;Build and push the image to the Elastic Container Registry&lt;/li&gt;
&lt;li&gt;Update the task-definition using the newly created image&lt;/li&gt;
&lt;li&gt;Deploy your application to the new environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  Starter Project
&lt;/h2&gt;

&lt;p&gt;Please clone the following repository: &lt;a href="https://github.com/wednesday-solutions/ecs-cd-starter"&gt;https://github.com/wednesday-solutions/ecs-cd-starter&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-database-connection"&gt;
  &lt;/a&gt;
  Setup database connection
&lt;/h2&gt;

&lt;p&gt;Update the relevant database connection details in the &lt;code&gt;.env.development&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;DB_URI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;role&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;db&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
POSTGRES_DB=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
POSTGRES_USER=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
POSTGRES_PASSWORD=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-secrets"&gt;
  &lt;/a&gt;
  Add secrets
&lt;/h2&gt;

&lt;p&gt;We need to add the following secrets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS_ACCESS_KEY_ID
ACCESS_KEY_ID with access to deploy&lt;/li&gt;
&lt;li&gt;AWS_SECRET_ACCESS_KEY
Associated SECRET_ACCESS_KEY&lt;/li&gt;
&lt;li&gt;AWS_REGION
Region in which the cluster is deployed&lt;/li&gt;
&lt;li&gt;AWS_ECR_REPOSITORY
Name of the ECR repository that we will push the image to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;strong&gt;AWS_ACCESS_KEY_ID&lt;/strong&gt; and &lt;strong&gt;AWS_SECRET_ACCESS_KEY&lt;/strong&gt; secrets*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5cG6tes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vyl3yoir82nqem9dfbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5cG6tes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vyl3yoir82nqem9dfbh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggg9sYDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soqwi4pi8btgoicr4zwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggg9sYDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soqwi4pi8btgoicr4zwi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the AWS deployment region&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leAgRS54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adihop4emv6sbu5dl5mm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leAgRS54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adihop4emv6sbu5dl5mm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the repository name from the AWS console and add it as a secret.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd72ezVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzj2j7wp1e1rnlr9qym9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd72ezVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzj2j7wp1e1rnlr9qym9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have omitted the &lt;code&gt;-dev&lt;/code&gt; since that represents the stage. We will be using the same workflow to deploy to multiple environments and will hence infer the stage at runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b2_65GOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22lguy96a0p7ngwcg9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2_65GOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22lguy96a0p7ngwcg9f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-taskdefinitionjson-for-all-the-environments"&gt;
  &lt;/a&gt;
  Create the task-definition.json for all the environments
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to the following URL: &lt;a href="https://ap-south-1.console.aws.amazon.com/ecs/home?region=ap-south-1#/taskDefinitions"&gt;https://ap-south-1.console.aws.amazon.com/ecs/home?region=ap-south-1#/taskDefinitions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using &lt;code&gt;ap-south-1&lt;/code&gt; as the AWS region. Please change the URL according to the region you are in&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pajiDCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6lgw6zmi7brd1qkbpcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pajiDCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6lgw6zmi7brd1qkbpcd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Select the task definition for your environment and project. In my case its the &lt;code&gt;ecs-cd-starter-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MCglExRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uizly9279e64gl3pt0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCglExRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uizly9279e64gl3pt0q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select the latest revision and go to the &lt;code&gt;JSON&lt;/code&gt; tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6KnRfWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cqwo6yku9aceijhaza0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6KnRfWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cqwo6yku9aceijhaza0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy the JSON.&lt;br&gt;
Run the following snippet in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;mkdir&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;
&lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the JSON from the AWS console into the newly created file.&lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;dev.json&lt;/code&gt; since &lt;code&gt;dev&lt;/code&gt; is my default branch name. I want the code that is pushed to this branch deployed to the &lt;code&gt;dev&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;You will need to repeat this step for the &lt;code&gt;qa&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt;  environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trigger-the-workflow-to-run-on-merge-to-a-release-branch"&gt;
  &lt;/a&gt;
  Trigger  the workflow to run on merge to a release branch
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1 - Create workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new workflow for continuous deployment in the &lt;code&gt;.github/workflows&lt;/code&gt; folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;workflows&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2 - Setup triggers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Identify your release branches. The first release branch will be your default branch which should also be the branch that the team typically raises a pull request to when they want to add a new feature.&lt;/p&gt;

&lt;p&gt;In my case this is the &lt;code&gt;dev&lt;/code&gt; branch. Typically you would have 2 more environments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;qa&lt;/li&gt;
&lt;li&gt;production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's trigger this workflow whenever there is a push on one of these branches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ECS&lt;/span&gt; &lt;span class="nx"&gt;Starter&lt;/span&gt; &lt;span class="nx"&gt;CD&lt;/span&gt; &lt;span class="nx"&gt;Develop&lt;/span&gt;

&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;qa&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;master&lt;/span&gt;
&lt;span class="nx"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Docker&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt;
    &lt;span class="nx"&gt;runs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the above code into the newly created &lt;code&gt;cd.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3 - Checkout code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step pulls the latest code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4 - Get branch name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the current branch name. This step will fetch the current git branch name and store it. It can now be accessed like so: &lt;code&gt;${{steps.vars.outputs.stage}}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_REF&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="cm"&gt;/*/}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5 - Configure AWS Credentials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure AWS Credentials and region. Use the values from Github secrets to configure the AWS Credentials.&lt;br&gt;
To get a better understanding of all of the configuration options please go through the documentation here: &lt;a href="https://github.com/aws-actions/configure-aws-credentials#usage"&gt;https://github.com/aws-actions/configure-aws-credentials#usage&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Configure&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="nx"&gt;credentials&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v1&lt;/span&gt;
        &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_REGION&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6 - Login to ECR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use the aws-actions/amazon-ecr action to log in to AWS ECR. &lt;/p&gt;

&lt;p&gt;To get a better understanding of all of the configuration options please go through the documentation here: &lt;a href="https://github.com/aws-actions/configure-aws-credentials#usage"&gt;https://github.com/aws-actions/amazon-ecr-login#usage&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;amazon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 7 - Build tag and push image to ECR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now need to build the docker image,. tag and push it to AWS ECR. Use the commit hash to tag the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;ECR_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nl"&gt;ECR_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_ECR_REPOSITORY&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nl"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_REGION&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nl"&gt;IMAGE_TAG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;$ECR_REGISTRY&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$ECR_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$IMAGE_TAG&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
          &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;$ECR_REGISTRY&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$ECR_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$IMAGE_TAG3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 8 - Render the task definition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We create a new task-definition revision by updating the value of image. We will point to the image that we just pushed to ECR.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Render&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECS&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ecs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;amazon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v1&lt;/span&gt;
        &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ecs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
          &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="sr"&gt;/${{ secrets.AWS_ECR_REPOSITORY }}-${{steps.vars.outputs.stage}}:${{ github.sha }&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;the task-definition folder will contain task-definitions for all of the environments. I create json files with the name of the environment and access it using &lt;code&gt;${{steps.vars.outputs.stage}}.json&lt;/code&gt;  in the workflow&lt;/li&gt;
&lt;li&gt;I name my containers with the stage as the suffix. I reference it using &lt;code&gt;&amp;lt;container-name&amp;gt;${{steps.vars.outputs.stage}}.json&lt;/code&gt; in the workflow. &lt;/li&gt;
&lt;li&gt;We reference the image that we just pushed to the ECR registry.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 9 - Deploy to ECS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use the latest revision of the task-definition that we just created to deploy the application to ECS. I use the same &lt;code&gt;-branchName&lt;/code&gt; suffix when naming my service and cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 10 - Logout of ECR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once the deployment is done logout of ECR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;Now that you have setup a CD pipeline to deploy your application to ECS I would recommend reading our article on &lt;a href="https://www.wednesday.is/writing-tutorials/part-1-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express"&gt;"how to execute batch jobs in a multi-container environment"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial on how to create a CD pipeline to deploy your ECS application. If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>docker</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Choosing a Rad Web Hosting KVM VPS Hosting</title>
      <author>Larry Johnson</author>
      <pubDate>Thu, 23 Sep 2021 09:13:35 +0000</pubDate>
      <link>https://dev.to/sitedata/choosing-a-rad-web-hosting-kvm-vps-hosting-1ipb</link>
      <guid>https://dev.to/sitedata/choosing-a-rad-web-hosting-kvm-vps-hosting-1ipb</guid>
      <description>&lt;p&gt;RAD WEB HOSTING is a leading provider of website hosting, reseller hosting, VPS Servers, performance cloud solutions, and dedicated server hosting in Dallas, TX. RAD WEB HOSTING provides a platform for clients to register and manage their domain names, as well as protect their websites and visitors with FREE Domain Privacy and SSL Certificates. Headquartered in the former Federal Reserve Bank of Dallas, all hosting services benefit from enhanced security and multi-homed network up streams for redundancy and faster connection speeds. RAD WEB HOSTING’s core service offering revolves around providing hosting solutions for small to medium businesses, but also providing customized scalable hosting solutions for Growing and Enterprise clients.&lt;/p&gt;

&lt;p&gt;Why Rad Web Hosting&lt;br&gt;
&lt;a href="https://radwebhosting.com/kvm-vps-servers"&gt;KVM VPS&lt;/a&gt; in which Premium Intel Server Hardware, SSD storage, and KVM hypervisors are standard Features of Linux VPS Servers. KVM VPS Servers are Fully Customizable and Provide a Reliable, High-Availability Hosting Platform for Your Needs.&lt;/p&gt;

&lt;p&gt;Windows VPS Hosting in which Windows VPS Servers are instantly upgradeable, DDoS protected, and backed by our premium network and 24/7 Support. Manage your Windows VPS directly from your Hosting Dashboard with on-demand OS reloads, power control, reverse DNS management, IPMI and more. Windows VPS Servers feature KVM virtualization with RAID 10 SSD.&lt;/p&gt;

</description>
      <category>vpshosting</category>
      <category>vps</category>
      <category>kvm</category>
      <category>vpsserver</category>
    </item>
    <item>
      <title>TimeLy</title>
      <author>Atharva Umbre</author>
      <pubDate>Thu, 23 Sep 2021 09:04:36 +0000</pubDate>
      <link>https://dev.to/erbmu/timely-3pk3</link>
      <guid>https://dev.to/erbmu/timely-3pk3</guid>
      <description>&lt;p&gt;Ever got tired of remembering which class you have? Constantly having the urge to check the class hours?&lt;br&gt;
What if I told you - you could have your timetable in your pocket? No more fussing over it again?&lt;/p&gt;

&lt;p&gt;TimeLy, an app developed by Android Club VITC, is designed to fulfil the same and make life easier for every student!&lt;/p&gt;

&lt;p&gt;Let’s have a quick glance at some of the prominent features of this app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Simple UI:&lt;/strong&gt;&lt;br&gt;
The Graphical User Interface of this app is simple and easy on the eyes. With a minimalistic background and the absence of unnecessary features, this makes the app extremely user friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.No Signup:&lt;/strong&gt;&lt;br&gt;
No registration is required. One does not have to go through any hustle of providing personal details. TimeLy is a one of a sort, straight to the point app, directly catering to your needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.No ads:&lt;/strong&gt;&lt;br&gt;
With no annoying ads to waste your time, TimeLy ensures you get to check your timetable without any disturbances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Radiant Colors:&lt;/strong&gt;&lt;br&gt;
TimeLy also allows the user to use various colors for particular classes. With a range of modest colors, your entire experience is made much more comfortable and pleasant.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial:
&lt;/h1&gt;

&lt;p&gt;Let’s now have a quick look on how to use this app:&lt;/p&gt;

&lt;p&gt;To start off simply click on the ‘+’ sign on the top right corner of your screen.&lt;/p&gt;

&lt;p&gt;Let’s say I have a Lab class of Cyber Security with a C2 slot. Adding in these details with the timings and day of the class (along with your preferred color choice), click on the ‘Add’ button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eoitz19k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neo5rlq7xiz1kn19uy75.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eoitz19k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neo5rlq7xiz1kn19uy75.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--37INtr7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6t3v0carrdwicea6x4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--37INtr7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6t3v0carrdwicea6x4.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s literally all there was to it! Your class has been added to your timetable. Now all that remains is adding the rest of your classes, and all your timetable worries have been solved!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxzOsT66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx7043tp22tjb8af7m1v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxzOsT66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx7043tp22tjb8af7m1v.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Couldn’t have asked for anything better huh?&lt;/p&gt;

&lt;p&gt;TimeLy is as Barney Stinson would say -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--as5NN8Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyyhhpefegdqia4mvqa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--as5NN8Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyyhhpefegdqia4mvqa7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>androidclubvit</category>
      <category>android</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Have you tried GitHub Copilot?</title>
      <author>Madza</author>
      <pubDate>Thu, 23 Sep 2021 09:03:39 +0000</pubDate>
      <link>https://dev.to/madza/have-you-tried-github-copilot-1lgh</link>
      <guid>https://dev.to/madza/have-you-tried-github-copilot-1lgh</guid>
      <description>&lt;p&gt;&lt;a href="https://copilot.github.com/"&gt;GitHub Copilot&lt;/a&gt; is an AI tool developed by &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and &lt;a href="https://openai.com/"&gt;OpenAI&lt;/a&gt; to assist users of &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; by autocompleting code. &lt;/p&gt;

&lt;p&gt;It was first &lt;a href="https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/"&gt;announced&lt;/a&gt; on 29 June 2021. It got quite a &lt;a href="https://twitter.com/search?q=github%20copilot&amp;amp;src=typed_query"&gt;buzz&lt;/a&gt; on the launch. &lt;/p&gt;

&lt;p&gt;Three months has since passed and I was wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have you tried it and what are your impressions/thoughts?&lt;/li&gt;
&lt;li&gt;Do you see it as a must-have tool in your stack?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>github</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>My blogging platform on ProductHunt</title>
      <author>Rotimi</author>
      <pubDate>Thu, 23 Sep 2021 08:34:31 +0000</pubDate>
      <link>https://dev.to/rotimi_je_suis/my-blogging-platform-on-producthunt-ggl</link>
      <guid>https://dev.to/rotimi_je_suis/my-blogging-platform-on-producthunt-ggl</guid>
      <description>&lt;p&gt;Hi everyone. My blogging platform, QuickPublisher (&lt;a href="https://www.quickpublisher.online"&gt;https://www.quickpublisher.online&lt;/a&gt;) is now live on ProductHunt. The link is &lt;a href="https://www.producthunt.com/posts/quickpublisher-3"&gt;https://www.producthunt.com/posts/quickpublisher-3&lt;/a&gt; please leave a feedback. Thank you&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How do you manage your emails?</title>
      <author>Madza</author>
      <pubDate>Thu, 23 Sep 2021 08:23:38 +0000</pubDate>
      <link>https://dev.to/madza/how-do-you-manage-your-emails-3o4j</link>
      <guid>https://dev.to/madza/how-do-you-manage-your-emails-3o4j</guid>
      <description>&lt;p&gt;Keeping track of the emails and organizing them effectively is a crucial part of any successful business. The more control you have, the more you can focus on actually building stuff.&lt;/p&gt;

&lt;p&gt;Most of developers actively use multiple email addresses, so it is important to create an efficient workflow to stay productive.&lt;/p&gt;

&lt;p&gt;Could you elaborate on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many emails do you get daily (approx.)?&lt;/li&gt;
&lt;li&gt;What email client/extensions do you use?&lt;/li&gt;
&lt;li&gt;What are your tips to get them easily tracked and organized (notifications, tags, etc.)?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Streamlit Custom Components + Vite + VueJS</title>
      <author>Aaron Gong</author>
      <pubDate>Thu, 23 Sep 2021 08:08:41 +0000</pubDate>
      <link>https://dev.to/aisone/streamlit-custom-components-vite-vuejs-58p4</link>
      <guid>https://dev.to/aisone/streamlit-custom-components-vite-vuejs-58p4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#create-component-based-on-vuejs"&gt;
  &lt;/a&gt;
  Create Component based on VueJS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;From the template folder&lt;/li&gt;
&lt;li&gt;Create new component using vite and add &lt;strong&gt;init&lt;/strong&gt;.py code for testing the component
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir vite_vue_component
$ cd vite_vue_component
$ npm init vite@latest frontend --template vue # npm v6 (v7 is different)
$ touch __init__.py # command may be different in Windows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add in the &lt;strong&gt;init&lt;/strong&gt;.py code below
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;streamlit.components.v1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;

&lt;span class="n"&gt;_RELEASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;_RELEASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;_component_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;declare_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"vite_vue_component"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:3000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# vite dev server port
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;parent_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;build_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"frontend/dist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;_component_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;declare_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"vite_vue_component"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;build_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;component_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_component_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;component_value&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;_RELEASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;streamlit&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;
  &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subheader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Component Test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;num_clicks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"NameViteVue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You've clicked %s times!"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_clicks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;install the frontend node libraries, streamlit-component-lib, create vite.config.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd frontend
$ npm i
$ npm i streamlit-component-lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add the following property to vite.config.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;replace App.vue file with the following code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
    &amp;lt;button @click="doClick"&amp;gt;click&amp;lt;/button&amp;gt;
    &amp;lt;p&amp;gt;Count {{ count }}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Streamlit } from 'streamlit-component-lib'
import { ref, onMounted } from 'vue'

export default {
  setup(props, context) {
    const msg = ref('No Msg')
    const count = ref(0)

    const doClick = () =&amp;gt; {
      count.value += 1

      Streamlit.setComponentValue(count.value)
    }

    const onRender = (event) =&amp;gt; {
      const data = event.detail
      msg.value = `Hello, ` + data.args['name']
      Streamlit.setFrameHeight()
    }

    onMounted(() =&amp;gt; {
      Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)
      Streamlit.setComponentReady()
      Streamlit.setFrameHeight()
    })

    return {
      doClick,
      count,
      msg
    }
  }
}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-the-example"&gt;
  &lt;/a&gt;
  Running the example
&lt;/h3&gt;

&lt;p&gt;From the base directory, navigate to the frontend and serve it from a dev server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd template/vite_vue_component/frontend
$ npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On a separate terminal, from base directory, navigate to and run the Streamlit app (assuming python environment has been activated):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd template
$ streamlit run vite_vue_component/__init__.py  # run the example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>streamlit</category>
      <category>javascript</category>
      <category>vite</category>
    </item>
    <item>
      <title>5 design tips every web dev should follow</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Thu, 23 Sep 2021 07:58:59 +0000</pubDate>
      <link>https://dev.to/abhirajb/5-design-tips-every-web-dev-should-follow-2bha</link>
      <guid>https://dev.to/abhirajb/5-design-tips-every-web-dev-should-follow-2bha</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-follow-a-color-scheme"&gt;
  &lt;/a&gt;
  1. Follow a color scheme
&lt;/h3&gt;

&lt;p&gt;Color schemes always come in handy when creating feature-packed projects. Suppose, you have made a SaaS app and a logo for that.&lt;br&gt;
Now if the color of the logo and the website or landing page you're designing, you are ultimately making a brand out of it.&lt;/p&gt;

&lt;p&gt;How Do People Respond to Brand Colors?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Red evokes a passionate and visceral response. &lt;/li&gt;
&lt;li&gt;Purple is a sophisticated yet mysterious color. &lt;/li&gt;
&lt;li&gt;Blue is the most popular color choice for the top brands.&lt;/li&gt;
&lt;li&gt;Green is a color that is synonymous with calmness, safety, and freshness. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A very popular example of how color schemes can shape your brand,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9E33YVYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3596661/screenshots/7604098/pepsi_4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9E33YVYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3596661/screenshots/7604098/pepsi_4x.png" alt="pepsi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-creating-responsive-design"&gt;
  &lt;/a&gt;
  2. Creating responsive design
&lt;/h3&gt;

&lt;p&gt;Responsive Web design is the approach that suggests that design and development should respond to the user’s behavior and environment based on screen size, platform and orientation.&lt;br&gt;
With responsive design, you will have the flexibility to scale up rather than scale down.&lt;/p&gt;

&lt;p&gt;With a well-functioning mobile product, you have already prioritized features and capabilities and identified the essential elements of your platform.&lt;/p&gt;

&lt;p&gt;Look below how Dropbox optimizes responsive design&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lkHDGUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/www-inside-design/uploads/2018/02/dropbox-responsive-web-design.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lkHDGUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/www-inside-design/uploads/2018/02/dropbox-responsive-web-design.png" alt="db"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-stick-to-one-font-or-icon-family"&gt;
  &lt;/a&gt;
  3. Stick to one font or icon family
&lt;/h3&gt;

&lt;p&gt;All icons/illustrations should come from the same family, and they should maintain the same stylistic rules through out.&lt;/p&gt;

&lt;p&gt;Aim for only one or two fonts, three if you absolutely need it. Make sure the font you use co-relates to your brand scheme and feel. Know the difference between serif, sans-serif and monospaced.&lt;/p&gt;

&lt;p&gt;Below given are screenshots from Atlassian's website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84fHubHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uxgorilla.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-28-at-1.02.14-PM-768x414.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84fHubHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uxgorilla.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-28-at-1.02.14-PM-768x414.png" alt="a1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwGkzJWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uxgorilla.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-28-at-1.02.30-PM-768x418.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwGkzJWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uxgorilla.com/wp-content/uploads/2018/09/Screen-Shot-2018-09-28-at-1.02.30-PM-768x418.png" alt="a2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-css-frameworks"&gt;
  &lt;/a&gt;
  4. CSS frameworks
&lt;/h3&gt;

&lt;p&gt;When possible, don't use a CSS framework. It will heavily add to your core understanding of CSS. &lt;br&gt;
Some disadvantages of heavily styled CSS frameworks:&lt;br&gt;
&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;You will probably spend more time overriding styles/functionality than learning core-awesome CSS/HTML features.
&lt;/li&gt;
&lt;li&gt;You will have to eventually do something that can’t be achieved using the CSS framework, you either have to build it from scratch or pull in some library that fits your needs, either way, now you will have multiple sources of truth for your own design.
&lt;/li&gt;
&lt;li&gt;You’ll need to put in some time learning how to use any CSS framework, I think this time is better spent on learning how to build any component from scratch.

&lt;p&gt;But if you must choose a framework, try going for something which is not heavily styles focused like Tailwind.&lt;/p&gt;

&lt;p&gt;I have explained more about CSS frameworks in my earlier post. Click below to read it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/abhirajb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3Zc_2Z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UdQa_QBS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/685929/957550ef-dba4-424d-b0ee-bd5b3f9d2872.jpeg" alt="abhirajb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhirajb/which-css-framework-should-you-use-2ea7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Which CSS framework should you use?&lt;/h2&gt;
      &lt;h3&gt;Abhiraj Bhowmick ・ Sep 20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#5-appealing-to-your-audience"&gt;
  &lt;/a&gt;
  5. Appealing to your audience
&lt;/h3&gt;

&lt;p&gt;The most important part of building a brand and website is keeping your target audience in mind. All design choices need to answer how you can best serve them and create a positive, memorable and unique experience for them. Without this, you won’t be able to stand up next to competitors. Use language and imagery that will appeal to them and reflect values they can relate to.&lt;/p&gt;

&lt;p&gt;An example of how you can connect with your audience via design.&lt;br&gt;
&lt;a href="https://dribbble.com/SaraSalehi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WXZum4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://99designs-blog.imgix.net/blog/wp-content/uploads/2021/01/vespa-joy-e1610046358967.png%3Fauto%3Dformat%26q%3D60%26fit%3Dmax%26w%3D930" alt="vj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this article has helped you and provided you with some knowledge.&lt;/p&gt;

&lt;p&gt;Thanks for reading 💝&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>I made this personal blogging platform - The Chaotic</title>
      <author>Himanshu</author>
      <pubDate>Thu, 23 Sep 2021 07:11:40 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/i-made-this-personal-blogging-platform-the-chaotic-id6</link>
      <guid>https://dev.to/hima_khaitan/i-made-this-personal-blogging-platform-the-chaotic-id6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;I myself is trying to build a community where I can interact with people who have same interests that of mine. Apart from a discord server (&lt;a href="https://discord.gg/JuVbaMHY2W"&gt;The Youth&lt;/a&gt;) it appeared to me that blogging can be a great medium to interact with the people around with same interests and that's were the idea came from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_63yxKsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v6uxy7gvx7fc9bvn8yh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_63yxKsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v6uxy7gvx7fc9bvn8yh.png" alt="The Chaotic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology-used"&gt;
  &lt;/a&gt;
  Technology Used
&lt;/h3&gt;

&lt;p&gt;As a developer I myself like using MERN stack for my Projects. Apart from MERN I have used Redux for the APP wide state management. &lt;/p&gt;

&lt;p&gt;The project contains &lt;code&gt;Backend&lt;/code&gt; folder with a NodeJS backend. &lt;code&gt;Frontend&lt;/code&gt; folder contains a React APP. Along with this I have made a &lt;code&gt;Template&lt;/code&gt; folder which contains website design using HTML and CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z31NYVHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b47hn0ayltlssk57hut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z31NYVHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2b47hn0ayltlssk57hut.png" alt="The Chaotic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;💻 Client Side Rendering with ReactJS&lt;/li&gt;
&lt;li&gt;🌐 Popular Blogs&lt;/li&gt;
&lt;li&gt;🌱 Like and Comments&lt;/li&gt;
&lt;li&gt;🙆‍♂️ Advanced Admin Panel&lt;/li&gt;
&lt;li&gt;🥽 Category Creation&lt;/li&gt;
&lt;li&gt;👨 Author Creation&lt;/li&gt;
&lt;li&gt;📰 Newsletters&lt;/li&gt;
&lt;li&gt;🧣 Tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDjw8TNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0l8altxj7fgyovmy001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDjw8TNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0l8altxj7fgyovmy001.png" alt="The Chaotic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/TheChaotic"&gt;
        TheChaotic
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Chaotic is a Personal Blog Website 💻 made using MERN Stack. The theme of the website is set to aesthetic as well as inspiring🌱. To be more precise, the website is set to target Youth Audience as a whole. 🧲
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;

  &lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/Logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Idf6O9aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/Logo.png" width="200"&gt;&lt;/a&gt;
  &lt;br&gt;  
  The Chaotic - Blog Website
  &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;
&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkxXKTiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/mongodb.png" width="100"&gt;
&lt;/a&gt; 
&lt;a href="https://github.com/himakhaitan/TheChaotic"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59oEFpU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/redux.png" width="60"&gt;
&lt;/a&gt; 
&lt;a href="https://expressjs.com/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6n_wHbQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/expressjs.png" width="100"&gt;
&lt;/a&gt;
 
&lt;a href="https://reactjs.org/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIyOZy5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/reactjs.png" width="60"&gt;&lt;/a&gt;
   
&lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psITFUtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/nodejs.png" width="60"&gt;&lt;/a&gt;
  
&lt;/p&gt;

&lt;h4&gt;
A Personal Blog Website Setup using &lt;a href="https://www.mongodb.com/mern-stack" rel="nofollow"&gt;MERN Stack&lt;/a&gt;.&lt;/h4&gt;
&lt;p&gt;
  
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/80a1153c429992993a5fc1d8009c2f9ed74f95263366dc21a2daec8fb25077c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d7570253230746f253230646174652d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/80a1153c429992993a5fc1d8009c2f9ed74f95263366dc21a2daec8fb25077c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d7570253230746f253230646174652d627269676874677265656e2e737667"&gt;&lt;/a&gt;
  
  &lt;a href="https://github.com/himakhaitan/TheChaotic/issues"&gt;&lt;img src="https://camo.githubusercontent.com/d9ac4d4824e2b7488101f456174c06f12daa873dc05ff0d5b3c6b18da341c3dc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f68696d616b68616974616e2f5468654368616f7469632e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/45b4ffbd594af47fe09a3432f9f8e122c6518aa6352b4ce453a1a2563da2905c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/himakhaitan/TheChaotic#description"&gt;Description&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#screenshot"&gt;Screenshot&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#installation-and-setup"&gt;Installation and Setup&lt;/a&gt; • &lt;a href="https://github.com/himakhaitan/TheChaotic#dependcies"&gt;Dependencies&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#license"&gt;License&lt;/a&gt; • &lt;a href="https://github.com/himakhaitan/TheChaotic#contribution"&gt;Contribution&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;h2&gt;
Screenshot&lt;/h2&gt;
&lt;p&gt;Below are some of the screenshots of UI from The Chaotic&lt;/p&gt;
&lt;h3&gt;
Home Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tadTdgXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Contact Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQgI3s61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Category Pages&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7ZqoAi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIwqGuV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
About Pages&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2k8KNFkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation and Setup&lt;/h2&gt;
&lt;h2&gt;
Dependencies&lt;/h2&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;This project uses an &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
&lt;h2&gt;
Contribution&lt;/h2&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/TheChaotic"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the Project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Clone the Repo &lt;code&gt;git clone https://github.com/himakhaitan/TheChaotic.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Configure &lt;code&gt;.env&lt;/code&gt; file as &lt;code&gt;sample.env&lt;/code&gt; for project to run properly.&lt;/li&gt;
&lt;li&gt;cd into &lt;code&gt;Backend&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run server&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into &lt;code&gt;Frontent&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLoB4J10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvvabqkdqw8cvpp2m8v0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLoB4J10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvvabqkdqw8cvpp2m8v0.png" alt="The Chaotic"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#suggestions-and-feedbacks-welcome"&gt;
  &lt;/a&gt;
  Suggestions and Feedbacks Welcome!
&lt;/h3&gt;

&lt;p&gt;The Chaotic is at its initial stages at the the moment and need lots of advancements. I would highly appreciate any feedback, suggestions and questions you would like to provide. What features would you like to see? What seems unnecessary or what's causing difficulties?&lt;/p&gt;

&lt;p&gt;Thank you for your time and I await to see your suggestions soon. Until then, have a nice day!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#for-any-collaboration-projects-do-reach-me-through-discord-server-here"&gt;
  &lt;/a&gt;
  For any Collaboration projects do reach me through Discord Server &lt;a href="https://discord.gg/JuVbaMHY2W"&gt;here&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>githunt</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Most popular CSS Units</title>
      <author>SYED MAZHAR ALI RAZA</author>
      <pubDate>Thu, 23 Sep 2021 07:06:50 +0000</pubDate>
      <link>https://dev.to/110syedmazhar/most-popular-css-units-48bd</link>
      <guid>https://dev.to/110syedmazhar/most-popular-css-units-48bd</guid>
      <description>&lt;p&gt;A CSS unit is used to set the size of an element or its content. They are used to set margin, padding, height, width and so on.&lt;br&gt;
The length unit in CSS is of two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Absolute length unit&lt;/li&gt;
&lt;li&gt;Relative length unit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#absolute-length"&gt;
  &lt;/a&gt;
  Absolute Length:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlG8SFKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/r7uWo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlG8SFKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.stack.imgur.com/r7uWo.gif" alt="pixels"&gt;&lt;/a&gt;&lt;br&gt;
The absolute length units are fixed(not relative) and a length expressed using these units appear exactly of the same size.&lt;br&gt;
Following are the most popularly used absolute length units:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-px-pixels"&gt;
  &lt;/a&gt;
  1. Px (Pixels):
&lt;/h3&gt;

&lt;p&gt;Pixels, abbreviated as "px", are a unit of measurement equivalent to roughly 1⁄96 inch (0.26 mm). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { width: 10px;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Pixels are &lt;em&gt;relative&lt;/em&gt; to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pt-points"&gt;
  &lt;/a&gt;
  2. Pt (Points):
&lt;/h3&gt;

&lt;p&gt;Points, abbreviated as "pt", are a unit of measurement equivalent to roughly 1⁄72 inch (0.35 mm). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { width: 15pt;}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-pc-picas"&gt;
  &lt;/a&gt;
  3. Pc (Picas):
&lt;/h3&gt;

&lt;p&gt;Picas, abbreviated as "pc", are a unit of measurement equivalent to roughly 1⁄6 inch (4.23 mm). Also, 1pc = 12 pt&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { width: 5pc;}&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since screen sizes vary so much, it is not recommended to use absolute units on screen. However, they can be used if the output medium is known, such as for print layout.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#relative-length"&gt;
  &lt;/a&gt;
  Relative Length:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1LxDdbxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/800/1%2AOkcOPoWR3bxKY2axlDX9UA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1LxDdbxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/800/1%2AOkcOPoWR3bxKY2axlDX9UA.gif" alt="Relative"&gt;&lt;/a&gt;&lt;br&gt;
Relative length units are relative to certain factors like the size of the parent element's font, or the size of the viewport. &lt;br&gt;
Using such units, the size of text and elements can be set and changed appropriately for different device widths.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-em"&gt;
  &lt;/a&gt;
  1. Em:
&lt;/h3&gt;

&lt;p&gt;Em is a relative length unit which is relative to the font-size of the element. So if the font size of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is set as 2 pixels, then 1 em in that division will be 2px. By default 1em = 16px&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;div {font-size: 18px} //this is the div containing an img. Its font size is set as 18px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;img { width: 2em;}  // here, 2rem = 36px&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-rem"&gt;
  &lt;/a&gt;
  2. Rem:
&lt;/h3&gt;

&lt;p&gt;Rem is a relative length unit which is relative to the font-size of the root element. By default 1rem = 16px.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;html { font-size: 18px } //setting the base font size as 18px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;img { width: 2rem;} // here, 2rem = 36px&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-percent"&gt;
  &lt;/a&gt;
  3. % (Percent):
&lt;/h3&gt;

&lt;p&gt;Percent is a relative length unit which is relative to the size of the parent element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { width: 2%;} // The width of img will be 2% of its parent element size&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-vw-viewportwidth"&gt;
  &lt;/a&gt;
  4. Vw (Viewport-width):
&lt;/h3&gt;

&lt;p&gt;1vw is relative to 1% of the &lt;strong&gt;width&lt;/strong&gt; of the viewport(the browser window size). If the viewport is 100cm wide, 1vw = 1cm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { width: 2vw;} // The width of img will be 2% of its viewport-width&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-vh-viewportheight"&gt;
  &lt;/a&gt;
  5. Vh (Viewport-height):
&lt;/h3&gt;

&lt;p&gt;1vh is relative to 1% of the &lt;strong&gt;height&lt;/strong&gt; of the viewport(the browser window size). If the viewport is 50 cm in height, 1vh = 0.5cm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { height: 2vh;} // The height of img will be 2% of its viewport-height&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ch-characterwidth"&gt;
  &lt;/a&gt;
  Ch (Character-width):
&lt;/h3&gt;

&lt;p&gt;1ch is equal to the width of the “0” character in a given typeface. In monospace fonts, where all characters are the same width, 1ch equals one character. Such unit can be used in carrying out certain scenarios like in the &lt;em&gt;typewriter animation&lt;/em&gt; where the typing cursor has to move a length equal to 1 character. For fonts that consists of unequal widths of all characters, this unit doesn't fit to be an appropriate choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;img { width: 50ch; } // The width of img will be equal width of 50 "0s"&lt;/code&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Cookies</title>
      <author>Rutuja Chandgude</author>
      <pubDate>Thu, 23 Sep 2021 07:01:06 +0000</pubDate>
      <link>https://dev.to/rutuchandgude/javascript-cookies-42ba</link>
      <guid>https://dev.to/rutuchandgude/javascript-cookies-42ba</guid>
      <description>&lt;p&gt;What are cookies?&lt;/p&gt;

&lt;p&gt;Cookies are data,stored in small text files,on your computer.&lt;/p&gt;

&lt;p&gt;When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.&lt;/p&gt;

&lt;p&gt;Cookies were invented to solve the problem "how to remember information about the user":&lt;/p&gt;

&lt;p&gt;• When a user visits a web page, his/her name can be stored in &lt;br&gt;
  a cookie.&lt;br&gt;
• Next time the user visits the page, the cookie "remembers" &lt;br&gt;
  his/her name.&lt;br&gt;
Cookies are saved in name-value pairs like:&lt;/p&gt;

&lt;p&gt;username = John Doe&lt;/p&gt;

&lt;p&gt;When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to "remember" information about users.&lt;/p&gt;

&lt;p&gt;NOTE: None of the examples below will work if your browser has local cookies support turned off.&lt;/p&gt;

&lt;p&gt;Create a Cookie with JavaScript:&lt;br&gt;
JavaScript can create, read, and delete cookies with the document.cookie property.&lt;/p&gt;

&lt;p&gt;With JavaScript, a cookie can be created like this:&lt;/p&gt;

&lt;p&gt;document.cookie = "username=John Doe";&lt;/p&gt;

&lt;p&gt;You can also add an expiry date (in UTC time). By default, the cookie is deleted when the browser is closed:&lt;/p&gt;

&lt;p&gt;document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC";&lt;/p&gt;

&lt;p&gt;With a path parameter, you can tell the browser what path the cookie belongs to. By default, the cookie belongs to the current page.&lt;/p&gt;

&lt;p&gt;document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";&lt;/p&gt;

&lt;p&gt;• Read a Cookie with JavaScript:&lt;/p&gt;

&lt;p&gt;With JavaScript, cookies can be read like this:&lt;/p&gt;

&lt;p&gt;let x = document.cookie;&lt;/p&gt;

&lt;p&gt;document.cookie will return all cookies in one string much like: cookie1=value; cookie2=value; cookie3=value;&lt;/p&gt;

&lt;p&gt;• Change a Cookie with JavaScript:&lt;br&gt;
With JavaScript, you can change a cookie the same way as you create it:&lt;/p&gt;

&lt;p&gt;document.cookie = "username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";&lt;/p&gt;

&lt;p&gt;The old cookie is overwritten.&lt;/p&gt;

&lt;p&gt;• Delete a Cookie with JavaScript:&lt;/p&gt;

&lt;p&gt;Deleting a cookie is very simple.&lt;/p&gt;

&lt;p&gt;You don't have to specify a cookie value when you delete a cookie.&lt;/p&gt;

&lt;p&gt;Just set the expires parameter to a past date:&lt;/p&gt;

&lt;p&gt;document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";&lt;/p&gt;

&lt;p&gt;NOTE:You should define the cookie path to ensure that you delete the right cookie.&lt;br&gt;
Some browsers will not let you delete a cookie if you don't specify the path.&lt;/p&gt;

&lt;p&gt;• The Cookie String:&lt;/p&gt;

&lt;p&gt;The document.cookie property looks like a normal text string. But it is not.&lt;/p&gt;

&lt;p&gt;Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the name-value pair of it.&lt;/p&gt;

&lt;p&gt;If you set a new cookie, older cookies are not overwritten. The new cookie is added to document.cookie, so if you read document.cookie again you will get something like:&lt;/p&gt;

&lt;p&gt;cookie1 = value; cookie2 = value;&lt;/p&gt;

&lt;p&gt;JavaScript Cookie Example:&lt;/p&gt;

&lt;p&gt;In the example to follow, we will create a cookie that stores the name of a visitor.&lt;/p&gt;

&lt;p&gt;The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.&lt;/p&gt;

&lt;p&gt;The next time the visitor arrives at the same page, he/she will get a welcome message.&lt;/p&gt;

&lt;p&gt;For the example we will create 3 JavaScript functions:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A function to set a cookie value

A function to get a cookie value

A function to check a cookie value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;• A function to set a cookie:&lt;/p&gt;

&lt;p&gt;function setCookie(cname, cvalue, exdays) {&lt;br&gt;
  const d = new Date();&lt;br&gt;
  d.setTime(d.getTime() + (exdays*24*60*60*1000));&lt;br&gt;
  let expires = "expires="+ d.toUTCString();&lt;br&gt;
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;• A function to get a cookie:&lt;/p&gt;

&lt;p&gt;function getCookie(cname) {&lt;br&gt;
  let name = cname + "=";&lt;br&gt;
  let decodedCookie = decodeURIComponent(document.cookie);&lt;br&gt;
  let ca = decodedCookie.split(';');&lt;br&gt;
  for(let i = 0; i &amp;lt;ca.length; i++) {&lt;br&gt;
    let c = ca[i];&lt;br&gt;
    while (c.charAt(0) == ' ') {&lt;br&gt;
      c = c.substring(1);&lt;br&gt;
    }&lt;br&gt;
    if (c.indexOf(name) == 0) {&lt;br&gt;
      return c.substring(name.length, c.length);&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
  return "";&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;• A Function to Check a Cookie:&lt;/p&gt;

&lt;p&gt;function checkCookie() {&lt;br&gt;
  let username = getCookie("username");&lt;br&gt;
  if (username != "") {&lt;br&gt;
   alert("Welcome again " + username);&lt;br&gt;
  } else {&lt;br&gt;
    username = prompt("Please enter your name:", "");&lt;br&gt;
    if (username != "" &amp;amp;&amp;amp; username != null) {&lt;br&gt;
      setCookie("username", username, 365);&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Chatwoot: An open source customer engagement tool that challenges Freshworks, Zendesk and Intercom</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Thu, 23 Sep 2021 06:40:04 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/chatwoot-an-open-source-customer-engagement-tool-that-challenges-freshworks-zendesk-and-intercom-2ce3</link>
      <guid>https://dev.to/muthuannamalai12/chatwoot-an-open-source-customer-engagement-tool-that-challenges-freshworks-zendesk-and-intercom-2ce3</guid>
      <description>&lt;p&gt;Most communications today are carried out using open source customer engagement platforms. Shoppers, businesses, and consumers increasingly use technology as they interact, do business, and shop online. During the pandemic, customers flocked to online channels in droves, driving a digital transformation effort across the industry. To ensure that issues are solved as soon as possible, firms sometimes emphasize communication tools and customer engagement programs.&lt;/p&gt;

&lt;p&gt;Chatwoot is one such customer engagement platform that not only focused on building relations with customers through live-chat, automated bots but collaborating with agents in different departments. If you are looking for an open source alternative to Zendesk, Salesforce's Service Cloud, Freshworks, or Intercom, then Chatwoot is your go-to option as a client engagement platform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chatwoot-an-open-source-customer-engagement-platform"&gt;
  &lt;/a&gt;
  Chatwoot: An open source customer engagement platform
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NkxP75j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5eouxbskb1j1rwoizr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NkxP75j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5eouxbskb1j1rwoizr.png" alt="chatwoot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Founded in 2017, Chatwoot was developed by Pranav Raj S and other co-founders as a proprietary tool for customer support on social channels. While Chatwoot in its original form didn't quite start as intended, the scenario changed after stringent privacy regulations adopted by countries. The team decided to release the system as open source in 2019 before creating a new company and also made it to YC's winter 2021 season.&lt;/p&gt;

&lt;p&gt;With the Chatwoot platform, businesses can connect their social networks, email and messaging apps - like Facebook, Twitter, and WhatsApp - in a central inbox. From here, every member of the company has access to all previous communications and can pick up where the last one left off. Additionally, Chatwoot provides you with a live chat tool, native mobile apps, and pre-built integrations with third-party platforms, such as Shopify, Stripe, and chatbot tools such as Rasa and DialogFlow. Moreover, you can share an inbox for collaboration purposes, utilize live chat tools, and integrate your Calendly, Slack, or FullContact accounts with Chatwoot to ensure efficient workarounds.&lt;/p&gt;

&lt;p&gt;Moreover, Chatwoot’s API makes it possible for customers to build their own communication channels. Chatwoot, as an open source CRM platform, ensures that the community stands beside them. With investments coming from Lambda School’s CEO, Austen Allred, and a $1.6Mn seed funding via Goat Capital, Y Combinator, Uncorrelated Ventures, and Hack Venture Capital, Chatwoot has raised bars high in the customer engagement field.&lt;/p&gt;

&lt;p&gt;Chatwoot has now expanded its user base via open source technology and businesses of all sizes can access and use solutions, regardless of their size, without having to be concerned about privacy issues. Chatwoot's features and add-ons are competitive with those offered by Zendesk and Salesforce.&lt;/p&gt;

&lt;p&gt;However, Chatwoot might have rivals in the field. YC fellow Papercups claims to be an "open source" alternative to Intercom, although its current focus seems to be on live chat. As for Chatwoot, it supports most of the channels customers would like to stay in touch with a business through, including Facebook, Twitter, WhatsApp, Instagram, and email. Businesses can even create customized channels through an API, ensuring enough space for them to customize the workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aviyel.com/post/805/chatwoot-an-open-source-customer-engagement-tool-that-challenges-freshworks-zendesk-and-intercom"&gt;More Reading…&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
