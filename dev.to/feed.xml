<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Angular Material 12 Image upload with Preview example</title>
      <author>Tien Nguyen</author>
      <pubDate>Wed, 30 Jun 2021 03:47:16 +0000</pubDate>
      <link>https://dev.to/tienbku/angular-material-12-image-upload-with-preview-example-44cd</link>
      <guid>https://dev.to/tienbku/angular-material-12-image-upload-with-preview-example-44cd</guid>
      <description>&lt;p&gt;In this tutorial, I will show you way to build (Multiple) Image upload and Preview example with Web API/Rest API using Angular Material 12, FormData and Progress Bar.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/angular-material-12-image-upload-preview/"&gt;https://bezkoder.com/angular-material-12-image-upload-preview/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;We will create an Angular Material 12 (Multiple) Image upload with Preview application in that user can:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;see the preview of images that will be uploaded&lt;/li&gt;
    &lt;li&gt;see the upload process (percentage) of all uploading images&lt;/li&gt;
    &lt;li&gt;view all uploaded images&lt;/li&gt;
    &lt;li&gt;download image by clicking on the file name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are screenshots of our React App:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before upload:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3w2t9EzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2owppefrysb8wo9a36lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3w2t9EzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2owppefrysb8wo9a36lb.png" alt="angular-material-12-image-upload-preview-example-before-upload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When Upload is done:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFi5D0Rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qncnt9mwbwp3gbqrbb1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFi5D0Rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qncnt9mwbwp3gbqrbb1w.png" alt="angular-material-12-image-upload-preview-example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List of Images Display with download Urls:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slJwUwW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jfqwk1g6yq3oov0v4s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slJwUwW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jfqwk1g6yq3oov0v4s5.png" alt="angular-material-12-image-upload-preview-example-image-list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show status for each image upload:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgUxyigH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ppxuuj7bad4ezebmc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgUxyigH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96ppxuuj7bad4ezebmc4.png" alt="angular-material-12-image-upload-preview-example-upload-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;Angular 12&lt;/li&gt;
    &lt;li&gt;RxJS 6&lt;/li&gt;
    &lt;li&gt;Angular Material 12&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Web API for Image Upload &amp;amp; Storage&lt;/h2&gt;

&lt;p&gt;Here are Rest APIs that we will use Axios to make HTTP requests:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/upload&lt;/td&gt;
&lt;td&gt;upload a File&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/files&lt;/td&gt;
&lt;td&gt;get List of Files (name &amp;amp; url)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/files/[filename]&lt;/td&gt;
&lt;td&gt;download a File&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can find how to implement the Rest APIs Server at one of following posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-express-file-upload/"&gt;Node.js Express File Upload Rest API example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/google-cloud-storage-nodejs-upload-file/"&gt;Node.js Express File Upload to Google Cloud Storage example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-file-upload/"&gt;Spring Boot Multipart File upload (to static folder) example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Angular Material 12 App for Image upload with Preview&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILUPaotg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/envb3ym6bimvqhjouchn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILUPaotg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/envb3ym6bimvqhjouchn.png" alt="angular-material-12-image-upload-preview-example-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me explain it briefly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We import necessary library, components in &lt;em&gt;app.module.ts&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;file-upload.service&lt;/em&gt; provides methods to save File and get Files from Rest Apis Server.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;upload-images.component&lt;/em&gt; contains upload multiple images form, preview, some progress bars, display list of images.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;app.component&lt;/em&gt; is the container that we embed all components.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;index.html&lt;/em&gt; for importing the Font and Icons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more steps and source code, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/angular-material-12-image-upload-preview/"&gt;https://bezkoder.com/angular-material-12-image-upload-preview/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;More Practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-12-spring-boot-file-upload/"&gt;Angular 12 + Spring Boot: File upload example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-12-node-js-file-upload/"&gt;Angular 12 + Node.js: File Upload example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-12-jwt-auth/"&gt;Angular 12 Login and Registration example with JWT &amp;amp; Web Api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-12-crud-app/"&gt;Angular 12 CRUD Application example with Web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/angular-12-form-validation/"&gt;Angular 12 Form Validation example (Reactive Forms)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using Bootstrap: &lt;a href="https://bezkoder.com/angular-12-multiple-image-upload-preview/"&gt;Angular 12 Multiple Images Upload with Preview example&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serverless with Firebase:&lt;br&gt;
&lt;a href="https://bezkoder.com/angular-12-file-upload-firebase-storage/"&gt;Angular 12 Upload File to Firebase Storage example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>AWS Managed ADのユーザーをGoogleに同期する</title>
      <author>ryanc</author>
      <pubDate>Wed, 30 Jun 2021 02:19:42 +0000</pubDate>
      <link>https://dev.to/ryanch79/aws-managed-ad-google-481n</link>
      <guid>https://dev.to/ryanch79/aws-managed-ad-google-481n</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ryanch79/aws-managed-ad-x-aws-sso-google-workspace-2kf8"&gt;AWS Managed AD x AWS SSOでGoogle Workspaceにログインする&lt;/a&gt;の記事で、AWS Managed Microsoft ADとAWS SSOを利用し、Google Workspaceにシングルサインオンする方法を紹介した。&lt;/p&gt;

&lt;p&gt;シングルサインオンをセットアップしただけなので、この時点ではユーザーの同期（プロビジョニング）は行われていない。つまり、AD側でユーザーを作成したり削除したりしたら、Google側でも同じ操作をしてあげなければならない。&lt;/p&gt;

&lt;p&gt;認証はシングルサインオンで行うのでパスワード管理を別々にする必要はないとしても、これじゃ大規模組織のユーザー管理は非現実的だ。なので、ユーザー同期もセットアップしてみる。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
GoogleはGoogle Cloud Directory Sync（GCDS）というツールを提供しているため、これを利用する。&lt;/p&gt;

&lt;p&gt;設定手順はこちらのGoogleのドキュメントの通りでOK。&lt;br&gt;
&lt;a href="https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-synchronizing-user-accounts"&gt;https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-synchronizing-user-accounts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なお、単純に同期を設定する前に、当然ADとGoogleでは設計思想が異なるしユーザー同期においても色々と検討すべきことがある。かなり長いが、こちらの概要のドキュメントをしっかり読んでおくことをおすすめする。&lt;br&gt;
&lt;a href="https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction"&gt;https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
今回は、GCDS専用のEC2インスタンスをt2.mediumでたててそこにC\GCDSインストールした。ユーザー同期用に利用するAD側ユーザー（手順内では「gcds」）は特に管理者権限を与えなくても大丈夫だったので、AWS Managed ADでも特に問題なく利用できる。&lt;/p&gt;

&lt;p&gt;唯一Googleのドキュメントの手順に加えて要検討だったのは「ユーザーのプロビジョニング」→「ユーザー マッピングの構成」の中のユーザーの「Search Rule」だ。&lt;/p&gt;

&lt;p&gt;ここではBase DNを空にしているが、AWS Managed ADはゼロから構築したADとは少しOU構造が異なるので、内部システム用アカウント等を誤って拾わないように、Base DNはAWS Managed ADのユーザーに割り当てられたOUのDNを設定した。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wed64I8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew8nyo4caeqod8mrcvgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wed64I8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ew8nyo4caeqod8mrcvgw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※今回は、NETBIOS名「CREATIVE」を指定しているので、DNは「OU=CREATIVE,DC=your-domain,DC=com」という感じになっている&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
DNの書き方が分からない人は、こういうやりかたで確認できる。&lt;/p&gt;

&lt;p&gt;Active Directory Users and Computersの管理画面から、Advanced Features（詳細設定）を表示させるよう設定する。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjD19fdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ao27p7rg2no36tb45sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjD19fdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ao27p7rg2no36tb45sw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Managed ADで管理されるOUがNETBIOS名で表示されているはずなので（この例では「CREATIVE」）、これを右クリックしてプロパティを表示。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxarBGT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvxl6lfq6ai4hrz9lomn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxarBGT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvxl6lfq6ai4hrz9lomn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attribute Editorタブで、&lt;code&gt;distinguishedName&lt;/code&gt;を探して、その値を控えればそれがDNだ。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2rQy-I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntg254egrqnj2kt9drka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2rQy-I9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntg254egrqnj2kt9drka.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
そんなこんなで、GCDSの設定も終わり、AD側で新たに作成したユーザーが問題なくGoogleにも作成されたことを確認できた。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oz1vNf8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uopkindmgnj58wv9acbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oz1vNf8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uopkindmgnj58wv9acbe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとはこれをまたドキュメントの手順通りに定期実行されるように設定すれば、自動化完了。&lt;/p&gt;

</description>
      <category>aws</category>
      <category>activedirectory</category>
      <category>google</category>
    </item>
    <item>
      <title>Reason for Developing in GO </title>
      <author>Abdullah Adeel (AB)</author>
      <pubDate>Wed, 30 Jun 2021 02:04:55 +0000</pubDate>
      <link>https://dev.to/abdadeel/reason-for-developing-in-go-5g0c</link>
      <guid>https://dev.to/abdadeel/reason-for-developing-in-go-5g0c</guid>
      <description>&lt;p&gt;GO also know as  &lt;a href="https://golang.org/"&gt;golang&lt;/a&gt;  is a statically typed and compiled programming language baked by three of the google developers to mainly solve some of google's internal problems. Those three names are &lt;strong&gt;Robert Griesemer&lt;/strong&gt;, &lt;strong&gt;Robe Pike&lt;/strong&gt;, and &lt;strong&gt;Ken Thompson&lt;/strong&gt;. After two years of planning and development, these guys came up with an open-source language in 2009 known as &lt;strong&gt;GO&lt;/strong&gt;. At the time of release, GO was only available for macOS and Linux but in few months, windows release also rolled out. Since its release, GO has gained a lot of attention due to its feature pack nature and simple but effective syntax.&lt;/p&gt;

&lt;p&gt;Whoops! Let's look at some technical words from the above paragraph and explain them a little bit 😸&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hLE84j8EJwMT2aNHHp/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hLE84j8EJwMT2aNHHp/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#statically-typed"&gt;
  &lt;/a&gt;
  Statically Typed
&lt;/h3&gt;

&lt;p&gt;What is statically typed means?&lt;br&gt;
Statically typed means that the variable we define while writing the program is explicitly declared. Unlike dynamically typed language like &lt;code&gt;python&lt;/code&gt; where you define the variable like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;                       &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"code with AB"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we don't need to tell the python that we are going to assign a string to the &lt;code&gt;name&lt;/code&gt; variable.&lt;br&gt;
But In golang, we tell the compiler that this variable that I going to initialize is going to have a string data type store inside it. The syntax is like this👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;                    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"code with AB"&lt;/span&gt;
                    &lt;span class="c"&gt;// short-hand syntax: go compiler will automatically  infer the type of variable&lt;/span&gt;
                    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"code with AB"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compiled-language"&gt;
  &lt;/a&gt;
  Compiled Language
&lt;/h3&gt;

&lt;p&gt;This means that the go compiler first converts all the code to the low-level machine code and then runs that low-level code which is much more efficient and fast ⚡.&lt;/p&gt;




&lt;p&gt;Below are some of the reasons/characteristics of GO that make it so loveable and why you should also give it a chance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-evolved-and-ready-for-modern-challenges"&gt;
  &lt;/a&gt;
  1) Evolved and Ready for Modern Challenges
&lt;/h2&gt;

&lt;p&gt;GO is like a hot kid in the market with all the latest features needs to face modern problems in almost every field. The main reason is that GO is a comparatively new language. Programming languages like C &amp;amp; C++ which was developed in '90s could not quite evolve with the modern complexities of the systems. GO solves all of the same problems with much simpler syntax ( which mean less development time) with almost the same performance which leads to the next point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-faster-development"&gt;
  &lt;/a&gt;
  2) Faster Development
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, programming languages like C &amp;amp; C++ have complex syntax to write which ultimately leads to harder maintenance and longer development time. GO solves these problems without compromising much on the performance side of things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ease-of-programming-and-efficiency"&gt;
  &lt;/a&gt;
  3) Ease of Programming and Efficiency
&lt;/h2&gt;

&lt;p&gt;Before GO, the developer had to choose one of two given options 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast Execution&lt;/li&gt;
&lt;li&gt;Fast Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But with GO, developers can get the best of both worlds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-support-for-concurrency-amp-network-communication"&gt;
  &lt;/a&gt;
  4) Support for Concurrency  &amp;amp; Network Communication
&lt;/h2&gt;

&lt;p&gt;As time passed, computers got more and more powerful to a point where there are virtually multiple working processors in a single processor. This urges developers to write code that can utilize all of those multi-cors and deliver the product that can do things significantly faster utilizing the resources more efficiently. Network communication nowadays has become quite crucial in modern web development so that inter-server communications can be smoother. This is the main reason that GO is loved by the web development community to develop beefy backends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-memory-management-support"&gt;
  &lt;/a&gt;
  5) Memory Management Support
&lt;/h2&gt;

&lt;p&gt;Go has a built-in memory management system, which takes care of all the problems like &lt;code&gt;memory leaks&lt;/code&gt;. In older programming languages like C &amp;amp; C++, the developer has to take care of all the memory management, but GO takes that part away by implementing things like [garbage collection](&lt;a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&lt;/a&gt; and  &lt;a href="https://en.wikipedia.org/wiki/Reflective_programming"&gt;reflection capability&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;GO was developed to solve modern problems. It gives the developer ability to write efficient and secure pieces of code in significantly less amount time without sacrificing much of the performance side. GO has been used by big large corporations and tech companies to manage different things serving millions of users per second which proves the abilities of GO. But like every other programming language, GO has its own cons. But I truly believe that you should at least give it a try once. You can try it here 👉 &lt;a href="https://play.golang.org/p/MAohLsrz7JQ"&gt;Open GO playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the link if you want to get to know the other side of things that why my most favorite tech company ditched &lt;code&gt;GO&lt;/code&gt; for &lt;code&gt;RUST&lt;/code&gt; 👇&lt;/p&gt;

&lt;p&gt;▶  &lt;a href="https://blog.discord.com/why-discord-is-switching-from-go-to-rust-a190bbca2b1f"&gt;Take me to article&lt;/a&gt; &lt;/p&gt;

</description>
      <category>go</category>
      <category>googledevelopers</category>
      <category>efficiency</category>
    </item>
    <item>
      <title>Install Java JDK in Ubuntu 20.04LTS </title>
      <author>Arjun Gautam</author>
      <pubDate>Wed, 30 Jun 2021 01:51:24 +0000</pubDate>
      <link>https://dev.to/arjungautam/install-java-jdk-in-ubuntu-20-04lts-1357</link>
      <guid>https://dev.to/arjungautam/install-java-jdk-in-ubuntu-20-04lts-1357</guid>
      <description>&lt;h2&gt;
  &lt;a href="#go-through-this-youtube-video"&gt;
  &lt;/a&gt;
  Go through this youtube video
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=KiThrZiEE9g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emWLIbDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/KiThrZiEE9g/0.jpg" alt="IMAGE ALT TEXT HERE"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>ubuntu</category>
      <category>performance</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Basic Things you need to know about managing a Linux server</title>
      <author>Wildan Mubarok</author>
      <pubDate>Wed, 30 Jun 2021 00:58:37 +0000</pubDate>
      <link>https://dev.to/willnode/5-basic-things-you-need-to-know-about-managing-a-linux-server-12fh</link>
      <guid>https://dev.to/willnode/5-basic-things-you-need-to-know-about-managing-a-linux-server-12fh</guid>
      <description>&lt;p&gt;As a web developer, you may come up with the situation of needing to set up a Virtual Machine to host your website online. While it's great that we have a variety of managed cloud services to lift this complexity for us, it's not a bad thing if we want to learn about some basic knowledge of setting up your own server. In fact, I come across this situation, and having this kind of knowledge is essential to me, especially when running a small project all by yourself or run with a tight budget.&lt;/p&gt;

&lt;p&gt;Without further ado, let's start:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-a-web-hosting-control-panel"&gt;
  &lt;/a&gt;
  1. Use a web hosting control panel
&lt;/h2&gt;

&lt;p&gt;This is true, especially if you don't familiar with the Linux tools or come from a Windows background. There's a lot of setup and maintenance hurdles that come when you start to manage your own server. And definitely, you don't want to memorize all the things using only the terminal! So to lift this up, we need to install this piece of software.&lt;/p&gt;

&lt;p&gt;While there are some popular options like cPanel or Plesk, it comes with string (price) attached. So we need to use the free one, and &lt;a href="https://www.virtualmin.com/"&gt;Virtualmin&lt;/a&gt;, to me, is just perfect.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.virtualmin.com/documentation/installation/automated"&gt;installation step&lt;/a&gt; is easy too. I won't cover them all here but all it needs to do is run this command (as root):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget http://software.virtualmin.com/gpl/scripts/install.sh
&lt;span class="nb"&gt;chmod &lt;/span&gt;0700 ./install.sh
sh ./install.sh &lt;span class="nt"&gt;--bundle&lt;/span&gt; LEMP
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you see that? I put &lt;code&gt;--bundle LEMP&lt;/code&gt; because I prefer to install Nginx over Apache. Whatever the choice is up to you but overall Nginx is way faster than Apache because of its simple configuration and event-driven, and you need those (the webserver) anyway to let it handle the heavy lifting of managing your app processes. &lt;/p&gt;

&lt;p&gt;I'll discuss these later but one thing you need to know is installing Virtualmin or any of these &lt;strong&gt;will destroy any existing setup on your server&lt;/strong&gt; so only install it when your VM or server is a fresh install.&lt;/p&gt;

&lt;p&gt;But then, what happens after the installation? Head to &lt;code&gt;https://&amp;lt;Your IP address&amp;gt;:10000&lt;/code&gt; to open Webmin portal (yes, Virtualmin is part of Webmin). &lt;/p&gt;

&lt;p&gt;You may encounter some SSL issues but skip it, it's fine. Login with root account and password that &lt;a href="https://www.virtualmin.com/documentation/installation/automated#toc-setting-a-root-password-KTINPhGW"&gt;you've set up&lt;/a&gt;, then follow the initial setup and create a new domain. Voila, you're done! No need to learn the hassle of creating a non-root user in a terminal and tries to synchronize everything overnight!&lt;/p&gt;

&lt;p&gt;Sounds good? Let's continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-know-how-to-run-your-app-properly"&gt;
  &lt;/a&gt;
  2. Know how to run your app properly
&lt;/h2&gt;

&lt;p&gt;Chances are you already know how to start your own local server. You may do the same thing on your VM but it will be a bad, bad idea. For an online server that needs to run 24 hours 7 days a week, you need some sort of proxy that protects your app processes from randomly crashing due to fatal crashes or high flood of traffic, and this proxy is what Nginx (or Apache) really does. What these proxies really do is they're run the actual HTTP(S) port on 80 and 443 and forward any incoming traffic to a local port or socket which your app really listens to. Web proxies also really good at dividing traffic based on domains (like domain A goes to this app then domain B goes to that app) and reporting or logging crashes of your app. Web proxies are just that awesome and you need to understand how to configure them properly, even though Virtualmin will already do the heavy lifting for you.&lt;/p&gt;

&lt;p&gt;After the installation of Nginx that comes from Virtualmin, you might be surprised that, it already comes with PHP support by default, like the usual way web hosting does. You can see how NginX config on a specific domain looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {
    server_name example.com;
    listen 1.2.3.4;
    listen 1.2.3.4:443 ssl;
    root /home/username/public_html;
    index index.html index.htm index.php;
    access_log /var/log/virtualmin/example.com_access_log;
    error_log /var/log/virtualmin/example.com_error_log;
    location ~ \.php(/|$) {
        try_files $uri =404;
        fastcgi_pass localhost:8001;
    }   
    ssl_certificate /home/username/ssl.combined;
    ssl_certificate_key /home/username/ssl.key;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that it has the domain you want to listen to &lt;code&gt;example&lt;/code&gt;, the server IP to listen with &lt;code&gt;1.2.3.4&lt;/code&gt;, where the base directory is &lt;code&gt;/home/username/public_html&lt;/code&gt; and so on. What essential in NginX is that by default it only serves as a static web server. To make most of the features it gives you need to understand additional configs, like the &lt;code&gt;fastcgi_pass&lt;/code&gt; to enable dynamic processing on &lt;code&gt;.php&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;PHP is great, but not for all of us. What about running Node.js or Python apps? You might be tempted to use &lt;code&gt;proxy_pass&lt;/code&gt; but it won't handle the app startup and crashes for us. Luckily we have a better option: &lt;a href="https://www.phusionpassenger.com/"&gt;Phusion Passenger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is that? That is the app server, which able to manage and automatically run Node.JS, Python, Ruby, well, all kinds of server apps you might need to run in your server, and it has an awesome integration with Nginx. &lt;/p&gt;

&lt;p&gt;After you follow &lt;a href="https://www.phusionpassenger.com/docs/tutorials/installation/node/"&gt;the installation step&lt;/a&gt;, all you need to do is add these options in &lt;a href="http://nginx.org/en/docs/beginners_guide.html"&gt;NginX config&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    root /home/username/public_html/public;
    passenger_enabled on;
    # for easier debugging!
    passenger_friendly_error_pages on;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will magically find any &lt;a href="https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_startup_file"&gt;relevant startup file&lt;/a&gt; (like &lt;code&gt;app.js&lt;/code&gt; or &lt;code&gt;passenger_wsgi.py&lt;/code&gt;) in the parent root directory (&lt;code&gt;public_html&lt;/code&gt;) and boot the relevant process (of course, you need to already do have Node.js or whatever programming language you want to run with and already installing &lt;code&gt;node_modules&lt;/code&gt; or whatever code dependencies your app need beforehand).&lt;/p&gt;

&lt;p&gt;Can you run your app now? Great. Let's continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-overcoming-dns-and-ssl-problems"&gt;
  &lt;/a&gt;
  3. Overcoming DNS (and SSL) problems
&lt;/h2&gt;

&lt;p&gt;Your app runs on an IP public address now. Great! But nobody (even Google) wants to remember your IP address. You need to buy a domain yourself. I won't point out what's to recommend on this one so go buy a domain from whatever web hosting service you're already familiar with. But what I need to tell you is that after you buy a domain, you need to point out that domain to your server's IP address. This is done under "DNS Management" and in there, you can insert your server IP address using A record (and AAAA if care about IPv6), and that's it! &lt;/p&gt;

&lt;p&gt;But wait. There's more...&lt;/p&gt;

&lt;p&gt;DNS caches everything under the TTL (Time to Live), and by default for most services, it's set for about 4 hours (14400). You certainly don't want to wait 4 hours to just be able to see your new shiny website, right?&lt;/p&gt;

&lt;p&gt;While you can just bypass DNS using &lt;a href="https://man7.org/linux/man-pages/man5/hosts.5.html"&gt;hosts file&lt;/a&gt;, it's much better if you can go to &lt;a href="https://dns.google/"&gt;Google DNS resolver&lt;/a&gt; and see if Google itself picks up your new domain. It usually works for the first time without flushing their cache. (if it doesn't work, well something may wrong with your registrar?!).&lt;/p&gt;

&lt;p&gt;After you check it, if Google DNS resolver sees your IP address now but your device still won't pick up it, you can set your device DNS resolver to 8.8.8.8 and 8.8.4.4 (the &lt;a href="https://developers.google.com/speed/public-dns"&gt;Google Public DNS&lt;/a&gt;) and after that, it will certainly work. Yay!&lt;/p&gt;

&lt;p&gt;But wait. There's more (again!)...&lt;/p&gt;

&lt;p&gt;You can access your site using http:// but not https://, right? HTTPS is very important nowadays so you can't ignore it. But then, to do that, you need to sign your SSL certificates. I won't go into detail about why it works like that but what I need to tell you is that there's one and only kind of SSL agency there, it's called &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; and it will create a signed SSL certificate for your domain for free. How?&lt;/p&gt;

&lt;p&gt;Assuming you already have a correct configuration in your Nginx, with Virtualmin you can go to &lt;a href="https://www.youtube.com/watch?v=bUe9dJOnUV0"&gt;SSL certificate panel&lt;/a&gt; and send a request to Let's encrypt in a few clicks. Sound simple? Yes, but not just that. You can also make Virtualmin renew your SSL certificate automatically. Awesome, isn't it?&lt;/p&gt;

&lt;p&gt;Now your website should be online and can start gaining users. Congrats!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-understand-memory-management-and-when-to-panic"&gt;
  &lt;/a&gt;
  4. Understand memory management (and when to panic)
&lt;/h2&gt;

&lt;p&gt;It's a regular evening and your server has been running for few weeks. Yet you look at the Virtualmin memory gauges of your server and start wondering. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxMKtEWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gy9gjpdsm44l1tgp0qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxMKtEWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gy9gjpdsm44l1tgp0qf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, this will come in two situations:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#situation-a-your-server-is-wasting-resources"&gt;
  &lt;/a&gt;
  Situation A: Your server is wasting resources
&lt;/h3&gt;

&lt;p&gt;You notice that your server only uses around 40% of memory so you think if you could cut the monthly bill in half by reducing its computing memory. Before it happens, I will tell you: don't do that! unless you're running into a budget problem.&lt;/p&gt;

&lt;p&gt;Even though it seems your system is wasting the excess memory, it's actually not. Linux will always &lt;a href="https://www.linuxatemyram.com/"&gt;use most of your RAM&lt;/a&gt; because of RAM cache. And you might wonder, what's the deal with it?&lt;/p&gt;

&lt;p&gt;Well, most operations on Linux rely heavily on files. The kernel is smart, when a process is done reading or writing a file, it's actually kept temporarily as RAM cache so when another process reads it the next time, it won't wait for the storage disk to actually perform the read, dramatically improving the overall system performance.&lt;/p&gt;

&lt;p&gt;I won't tell more details in this, but that's the whole point. Cutting your free memory will severely decrease the overall performance. Don't reduce it unless you have a problem with budgeting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#situation-b-your-server-is-heating"&gt;
  &lt;/a&gt;
  Situation B: Your server is heating
&lt;/h3&gt;

&lt;p&gt;Some users tell you slower loading times and some error pages show up significantly. How would you confirm what goes wrong? Firstly, you need to check the load. If the load metric is going like tens, it means your server can't keep up the traffic. Then you need to check your memory consumption by going to &lt;a href="https://man7.org/linux/man-pages/man1/free.1.html"&gt;free -m&lt;/a&gt;. The result is probably like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              total        used        free      shared  buff/cache   available
Mem:           1817        1327          67          72         421         268
Swap:             0           0           0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have low memory available, it means your server struggling to find more memory. You can increase the computation memory right now but it would be a bad idea if you actually turn off your VM during high traffic, so what you can do is &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-16-04"&gt;create a swap file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A swap file is basically an additional memory attached to a storage disk. You might think it's a good idea to put a large swap file and suddenly your memory problem would go, but no. Because too much swapping could render the system unstable too.&lt;/p&gt;

&lt;p&gt;A better way to think about a swapfile is like a band-aid. During temporary traffic surges, Linux can put non-essential memory processes to swapfile so the actual memory can better spend on essential programs and frequently used RAM caches. For this to work, I recommend a swapfile about 1 or 2 GB size and &lt;a href="https://linuxhint.com/understanding_vm_swappiness/"&gt;swappiness&lt;/a&gt; around 30. &lt;/p&gt;

&lt;p&gt;But if you have already done these but still has low memory availability, yeah it's time to add more actual memory.&lt;/p&gt;

&lt;p&gt;I talked frequently about memory. While it's the most likely problem during high load, sometimes there's another factor too, like a rogue process running in the background or maybe there's just not enough core counts in your VM. A look at &lt;a href="https://man7.org/linux/man-pages/man1/top.1.html"&gt;top&lt;/a&gt; can help you a lot to diagnose this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-protect-your-server-with-basic-security-and-backup-knowledge"&gt;
  &lt;/a&gt;
  5. Protect your server with basic security and backup knowledge
&lt;/h2&gt;

&lt;p&gt;This is the final piece of advice that I need to tell you, as security and backups are so easy to overlook yet most people don't realize how important it is until it's too late.&lt;/p&gt;

&lt;p&gt;Good basic security of any VM serving the internet is to only allow specific inbound ports like SSH, HTTP(S), and any related port you might use. Most cloud providers already have a firewall config so it's good to use them if available. Or if it isn't you can use &lt;a href="https://firewalld.org/"&gt;firewalld&lt;/a&gt; or &lt;a href="https://linux.die.net/man/8/iptables"&gt;iptables&lt;/a&gt; to safeguard your traffic at kernel level. If you're like me who uses Webmin, you might want to change the port to something else as leaving the default 10000 probably would make it vulnerable to botnets that swarming the internet.&lt;/p&gt;

&lt;p&gt;If you have some memory and computation to spare, it might be a good idea to install software that prevents brute force attacks like &lt;a href="https://www.fail2ban.org/"&gt;Fail2Ban&lt;/a&gt;, or maybe just don't enable password-based login in SSH and disable database remote control when you don't need it.&lt;/p&gt;

&lt;p&gt;And lastly, do a frequent backup, as you probably don't aware of how things can be messed up certainly in the future. The good news is most cloud providers have a way to make a "snapshot" of your VM and allow you to schedule it weekly. It probably cost you an additional pennies but it totally worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;That is a lot of topics I discover. You might think, where do I get all those knowledge? Well, I have some background story that you might want to read, go &lt;a href="https://dev.to/willnode/i-generally-don-t-satisfied-with-all-web-hosting-out-there-2b63"&gt;check it out&lt;/a&gt; :)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>server</category>
      <category>maintenance</category>
    </item>
    <item>
      <title>How I got my first job in tech.</title>
      <author>Heshie Brody</author>
      <pubDate>Wed, 30 Jun 2021 00:33:37 +0000</pubDate>
      <link>https://dev.to/heshiebee/how-i-got-my-first-job-in-tech-6bb</link>
      <guid>https://dev.to/heshiebee/how-i-got-my-first-job-in-tech-6bb</guid>
      <description>&lt;p&gt;As a bootcamp grad(Flatiron School) I constantly get asked how I landed my first job in tech. &lt;/p&gt;

&lt;p&gt;Here's what i've learned from that experience. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-to-jobs-online"&gt;
  &lt;/a&gt;
  Applying to jobs online.
&lt;/h2&gt;

&lt;p&gt;As a recent grad applying to jobs online directly on the company website is almost always a waste of time. Unless you have years of experience or a top tier collage listed on your resume you’ll almost never get an interview, their resume system will almost always reject you.&lt;/p&gt;

&lt;p&gt;I learned this the hard way after applying for almost 150 jobs online and rarely hearing back.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#networking-networking-and-networking"&gt;
  &lt;/a&gt;
  Networking, networking and networking.
&lt;/h2&gt;

&lt;p&gt;Networking is what worked for me, after applying online with no results I turned to my community, friends and schoolmates.&lt;br&gt;
My job at Sitepod came from a high school friend who was working there and they happened to be looking for a full stack Rails developer.&lt;br&gt;
Meetups and job fairs are also really great for making these connections.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It's not 'what' you know but rather 'who' you know"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#get-work-experience-asap"&gt;
  &lt;/a&gt;
  Get work experience ASAP.
&lt;/h2&gt;

&lt;p&gt;As a recent grad, unless you're applying for unpaid internships, recruiters need to really believe in you to give you that first shot since it’s their reputation on the line.&lt;br&gt;
Try to get real world work experience on your resume/LinkedIn asap.&lt;br&gt;
Volunteering for public projects or just building stuff for friends and family will give you that experience to put on your resume, plus you’ll have so much more to talk about when interviewing for that first job.&lt;br&gt;
Make sure to put start and end dates on those freelance gigs and list them as experience on your resume, not projects (Resume Hack...).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-interviews-from-linkedin"&gt;
  &lt;/a&gt;
  Getting interviews from Linkedin
&lt;/h2&gt;

&lt;p&gt;I’ve successfully gotten interviews by direct messaging developers, hiring managers and recruiters.&lt;br&gt;
Try to find people that are close to your network or may have attended the same school etc.&lt;br&gt;
Commenting on recruiter posts is also a great way to get their attention. &lt;br&gt;
Make sure to message only those that have entry level positions listed on their company website or posts so not to waste your time.&lt;br&gt;
Also ensure that those companies are looking for similar technologies to those that you have so as to eliminate any friction. &lt;br&gt;
Many companies give employees the ability to refer people to their available positions which will almost always get you at least a phone call .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#heres-a-template-ive-successfully-used-over-time-when-messaging-recruiters-on-linkedin"&gt;
  &lt;/a&gt;
  Here’s a template i’ve successfully used over time when messaging recruiters on LinkedIn:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi [name],&lt;br&gt;
I saw that you're hiring for software engineering positions in NYC.&lt;br&gt;
I’m currently a full stack web developer with experience in [technologies].&lt;br&gt;
I’m looking for a position in a company like [company name] where I can grow and utilize my skills to the fullest.&lt;br&gt;
I would love it if you can give me a few minutes of your time to get to know each other and see what value I can bring to [company name].&lt;br&gt;
Thanks In Advance!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope this helps!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>watercooler</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>React Native — Fix Blank Flash After Splash Screen</title>
      <author>Aryan Mittal</author>
      <pubDate>Wed, 30 Jun 2021 00:00:31 +0000</pubDate>
      <link>https://dev.to/aryanmittal/react-native-fix-blank-flash-after-splash-screen-3ok5</link>
      <guid>https://dev.to/aryanmittal/react-native-fix-blank-flash-after-splash-screen-3ok5</guid>
      <description>&lt;p&gt;The splash screen is the first view of your React Native app that a potential user sees. Whether they just downloaded the app or are opening it the thousandth time, users are immediately greeted with your splash screen. Therefore, it is of the utmost importance to promote a great user experience around the splash screen.&lt;/p&gt;

&lt;p&gt;The concept of the splash screen was created as a placeholder to display while the app is loading. This makes phones feel responsive and creates the illusion that the app loads instantly. While this usually works out of the box for native iOS and Android applications, apps using React Native require additional steps during the loading process. This means loading your JavaScript bundle, initializing the JS-Native bridge and loading React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"As your App Bundle grows in size, you may start to see a blank screen flash between your splash screen and the display of your root application view."&lt;br&gt;
— React Native documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Users’ phones aren’t aware of the additional loading time, so the splash screen disappears before React and the JavaScript bundle are loaded, and a blank flash occurs. Although the flash is brief, it’s a terrible user experience and it can feel disorienting.&lt;/p&gt;

&lt;p&gt;Thankfully, there’s an easy fix! You can add the following code to AppDelegate.m in order to keep your splash screen displayed during the transition:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DOOkVmA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md4b5dqc9vj338i7xq9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DOOkVmA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md4b5dqc9vj338i7xq9h.png" alt='// Place this code after "[self.window makeKeyAndVisible]" and before "return YES;"&amp;lt;br&amp;gt;
  UIStoryboard *sb = [UIStoryboard storyboardWithName:@"LaunchScreen" bundle:nil];&amp;lt;br&amp;gt;
  UIViewController *vc = [sb instantiateInitialViewController];&amp;lt;br&amp;gt;
  rootView.loadingView = vc.view;'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now rebuild your app and enjoy the seamless splash screen!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>ios</category>
    </item>
    <item>
      <title>List of C# 9 features</title>
      <author>Andrei Fedotov</author>
      <pubDate>Tue, 29 Jun 2021 23:48:29 +0000</pubDate>
      <link>https://dev.to/andreisfedotov/list-of-c-9-features-1eao</link>
      <guid>https://dev.to/andreisfedotov/list-of-c-9-features-1eao</guid>
      <description>&lt;h2&gt;
  &lt;a href="#toplevel-statements"&gt;
  &lt;/a&gt;
  Top-level statements
&lt;/h2&gt;

&lt;p&gt;The very simple program on C# looks like the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloWorld&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but with C# 9 we can make it simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#targettyped-object-creation"&gt;
  &lt;/a&gt;
  Target-Typed Object Creation
&lt;/h2&gt;

&lt;p&gt;Let's imagine we have a class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usually we create objects like follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With C# we can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;book3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"A1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initonly-setters"&gt;
  &lt;/a&gt;
  Init-only Setters
&lt;/h2&gt;

&lt;p&gt;Consider we have a class &lt;code&gt;Book&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can set values during the initialization. At the same time we can change the values as far as we have a setter for every field as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine a situation where we want only set values during the initialization and we want to restrict them after initialization. In &lt;code&gt;C# 9&lt;/code&gt; &lt;code&gt;Init-only&lt;/code&gt; feature comes into play:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// compile error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#relational-amp-logical-patterns"&gt;
  &lt;/a&gt;
  Relational &amp;amp; Logical Patterns
&lt;/h2&gt;

&lt;p&gt;Relational patterns permit the programmer to express that an input value must satisfy a relational constraint when compared to a constant value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt; &lt;span class="nf"&gt;Postage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;6.99&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;5.99&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;2.99&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="p"&gt;};}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#records"&gt;
  &lt;/a&gt;
  Records
&lt;/h2&gt;

&lt;p&gt;We have a class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;          &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's imagine we want to be able to create a book. We can do it as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Title1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Author1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and also we want to serialize the object and de-serialize&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JsonSerializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JsonSerializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isEqual&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;book2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"book == book2: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In console we'll see that de-serialized book is not the same book that was serialized. How can we make them the same? We can override equals operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;==(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we override &lt;code&gt;==&lt;/code&gt; operator we also have to override &lt;code&gt;!-&lt;/code&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;!=(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we have not done anything to compare our object yet, so we have to override &lt;code&gt;Equals&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we need to override &lt;code&gt;GetHashCode&lt;/code&gt; and &lt;code&gt;ToString&lt;/code&gt; methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HashCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we have to make our class implement &lt;code&gt;IEquatable&amp;lt;T&amp;gt;&lt;/code&gt; interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEquatable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we have to write a bunch of code for just one simple action. Full class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEquatable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;{&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;==(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;       &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;!=(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;       &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;       &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;       &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HashCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;Console.WriteLine($"book == book2: {isEqual}");&lt;/code&gt; will output &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a lot of boilerplate code.&lt;/p&gt;

&lt;p&gt;Moreover, if we add a new field we will have to update every method.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;C# 9&lt;/code&gt; we can use the &lt;code&gt;record&lt;/code&gt; type for the same behavior. It allows making behavior for classes as if they were structures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="nf"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extended-partial-methods"&gt;
  &lt;/a&gt;
  Extended partial methods
&lt;/h2&gt;

&lt;p&gt;Now we can use modifiers and return values for partial methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt; &lt;span class="n"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt; &lt;span class="nf"&gt;SetPrice&lt;/span&gt;&lt;span class="p"&gt;();}&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt; &lt;span class="nf"&gt;SetPrice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#covariant-returns"&gt;
  &lt;/a&gt;
  Covariant returns
&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;C# 9&lt;/code&gt; we can return derived types in overridden methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CollectionBook&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Edition&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookService&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="nf"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;();}&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CollectionBookService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BookService&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;CollectionBook&lt;/span&gt; &lt;span class="nf"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CollectionBook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code: &lt;a href="https://github.com/platinum-team/tech-talk-csharp9-features"&gt;https://github.com/platinum-team/tech-talk-csharp9-features&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Design: Ports and Adapters</title>
      <author>William Santos</author>
      <pubDate>Tue, 29 Jun 2021 23:36:36 +0000</pubDate>
      <link>https://dev.to/wsantosdev/design-ports-and-adapters-48mi</link>
      <guid>https://dev.to/wsantosdev/design-ports-and-adapters-48mi</guid>
      <description>&lt;p&gt;Olá!&lt;/p&gt;

&lt;p&gt;Este é mais um artigo da seção &lt;strong&gt;Design&lt;/strong&gt;, e nele falaremos sobre um padrão muito útil chamado &lt;strong&gt;Ports and Adapters&lt;/strong&gt;, também conhecido como &lt;strong&gt;Arquitetura Hexagonal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vamos lá!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%A9-o-padr%C3%A3o-ports-and-adapters"&gt;
  &lt;/a&gt;
  O qué o padrão Ports and Adapters?
&lt;/h2&gt;

&lt;p&gt;É um padrão proposto por Alistair Cockburn para reduzir o acoplamento entre as diferentes camadas de um sistema, aumentando assim sua testabilidade.&lt;/p&gt;

&lt;p&gt;O padrão recebe este nome por conta da forma como uma aplicação que o utilize interage com o mundo externo: a partir de ports (portas) e adapters (adaptadoes).&lt;/p&gt;

&lt;p&gt;Portas são um meio de comunicação com o mundo externo à aplicação (que você pode entender como seu domínio), e podem ser de dois tipos: primárias e secundárias.&lt;/p&gt;

&lt;p&gt;As portas primárias, representam as entradas da aplicação, conhecem os contratos do domínio e são oferecidas, geralmente, como casos de uso ou serviços de aplicação. Essas portas costumam ser envolvidas por componentes que conversam com o mundo exterior diretamente, e que fazem uma eventual tradução entre o formato de sua própria entrada e o formato do domínio. Esses componentes que envolvem essas portas primárias são os chamados adaptadores, dada a sua função de interagir com o mundo externo suprindo o domínio com os dados que este demanda.&lt;/p&gt;

&lt;p&gt;Quando o padrão foi proposto, foi pensado que as portas primárias se conectariam ou à camada de apresentação da aplicação, ou seja, a camada de interação com o usuário, ou a outras aplicações que se integrariam à aplicação em questão.&lt;/p&gt;

&lt;p&gt;Soa confuso? Vamos a um exemplo simples.&lt;/p&gt;

&lt;p&gt;Imagine que sua aplicação é um agendador de tarefas que deve aceitar a criação de tarefas por meio de uma API Web. A porta de entrada, se implementada como um caso de uso, teria a seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateTaskUseCase&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICreateTaskUseCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IMyTaskDataAccess&lt;/span&gt; &lt;span class="n"&gt;_dao&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyTask&lt;/span&gt; &lt;span class="nf"&gt;CreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;_dao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para utilizar este caso de uso, a Web API o envolverá por meio de injecão de dependência, em um controller que o invocará mediante uma requisição, como no exemplo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateTaskController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ICreateTaskUseCase&lt;/span&gt; &lt;span class="n"&gt;_useCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CreateTaskController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ICreateTaskUseCase&lt;/span&gt; &lt;span class="n"&gt;useCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_useCase&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IActionResult&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FromBody&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;CreateTaskRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;try&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_useCase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DueDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateTaskException&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;BadRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="k"&gt;catch&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;InternalServerError&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare, então, que temos uma porta primária, o caso de uso de criação da tarefa e posterior persistência, e um adaptador correspondente, o controller, que abastecerá o domínio da aplicação com os dados enviados pelo consumidor da API Web.&lt;/p&gt;

&lt;p&gt;Já as portas secundárias se apresentam de maneira distinta. Elas costumam ser interfaces que expõem um contrato demandado pelo domínio para se comunicar com o mundo externo visando, ou a saída de dados proveniente de seu processamento, ou a satisfação de alguma dependência do mundo externo que, eventualmente, uma porta primária venha a ter (como, por exemplo, o consumo de outra aplicação).&lt;/p&gt;

&lt;p&gt;Um exemplo de porta secundária é a interface &lt;code&gt;IMyTaskDataAccess&lt;/code&gt; usada pelo &lt;code&gt;CreateTaskUseCase&lt;/code&gt; para inserir no banco de dados uma tarefa recém-criada. Esta interface é definida na aplicação (domínio) e implementada por quem a utiliza – em nosso caso de exemplo a API Web, sendo esta implementação um adaptador.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#por-que-usar-ports-and-adapters"&gt;
  &lt;/a&gt;
  Por que usar Ports and Adapters?
&lt;/h2&gt;

&lt;p&gt;A maior vantagem do uso do padrão é o isolamento do domínio, que leva a uma maior testabilidade.&lt;br&gt;
Observando o exemplo acima, podemos ver que é possível testar nosso caso de uso muito facilmente, da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateTaskUseCaseTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CreateTaskSuccessfully&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Arrange&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dao&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InMemoryMyTaskDatabase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Implementa IMyTaskDataAccess&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CreateTaskUseCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dao&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Act&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddDays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="c1"&gt;//Assert&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddDays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DueDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note que, uma vez que o teste é realizado contra o caso de uso, nossa porta primária, e utilizando um mock para a porta secundária, não precisamos nos preocupar com a forma como se dará a entrada de dados no domínio, nem mesmo com o mecanismo de persistência para a tarefa criada. Desta forma, temos nosso domínio isolado, e uma forma de atestar o funcionamento de sua lógica sem a exigência de qualquer dependência externa.&lt;/p&gt;

&lt;p&gt;Ou seja, tanto do ponto de vista dos testes, quanto da execução da aplicação, não há diferença se a entrada de dados vai se dar por uma API Web, um dispositivo móvel, terminal ou pelo consumo de uma fila. Da mesma forma, não importa qual banco de dados está sendo usado, se está em uso ou não algum ORM, qual o mecanismo de mensageria utilizado para publicar eventos ou disparar comandos, nem mesmo qual serviço está sendo usado para enviar e-mails de notificação.&lt;/p&gt;

&lt;p&gt;Tudo o que a aplicação conhece são suas portas, e cabe a quem for consumir a aplicação implementar os adaptadores correspondentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quando-usar-ports-and-adapters"&gt;
  &lt;/a&gt;
  Quando usar Ports and Adapters
&lt;/h2&gt;

&lt;p&gt;Como já sabemos, nenhuma solução é adequada a todos os cenários – e, claro, isso se aplica a este padrão da mesma forma.&lt;/p&gt;

&lt;p&gt;Em um cenário orientado a serviços, onde cada serviço representa um contexto delimitado da aplicação, é uma ótima opção – sim, DDD faz um casamento muito bom o padrão por ser orientado a domínio!&lt;/p&gt;

&lt;p&gt;Mesmo não utilizando DDD, serviços que representem módulos de uma aplicação também se beneficiam deste padrão, uma vez que seu escopo reduzido torna mais facilmente mapeáveis as entradas e saídas possíveis.&lt;/p&gt;

&lt;p&gt;Um bom critério para saber se o uso do padrão faz sentido é o número de casos de uso que um domínio apresenta, e quais as saídas (ou dependências) possíveis para cada um.&lt;br&gt;
No caso de exemplo acima, de agendamentos de tarefas, temos poucos casos de uso -- a criação da tarefa, seu reagendamento e seu cancelamento, por exemplo. Enquanto isso, temos apenas uma saída, a persistência de seu estado.&lt;/p&gt;

&lt;p&gt;É claro que, no mundo real, aplicações podem ser mais complexas que nosso simples agendador de tarefas mas, de todo modo, avaliar a quantidade de casos de uso e saídas segue sendo um bom parâmetro. Ou seja, no final das contas, grosso modo, quanto mais alto o número de possíveis portas, menor a viabilidade do emprego do padrão.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-por-que-arquitetura-hexagonal"&gt;
  &lt;/a&gt;
  Mas, por que Arquitetura Hexagonal?
&lt;/h2&gt;

&lt;p&gt;Este é um ponto bastante interessante. A intenção de Cockburn quando usou um hexágono para ilustrar seu padrão era a de romper com a visão vertical proposta pelo estilo de organização em camadas, deixando de lado a aparente hierarquia que ela apresenta (Apresentação -&amp;gt; Negócio -&amp;gt; Infraestrutura) por um modelo que sugere a centralidade do domínio, e superfícies de contato com o mesmo igualmente relevantes. &lt;br&gt;
Ou seja, cada hexagono que representa uma aplicação, representa um domínio cercado por componentes que com ele interagem. Se pensarmos em várias aplicações integradas, teremos um mapa com diversos hexágonos onde cada um oferece uma superfície de contato para outro através de seus diferentes lados.&lt;/p&gt;

&lt;p&gt;Interessante. Não?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;O padrão Ports and Adapters é muito útil para elevar a testabilidade do domínio, e é flexível o bastante para ser combinado com outros padrões de modo a satisfazer as necessidades da aplicação. Seu fit ideal é com pequenas aplicações ou serviços, mas pode ser usado em casos mais complexos caso se perceba que seu custo é superado pelos ganhos que oferece.&lt;/p&gt;

&lt;p&gt;Como de costume, segue um exemplo de código no &lt;a href="https://github.com/wsantosdev/new-order"&gt;Github&lt;/a&gt;, com um exemplo bastante simples de integração entre três serviços. Todos os serviços implementam o padrão, e são acompanhados de casos de teste para demonstrar como a testabilidade do domínio é beneficiada. Claro que, por ser um exemplo, os casos de teste serão muito simples, mas entendemos ser o suficiente para demonstrar o valor do padrão.&lt;/p&gt;

&lt;p&gt;Gostou? Me deixe saber pelos indicadores. Tem alguma dúvida ou consideração? Deixe um comentário por aqui ou em alguma de minhas redes sociais.&lt;/p&gt;

&lt;p&gt;Muito obrigado por chegar até aqui, e até a próxima!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Referências&lt;/strong&gt;&lt;br&gt;
Alistair Cockburn - &lt;a href="https://alistair.cockburn.us/hexagonal-architecture/"&gt;Hexagonal Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>architecture</category>
      <category>design</category>
      <category>programming</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Using Docker in development the right way</title>
      <author>Leandro Proença</author>
      <pubDate>Tue, 29 Jun 2021 23:32:02 +0000</pubDate>
      <link>https://dev.to/leandronsp/using-docker-in-development-the-right-way-15j3</link>
      <guid>https://dev.to/leandronsp/using-docker-in-development-the-right-way-15j3</guid>
      <description>&lt;p&gt;&lt;em&gt;If you are not proficient in Docker, or that topics like containers and virtual machines are still a bit "fuzzy", have problems working with Docker in development but want to learn and work using containers, this article is for you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Few weeks ago I wrote an article on &lt;a href="https://dev.to/leandronsp/thinking-like-containers-5744"&gt;Thinking like containers&lt;/a&gt;, where I did an introduction on containers and explained the problem that containers solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-usage"&gt;
  &lt;/a&gt;
  Production usage
&lt;/h2&gt;

&lt;p&gt;The most popular usage of containers is at &lt;em&gt;production environments&lt;/em&gt;, because the team can pack up the application into an image containing the runtime and all the needed dependencies. &lt;/p&gt;

&lt;p&gt;Such a process helps to deploy the application in isolation and makes it &lt;em&gt;server-agnostic&lt;/em&gt;, meaning that it can technically be easily deployed at any cloud provider in the world. &lt;/p&gt;

&lt;p&gt;Containers &lt;a href="https://opencontainers.org"&gt;follow a standard&lt;/a&gt;. They will run homogeneously anywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-usage"&gt;
  &lt;/a&gt;
  Development usage
&lt;/h2&gt;

&lt;p&gt;However, some people advocate for containers and use them in development too. &lt;/p&gt;

&lt;p&gt;One way to do it, is by downloading the application image used in production and running the container locally. &lt;br&gt;
Pretty cool, because it helps to replicate bugs with ease, since the container doesn't care whether it's running &lt;strong&gt;in a remote server at AWS or in your local machine&lt;/strong&gt;. The runtime, dependencies and the application itself: exactly the same as production.&lt;/p&gt;

&lt;p&gt;Unless you are trying to replicate some &lt;em&gt;very specific&lt;/em&gt; bug, you don't need to download the bloated production image locally. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-docker-the-wrong-way"&gt;
  &lt;/a&gt;
  Using Docker the wrong way
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNQidPv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pew9nxgbtffi9kccs5ak.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNQidPv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pew9nxgbtffi9kccs5ak.jpg" alt="Install Docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to think on the following scenario: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You start working on a new project&lt;/li&gt;
&lt;li&gt;They already use containers (Docker) in production&lt;/li&gt;
&lt;li&gt;You configure your local environment based on the image declared in the &lt;code&gt;Dockerfile&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All is ok here. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You run &lt;code&gt;docker-compose up&lt;/code&gt;, which then starts building the application &lt;em&gt;image&lt;/em&gt;, installing hundreds of dependencies needed for the application&lt;/li&gt;
&lt;li&gt;Afterwards, your server is running at &lt;code&gt;localhost:8080&lt;/code&gt;. Great, you check it and start coding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything's pretty ok right here.&lt;/p&gt;

&lt;p&gt;But after writing some code, you want to see it in action. You run &lt;code&gt;docker-compose up&lt;/code&gt; again and that's where you face your worst nightmare: it will install all the dependencies over and over again, at &lt;em&gt;every time you start up the server&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;You then realize that Docker and all its container party are a pure &lt;strong&gt;waste of time&lt;/strong&gt;. You give up and install all the application environment in your host machine. &lt;/p&gt;

&lt;p&gt;Good luck with that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-about-fixing-the-dockerfile"&gt;
  &lt;/a&gt;
  How about fixing the Dockerfile?
&lt;/h3&gt;

&lt;p&gt;Yes, chances are that the Dockerfile is &lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/"&gt;not following the best practices&lt;/a&gt;, which makes very difficult the container usage in &lt;em&gt;development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this article I won't cover the &lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/"&gt;best practices&lt;/a&gt; for writing a good Dockerfile, but certainly it will be covered in a future post.&lt;/p&gt;

&lt;p&gt;I'll focus on another aspect.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#forget-how-those-real-projects-are-using-docker"&gt;
  &lt;/a&gt;
  Forget how those real projects are using Docker
&lt;/h3&gt;

&lt;p&gt;It sounds counterintuitive at first but my argument is that, if you start using Docker today, and thinking that &lt;em&gt;containers work exactly like you see in the company's projects&lt;/em&gt;, you are doomed. &lt;/p&gt;

&lt;p&gt;Containers go &lt;strong&gt;beyond&lt;/strong&gt; that way. I suggest first learning &lt;a href="https://dev.to/leandronsp/thinking-like-containers-5744"&gt;how containers work&lt;/a&gt;. Experiment on them. Try out different things and technologies using them.&lt;/p&gt;

&lt;p&gt;Then, only then, you can use containers on real projects the right way. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-the-right-way-then"&gt;
  &lt;/a&gt;
  What's the right way then?
&lt;/h3&gt;

&lt;p&gt;Let's supposed you don't have NodeJS installed in your host. People would first install NodeJS, depending on your operating system, configure it and do a couple of things before being able to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node hello_world.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But using Docker, you don't need to install anything else but Docker in your host computer. By doing so, you could run your command &lt;em&gt;from inside a container&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run node hello_world.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In terms of performance, it takes almost the same time as running from the host. It's unnoticeable. &lt;/p&gt;

&lt;p&gt;It also gives you the ability to have a "version manager" out-of-the-box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run node:10 hello_world.js
docker run node:12 hello_world.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, there's no longer need to change your version manager &lt;a href="https://www.saashub.com/asdf-vm-alternatives"&gt;every three years&lt;/a&gt; just because everyone is using "a fancy new cool version manager".&lt;/p&gt;

&lt;p&gt;Your host machine will thank you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-using-containers-docker-effectively-in-development"&gt;
  &lt;/a&gt;
  Tips for using containers (Docker) effectively in development
&lt;/h2&gt;

&lt;p&gt;In the upcoming sections I'll share some tips that maybe will help you to understand the problem containers solve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#image-container"&gt;
  &lt;/a&gt;
  Image !== container
&lt;/h3&gt;

&lt;p&gt;Try to really &lt;a href="https://docs.docker.com/get-started/overview/"&gt;understand and use containers&lt;/a&gt;, not images. Only then, learn &lt;a href="https://docs.docker.com/get-started/overview/"&gt;how images work&lt;/a&gt;. Images are your last resort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-volumes"&gt;
  &lt;/a&gt;
  Learn volumes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/storage/volumes/"&gt;Mastering volumes&lt;/a&gt; &lt;strong&gt;will save your life&lt;/strong&gt;. Seriously. &lt;/p&gt;

&lt;p&gt;Learn how they work and how then can effectively boost your productivity. &lt;/p&gt;

&lt;p&gt;They are not as hard as they seem to be. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-the-docker-network"&gt;
  &lt;/a&gt;
  Learn the Docker network
&lt;/h3&gt;

&lt;p&gt;Containers are isolated by design. You use them because you don't want to mess up with your host computer. &lt;/p&gt;

&lt;p&gt;But in real projects containers need intercommunication. &lt;a href="https://docs.docker.com/network/"&gt;Learn how to take advantage of the Docker network&lt;/a&gt; and let your containers talk to each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-docker-cli-first-then-dockercompose"&gt;
  &lt;/a&gt;
  Use docker CLI first. Then docker-compose
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.docker.com/engine/reference/commandline/cli/"&gt;Docker documentation reference&lt;/a&gt; is pretty good and will provide you almost every information you need to make your projects running on Docker.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;docker CLI&lt;/code&gt; heavily. Suffer. Feel the pain on the command-line. &lt;/p&gt;

&lt;p&gt;Then, only then, &lt;a href="https://docs.docker.com/compose/"&gt;go to docker-compose&lt;/a&gt; and truly understand how docker-compose CLI helps you even more on a daily basis. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-a-pet-project-using-docker"&gt;
  &lt;/a&gt;
  Build a pet project using Docker
&lt;/h3&gt;

&lt;p&gt;This is a perfect exercise for learning Docker. Resist the impulse to install or use something from your host. Put your web server in a container. Put your database in a container. &lt;/p&gt;

&lt;p&gt;Build a real pet-project full-stack application from the scratch, this is the best way to get comfortable using Docker. &lt;/p&gt;

&lt;p&gt;You won't regret and never go back. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article I tried to explain technically why I think Docker is misinterpreted by many developers. &lt;/p&gt;

&lt;p&gt;Arguments such as "Docker is too much", or "Docker is only useful for production", usually come with lack of understanding. There are very well &lt;a href="https://docs.docker.com/develop/dev-best-practices/"&gt;documented best practices&lt;/a&gt; around Docker in development that, if correctly applied, will refute those arguments. &lt;/p&gt;

&lt;p&gt;Of course, after all, using Docker in development is not mandatory. It's just a tool, similar to saying you like coding in Vim or VSCode. &lt;/p&gt;

</description>
      <category>docker</category>
      <category>containers</category>
    </item>
    <item>
      <title>part 5: deletion in binary search tree</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 29 Jun 2021 23:12:36 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-5-deletion-in-binary-search-tree-4j8d</link>
      <guid>https://dev.to/ayabouchiha/part-5-deletion-in-binary-search-tree-4j8d</guid>
      <description>&lt;p&gt;hi, this is part 5 of tree data structure, and the #day_17 of algorithms and data structure, In the last posts, we talked about the binary search tree, its advantages, disadvantages, time and space complexity of its basic operations such as searching, insertion, and also their implementation using python&lt;br&gt;
In this post, we'll discuss deletion :)&lt;/p&gt;

&lt;p&gt;last posts: &lt;br&gt; + &lt;a href="https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44"&gt;insertion, searching in binary search tree&lt;/a&gt; &lt;br&gt; + &lt;a href="https://dev.to/ayabouchiha/part-3-binary-search-tree-in-data-structure-3p7m"&gt;introduction to binary search tree&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deletion-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Deletion in the binary search tree
&lt;/h2&gt;

&lt;p&gt;there are 3 cases in deletion in binary search tree (&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/"&gt;&lt;em&gt;reference&lt;/em&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if the node to be deleted is the leaf, this is the easiest case, we will only remove it without moving anything :)&lt;/li&gt;
&lt;li&gt;if the node to be deleted has one child, in this case, we will replace the child with the node and delete the child&lt;/li&gt;
&lt;li&gt;if the node to be deleted has two children, in this case, we need to find a successor (&lt;em&gt;the min of right sub-tree&lt;/em&gt;) or a predecessor (&lt;em&gt;the max of left sub-tree&lt;/em&gt;), and copy it to the node to be deleted,
then delete the successor (&lt;em&gt;or the predecessor&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#deletion-implementation"&gt;
  &lt;/a&gt;
  Deletion implementation
&lt;/h3&gt;

&lt;p&gt;before the implementation of deletion, we need to create a function that returns to us a successor.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#getsuccessor-function"&gt;
  &lt;/a&gt;
  getSuccessor function
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSuccessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;currentNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#delete-function"&gt;
  &lt;/a&gt;
  Delete function
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/"&gt;more details...&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [code is from] =&amp;gt; https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# if the tree is empty
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="c1"&gt;# if value is smaller than the root's value
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# if value is greater than the root's value
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#! case1 or case2 (node has not children or has only one)
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
        &lt;span class="c1"&gt;#! case: node has 2 children
&lt;/span&gt;        &lt;span class="c1"&gt;# getting  successor
&lt;/span&gt;        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getSuccessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Copy the  successor's value to the node's value
&lt;/span&gt;        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="c1"&gt;# Delete the successor
&lt;/span&gt;        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/"&gt;https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.geeksforgeeks.org/deletion-binary-tree/"&gt;https://www.geeksforgeeks.org/deletion-binary-tree/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.javatpoint.com/deletion-in-binary-search-tree"&gt;https://www.javatpoint.com/deletion-in-binary-search-tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.techiedelight.com/deletion-from-bst/"&gt;https://www.techiedelight.com/deletion-from-bst/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=g0mjZwYRErM"&gt;https://www.youtube.com/watch?v=g0mjZwYRErM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for your time!&lt;br&gt;
Happy coding :)&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>[Vue.js] How to create beautiful and realistic confetti animations using tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 29 Jun 2021 23:10:44 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animations-in-vue-js-using-tsparticles-c5h</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animations-in-vue-js-using-tsparticles-c5h</guid>
      <description>&lt;p&gt;I wrote a post about tsParticles and the new confetti animation created in the &lt;code&gt;1.30&lt;/code&gt; version.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create beautiful and realistic confetti animation with tsParticles&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Jun 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This configuration can be used as is in any Vue.js 2.x tsParticles installation (&lt;code&gt;particles.vue&lt;/code&gt; package).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;particles.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;home.vue&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;placed&lt;/span&gt; &lt;span class="nx"&gt;anywhere&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/* paste options here, remember to replace double quotes with single quotes */&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A working sample can be found below&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/quiet-violet-u4g4v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>vue</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
