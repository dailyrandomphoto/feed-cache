<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is in your bag?</title>
      <author>Pavel Pol√≠vka</author>
      <pubDate>Thu, 06 Jan 2022 19:25:40 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/what-is-in-your-bag-1ijb</link>
      <guid>https://dev.to/pavel_polivka/what-is-in-your-bag-1ijb</guid>
      <description>&lt;p&gt;As a new year article, I decided to write up some words about what are the daily drivers I have in my bag. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bag"&gt;
  &lt;/a&gt;
  Bag
&lt;/h2&gt;

&lt;p&gt;I use a top-loaded HP bag for 15-inch laptops. My 17 inch Mac Book fits it well and it's pretty nice. But nothing special. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laptops"&gt;
  &lt;/a&gt;
  Laptops
&lt;/h2&gt;

&lt;p&gt;I have multiple laptops. For my work, I mostly use Macbook Pro 17" - 16GB RAM, 2019 model. I also have Macbook Air 13" M1 model I use for my personal projects. I also got a few Windows and Linux machines but those are rarely used.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-electronics"&gt;
  &lt;/a&gt;
  Other electronics
&lt;/h2&gt;

&lt;p&gt;I carry Kindle Whitepaper 4 with me almost everywhere. I love reading.&lt;br&gt;
I also carry Jabra Evolve 75 I use it for work meetings. It's a really great headset. I also have Marshall Mode II true wireless for music and or audiobooks on the go. I love the Marshall sound. &lt;/p&gt;

&lt;p&gt;I also have some USB/USB-C cables and some USB-C dongles. Fully embracing that Mac dongle life. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drug-store"&gt;
  &lt;/a&gt;
  Drug store
&lt;/h2&gt;

&lt;p&gt;I have deodorant in spray, hand sanitizer, mouth deodorant, and glass cleaning gel. Nothing special. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#various"&gt;
  &lt;/a&gt;
  Various
&lt;/h2&gt;

&lt;p&gt;I have my Moleskin notebook, Parker pen, FFP2 respirator, chopsticks, and set of lockpicks. I have lockpicking as one of my hobbies I rarely use those but saved me calling locksmith more than once. &lt;/p&gt;




&lt;p&gt;If you like this article you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>gear</category>
    </item>
    <item>
      <title>React folder structuring</title>
      <author>Rakesh Shravz</author>
      <pubDate>Thu, 06 Jan 2022 19:14:11 +0000</pubDate>
      <link>https://dev.to/rakeshshravz/react-folder-structure-10i2</link>
      <guid>https://dev.to/rakeshshravz/react-folder-structure-10i2</guid>
      <description>&lt;p&gt;Hey all great minds, this post is all about how I used to structure the react applications that I built so far. It's completely opinionated. Please comment with your thoughts.&lt;/p&gt;

&lt;p&gt;Let's assume that we are building a simple application with some common modules and features in it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDYlRkEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4a07e7oyxeqhm72jxdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDYlRkEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4a07e7oyxeqhm72jxdl.png" alt="Image description" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I always do the structuring based on the features or routes. This is the most common approach by the react community.&lt;/p&gt;

&lt;p&gt;From the above project view, when we open the "src" folder, all the folders with the feature name need to be aligned on the same vertical line. By looking at these folders inside the "src" folder, we should come to an idea of the nature of the application and what this project is about.&lt;/p&gt;

&lt;p&gt;Every features folder should contain an "index.js" file that has the root component of this feature. The presentational and non-presentational components are placed inside the "Components" folder. The other files are styles.js, actions.js, actionTypes.js, and reducers.js are placed within the folder for all the features&lt;/p&gt;

&lt;p&gt;Every feature folder should have all these files which help in code splitting and project folders looks identical which avoids chaos and helps better debugging.&lt;/p&gt;

&lt;p&gt;The "Common" folder can contain the styles, constants, and utils which we think can be used by other components.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I decided which language I should learn </title>
      <author>ùïÅùï¶ùïùùïöùïí üë©üèª‚Äçüíª</author>
      <pubDate>Thu, 06 Jan 2022 18:43:14 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-decided-which-language-i-should-learn-2lk4</link>
      <guid>https://dev.to/yuridevat/how-i-decided-which-language-i-should-learn-2lk4</guid>
      <description>&lt;p&gt;Like many of you, I also thought for a long time about which programming language I should actually learn. Python for machine learning and AI, Java for big apps, Swift for mobile apps, each language/field seemed so interesting and I spent a lot of time trying different things and still had no idea which language to stick with. This cost me a lot of time that I really want to spare you.&lt;/p&gt;

&lt;p&gt;Hello, I am Julia üë©‚Äçüíª, a self-taught React developer and I would like to explain to you why I chose frontend and ReactJS in particular as a programming language to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-choose-frontend"&gt;
  &lt;/a&gt;
  Why to choose frontend
&lt;/h2&gt;

&lt;p&gt;Frontend seemed to me to be the easiest to learn at the time. And in my situation, it was definitely much easier than Python or Java. I needed to see things right away, and fiddling around with CSS and creating something beautiful made me happy.&lt;/p&gt;

&lt;p&gt;That doesn't mean I'll stay with frontend forever, I'm interested in other languages too, but I wanted to get a job as soon as possible and calculated my odds, so I started learning HTML, CSS, and then JS/React.&lt;/p&gt;

&lt;p&gt;When I googled for tutorials, React was everywhere. React seemed to be THE language to learn at that moment, and when I learned about a mentorship program called &lt;a href="https://the-collab-lab.codes/"&gt;&lt;strong&gt;The Collab Lab&lt;/strong&gt;&lt;/a&gt; where you can apply if you know React to work on a smart app in an agile team, that was the final decision and motivation to dedicate myself fully to React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to get into this program, so I'm going to learn React, no matter the cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After learning frontend for three months, I applied for the program and was accepted üí™. I have to admit that at that point I didn't have the knowledge that the others had. I had to put in a lot more hours than the others and learn React all day to keep up.&lt;/p&gt;

&lt;p&gt;But it was definitely worth it. The experience was amazing because even though I didn't have all the programming skills of my peers, I was able to impress the mentors with other skills like motivation, communication, and a little bit of leadership, and they asked me to become an assistant mentor for future cohorts, which I gladly accepted.&lt;/p&gt;

&lt;p&gt;It was a great experience. Last but not least, this experience was also the most interesting one on my CV that was talked about in every interview I had and ultimately helped me get my first tech job ‚òùÔ∏è.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is the language in demand?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Because I'm talking about my first job: I hadn't thought about whether React was even used here in Austria. There were very few jobs that required React at the time of job searching, but I was lucky. React is just coming, so I am one of the few who already know React, while others have worked with Angular for years and now have to relearn.&lt;/p&gt;

&lt;p&gt;That's why it's important to look for jobs in advance, for example on LinkedIn, and find out if the programming language you want to learn is even in demand in the place where you live and want to work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#possibilites-with-frontend"&gt;
  &lt;/a&gt;
  Possibilites with frontend
&lt;/h2&gt;

&lt;p&gt;There are so many paths after that, if you don't like frontend, and you have enough time after the successful job search to focus on the things you really enjoy. The good thing is that JavaScript has many logical parts that Java and Python also have. That means it's important to master logical thinking, and that's what you need to improve on, how to solve problems. So then learning a new language won't be as hard as it was in the beginning. &lt;/p&gt;

&lt;p&gt;What I'm saying is that even if frontend seems a bit boring to you now, like, "I don't want to build websites", there are so many other areas you can focus on after you have a deep knowledge. You could become a frontend developer with a strong focus on &lt;em&gt;UX/UI design&lt;/em&gt;, a focus on &lt;em&gt;animation&lt;/em&gt;, if you like teaching you can apply for jobs at a coding school to become a &lt;em&gt;mentor&lt;/em&gt;, &lt;em&gt;freelancer&lt;/em&gt; or &lt;em&gt;content creator&lt;/em&gt;, or you can learn Python in your spare time and switch your career to Machine Learning or AI. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages worth mentioning&lt;/strong&gt;&lt;br&gt;
After getting my first job, I can assure you that I feel so relieved because I made it, I feel secure because I'm making money now. The way I study now in my free time is much more effective because I don't have any ulterior motives anymore: "Am I really going to make it? Is there any point in learning this language at all?"&lt;/p&gt;

&lt;p&gt;While getting better at frontend at work, you will also get better in other areas, like internal tools, personal growth, and soft skills. And maybe the company provides other areas too and a switch within the company would be possible üôÇ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My recommendation&lt;/strong&gt;&lt;br&gt;
Learning React development, after mastering the basics, you can and should also specialize in something to stand out from the crowd when applying for jobs, like UX design, UI design, a11y, some BackEnd, animation, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;When learning frontend / JavaScript, you can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;develop websites using frameworks and libraries like &lt;a href="https://beta.reactjs.org/"&gt;ReactJS&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, etc&lt;/li&gt;
&lt;li&gt;develop mobile apps using &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop desktop apps using &lt;a href="https://www.electronjs.org/"&gt;ElectronJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop (game) animations using &lt;a href="https://threejs.org/"&gt;ThreeJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop ML models using &lt;a href="https://www.tensorflow.org/js"&gt;TensorflowJS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find a good start into programming and can get started now. Have fun ‚ú®.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Git Workflows - Solo Vs Team Work, Undoing Mistakes, Contributing to Open Source... and more</title>
      <author>Danny Adams</author>
      <pubDate>Thu, 06 Jan 2022 18:40:18 +0000</pubDate>
      <link>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</link>
      <guid>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</guid>
      <description>&lt;p&gt;In this article, I give my workflows for almost everything that you will ever need to do with Git:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Git commands&lt;/li&gt;
&lt;li&gt;Setting up a remote repository and pushing to Github&lt;/li&gt;
&lt;li&gt;Undoing things in Git&lt;/li&gt;
&lt;li&gt;Ignoring things in Git&lt;/li&gt;
&lt;li&gt;Git branches for new features&lt;/li&gt;
&lt;li&gt;Working solo vs in a team&lt;/li&gt;
&lt;li&gt;Forking and contributing to open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-git-commands"&gt;
  &lt;/a&gt;
  Basic Git Commands
&lt;/h2&gt;

&lt;p&gt;These are the commands you will use in every single project.&lt;/p&gt;

&lt;p&gt;1) Initialise Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Add files to the staging area&lt;/p&gt;

&lt;p&gt;To add all files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files in a specific folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add src/posts/Git_Commands_Post&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add one file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add styles.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files with a specific extension (in this case, all html files):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add *.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Check the staging area is correct before committing to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Committing the changes to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "A short message describing the changes here"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5) Push to remote repository (see below for how to set up remote repository)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-remote-repository-and-pushing-to-github"&gt;
  &lt;/a&gt;
  Setting up a remote repository and pushing to Github
&lt;/h2&gt;

&lt;p&gt;First we need to set up the repository on Github:&lt;/p&gt;

&lt;p&gt;1) Go to github.com&lt;br&gt;
2) Sign in or create an account&lt;br&gt;
3) Select "New" to create a new repository&lt;br&gt;
4) Type in your repository information. I always leave the "Add a README file", "Add a .gitignore" and "Choose a license" checkbox unchecked.&lt;br&gt;
5) Click "Create repository"&lt;/p&gt;

&lt;p&gt;Now we need to connect up our local repository to the just-created Github repository:&lt;/p&gt;

&lt;p&gt;6) Add the remote repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/YourUsername/Your-remote-repo-name.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7)  Ensure we are in the main branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8) Push your committed local code to Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#changing-your-username-and-email-in-git"&gt;
  &lt;/a&gt;
  Changing your username and email in Git
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Danny Adams"
git config --global user.email "my-email@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#undoing-things-in-git"&gt;
  &lt;/a&gt;
  Undoing things in Git
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#remove-a-file-from-staging"&gt;
  &lt;/a&gt;
  Remove a file from staging
&lt;/h3&gt;

&lt;p&gt;The below command removes the file only from the Git repository. The local, working directory copy of the file will remain intact - this is ensured by adding the &lt;code&gt;--cached&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To remove all files in a folder, add the recursive flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt; -r&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#going-back-to-a-previous-commit-to-read-only"&gt;
  &lt;/a&gt;
  Going back to a previous commit to READ ONLY
&lt;/h3&gt;

&lt;p&gt;To see how things looked at a particular commit, without re-writing history or deleting things, we can simply:&lt;/p&gt;

&lt;p&gt;1) Log the commit history and copy the ID of the commit we want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Go back in time to the commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Once done, go back to where we were&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reverting-a-commit"&gt;
  &lt;/a&gt;
  Reverting a commit
&lt;/h3&gt;

&lt;p&gt;Revert commit creates a new commit, where the changes made in a specific commit are undone.&lt;/p&gt;

&lt;p&gt;Let's say we wanted to undo what we did in commit 2 of the below branch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" alt="Git Revert commit branch before" width="427" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Revert, a new commit would be made, where the changes made in C2 are undone - but C2 is still kept in history so we could still go back and keep the changes if we decide we want them again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" alt="Git Revert commit after" width="579" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through an example. Below, I have 3 commits in my project - with the latest at the top:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" alt="Git log of commits" width="382" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say I wanted to undo the changes I made with the "Created styles.css" commit only. I can simply revert this commit:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert a432c9f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git will then open up a file in your text editor (if your using VS code) and ask you to create a message for the new commit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" alt="Git revert command line" width="467" height="63"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" alt="Git revert message" width="723" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the commit message reads 'Revert "Created styles.css"', but this can be changed to whatever you want. I usually just leave it as is.&lt;/p&gt;

&lt;p&gt;Once you're happy with the message, simply close the file and Git will add the new commit where the "Create styles.css" changes are undone.&lt;/p&gt;

&lt;p&gt;But here's the beauty of using revert to undo things: the commit history is all still there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" alt="Commit history after reverting" width="457" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the "Created styles.css" commit is still there. Revert has simply made a new commit where the changes made in "Created styles.css" are reverted (undone). This is MUCH safer than using Reset - the next section - which deletes commits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reset-commit"&gt;
  &lt;/a&gt;
  Reset commit
&lt;/h3&gt;

&lt;p&gt;Reset commit goes back in time to a previous commit and permanently deletes all commits that happened ahead of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" alt="Git Reset branch diagram" width="566" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Get the Id of the commit you want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Reset&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: all the code changes will still remain in the workspace files - but they'll be uncommitted. To remove from Git AND your workspace, use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt; --hard&lt;/code&gt; (Very dangerous - be very careful!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tell-git-to-ignore-certain-files"&gt;
  &lt;/a&gt;
  Tell Git to ignore certain files
&lt;/h2&gt;

&lt;p&gt;Some files in your project will contain private information, such as passwords and keys. It's very important that this information isn't pushed to Github. Also, folders like the node_modules folder can take up lots of disc space, and there is no need for them to be pushed to Github as they can be reinstalled any time via the project's package.json file.&lt;/p&gt;

&lt;p&gt;1) Create a &lt;code&gt;.gitignore&lt;/code&gt; file in the root of your project&lt;br&gt;
2) Add the names of the folders and files you want to ignore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
secret-password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to add these files to .gitignore as soon as they are made. But if you have accidentally committed them to git, you can untrack them with the following commands:&lt;/p&gt;

&lt;p&gt;1) Remove everything from the repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm -r --cached .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Re add everything&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now everything apart from the files in your .gitignore will be added to the staging area.&lt;/p&gt;

&lt;p&gt;3) Commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m ".gitignore fix"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The local repository is now clean. Push the changes to Github to see the changes effective there too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-branches"&gt;
  &lt;/a&gt;
  Git branches
&lt;/h2&gt;

&lt;p&gt;A common Git paradigm is to always keep the main branch deployable. This means that whenever you're working on a new feature, you should create a new branch and make your commits to that. Then once the feature is complete, you can merge it back into main.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" alt="Git merge branch diagram" width="640" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-solo"&gt;
  &lt;/a&gt;
  When working solo
&lt;/h3&gt;

&lt;p&gt;If you're the only one contributing to a repo, then you can safely merge a feature into main without creating a pull request.&lt;/p&gt;

&lt;p&gt;1) Create new branch and go into it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Make your changes in this branch. Add and commit your changes as many times as necessary.&lt;/p&gt;

&lt;p&gt;3) Checkout to main and merge the feature branch into main&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt; --no-ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The no-fastforward flag creates a new merge commit and maintains history of the feature branches. Without this flag, the head will simply fastforward to the end of the feature without a new merge commit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-in-a-team"&gt;
  &lt;/a&gt;
  When working in a team
&lt;/h3&gt;

&lt;p&gt;Let's say someone has added you to a Github repository, so that you can now contribute as part of the team.&lt;/p&gt;

&lt;p&gt;To contribute, you will need to make a pull request. A pull request is for communicating and reviewing code, before merging it to main. Merging directly, and merging with a pull request are identical - the only difference is that a pull request creates a dedicated forum on Github for discussion - this allows team members to review your code before merging it.&lt;/p&gt;

&lt;p&gt;1) Clone the Github repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone &amp;lt;repo-url&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Ensure our code is up to date&lt;/p&gt;

&lt;p&gt;Before making any changes, you should always make sure your local copy is up to date with the remote repo - as other devs may have contributed. Pull the latest code from remote repo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Create and checkout to new branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Make desired changes&lt;/p&gt;

&lt;p&gt;5) Add and commit changes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "some message"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6) Push the code in this branch to a branch in Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin &amp;lt;name-of-branch-for-Github&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7) Create a pull request&lt;/p&gt;

&lt;p&gt;Go to the Github repo main branch and click "compare and pull request".&lt;/p&gt;

&lt;p&gt;8) Leave a comment to explain exactly what you've done, then "create pull request".&lt;/p&gt;

&lt;p&gt;Other team members will get an email for the request to pull your code into main. They can see changes, see commits, leave comments, and (if happy) merge the code into main.&lt;/p&gt;

&lt;p&gt;Feature branch can be deleted once merged.&lt;/p&gt;

&lt;p&gt;** But what if people make changes to main while your still working on the feature branch? **&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;feature-branch-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge the latest main branch into your feature branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git merge main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now incorporate the latest changes by other devs into your feature.&lt;/p&gt;

&lt;p&gt;Note: you may need to iron out merge conflicts. This is normal and part of working with Git.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forking-and-contributing-to-open-source-projects"&gt;
  &lt;/a&gt;
  Forking and contributing to open source projects
&lt;/h3&gt;

&lt;p&gt;If you don't have write access to a repo, but still want to contribute to it, you can Fork the project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find an open source public repo&lt;/li&gt;
&lt;li&gt;Fork the repo (create a copy to your own Github account)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;url-of-your-fork&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make changes (could also create a new branch for the changes then push to a new branch)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; &lt;code&gt;git commit -m "message"&lt;/code&gt; &lt;code&gt;git push origin main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to your forked copy on Github and click "New pull request"&lt;/li&gt;
&lt;li&gt;"Create pull request" - this pulls your code into the parent repo to be reviewed for merging. YOU CAN'T MERGE THIS - only the repo owners are allowed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;Hopefully that was helpful.&lt;/p&gt;

&lt;p&gt;For more from me, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DoableDanny"&gt;Follow me on twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;Subscribe to my YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üëã&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make Image responsive using Aspect ratio? No media queries are needed</title>
      <author>Anjan Shomooder</author>
      <pubDate>Thu, 06 Jan 2022 18:39:23 +0000</pubDate>
      <link>https://dev.to/thatanjan/how-to-make-image-responsive-using-aspect-ratio-no-media-queries-are-needed-2oj2</link>
      <guid>https://dev.to/thatanjan/how-to-make-image-responsive-using-aspect-ratio-no-media-queries-are-needed-2oj2</guid>
      <description>&lt;p&gt;In this blog, you will learn how to make an image responsive without any media queries. We will use the Aspect ratio to make our image responsive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video tutorial
&lt;/h2&gt;

&lt;p&gt;I have already made a video about it on my youtube channel. Check that out.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YYxfwDWuPmc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-preview"&gt;
  &lt;/a&gt;
  Live Preview
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thatanjan/embed/mdBLjgK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The basic idea here is to set the image width in a way that will change when the browser screen size will changes. And when the width will change, the height will also change based on the width.&lt;/p&gt;

&lt;p&gt;Now there are two types of aspect ratios you can use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Original ratio of Image&lt;/li&gt;
&lt;li&gt;  Custom aspect ratio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will show you both. I will also show you how to use the aspect ratio with the nextjs image component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#original-aspect-ratio"&gt;
  &lt;/a&gt;
  Original aspect ratio
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ts.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYoVlZ0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iys960m9ohvi0p91g96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYoVlZ0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iys960m9ohvi0p91g96.png" alt="Image description" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The container will take 80% width and will be in the center horizontally.&lt;/li&gt;
&lt;li&gt;  The image is taking the full width of the container.&lt;/li&gt;
&lt;li&gt;  The image will take as much height it needs. It will change when the width will change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#custom-aspect-ratio"&gt;
  &lt;/a&gt;
  Custom Aspect ratio
&lt;/h2&gt;

&lt;p&gt;Now there are two ways you can use a custom aspect ratio in CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  aspect-ratio property&lt;/li&gt;
&lt;li&gt;  padding-top property&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-paddingtop-property"&gt;
  &lt;/a&gt;
  Using padding-top property
&lt;/h2&gt;

&lt;p&gt;The process is very simple but a little bit tricky. You just need to create extra containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;56.25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./ts.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" alt="Image description" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The container will now take full width and position relative.&lt;/li&gt;
&lt;li&gt;  The image will take full space of its container. But it will be positioned absolute and aligned with its container. If you don't know about CSS positions, you can check out this video.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tO2KjMlor4o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We need to give height to the container using &lt;code&gt;padding-top&lt;/code&gt;. The value will depend on the aspect ratio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the aspect ratio, do the simple math. Do this on the calculator. Just divide the height by width. Then multiply by 100 to get the percentage value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1920 X 1080 resolution

1080 / 1920 = 0.5625 --&amp;gt; The ratio

0.5625 * 100 = 56.25%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;56.25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes the image might get too small on small screens. Then you can use a media query and make the image square.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVo2g_fx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw4uk5qeeriswzhqwskj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVo2g_fx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw4uk5qeeriswzhqwskj.png" alt="Image description" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;padding-top&lt;/code&gt; will be 100% because in a square height and width is the same. If you divide them you will get 1. And you know the rest.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#use-aspect-ratio-with-nextjs-image-component"&gt;
  &lt;/a&gt;
  Use Aspect ratio with Nextjs Image Component.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Responsive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/ts.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;responsive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="nx"&gt;objectFit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Responsive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" alt="Image description" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The idea here is the same. Make layout responsive.&lt;/li&gt;
&lt;li&gt;  Give height and width based on the ratio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have made two landing page clone videos with vanilla HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  SpaceX&lt;/li&gt;
&lt;li&gt;  Tesla&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HkOcmKGm0zU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DwvJnDQgIIU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Javascript intersection observer to add cool effects&lt;/li&gt;
&lt;li&gt;  DOM manipulation&lt;/li&gt;
&lt;li&gt;  Aligning elements with CSS positions.&lt;/li&gt;
&lt;li&gt;  How to make responsive websites.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will be great projects to brush up on your front end skills.&lt;/p&gt;

&lt;p&gt;If you are interested you can check the videos.&lt;/p&gt;

&lt;p&gt;You can also demo the application form&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/spaceX-landing-page-clone-yt/"&gt;SpaceX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/tesla-clone-yt/"&gt;Tesla&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;That's it for this blog. I have tried to explain things simply. If you get stuck, you can ask me questions.&lt;/p&gt;

&lt;p&gt;By the way, I am looking for a new opportunity in a company where I can provide great value with my skills. If you are a recruiter, looking for someone skilled in full stack web development and passionate about revolutionizing the world, feel free to contact me. Also, I am open to talking about any freelance project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites. See more of my work from &lt;a href="https://www.thatanjan.me/projects"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" alt="Homepage" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thatanjan/confession/blob/master/screenshots.md"&gt;More screenshots&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt;Eslint, prettier setup with TypeScript and react &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/beginners-guide-to-quantum-computers"&gt;Beginners guide to quantum computers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s6J2Q2vOhf0"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0an2g0lq7LU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kVjOEYKUXxE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>How to create jars that run like any other executable binary (./app.jar)</title>
      <author>Lucy Linder</author>
      <pubDate>Thu, 06 Jan 2022 18:37:58 +0000</pubDate>
      <link>https://dev.to/derlin/how-to-create-jars-that-run-like-any-other-executable-binary-appjar-ic3</link>
      <guid>https://dev.to/derlin/how-to-create-jars-that-run-like-any-other-executable-binary-appjar-ic3</guid>
      <description>&lt;p&gt;Fat jars are a good way to package java applications, whether they are command-line programs or GUIs. However, a jar differs from other executables: instead of the regular &lt;code&gt;./app.jar&lt;/code&gt;, it must be invoked using &lt;code&gt;java -jar app.jar&lt;/code&gt;. This is ok, but not ideal.&lt;/p&gt;

&lt;p&gt;It is not a given though: &lt;a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/deployment-install.html"&gt;Spring Boot&lt;/a&gt; is able to generate &lt;em&gt;&lt;strong&gt;executable jars&lt;/strong&gt;&lt;/em&gt;, that is jars that can be executed using the direct syntax &lt;code&gt;./app.jar&lt;/code&gt; like any other executable binary. How do they pull this off ? And, more importantly, how can we apply the same logic to any jar ? Let's find out !&lt;/p&gt;

&lt;p&gt;
  why not a native executable üòê  ?
  &lt;br&gt;
An even better way is to create a real &lt;em&gt;native executable&lt;/em&gt; using &lt;a href="https://www.graalvm.org"&gt;GraalVM&lt;/a&gt;, which directly embeds a tiny Virtual Machine, so it can run even on machines that do not have a JRE installed. However, this process is tedious and has limitations... It won't work for any codebase ! If you assume all your users will have a JRE, this solution is way easier.&lt;br&gt;


&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-magic-behind-executable-jars"&gt;
  &lt;/a&gt;
  The magic behind executable jars
&lt;/h2&gt;

&lt;p&gt;The actual magic involved is pretty straight-forward, and based on a little known fact about the Zip format. From &lt;a href="https://en.wikipedia.org/wiki/ZIP_(file_format)#Combination_with_other_file_formats"&gt;the .ZIP format wiki page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The .ZIP file format allows for a comment containing up to 65,535 (216‚àí1) bytes of data to occur at the end of the file after the central directory&lt;/em&gt; [...]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This allows arbitrary data to occur in the file both before and after the ZIP archive data, and for the archive to still be read by a ZIP application. A side-effect of this is that it is possible to author a file that is both a working ZIP archive and another format, provided that the other format tolerates arbitrary data at its end, beginning, or middle.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since JAR is a variant of ZIP, it works for them as well. It means it is possible to append a bash script, acting like a launcher, at the beginning of a jar file without corrupting it.&lt;/p&gt;

&lt;p&gt;This is exactly what Spring Boot does. Take any executable Spring Boot jar (for example &lt;a href="https://github.com/big-building-data/bbdata-api/releases/tag/nightly"&gt;bbdata-api-*.jar&lt;/a&gt;), and run &lt;code&gt;head&lt;/code&gt; on it. You should see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 10 /tmp/bbdata-api-2.0.0-alpha.jar
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#    .   ____          _            __ _ _&lt;/span&gt;
&lt;span class="c"&gt;#   /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \&lt;/span&gt;
&lt;span class="c"&gt;#  ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \&lt;/span&gt;
&lt;span class="c"&gt;#   \\/  ___)| |_)| | | | | || (_| |  ) ) ) )&lt;/span&gt;
&lt;span class="c"&gt;#    '  |____| .__|_| |_|_| |_\__, | / / / /&lt;/span&gt;
&lt;span class="c"&gt;#   =========|_|==============|___/=/_/_/_/&lt;/span&gt;
&lt;span class="c"&gt;#   :: Spring Boot Startup Script ::&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#turning-a-jar-into-an-executable-with-one-bash-command-"&gt;
  &lt;/a&gt;
  Turning a jar into an executable (with one bash command !)
&lt;/h2&gt;

&lt;p&gt;With this trick in mind, turning any jar into a executable jar is as easy as running those two commands (see &lt;a href="https://gist.github.com/joewalnes/e200c21288edaa970453ec47b6711254"&gt;this gist&lt;/a&gt; for a variant):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Append a basic launcher script to the jar&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'#!/bin/sh'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
  &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'exec java -jar $0 "$@"'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
  &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'exit 0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
  original.jar &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; executable.jar

&lt;span class="c"&gt;# Make the new jar executable&lt;/span&gt;
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x executable.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it &lt;strong&gt;works on all unix like systems&lt;/strong&gt; including Linux, MacOS, Cygwin, and Windows Linux subsystem !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-executable-jars-using-gradle"&gt;
  &lt;/a&gt;
  Making executable jars using Gradle
&lt;/h2&gt;

&lt;p&gt;Now that the process is understood, writing a Gradle Task for it is easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-gradle-task"&gt;
  &lt;/a&gt;
  Custom Gradle Task
&lt;/h3&gt;

&lt;p&gt;First, we need to define a new custom task in &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExecutableJarTask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DefaultTask&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This custom task will prepend the content of a&lt;/span&gt;
    &lt;span class="c1"&gt;// bash launch script at the beginning of a jar,&lt;/span&gt;
    &lt;span class="c1"&gt;// and make it executable (chmod +x)&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InputFiles&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;originalJars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ConfigurableFileTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
      &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fileTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${project.buildDir}/libs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*.jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;OutputDirectory&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buildDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// where to write the modified jar(s)&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InputFile&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;launchScript&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rootDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"launch.sh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// script to prepend&lt;/span&gt;

    &lt;span class="nd"&gt;@TaskAction&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;createExecutableJars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;originalJars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;outputStream&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;launchScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readBytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                    &lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readBytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nf"&gt;setExecutable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"created executable: $path"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This task extends gradle's &lt;code&gt;DefaultTask&lt;/code&gt; (Kotlin DSL), and takes three arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the list of "normal" jars that need to be made executable (&lt;code&gt;build/libs/*.jar&lt;/code&gt; by default),&lt;/li&gt;
&lt;li&gt;the directory where to output the transformed jars (&lt;code&gt;bin&lt;/code&gt; by default), &lt;/li&gt;
&lt;li&gt;the bash launch script to prepend, which needs to exist ! (&lt;code&gt;&amp;lt;project_root&amp;gt;/launch.sh&lt;/code&gt; by default).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, the job is straight-forward: for each jar found in &lt;code&gt;inputJars&lt;/code&gt;, execute the equivalent of the &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;chmod&lt;/code&gt; commands outlined earlier, but in Kotlin.&lt;/p&gt;

&lt;p&gt;Note that the jars will keep the same name, so ensure the &lt;code&gt;outputDirectory&lt;/code&gt; doesn't match the input directory (or the jar will be corrupted). If you don't like this, adapt the script accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invoking-the-custom-task"&gt;
  &lt;/a&gt;
  Invoking the custom task
&lt;/h3&gt;

&lt;p&gt;We now need to register this new task, so it can be invoked from the command-line. We also want it to run &lt;em&gt;after&lt;/em&gt; the task creating the jars. If you use the built-in &lt;code&gt;jar&lt;/code&gt; task for the latter, this will do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ExecutableJarTask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"exec-jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "jar" task should have ran prior to it &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, you can now use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew exec-jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to customise the task, for example change the path to the launch script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ExecutableJarTask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"exec-jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// customise directly here&lt;/span&gt;
    &lt;span class="n"&gt;launchScript&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rootDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin/launcher.sh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-launch-script"&gt;
  &lt;/a&gt;
  An example launch script
&lt;/h2&gt;

&lt;p&gt;Based on Spring Boot's script, I personally use the following launch script, that should run fine on all supported platforms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DEBUG&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt;

&lt;span class="c"&gt;# Find Java (cf: spring-boot launcher)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="s2"&gt;/bin/java"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;javaexe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="s2"&gt;/bin/java"&lt;/span&gt;
&lt;span class="k"&gt;elif &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; java &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;javaexe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; java&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; &lt;span class="s2"&gt;"/usr/bin/java"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;javaexe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/java"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Unable to find Java"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# run jar&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;$javaexe&lt;/span&gt; &lt;span class="nt"&gt;-jar&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the &lt;code&gt;exit 0&lt;/code&gt; at the end: this is very important if your jar has a finite runtime (vs a Spring Boot server application). Indeed, without it, your jar will run and exit, then bash will try to execute whatever is found after the &lt;code&gt;exec&lt;/code&gt; line (that is, the zipped content of the jar) and will exit with an error.&lt;/p&gt;




&lt;p&gt;Written with ‚ô° by &lt;a href="https://github.com/derlin"&gt;derlin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>gradle</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Do you really know TypeScript? (4): Type assertions</title>
      <author>Alex Menor</author>
      <pubDate>Thu, 06 Jan 2022 18:25:55 +0000</pubDate>
      <link>https://dev.to/alexmenor/do-you-really-know-typescript-4-type-assertions-2644</link>
      <guid>https://dev.to/alexmenor/do-you-really-know-typescript-4-type-assertions-2644</guid>
      <description>&lt;p&gt;In this post (the last of the series üò¢) we are going to understand type assertions and compare them against type declarations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-use-type-assertions-for"&gt;
  &lt;/a&gt;
  What do you use type assertions for?
&lt;/h2&gt;

&lt;p&gt;There are situations where you know more than TypeScript can infer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FileItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We know for sure that item&lt;/span&gt;
&lt;span class="c1"&gt;// is also a file&lt;/span&gt;
&lt;span class="nx"&gt;printFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#golden-rule-for-using-assertions"&gt;
  &lt;/a&gt;
  Golden rule for using assertions
&lt;/h2&gt;

&lt;p&gt;You can only assert from one type to another if either type is a subset of the other. üßê&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;numOfEngines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Conversion of type 'Car' to type 'Airplane' may be a mistake&lt;/span&gt;
&lt;span class="c1"&gt;// because neither type sufficiently overlaps with the other. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An exception to this rule is when using &lt;code&gt;unknown&lt;/code&gt; or &lt;code&gt;any&lt;/code&gt;.&lt;br&gt;
You can use these to bypass it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unknown&lt;/code&gt; because is the universal set&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;any&lt;/code&gt; because disables the type checking
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prefer-type-declarations-to-type-assertions"&gt;
  &lt;/a&gt;
  Prefer type declarations to type assertions
&lt;/h2&gt;

&lt;p&gt;This is a mistake that I've seen a lot!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="na"&gt;numOfAirbags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Error: Property 'numOfAirbags' is missing&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No error&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use type assertions you are telling TypeScript to get out of the way, with type declarations you are making your intentions clear so it can help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-raw-as-const-endraw-a-type-assertion"&gt;
  &lt;/a&gt;
  Is &lt;code&gt;as const&lt;/code&gt; a type assertion?
&lt;/h2&gt;

&lt;p&gt;It is not. &lt;br&gt;
Despite having a similar syntax, &lt;code&gt;as const&lt;/code&gt; is used to hint the type system about values being immutable.&lt;/p&gt;

&lt;p&gt;It is very situational, but could be useful for using the values of an array as literals, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolBands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oasis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AC/DC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo Fighters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;

&lt;span class="c1"&gt;// type CoolBands = "Oasis" | "AC/DC" | "Foo Fighters"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolBands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;coolBands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for using the values of an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolBandsAndSingers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oasis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Liam Gallagher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AC/DC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Brian Johnson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo Fighters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dave Grohl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;

&lt;span class="c1"&gt;// type CoolBands = "Oasis" | "AC/DC" | "Foo Fighters"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolBands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;coolBandsAndSingers&lt;/span&gt;

&lt;span class="c1"&gt;// type CoolSingers = "Liam Gallagher" | "Brian Johnson" | "Dave Grohl"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolSingers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;coolBandsAndSingers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CoolBands&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it is the last post of this series, I also want to go through some topics that couldn't get a post for their own. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-type-everything"&gt;
  &lt;/a&gt;
  Don't type everything!
&lt;/h2&gt;

&lt;p&gt;I did it, and probably so did you. &lt;/p&gt;

&lt;p&gt;It is not bad, but can make the code too verbose and therefore harder to read.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, you should type very well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Function and method signatures&lt;/strong&gt; (parameters and return types)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Variables and constants when using object literals&lt;/strong&gt;, to take advantage of excess property checking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a TDD like spirit, you should know your input and output types before implementing a function/method, so typing it from the beginning makes it easier for you to implement it.&lt;/p&gt;

&lt;p&gt;Typing return types usually avoids implementation errors, specially if your function has many "paths".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-use-uppercase-variants-of-primitive-types"&gt;
  &lt;/a&gt;
  Don‚Äôt use uppercase variants of primitive types
&lt;/h2&gt;

&lt;p&gt;Probably you noticed that &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Number&lt;/code&gt; exist and wonder if you should use them as types.&lt;/p&gt;

&lt;p&gt;The answer is no. Just stick to lowercase types for primitives &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;These uppercase variants exist primarily for convenience, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// charAt is not a property of&lt;/span&gt;
&lt;span class="c1"&gt;// the string primitive&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript wraps the &lt;code&gt;string&lt;/code&gt; primitive in &lt;code&gt;String&lt;/code&gt; under the hood and uses the &lt;code&gt;charAt&lt;/code&gt; method of &lt;code&gt;String&lt;/code&gt; and then throws that object away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// These wrappers don't have behave &lt;/span&gt;
&lt;span class="c1"&gt;// as primitives&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's been a pleasure to write this series and I wish you a very productive experience with TypeScript üôÇ&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-go-deeper"&gt;
  &lt;/a&gt;
  Resources to go deeper
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/en/book/show/48570456-effective-typescript"&gt;Effective TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/"&gt;TypeScript docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Monitoring Rust web application with Prometheus and Grafana</title>
      <author>Roman Kudryashov</author>
      <pubDate>Thu, 06 Jan 2022 18:14:03 +0000</pubDate>
      <link>https://dev.to/rkudryashov/monitoring-rust-web-application-with-prometheus-and-grafana-4i9f</link>
      <guid>https://dev.to/rkudryashov/monitoring-rust-web-application-with-prometheus-and-grafana-4i9f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In this article, I‚Äôll show you how to set up monitoring of a Rust web application. The application will expose Prometheus metrics that will be visualized using Grafana. The monitored application is &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/tree/master/mongodb-redis"&gt;mongodb-redis demo&lt;/a&gt; described in detail &lt;a href="https://romankudryashov.com/blog/2021/06/mongodb-redis-rust/"&gt;here&lt;/a&gt;. Finally, the following architecture will be obtained:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-R1bGO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywfnvft7xubqagudqm9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-R1bGO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywfnvft7xubqagudqm9p.png" alt="architecture" width="880" height="719"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The monitoring system includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; ‚Äî monitoring platform which collects real-time metrics and records them in a time series database&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt; ‚Äî observability and data visualization platform&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://prometheus.io/docs/alerting/latest/alertmanager/"&gt;AlertManager&lt;/a&gt; ‚Äî an application that handles alerts sent by the Prometheus server (for example, when something goes wrong in your application) and notifies an end user through email, Slack, Telegram, or other channels&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/google/cadvisor"&gt;cAdvisor&lt;/a&gt; ‚Äî a platform providing container users an understanding of the resource usage and performance characteristics of their running containers. (Actually, it gathers information on all Docker containers on the scheme)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start all the tools at once you can use the following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/docker-compose.override.yml"&gt;Docker Compose file&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;9090:9090'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./monitoring/prometheus:/etc/prometheus&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--config.file=/etc/prometheus/prometheus.yml'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--web.external-url=http://localhost:9090'&lt;/span&gt;

  &lt;span class="na"&gt;grafana&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;grafana/grafana:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;grafana&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3000:3000'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./monitoring/grafana/data:/var/lib/grafana&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./monitoring/grafana/provisioning:/etc/grafana/provisioning&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GF_SECURITY_ADMIN_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;admin&lt;/span&gt;
      &lt;span class="na"&gt;GF_SECURITY_ADMIN_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;admin&lt;/span&gt;

  &lt;span class="na"&gt;alertmanager&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/alertmanager:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alertmanager&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;9093:9093'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./monitoring/alertmanager:/etc/alertmanager&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--config.file=/etc/alertmanager/alertmanager.yml'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--web.external-url=http://localhost:9093'&lt;/span&gt;

  &lt;span class="na"&gt;cadvisor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/cadvisor/cadvisor:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cadvisor&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8080:8080'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/:/rootfs:ro&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/var/run:/var/run:rw&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/sys:/sys:ro&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/var/lib/docker/:/var/lib/docker:ro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exposing-prometheus-metrics-in-a-rust-application"&gt;
  &lt;/a&gt;
  Exposing Prometheus metrics in a Rust application
&lt;/h2&gt;

&lt;p&gt;Metrics exposition is implemented with &lt;code&gt;prometheus&lt;/code&gt; &lt;a href="https://github.com/tikv/rust-prometheus"&gt;crate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://prometheus.io/docs/concepts/metric_types/"&gt;four core types&lt;/a&gt; of Prometheus metrics: counter, gauge, histogram, and summary. The first three of them will be described in the article (the crate currently &lt;a href="https://github.com/tikv/rust-prometheus/issues/5"&gt;doesn‚Äôt support&lt;/a&gt; summary type).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metrics-definition"&gt;
  &lt;/a&gt;
  Metrics definition
&lt;/h3&gt;

&lt;p&gt;Metrics can be created and registered in this way:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/metrics.rs"&gt;Metrics creation and registration&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;lazy_static!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;HTTP_REQUESTS_TOTAL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IntCounterVec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;register_int_counter_vec!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nd"&gt;opts!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http_requests_total"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"HTTP requests total"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Can't create a metric"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;HTTP_CONNECTED_SSE_CLIENTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IntGauge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nd"&gt;register_int_gauge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;opts!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http_connected_sse_clients"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Connected SSE clients"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Can't create a metric"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;HTTP_RESPONSE_TIME_SECONDS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HistogramVec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;register_histogram_vec!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"http_response_time_seconds"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"HTTP response times"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;HTTP_RESPONSE_TIME_CUSTOM_BUCKETS&lt;/span&gt;&lt;span class="nf"&gt;.to_vec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Can't create a metric"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet above, custom metrics are added to the default registry; it is also possible to register them in a custom registry (see &lt;a href="https://github.com/tikv/rust-prometheus/blob/master/examples/example_custom_registry.rs"&gt;example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Further, the purpose and usage of the metrics will be described in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#counter"&gt;
  &lt;/a&gt;
  Counter
&lt;/h3&gt;

&lt;p&gt;If we want to count all incoming HTTP requests, it is possible to use &lt;a href="https://docs.rs/prometheus/latest/prometheus/type.IntCounter.html"&gt;IntCounter&lt;/a&gt; type. But it is more useful to see not just the total number of requests, but also some other dimensions, such as a path and a method of a request. That can be done with &lt;a href="https://docs.rs/prometheus/latest/prometheus/type.IntCounterVec.html"&gt;IntCounterVec&lt;/a&gt;; &lt;code&gt;HTTP_REQUESTS_TOTAL&lt;/code&gt; of the type is used in custom Actix middleware as follows:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/main.rs"&gt;Usage&lt;/a&gt; of HTTP_REQUESTS_TOTAL metric&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;is_registered_resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="nf"&gt;.resource_map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.has_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// this check prevents possible DoS attacks that can be done by flooding the application&lt;/span&gt;
&lt;span class="c1"&gt;// using requests to different unregistered paths. That can cause high memory consumption&lt;/span&gt;
&lt;span class="c1"&gt;// of the application and Prometheus server and also overflow Prometheus's TSDB&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_registered_resource&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;request_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nn"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HTTP_REQUESTS_TOTAL&lt;/span&gt;
        &lt;span class="nf"&gt;.with_label_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nf"&gt;.inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After making some requests to API, something like the following will be produced:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Output of HTTP_REQUESTS_TOTAL metric&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# HELP http_requests_total HTTP requests total
# TYPE http_requests_total counter
http_requests_total{method="GET",path="/"} 1
http_requests_total{method="GET",path="/events"} 1
http_requests_total{method="GET",path="/metrics"} 22
http_requests_total{method="GET",path="/planets"} 20634
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each sample of the metric has &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; &lt;em&gt;labels&lt;/em&gt; (the metric‚Äôs attributes), so Prometheus can differentiate the samples.&lt;/p&gt;

&lt;p&gt;As is shown in the previous snippet, requests to &lt;code&gt;GET /metrics&lt;/code&gt; (endpoint from which Prometheus server collects metrics of an application) are also observed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gauge"&gt;
  &lt;/a&gt;
  Gauge
&lt;/h3&gt;

&lt;p&gt;Gauge differs from the counter by the fact that its value can go down. The example of the gauge shows how many clients at present are connected using SSE. The gauge is used as follows:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/broadcaster.rs"&gt;Usage&lt;/a&gt; of HTTP_CONNECTED_SSE_CLIENTS metric&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HTTP_CONNECTED_SSE_CLIENTS&lt;/span&gt;&lt;span class="nf"&gt;.inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HTTP_CONNECTED_SSE_CLIENTS&lt;/span&gt;&lt;span class="nf"&gt;.set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broadcaster_mutex&lt;/span&gt;&lt;span class="py"&gt;.clients&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;i64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you navigate to &lt;code&gt;http://localhost:9000&lt;/code&gt; in your browser, connection over SSE will be established and the metric will be incremented. After that, its output will look like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Output of HTTP_CONNECTED_SSE_CLIENTS metric&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# HELP http_connected_sse_clients Connected SSE clients
# TYPE http_connected_sse_clients gauge
http_connected_sse_clients 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#broadcaster"&gt;
  &lt;/a&gt;
  Broadcaster
&lt;/h4&gt;

&lt;p&gt;To implement SSE clients gauge it was needed to refactor the code of the application and &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/broadcaster.rs"&gt;implement&lt;/a&gt; broadcaster. It stores all connected (using &lt;code&gt;sse&lt;/code&gt; &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/handlers.rs"&gt;function&lt;/a&gt;) clients in a vector and periodically pings each of them (in &lt;code&gt;remove_stale_clients&lt;/code&gt; &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/broadcaster.rs"&gt;function&lt;/a&gt;) to make sure that the connection is still alive otherwise removing disconnected clients from the vector. The broadcaster allows opening just one Redis Pub/Sub &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/redis.rs"&gt;connection&lt;/a&gt;; messages from it are sent (broadcasted) to all the clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#histogram"&gt;
  &lt;/a&gt;
  Histogram
&lt;/h3&gt;

&lt;p&gt;In this guide, &lt;a href="https://prometheus.io/docs/practices/histograms/"&gt;histogram&lt;/a&gt; is used to collect data on response times. As in the case of request counter, tracking is done in Actix middleware; it is implemented using the following code:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/main.rs"&gt;Response time observation&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

histogram_timer = Some(
    metrics::HTTP_RESPONSE_TIME_SECONDS
        .with_label_values(&amp;amp;[&amp;amp;request_method, request_path])
        .start_timer(),
);

...

if let Some(histogram_timer) = histogram_timer {
    histogram_timer.observe_duration();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this approach is not precise (the question is how less is this time than the actual response time) but nevertheless the observation data will be useful as an example of a histogram and for its further visualization in Grafana.&lt;/p&gt;

&lt;p&gt;A histogram samples observations and counts them in configurable buckets (there are default buckets but most likely you will be required to define buckets customized to your use case); to configure them it is nice to know approximate spread of a metric‚Äôs values. In this application response time is quite small so the following configuration is used:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/metrics.rs"&gt;Response time buckets&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;HTTP_RESPONSE_TIME_CUSTOM_BUCKETS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mf"&gt;0.0005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.00085&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.00095&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.00105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0011&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.00115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;0.002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.003&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will look like this (only a part of data is shown to save space):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Output of HTTP_RESPONSE_TIME_SECONDS metric&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# HELP http_response_time_seconds HTTP response times
# TYPE http_response_time_seconds histogram
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.0005"} 0
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.0008"} 6
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.00085"} 1307
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.0009"} 10848
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.00095"} 22334
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.001"} 31698
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.00105"} 38973
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.0011"} 44619
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.00115"} 48707
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.0012"} 51495
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.0015"} 57066
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.002"} 59542
http_response_time_seconds_bucket{method="GET",path="/planets",le="0.003"} 60532
http_response_time_seconds_bucket{method="GET",path="/planets",le="1"} 60901
http_response_time_seconds_bucket{method="GET",path="/planets",le="+Inf"} 60901
http_response_time_seconds_sum{method="GET",path="/planets"} 66.43133770000004
http_response_time_seconds_count{method="GET",path="/planets"} 60901
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data show numbers of observations falling into particular buckets of observation values. The output also provides information on total count and sum of observations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#system-metrics"&gt;
  &lt;/a&gt;
  System metrics
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;process&lt;/code&gt; feature enables exporting of &lt;a href="https://prometheus.io/docs/instrumenting/writing_clientlibs/#process-metrics"&gt;process metrics&lt;/a&gt; such as CPU or memory usage. All you need is just to specify the feature in &lt;code&gt;Cargo.toml&lt;/code&gt;. After that, you will get something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Output of process metrics&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 134.49
# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 1048576
# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 37
# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 15601664
# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1636309802.38
# HELP process_threads Number of OS threads in the process.
# TYPE process_threads gauge
process_threads 6
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 439435264
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;prometheus&lt;/code&gt; crate supports exporting process metrics of an application running on Linux (for example in &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/Dockerfile"&gt;such&lt;/a&gt; a Docker container).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#endpoint-for-metrics-exposition"&gt;
  &lt;/a&gt;
  Endpoint for metrics exposition
&lt;/h3&gt;

&lt;p&gt;Actix is configured to process &lt;code&gt;GET /metrics&lt;/code&gt; requests using this handler:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/handlers.rs"&gt;Metrics handler&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;TextEncoder&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="n"&gt;encoder&lt;/span&gt;
        &lt;span class="nf"&gt;.encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to encode metrics"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to convert bytes to string"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="nf"&gt;.clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.insert_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;header&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;mime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nf"&gt;.body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after the successful configuration of the application, you can get all previously described metrics by executing &lt;code&gt;GET http://localhost:9000/metrics&lt;/code&gt; request. The endpoint is used by the Prometheus server to collect metrics of the application.&lt;/p&gt;

&lt;p&gt;Metrics are exposed in a simple text-based &lt;a href="https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md"&gt;format&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prometheus-setup-for-metrics-gathering"&gt;
  &lt;/a&gt;
  Prometheus setup for metrics gathering
&lt;/h2&gt;

&lt;p&gt;Prometheus collects (scrapes) metrics using the following config:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Prometheus &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/prometheus/prometheus.yml"&gt;config&lt;/a&gt; for metrics gathering&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;scrape_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongodb_redis_web_app&lt;/span&gt;
    &lt;span class="na"&gt;scrape_interval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5s&lt;/span&gt;
    &lt;span class="na"&gt;static_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;host.docker.internal:9000'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cadvisor&lt;/span&gt;
    &lt;span class="na"&gt;scrape_interval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5s&lt;/span&gt;
    &lt;span class="na"&gt;static_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;cadvisor:8080'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the config, two jobs are specified. The former job collects previously described metrics of the application, the latter collects resource usage and performance metrics of running containers (that will be described in detail in the section about cAdvisor). &lt;code&gt;scrape_interval&lt;/code&gt; specifies how frequently to scrape a target. &lt;code&gt;metrics_path&lt;/code&gt; parameter is not specified so Prometheus expects metrics to be available on targets on a path of &lt;code&gt;/metrics&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expression-browser-and-graphing-interface"&gt;
  &lt;/a&gt;
  Expression browser and graphing interface
&lt;/h3&gt;

&lt;p&gt;To use Prometheus‚Äôs built-in expression browser, navigate to &lt;code&gt;http://localhost:9090/graph&lt;/code&gt; and try to query any of the previously described metrics, for example, &lt;code&gt;http_requests_total&lt;/code&gt;. Use the "Graph" tab to visualize the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/"&gt;PromQL&lt;/a&gt; allows you to make more complex queries; let‚Äôs consider a couple of examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;return all time series with the metric &lt;code&gt;http_requests_total&lt;/code&gt; and the given job:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;http_requests_total{job="mongodb_redis_web_app"}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;job&lt;/code&gt; and &lt;code&gt;instance&lt;/code&gt; labels &lt;a href="https://prometheus.io/docs/concepts/jobs_instances/"&gt;are attached automatically&lt;/a&gt; to the scraped time series by the Prometheus server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;return per-second &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/functions/#rate"&gt;rate&lt;/a&gt; of incoming requests, as measured over the last 5 minutes:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;rate(http_requests_total[5m])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can find more examples &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/examples/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grafana-setup-for-metrics-visualization"&gt;
  &lt;/a&gt;
  Grafana setup for metrics visualization
&lt;/h2&gt;

&lt;p&gt;In this project, Grafana is configured with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data sources (from where Grafana will request data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/grafana/provisioning/datasources/datasources.yml"&gt;Data sources config&lt;/a&gt; of Grafana&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;``` yaml
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: prometheus:9090
    isDefault: true
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;dashboards provider (from where Grafana will load dashboards)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/grafana/provisioning/dashboards/providers.yml"&gt;Dashboards config&lt;/a&gt; of Grafana&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;``` yaml
apiVersion: 1

providers:
  - name: 'default'
    folder: 'default'
    type: file
    allowUiUpdates: true
    updateIntervalSeconds: 30
    options:
      path: /etc/grafana/provisioning/dashboards
      foldersFromFilesStructure: true
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After launching the project as was specified in &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/docker-compose.override.yml"&gt;Docker Compose file&lt;/a&gt;, you can go to &lt;code&gt;http://localhost:3000/&lt;/code&gt;, log in with &lt;code&gt;admin/admin&lt;/code&gt; credentials, and find &lt;code&gt;webapp_metrics&lt;/code&gt; dashboard. A little bit later, it will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OBpxvg0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzrvdscpsi5pczj4bqp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OBpxvg0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzrvdscpsi5pczj4bqp5.png" alt="grafana" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dashboard displays the state of the application under easy load test. (If you will launch some load test, for better visibility of the graphs (particularly the histogram) you will need to disable somehow &lt;code&gt;MAX_REQUESTS_PER_MINUTE&lt;/code&gt; &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/src/services.rs"&gt;restriction&lt;/a&gt;, for example, by a sharp increase of that number.)&lt;/p&gt;

&lt;p&gt;To visualize the data, &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/grafana/provisioning/dashboards/webapp_metrics.json"&gt;the dashboard&lt;/a&gt; uses PromQL queries that utilize previously described metrics, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_response_time_seconds_sum[5m]) / rate(http_response_time_seconds_count[5m])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shows average response time for the last five minutes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum(increase(http_response_time_seconds_bucket{path="/planets"}[30s])) by (le)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is used to visualize response time distribution in the form of a &lt;a href="https://grafana.com/docs/grafana/latest/basics/intro-histograms/"&gt;heatmap&lt;/a&gt;. A heatmap is like a histogram, but over time, where each time slice represents its own histogram&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rate(process_cpu_seconds_total{job="mongodb_redis_web_app"}[1m])&lt;/code&gt;, &lt;code&gt;sum(rate(container_cpu_usage_seconds_total{name='mongodb-redis'}[1m])) by (name)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shows CPU usage for the last five minutes. Requested data are coming from two different sources and show CPU usage of the process and the container respectively. The two graphs are almost identical. (&lt;code&gt;sum&lt;/code&gt; is used because &lt;code&gt;container_cpu_usage_seconds_total&lt;/code&gt; provides information on the usage of each core.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; "Memory usage" graph shows memory used by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the process (&lt;code&gt;process_resident_memory_bytes{job="mongodb_redis_web_app"} / 1024 / 1024&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the container (&lt;code&gt;container_memory_usage_bytes{name="mongodb-redis"} / 1024 / 1024&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For an unknown reason, the graph shows that the process consumes much more memory than the whole container. Also, I created &lt;a href="https://github.com/tikv/rust-prometheus/issues/424"&gt;an issue&lt;/a&gt; on this question. Please, let me know if there‚Äôs something wrong with that comparison or if you know how this can be explained.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring-metrics-of-application-container-using-cadvisor"&gt;
  &lt;/a&gt;
  Monitoring metrics of application container using cAdvisor
&lt;/h2&gt;

&lt;p&gt;In addition to system metrics of a process (was shown previously), system metrics of the Docker container can also be exported. This can be done using cAdvisor.&lt;/p&gt;

&lt;p&gt;Web UI of cAdvisor is accessible via &lt;code&gt;http://localhost:8080/&lt;/code&gt;. All running Docker containers are shown at &lt;code&gt;http://localhost:8080/docker/&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVZxO_LI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss9a20vqms384wzjfxx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVZxO_LI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss9a20vqms384wzjfxx3.png" alt="cadvisor docker containers" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can get information on resource usage of any container:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQRXxhj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6wwlau2avksduleifq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQRXxhj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6wwlau2avksduleifq2.png" alt="cadvisor container info" width="880" height="1133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metrics are gathered by the Prometheus server from &lt;code&gt;http://localhost:8080/metrics&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Metrics exported by cAdvisor are listed &lt;a href="https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;System metrics of machines can be exported with &lt;a href="https://github.com/prometheus/node_exporter"&gt;Node exporter&lt;/a&gt; or &lt;a href="https://github.com/prometheus-community/windows_exporter"&gt;Windows exporter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-of-alert-notifications-using-rules-and-alertmanager"&gt;
  &lt;/a&gt;
  Setup of alert notifications using rules and AlertManager
&lt;/h2&gt;

&lt;p&gt;In this project, the following part of Prometheus config is responsible for alerting:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Prometheus &lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/prometheus/prometheus.yml"&gt;config&lt;/a&gt; for alerting&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;rule_files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;rules.yml'&lt;/span&gt;

&lt;span class="na"&gt;alerting&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;alertmanagers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;static_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;alertmanager:9093'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;alerting&lt;/code&gt; section defines the AlertManager instance Prometheus server communicates with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/"&gt;Alerting rules&lt;/a&gt; allow you to define some conditions based on PromQL expressions:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/prometheus/rules.yml"&gt;Example&lt;/a&gt; of an alerting rule in &lt;code&gt;rules.yml&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SseClients&lt;/span&gt;
    &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;http_connected_sse_clients &amp;gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1m&lt;/span&gt;
    &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;high&lt;/span&gt;
    &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Too many SSE clients&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  alert ‚Äì a name of the alert&lt;/li&gt;
&lt;li&gt;  expr ‚Äì the actual rule definition in the form of Prometheus expression&lt;/li&gt;
&lt;li&gt;  for ‚Äì how long the rule needs to be broken before raising an alert. In our case, if the number of SSE clients remains greater than 0 for 1 minute, an alert will be raised&lt;/li&gt;
&lt;li&gt;  labels ‚Äì extra information that can be attached to the alert, e.g. severity&lt;/li&gt;
&lt;li&gt;  annotations ‚Äì extra descriptions that can be attached to the alert, e.g. summary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This rule of SSE clients number greater than 0 isn‚Äôt something you would typically setup for your application. It is used as an example as it will be easy for us to break the rule by making just one request.&lt;/p&gt;

&lt;p&gt;If the rule is broken, the Prometheus server will send an alert to the AlertManager instance. It provides numerous features, such as alerts deduplication, grouping, silencing, and dispatching notifications to an end user. We will consider only routing ability: the alert will be dispatched to an email.&lt;/p&gt;

&lt;p&gt;AlertManager is configured as follows:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/rkudryashov/exploring-rust-ecosystem/blob/master/mongodb-redis/monitoring/alertmanager/alertmanager.yml"&gt;AlertManager config&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;receiver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gmail&lt;/span&gt;

&lt;span class="na"&gt;receivers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gmail&lt;/span&gt;
  &lt;span class="na"&gt;email_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;recipient@gmail.com&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;email_id@gmail.com&lt;/span&gt;
    &lt;span class="na"&gt;smarthost&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;smtp.gmail.com:587&lt;/span&gt;
    &lt;span class="na"&gt;auth_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;email_id@gmail.com&lt;/span&gt;
    &lt;span class="na"&gt;auth_identity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;email_id@gmail.com&lt;/span&gt;
    &lt;span class="na"&gt;auth_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this project, AlertManager is configured with a Gmail account. To generate an app password, you can use &lt;a href="https://support.google.com/accounts/answer/185833?hl=en"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To trigger &lt;code&gt;SseClients&lt;/code&gt; alerting rule, you just need to navigate to &lt;code&gt;http://localhost:9000&lt;/code&gt; in your browser. This will increase &lt;code&gt;http_connected_sse_clients&lt;/code&gt; metric by 1. You can track the status of the &lt;code&gt;SseClients&lt;/code&gt; alert on &lt;code&gt;http://localhost:9090/alerts&lt;/code&gt;. After the triggering, the alert will go to the &lt;code&gt;Pending&lt;/code&gt; status. After the &lt;code&gt;for&lt;/code&gt; interval defined in &lt;code&gt;rules.yml&lt;/code&gt; has passed (in our case 1 minute), the alert will go to the &lt;code&gt;Firing&lt;/code&gt; status.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-l99HSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76744nlzhuyzctiixzfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-l99HSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76744nlzhuyzctiixzfv.png" alt="prometheus alert" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That will cause the Prometheus server sending the alert to AlertManager. It will decide what to do with the alert, in our case sending an email:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e58Fsmai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6dl37vsv6kdow6hlxwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e58Fsmai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6dl37vsv6kdow6hlxwv.png" alt="gmail alert" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring-thirdparty-systems-using-prometheus-exporters"&gt;
  &lt;/a&gt;
  Monitoring third-party systems using Prometheus exporters
&lt;/h2&gt;

&lt;p&gt;For third-party tools, such as MongoDB, Redis, and many others, it is possible to set up monitoring using Prometheus &lt;a href="https://prometheus.io/docs/instrumenting/exporters/"&gt;exporters&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch"&gt;
  &lt;/a&gt;
  Launch
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker compose up --build&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, I showed how to setup metrics exposition in a Rust web application, their gathering with Prometheus, and data visualization with Grafana. Also, it was shown how to start working with cAdvisor to gather containers' metrics and with alerting using AlertManager. Feel free to contact me if you have found any mistakes in the article or the source code. Thanks for reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://prometheus.io/docs/introduction/overview/"&gt;Introduction to Prometheus&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://prometheus.io/docs/practices/naming/"&gt;Prometheus‚Äôs naming convention&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://grafana.com/docs/grafana/latest/basics/intro-histograms/"&gt;Introduction to histograms and heatmaps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://grafana.com/blog/2020/06/23/how-to-visualize-prometheus-histograms-in-grafana/"&gt;How to visualize Prometheus histograms in Grafana&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tomgregory.com/monitoring-a-spring-boot-application-part-3-rules-and-alerting/"&gt;Setup of an alerting system for Spring Boot application&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rust</category>
      <category>prometheus</category>
      <category>grafana</category>
    </item>
    <item>
      <title>Automate React App deployment using GitLab CI/CD, Ansible, Docker</title>
      <author>Minaro</author>
      <pubDate>Thu, 06 Jan 2022 18:13:32 +0000</pubDate>
      <link>https://dev.to/minaro/automate-react-app-deployment-using-gitlab-cicd-ansible-docker-43hd</link>
      <guid>https://dev.to/minaro/automate-react-app-deployment-using-gitlab-cicd-ansible-docker-43hd</guid>
      <description>&lt;p&gt;Custom workflow to automate your deployment using Gitlab and Ansible.&lt;/p&gt;

&lt;p&gt;If you want to see your changes online every time you push some code, you need a custom workflow. You are at the right place.&lt;br&gt;
Follow this short tutorial, I have the perfect recipe for you !&lt;/p&gt;

&lt;p&gt;We will use the most suitable tools for our project, let me introduce our little friends :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitLab to host our project and run pipelines&lt;/li&gt;
&lt;li&gt;Ansible to deploy on remote server&lt;/li&gt;
&lt;li&gt;Docker to containerized our app and ship it easily and fast&lt;/li&gt;
&lt;li&gt;ReactJS fontend frameworks for the demo (it could be anything else, but you‚Äôll need to adapt the container)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#1-create-a-new-project-with-createreactapp-and-host-it-on-gitlab"&gt;
  &lt;/a&gt;
  1. Create a new project with create-react-app and host it on Gitlab
&lt;/h2&gt;

&lt;p&gt;We will create a new react app with CRA:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create react-app &amp;lt;project_name&amp;gt; &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;project_name&amp;gt;
git remote add origin &amp;lt;gitlab_project_url&amp;gt;
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; ‚ÄúInitial commit‚Äù
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#2-create-ci-job-with-gitlab-ci"&gt;
  &lt;/a&gt;
  2. Create CI job with GitLab CI
&lt;/h2&gt;

&lt;p&gt;At the root of your project we will create a new file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; to enable the gitlab CI.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Currently this file contains only one stage dedicated to the build. We basically install only the &lt;code&gt;dependencies&lt;/code&gt; of our project and not the &lt;code&gt;devDependencies&lt;/code&gt;.&lt;br&gt;
Then we build and we cache the build folder for later jobs.&lt;br&gt;
We also cache the &lt;code&gt;node_modules&lt;/code&gt; folder so the next time we don‚Äôt need to download all the &lt;code&gt;node_modules&lt;/code&gt; again.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-containerize-and-release-our-app-with"&gt;
  &lt;/a&gt;
  3. Containerize and release our app with
&lt;/h2&gt;

&lt;p&gt;Docker on the GitLab container registry&lt;br&gt;
We have created a production build for our react app but we still need to create a container to ship it.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We added the release stage which build the container. We use the cache again but for the layers of the image so the less the container change the faster it will be built. We need to login to the project registry thanks to &lt;a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html"&gt;predefined variables&lt;/a&gt; and simply push the freshly created container to the registry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-deploy-and-update-our-app-in-production"&gt;
  &lt;/a&gt;
  4. Deploy and update our app in production
&lt;/h2&gt;

&lt;p&gt;Now we have prepared everything for the deployment but our app is stored in a container registry but still not running in production. We will be a bit hand-made here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-create-a-ssh-key"&gt;
  &lt;/a&gt;
  4.1 Create a SSH key
&lt;/h3&gt;

&lt;p&gt;First thing, we need to be able to connect our deployment server through SSH. So let‚Äôs create an SSH key !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh-keygen &lt;span class="nt"&gt;-t&lt;/span&gt; ed25519 &lt;span class="nt"&gt;-f&lt;/span&gt; ~/.ssh/id_ansible &lt;span class="nt"&gt;-N&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
ssh-copy-id &lt;span class="nt"&gt;-i&lt;/span&gt; ~/.ssh/id_ansible &amp;lt;user&amp;gt;@&amp;lt;ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The last command will add your public key on the server.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command reveal your ssh private key, copy it we will use it in the next step. But do not share it with anyone !&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#42-add-a-ssh-key-to-gitlab"&gt;
  &lt;/a&gt;
  4.2 Add a SSH Key to GitLab
&lt;/h3&gt;

&lt;p&gt;In order to connect to your server and deploy the container we need to add this private key to the runner.&lt;br&gt;
To upload the key to GitLab, go to &lt;strong&gt;Settings &amp;gt; CI/CD &amp;gt; Variables&lt;/strong&gt; and click on &lt;strong&gt;&lt;em&gt;Add variable&lt;/em&gt;&lt;/strong&gt;. In &lt;strong&gt;&lt;em&gt;key&lt;/em&gt;&lt;/strong&gt; write &lt;code&gt;ANSIBLE_DEPLOY_KEY&lt;/code&gt; and in &lt;strong&gt;&lt;em&gt;Value&lt;/em&gt;&lt;/strong&gt; paste the private key. If you have not created protected branches or tags, uncheck &lt;strong&gt;&lt;em&gt;Protect variable&lt;/em&gt;&lt;/strong&gt;, click &lt;strong&gt;&lt;em&gt;Add Variable&lt;/em&gt;&lt;/strong&gt; and you're done.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#43-create-a-dockercompose-file"&gt;
  &lt;/a&gt;
  4.3 Create a docker-compose file
&lt;/h3&gt;

&lt;p&gt;On your server under &lt;code&gt;/home/&amp;lt;user&amp;gt;/prod&lt;/code&gt; create a &lt;code&gt;docker-compose.yml&lt;/code&gt; in order to run your container.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#44-create-an-ansible-playbook"&gt;
  &lt;/a&gt;
  4.4 Create an Ansible Playbook
&lt;/h3&gt;

&lt;p&gt;We will use Ansible to execute remote command on the server during the pipelines, this setup does not aims to explain Ansible; it‚Äôs a simple setup.&lt;br&gt;
At the root of your project you can create the &lt;code&gt;ansible/&lt;/code&gt; directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;ansible/hosts&lt;/code&gt; copy/paste the file under and replace the &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ip&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;ansible/roles/deployment/tasks/main.yml&lt;/code&gt; copy/paste the content of the second file&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;ansible/playbooks&lt;/code&gt; again copy/paste the third file.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#45-deploying-with-ansible-playbook"&gt;
  &lt;/a&gt;
  4.5 Deploying with Ansible playbook
&lt;/h3&gt;

&lt;p&gt;Last step, we added the deploy stage that will connect to the server, pull from the registry and only restart the container we pulled.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#thoughts"&gt;
  &lt;/a&gt;
  Thoughts
&lt;/h2&gt;

&lt;p&gt;I‚Äôm aware that this setup does not cover every use case and does not follow every best practice in terms of security, like importing a ssh private key in GitLab or not handling errors if deployment failed.&lt;br&gt;
But I wanted to keep it simple as a basic setup so you can adapt it to your needs, if you have any advise feel free to write a comment, this is my first try so I will definitely improve it.&lt;/p&gt;

&lt;p&gt;Thank you for reading !&lt;/p&gt;

</description>
      <category>ansible</category>
      <category>docker</category>
      <category>gitlab</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to delete remote commits in git?</title>
      <author>Danyson</author>
      <pubDate>Thu, 06 Jan 2022 18:00:54 +0000</pubDate>
      <link>https://dev.to/danyson/how-to-delete-remote-commits-in-git-11h0</link>
      <guid>https://dev.to/danyson/how-to-delete-remote-commits-in-git-11h0</guid>
      <description>&lt;p&gt;Assume you have pushed commits in order A1 =&amp;gt; B2 =&amp;gt; C3 in remote repository.&lt;/p&gt;

&lt;p&gt;Now you want to delete commits C3 and B2.&lt;/p&gt;

&lt;p&gt;The simple solution is as follows using  &lt;code&gt;git reset&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; git reset --hard &amp;lt;A1-commit-id&amp;gt;
 git push -f origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you should avoid doing this if anyone else is working with your remote repository and has pulled your changes C3 and B2.&lt;/p&gt;

&lt;p&gt;That's where &lt;code&gt;git revert&lt;/code&gt; comes in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert --no-commit C3
git revert --no-commit B2
git commit -m "commit message for your reverts"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>github</category>
      <category>git</category>
      <category>devops</category>
    </item>
    <item>
      <title>Mocking Redis in Python's unittest</title>
      <author>Akarshan Gandotra</author>
      <pubDate>Thu, 06 Jan 2022 17:50:16 +0000</pubDate>
      <link>https://dev.to/akarshan96/mocking-redis-in-pythons-unittest-ha2</link>
      <guid>https://dev.to/akarshan96/mocking-redis-in-pythons-unittest-ha2</guid>
      <description>&lt;p&gt;Hello folks,&lt;/p&gt;

&lt;p&gt;This blog will guide you to mock redis without using any new library. Redis is used as cache in almost every application. It's very likely you will be required to mock redis at some point of writing those testcases. Scanning through solution available on internet, I felt the need of way to &lt;em&gt;mock redis&lt;/em&gt; should be documented in a blog.&lt;/p&gt;

&lt;p&gt;So working with the saying üòÇ,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fake it before you make it&lt;br&gt;
mock it before you rock it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start üíÅ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-basics-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Back to Basics ‚ö°Ô∏è
&lt;/h2&gt;

&lt;p&gt;In this section let us have a refresher course on &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;mock&lt;/code&gt;, &lt;code&gt;side_effect&lt;/code&gt; and &lt;code&gt;return_value&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mock"&gt;
  &lt;/a&gt;
  1. Mock
&lt;/h3&gt;

&lt;p&gt;A typical piece of code consists of is objects, function calls and variables. While writing tests we don't want to actual objects/methods/class-methods to execute, so we can replace it with a mock object or mock call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-patch"&gt;
  &lt;/a&gt;
  2. Patch
&lt;/h3&gt;

&lt;p&gt;We now know that we can mock objects and functional calls but how we can establish for which function we have to associate a particular mock with?&lt;br&gt;
Here patch comes into play, patch is a decorator which accepts fully qualified name of method to be mocked as string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app.function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_another_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have patched function method which will automatically send a positional argument to the function you're decorating. Usually this position argument is an instance of &lt;code&gt;MagicMock&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-return-value"&gt;
  &lt;/a&gt;
  3. Return Value
&lt;/h3&gt;

&lt;p&gt;While writing tests we require mock method or mock class method to return a particular value. We can add the expected return value in &lt;strong&gt;return_value&lt;/strong&gt; attribute of MagicMock instance.&lt;/p&gt;

&lt;p&gt;Suppose we have a RandomObject class where we have to mock method &lt;code&gt;function&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app.module.RandomObject"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_another_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"test-value"&lt;/span&gt;
    &lt;span class="n"&gt;random_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"test-value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-side-effect"&gt;
  &lt;/a&gt;
  4. Side Effect
&lt;/h3&gt;

&lt;p&gt;This is typically used to test if Exceptions are handled correctly in the code. When the patched function is called, the exception mentioned in &lt;strong&gt;side_effect&lt;/strong&gt; is raised.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"app.module.RandomObject"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_another_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-message"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;random_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#leveraging-sideeffect"&gt;
  &lt;/a&gt;
  Leveraging side_effect ‚òÑÔ∏è
&lt;/h2&gt;

&lt;p&gt;Another way to use side_effect is we can pass a list of possible values which we want to bind with side effect attribute. Each time the patched function is called the mock will return next element in the list of values. Also we can have any set of data type (not specifically Exceptions).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;side_effect_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dummy_val"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"dummy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;  &lt;span class="c1"&gt;# list of values on which we want to be returned.
&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;side_effect_list&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'dummy_val'&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'dummy'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To leverage side_effect even further, we can even side_effect attribute with a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;

&lt;span class="n"&gt;foo_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# function which we need to bind with side effect
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo_function&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'bar'&lt;/span&gt;
&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'foo'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mocking-redis"&gt;
  &lt;/a&gt;
  Mocking Redis üîò
&lt;/h2&gt;

&lt;p&gt;Now let's discuss how we can now use above to mock redis. Let us for now consider 5 most common redis methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hget&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since redis is a key-value data store, we can use dictionary for caching these key-value pairs. We can then define above methods in a MockRedis class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockRedis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us write function that will mimic the &lt;a href="https://redis.io/commands/GET"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; functionality. The get method will simply take a key and return its value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://redis.io/commands/set"&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; functionality puts the value in the cache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil in case of some issue
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly let us implement &lt;a href="https://redis.io/commands/hset"&gt;&lt;code&gt;hset&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://redis.io/commands/hget"&gt;&lt;code&gt;hget&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://redis.io/commands/exists"&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/a&gt; in the class MockRedis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockRedis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil in case of some issue
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# return nil in case of some issue
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache_overwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;mock_redis_method.py&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now let us mock redis now, for that we have to patch StrictRedis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock_redis_method&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MockRedis&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"redis.StrictRedis"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_01_redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_redis&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# initialising the cache with test values 
&lt;/span&gt;    &lt;span class="n"&gt;redis_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Bar"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;mock_redis_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MockRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# binding a side_effect of a MagicMock instance with redis methods we defined in the MockRedis class.
&lt;/span&gt;    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mock_redis_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# StrictRedis mock return_values is set as above mock_redis_method.
&lt;/span&gt;    &lt;span class="n"&gt;mock_redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_redis_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! it's done üç∏. We have successfully mocked redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-content"&gt;
  &lt;/a&gt;
  Bonus Content ‚úÖ
&lt;/h2&gt;

&lt;p&gt;We can similarly mock requests library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"requests.get"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"requests.post"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_02_external_api_calls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# request and response are mapped in a dict
&lt;/span&gt;    &lt;span class="n"&gt;request_response_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"https://dummy-host?key=foo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;"https://dummy-host?key=bar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Not Found"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockResponse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_data&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;

        &lt;span class="c1"&gt;# request.json()
&lt;/span&gt;        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mock_request_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_response_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MockResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# get and post method return similar kind of response. 
&lt;/span&gt;    &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_request_method&lt;/span&gt;
    &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_request_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cheers üçª &lt;/p&gt;

</description>
      <category>redis</category>
      <category>mock</category>
      <category>python</category>
      <category>unittest</category>
    </item>
    <item>
      <title>[week1] Days 4 - Mini project around js and regex</title>
      <author>Black-Thor</author>
      <pubDate>Thu, 06 Jan 2022 17:45:55 +0000</pubDate>
      <link>https://dev.to/blackthor/week1-days-4-mini-project-around-js-and-regex-4di8</link>
      <guid>https://dev.to/blackthor/week1-days-4-mini-project-around-js-and-regex-4di8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mini-project"&gt;
  &lt;/a&gt;
  Mini project
&lt;/h2&gt;

&lt;p&gt;Today I made a password verification by following online guides and from the knowledge acquired during the learning of regex , u can find it on &lt;a href="https://codepen.io/stephane-duboze/pen/JjrZgmM"&gt;codepen.io&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-find-a-real-problem"&gt;
  &lt;/a&gt;
  I find a real problem
&lt;/h2&gt;

&lt;p&gt;While doing this project I realized how difficult it is to initialize a project so I'm writing it down for later in order to improve this aspect &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#freecodecamp-debbuging"&gt;
  &lt;/a&gt;
  freeCodeCamp Debbuging
&lt;/h2&gt;

&lt;p&gt;On the freecode camp of the day I discovered a new way to use console to debug my programs&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;console.clear()&lt;br&gt;
Cleans the contents of the console&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;console.log(..)&lt;br&gt;
Allows you to display messages in the console. You can use wildcards and additional arguments with this method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;console.debug(..)&lt;br&gt;
You can only see the contents printed by the console.debug(..) method if your Console is set to Log-Level="debug". By default, Log-Level="log"&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;console.info(..)
Displays an informative message in the browser console. In Firefox and Chrome, a small i icon is displayed in front of the message.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;firsname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="cm"&gt;/*{firsname: 'John', lastname: 'Doe'}
firsname: "John"
lastname: "Doe"*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;console.warn(..)
Writes in the browser console the content of the object in the form of a warning with a warning pictogram in front of the line.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;console.error(..)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writes in the browser console the content of the object in the form of a error with a warning pictogram in front of the line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you see any spelling or grammar mistakes, can you notify me (I am still improving my English) ? thank you !&lt;/li&gt;
&lt;li&gt;if you have any tips for improving my post feel free to comment on the post&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>regex</category>
    </item>
  </channel>
</rss>
