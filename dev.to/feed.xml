<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Removing a .env file from Git history</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 10 Nov 2021 05:45:18 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/removing-a-env-file-from-git-history-3gao</link>
      <guid>https://dev.to/dailydevtips1/removing-a-env-file-from-git-history-3gao</guid>
      <description>&lt;p&gt;I'm sure this happens to everyone sometimes. You accidentally pushed a file with secrets or a password that shouldn't have gotten into the Git history.&lt;/p&gt;

&lt;p&gt;In the following example, I "accidentally" pushed my &lt;code&gt;.env&lt;/code&gt; file to Git simply because I forgot to &lt;a href="https://daily-dev-tips.com/posts/git-basics-ignore-files-from-being-committed/"&gt;add it to me &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21QBlo7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635576880897/T3V0EKt1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21QBlo7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635576880897/T3V0EKt1o.png" alt="Removing a secret file from Git history" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#removing-the-file-right-away"&gt;
  &lt;/a&gt;
  Removing the file right away
&lt;/h2&gt;

&lt;p&gt;The best thing to do now is to remove the file right away and add it to your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;In my case, I added the following to the &lt;code&gt;.gitignore&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Secret file
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try and push that to see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2rsOctlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577020667/RI8Em9uCt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2rsOctlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577020667/RI8Em9uCt.png" alt="Gitignore doesn't work on existing files" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep, the &lt;code&gt;.gitignore&lt;/code&gt; file doesn't untracked already committed changes. So how can we fix this now?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#removing-a-file-from-git-only"&gt;
  &lt;/a&gt;
  Removing a file from Git only
&lt;/h2&gt;

&lt;p&gt;You can remove a file from Git by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;--cached&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we then push this change, you will see that the file is gone in GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STihtosB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577175978/MPGXB39KG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STihtosB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577175978/MPGXB39KG.png" alt="Removing a file from Git" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this didn't completely solve our issue. If we look at our Git history, we can still find the file and expose the secrets!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rt_nZy9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577465128/VVukCpfUd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rt_nZy9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577465128/VVukCpfUd.png" alt="Exposing secrets through Git history" width="664" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#completely-remove-a-file-from-git-history"&gt;
  &lt;/a&gt;
  Completely remove a file from Git history
&lt;/h2&gt;

&lt;p&gt;To remove the file altogether, we can use the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git filter-branch &lt;span class="nt"&gt;--index-filter&lt;/span&gt; &lt;span class="s2"&gt;"git rm -rf --cached --ignore-unmatch .env"&lt;/span&gt; HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get some warnings about this messing up your history as this goes through your whole history and 100% removes its occurrence.&lt;/p&gt;

&lt;p&gt;To push this, you have to run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we look at our history, we can still see the commits that include this &lt;code&gt;.env&lt;/code&gt; file, but the content is empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCL-hIgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577747098/p840Qj48P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCL-hIgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635577747098/p840Qj48P.png" alt="Fully removed file in Git" width="865" height="174"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few, thanks for having our back Git!&lt;/p&gt;

&lt;p&gt;You can find the repo it tried this in on &lt;a href="https://github.com/rebelchris/git-test"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is API Testing?
</title>
      <author>Fleek It Solutions</author>
      <pubDate>Wed, 10 Nov 2021 05:24:49 +0000</pubDate>
      <link>https://dev.to/fleek_it/what-is-api-testing-148</link>
      <guid>https://dev.to/fleek_it/what-is-api-testing-148</guid>
      <description>&lt;p&gt;If a user decides to book a flight and pays via a third-party payment service such as PayPal, API testing should be performed to ensure that the payment service and travel booking systems communicate effectively, process the payment, and keep the user's sensitive data secure. Without testing the APIs themselves, developers and testers would be stuck waiting for the entire application stack to be assembled before they can run the test.&lt;/p&gt;

&lt;p&gt;API testing is a type of software testing, including direct API testing, and also as a part of integration testing to check whether the API meets the application's functional, reliability, performance, and security expectations. API testing focuses on analyzing business logic and protecting applications and responding to data requests.&lt;/p&gt;

&lt;p&gt;The testing API differs from other types of software tests in that a graphical user interface is not available, however, you need to set up a source environment that calls the API with the required parameters and validates the test result.&lt;/p&gt;

&lt;p&gt;While developers typically test only the basic functionality on which they are working, testers are challenged to test the functionality, performance, and security of an API, regardless of whether it is a performance, security, functional correctness, or just a health check. Performance testing enables that an API can respond to requests of a certain size or to meet system requirements quickly enough.&lt;/p&gt;

&lt;p&gt;API testing, by comparison to UI testing, can typically save up to eight hours - allowing developers to release products faster - confirms that the performance, functionality, security, and reliability of the application are working as expected - Our QA engineers can help your team through the API testing process to ensure that your software application is deployed to a production environment successfully every time.&lt;/p&gt;

&lt;p&gt;When testing APIs, test cases for each endpoint or group of endpoints that are intended to work together (ie functional flow such as logon) can be developed to ensure that the API works as expected for possible known input configurations. At this point, you need to combine application data with the API tests to ensure that the API works as expected for all possible input configurations.&lt;/p&gt;

&lt;p&gt;An API test is a type of software testing that analyzes the output of the first application / database / application to ensure that it meets expected functionality, security, performance and reliability. APIs should be tested in both the testing environment and the development environment to confirm that the software application meets requirements.&lt;/p&gt;

&lt;p&gt;API testing involves testing the application programming interfaces (APIs) directly and as part of integration testing to determine if they meet expectations for functionality, reliability, performance, and security. Since APIs lack a GUI, API testing is performed at the message layer. API testing is critical for automating testing because APIs now serve as the primary interface to application logic and because GUI tests are difficult to maintain with the short release cycles and frequent changes commonly used with Agile software development and DevOps.&lt;/p&gt;

&lt;p&gt;Hope this article helps you to get started with API automation testing using Python. Please share your comment below for any concerns. Happy testing!&lt;/p&gt;

&lt;p&gt;Get to know us more at  &lt;a href="https://www.fleekitsolutions.com/"&gt;https://www.fleekitsolutions.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>softwaretestingcompany</category>
    </item>
    <item>
      <title>Fast &amp; Dynamic ZSH Plugin manager for terminal</title>
      <author>Salvydas Lukosius</author>
      <pubDate>Wed, 10 Nov 2021 05:06:20 +0000</pubDate>
      <link>https://dev.to/sso/fast-dynamic-zsh-plugin-manager-for-terminal-4hmj</link>
      <guid>https://dev.to/sso/fast-dynamic-zsh-plugin-manager-for-terminal-4hmj</guid>
      <description>&lt;p&gt;Zinit is a flexible plugin manager, however, users often feel overwhelmed by its flexible configuration, so Zinit provides tools that can install from so-called packages in GitHub repositories holding a package.json file with the Zinit meta-data in them.It has multiple package-manager like features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run Makefiles.&lt;/li&gt;
&lt;li&gt;Automatically provide shims (i.e.: forwarder scripts) for the binaries.&lt;/li&gt;
&lt;li&gt;Extend $PATH to expose the binaries, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hecuwJBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qturt15504dpl2ms5cdm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hecuwJBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qturt15504dpl2ms5cdm.gif" alt="Example image" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In general, Zinit has many hooks which allow surprising things. In Top 100 taking few positions being one of the best, see &lt;a href="https://z-shell.github.io/Zsh-100-Commits-Clubhttps://z-shell.github.io/Zsh-100-Commits-Club"&gt;Zsh-100-Commits-Club&lt;/a&gt;     &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a4Hk1r6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smowpfofd3201x7xa6xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a4Hk1r6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smowpfofd3201x7xa6xa.png" alt="Usage example" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has a &lt;a href="https://zz.w-ss.io/zinit/wiki"&gt;Zinit Wiki&lt;/a&gt;, &lt;a href="https://z-shell.github.io"&gt;Blog&lt;/a&gt; and &lt;a href="https://github.com/z-shell/"&gt;Github&lt;/a&gt; for detailed  information.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
      <category>programming</category>
      <category>performance</category>
    </item>
    <item>
      <title>Hackoween🎃- My first Hacktoberfest✨</title>
      <author>Preyash</author>
      <pubDate>Wed, 10 Nov 2021 04:36:33 +0000</pubDate>
      <link>https://dev.to/preyash/hackoween-my-first-hacktoberfest-2o95</link>
      <guid>https://dev.to/preyash/hackoween-my-first-hacktoberfest-2o95</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello readers!&lt;/strong&gt; I hope you all are doing good. I'm Preyash, a Computer Science enthusiast, I love programming and web development. Opensource is like the backbone of the dev community. We all help each other fixing and resolving each other's issues. I wasn't very much aware about opensource and I had no clue about Hacktoberfest. But this year one of my friends (he is &lt;a class="mentioned-user" href="https://dev.to/pranavviswanathan"&gt;@pranavviswanathan&lt;/a&gt;
 ), he asked me to take part in Hacktoberfest 2021. And while applying for it we thought that let's apply not only as a participant but also as an Event Organizer, we had plans to organize an event to make people aware about opensource and how they can contribute in it. We conducted our event named "Hackoween🎃", it was a guest lecture and we called our professor Dr Jananki Meena ma'am from VIT Chennai, she explained everything so well. We got amazing reponses from our attendees.&lt;/p&gt; 

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3m8y6aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f9fc8fcgacpqkn8lseg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3m8y6aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f9fc8fcgacpqkn8lseg.png" width="880" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can checkout our website and recording of the session here: &lt;a href="https://gitinto.netlify.app/"&gt;https://gitinto.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this hacktoberfest we also published a repository where people contributed, by the end of Hacktoberfest we managed to get &lt;strong&gt;221&lt;/strong&gt; forks and &lt;strong&gt;35&lt;/strong&gt; stars,  these numbers are not very huge, but for us it was an achievement and we are really proud of it. We managed to do everything from creating website for this event to making certificates for participants, gaining crowd everything in 4-5 days. This Hacktoberfest was the first one for me and really a special one and most importantly I learned a lot. Thanks to my teammates Pranav and Nihal, it was so 
fun working with you both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYxJud6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjlpbttcmifd6uc9eqgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYxJud6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjlpbttcmifd6uc9eqgg.png" width="880" height="828"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
      <category>programming</category>
    </item>
    <item>
      <title>Understanding the Content-Type HTTP Header</title>
      <author>Nicholas Dill</author>
      <pubDate>Wed, 10 Nov 2021 04:18:16 +0000</pubDate>
      <link>https://dev.to/nicholasdill/understanding-the-content-type-http-header-3ejl</link>
      <guid>https://dev.to/nicholasdill/understanding-the-content-type-http-header-3ejl</guid>
      <description>&lt;p&gt;The &lt;code&gt;Content-Type&lt;/code&gt; header is used in web requests to indicate what type of media or resource is being used in the request or response.&lt;/p&gt;

&lt;p&gt;When you send data in a request such as PUT or POST, you pass the &lt;code&gt;Content-Type&lt;/code&gt; header to tell the server what type of data it is receiving. &lt;/p&gt;

&lt;p&gt;When you receive a response from a server, there will be a &lt;code&gt;Content-Type&lt;/code&gt; header as well. It tells the client what type of data is being returned so it knows how to process it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-contenttype-a-required-field"&gt;
  &lt;/a&gt;
  Is Content-Type a required field?
&lt;/h2&gt;

&lt;p&gt;Nope, Content-Type is not a required field. It's not mandatory per the HTTP 1.1 specification.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1"&gt;&lt;/a&gt;&lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1"&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any HTTP/1.1 message containing an entity-body SHOULD include a Content-Type header field defining the media type of that body. If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource. If the media type remains unknown, the recipient SHOULD treat it as type "application/octet-stream".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Still, this can potentially cause problems and make it more difficult for the server to understand what it's receiving from you. To avoid any issues down the road, I suggest you pass this header along regardless.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-contenttype-case-sensitive"&gt;
  &lt;/a&gt;
  Is Content-Type case sensitive?
&lt;/h2&gt;

&lt;p&gt;For your header field names, no.&lt;/p&gt;

&lt;p&gt;If you pass &lt;code&gt;Content-Type&lt;/code&gt; or &lt;code&gt;content-type&lt;/code&gt; or even something very creative like &lt;code&gt;Content-TYPE&lt;/code&gt;... it should work fine!&lt;/p&gt;

&lt;p&gt;From &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2"&gt;&lt;/a&gt;&lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2"&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;4.2 Message Headers&lt;/p&gt;

&lt;p&gt;HTTP header fields, which include general-header (section 4.5), request-header (section 5.3), response-header (section 6.2), and entity-header (section 7.1) fields, follow the same generic format as that given in Section 3.1 of RFC 822 [9]. Each header field consists of a name followed by a colon (":") and the field value. Field names are case-insensitive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The parameter values you pass for this header can depend though.&lt;/p&gt;

&lt;p&gt;Generally, parameter values can be case sensitive and it depends on the value of the parameter.&lt;/p&gt;

&lt;p&gt;For example, the official &lt;a href="https://www.w3.org/TR/html4/charset.html#h-5.2.1"&gt;W3C specs&lt;/a&gt; state "Names for character encodings are case-insensitive". So, a &lt;code&gt;Content-Type: text/html; charset=UTF-8&lt;/code&gt; should be equivalent to &lt;code&gt;Content-Type: text/html; charset=utf-8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These recommendations may also change so I advise using the proper casing from the start so you can relax and not have to worry.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-the-contenttype-and-accept-headers"&gt;
  &lt;/a&gt;
  What is the difference between the Content-Type and Accept headers?
&lt;/h2&gt;

&lt;p&gt;First, the &lt;code&gt;Accept&lt;/code&gt; header is only used in requests (you probably won't see it in responses), while the &lt;code&gt;Content-Type&lt;/code&gt; is used in both requests and responses.&lt;/p&gt;

&lt;p&gt;This is because the &lt;code&gt;Accept&lt;/code&gt; header is used in a request to tell the server what the type of media in the response should be. &lt;/p&gt;

&lt;p&gt;It's like asking the server for information and telling it what kind of information you expect back.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Content-Type&lt;/code&gt; header tells you what the type of media in the current request actually is. &lt;/p&gt;

&lt;p&gt;It's like sending the server a document that asks for information, and this header tells the server what type of document you gave them so they can read it properly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-me-an-example"&gt;
  &lt;/a&gt;
  Show me an example!
&lt;/h3&gt;

&lt;p&gt;If I post an image to a website, my &lt;code&gt;Content-Type&lt;/code&gt; header might be &lt;code&gt;image/jpeg&lt;/code&gt; because the media in this request is a jpeg image. My &lt;code&gt;Accept&lt;/code&gt; header would tell the website what kind of response I want back. If I don't care, my &lt;code&gt;Accept&lt;/code&gt; header would probably be &lt;code&gt;*/*&lt;/code&gt; which means anything works.&lt;/p&gt;

&lt;p&gt;When the website gets my post request with an image, I'll get a response from them. It too will have a &lt;code&gt;Content-Type&lt;/code&gt; header to tell me the type of their response. In this case, it is &lt;code&gt;application/json;charset=utf-8&lt;/code&gt; meaning their server responded with JSON.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-are-the-possible-values-of-the-contenttype-header"&gt;
  &lt;/a&gt;
  What are the possible values of the Content-Type header?
&lt;/h2&gt;

&lt;p&gt;Well, there's a ton. Too many to list here, so I'll cover the most common types which will probably have what you need.&lt;/p&gt;

&lt;p&gt;If you're still curious though, here is the &lt;a href="https://www.iana.org/assignments/media-types/media-types.xhtml"&gt;list of all Content-Type headers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-types"&gt;
  &lt;/a&gt;
  Text Types
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;text/xml&lt;/li&gt;
&lt;li&gt;text/css
&lt;/li&gt;
&lt;li&gt;text/csv
&lt;/li&gt;
&lt;li&gt;text/html
&lt;/li&gt;
&lt;li&gt;text/plain
&lt;/li&gt;
&lt;li&gt;text/javascript &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;image/gif
&lt;/li&gt;
&lt;li&gt;image/png
&lt;/li&gt;
&lt;li&gt;image/jpeg
&lt;/li&gt;
&lt;li&gt;image/svg+xml
&lt;/li&gt;
&lt;li&gt;image/tiff
&lt;/li&gt;
&lt;li&gt;image/x-icon
&lt;/li&gt;
&lt;li&gt;image/vnd.djvu
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#application-types"&gt;
  &lt;/a&gt;
  Application Types
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;application/zip
&lt;/li&gt;
&lt;li&gt;application/pdf
&lt;/li&gt;
&lt;li&gt;application/xml
&lt;/li&gt;
&lt;li&gt;application/ogg
&lt;/li&gt;
&lt;li&gt;application/json
&lt;/li&gt;
&lt;li&gt;application/ld+json
&lt;/li&gt;
&lt;li&gt;application/EDI-X12
&lt;/li&gt;
&lt;li&gt;application/EDIFACT
&lt;/li&gt;
&lt;li&gt;application/javascript
&lt;/li&gt;
&lt;li&gt;application/xhtml+xml
&lt;/li&gt;
&lt;li&gt;application/java-archive &lt;/li&gt;
&lt;li&gt;application/octet-stream
&lt;/li&gt;
&lt;li&gt;application/x-shockwave-flash&lt;/li&gt;
&lt;li&gt;application/x-www-form-urlencoded
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#audio-types"&gt;
  &lt;/a&gt;
  Audio Types
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;audio/mpeg&lt;/li&gt;
&lt;li&gt;audio/x-wav&lt;/li&gt;
&lt;li&gt;audio/x-ms-wma&lt;/li&gt;
&lt;li&gt;audio/vnd.rn-realaudio&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#video-types"&gt;
  &lt;/a&gt;
  Video Types
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;video/quicktime&lt;/li&gt;
&lt;li&gt;video/webm
&lt;/li&gt;
&lt;li&gt;video/mpeg
&lt;/li&gt;
&lt;li&gt;video/mp4
&lt;/li&gt;
&lt;li&gt;video/x-flv
&lt;/li&gt;
&lt;li&gt;video/x-msvideo&lt;/li&gt;
&lt;li&gt;video/x-ms-wmv&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#multipart-types"&gt;
  &lt;/a&gt;
  Multipart Types
&lt;/h3&gt;

&lt;p&gt;These mean there are 2 or more pieces of content, each with their own type as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multipart/mixed&lt;/li&gt;
&lt;li&gt;multipart/related&lt;/li&gt;
&lt;li&gt;multipart/form-data&lt;/li&gt;
&lt;li&gt;multipart/alternative&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Understanding Ethereum Accounts | Externally Owned Accounts vs Contract Accounts</title>
      <author>Srajan Gupta</author>
      <pubDate>Wed, 10 Nov 2021 04:10:04 +0000</pubDate>
      <link>https://dev.to/srajangupta__/understanding-ethereum-accounts-externally-owned-accounts-vs-contract-accounts-2bje</link>
      <guid>https://dev.to/srajangupta__/understanding-ethereum-accounts-externally-owned-accounts-vs-contract-accounts-2bje</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HaIxmsj-YQU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this tutorial, we will learn about Ethereum Accounts and their Properties. We will learn about different types of Ethereum Accounts and Learn to Create our own Ethereum Account using a very useful tool, known as Metamask.&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>blockchain</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Bitcoin Bankathon</title>
      <author>nobodyzees</author>
      <pubDate>Wed, 10 Nov 2021 04:08:21 +0000</pubDate>
      <link>https://dev.to/lorelor/bitcoin-bankathon-49lp</link>
      <guid>https://dev.to/lorelor/bitcoin-bankathon-49lp</guid>
      <description>&lt;p&gt;Banco Hipotecario, a state-owned bank that is currently responding to the changes in Bitcoin regulation, is hosting the first Bitcoin Bankathon to explore how financially inclusive services can be delivered in Web3.&lt;/p&gt;

&lt;p&gt;We are welcoming developers, designers and entrepreneurs across the world to conceptualize and build new applications on a technology platform that is provided by four industry leaders ⁠—  API3, Open Bank Project, Qredo and Sovryn.&lt;/p&gt;

&lt;p&gt;Links&lt;br&gt;
Website - &lt;a href="https://bitcoin-alliance.org"&gt;https://bitcoin-alliance.org&lt;/a&gt;&lt;br&gt;
Discord - &lt;a href="https://discord.com/invite/Ryh7tuMUnf"&gt;https://discord.com/invite/Ryh7tuMUnf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Articles&lt;br&gt;
&lt;a href="https://www.cityam.com/bitcoin-bankathon-looks-to-find-el-salvadors-financial-future/"&gt;https://www.cityam.com/bitcoin-bankathon-looks-to-find-el-salvadors-financial-future/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bitcoin-alliance.org/en/20211019-Banco-Hipotecario-Invites-Innovators-Build-Future-Banking-El-Salvador/"&gt;https://bitcoin-alliance.org/en/20211019-Banco-Hipotecario-Invites-Innovators-Build-Future-Banking-El-Salvador/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.elsalvador.com/noticias/negocios/banco-hipotecario-concurso-aplicaciones-bitcoin/891801/2021/"&gt;https://www.elsalvador.com/noticias/negocios/banco-hipotecario-concurso-aplicaciones-bitcoin/891801/2021/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hackathon</category>
      <category>programming</category>
      <category>blockchain</category>
      <category>bitcoin</category>
    </item>
    <item>
      <title>The Benefits obtained to your Business through Shopify Plus Experts in Australia</title>
      <author>Harris Walker</author>
      <pubDate>Wed, 10 Nov 2021 04:07:41 +0000</pubDate>
      <link>https://dev.to/vrinsoftau1/the-benefits-obtained-to-your-business-through-shopify-plus-experts-in-australia-cgn</link>
      <guid>https://dev.to/vrinsoftau1/the-benefits-obtained-to-your-business-through-shopify-plus-experts-in-australia-cgn</guid>
      <description>&lt;p&gt;Most of the plan and services that Shopify has to offer is for small business or mid-sized businesses. To help them expand their business more by offering certain e-commerce benefits. Whereas Shopify Plus is for the high growth enterprise-level of the company and helps their high profile company grow more online.&lt;/p&gt;

&lt;p&gt;If you already have a large e-commerce site or are planning to have one, &lt;a href="https://www.vrinsoft.com.au/benefits-obtained-business-shopify-plus-experts-australia/"&gt;&lt;strong&gt;Shopify Plus Experts&lt;/strong&gt;&lt;/a&gt; will help you select the proper way of going and help your high-volume business grow more.&lt;/p&gt;

&lt;p&gt;This blog is purely designed to make you understand in detail all about Shopify Plus on what they have to offer your online business.&lt;/p&gt;

&lt;p&gt;Shopify Plan&lt;/p&gt;

&lt;p&gt;Depending on the scale of business customers can fit to any of the three shopify plans. That includes the following plans&lt;/p&gt;

&lt;p&gt;• Basic Shopify:&lt;/p&gt;

&lt;p&gt;In this plan Shopify covers all the basic needs of the e-commerce store and is much cheaper and affordable for the small store business owners. This is kind of a starting plan.&lt;/p&gt;

&lt;p&gt;• Shopify:&lt;/p&gt;

&lt;p&gt;From smaller to mid-sized business platforms the owners can up board onto Shopify. This platform including certain benefits also offers tools many users are looking for continuing bringing new customers and upgrading to a big scale.&lt;/p&gt;

&lt;p&gt;• Advances Shopify:&lt;/p&gt;

&lt;p&gt;For a large scale or say the growing business that needs access to many advanced level features and tools Shopify Plus is the ideal choice.&lt;/p&gt;

&lt;p&gt;What is Shopify Plus?&lt;/p&gt;

&lt;p&gt;While an increase of price at all different plans it adds up more features and tools for benefitting the business online. Users have access to the complete features that Shopify Plus has to offer, removes all barriers and has total control given to users.&lt;/p&gt;

&lt;p&gt;Some largest benefit features users can get after having Shopify Plus includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unlimited Bandwidth&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This e-commerce solution offers unlimited bandwidth whose servers are reliable, fully supported, and flexible because it has the capability to process 8000 orders per minute with 200TB storage capacity. Your store will be able to handle fast checkout experience.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Uptime&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This feature means that your site will never go down. You need not worry because it means your business will be up and running all the time. With Shopify Plus, there is no problem regarding loss in revenue due to technical issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hosting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shopify Plus is hosted with scalable SaaS which gives best ecommerce hosting solutions. And so you don’t have to worry about hosting your store. It uses such compliant servers that your business will be able to store all necessary information like email legally that ensures your customer’s information has the same kind of security that a bank has.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Announcement for Wholesale Management&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This feature gives the business owner the power to run a separate wholesale site other than a pre-existing Shopify Plus account. This means all those orders and management can be in the same Shopify dashboard making the complete activity to navigate ebay and simply.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scaling your Business and help choosing path less resistance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not only this feature helps you save your money but also you’ll have websites that are always up-to-date with the latest trends by fixing technical bugs. And because of this you won’t require any tech support to fix your technical issues. As &lt;a href="https://www.vrinsoft.com.au/dont-feel-stuck-instead-protect-retail-business-shopify/"&gt;&lt;strong&gt;Shopify Development Experts&lt;/strong&gt;&lt;/a&gt; has already set everything for your business. And choosing the right decision for your business that offers least resistance and minimal hassle.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Customer-friendly features&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ability to offer stylish, adaptable solutions that are simultaneously responsive. Business owners can customise any impressive degree including layouts. Shopify Plus allows complete Javascript and CSS control, includes modifications or can literally cater any demand so business owners can spend time focusing on other important things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Launchpad- Welcoming high volume traffic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This allows your product visibility, scripts, themes, discounts, and more defined start to end time because of a scheduling tool named Launchpad inside your Shopify Plus admin.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Custom Sales and Discounting functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Through the Shopify Discount API, business owners offer their customers who reach a specific balance in their cart and get a customized percentage off of their order considering an example of buy one get one free that betters the shipping functionality and thus helps your business expand more due to many customers attracted to your sales.&lt;/p&gt;

&lt;p&gt;There are incredible features and tools experts in Australia who have to offer you the &lt;a href="https://www.vrinsoft.com.au/shopify-development/"&gt;&lt;strong&gt;best Shopify Developers in Melbourne&lt;/strong&gt;&lt;/a&gt; and can get the best solution for your enterprise level business. So partner your store with Shopify Plus Partner Australia and expand your growing business.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>If-Else or Switch-Case: Which One to Pick?</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Wed, 10 Nov 2021 03:59:21 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/if-else-or-switch-case-which-one-to-pick-4p3h</link>
      <guid>https://dev.to/sumusiriwardana/if-else-or-switch-case-which-one-to-pick-4p3h</guid>
      <description>&lt;p&gt;If you are a newbie to programming and JavaScript, you might be confused about which conditional statements to use, especially between if-else and switch-case statements. &lt;/p&gt;

&lt;p&gt;When I first learned about conditional statements, I thought it was simple enough, and I could use either if-else or switch in any case. But then, when I learned more about this topic and tried to apply it to some problems, I got confused about which one I should use, what's the exact difference, and how I should choose the correct one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi1PUv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636281793918/GvLEIdJIV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi1PUv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636281793918/GvLEIdJIV.jpeg" alt="FDCKZ2RWYAIMx_2.jpeg" width="880" height="981"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I struggled over understanding the difference and application of these two conditional statements and dug deeper into the topic. &lt;/p&gt;

&lt;p&gt;In this article, I will explain these two concepts and provide a comparison chart, so you will understand how you can use if-else and switch-case in different scenarios according to the complexity. &lt;/p&gt;

&lt;p&gt;Before jumping into details, let's refresh our memory on why we use conditional statements in our programs. &lt;/p&gt;

&lt;p&gt;As human beings, we make various decisions all the time that affect our lives. For example, if we have some free time, we have to decide what to do, whether to rest, watch something, call someone or maybe do something productive. &lt;/p&gt;

&lt;p&gt;Conditional statements allow us to make such decisions based on a condition in JavaScript. If the condition is true, we can perform one action, otherwise, we can perform a different action. &lt;/p&gt;

&lt;p&gt;So if-else and switch-case both allow us to make these decisions based on a condition. If you want to refresh your memory on how the conditional works, check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"&gt;MDN article&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ifelse-and-elseif-statements"&gt;
  &lt;/a&gt;
  The if-else and else-if statements
&lt;/h2&gt;

&lt;p&gt;As newbies, we all love if-else statements! 😂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CMjbv3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636282542849/7euXxLSu8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CMjbv3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636282542849/7euXxLSu8.gif" alt="if-else-matrix.gif" width="400" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If-else statement takes a specific condition and checks whether the condition is truthy or falsy. If the condition is true, then the &lt;code&gt;if&lt;/code&gt; statement executes a specific code block. If the condition is false, then the &lt;code&gt;else&lt;/code&gt; statement executes a different code block. &lt;/p&gt;

&lt;p&gt;Let's take a simple example to understand how this works. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario One&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine that you are the class teacher for grade 5, class C. You have to check students' grades based on their marks, and you only have to check whether the student has passed or failed. Let's check one of the student's grades based on their marks using an if-else statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;studentGrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You have passed the exam! 🥳&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You have failed the exam!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentGrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// "You have passed the exam! 🥳"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to the above example, we have written a simple function that takes student marks and checks whether it's above 50 or below  50. If the marks entered are 50 or above, then the &lt;code&gt;if&lt;/code&gt; block executes. If it's below 50, then the &lt;code&gt;else&lt;/code&gt; block executes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario Two&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, imagine taking a step further and giving the result based on the students' specific grades. For example, if the student gets an "A+", the student receives "Nailed It! 🥳". If the student gets a "D", the result would be "Failed 😢".   &lt;/p&gt;

&lt;p&gt;To have multiple choices like this, we can use the else-if statements to chain the extra choices. &lt;/p&gt;

&lt;p&gt;See below code written according to the second scenario with else-if statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;studentFinalResultIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nailed It! 🥳&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barely Survived 😌&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;cconsole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentFinalResultIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// "Nailed It! 🥳"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to the above function, we use different conditional statements to provide students' results depending on the grade. Except for the first code block, which is the &lt;code&gt;if&lt;/code&gt; block, all the other conditions are tested in &lt;code&gt;else if&lt;/code&gt; blocks. And if none of the conditions are true, the last &lt;code&gt;else&lt;/code&gt; executes its code block. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#switch-statements"&gt;
  &lt;/a&gt;
  Switch statements
&lt;/h2&gt;

&lt;p&gt;The switch statement is a multiple-choice selection statement. Once you have given the choices and relevant expressions for each choice, It looks through the choices until it finds the choice that matches the expression and executes it. &lt;/p&gt;

&lt;p&gt;Let's rewrite the second scenario using the switch statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;studentFinalResultSwitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nailed It! 🥳&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barely Survived 😌&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentFinalResultSwitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// "Nailed It! 🥳"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have the main condition that has many choices. When we check the specific grade, it checks which expression the grade belongs to and then runs that case block. In this case, when the grade is an "A+", it runs &lt;code&gt;case "A+":&lt;/code&gt; and returns the result "Nailed It! 🥳". &lt;/p&gt;

&lt;p&gt;Now you might be thinking both if-else and switch statements are pretty much alike, and maybe if-else seem more straightforward to use. And you might have your reasons for choosing one over the other. So before jumping to any conclusions, let's check the differences between if-else and switch statements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison-chart"&gt;
  &lt;/a&gt;
  Comparison Chart
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Basic Terms&lt;/th&gt;
&lt;th&gt;If-else&lt;/th&gt;
&lt;th&gt;Switch-case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Check the testing expression&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An if-else statement can test expression based on a range of values or conditions.&lt;/td&gt;
&lt;td&gt;A switch statement tests expressions based only on a single integer, enumerated value, or string object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ideal for&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;if-else conditional branches are great for variable conditions that result into Boolean.&lt;/td&gt;
&lt;td&gt;Switch statements are ideal for fixed data values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Creation of jump table&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;In the if-else case, we do not create a jump table, and all cases are executed at runtime.&lt;/td&gt;
&lt;td&gt;In switch case, we create jump table on compiled time only selected case is executed on runtime.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Type of search&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;If else implements linear search.&lt;/td&gt;
&lt;td&gt;Switch implements binary switch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Condition &amp;amp; expression&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Having different conditions is possible.&lt;/td&gt;
&lt;td&gt;We can only have one expression.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Evaluation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;If-else statement evaluates integer, character, pointer or floating-point type or Boolean type.&lt;/td&gt;
&lt;td&gt;Switch statement evaluates only character or integer value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sequence of execution&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is either if-statement will be executed, or else-statement is executed.&lt;/td&gt;
&lt;td&gt;Switch case statement executes one case after another till a break statement appears or until the end of the switch statement is reached.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Default execution&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;If the condition inside if statements are false, then by default, the else statement is executed if created.&lt;/td&gt;
&lt;td&gt;If the condition inside switch statements does not match with any of the cases, for that instance, the default statement is executed if created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Values are based on the constraint.&lt;/td&gt;
&lt;td&gt;Values are based on user choice.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Use&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is used to evaluate a condition to be true or false.&lt;/td&gt;
&lt;td&gt;It is used to test multiple values of the same variable or expression like 1, 2, 3, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Editing&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is difficult to edit the if-else statement if the nested if-else statement is used&lt;/td&gt;
&lt;td&gt;It is easy to edit switch cases as they are recognized easily.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;According to the above comparison, you can see the decision of which conditional statement to choose is depending on the scenario and its complexity. For example, we can select both if-else and switch statements for the second scenario since we are just checking one report, which might not make any difference in performance except readability.&lt;/p&gt;

&lt;p&gt;Let's take a step further and make our scenario a little bit complicated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario Three&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What if we want to print grades for all the students in all classes? Imagine that we have ten classes for grade 5. And each class includes 50 students. So altogether, we have to check and print the results for around 500 students. &lt;/p&gt;

&lt;p&gt;If we use the if-else statement for this, we might run into a slight performance delay. It's because, during the execution, the if-else statement always executes the expression to check whether the condition is satisfied or not. Things would get slower when there are more conditions to check and when the choices get complex. &lt;/p&gt;

&lt;p&gt;On the other hand, a switch statement works comparatively faster because the compiler generates a jump table for switch-cases during compile time. So when the code runs, instead of checking which cases are satisfied, it only decides which cases should be executed. In our third scenario, to generate reports for many students, the switch-case might be the better approach. &lt;/p&gt;

&lt;p&gt;I hope now you can understand that based on the above comparison and our examples, both statements have their place in the code and it's up to you to choose which one suits which scenario. There is no right or wrong way of doing it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how can we choose which statement to use?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnGuKNb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636287323886/smiwyj8nh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnGuKNb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636287323886/smiwyj8nh.png" alt="if-switch.png" width="503" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choosing one over the other is not that straightforward. Here are some tips when choosing one over the other;&lt;/p&gt;

&lt;p&gt;You can use if-else when:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The condition result is a &lt;code&gt;boolean&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The conditions are complex. For example,  you have conditions with multiple &lt;a href="https://dasha.ai/en-us/blog/beginners-guide-js-operators-part-2"&gt;logical operators.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use a switch-case when: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are multiple choices for an expression.&lt;/li&gt;
&lt;li&gt;The condition is based on a predefined set of values such as enums, constants, known types. For example, error codes, statuses, states, object types, etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So based on performance, readability, understandability, changeability, you would have to decide whether to use if-else statements or switch statements. When you read more code and write more code, eventually, you will start figuring out which one is suitable for which scenario; it comes with practice. &lt;/p&gt;

&lt;p&gt;Also, there are more approaches if you want to avoid the conditionals as much as you can, especially in JavaScript; array lookup or object lookup are a couple of common approaches. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h3&gt;

&lt;p&gt;You might find it confusing to decide when to use which statement as a newbie, but it gets better with more practice. Remember that every case requires a specific solution but there's no right or wrong answer. And it's up to you to choose a suitable solution based on your experience. So I hope that the comparison provided here makes it easier for you to identify the difference between if-else and switch statements and not pick one side. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the only tool you have is a hammer, you tend to see every problem as a nail - Abraham Maslow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Happy coding! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jeygZ8Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636288469628/KUlvVssUn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jeygZ8Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636288469628/KUlvVssUn.gif" alt="giphy.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/high-performance-javascript/9781449382308/ch04.html"&gt;Algorithms and Flow Control&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/switch"&gt;Switch Statement&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"&gt;If-else Statement&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"&gt;Making decisions in your code — conditionals&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://vivadifferences.com/if-else-vs-switch-case/"&gt;Difference Between If-else and Switch Case&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article was originally published on  &lt;a href="https://dasha.ai/en-us/blog/javascript-if-else-or-switch-case"&gt;Dasha&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Haskell FizzBuzz in JavaScript</title>
      <author>Caleb Weeks</author>
      <pubDate>Wed, 10 Nov 2021 03:56:34 +0000</pubDate>
      <link>https://dev.to/weeksseth/haskell-fizzbuzz-in-javascript-1fnm</link>
      <guid>https://dev.to/weeksseth/haskell-fizzbuzz-in-javascript-1fnm</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/weeksseth/haskell-quicksort-in-javascript-3lma"&gt;last post&lt;/a&gt;, I covered a few Haskell features along with their JavaScript equivalents (or lack thereof). The resulting code was not practical for production usage, but demonstrated how certain features of JavaScript could be used to write declarative code. This post will focus on conditional logic with some more practical takeaways.&lt;/p&gt;

&lt;p&gt;The ubiquitous &lt;a href="https://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/"&gt;FizzBuzz coding interview&lt;/a&gt; question has &lt;a href="https://www.parsonsmatt.org/2016/02/27/an_elegant_fizzbuzz.html"&gt;many potential solutions&lt;/a&gt;, but one simple solution in Haskell looks like &lt;a href="https://wiki.haskell.org/Fizzbuzz"&gt;this&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;fizz&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;fizz&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fizz"&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Buzz"&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The four lines containing the pipe (&lt;code&gt;|&lt;/code&gt;) character are called guards, and they are simply syntactic sugar for a bunch of if else blocks or a switch expressions. The part to the left of the equals sign is a predicate (an expression that evaluates to true or false), and the part on the right is the result. Traditionally, the FizzBuzz prompt requires each result to be printed to the console, but let's create an array that contains the results instead. I'll leave out the parts that generates the array of numbers from 1 to 100 and prints to the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-blocks"&gt;
  &lt;/a&gt;
  If blocks
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fizz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That looks pretty good already, but there are a few syntactical tricks to get it to look this nice. First of all, if there is only a single statement under an if condition, the curly brackets can be omitted. Secondly, since the if statements contain return statements which will exit the function, the &lt;code&gt;else if&lt;/code&gt; can be simply replaced with &lt;code&gt;if&lt;/code&gt;. Finally, the otherwise condition just returns a stringified number as the defaults case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#switch-statement"&gt;
  &lt;/a&gt;
  Switch statement
&lt;/h2&gt;

&lt;p&gt;This seems like a problem that the switch statement was born to solve. Each case expression is compared against the switch expression for strict equality. Most of the time, you'll see a variable placed in the switch expression and a number or string literal for each case, but you can put any expression in either of those positions. Since we are looking for when the modulus is zero, we'll compare against the value zero.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fizz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ternary-expressions"&gt;
  &lt;/a&gt;
  Ternary expressions
&lt;/h2&gt;

&lt;p&gt;Both if blocks and switch blocks are statements, so we have to wrap them in a function block and use the return keyword to extract the values from them. Ternary operators are expressions, so no return keyword is required. There is also no syntactical tricks required to achieve a relatively clean implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fizz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#which-is-best"&gt;
  &lt;/a&gt;
  Which is best?
&lt;/h2&gt;

&lt;p&gt;Which of these three implementations is the best? Well, it all comes down to preference. The if blocks require the fewest lines of code without sacrificing readability, but your linter might not like the syntactical tricks depending on your settings. The switch statement doesn't require a manual comparison against zero for all three cases, but looks rather verbose when formatted under normal settings. The ternary operator is the closest to Haskell because it is simply an expression, but is is arguably the hardest to read.&lt;/p&gt;

&lt;p&gt;If we really want to make it look like Haskell, we could use &lt;a href="https://ramdajs.com/docs/#cond"&gt;Ramda's&lt;/a&gt; &lt;code&gt;cond&lt;/code&gt; along with a helper function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ramda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fizz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;multOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;multOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;multOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sadly, JavaScript does not have the best ergonomics for conditional expressions and instead favors conditional statements, but with a little syntactical trickery and great libraries such as Ramda, you can create concise and clean code.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>Haciendo deploy de una app en react a GitHub Pages</title>
      <author>Gerald González Zeledón</author>
      <pubDate>Wed, 10 Nov 2021 03:48:00 +0000</pubDate>
      <link>https://dev.to/gedgonz/haciendo-deploy-de-una-app-en-react-a-github-pages-95p</link>
      <guid>https://dev.to/gedgonz/haciendo-deploy-de-una-app-en-react-a-github-pages-95p</guid>
      <description>&lt;p&gt;Hola lectores! 👋, hoy les traigo otra.. guía de como hacer un deploy.. pero esta vez es con react!&lt;/p&gt;

&lt;p&gt;he estado estudiando un poco esta librería y la he sentido bastante sencilla en comparación con angular, seguramente has leído, visto o escuchado algún tutorial o persona que la curva de aprendizaje con angular es muy alta y es cierto. Pero con react no dure ni una semana en aprender a crear componentes, es cierto que me hace falta mucho por aprender, pero como entrada no me parece mal esta librería. Bueno continuemos con el tema principal por el cual estas acá! 🤓&lt;/p&gt;

&lt;p&gt;Estos son los pasos para poner nuestra app react en github pages:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paso-1"&gt;
  &lt;/a&gt;
  Paso 1
&lt;/h3&gt;

&lt;p&gt;Vas a necesitar crear un repositorio en tu github&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXlMl-3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbun0a36an92ubpz5bul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXlMl-3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbun0a36an92ubpz5bul.png" alt="Creación del repositorio" width="820" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paso-2"&gt;
  &lt;/a&gt;
  Paso 2
&lt;/h3&gt;

&lt;p&gt;En este paso vas a necesitar tener un proyecto o crear uno, para ello puede utilizar la herramienta &lt;strong&gt;&lt;em&gt;create-react-app&lt;/em&gt;&lt;/strong&gt; o puedes crearla desde cero eso ya depende de ti, en esta caso te muestro el comando para crearlo con la herramienta &lt;strong&gt;&lt;em&gt;create-react-app&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app myReactApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  Paso 3
&lt;/h3&gt;

&lt;p&gt;En este paso necesitarás instalar la siguiente dependencia &lt;a href="https://www.npmjs.com/package/gh-pages"&gt;gh-pages&lt;/a&gt;, nos vamos a nuestra terminal y ejecutamos el siguiente comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npm i gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#paso-4"&gt;
  &lt;/a&gt;
  Paso 4
&lt;/h3&gt;

&lt;p&gt;En este paso configuraremos nuestro archivo Package.json con lo siguiente:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#41-homepage"&gt;
  &lt;/a&gt;
  4.1 homepage
&lt;/h4&gt;

&lt;p&gt;Se agregará un nuevo elemento para colocar la ubicación donde estará ubicado nuestro sitio(URL completa)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJAQWdCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wijnzs2p437idzx9vjrd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJAQWdCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wijnzs2p437idzx9vjrd.jpg" alt="Configuración previa1" width="480" height="416"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#42-predeploy-y-deploy"&gt;
  &lt;/a&gt;
  4.2 predeploy y deploy
&lt;/h4&gt;

&lt;p&gt;Se agregará estos nuevos elementos en la sección de script, esto para ejecutar nuestro build y nuestro deploy desde nuestra consola, cabe de recalcar que estos nombres(predeploy y deploy) puede definirlos como usted estime conveniente&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsCFJH5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kowqp1p8rb8awecn1kh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsCFJH5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kowqp1p8rb8awecn1kh.jpg" alt="Configuración previa2" width="326" height="212"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#paso-5"&gt;
  &lt;/a&gt;
  Paso 5
&lt;/h3&gt;

&lt;p&gt;Una vez que tengamos esta configuración tendremos todo listo para hacer el despliegue de nuestra aplicación en react hacia github pages.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#51-creando-el-build-de-nuestro-proyecto"&gt;
  &lt;/a&gt;
  5.1 Creando el build de nuestro proyecto
&lt;/h4&gt;

&lt;p&gt;Una vez definidos los comandos en la sección de los script los ejecutaremos desde nuestra terminal preferida.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npm run predeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#52-haciendo-deploy-hacia-github-pages"&gt;
  &lt;/a&gt;
  5.2 Haciendo deploy hacia github pages
&lt;/h4&gt;

&lt;p&gt;Una vez creado nuestro build, ya estamos listo para hace nuestro deploy!! 🤘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;si todo ha salido bien en la terminal nos indicara que se realizó el deploy en github pages ☕️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Published
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nota"&gt;
  &lt;/a&gt;
  Nota
&lt;/h3&gt;

&lt;p&gt;Si su app está trabajando con &lt;strong&gt;&lt;em&gt;react-router-dom&lt;/em&gt;&lt;/strong&gt;, será necesario agregar el basename en la etiqueta  a como se muestra en la siguiente imagen, esto para que github redirccion bien las rutas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwRKrqxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euuknymov8xrm05vq518.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwRKrqxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euuknymov8xrm05vq518.png" alt="Configuración ruta" width="442" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si tú sabes hacerlo de una forma más simple  muéstrame en los comentarios te lo agradecería mucho! 🙏&lt;/p&gt;

&lt;p&gt;te dejo el link de proyecto donde aplico lo explicado anteriormente: &lt;a href="https://github.com/GedGonz/reactMovie"&gt;reactMovie&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Bueno eso ha sido todo para este post, espero que sirva de ayuda a otro como yo que busca como aprender cada día en este mundo tecnológico.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>npm</category>
      <category>gedgonz</category>
    </item>
    <item>
      <title>Ecommerce Shipment Tracking API PHP-demo/create_tracking</title>
      <author>KeyDelivery</author>
      <pubDate>Wed, 10 Nov 2021 03:29:52 +0000</pubDate>
      <link>https://dev.to/keydelivery/ecommerce-shipment-tracking-api-php-democreatetracking-3ok9</link>
      <guid>https://dev.to/keydelivery/ecommerce-shipment-tracking-api-php-democreatetracking-3ok9</guid>
      <description>&lt;p&gt;This documentation is for creating a tracking request with &lt;a href="https://www.kd100.com/docs/keydelivery-api"&gt;KeyDelivery all-in-one tracking API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users can use this API to track over 1200 global couriers in one place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://www.kd100.com/api/v1/tracking/create'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$API_Key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# You can find your ApiKey on https://app.kd100.com/api-managment&lt;/span&gt;
&lt;span class="nv"&gt;$Secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# You can find your Secret on https://app.kd100.com/api-managment &lt;/span&gt;


&lt;span class="nv"&gt;$param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'carrier_id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'dhlen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'tracking_number'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'9926933413'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phone'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'ship_from'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'ship_to'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'area_show'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'webhook_url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'http://www.kd100.com/console/debug/callback/sandbox'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$param&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strtoupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$API_Key&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$Secret&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nv"&gt;$curl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_URL&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_ENCODING&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_MAXREDIRS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_TIMEOUT&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_FOLLOWLOCATION&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_HTTP_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;CURL_HTTP_VERSION_1_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_POSTFIELDS&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;CURLOPT_HTTPHEADER&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'API-Key: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$API_Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'signature: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$signature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
