<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Eleventy Soft UI - Powered by Prismic CMS</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 07 Aug 2021 16:01:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/eleventy-soft-ui-powered-by-prismic-cms-4eei</link>
      <guid>https://dev.to/sm0ke/eleventy-soft-ui-powered-by-prismic-cms-4eei</guid>
      <description>&lt;p&gt;Hello coders,&lt;/p&gt;

&lt;p&gt;This article presents an open-source starter built in &lt;strong&gt;Eleventy&lt;/strong&gt; and &lt;strong&gt;Prismic CMS&lt;/strong&gt; on top of a modern Bootstrap 5 design: &lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;Soft UI Design&lt;/a&gt;. The product can be used to code much faster presentation websites or personal blogs. For newcomers, &lt;strong&gt;Eleventy&lt;/strong&gt; is a lightweight static-site generator and &lt;strong&gt;Prismic CMS&lt;/strong&gt; provides a headless blog service.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;Eleventy Soft UI&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eleventy-soft-ui.appseed-srv1.com/"&gt;Eleventy Soft UI&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://eleventy-soft-ui.appseed-srv1.com/blog/about/"&gt;Eleventy Soft UI _blog&lt;/a&gt; - Page pulled from Prismic&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDxhU2aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwdqi549lwqkvsydphc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDxhU2aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwdqi549lwqkvsydphc.png" alt="Eleventy Soft UI - Open-source static site powered by 11ty, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To use the product a decent Nodejs version should be installed in the workstation and (optionally) a &lt;a href="https://prismic.io/"&gt;Prismic&lt;/a&gt; account (free tier available). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem that starter solves&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Static sites are great to code simple pages and presentation sites .. but for blogs developers should use a Markdown to Html translation to edit their content. Prismic help us with this part and empower the developer to edit and format the content visually. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;How it works &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Add your content in Prismic CMS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Configure the starter to consume the Prismic Content&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Install dependencies and start the project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Built for production &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Once all steps are completed, &lt;strong&gt;Soft UI 11ty&lt;/strong&gt; should be up and running in the browser will all Prismic articles pulled locally.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;11ty Soft UI - Team Section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNGq4U9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4nrjhqnvft0higq00e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNGq4U9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w4nrjhqnvft0higq00e.png" alt="11ty Soft UI - User profile Page, provided by Eleventy, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;11ty Soft UI - Contact Footer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVqZZzPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjrhfqz5of77mquemh62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVqZZzPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjrhfqz5of77mquemh62.png" alt="11ty Soft UI - Fancy footer, provided by Eleventy, Prismic and AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-build-the-product"&gt;
  &lt;/a&gt;
  Let's build the product
&lt;/h2&gt;

&lt;p&gt;For full instructions please access the &lt;strong&gt;&lt;a href="https://appseed.us/product/eleventy-soft-ui"&gt;product page&lt;/a&gt;&lt;/strong&gt; (docs section).  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone this repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/eleventy-soft-ui-design.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;eleventy-soft-ui-design 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install modules via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Configure &lt;a href="http://prismic.io/"&gt;Prismic&lt;/a&gt; API Node&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rename &lt;code&gt;.env.sample&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and specify the &lt;code&gt;PRISMIC_REPOSITORY_NAME&lt;/code&gt;. In case you are not familiar with &lt;code&gt;Prismic&lt;/code&gt;, feel free to use the &lt;code&gt;DEMO API&lt;/code&gt; provided by AppSeed: &lt;code&gt;https://eleventy-soft-ui-design.prismic.io/api/v2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRISMIC_REPOSITORY_NAME=YOUR_PRISMIC_API_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start project in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the project is compiled and the content is pulled from &lt;code&gt;Prismic&lt;/code&gt;, the project can be visited in the browser: &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;From this point the starter can be used to code simple websites and personal blogs using a modern stack and a pixel-perfect UI crafted by &lt;strong&gt;Creative-Tim&lt;/strong&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt; - the official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prismic.io/"&gt;Prismic CMS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/static-site"&gt;static staters&lt;/a&gt; provided by &lt;strong&gt;AppSeed&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>eleventy</category>
      <category>prismic</category>
      <category>softui</category>
    </item>
    <item>
      <title>Unacademy Software Engineer interview experience, Web</title>
      <author>Kushagra Mehta</author>
      <pubDate>Sat, 07 Aug 2021 15:33:19 +0000</pubDate>
      <link>https://dev.to/kushagra_mehta/unacademy-software-engineer-interview-experience-web-14d4</link>
      <guid>https://dev.to/kushagra_mehta/unacademy-software-engineer-interview-experience-web-14d4</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
I'm Kushagra Mehta, a final year student from Jaipur. I have joined Unacademy as a Software Engineer. In today's blog, I'll be sharing my interview experience at Unacademy for a Software Engineer position.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Kx8BFbGTiW95FDnUR3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Kx8BFbGTiW95FDnUR3/giphy.gif" alt="Unacademy-logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big shoutout to &lt;a href="https://www.linkedin.com/in/rajatetc/"&gt;Rajat Gupta&lt;/a&gt; who wrote a great Interview experience article that helps me along the way. &lt;a href="https://rajatgupta.xyz/unacademy-interview"&gt;Linküîó&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-it-started"&gt;
  &lt;/a&gt;
  How it started?
&lt;/h2&gt;

&lt;p&gt;Hmm, This is an interesting one. From my side, I did some cold-DM's in mid of Jun-21 asking for interviews(&lt;em&gt;Great videos on it&lt;/em&gt;üëâüèª&lt;a href="https://www.youtube.com/watch?v=_wQGd6Crkaw&amp;amp;list=PLLbfvOX935JELl4VMj-Sao382KYNJctly&amp;amp;index=28"&gt;Here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then on the sweet morning of 13-Jul, I got a call from HR team of Unacademy asking that, Am I available for an interview or not. From here my journey started, So the call goes like this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;** &lt;strong&gt;Basic introduction&lt;/strong&gt; **&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Can you tell me something about yourself&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: &lt;em&gt;I'm kushagra.....&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Awsome man&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: üò≥ &lt;strong&gt;OK.!!&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HR&lt;/strong&gt;: &lt;em&gt;Let's schedule a call for your next round&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Me&lt;/strong&gt;: üòÆ &lt;em&gt;Why not&lt;/em&gt; (Inside me:- Am i dreaming or what üò∂)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recruiter explained everything related to the next rounds over the call and scheduled the first round.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I asked my recruiter from where he got my profile he said he liked my &lt;a href="https://www.linkedin.com/in/kushagra-mehta-/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/KushagraMehta/"&gt;Github&lt;/a&gt; profile that's why he reached out to me. So boys and girls it's time to improve your online profiles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#interview-rounds"&gt;
  &lt;/a&gt;
  Interview rounds‚ú®
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;JS Fundamentals (~ 1 hr)&lt;/li&gt;
&lt;li&gt;Frontend with React (~ 1 hr)&lt;/li&gt;
&lt;li&gt;Senior Engineering Manager (~ 30 m)&lt;/li&gt;
&lt;li&gt;Culture ( ~ 30 m)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt;: &lt;em&gt;Google Meet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding Environment&lt;/strong&gt;: &lt;em&gt;CodeSandbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into each round in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-fundamentals"&gt;
  &lt;/a&gt;
  üë®üèª‚Äçüíª JS Fundamentals
&lt;/h2&gt;

&lt;p&gt;It started with a simple intro. Then we quickly jumped into the realm of JS. The questions revolved around basics concepts of Javascript like:- &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;var&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt;, &lt;code&gt;Promises&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The interview was more around discussion-based, &lt;strong&gt;Why&lt;/strong&gt; or &lt;strong&gt;How&lt;/strong&gt; something is happening. We started with output-based questions,  where we discussed &lt;em&gt;What&lt;/em&gt;, &lt;em&gt;Why&lt;/em&gt; &amp;amp; &lt;em&gt;How&lt;/em&gt; the things are happening.&lt;/p&gt;

&lt;p&gt;He told me to implement &lt;code&gt;Promises&lt;/code&gt; after that, we discussed my approach.&lt;/p&gt;

&lt;p&gt;At last, we discussed about &lt;code&gt;eventHandling&lt;/code&gt;, &lt;code&gt;debouncing&lt;/code&gt; &amp;amp; &lt;code&gt;throttling&lt;/code&gt;. After that, I was asked to build debouncing function and implement a use-case for it(build Search bar).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;:&lt;a href="https://javascript.info/"&gt;üíõjavascript.info&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLlasXeu85E9eV5xUEgrWUB8NAUvNZGsK0"&gt;Akshay Saini - FE Interview Ques&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Everything was chill, he helped me in every step of the interview. Even when I did something wrong with &lt;code&gt;.addEventListener&lt;/code&gt; he explained why things are not working and helped me with the processü§Ø&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#frontend-with-react"&gt;
  &lt;/a&gt;
  ‚öõÔ∏èFrontend with React
&lt;/h2&gt;

&lt;p&gt;This happened the day after the first round. We started with building a &lt;a href="https://www.google.com/search?q=google+timer"&gt;Google timer clone&lt;/a&gt;. I was asked to explain the approach I took.&lt;/p&gt;

&lt;p&gt;After that, We discussed some basic concepts of JavaScript&lt;br&gt;
closures, &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;promises&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;defer&lt;/code&gt;, event loop... Then we jumped into some basic CSS questions like &lt;code&gt;inline&lt;/code&gt;/&lt;code&gt;inline-block&lt;/code&gt;, Box model, etc.&lt;/p&gt;

&lt;p&gt;Then we jumped into the territory of ReactJs. The questions ranged from what is React, State/Props, Lifecycle methods, Lifecycle in Class componets vs Functional components, Virtual DOM.&lt;/p&gt;

&lt;p&gt;At last, I was given a basic problem to solve &lt;a href="https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/"&gt;Sort an array of 0s, 1s and 2s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;: &lt;a href="http://frontendinterviewhandbook.com/"&gt;Front End Interview Handbook‚ú®&lt;/a&gt;, &lt;a href="https://github.com/sudheerj/reactjs-interview-questions#what-is-react"&gt;List of top 500 ReactJS Interview Quesüòµ&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This round was also super chill, I stuttering a lot in explaining things. Even I got confused in some question, interviewer help me understanding themü§Ø.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#senior-engineering-manager"&gt;
  &lt;/a&gt;
  üë®üèª‚ÄçüíºSenior Engineering Manager
&lt;/h2&gt;

&lt;p&gt;It was more of a discussion on my decisions over tech-stack, team dynamics, and culture fit. It started with technical questions on Why I choose ReactJs, what I did in my previous internship, What I learned from there, and What I did not like there.&lt;/p&gt;

&lt;p&gt;Then he asked me some behavioral questions like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;How will you suggest someone to opt ReactJs rather than other options?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What if there is some conflict with your manager how will you resolve them.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What if a mentor in a new Organization is not helping much how would you be going to tackle the situation.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then I was asked, If I have any questions for them and what I would like to work on.(&lt;em&gt;If you see my profile, I'm more of a full-stack guy.&lt;/em&gt; üòÖ &lt;em&gt;They said we're a flexible team you can work on anything until you're sure about its working&lt;/em&gt; ü§©)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to prepare&lt;/strong&gt;: &lt;a href="https://drive.google.com/file/d/1_uFUgT469LGn_X3swjY-L9j0KBqK9ocv/view?usp=sharing"&gt;60 Toughest Interview Questionsüòé&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After this round, I got very excited as I wanted to work as a Full-stack guy and got a green flag from the Manager. üï∫üèª&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#culture"&gt;
  &lt;/a&gt;
  Culture
&lt;/h2&gt;

&lt;p&gt;In this round, we discussed the working of the company.&lt;/p&gt;

&lt;p&gt;This round was all about behavioral and situation questions like how will you react if the project you're working on for a few months gets shelved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  ü•≥The End
&lt;/h2&gt;

&lt;p&gt;After all these rounds I got an Offer letterüíå and I accepted it (&lt;em&gt;Volla&lt;/em&gt; üéä).&lt;br&gt;
I really liked the complete interview process at Unacademy. All the rounds were more oriented toward discussion rather than a typical Questions and Answers sessions.&lt;/p&gt;

&lt;p&gt;Big thanks to &lt;strong&gt;Unacademy&lt;/strong&gt; for giving me chance to prove myself and to the Talent Acquisition team for the wonderful interview experience. I can't even imagine that I would ever receive an offer from Unacadmey, whole process was like a dream to me (&lt;em&gt;some say I'm still dreaming till this date&lt;/em&gt; üò≥)&lt;/p&gt;

&lt;p&gt;If you're someone who wants to build the future of education please apply here üëâüèª&lt;a href="https://apply.workable.com/unacademy/"&gt;https://apply.workable.com/unacademy/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>interview</category>
      <category>job</category>
      <category>react</category>
    </item>
    <item>
      <title>Consume artifacts from a remote DevOps project pipeline</title>
      <author>Marcel.L</author>
      <pubDate>Sat, 07 Aug 2021 14:06:14 +0000</pubDate>
      <link>https://dev.to/pwd9000/consume-artifacts-from-a-remote-devops-project-pipeline-2f3a</link>
      <guid>https://dev.to/pwd9000/consume-artifacts-from-a-remote-devops-project-pipeline-2f3a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#azure-devops-pipelineyaml-resources"&gt;
  &lt;/a&gt;
  Azure DevOps pipeline/YAML resources
&lt;/h2&gt;

&lt;p&gt;Azure DevOps pipelines provides very useful &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema"&gt;resources&lt;/a&gt; we can define in our pipeline in one place and be consumed anywhere in our pipeline.&lt;/p&gt;

&lt;p&gt;A resource is anything used by a pipeline that lives outside the pipeline. Pipeline resources include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CI/CD pipelines that produce artifacts (Azure Pipelines, Jenkins, etc.)&lt;/li&gt;
&lt;li&gt;code repositories (Azure Repos Git repos, GitHub, GitHub Enterprise, Bitbucket Cloud)&lt;/li&gt;
&lt;li&gt;container image registries (Azure Container Registry, Docker Hub, etc.)&lt;/li&gt;
&lt;li&gt;package feeds (GitHub packages)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we will take a look at the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=schema#resources-pipelines"&gt;Pipelines Resource&lt;/a&gt;, in particular we will look at how we can use this resource in a pipeline to consume an artifact that was produced in another pipeline in a completely different project. Our pipeline will also even be triggered automatically by the source pipeline after the artifact has been created and published.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consume-remote-pipeline-artifacts"&gt;
  &lt;/a&gt;
  Consume remote pipeline artifacts
&lt;/h2&gt;

&lt;p&gt;In my DevOps organisation I have created two projects namely &lt;strong&gt;ProjectA&lt;/strong&gt; and &lt;strong&gt;ProjectB&lt;/strong&gt;. I also created two YAML pipelines for each corresponding project named &lt;strong&gt;PipelineA&lt;/strong&gt; and &lt;strong&gt;PipelineB&lt;/strong&gt;. &lt;strong&gt;PipelineA&lt;/strong&gt; will be my triggering/source pipeline which will create an artifact called &lt;strong&gt;ArtifactA&lt;/strong&gt;. &lt;strong&gt;PipelineB&lt;/strong&gt; will be my pipeline which will contain the pipeline resource for &lt;strong&gt;PipelineA&lt;/strong&gt; and will consume &lt;strong&gt;ArtifactA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qlSBoN_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/main-ado.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qlSBoN_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/main-ado.png" alt="main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;ProjectA&lt;/strong&gt; I also created a repository called &lt;strong&gt;RepoA&lt;/strong&gt; which contains a file called &lt;strong&gt;MyConfig.txt&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULHy0L5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/projects.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULHy0L5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/projects.png" alt="projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJmFhe_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/myconfig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJmFhe_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/myconfig.png" alt="myConfig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also created the following code in &lt;strong&gt;PipelineA.yml&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## code/PipelineA.yml&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build_Artifact&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Artifact A&lt;/span&gt;

  &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
    &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
    &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
      &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-2019&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CopyFiles@2&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Copy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;myConfig&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Staging'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;SourceFolder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.SourcesDirectory)'&lt;/span&gt;
        &lt;span class="na"&gt;Contents&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;MyConfig.txt'&lt;/span&gt;
        &lt;span class="na"&gt;TargetFolder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/drop'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PublishPipelineArtifact@1&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Publish&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Artifact&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pipeline'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(Build.ArtifactStagingDirectory)/drop'&lt;/span&gt;
        &lt;span class="na"&gt;artifactName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ArtifactA&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is important to note that when we create the above pipeline in our source project we must rename the pipeline to the same name as what we will refer to it in our pipeline resource on &lt;strong&gt;PipelineB&lt;/strong&gt;. In my case I will refer to this as &lt;strong&gt;PipelineA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBtGsuOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/rename.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBtGsuOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/rename.png" alt="rename"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above YAML pipeline will take the file &lt;strong&gt;MyConfig.txt&lt;/strong&gt; and create a pipeline artifact containing the file called &lt;strong&gt;ArtifactA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5UAiAs4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipelineA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5UAiAs4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipelineA.png" alt="pipelineA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dmc68ET0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/artifactA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dmc68ET0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/artifactA.png" alt="artifactA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;ProjectB&lt;/strong&gt; I have &lt;strong&gt;PipelineB.yml&lt;/strong&gt; that contains the pipeline resource for &lt;strong&gt;PipelineA&lt;/strong&gt; and will be triggered once &lt;strong&gt;PipelineA&lt;/strong&gt; completes and we will use the download task to also consume the artifact that was produced by &lt;strong&gt;PipelineA&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## code/PipelineB.yml&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
&lt;span class="na"&gt;pr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

&lt;span class="c1"&gt;# ------ This is our Pipeline Resource ------&lt;/span&gt;
&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pipeline&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PipelineA&lt;/span&gt;  &lt;span class="c1"&gt;# identifier for the resource used in pipeline resource variables.&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ProjectA&lt;/span&gt;    &lt;span class="c1"&gt;# project for the source; optional for current project.&lt;/span&gt;
    &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PipelineA&lt;/span&gt;    &lt;span class="c1"&gt;# name of the pipeline that produces an artifact.&lt;/span&gt;
    &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;             &lt;span class="c1"&gt;# triggers are not enabled by default unless you add trigger section to the resource.&lt;/span&gt;
      &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;          &lt;span class="c1"&gt;# branch conditions to filter the events, optional; Defaults to all branches.&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;         &lt;span class="c1"&gt;# branches to consider the trigger events, optional; Defaults to all branches.&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
&lt;span class="c1"&gt;# ------------------------------------------&lt;/span&gt;

&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume_Artifact&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume Artifact A&lt;/span&gt;

  &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume&lt;/span&gt;
    &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Consume&lt;/span&gt;
    &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
      &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-2019&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PowerShell@2&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Information'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;inline&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;Write-output "This pipeline has been triggered by: $(resources.pipeline.PipelineA.pipelineName)"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PipelineA&lt;/span&gt;
      &lt;span class="na"&gt;artifact&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ArtifactA'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PowerShell@2&lt;/span&gt;
      &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Get-Content&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;MyConfig.txt'&lt;/span&gt;
      &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;targetType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;inline&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;Get-Content -path $(Pipeline.Workspace)/PipelineA/ArtifactA/MyConfig.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is important to note that we have to configure &lt;strong&gt;ProjectB&lt;/strong&gt; pipeline settings to allow it to connect to &lt;strong&gt;ProjectA&lt;/strong&gt; in order to download the artifact that was produced.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8lMF0IT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipesettings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8lMF0IT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/pipesettings.png" alt="pipesettings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metadata for a pipeline resource, are available as predefined variables that we can reference, as you can see from our &lt;strong&gt;PipelineB.yml&lt;/strong&gt; in the following code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## code/PipelineB.yml#L29-L30&lt;/span&gt;
&lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
  &lt;span class="s"&gt;Write-output "This pipeline has been triggered by: $(resources.pipeline.PipelineA.pipelineName)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Predefined pipeline resource variables:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resources.pipeline.&amp;lt;Alias&amp;gt;.projectID
resources.pipeline.&amp;lt;Alias&amp;gt;.pipelineName
resources.pipeline.&amp;lt;Alias&amp;gt;.pipelineID
resources.pipeline.&amp;lt;Alias&amp;gt;.runName
resources.pipeline.&amp;lt;Alias&amp;gt;.runID
resources.pipeline.&amp;lt;Alias&amp;gt;.runURI
resources.pipeline.&amp;lt;Alias&amp;gt;.sourceBranch
resources.pipeline.&amp;lt;Alias&amp;gt;.sourceCommit
resources.pipeline.&amp;lt;Alias&amp;gt;.sourceProvider
resources.pipeline.&amp;lt;Alias&amp;gt;.requestedFor
resources.pipeline.&amp;lt;Alias&amp;gt;.requestedForID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we trigger and run &lt;strong&gt;PipelineA&lt;/strong&gt; in &lt;strong&gt;ProjectA&lt;/strong&gt;, it will automatically create our &lt;strong&gt;ArtifactA&lt;/strong&gt; and also after completion &lt;strong&gt;PipelineB&lt;/strong&gt; in &lt;strong&gt;ProjectB&lt;/strong&gt; will be automatically triggered and also download and consume &lt;strong&gt;ArtifactA&lt;/strong&gt; that was created in &lt;strong&gt;ProjectA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUGMF_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/results.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUGMF_1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Pipeline-from-Pipeline/assets/results.png" alt="results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also note that triggers for resources are created based on the default branch configuration of our YAML, which is master. However, if we want to configure resource triggers from a different branch, we will need to change the default branch for the pipeline. For more information have a look at &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops&amp;amp;tabs=example#default-branch-for-triggers"&gt;Default branch for triggers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/DevOps-Pipeline-from-Pipeline/code"&gt;Github&lt;/a&gt; page. ‚ù§Ô∏è&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Marcel.L - &lt;a href="mailto:pwd9000@hotmail.co.uk"&gt;pwd9000@hotmail.co.uk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>üöÄ boost your tmux productivity with üéØ targeted</title>
      <author>Waylon Walker</author>
      <pubDate>Sat, 07 Aug 2021 14:03:04 +0000</pubDate>
      <link>https://dev.to/waylonwalker/boost-your-tmux-productivity-with-targeted-4b17</link>
      <guid>https://dev.to/waylonwalker/boost-your-tmux-productivity-with-targeted-4b17</guid>
      <description>&lt;p&gt;Hold on to your hats folks, we are going to start adding some rocket fuel to your tmux.  We are going to configure tmux to open applications you need on a regular basis  in an instant.&lt;/p&gt;

&lt;p&gt;Scripting tmux to open up specific applications can be intimidating your first time.  It can be tricky to get it to start in the right directory.  If you are trying to assign applications to a keybinding it can be easy to mess up and have weird things happen every time your &lt;code&gt;~/.tmux.conf&lt;/code&gt; gets sourced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-htop-in-an-above-split"&gt;
  &lt;/a&gt;
  Open htop in an above split
&lt;/h2&gt;

&lt;p&gt;I used this one for a number of years to take a quick peek into my systems performance while a memory intensive task was running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-t split-window htop &lt;span class="se"&gt;\;&lt;/span&gt; swap-pane &lt;span class="nt"&gt;-U&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üóíÔ∏è note that the &lt;code&gt;swap-pane -U&lt;/code&gt; will make the htop split active immediately&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#open-htop-in-a-popup"&gt;
  &lt;/a&gt;
  Open htop in a popup
&lt;/h2&gt;

&lt;p&gt;With the new tmux popup windows I really like the flow of just peeking at htop in a popup and jumping back into what I was doing.  It can have a more consistent look, and not mess with the window layouts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-t popup &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt; 95% &lt;span class="nt"&gt;-w&lt;/span&gt; 95% &lt;span class="nt"&gt;-x&lt;/span&gt; 100% &lt;span class="s2"&gt;"htop"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-an-application-in-the-current-directory"&gt;
  &lt;/a&gt;
  Open an application in the current directory
&lt;/h2&gt;

&lt;p&gt;One thing that can be tricky is getting apps that need to be in a specific directory started in the directory that you want. Here are two examples I use to open &lt;code&gt;vifm&lt;/code&gt; or &lt;code&gt;gitui&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-e split-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; vifm &lt;span class="nb"&gt;.&lt;/span&gt; .&lt;span class="se"&gt;\;&lt;/span&gt; resize-pane &lt;span class="nt"&gt;-Z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;C-k split-window &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; &lt;span class="s1"&gt;'gitui'&lt;/span&gt;&lt;span class="se"&gt;\;&lt;/span&gt; resize-pane &lt;span class="nt"&gt;-Z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üóíÔ∏è note that &lt;code&gt;split-window&lt;/code&gt; takes in a -c flag before the application you&lt;br&gt;
want to run to specify the startup directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#open-a-popup-in-a-specific-directory"&gt;
  &lt;/a&gt;
  Open a popup in a specific directory
&lt;/h2&gt;

&lt;p&gt;I've been converted over to using popups for these as well.  I'll admit that the workflow of creating a new full screen window may have been better, but this can be a bit less jarring, espessially if you have anyone following along with what you are doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-e display-popup &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; vifm
&lt;span class="nb"&gt;bind &lt;/span&gt;C-k display-popup &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'#{pane_current_path}'&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'gitui'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also check out the full YouTube&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6B"&gt;tmux-playlist&lt;/a&gt;&lt;br&gt;
to see all of the videos in this series.&lt;/p&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>Debugging in Vim with Vimspector</title>
      <author>Igor Irianto</author>
      <pubDate>Sat, 07 Aug 2021 13:57:58 +0000</pubDate>
      <link>https://dev.to/iggredible/debugging-in-vim-with-vimspector-4n0m</link>
      <guid>https://dev.to/iggredible/debugging-in-vim-with-vimspector-4n0m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#debugging-in-vim-with-vimspector"&gt;
  &lt;/a&gt;
  Debugging in Vim with Vimspector
&lt;/h1&gt;

&lt;p&gt;Vimspector is a powerful graphical debugger plugin for Vim. However, it also will take you a while to get started. In this article, I will show you how to use Vimspector to debug:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Node file.&lt;/li&gt;
&lt;li&gt;Client-side app using Chrome.&lt;/li&gt;
&lt;li&gt;Jest testing.&lt;/li&gt;
&lt;li&gt;An Express app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both their &lt;a href="https://github.com/puremourning/vimspector"&gt;Github page&lt;/a&gt; and their &lt;a href="https://puremourning.github.io/vimspector-web/"&gt;website&lt;/a&gt; are very comprehensive. I would suggest you read them when you have the chance!&lt;/p&gt;

&lt;p&gt;Much content found in this article can be found inside the Vimspector websites. However, when I was reading them, I was overwhelmed by the sheer amount of the information. This article serves as a bridge to get you started as early as possible. I think it is beneficial to get our hands dirty early-on. Once you start using it, reading the docs becomes clearer. Although I am using the Javascript ecosystem as examples (backend, frontend, testing), you should be able to apply the same concept to any language of your choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;At the time of this writing, I am using Vim 8.2 on MacOS Catalina. This guide should work with any OS (with appropriate modifications). The Vimspector Github page though, recommends you to have either Vim 8.2 or NeoVim 0.4.3. You also need to have Python 3.6 or up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-overview"&gt;
  &lt;/a&gt;
  Quick Overview
&lt;/h2&gt;

&lt;p&gt;So what is Vimspector? How does it work?&lt;/p&gt;

&lt;p&gt;Vimspector is not a universal language debugger. It technically does not handle the debugging. Think of it like a middle-man that facilitates communicating with the debugger for your language-of-choice. It relies on specific gadgets depending on what language you are working with. So if you want to debug a node application, use the &lt;code&gt;vscode-node-debug2&lt;/code&gt; gadget. If you want to debug a go app, use &lt;code&gt;vscode-go&lt;/code&gt; gadget. If you want to debug a client-side JS app, use &lt;code&gt;debugger-for-chrome&lt;/code&gt; gadget.&lt;/p&gt;

&lt;p&gt;Different languages have different debuggers. Some have built-in debuggers while some use external libraries for debugging. If we want to integrate multiple languages into our favorite editors / IDEs, it could get messy. A Python debugger communicates differently from a Node debugger. A Node debugger behaves differently from a front-end JS debugger via Chrome. If you're a Ruby / Javascript developer, you could technically have a Ruby and Node debuggers installed in your editor / IDE. But these two debuggers probably have different protocols and exhibit different behaviors. The more languages / environments you deal with, the more the complexity increases.&lt;/p&gt;

&lt;p&gt;So having different language environments to debug can get messy. To reconcile these differences, we need to bridge the gap between language X debugger and our editor / IDE - we need an abstract protocol. This protocol is known as Debug Adapter Protocol (DAP). DAP was originally created by the VSCode team. But luckily for us, they decided to make it (somewhat) editor agnostic, so developers can use it for other editors / IDEs. Vimspector is the result of DAP development for the Vim editor. For a list of tools that support DAP, check out this page: &lt;a href="https://microsoft.github.io/debug-adapter-protocol/implementors/tools/"&gt;Tools Supporting the DAP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although not required readings, but when you have the time, I would strongly recommend you to look into these pages to get a better understanding on DAP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/"&gt;Debug Adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/overview"&gt;DAP Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/editor/debugging"&gt;VSCode Debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, enough theory - let's get started with an actual example!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;To get started, install Vimspector if you haven't. Follow the &lt;a href="https://github.com/puremourning/vimspector#installation"&gt;Vimspector installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For me, I used &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt;. All I did was add the following in my vimrc's list of plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Plug 'puremourning/vimspector'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then sourced my vimrc and ran &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;The fastest way to learn a new skill is to jump into it and learn it along the way. You may have a lot of questions right now, but once you see how it works, by the end of this article, I hope that some of your questions will be answered.&lt;/p&gt;

&lt;p&gt;Let's go through the node example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging-a-node-app"&gt;
  &lt;/a&gt;
  Debugging a node app
&lt;/h3&gt;

&lt;p&gt;The Vimspector plugin itself already comes with examples. Go to the directory where Vim saves your Vimspector plugin. I am using vim-plugged, so my plugins are installed inside the &lt;code&gt;plugged/&lt;/code&gt; directory. In my case, the directory is in &lt;code&gt;~/.vim/plugged/vimspector/&lt;/code&gt;. Yours might be in a different location, depending on your plugin manager and your system. Once you find them, from the &lt;code&gt;vimspector/&lt;/code&gt; directory, go to the &lt;code&gt;/support/test/&lt;/code&gt; directory. Inside this directory, you will find different examples that I also strongly encourage you to check out once you're done reading this article.&lt;/p&gt;

&lt;p&gt;Since this section is about debugging a node app, let's check out the node directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd node/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside, at the time of this writing, you should find a directory named &lt;code&gt;simple/&lt;/code&gt;. Go there and you'll see a &lt;code&gt;simple.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Before we debug this file, there are at least two requirements to debug with Vimspector: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A relevant gadget.&lt;/li&gt;
&lt;li&gt;A Vimspector config file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A gadget is a debug adapter (like the ones listed in &lt;a href="https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/"&gt;Microsoft's Debug Adapters page&lt;/a&gt;). Since we are debugging a node app, we need a node adapter. This node adapter will relay messages between NodeJS and the abstract protocol DAP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(By the way, before installing the node adapter, per &lt;a href="https://github.com/puremourning/vimspector#javascript-typescript-etc"&gt;Vimspector's site&lt;/a&gt;, you need to be using a Node version between 6 and 12).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the first requirement, to install a node adapter, from Vim, run &lt;code&gt;:VimspectorInstall vscode-node-debug2&lt;/code&gt;.You need a different gadget when you are debugging a different language/environment. If you need to debug a Python file, you have to install a python gadget. If you are debugging a Go file, you have to install a Go gadget. Since we are debugging a node app, we need to install a node gadget. For a list of gadgets, check out this section from the Vimspector Github page: &lt;a href="https://github.com/puremourning/vimspector#supported-languages"&gt;Supported Languages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the second requirement, the &lt;code&gt;.vimspector.json&lt;/code&gt; file is conveniently already located at the root of the project (inside &lt;code&gt;simple/&lt;/code&gt;). If you check the hidden files of the &lt;code&gt;vimspector/support/test/simple/&lt;/code&gt; directory, there should already be one &lt;code&gt;.vimspector.json&lt;/code&gt; file available, so you don't need to do anything. Keep in mind that when you are inspecting your own project, remember to create your own vimspector file.&lt;/p&gt;

&lt;p&gt;With those two requirements in place, let's debug.&lt;/p&gt;

&lt;p&gt;Vimspector offers many commands and shortcuts. Using them all when you're starting can be overwhelming. I found that the following are sufficient to get started with. Below are some of my vimrc vimspector shortcuts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;dd :call vimspector#Launch()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;de :call vimspector#Reset()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;dc :call vimspector#Continue()&amp;lt;CR&amp;gt;

nnoremap &amp;lt;Leader&amp;gt;dt :call vimspector#ToggleBreakpoint()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;dT :call vimspector#ClearBreakpoints()&amp;lt;CR&amp;gt;

nmap &amp;lt;Leader&amp;gt;dk &amp;lt;Plug&amp;gt;VimspectorRestart
nmap &amp;lt;Leader&amp;gt;dh &amp;lt;Plug&amp;gt;VimspectorStepOut
nmap &amp;lt;Leader&amp;gt;dl &amp;lt;Plug&amp;gt;VimspectorStepInto
nmap &amp;lt;Leader&amp;gt;dj &amp;lt;Plug&amp;gt;VimspectorStepOver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to steal what I have or make your own. Vimspector also comes with a set of shortcuts called the &lt;a href="https://github.com/puremourning/vimspector#human-mode"&gt;human-mode mapping&lt;/a&gt;. If you're used to VSCode debugging shortcut, you may feel more at home with them.&lt;/p&gt;

&lt;p&gt;Finally, let's open &lt;code&gt;simple.js&lt;/code&gt;. It should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var msg = 'Hello, world!'

var obj = {
  test: 'testing',
  toast: function() {
    return 'toasty' + this.test;
  }
}

console.log( "OK stuff happened " + obj.toast() )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To launch vimspector, run the launch command. Press &lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt; (&lt;code&gt;:call vimsepctor#Launch()&lt;/code&gt;).  You should see a Vimspector window. Pretty cool! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QLop98Gq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c5jkjd6awnktzqis1cn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QLop98Gq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5c5jkjd6awnktzqis1cn.png" alt="Vimspector layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There should be 6 different windows displayed - depending on your Vim orientation, you may see them in different order. If you have never used a debugger before, don't feel intimidated. You'll get used to some of them after playing with them for a while. To exit Vimspector, press &lt;code&gt;&amp;lt;Leader&amp;gt;de&lt;/code&gt; (&lt;code&gt;:call vimspector#Reset()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;By the way, there will be some prompts on the bottom of the windows when you launch vimspector, asking for something like &lt;code&gt;...Break on Uncaught Exceptions?&lt;/code&gt;. I usually pressed &lt;code&gt;N&lt;/code&gt;. If you don't want to get prompted all the time, add these in your vimspector.json file inside the &lt;code&gt;"run": { ...&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  ...
  "breakpoints": {
    "exception": {
      "all": "N",
      "uncaught": "N"
    }
  },
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My full vimspector json (so you can just copy paste it) for this file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "run": {
      "adapter": "vscode-node",
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "protocol": "auto",
        "stopOnEntry": true,
        "console": "integratedTerminal",
        "program": "${workspaceRoot}/simple.js",
        "cwd": "${workspaceRoot}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back to the debugging, start the vimspector again (&lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt;). Since we have &lt;code&gt;stepOnEntry&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt; in the Vimspector json file, Vimspector will stop on the first line even though you haven't marked a breakpoint.&lt;/p&gt;

&lt;p&gt;To traverse through the file, you can either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Step out (steps out of the scope)&lt;/li&gt;
&lt;li&gt;Step into (steps into the function scope)&lt;/li&gt;
&lt;li&gt;Step over (steps to the next line, in scope)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are the key maps that I use. Note that I use &lt;code&gt;hlj&lt;/code&gt; keys similar to the Vim movement keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nmap &amp;lt;Leader&amp;gt;dh &amp;lt;Plug&amp;gt;VimspectorStepOut
nmap &amp;lt;Leader&amp;gt;dl &amp;lt;Plug&amp;gt;VimspectorStepInto
nmap &amp;lt;Leader&amp;gt;dj &amp;lt;Plug&amp;gt;VimspectorStepOver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not sure what stepping out, stepping into, and stepping over are, I found these short video tutorials very helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KEdq7gC_RTA&amp;amp;t=347s"&gt;https://www.youtube.com/watch?v=KEdq7gC_RTA&amp;amp;t=347s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ypxabWbxSBY"&gt;https://www.youtube.com/watch?v=ypxabWbxSBY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back to our debugging - now that we are on the first line of the code, press &lt;code&gt;&amp;lt;Leader&amp;gt;dj&lt;/code&gt; (&lt;code&gt;&amp;lt;Plug&amp;gt;VimspectorStepOver&lt;/code&gt;). Note the highlight moves to the variable declaration. If you press &lt;code&gt;&amp;lt;Leader&amp;gt;dj&lt;/code&gt; one more time, it will move down again. If you keep stepping over, eventually you will reach the end of &lt;code&gt;simple.js&lt;/code&gt; file. Unfortunately, you can't step "back" to the previous line. Once you're on the next step, you continue forward until you reach the end.&lt;/p&gt;

&lt;p&gt;If you accidentally step over an important line, just restart the debugger. To restart, run &lt;code&gt;&amp;lt;Leader&amp;gt;dk&lt;/code&gt; (&lt;code&gt;&amp;lt;Plug&amp;gt;VimspectorRestart&lt;/code&gt;). When you restart, Vimspector starts over from the beginning. Alternatively, you could also Reset and Launch Vimspector again.&lt;/p&gt;

&lt;p&gt;You can put breakpoints throughout the file. Back in the main &lt;code&gt;simple.js&lt;/code&gt; file, run &lt;code&gt;&amp;lt;Leader&amp;gt;dt&lt;/code&gt; (&lt;code&gt;:call vimspector#ToggleBreakpoint()&lt;/code&gt;) on the line where you want to add a breakpoint (run that command again on the line with the breakpoint to remove it).&lt;/p&gt;

&lt;p&gt;Once you sprinkle breakpoints all over your file, launch Vimspector again. If you press &lt;code&gt;&amp;lt;Leader&amp;gt;dc&lt;/code&gt; (&lt;code&gt;:call vimspector#Continue()&lt;/code&gt;), Vimspector will jump to the next breakpoint. Pretty cool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AiUj1G4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7alill7meanmvus075d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AiUj1G4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7alill7meanmvus075d2.png" alt="Vimspector continue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To clear the breakpoints, run &lt;code&gt;&amp;lt;Leader&amp;gt;dT&lt;/code&gt; (&lt;code&gt;:call vimspector#ClearBreakpoints()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Before moving on to the next section, spend 10-15 minutes experimenting with &lt;code&gt;simple.js&lt;/code&gt;. Change the codes in &lt;code&gt;simple.js&lt;/code&gt;. Move around. Play.&lt;/p&gt;

&lt;p&gt;Before we move on to the next section, let's briefly go over what  the 6 Vimspector windows do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#variables-window"&gt;
  &lt;/a&gt;
  Variables window
&lt;/h4&gt;

&lt;p&gt;The Variables window contains the available variables (and their current values) relative to their current scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- Scope: Local
  + this (Object): Object
  - __dirname (string): "/Users/iggy/.vim/plugged/vimspector/support/test/node/simple"
  - __filename (string): "/Users/iggy/.vim/plugged/vimspector/support/test/node/simple/simple.js"
  + exports (Object): Object {}
  + module (Object): Module {id: ".", path: "/Users/iggy/.vim/plugged/vimspector/support/test/n‚Ä¶", exports: Object, ‚Ä¶}
 *- msg (undefined): undefined
 *- obj (undefined): undefined
  + require (Function): function require(path) { ‚Ä¶ }
+ Scope: Global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, inside the Local scope, I have common Node variables like &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt; and the written variables &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt;. Pay attention as you step over to the next variable. Watch them go from undefined to having a value.&lt;/p&gt;

&lt;p&gt;Do this: step over and into different function scopes. Find a way to get inside a function and see what the available variables are. Then step outside and compare them. Also check what is inside &lt;code&gt;Scope: Global&lt;/code&gt;. Why does it have the variables it has? What does it tell you about Node?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#watch-window"&gt;
  &lt;/a&gt;
  Watch Window
&lt;/h4&gt;

&lt;p&gt;The Watch window is where you can watch for specific values. Initially it will be blank. If you want to watch the value of the &lt;code&gt;msg&lt;/code&gt; variable, type into the Watch window that variable, &lt;code&gt;msg&lt;/code&gt;. When you're at the start of the file, the value will be &lt;code&gt;undefined&lt;/code&gt;. Then as you steps over, the value will change into &lt;code&gt;'Hello, world!'&lt;/code&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stack-trace-window"&gt;
  &lt;/a&gt;
  Stack Trace window
&lt;/h4&gt;

&lt;p&gt;The Stack Trace window displays the call stack of the node file execution.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#console-window"&gt;
  &lt;/a&gt;
  Console window
&lt;/h4&gt;

&lt;p&gt;In the Console window, you can enter the defined variables like &lt;code&gt;msg&lt;/code&gt;. You can also evaluate expressions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#terminal-window"&gt;
  &lt;/a&gt;
  Terminal window
&lt;/h4&gt;

&lt;p&gt;The Terminal window displays all the outputs throughout the entire debugging session.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging-in-a-browser"&gt;
  &lt;/a&gt;
  Debugging in a Browser
&lt;/h3&gt;

&lt;p&gt;Let's explore how to use the Chrome-debugger to debug a client-side app. Lucky for us, there is also an example in the Vimspector directory. Inside &lt;code&gt;~/.vim/plugged/vimspector/support/test/chrome/&lt;/code&gt; directory, you will find a file named &lt;code&gt;run_server&lt;/code&gt;, a &lt;code&gt;test.js&lt;/code&gt;, and a &lt;code&gt;.vimspector.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's check out what is inside the vimspector config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "launch": {
      "adapter": "chrome",
      "configuration": {
        "request": "launch",
        "url": "http://localhost:1234/",
        "webRoot": "${workspaceRoot}/www"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration sure looks different from the Node Vimspector config one we saw earlier. One important line is &lt;code&gt;"adapter": "chrome"&lt;/code&gt; - it indicates that we will be using a Chrome adapter. The URL is defined to be on &lt;code&gt;localhost:1234&lt;/code&gt; because that's the port where our server will be running on.&lt;/p&gt;

&lt;p&gt;Btw, when you launch Vimspector later, it will prompt if you want to break on uncaught exceptions etc again. If you don't want to deal with those prompts, add these lines inside the &lt;code&gt;.vimspector.json&lt;/code&gt; just like you added it to your Node app earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"breakpoints": {
  "exception": {
    "all": "N",
    "uncaught": "N"
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to install the correct gadget. In the earlier section, we installed one with &lt;code&gt;:VimspectorInstall vscode-node-debug2&lt;/code&gt;. This time we have to install one for chrome. Run this from Vim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:VimspectorInstall debugger-for-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, run the server (make sure you have PHP installed):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./run_server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out &lt;code&gt;localhost:1234&lt;/code&gt;. You should see a simple app with some pop-out modals.&lt;/p&gt;

&lt;p&gt;Now open &lt;code&gt;www/js/test.js&lt;/code&gt;. Add breakpoints anywhere you like. Run the Vimspector launch command &lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt;. By running it, it will automatically launch the Chrome browser. Vimspector will pause the Chrome browser where your breakpoints are. Step over and step into your breakpoints. Watch some variables. Change the code. Play around!&lt;/p&gt;

&lt;p&gt;Note: check out the Variables window. Check out both the Local and Global scope. Did you see anything different in the Global scope compared to when you're debugging with Node? What does this tell you about client-side vs backend code execution?&lt;/p&gt;

&lt;p&gt;Note 2: notice how this time, when you launch Vimspector, it launches a Chrome browser. If you look at the &lt;code&gt;.vimspector.json&lt;/code&gt;, you'll see a &lt;code&gt;"request": "launch",&lt;/code&gt; instead of &lt;code&gt;"request": "attach",&lt;/code&gt; from earlier Node debugging. How are they different? There are two ways you can debug an app: by attaching it to an already running process or by launching a new process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-a-jest-test"&gt;
  &lt;/a&gt;
  Debugging a Jest test
&lt;/h2&gt;

&lt;p&gt;Now let's learn how to debug a Jest test. For this section, I will be using the &lt;a href="https://github.com/microsoft/vscode-recipes/"&gt;vscode-recipes&lt;/a&gt; repository. First go to the site and clone the repository. Then go to the &lt;code&gt;debugging-jest-tests/&lt;/code&gt; directory. You will find two directories: &lt;code&gt;lib/&lt;/code&gt; and a &lt;code&gt;test/&lt;/code&gt;. This is our workspace root directory. &lt;/p&gt;

&lt;p&gt;First, install the dependencies: &lt;code&gt;npm i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure that the Jest test is running and they are all passing: &lt;code&gt;npm run test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Debugging a Jest test requires a node debugger. If you've been typing along, you should already have the Node debugger from earlier. With Vimspector, you install your gadget only once (Vimspector saves all the installed gadgets inside the Vimspector directory - in my case, they are stored inside &lt;code&gt;~/.vim/plugged/vimspector/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;debugging-jest-tests/&lt;/code&gt; directory, add a &lt;code&gt;.vimspector.json&lt;/code&gt; file. Inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "configurations": {
    "my awesome jest test": {
      "adapter": "vscode-node",
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "name": "Jest debugger",
        "type": "node",
        "console": "integratedTerminal",
        "program": "${workspaceRoot}/node_modules/.bin/jest",
        "skipFiles": ["*/&amp;lt;node_internals&amp;gt;/**/*.js", "node_modules/**/*.js"],
        "cwd": "${workspaceRoot}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration looks familiar, with a new addition of: &lt;code&gt;"program"&lt;/code&gt;: "&lt;code&gt;${workspaceRoot}/node_modules/.bin/jest"&lt;/code&gt;. Here's the breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;workspaceRoot&lt;/code&gt; is the current directory (the &lt;code&gt;debugging-jest-tests/&lt;/code&gt; directory). &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;node_modules/.bin/jest&lt;/code&gt; is the Jest executable from the &lt;code&gt;node_modules/&lt;/code&gt; (which you should have after &lt;code&gt;npm i&lt;/code&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time when you run the debugger, Vimspector needs to run the Jest executable. One place where you can find a Jest executable is inside the &lt;code&gt;node_modules/&lt;/code&gt; directory. You could've also run it from the global Jest command, but I like to keep it compartmentalized (what if I am running this from a container and I'm not guaranteed to have a global Jest command? By using the &lt;code&gt;.bin/jest&lt;/code&gt; command, I'm guaranteed to have it - but that's just my personal preference).&lt;/p&gt;

&lt;p&gt;Cool! Let's put some breakpoints inside the test files, then launch the Vimspector (&lt;code&gt;&amp;lt;Leader&amp;gt;dd&lt;/code&gt;). Voila! Your test suite will pause and you can now debug your code.&lt;/p&gt;

&lt;p&gt;If you put your breakpoint on the line where it calls the function, like the function &lt;code&gt;add()&lt;/code&gt; below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
it('Should return correct result', () =&amp;gt; {
  const result = add(1, 2); // put a breakpoint here
  expect(result).toEqual(3);
});
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you step into it (&lt;code&gt;&amp;lt;Leader&amp;gt;dl&lt;/code&gt;), it will go into the original function declaration inside &lt;code&gt;lib/calc.js&lt;/code&gt;, allowing you to investigate the source code. How awesome is that!? With this, you can debug a faulty test down to where the function originated!&lt;/p&gt;

&lt;p&gt;There is one problem. With the current Vimspector config, it will run &lt;em&gt;all&lt;/em&gt; the tests when you launch it. That's great but in real life, your app probably has hundreds of tests (if you've been practicing TDD... &lt;strong&gt;wink wink&lt;/strong&gt;). Running &lt;em&gt;all&lt;/em&gt; tests are probably not the best way to live your life. What if you want to run one particular test at a time?&lt;/p&gt;

&lt;p&gt;You sure can!&lt;/p&gt;

&lt;p&gt;In Jest, you can run a specific file by passing that file name (or part of the name) as an argument. If you want to run only the &lt;code&gt;add.spec.js&lt;/code&gt;, you can run the command &lt;code&gt;jest add&lt;/code&gt;. Jest is smart enough to match the &lt;code&gt;add.spec.js&lt;/code&gt; and not the &lt;code&gt;subtract.spec.js&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you want to match a particular test in a file, Jest is also smart enough to match any keyword you pass using the &lt;code&gt;-t&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Suppose that inside the &lt;code&gt;add.spec.js&lt;/code&gt; I have two tests (notice that I modified the test descriptions):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { add } = require('../lib/calc');

describe('When adding numbers', () =&amp;gt; {
  it('one should return correct result', () =&amp;gt; {
    const result = add(1, 2);
    expect(result).toEqual(3);
  });

  it('two should not return correct result', () =&amp;gt; {
    const result = add(1, 5);
    expect(result).not.toEqual(3);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to run only the second test. To do that, from the CLI I can run &lt;code&gt;test add -t two&lt;/code&gt;. Jest is smart enough to run only &lt;code&gt;add.spec.js&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; only the &lt;code&gt;'two should not return correct result'&lt;/code&gt; test! Try it.&lt;/p&gt;

&lt;p&gt;Armed with that knowledge, we need to pass these arguments when running Vimspector. Turns out that Vimspector has the &lt;code&gt;args&lt;/code&gt; attribute where you can pass argument(s) to your program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "jest": {
      "adapter": "vscode-node",
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "request": "launch",
        "name": "Jest debugger",
        "type": "node",
        "console": "integratedTerminal",
        "program": "${workspaceRoot}/node_modules/.bin/jest",
        "skipFiles": ["*/&amp;lt;node_internals&amp;gt;/**/*.js", "node_modules/**/*.js"],
        "cwd": "${workspaceRoot}",
        "args": [
                "${FileName}",
                "-t",
                "${TestName}"
            ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our new attribute, &lt;code&gt;args&lt;/code&gt;, is an array with 3 elements. The funny looking variables (&lt;code&gt;${FileName}&lt;/code&gt; and &lt;code&gt;${TestName}&lt;/code&gt;) are the Vimspector's named arguments. With this I can pass the &lt;code&gt;FileName&lt;/code&gt; and &lt;code&gt;TestName&lt;/code&gt; variables when launching Vimspector.&lt;/p&gt;

&lt;p&gt;Let's launch Vimspector again. This time it will prompt: "Enter value for FileName" (in which you'll enter "add"). After that, the Vimspector will prompt: "Enter value for TestName" (in which you'll enter "two"). And watch it runs only that particular test from that particular file. Success!! &lt;/p&gt;

&lt;p&gt;Now you have &lt;strong&gt;no&lt;/strong&gt; excuse not to practice TDD! :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-an-express-app"&gt;
  &lt;/a&gt;
  Debugging an Express App
&lt;/h2&gt;

&lt;p&gt;For the next example, let's try to debug a simple Express app. Since express is a node library, a node gadget is required.&lt;/p&gt;

&lt;p&gt;Create a directory (&lt;code&gt;mkdir express-debug&lt;/code&gt;) and go in there. Run &lt;code&gt;npm init -y&lt;/code&gt; to initialize an NPM project. Install express (&lt;code&gt;npm i express&lt;/code&gt;). Then create an &lt;code&gt;app.js&lt;/code&gt;. Inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
const port = 3000;

const helloFunc = () =&amp;gt; {
  const hello = 'hello';
  return hello;
};

app.get('/', (req, res) =&amp;gt; {
  const msg = helloFunc();
  res.send(msg);
});

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}!`)
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;.vimspector.json&lt;/code&gt; in that directory. At minimum you should have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "run": {
      "adapter": "vscode-node",
      "default": true,
      "configuration": {
        "type": "node",
        "request": "attach",
        "processId": "${processId}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it's probably better if we enable some default configs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "run": {
      "adapter": "vscode-node",
      "default": true,
      "breakpoints": {
        "exception": {
          "all": "N",
          "uncaught": "N"
        }
      },
      "configuration": {
        "name": "Attaching to a process ID",
        "type": "node",
        "request": "attach",
        "skipFiles": ["node_modules/**/*.js", "&amp;lt;node_internals&amp;gt;/**/*.js"],
        "processId": "${processId}"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the express app in inspect mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --inspect app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see your app running on &lt;code&gt;localhost:3000&lt;/code&gt;. Next, add a few breakpoints inside &lt;code&gt;app.js&lt;/code&gt;, then launch Vimspector (it will also ask for &lt;code&gt;processId&lt;/code&gt;, but I find that not giving it any value and simply pressing the Return/Enter key works).&lt;/p&gt;

&lt;p&gt;Finally, refresh the page and you should see the debugger pauses at your first breakpoint. From there, you can step out, step into, and step over your code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qxMywhSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf78ki6u7pmopbgq8g4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qxMywhSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf78ki6u7pmopbgq8g4g.png" alt="Vimspector express"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You've successfully debugged an express app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;This article barely scratched the surface of what a debugger can do. There are many more things that you can do with Vimspector. Hopefully by approaching it from different angles, you'll gain a more thorough understanding of this plugin. &lt;/p&gt;

&lt;p&gt;Your debugging needs probably differ from the examples I gave in this article, but I am a sincere believer that if you understand the principles behind it, you should be able to implement Vimspector to meet your needs.&lt;/p&gt;

&lt;p&gt;With that, thanks for reading this far. Happy Vimming!&lt;/p&gt;

</description>
      <category>vim</category>
      <category>vimspector</category>
      <category>debug</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Why you Gatsby is framework of future</title>
      <author>malapashish</author>
      <pubDate>Sat, 07 Aug 2021 13:49:09 +0000</pubDate>
      <link>https://dev.to/malapashish/why-you-gatsby-is-framework-of-future-ah9</link>
      <guid>https://dev.to/malapashish/why-you-gatsby-is-framework-of-future-ah9</guid>
      <description>&lt;p&gt;As web developers, we are constantly looking for new technologies that are interesting and helpful in our projects. If you are in the web dev community for enough time you have heard about something called &lt;strong&gt;Gatsby&lt;/strong&gt;. &lt;br&gt;
This article will introduce Gatsby and the reasons you should consider using it while making your next project. However, I am trying to make a series where we will try to make a simple application with Gatsby. So Here we go(in Mario voice).&lt;br&gt;
&lt;a href="https://i.giphy.com/media/q6U4fbreC4Neo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/q6U4fbreC4Neo/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
 Gatsby is an open-source static site generator that is based on JAMstack. Confused about what is a static generator and what do you mean by JAMstack, don‚Äôt worry about it check out these resources &lt;a href="https://www.gatsbyjs.com/docs/glossary/static-site-generator/"&gt;Static Generator&lt;/a&gt; and &lt;a href="https://www.gatsbyjs.com/docs/glossary/jamstack/"&gt;JAMstack&lt;/a&gt;. So now will see some of the reasons why is it so famous.-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-the-speed"&gt;
  &lt;/a&gt;
  1. The Speed:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5xaOcLGDO1jxkpDIPYY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5xaOcLGDO1jxkpDIPYY/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
One of the things that always worries a web developer while using new technology is that its effect on performance. Here Gatsby comes into the picture. The websites built using Gatsby are 2-3 times faster than websites of similar types of sites. Do not believe me take a look at some of the real-world examples &lt;a href="https://www.gatsbyjs.com/showcase/"&gt;here&lt;/a&gt;.  The framework under the hood takes care of performance on its own, providing you with an opportunity to focus on more fun things. If you are interested in how Gatsby does this check &lt;a href="https://www.freecodecamp.org/news/how-gatsby-is-so-blazing-fast-c99a6f2d405e/"&gt;this&lt;/a&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-uses-popular-and-widely-used-technology"&gt;
  &lt;/a&gt;
  2. Uses popular and widely used technology:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fwQwL5TuguDJ0HYdDM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fwQwL5TuguDJ0HYdDM/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
Gatsby is based on everyone‚Äôs favourite framework React. I don‚Äôt think we need to introduce React here, if you have heard about Gatsby then there is a chance that you probably heard about React. Gatsby aims to behave like a regular React application and uses its components which you can reuse and share throughout your project.&lt;br&gt;
Gatsby also uses GraphQL to build its data layer. GraphQL lets you query all necessary data from wherever you want: markdown files, databases, Storyblok, traditional CMSs like Drupal, and so on. If you are anything like me and never tried GraphQL before and planning on making regular API calls in components then trust me Gatsby will be a good reason to learn GraphQL. Using GraphQL with Gatsby makes the development easier.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-fun-learning-experience"&gt;
  &lt;/a&gt;
  3. Fun learning experience:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
One of the hardest things while learning new technology is how much time is required to learn them accurately. However, in Gatsby‚Äôs case, it is based on some of the most popular technologies, so you don‚Äôt need to learn everything from base. Even if you have never learned technologies like React or GraphQL, Gatsby provides you perfect opportunity to learn and master them. Gatsby also has a well-written tutorial to get you started in no time &lt;a href="https://www.gatsbyjs.com/docs/tutorial/"&gt;check it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So this was an introduction to Gatsby. I am also learning Gatsby,  discovering new things about it every day and so far, I can say that everyone looking to become a good web developer should check out Gatsby. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gatsby</category>
      <category>react</category>
    </item>
    <item>
      <title>Pipeline Pattern in Laravel</title>
      <author>Abrar Ahmad</author>
      <pubDate>Sat, 07 Aug 2021 13:41:07 +0000</pubDate>
      <link>https://dev.to/abrardev99/pipeline-pattern-in-laravel-278p</link>
      <guid>https://dev.to/abrardev99/pipeline-pattern-in-laravel-278p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;PP = Pipeline Pattern&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, we will learn the Pipeline Pattern and how to use it in Laravel. You can read in depth about PP at &lt;a href="https://www.cise.ufl.edu/research/ParallelPatterns/PatternLanguage/AlgorithmStructure/Pipeline.htm"&gt;HERE&lt;/a&gt;. PP can be implemented differently in any language but we'll be seeing in PHP &lt;a href="//laravel.com"&gt;Laravel&lt;/a&gt; as Laravel already using this pattern at it's &lt;a href="https://github.com/laravel/framework/blob/dc393980dec1b3ee4b0f36b5b0188859a399b4e4/src/Illuminate/Foundation/Http/Kernel.php#L138"&gt;core&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pipeline-pattern"&gt;
  &lt;/a&gt;
  What is Pipeline Pattern
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIgRRakU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7ek7dushwcdbxh03h7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIgRRakU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7ek7dushwcdbxh03h7m.png" alt="Pipeline Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pipeline is a design pattern specifically optimized to handle stepped changes to an object. Think of an assembly line, where each step is a pipe and by the end of the line, you have your transformed object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are vast implementations of PP but to understand easily let's implement a filtering functionality using the pipeline pattern and Laravel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's say we are building filtering system in Laravel, we can filter Post by different parameters like is active or not, sort by ASC or DESC. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-implementing-pdp"&gt;
  &lt;/a&gt;
  Before Implementing PDP.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#postcontrollerphp"&gt;
  &lt;/a&gt;
  PostController.php
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;index&lt;/code&gt; method, we are performing filters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function index(Request $request)
    {
        $query = Post::query();

        if ($request-&amp;gt;has('active')) {
            $query-&amp;gt;where('active', $request-&amp;gt;input('active'));
        }

       if ($request-&amp;gt;has('sort')) {
            $query-&amp;gt;orderBy('title', $request-&amp;gt;input('sort'));
        }

        /* get filtered data */
        $posts = $query-&amp;gt;get();

        return view('demo', compact('posts'));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-convert-this-mess-into-beautiful-filter-pipeline"&gt;
  &lt;/a&gt;
  Let's convert this mess into beautiful filter pipeline.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#postcontrollerphp"&gt;
  &lt;/a&gt;
  PostController.php
&lt;/h3&gt;

&lt;p&gt;To implement Pipeline pattern, we need to make little refactoring. &lt;code&gt;Index&lt;/code&gt; method will looks like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function index(Request $request)
    {
     $posts = app(Pipeline::class)
            -&amp;gt;send(Post::query())
            -&amp;gt;through([
                \App\Filters\Active::class,
                \App\Filters\Sort::class
            ])
            -&amp;gt;thenReturn()
            -&amp;gt;get();

     return view('demo', compact('posts'));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;code&gt;send()&lt;/code&gt; method will pass your query to handle method&lt;br&gt;
*&lt;code&gt;through()&lt;/code&gt; method get the parameter as classes to pass through them. In simple words this is the list of filter classes&lt;br&gt;
*&lt;code&gt;thenReturn()&lt;/code&gt; will return the final output&lt;br&gt;
It's all provided by Laravel except we need to create Filter classes which being passed in &lt;code&gt;through()&lt;/code&gt; method. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#active-class"&gt;
  &lt;/a&gt;
  Active class
&lt;/h3&gt;

&lt;p&gt;Create Active class under app/Filters namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace App\Filters;

use Closure;

class Active
{
    public function handle($request, Closure $next)
    {
        if (! request()-&amp;gt;has('active')) {
            return $next($request);
        }

        return $next($request)-&amp;gt;where('active', request()-&amp;gt;input('active'));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sort-class"&gt;
  &lt;/a&gt;
  Sort class
&lt;/h3&gt;

&lt;p&gt;Create Active class under app/Filters namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace App\Filters;

use Closure;

class Sort
{
    public function handle($request, Closure $next)
    {
        if (! request()-&amp;gt;has('sort')) {
            return $next($request);
        }

        return $next($request)-&amp;gt;orderBy('title', $request-&amp;gt;input('sort'));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it.
&lt;/h3&gt;

&lt;p&gt;Now if I want to add an other filter, I need to make new class let's say &lt;code&gt;Published&lt;/code&gt; and this class in &lt;code&gt;through()&lt;/code&gt; method and implement filter logic in class &lt;code&gt;handle&lt;/code&gt; method. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It might feel overwhelm to implement Pipelines just for two filters but it will be much clean and beneficial for large number of filter or any other complex implementation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-filter-classes"&gt;
  &lt;/a&gt;
  Cleaning Filter Classes
&lt;/h2&gt;

&lt;p&gt;PS: We can clean filter classes by extracting common code in base class. Comment below if you want refactoring of Filter classes in next article. &lt;br&gt;
Until next, &lt;br&gt;
Ahmad&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>pipeline</category>
      <category>pattern</category>
    </item>
    <item>
      <title>Android Basics: Using Relative layout</title>
      <author>ROHIT KUMAR</author>
      <pubDate>Sat, 07 Aug 2021 13:29:04 +0000</pubDate>
      <link>https://dev.to/rohitk570/android-basics-using-relative-layout-2980</link>
      <guid>https://dev.to/rohitk570/android-basics-using-relative-layout-2980</guid>
      <description>&lt;h3&gt;
  &lt;a href="#in-this-article"&gt;
  &lt;/a&gt;
  In this article,
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We will make an non-interactive app with just using Relative ViewGroup  and no line of extra java code&lt;br&gt;
and also learn about the Relative Layout&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;The entire content is inspired by ,&lt;br&gt;
Google's udacity course &lt;a href="https://www.udacity.com/course/android-basics-user-interface--ud834"&gt;Android Basics: User Interface&lt;/a&gt;. Its first part of the five parts &lt;a href="https://www.udacity.com/course/android-basics-nanodegree-by-google--nd803"&gt;Android Basics Nanodegree Program&lt;/a&gt; series , This course is for basics of &lt;strong&gt;Android&lt;/strong&gt; and &lt;strong&gt;Java programming&lt;/strong&gt; .&lt;br&gt;
So I would be writing a Blog series and this is my second blog in this series.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#ui-design-of-our-app-would-look-like-this-"&gt;
  &lt;/a&gt;
  UI design  of our app  would look like this ,
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhgmORNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x7g371ef2ly2e3nqymc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhgmORNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x7g371ef2ly2e3nqymc.png" alt="design of the UI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-relative-layout"&gt;
  &lt;/a&gt;
  What is Relative Layout‚ùì
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;View&lt;/strong&gt; is a rectangular area on the screen.&lt;br&gt;
A &lt;strong&gt;ViewGroup&lt;/strong&gt; is a big View that can contain smaller Views inside of it. The smaller Views are called the children of the ViewGroup and ViewGroup is called the parent of its children.&lt;br&gt;
Basically it is used to display  more views neatly on the screen .&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;RelativeLayout&lt;/em&gt;&lt;/strong&gt; is a common type of ViewGroup that lets us position child views relative to sibling elements &lt;em&gt;(such as to the left-of or below another view)_ or **relative to the parent&lt;/em&gt;* RelativeLayout area &lt;em&gt;(such as aligned to the bottom, left or center)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9QVtAM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi7ftfmsv5jh4gb2yg6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9QVtAM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi7ftfmsv5jh4gb2yg6b.png" alt="relative layout"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#positioning-views"&gt;
  &lt;/a&gt;
  Positioning Views
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;By default, all child views are drawn at the top-left of the layout&lt;/strong&gt; , so you must define the position of each view using the various layout properties available from &lt;a href="https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams"&gt;RelativeLayout.LayoutParams&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#relativelayoutlayoutparams"&gt;
  &lt;/a&gt;
  RelativeLayout.LayoutParams
&lt;/h3&gt;

&lt;p&gt;The  &lt;strong&gt;View&lt;/strong&gt; within the relative layout , &lt;em&gt;uses the value of these Relative layout parameters&lt;/em&gt; to determine where to position the view on the screen. &lt;br&gt;
The &lt;strong&gt;value for each layout property&lt;/strong&gt; is either a &lt;strong&gt;boolean&lt;/strong&gt; to enable a layout position relative to the parent RelativeLayout &lt;strong&gt;&lt;em&gt;or&lt;/em&gt;&lt;/strong&gt; an &lt;strong&gt;ID that references another view in the layout&lt;/strong&gt; against which the view should be positioned.&lt;/p&gt;

&lt;p&gt;The following are the major &lt;code&gt;attributes&lt;/code&gt; in RelativeLayout available to its view .&lt;br&gt;
&lt;strong&gt;&lt;em&gt;They lay across four different categories:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#align-by-the-parent-view"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£Align by the parent view
&lt;/h3&gt;

&lt;p&gt;These type of attributes make the view to be fixed to any side of the parent view.&lt;br&gt;
Its attributes has two values either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; boolean value .&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;XML Attributes&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignParentBottom&lt;/td&gt;
&lt;td&gt;If true, makes the bottom edge of this view match the bottom edge of the parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignParentEnd&lt;/td&gt;
&lt;td&gt;If true, makes the end edge of this view match the end edge of the parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignParentLeft&lt;/td&gt;
&lt;td&gt;If true, makes the left edge of this view match the left edge of the parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignParentRight&lt;/td&gt;
&lt;td&gt;If true, makes the right edge of this view match the right edge of the parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignParentStart&lt;/td&gt;
&lt;td&gt;If true, makes the start edge of this view match the start edge of the parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignParentTop&lt;/td&gt;
&lt;td&gt;If true, makes the top edge of this view match the top edge of the parent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Examples.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8u4AWD7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ynx6zgxr2243kniwaen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8u4AWD7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ynx6zgxr2243kniwaen.png" alt="Align parent "&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#center-relative-to-parent-view"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£Center relative to Parent View
&lt;/h3&gt;

&lt;p&gt;Its attributes has two values either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; boolean value .&lt;br&gt;
When you want to place your Views in the center relative to the parent, you can use the following 3 attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;XML Attributes&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_centerHorizontal&lt;/td&gt;
&lt;td&gt;If true, centers this child horizontally within its parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_centerInParent&lt;/td&gt;
&lt;td&gt;If true, centers this child horizontally and vertically within its parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_centerVertical&lt;/td&gt;
&lt;td&gt;If true, centers this child vertically within its parent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Examples.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O7MwiKXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lr8rnqpn5o863mhcdmfd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7MwiKXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lr8rnqpn5o863mhcdmfd.png" alt="Centre parent"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#relative-to-child-view"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£Relative to Child View
&lt;/h3&gt;

&lt;p&gt;We can position the new views relative to other existing views.&lt;br&gt;
We just need to create the id of the Anchor view(the main child view its position should be fixed ) using  an attributes &lt;strong&gt;&lt;code&gt;android:id&lt;/code&gt;&lt;/strong&gt; .&lt;br&gt;
Now these attributes value is the same ID that refer to the the anchor view  against which the view should be positioned.&lt;br&gt;
For eg.&lt;br&gt;
&lt;code&gt;android:layout_toLeftOf="@id/name_of_anchorView"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Following attributes can be used for doing so.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;XML Attributes&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_above&lt;/td&gt;
&lt;td&gt;Positions the bottom edge of this view above the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_below&lt;/td&gt;
&lt;td&gt;Positions the top edge of this view below the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_toEndOf&lt;/td&gt;
&lt;td&gt;Positions the start edge of this view to the end of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_toLeftOf&lt;/td&gt;
&lt;td&gt;Positions the right edge of this view to the left of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_toRightOf&lt;/td&gt;
&lt;td&gt;Positions the left edge of this view to the right of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_toStartOf&lt;/td&gt;
&lt;td&gt;Positions the end edge of this view to the start of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Examples.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNUGkQ0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0au7nbptkxt9a2j8dnuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNUGkQ0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0au7nbptkxt9a2j8dnuz.png" alt="relative child"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#align-view-relative-to-child-view"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£Align View relative to Child View
&lt;/h3&gt;

&lt;p&gt;If you want to align the new view relative to any existing view, then you can use the following attributes.&lt;br&gt;
Here also these attributes value will be id which refer to anchor View&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;XML Attributes&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignBaseline&lt;/td&gt;
&lt;td&gt;Positions the baseline of this view on the baseline of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignBottom&lt;/td&gt;
&lt;td&gt;Makes the bottom edge of this view match the bottom edge of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignEnd&lt;/td&gt;
&lt;td&gt;Makes the end edge of this view match the end edge of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignLeft&lt;/td&gt;
&lt;td&gt;Makes the left edge of this view match the left edge of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignRight&lt;/td&gt;
&lt;td&gt;Makes the right edge of this view match the right edge of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignStart&lt;/td&gt;
&lt;td&gt;Makes the start edge of this view match the start edge of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android:layout_alignTop&lt;/td&gt;
&lt;td&gt;Makes the top edge of this view match the top edge of the given anchor view ID.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Examples.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kJkZS5oM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azzlpp21yfbawkg5rsyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJkZS5oM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azzlpp21yfbawkg5rsyx.png" alt="Align Child"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#now"&gt;
  &lt;/a&gt;
  Now,
&lt;/h1&gt;

&lt;p&gt;We will make a &lt;strong&gt;Birthday Card app&lt;/strong&gt; which will basically a non-interactive  app i.e. no line of extra java code just an XML code to design the UI of our app, by using Relative Layout .&lt;/p&gt;

&lt;p&gt;Whenever ,we write the code of XML Layout ,think of &lt;strong&gt;3 step&lt;/strong&gt; in mind&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#step-1gtselect-the-views"&gt;
  &lt;/a&gt;
  Step 1-&amp;gt;Select the Views
&lt;/h6&gt;
&lt;h6&gt;
  &lt;a href="#step-2gtposition-the-views"&gt;
  &lt;/a&gt;
  Step 2-&amp;gt;Position the Views
&lt;/h6&gt;
&lt;h6&gt;
  &lt;a href="#step-3gtstyles-the-views"&gt;
  &lt;/a&gt;
  Step 3-&amp;gt;Styles the Views
&lt;/h6&gt;
&lt;h3&gt;
  &lt;a href="#step-1select-the-view"&gt;
  &lt;/a&gt;
  Step 1:Select the View
&lt;/h3&gt;

&lt;p&gt;Before writing the code for the UI , we must design or think about how our layout would look so either make the design or  diagram of the UI page , then think about how to make it to code .&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#our-layout-would-look-like-this-"&gt;
  &lt;/a&gt;
  Our layout would look like this ,
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhgmORNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x7g371ef2ly2e3nqymc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhgmORNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x7g371ef2ly2e3nqymc.png" alt="design of the UI"&gt;&lt;/a&gt;&lt;br&gt;
Looking at the image its clear that ,&lt;br&gt;&lt;br&gt;
We will be using 2 TextView , 1 ImageView as, we see there is image in background at on the image there Text written at two different place .&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2position-the-views"&gt;
  &lt;/a&gt;
  Step 2:Position the Views
&lt;/h3&gt;

&lt;p&gt;Now to choose , which ViewGroup we should use to position the views ,as we see two TextView are overlapping over the ImageView hence , Relative Layout is perfect for this situation ,help in positioning the two textview as they are positioned.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#overlapping-view"&gt;
  &lt;/a&gt;
  Overlapping View
&lt;/h5&gt;

&lt;p&gt;In Relative Layout ,View overlapping and stack up from &lt;strong&gt;top to down manner&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jX2b2af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11ht4tpthm5mgijlkf5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jX2b2af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11ht4tpthm5mgijlkf5y.png" alt="overlapping view"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#insert-an-image"&gt;
  &lt;/a&gt;
  Insert an image
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Save the image in &lt;strong&gt;&lt;code&gt;drawable folder&lt;/code&gt;&lt;/strong&gt; and use an  attributes  &lt;code&gt;android:src&lt;/code&gt; to show image&lt;/li&gt;
&lt;li&gt;Here we should also &lt;code&gt;centre crop&lt;/code&gt; to image so that it will scale up the image and encrop it , to make a full bleed  image, and give a nice immersive feel, and its &lt;strong&gt;width and height&lt;/strong&gt; to &lt;code&gt;match_parent&lt;/code&gt; so that ,image take whole space of the screen size
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:scaleType=&lt;/span&gt;&lt;span class="s"&gt;"centerCrop"&lt;/span&gt;
        &lt;span class="na"&gt;android:src=&lt;/span&gt;&lt;span class="s"&gt;"@drawable/happybirthday"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#positioning-the-textview"&gt;
  &lt;/a&gt;
  Positioning the TextView
&lt;/h5&gt;

&lt;p&gt;Now as we choosed Relative Layout , so think about how to align and position views with respect to other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"HAPPY BIRTHDAY"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_alignParentEnd=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_alignParentBottom=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"  ROHIT.K üéä "&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;HAPPY BIRTHDAY&lt;/code&gt; TextView will by default will be placed at ** top right corner** we don't need to add any &lt;em&gt;layout parameter&lt;/em&gt; to position view &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ROHIT.K&lt;/code&gt; TextView its needed to be positioned at the &lt;strong&gt;bottom-right corner&lt;/strong&gt; we will use two attributes as shown above and make that value to be &lt;code&gt;true&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;height and width&lt;/code&gt; should be set to &lt;strong&gt;wrap_content&lt;/strong&gt; as we need to be flexible with the amount of text written
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the with this code, layout  would look like this...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xA5vskJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjxtchbf470yiheb2tje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xA5vskJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjxtchbf470yiheb2tje.png" alt="positioning view"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3-style-the-views"&gt;
  &lt;/a&gt;
  Step 3: Style the Views
&lt;/h3&gt;

&lt;p&gt;We need to add or change some more attributes ,to add some style and good more better.&lt;br&gt;
 &lt;strong&gt;So add style , to make the UI more beautiful and better user experience&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For styling , we can change the &lt;strong&gt;size ,front &amp;amp; color of the text&lt;/strong&gt;, according to the situation .&lt;/li&gt;
&lt;li&gt;We can also change the color of the background of the TextView&lt;/li&gt;
&lt;li&gt;And best is to also add &lt;strong&gt;padding or margin&lt;/strong&gt; so that make more readable &amp;amp; not smushed at the corner .&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#for-making-text-larger"&gt;
  &lt;/a&gt;
  For making Text Larger
&lt;/h5&gt;

&lt;p&gt;Make the size of text &lt;code&gt;36sp&lt;/code&gt; using attributes,&lt;br&gt;
 &lt;code&gt;android:textSize&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#setting-the-font"&gt;
  &lt;/a&gt;
  Setting the Font
&lt;/h5&gt;

&lt;p&gt;Set the Text font to &lt;code&gt;sans-serif-light&lt;/code&gt; using attributes,&lt;br&gt;
&lt;code&gt;android:fontFamily&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#setting-the-color"&gt;
  &lt;/a&gt;
  Setting the color
&lt;/h5&gt;

&lt;p&gt;use the attributes  &lt;code&gt;android:textColor&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#background-of-textview"&gt;
  &lt;/a&gt;
  Background of textView
&lt;/h5&gt;

&lt;p&gt;for changing background color we will  attributes &lt;code&gt;android:background&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#add-padding-and-margin"&gt;
  &lt;/a&gt;
  Add padding and margin
&lt;/h5&gt;

&lt;p&gt;we will use the attributes &lt;code&gt;android:padding&lt;/code&gt; and &lt;code&gt;android:layout_margin&lt;/code&gt;we can use either of the both or both as per situation&lt;br&gt;
&lt;strong&gt;Styling  depends upon how better we can think to make our app look more better and give aesthetic look&lt;/strong&gt;&lt;br&gt;
Its totally depend upon what you will add&lt;/p&gt;

&lt;p&gt;THIS the Image of our app how it will look like after writing these in  XML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dtbo3JFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v67l1ihpn75mj4wi2kfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dtbo3JFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v67l1ihpn75mj4wi2kfk.png" alt="app image "&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Code to write in  &lt;code&gt;activity_main.xml&lt;/code&gt; inside &lt;strong&gt;android studios&lt;/strong&gt; &lt;br&gt;
located inside res folder&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;RelativeLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:contentDescription=&lt;/span&gt;&lt;span class="s"&gt;"@null"&lt;/span&gt;
        &lt;span class="na"&gt;android:scaleType=&lt;/span&gt;&lt;span class="s"&gt;"centerCrop"&lt;/span&gt;
        &lt;span class="na"&gt;android:src=&lt;/span&gt;&lt;span class="s"&gt;"@drawable/happybirthday"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"20dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;"#9E03DAC5"&lt;/span&gt;
        &lt;span class="na"&gt;android:fontFamily=&lt;/span&gt;&lt;span class="s"&gt;"sans-serif-light"&lt;/span&gt;
        &lt;span class="na"&gt;android:padding=&lt;/span&gt;&lt;span class="s"&gt;"30dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"HAPPY BIRTHDAY"&lt;/span&gt;
        &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@android:color/white"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"36sp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_alignParentEnd=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_alignParentBottom=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"30dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;"#C8FFFFFF"&lt;/span&gt;
        &lt;span class="na"&gt;android:fontFamily=&lt;/span&gt;&lt;span class="s"&gt;"sans-serif-light"&lt;/span&gt;
        &lt;span class="na"&gt;android:padding=&lt;/span&gt;&lt;span class="s"&gt;"10dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"  ROHIT.K üéä "&lt;/span&gt;
        &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@color/teal_200"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"36sp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#thats-all-for-today"&gt;
  &lt;/a&gt;
  That's all for today!
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.studytonight.com/android/relative-layout-in-android"&gt;ImageSource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/android-basics-user-interface--ud834"&gt;Google's Udacity Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you liked my content, plz do share &lt;br&gt;
Also if you got any questions feel free to &lt;strong&gt;comment below&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;If you are thinking of starting an Android Development you can check this blog,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitk570" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46bzOWvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJpAQ_UY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644632/af4c3bd6-8ece-4383-a417-7f1fc3eaa7c1.jpg" alt="rohitk570"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What to Learn to get started with Android App Development?&lt;/h2&gt;
      &lt;h3&gt;ROHIT KUMAR „Éª Jul 12 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You! üòä
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/rohitk570/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/RohitK_570"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>java</category>
      <category>beginners</category>
      <category>androidstudio</category>
    </item>
    <item>
      <title>Ruby on Rails: Rome can be built in a day</title>
      <author>Akhil</author>
      <pubDate>Sat, 07 Aug 2021 12:39:19 +0000</pubDate>
      <link>https://dev.to/akhilgautam/ruby-on-rails-rome-can-be-built-in-a-day-24d9</link>
      <guid>https://dev.to/akhilgautam/ruby-on-rails-rome-can-be-built-in-a-day-24d9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-ruby-on-rails"&gt;
  &lt;/a&gt;
  What is Ruby on Rails?
&lt;/h2&gt;

&lt;p&gt;Ruby is a language developed in the mid-1990s by Matz while Rails is a web framework developed in 2003 by DHH. Ruby on Rails can be used to build an MVP in minimal time. &lt;strong&gt;It comes with all the basic tools needed to build an application, unlike other web frameworks that are just routers&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-first-see-some-of-the-products-built-with-ruby-on-rails"&gt;
  &lt;/a&gt;
  Let's first see some of the products built with Ruby on Rails
&lt;/h2&gt;

&lt;p&gt;During the early days of my career when I used to tell my friends that I am working on Ruby on Rails, their first reaction used to be, &lt;code&gt;I haven't heard of it, is anyone even using it?&lt;/code&gt; and my response used to be a list of applications that people are using every day that is running on Ruby on Rails. So here is a brief list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com"&gt;Gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv"&gt;Twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.airbnb.com"&gt;Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hulu.com"&gt;Hulu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coinbase.com"&gt;Coinbase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://soundcloud.com"&gt;Soundcloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shopify.com"&gt;Shopify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dribble.com"&gt;Dribble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://500px.com"&gt;500px&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kickstarter.com"&gt;Kickstarter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visit &lt;a href="https://stackshare.io/rails"&gt;https://stackshare.io/rails&lt;/a&gt; for more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The products mentioned above are not small ones, but the ones that process millions of requests every day. Some of them are Rails monolith while some are using Rails in a few of their micro-services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-ruby-on-rails"&gt;
  &lt;/a&gt;
  Why Ruby on Rails?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rails is a "batteries included" framework&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a new project is created(&lt;code&gt;rails new &amp;lt;project_name&amp;gt;&lt;/code&gt;), it is created with a directory structure that you will always find handy to put stuffs into. &lt;/li&gt;
&lt;li&gt;It comes with all the basic gems(libraries for non-rails people) that you will need to bootstrap a new product from zero.&lt;/li&gt;
&lt;li&gt;It follows &lt;code&gt;Convention over Configuration&lt;/code&gt;. Even when the project grows large you will know where to find what. Any new people can get going with a Rails project in no time.&lt;/li&gt;
&lt;li&gt;It comes with generators that help you create MVC objects like controllers, views, models with a single command. For instance to create a new model, run &lt;code&gt;rails generate model &amp;lt;model_name&amp;gt;&lt;/code&gt; or even shorter &lt;code&gt;rails g model &amp;lt;model_name&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ActiveRecord&lt;/strong&gt; is by far the best-loved feature of Rails. It is an ORM with such a straightforward syntax to create objects. For instance, creating a user object from the parameters looks like &lt;code&gt;User.create(&amp;lt;parameters&amp;gt;)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Entire Rails framework has a DSL that is human-readable and at the same time performant on machines. For instance, the following code-block shows a &lt;em&gt;model&lt;/em&gt; declaration in Rails:
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
    &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;
    &lt;span class="n"&gt;validates_presence_of&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;Let's not forget the fact that it has an active community with awesome people who are contributing day in and day out to Rails and other &lt;a href="https://rubygems.org/gems"&gt;gems&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It also has a great &lt;a href="https://guides.rubyonrails.org/"&gt;documentation/guide&lt;/a&gt; that can be referred to, to get up and running on Rails.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;Ruby is ‚ù§Ô∏è

&lt;ul&gt;
&lt;li&gt;It is one of the easiest languages to learn with a heck of a lot of free tutorials and guides.&lt;/li&gt;
&lt;li&gt;Ruby's &lt;a href="https://docs.ruby-lang.org/en/3.0.0/String.html"&gt; official documentation&lt;/a&gt; beats every other existing language with its simplicity.&lt;/li&gt;
&lt;li&gt;The metaprogramming in Ruby allows for the creation of intuitive DSLs and APIs that are too difficult to achieve in other languages.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#resources-to-learn-ruby-on-rails"&gt;
  &lt;/a&gt;
  Resources to learn Ruby on Rails
&lt;/h2&gt;

&lt;p&gt;Ruby on Rails repo: &lt;a href="https://github.com/rails/rails"&gt;https://github.com/rails/rails&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rubymonk.com/"&gt;https://rubymonk.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://academy.bigbinary.com/learn-ruby"&gt;https://academy.bigbinary.com/learn-ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubylearning.com/satishtalim/tutorial.html"&gt;http://rubylearning.com/satishtalim/tutorial.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ruby-lang.org/en/documentation/quickstart/"&gt;https://www.ruby-lang.org/en/documentation/quickstart/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#ruby-on-rails"&gt;
  &lt;/a&gt;
  Ruby on Rails
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://guides.rubyonrails.org/"&gt;https://guides.rubyonrails.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/DriftingRuby"&gt;https://www.youtube.com/c/DriftingRuby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gorails.com/"&gt;https://gorails.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bigbinary.com/learn-rubyonrails-book"&gt;https://www.bigbinary.com/learn-rubyonrails-book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After going through the above resources, you can start looking into open-source applications built with Ruby on Rails to get a better understanding of real-world applications. Upon getting acquainted with them, you can even start contributing to them.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Feel free to add your comments. Do like and share if you find this information useful.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>webframework</category>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Hhfty</author>
      <pubDate>Sat, 07 Aug 2021 12:37:25 +0000</pubDate>
      <link>https://dev.to/hhfty/10-vs-code-extensions-every-frontend-developer-should-use-4omm</link>
      <guid>https://dev.to/hhfty/10-vs-code-extensions-every-frontend-developer-should-use-4omm</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code.¬†&lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
    </item>
    <item>
      <title>Node Version Manager (nvm) for Windows</title>
      <author>Alexandre Freire</author>
      <pubDate>Sat, 07 Aug 2021 12:30:33 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/node-version-manager-nvm-for-windows-349m</link>
      <guid>https://dev.to/alexandrefreire/node-version-manager-nvm-for-windows-349m</guid>
      <description>&lt;p&gt;Content and all rights reserved to github.com/coreybutler/nvm-windows&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/install#windows-node-version-managers"&gt;npm&lt;/a&gt;/&lt;a href="https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows"&gt;Microsoft&lt;/a&gt;/Google recommended &lt;strong&gt;Node.js version manager for &lt;em&gt;Windows&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-not-the-same-thing-as-nvm"&gt;
  &lt;/a&gt;
  This is not the same thing as nvm.
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The original &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; is a completely separate project for Mac/Linux only.&lt;/em&gt; This project uses an entirely different philosophy and is not just a clone of nvm. Details are listed in the &lt;a href="https://github.com/coreybutler/nvm-windows#why-another-version-manager"&gt;Why another version manager?&lt;/a&gt; and &lt;a href="https://github.com/coreybutler/nvm-windows#whats-the-big-difference"&gt;what's the big difference?&lt;/a&gt; sections.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#node-version-manager-nvm-for-windows"&gt;
  &lt;/a&gt;
  Node Version Manager (nvm) for Windows
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.codetriage.com/coreybutler/nvm-windows"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ht6p22Al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codetriage.com/coreybutler/nvm-windows/badges/users.svg" alt="Open Source Helpers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manage multiple installations of node.js on a Windows computer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; Similar (not identical) to &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt;, but for Windows. Has an installer. &lt;a href="https://github.com/coreybutler/nvm-windows/releases"&gt;Download Now&lt;/a&gt;! This has always been a node version manager, not an io.js manager, so there is no back-support for io.js. However, node 4+ is supported. Remember when running &lt;code&gt;nvm install&lt;/code&gt; or &lt;code&gt;nvm use&lt;/code&gt;, you must have Windows administrative rights (to create symlinks).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ecd8ZVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/BNlcbi4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ecd8ZVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/BNlcbi4.png" alt="NVM for Windows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are situations where the ability to switch between different versions of Node.js can be very&lt;br&gt;
useful. For example, if you want to test a module you're developing with the latest&lt;br&gt;
bleeding edge version without uninstalling the stable version of node, this utility can help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzDCarT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/zHEz8Oq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzDCarT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/zHEz8Oq.png" alt="Switch between stable and unstable versions."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation-amp-upgrades"&gt;
  &lt;/a&gt;
  Installation &amp;amp; Upgrades
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#prerequisite-uninstall-existing-node-amp-npm"&gt;
  &lt;/a&gt;
  &lt;em&gt;PREREQUISITE:&lt;/em&gt; Uninstall existing node &amp;amp; npm
&lt;/h4&gt;

&lt;p&gt;Uninstall any existing versions of Node.js before installing NVM for Windows (otherwise you'll have conflicting versions). Delete any existing Node.js installation directories (e.g., &lt;code&gt;%ProgramFiles%\nodejs&lt;/code&gt;) that might remain. NVM's generated symlink will not overwrite an existing (even empty) installation directory.&lt;/p&gt;

&lt;p&gt;Backup any global &lt;code&gt;npmrc&lt;/code&gt; config (e.g. &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\npm\etc\npmrc&lt;/code&gt;), or copy the settings to the user config &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\.npmrc&lt;/code&gt;. Delete the existing npm install location (e.g. "C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\npm") to prevent global module conflicts. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#install-nvmwindows"&gt;
  &lt;/a&gt;
  Install nvm-windows
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/coreybutler/nvm/releases"&gt;Download the latest installer&lt;/a&gt; (comes with an uninstaller). There is also a manual option (see &lt;a href="https://github.com/coreybutler/nvm-windows/wiki#manual-installation"&gt;manual installation&lt;/a&gt; in the wiki).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If NVM4W doesn't appear to work immediately after installation, restart the terminal/powershell.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fuCBEoNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/x8EzjSC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fuCBEoNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/x8EzjSC.png" alt="NVM for Windows Installer"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reinstall-any-global-utilities"&gt;
  &lt;/a&gt;
  Reinstall any global utilities
&lt;/h4&gt;

&lt;p&gt;After install, reinstalling global utilities (e.g. yarn) will have to be done for each installed version of node:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nvm use 14.0.0
npm install -g yarn
nvm use 12.0.1
npm install -g yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#upgrading-nvmwindows"&gt;
  &lt;/a&gt;
  Upgrading nvm-windows
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;To upgrade nvm-windows&lt;/strong&gt;, run the new installer. It will safely overwrite the files it needs to update without touching your node.js installations. Make sure you use the same installation and symlink folder. If you originally installed to the default locations, you just need to click "next" on each window until it finishes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;nvm-windows runs in an Admin shell&lt;/strong&gt;. You'll need to start &lt;code&gt;powershell&lt;/code&gt; or Command Prompt as Administrator to use nvm-windows&lt;/p&gt;

&lt;p&gt;NVM for Windows is a command line tool. Simply type &lt;code&gt;nvm&lt;/code&gt; in the console for help. The basic commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;nvm arch [32|64]&lt;/code&gt;: Show if node is running in 32 or 64 bit mode. Specify 32 or 64 to override the default architecture.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm install &amp;lt;version&amp;gt; [arch]&lt;/code&gt;: The version can be a node.js version or "latest" for the latest stable version. Optionally specify whether to install the 32 or 64 bit version (defaults to system arch). Set &lt;code&gt;[arch]&lt;/code&gt; to "all" to install 32 AND 64 bit versions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm list [available]&lt;/code&gt;: List the node.js installations. Type &lt;code&gt;available&lt;/code&gt; at the end to show a list of versions available for download.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm on&lt;/code&gt;: Enable node.js version management.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm off&lt;/code&gt;: Disable node.js version management (does not uninstall anything).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm proxy [url]&lt;/code&gt;: Set a proxy to use for downloads. Leave &lt;code&gt;[url]&lt;/code&gt; blank to see the current proxy. Set &lt;code&gt;[url]&lt;/code&gt; to "none" to remove the proxy.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm uninstall &amp;lt;version&amp;gt;&lt;/code&gt;: Uninstall a specific version.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm use &amp;lt;version&amp;gt; [arch]&lt;/code&gt;: Switch to use the specified version. Optionally specify 32/64bit architecture. &lt;code&gt;nvm use &amp;lt;arch&amp;gt;&lt;/code&gt; will continue using the selected version, but switch to 32/64 bit mode based on the value supplied to &lt;code&gt;&amp;lt;arch&amp;gt;&lt;/code&gt;. For information about using &lt;code&gt;use&lt;/code&gt; in a specific directory (or using &lt;code&gt;.nvmrc&lt;/code&gt;), please refer to &lt;a href="https://github.com/coreybutler/nvm-windows/issues/16"&gt;issue #16&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm root &amp;lt;path&amp;gt;&lt;/code&gt;: Set the directory where nvm should store different versions of node.js. If &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; is not set, the current root will be displayed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm version&lt;/code&gt;: Displays the current running version of NVM for Windows.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm node_mirror &amp;lt;node_mirror_url&amp;gt;&lt;/code&gt;: Set the node mirror.People in China can use &lt;em&gt;&lt;a href="https://npm.taobao.org/mirrors/node/"&gt;https://npm.taobao.org/mirrors/node/&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nvm npm_mirror &amp;lt;npm_mirror_url&amp;gt;&lt;/code&gt;: Set the npm mirror.People in China can use &lt;em&gt;&lt;a href="https://npm.taobao.org/mirrors/npm/"&gt;https://npm.taobao.org/mirrors/npm/&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#gotcha"&gt;
  &lt;/a&gt;
  Gotcha!
&lt;/h3&gt;

&lt;p&gt;Please note that any global npm modules you may have installed are &lt;strong&gt;not&lt;/strong&gt; shared between the various versions of node.js you have installed. Additionally, some npm modules may not be supported in the version of node you're using, so be aware of your environment as you work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#antivirus"&gt;
  &lt;/a&gt;
  Antivirus
&lt;/h3&gt;

&lt;p&gt;Users have reported some problems using antivirus, specifically McAfee. It appears the antivirus software is manipulating access to the VBScript engine. See &lt;a href="https://github.com/coreybutler/nvm-windows/issues/133"&gt;issue #133&lt;/a&gt; for details and resolution.&lt;/p&gt;

&lt;p&gt;As of 1.1.7, the executable and installation files are code-signed by &lt;a href="https://ecorventures.com"&gt;Ecor Ventures LLC&lt;/a&gt;/&lt;a href="https://author.io"&gt;Author.io&lt;/a&gt;. This should help prevent false positives with most antivirus software.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-yarn"&gt;
  &lt;/a&gt;
  Using Yarn
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt; &lt;code&gt;npm i -g yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://github.com/coreybutler/nvm-windows/wiki/Common-Issues#how-do-i-use-yarn-with-nvm-windows"&gt;wiki&lt;/a&gt; for details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-from-source"&gt;
  &lt;/a&gt;
  Build from source
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install go from &lt;a href="http://golang.org"&gt;http://golang.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download source / Git Clone the repo&lt;/li&gt;
&lt;li&gt;Change GOARCH to amd64 in build.bat if you feel like building a 64-bit executable&lt;/li&gt;
&lt;li&gt;Fire up a Windows command prompt and change directory to project dir&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;go get github.com/blang/semver&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;go get github.com/olekukonko/tablewriter&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;build.bat&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;dist&lt;/code&gt;directory for generated setup program. &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-another-version-manager"&gt;
  &lt;/a&gt;
  Why another version manager?
&lt;/h2&gt;

&lt;p&gt;There are several version managers for node.js. Tools like &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt; and &lt;a href="https://github.com/tj/n"&gt;n&lt;/a&gt;&lt;br&gt;
only run on Mac OSX and Linux. Windows users are left in the cold? No. &lt;a href="https://github.com/hakobera/nvmw"&gt;nvmw&lt;/a&gt; and &lt;a href="https://github.com/marcelklehr/nodist"&gt;nodist&lt;/a&gt;&lt;br&gt;
are both designed for Windows. So, why another version manager for Windows?&lt;/p&gt;

&lt;p&gt;The architecture of most node version managers for Windows rely on &lt;code&gt;.bat&lt;/code&gt; files, which do some clever tricks to set or mimic environment variables.&lt;br&gt;
Some of them use node itself (once it's downloaded), which is admirable, but prone to problems. Right around node 0.10.30, the installation&lt;br&gt;
structure changed a little, causing some of these to just stop working with anything new.&lt;/p&gt;

&lt;p&gt;Additionally, some users struggle to install these modules since it requires a little more knowledge of node's installation structure. I believe if it&lt;br&gt;
were easier for people to switch between versions, people might take the time to test their code on back and future versions... which is&lt;br&gt;
just good practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-big-difference"&gt;
  &lt;/a&gt;
  What's the big difference?
&lt;/h2&gt;

&lt;p&gt;First and foremost, this version of nvm has no dependency on node. It's written in &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt;, which is a much more structured&lt;br&gt;
approach than hacking around a limited &lt;code&gt;.bat&lt;/code&gt; file. It does not rely on having an existing node installation. Go&lt;br&gt;
offers the ability to create a Mac/Linux version on the same code base. In fact, this is already underway.&lt;/p&gt;

&lt;p&gt;The control mechanism is also quite different. There are two general ways to support multiple node installations with hot switching capabilities.&lt;br&gt;
The first is to modify the system &lt;code&gt;PATH&lt;/code&gt; any time you switch versions, or bypass it by using a &lt;code&gt;.bat&lt;/code&gt; file to mimic the node executable and redirect&lt;br&gt;
accordingly. This always seemed a little hackish to me, and there are some quirks as a result of this implementation.&lt;/p&gt;

&lt;p&gt;The second option is to use a symlink. This concept requires putting the symlink in the system &lt;code&gt;PATH&lt;/code&gt;, then updating its target to&lt;br&gt;
the node installation directory you want to use. This is a straightforward approach, and seems to be what people recommend.... until they&lt;br&gt;
realize just how much of a pain symlinks are on Windows. This is why it hasn't happened before.&lt;/p&gt;

&lt;p&gt;In order to create/modify a symlink, you must be running as an admin, and you must get around Windows UAC (that annoying prompt). Luckily, this is&lt;br&gt;
a challenge I already solved with some helper scripts in &lt;a href="https://github.com/coreybutler/node-windows"&gt;node-windows&lt;/a&gt;. As a result, NVM for Windows&lt;br&gt;
maintains a single symlink that is put in the system &lt;code&gt;PATH&lt;/code&gt; during installation only. Switching to different versions of node is a matter of&lt;br&gt;
switching the symlink target. As a result, this utility does &lt;strong&gt;not&lt;/strong&gt; require you to run &lt;code&gt;nvm use x.x.x&lt;/code&gt; every time you open a console window.&lt;br&gt;
When you &lt;em&gt;do&lt;/em&gt; run &lt;code&gt;nvm use x.x.x&lt;/code&gt;, the active version of node is automatically updated across all open console windows. It also persists&lt;br&gt;
between system reboots, so you only need to use nvm when you want to make a change.&lt;/p&gt;

&lt;p&gt;NVM for Windows comes with an installer, courtesy of a byproduct of my work on &lt;a href="http://fenixwebserver.com"&gt;Fenix Web Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Overall, this project brings together some ideas, a few battle-hardened pieces of other modules, and support for newer versions of node.&lt;/p&gt;

&lt;p&gt;NVM for Windows recognizes the "latest" versions using a &lt;a href="https://nodejs.org/download/release/index.json"&gt;list&lt;/a&gt; provided by the Node project. Version 1.1.1+ use this list. Before this list existed, I was scraping releases and serving it as a standalone &lt;a href="https://github.com/coreybutler/nodedistro"&gt;data feed&lt;/a&gt;. This list was used in versions 1.1.0 and prior, but is now deprecated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I needed it, plain and simple. Additionally, it's apparent that &lt;a href="https://github.com/nodejs/node-v0.x-archive/issues/8075"&gt;support for multiple versions&lt;/a&gt; is not&lt;br&gt;
coming to node core, or even something they care about. It was also an excuse to play with Go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-go-why-not-node"&gt;
  &lt;/a&gt;
  Why Go? Why not Node?
&lt;/h2&gt;

&lt;p&gt;I chose Go because it is cross-platform, felt like less overhead than Java, has been around longer than most people think, and I wanted to experiment with it. I've been asked why I didn't write it with Node. Trying to write a tool with the tool you're trying to install doesn't make sense to me. As a result, my project requirements for this were simple... something that's not Node. Node will continue to evolve and change. If you need a reminder of that, io.js. Or consider all the breaking changes between 4.x.x and 6.x.x. These are inevitable in the world of software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sponsors"&gt;
  &lt;/a&gt;
  Sponsors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://metadoc.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkvsesoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/coreybutler/staticassets/raw/master/sponsors/metadoclogobig.png"&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://butlerlogic.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gkJAQQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/coreybutler/staticassets/raw/master/sponsors/butlerlogic_logo.png"&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h2&gt;

&lt;p&gt;Thanks to everyone who has submitted issues on and off Github, made suggestions, and generally helped make this a better project. Special thanks to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/vkbansal"&gt;@vkbansal&lt;/a&gt;, who provided significant early feedback throughout the early releases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rainabba"&gt;@rainabba&lt;/a&gt; and &lt;a href="https://github.com/sullivanpt"&gt;@sullivanpt&lt;/a&gt; for getting Node v4 support integrated.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/s-h-a-d-o-w"&gt;@s-h-a-d-o-w&lt;/a&gt; who resolved the longstanding space escaping issue in path names (&lt;a href="https://github.com/coreybutler/nvm-windows/pull/355"&gt;#355&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>Security Checklist - More than 70 security items to validate your database </title>
      <author>Alexandre Freire</author>
      <pubDate>Sat, 07 Aug 2021 12:29:40 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/security-checklist-more-than-70-security-items-to-validate-your-database-21kn</link>
      <guid>https://dev.to/alexandrefreire/security-checklist-more-than-70-security-items-to-validate-your-database-21kn</guid>
      <description>&lt;p&gt;Content and all rights reserved to github.com/dirceuresende/checklist_seguranca&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security-checklist"&gt;
  &lt;/a&gt;
  Security Checklist
&lt;/h1&gt;

&lt;p&gt;Hello Guys!&lt;br&gt;
&lt;a href="https://github.com/dirceuresende/checklist_seguranca"&gt;In this repository&lt;/a&gt;, I would like to share with you a project that I have been developing since November 2018 and today has more than 6,000 lines of code, which is a very complete Security Checklist (probably the most complete and comprehensive you'll find on the Internet), with more than 70 security items to validate your database, going through the part of settings and parameters, permissions, programming objects and much more!!&lt;/p&gt;

&lt;p&gt;The results of the checks are organized as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Code&lt;/strong&gt;: A unique number to easily identity the validation item&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Category&lt;/strong&gt;: A way to group the checks according to a logical category I envisioned for these validations&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Title&lt;/strong&gt;: Verification title, which is a summary of what this item is validating in the database&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Result&lt;/strong&gt;: Is the result of validation. It informs if the item passed the validation (OK), if it is only an informative item or if it has identified a POSSIBLE problem&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How this can be an Issue&lt;/strong&gt;: A brief explanation of why this item is being scanned and what security risk it can bring us&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Technical explanation&lt;/strong&gt;: More technical and specific details of what is being checked on the instance&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How to Fix&lt;/strong&gt;: Some guidelines on how to correct or circumvent the possible problem identified by the Stored Procedure&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Result Details&lt;/strong&gt;: XML that returns the records that caused the validation failure and the artifacts identified (some items are limited to TOP (N) records because they can have many records returned in XML)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;External Reference&lt;/strong&gt;: Link to a article or documentation that might assist in understanding this verification item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a project that I ran in several clients here at  Fabr√≠cio Lima ‚Äì Solu√ß√µes em BD , one of the best BI and SQL Server consulting companies in Brazil, and this is the result of a lot of study, tests and technical discussions with several great professionals of the data platform area and after talking with Fabr√≠cio, we decided to release it in a FREE way for the entire technical community.&lt;/p&gt;

&lt;p&gt;After using sp_Blitz from Brent Ozar, which I think that is incredible, practical and simple to find a lot of items to check performance, maintenance, auditing, and some security features. Thinking of something as practical as this, I was inspired by this idea to develop stpSecurity_Checklist, trying to deliver something as practical as a ‚ÄúF5‚Äù to you.&lt;/p&gt;

&lt;p&gt;Stored Procedure official article: &lt;br&gt;
&lt;a href="https://www.dirceuresende.com/blog/stpsecurity_checklist-best-practices-and-security-checklist-for-sql-server/"&gt;https://www.dirceuresende.com/blog/stpsecurity_checklist-best-practices-and-security-checklist-for-sql-server/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#checklist-de-seguran%C3%A7a-portuguese-version"&gt;
  &lt;/a&gt;
  Checklist de Seguran√ßa (Portuguese version)
&lt;/h1&gt;

&lt;p&gt;Voc√™ √© Brasileiro ou fala Portugu√™s?&lt;br&gt;
Saiba que essa Stored Procedure tem suporte atualmente para 2 idiomas (English e Portugu√™s). Para orienta√ß√µes de utiliza√ß√£o, veja o README_ptbr.md ou acesse o artigo em portugu√™s dessa Stored Procedure:&lt;br&gt;
&lt;a href="https://www.dirceuresende.com/blog/sql-server-checklist-de-seguranca-uma-sp-com-mais-de-70-itens-de-seguranca-para-validar-seu-banco-de-dados/"&gt;https://www.dirceuresende.com/blog/sql-server-checklist-de-seguranca-uma-sp-com-mais-de-70-itens-de-seguranca-para-validar-seu-banco-de-dados/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
    </item>
  </channel>
</rss>
