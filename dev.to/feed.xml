<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Instalando Tailwind CSS em um projeto Meteor</title>
      <author>Frederico Maia</author>
      <pubDate>Wed, 10 Nov 2021 00:05:06 +0000</pubDate>
      <link>https://dev.to/fredmaiaarantes/instalando-tailwind-css-em-um-projeto-meteor-gl4</link>
      <guid>https://dev.to/fredmaiaarantes/instalando-tailwind-css-em-um-projeto-meteor-gl4</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/fredmaiaarantes/installing-tailwind-in-a-meteor-project-2b6h"&gt;English version of this post.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-seu-projeto"&gt;
  &lt;/a&gt;
  Criando seu projeto
&lt;/h2&gt;

&lt;p&gt;Inicie criando um novo projeto &lt;a href="https://meteor.com"&gt;Meteor&lt;/a&gt; se você ainda não um configurado, entre no diretório do projeto e o execute para garantir que está tudo certo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor create my-project
cd my-project
meteor run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por padrão, Meteor usa React e cria um subdiretório chamado &lt;code&gt;my-project&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-tailwind-via-npm"&gt;
  &lt;/a&gt;
  Instalando Tailwind via npm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor npm install tailwindcss@latest postcss@latest postcss-load-config@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;É recomendado utilizar o comando &lt;code&gt;meteor npm&lt;/code&gt; ao invés de somente &lt;code&gt;npm&lt;/code&gt; para usar a versão do npm que já vem com o próprio Meteor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-um-pacote-meteor-para-postcss"&gt;
  &lt;/a&gt;
  Instalando um pacote Meteor para postcss
&lt;/h2&gt;

&lt;p&gt;Instale &lt;a href="https://github.com/Meteor-Community-Packages/meteor-postcss"&gt;juliancwirko:postcss&lt;/a&gt; e remova o minificador padrão do Meteor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor remove standard-minifier-css
meteor add juliancwirko:postcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-o-postcss"&gt;
  &lt;/a&gt;
  Configure o postcss
&lt;/h2&gt;

&lt;p&gt;Crie um arquivo chamado &lt;code&gt;.postcssrc.js&lt;/code&gt;, adicione o tailwindcss e o autoprefixer à sua configuração do PostCSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .postcssrc.js
module.exports = ctx =&amp;gt; {
  // This flag is set when loading configuration by this package
  if (ctx.meteor) {
    const config = {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      },
    };

    if (ctx.env === 'production') {
      // "autoprefixer" is reported to be slow,
      // so we use it only in production.
      config.plugins.autoprefixer = {
        overrideBrowserslist: ['defaults'],
      };
    }

    return config;
  } else {
    return {};
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inclua-o-tailwind-em-seu-css"&gt;
  &lt;/a&gt;
  Inclua o Tailwind em seu CSS
&lt;/h2&gt;

&lt;p&gt;Adicione o Tailwind ao seu arquivo &lt;code&gt;main.css&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// main.css
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-o-tailwind"&gt;
  &lt;/a&gt;
  Configure o Tailwind
&lt;/h2&gt;

&lt;p&gt;Crie um arquivo chamado &lt;code&gt;tailwind.config.js&lt;/code&gt; com o conteúdo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#construindo-seu-css"&gt;
  &lt;/a&gt;
  Construindo seu CSS
&lt;/h2&gt;

&lt;p&gt;Quanto estiver construindo seu app para produção, garanta que configurou a opção de purge para remover quaisquer classes de CSS não utilizadas para ter o menor tamanho de arquivo possível:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: ['./imports/ui/**/*.{js,jsx,ts,tsx}', './public/*.html'],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Referências:&lt;br&gt;
&lt;a href="https://tailwindcss.com/docs/installation"&gt;https://tailwindcss.com/docs/installation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/meteor/examples/tree/main/tailwindcss"&gt;https://github.com/meteor/examples/tree/main/tailwindcss&lt;/a&gt;&lt;/p&gt;

</description>
      <category>meteor</category>
      <category>javascript</category>
      <category>meteorjs</category>
      <category>node</category>
    </item>
    <item>
      <title>How to write technical design docs</title>
      <author>Mage</author>
      <pubDate>Tue, 09 Nov 2021 23:38:08 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-to-write-technical-design-docs-c02</link>
      <guid>https://dev.to/mage_ai/how-to-write-technical-design-docs-c02</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Technical design documents (aka tech design docs or tech specs) are a great way of creating detailed game plans for features or solutions to technical problems without implementing any code. They can ultimately end up saving your team a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The importance of tech design docs&lt;/li&gt;
&lt;li&gt;When to create tech design docs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mage’s tech design doc template&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Purpose&lt;/li&gt;
&lt;li&gt;Background/Context&lt;/li&gt;
&lt;li&gt;Requirements&lt;/li&gt;
&lt;li&gt;Detailed design&lt;/li&gt;
&lt;li&gt;Implementation plan&lt;/li&gt;
&lt;li&gt;Tests&lt;/li&gt;
&lt;li&gt;Runbook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-importance-of-tech-design-docs"&gt;
  &lt;/a&gt;
  The importance of tech design docs
&lt;/h2&gt;

&lt;p&gt;Tech design docs are the instructions for solving a technical problem or building out a feature. If you have one prepared, it can be handed off to another team member who may be less experienced or unfamiliar with the problem at hand, and they should still be able to solve the problem. Design docs can act as a form of documentation for other team members to refer to.&lt;/p&gt;

&lt;p&gt;In addition, the process of creating a tech design doc forces you to think through the edge cases and various problems you may encounter, and come up with solutions to those problems. This process makes you code up solutions in your head, so when it comes time to actually write the code, the execution is much quicker because the mental heavy lifting has already been done.&lt;/p&gt;

&lt;p&gt;Design docs should be done on a shared workspace (e.g. Google Docs or Notion) so that others can leave comments and provide feedback. As a result, design docs aren’t only great for delegating work and saving time, but also collaborating towards a technical solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-create-tech-design-docs"&gt;
  &lt;/a&gt;
  When to create tech design docs
&lt;/h2&gt;

&lt;p&gt;It’s generally a good idea to create a tech design doc anytime you’re trying to solve a technical problem that takes longer than a day to solve. Even if the solution only takes a few hours to implement, a design doc can still be useful.&lt;/p&gt;

&lt;p&gt;However, the design doc for a large project versus a small feature will obviously vary quite a bit in length. A design doc for a small feature can essentially be pseudocode, which is fine if that achieves the purpose of the document. The main thing is that the design doc has a purpose, problem to solve, and a solution. There are common parts to a design doc that can be used as a template, which we’ll go into detail below, but not all of them have to be included in every single design doc.&lt;/p&gt;

&lt;p&gt;Design docs usually aren’t needed for very small features or technical problems with very obvious solutions that require little time to implement. This is a bit subjective, but if a design doc won’t actually save you much time and the benefits of writing it aren’t clear, you probably don’t need to write one.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T70BhN0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/texuagkoyis2u5zqoesy.gif" alt="Image description" width="485" height="388"&gt;&lt;em&gt;Typing up documentation (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#mages-tech-design-doc-template"&gt;
  &lt;/a&gt;
  Mage’s tech design doc template
&lt;/h2&gt;

&lt;p&gt;The sections below each pertain to a section of the design doc template that Mage team members start with when creating a new design doc.&lt;/p&gt;

&lt;p&gt;At the top of the document, you should include the author’s name and the date the document was created or last modified. At Mage, a design doc is often written for one or multiple epics in Airtable, so including a link to the Airtable epic is helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h3&gt;

&lt;p&gt;The purpose describes what the service or feature does. Try to keep this to one sentence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;Why do you need this feature? What problem are you trying to solve? What is the context for another team member reading this document?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;p&gt;What are the outcomes this service or feature must exhibit? These could be metrics like response time or characteristics of a component built on the frontend (e.g. responsive to various mobile device sizes). You can include user stories here to describe requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#detailed-design"&gt;
  &lt;/a&gt;
  Detailed design
&lt;/h3&gt;

&lt;p&gt;This is the longest part of the design doc and requires the most research, planning, and preparation. This is your engineering approach to solving the technical problem.&lt;/p&gt;

&lt;p&gt;It can include pseudocode, database schemas, flow diagrams, wireframes, components, input validation, security considerations, API endpoints, sample API requests/responses, and countless other things.&lt;/p&gt;

&lt;p&gt;You can also mention alternative approaches to solving the problem and the tradeoffs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-plan"&gt;
  &lt;/a&gt;
  Implementation plan
&lt;/h3&gt;

&lt;p&gt;There might be some overlap between the detailed design and the implementation plan, but this section includes the actionable items (i.e. epics and tasks) required to complete and ship the service/feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;What tests will you write? How will you ensure this service/feature works? How will you know when this service/feature stops working?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runbook"&gt;
  &lt;/a&gt;
  Runbook
&lt;/h3&gt;

&lt;p&gt;How do you launch this service/feature? How will you monitor it? How does someone else troubleshoot it?&lt;/p&gt;

</description>
      <category>technicaldesigndocs</category>
      <category>techspecs</category>
      <category>techdesigndocs</category>
      <category>mageai</category>
    </item>
    <item>
      <title>Day 4 of #100daysofcode: CSS and Client vs. Server</title>
      <author>Ryan Whelchel</author>
      <pubDate>Tue, 09 Nov 2021 23:18:28 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-4-of-100daysofcode-css-and-client-vs-server-1jj</link>
      <guid>https://dev.to/rydwhelchel/day-4-of-100daysofcode-css-and-client-vs-server-1jj</guid>
      <description>&lt;p&gt;My free time on Tuesdays is usually incredibly low, so this update (along with future Tuesday updates) will be fairly short. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-vs-server"&gt;
  &lt;/a&gt;
  Client vs. Server
&lt;/h2&gt;

&lt;p&gt;To quickly preface the below, the part of the project in question simply displays a "time until" a given date and time.&lt;/p&gt;

&lt;p&gt;I've been thinking about where to handle some computation. I have been back and forth on whether to use client or to use server. The calculation for this project is very simple; just turning a date string into a different format before displaying it to the user. No problem to let the client deal with this, right?&lt;/p&gt;

&lt;p&gt;My question arises though because this computation is done in two instances right now. The first is when the user loads the page, a list of these times appear, and all of them are calculated by the client. The second instance is when the user saves a new event, the client immediately turns around and calculates this time remaining and displays it to the user as well.&lt;/p&gt;

&lt;p&gt;In both instances, the client is receiving data from the server and then modifying it before displaying it. It feels wasteful, perhaps it would be better handled by the server before the data is sent? Is that still the case when saving a new event? Because in that case, you have to send an event to the server and then receive it back from the server before displaying it. Surely then it would be better off handling it on client side instead of getting a new request.&lt;/p&gt;

&lt;p&gt;There is a benefit to requesting from the server on save however, as we can use that to refresh the times of all the other events on screen.&lt;/p&gt;

&lt;p&gt;Is the best answer just to preprocess data before its sent up to the client, but when saving a new event the client then handles calculating that time until?&lt;/p&gt;

&lt;p&gt;In reality, the scope of this problem is small enough such that it probably doesn't matter, but its interesting to think about how problems like this scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Today I practiced with CSS flex-boxes and grids. I also spent quite a bit of time checking out some other CSS resources, such as Tailwind, Material UI and Animista. I'm not sure if I plan on using any of their stuff at the time, but its cool to see what else is available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;Tomorrow I will be finally getting around to polishing the layout of my project. After playing around with flex-box and grid, I'm pretty confident I will be able to get to an approximation of what I want the project's layout to look like. Now I just need to draw out what I want it to look like..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;Today I got a look at a friends site that he created as a part of a project for a different class. As they say, comparison is the thief of joy and I have to say that I'm a little awestruck at the progress he's made. Thumbing through his site, I had trouble even seeing how some of the parts would fit together. I think that's probably where a lot of my struggle comes from. It doesn't seem intuitive how some elements fit together. CSS has a much more driving role on layout than I initially realized. CSS isn't just style, its the &lt;em&gt;layout&lt;/em&gt; its the &lt;em&gt;feel&lt;/em&gt;. I thought most of that would be handled in React, but it seems like more and more things I'm learning about is getting lifted out of React and back onto CSS's shoulders. &lt;/p&gt;

&lt;p&gt;Back to the books.&lt;/p&gt;

&lt;p&gt;Thanks for reading! As usual, if you have any suggestions, I'd love to hear them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;&lt;br&gt;
&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;CSS Tricks - A guide to Flexbox&lt;/a&gt;&lt;br&gt;
&lt;a href="https://frontend30.com/css-selectors-cheatsheet/"&gt;Frontend30 - CSS Selectors Cheatsheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 things I don't want to see on your resume as a hiring manager</title>
      <author>Jennifer Wadella</author>
      <pubDate>Tue, 09 Nov 2021 23:01:33 +0000</pubDate>
      <link>https://dev.to/likeomgitsfeday/5-things-i-dont-want-to-see-on-your-resume-as-a-hiring-manager-7m0</link>
      <guid>https://dev.to/likeomgitsfeday/5-things-i-dont-want-to-see-on-your-resume-as-a-hiring-manager-7m0</guid>
      <description>&lt;p&gt;As a Director of Angular Development at a consulting company, I review a lot of resumes. And because a lot of my clients are desperately hiring and need my expertise, I review a lot MORE resumes. I see a lot of things that I consider "red flags" on resumes of engineers with "6+ years of experience" that make me think they really don't know what they're doing. So here are 5 things that will make me chuck a resume into the reject pile almost immediately. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-experienced-in-using-text-editors-like-espresso-eclipse-text-wrangler-sublime-text-atom-netbeans-xampp-notepad-and-notepad"&gt;
  &lt;/a&gt;
  1. "Experienced in using Text editors like Espresso, eclipse, Text Wrangler, Sublime Text, Atom, NetBeans, XAMPP, Notepad and Notepad++."
&lt;/h2&gt;

&lt;p&gt;Hun, you're a software dev. I really hope you know how to use an editor. I also hope you're very opinionated on the editor you prefer; it tells me a lot about your experience and ability to produce code if you're picky about your tooling. Unless you prefer Dreamweaver, in which case I might only trust you to update my myspace page. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-acronym-abuse"&gt;
  &lt;/a&gt;
  2. Acronym Abuse
&lt;/h2&gt;

&lt;p&gt;There are reasonable, well-used acronyms that are in a developers vocabulary, like CSS, and then there are weird things that NO one says, like "Responsive Web Design (RWD)". If you have a bunch of acronyms that aren't ever used or are made up, I'm going to bin a resume for that. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-implemented-a-service-to-make-api-calls-aka-i-implemented-the-thing-the-way-it-was-supposed-to-be-implemented"&gt;
  &lt;/a&gt;
  3. "Implemented a Service to Make API calls" aka "I implemented the thing the way it was supposed to be implemented"
&lt;/h2&gt;

&lt;p&gt;In Angularland, we love our Service classes. And I'm going to guess with no actual statistical data that making API calls is the most predominant use-case for people writing Services. Don't tell me in a bullet point "I used x thing the way it was intended to be used", because that's the bare minimum. Also, if you're going to insist on a bullet point like that, make sure it's technically accurate. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;"Implemented HTTP requests using RxJS Observable library to handle multiple values over time."&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Phrases like this make me 🧐 &lt;/p&gt;

&lt;p&gt;Tell me instead how you refactored a Service to handle a new feature request or improved performance. &lt;/p&gt;

&lt;p&gt;And a shoutout to one of my favorite resume rejection "I did the thing" bullet points ...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"Used Es6 arrow functions to map the Json data"&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-buzzword-lumping-created-typescript-reusable-components-and-services-to-consume-rest-apis-using-componentbased-architecture-provided-by-angular-2"&gt;
  &lt;/a&gt;
  4. Buzzword lumping - "Created Typescript reusable components and services to consume REST API's using Component-based architecture provided by Angular 2."
&lt;/h2&gt;

&lt;p&gt;There are so many things wrong with this bullet point I don't even want to finish reading this resume, let alone interview this candidate. TypeScript doesn't have components, components are typically a construct of frameworks like Angular or React. If you're going to apply for a role regarding a Framework know whats a feature of the framework, and what's a feature of a language, and make sure &lt;em&gt;I know&lt;/em&gt; you know from your resume. Also, I reaaaaally hope you're always thinking about whether a component should be reusable or not, it's a pretty core part of what front-end engineers do now, so this isn't the flash of brilliance you may think it is. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-bad-grammar"&gt;
  &lt;/a&gt;
  5. Bad Grammar
&lt;/h2&gt;

&lt;p&gt;I'm already assuming half the resumes that hit my inbox are copy-paste grabs written by catfishers, so don't end up in the reject pile by making grammar mistakes. If you're going to make a bulleted list of what you did on a project, make sure the tenses match. &lt;/p&gt;

&lt;p&gt;Bad: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worked with NPM commands and using Package.json for managing dependencies and dev-dependencies of Node.js applications.&lt;/li&gt;
&lt;li&gt;Extensively involved in upgrading the existing system from Angular 7 to Angular 8.&lt;/li&gt;
&lt;li&gt;Responsible to work with 3-tiers UI, Business Layer and Data Access Layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worked with NPM commands and using Package.json for managing dependencies and dev-dependencies of Node.js applications.&lt;/li&gt;
&lt;li&gt;Was extensively involved in upgrading the existing system from Angular 7 to Angular 8.&lt;/li&gt;
&lt;li&gt;Was responsible for working with 3-tiers UI, Business Layer and Data Access Layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;I'd like to make a note that as a manager, I'm currently heavily leaning towards preferring to hire excited junior devs looking for their first shot, vs. a "mid-level" engineer that has likely bounced from company to company without ever having written actually quality code, or invested in growing their own skillsets. Tell me about your projects, how they provided value to an end user, and how you used tech to help deliver that value. Or if you're playing buzzword bingo to get past a first line of recruiters, slip me an easter egg in there to let me know like &lt;code&gt;"proficient in vanillaJS"&lt;/code&gt; or &lt;code&gt;"implemented comcastifyjs"&lt;/code&gt;. ;)&lt;/p&gt;

</description>
      <category>hiring</category>
      <category>angular</category>
      <category>jobs</category>
    </item>
    <item>
      <title>Reduce Vs For-Loop</title>
      <author>Byte Sized</author>
      <pubDate>Tue, 09 Nov 2021 22:19:28 +0000</pubDate>
      <link>https://dev.to/nspired/reduce-vs-for-loop-4eab</link>
      <guid>https://dev.to/nspired/reduce-vs-for-loop-4eab</guid>
      <description>&lt;p&gt;Are you interested in more tech content? Check us out on Twitter &lt;a href="https://twitter.com/@nspiredTech"&gt;@nspiredTech&lt;/a&gt;!&lt;/p&gt;




&lt;p&gt;I was working through some JavaScript Functional Programming examples when I came across the &lt;code&gt;reduce&lt;/code&gt; method. By definition &lt;code&gt;reduce&lt;/code&gt; is used to iterate through an array and condense it into one value.&lt;/p&gt;

&lt;p&gt;This caused me to wonder what was the programmatic difference between &lt;code&gt;reduce&lt;/code&gt; and a traditional &lt;code&gt;for&lt;/code&gt;-loop?&lt;/p&gt;

&lt;p&gt;Here is an example of the reduce method in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;singleVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previousVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentVal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pattern above stores the return value from the reduce method. The reduce method receives a callback function with the parameters &lt;code&gt;previousVal&lt;/code&gt; and &lt;code&gt;currentVal&lt;/code&gt;. As the array is being iterated each elements is being added together.&lt;/p&gt;

&lt;p&gt;Here is the same input but with a &lt;code&gt;for&lt;/code&gt;-loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;singleVal&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same result is achieved with a &lt;code&gt;for&lt;/code&gt;-loop. For each pass, the element or &lt;code&gt;array[i]&lt;/code&gt; in this case, is added and stored in &lt;code&gt;singleVal&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;So I decided to test the two algorithms and see which performed better. Here are the results from &lt;a href="https://jsbench.me/"&gt;https://jsbench.me/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3xCxcrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unjxajcepvamj93l982o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3xCxcrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unjxajcepvamj93l982o.png" alt="Benchmark" width="819" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the &lt;code&gt;for&lt;/code&gt;-loop outperformed the reduce method.&lt;/p&gt;

&lt;p&gt;The results from the tests showed me the performance benefits of using one over the other, however it did not explain the programmatic difference I was looking for. So I decided to keep looking…&lt;/p&gt;

&lt;p&gt;Eventually, I found the answer!&lt;/p&gt;

&lt;p&gt;Reduce in JavaScript is the alias for Fold, a higher order function that analyzes a recursive data structure and through use of a given combining operation, recombines the results of recursively processing its constituent parts, building up a return value. &lt;/p&gt;

&lt;p&gt;In simpler terms, the elements are combined in a way that reflects the combination with the next element, and so on until all elements are exhausted.&lt;/p&gt;

&lt;p&gt;Folds and maps are used to transform each value of a data structure independently, and filters are used to eliminate some elements from the data structure. Using &lt;code&gt;for&lt;/code&gt;-loops as a jack of all trades tends to obscure the actual operation the loop performs. So from a programming standpoint, reduce is more eloquent and clear in its purpose.&lt;/p&gt;

&lt;p&gt;In summary, we are able to determine the distinctions between the two approaches are contingent upon input and the design pattern of the programmer.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>reduce</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 09 Nov 2021 21:39:45 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-658</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-658</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-is-no-cookie-cutter-approach"&gt;
  &lt;/a&gt;
  There is no cookie cutter approach
&lt;/h2&gt;

&lt;p&gt;... and no shortcut to improve your programming skills says &lt;a class="mentioned-user" href="https://dev.to/jenniferfu0811"&gt;@jenniferfu0811&lt;/a&gt;
. Great tips in this post!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jenniferfu0811" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ji8PU15e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MQ3yxOef--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/636780/84745b29-d03d-45b0-947d-9ecb5ca99bd4.png" alt="jenniferfu0811"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jenniferfu0811/how-to-improve-your-programming-skills-as-developers-and-non-developers-38f2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Improve Your Programming Skills As Developers and Non-Developers&lt;/h2&gt;
      &lt;h3&gt;jenniferfu0811 ・ Nov 3 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#get-out-of-your-own-way"&gt;
  &lt;/a&gt;
  Get out of your own way
&lt;/h2&gt;

&lt;p&gt;"Although we are all unique, there are some evergreen items we can all work on in order to get to our desired destination in the most efficient manner" says &lt;a class="mentioned-user" href="https://dev.to/tatianacodes"&gt;@tatianacodes&lt;/a&gt;
. These learnings from their conversations with aspiring developers are really fascinating. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tatianacodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g1XXvccE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--POLOMNey--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/179333/15cf5fc6-d0ee-4fae-9646-d645477dc61d.jpeg" alt="tatianacodes"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tatianacodes/i-spoke-to-a-handful-of-aspiring-devs-heres-what-i-found-dhc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Spoke to A Handful of Aspiring Devs- Here's What I Found&lt;/h2&gt;
      &lt;h3&gt;Tatiana ・ Nov 7 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#improving-our-problem-solving-as-developers"&gt;
  &lt;/a&gt;
  Improving our problem solving as developers
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/unitybuddy"&gt;@unitybuddy&lt;/a&gt;
 calls programming a "beautiful art" — and has a handful of great ideas about how you can add to your programming problem solving "palette". &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/unitybuddy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvRSC38G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DO5OoUcD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/591960/6633f01a-43b1-4df8-bfe2-1e05cb4587b8.png" alt="unitybuddy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unitybuddy/7-ways-to-improve-your-logic-in-programming-55io" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Ways To Improve Your Logic In Programming&lt;/h2&gt;
      &lt;h3&gt;Mr. Unity Buddy ・ Nov 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#developer-tools-in-microsoft-edge"&gt;
  &lt;/a&gt;
  Developer Tools in Microsoft Edge
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/codepo8"&gt;@codepo8&lt;/a&gt;
 is a principal product manager for developer tools in Microsoft Edge and shared a talk version of this post back in September. Here's what they encountered while working on the tools, documenting them, and going through user feedback. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/codepo8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jY_r_OB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0V9Y7ijr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/110884/c4807448-b7fe-4d8d-ba13-a3ec4c97b377.jpeg" alt="codepo8"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codepo8/developer-tools-secrets-that-shouldnt-be-secrets-361g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Developer Tools secrets that shouldn't be secrets&lt;/h2&gt;
      &lt;h3&gt;Christian Heilmann ・ Nov 1 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#developertools&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#browsers&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-most-important-c-phases-up-to-version-10"&gt;
  &lt;/a&gt;
  The most important C# phases up to version 10.
&lt;/h2&gt;

&lt;p&gt;... according to &lt;a class="mentioned-user" href="https://dev.to/mteheran"&gt;@mteheran&lt;/a&gt;
 😊 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mteheran" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zC6jtpaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4C28ci8a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/78871/06de70a2-0291-44ec-b8b7-854e375de993.jpg" alt="mteheran"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mteheran/c-evolution-3o9o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;C# evolution&lt;/h2&gt;
      &lt;h3&gt;Miguel Teheran ・ Nov 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#csharp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#evolution&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dotnet&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-unexpected-blessing-of-software-development-and-technical-writing"&gt;
  &lt;/a&gt;
  The unexpected blessing of software development and technical writing
&lt;/h2&gt;

&lt;p&gt;Until the pandemic, &lt;a class="mentioned-user" href="https://dev.to/codergirl1991"&gt;@codergirl1991&lt;/a&gt;
 was a professional classical musician who spent all of my time performing, recording and teaching. Now, they are a software developer and technical writer! Here's how they got here. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/codergirl1991" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAMA7xkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uYg9ebW5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/721730/7bf054bb-2290-4cb8-9beb-328a5771df35.jpg" alt="codergirl1991"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codergirl1991/how-i-overcame-my-fear-of-technical-writing-and-landed-a-job-at-freecodecamp-37d6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I overcame my fear of technical writing and landed a job at freeCodeCamp&lt;/h2&gt;
      &lt;h3&gt;Jessica Wilkins ・ Nov 6 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#will-a-job-always-be-a-job"&gt;
  &lt;/a&gt;
  Will a job always be a job?
&lt;/h2&gt;

&lt;p&gt;That's the question &lt;a class="mentioned-user" href="https://dev.to/heshiebee"&gt;@heshiebee&lt;/a&gt;
 addresses in this post. Spoiler (opinion): it's important to stay close to your core motivation as a developer, which is creation.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/heshiebee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WEskbvUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CVXW5EZq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/113759/6e5f9bc3-af2d-4620-aee0-da1bdacb3d52.jpeg" alt="heshiebee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/heshiebee/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job-4m60" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The key to developer happiness and how to prevent coding from becoming just another job&lt;/h2&gt;
      &lt;h3&gt;Heshie Brody ・ Nov 4 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How Not To Do A Group Project</title>
      <author>Aimen Zairi</author>
      <pubDate>Tue, 09 Nov 2021 21:33:46 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/how-not-to-do-a-group-project-2doe</link>
      <guid>https://dev.to/zairiaimendev/how-not-to-do-a-group-project-2doe</guid>
      <description>&lt;p&gt;If you are studying computer science it is inevitable that you will be doing a school project (Multidisciplinary Project) sooner or later.&lt;br&gt;
This post will be a little different, it may feel like a rant but i hope you go over that part and focus on the important parts.&lt;br&gt;
These are the 9 steps of destroying both your group project and other things on the way :&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#group-of-friends"&gt;
  &lt;/a&gt;
  Group Of Friends
&lt;/h2&gt;

&lt;p&gt;Choosing your friends for a group project is the worst decision you can make. i don't think i have to go in details, not taking things seriously can cost you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-my-favorite-technology"&gt;
  &lt;/a&gt;
  This is my favorite technology
&lt;/h2&gt;

&lt;p&gt;Never tell the group or force them to use your favorite technology unless more than half of the team knows it. As down the line it will only give them a reason to make you responsible for the failure of the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-meet-once-a-week"&gt;
  &lt;/a&gt;
  Let's meet once a week
&lt;/h2&gt;

&lt;p&gt;Meeting "Only" once a week is not the problem here. The problem is people not attending that meet, so if more than 3 people are absent change the date for the meeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-group-leader-will-decide"&gt;
  &lt;/a&gt;
  The Group Leader will decide
&lt;/h2&gt;

&lt;p&gt;If you have a lazy or bad group leader you must decide as group as bad leadership will not let you progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-have-time"&gt;
  &lt;/a&gt;
  We have time
&lt;/h2&gt;

&lt;p&gt;No You Don't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-wait-another-week-for-this-one"&gt;
  &lt;/a&gt;
  Let's Wait another week for this one
&lt;/h2&gt;

&lt;p&gt;Never wait, everything has a deadline even human patience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-dont-leave"&gt;
  &lt;/a&gt;
  Please Don't Leave
&lt;/h2&gt;

&lt;p&gt;Once you feel like you are doing more than 80% of the work, seriously leave the group, if you have done 80% of what's required don't even think twice. it is more impressive to do 80% alone than to do 100% in a group of 6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-didnt-let-us-do-any-work"&gt;
  &lt;/a&gt;
  You Didn't Let us Do any work
&lt;/h2&gt;

&lt;p&gt;Especially if it's a technology of your choice and they didn't even put the effort of learning it, the easy choice is always to blame the one who "Forced" them to learn it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weve-all-done-our-work"&gt;
  &lt;/a&gt;
  We've all done our work
&lt;/h2&gt;

&lt;p&gt;This doesn't ruin projects but friendships. especially if you've done more than 90% of the work, you feel very betrayed.&lt;/p&gt;

&lt;p&gt;For Serious posts check &lt;a href="https://zairiaimen.com"&gt;My Website&lt;/a&gt; or the "Code Sharp Series" here in dev.to &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Clever CSS for responsive design</title>
      <author>·ſ</author>
      <pubDate>Tue, 09 Nov 2021 21:00:41 +0000</pubDate>
      <link>https://dev.to/jmau111/clever-css-for-responsive-design-47ke</link>
      <guid>https://dev.to/jmau111/clever-css-for-responsive-design-47ke</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/jmau111/very-weird-trip-css-1g15"&gt;CSS is weird&lt;/a&gt;. It's neither a programming language nor a design program such as Photoshop. It can be tedious and time-consuming if you're not a front-end ninja, especially the responsive part.&lt;/p&gt;

&lt;p&gt;Many devs won't spend their time doing clumsy CSS to get mediocre results. I don't blame them at all. It's a pragmatic choice.&lt;/p&gt;

&lt;p&gt;I was looking for new techniques to improve my CSS skills, especially media queries. Many blog posts recommend not using them anymore when it's possible.&lt;/p&gt;

&lt;p&gt;For now, I can't do what I want without using a few of them, but I found a technique that reduces the number of media queries drastically. It leverages the benefits of CSS variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--rwd-factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--rwd-factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use it like this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2.5rem&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--scale&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can easily style for various screen sizes by using a common factor while keeping the CSS stylesheet pretty light.&lt;/p&gt;

&lt;p&gt;I learned it from &lt;a href="https://victoria.dev/blog/responsive-pages-and-color-themes-with-minimal-css/"&gt;this blog post&lt;/a&gt;. Of course, it's not the only possible approach, but I found it efficient.&lt;/p&gt;

&lt;p&gt;You won't achieve the highest level of accuracy, but it just works.&lt;/p&gt;

</description>
      <category>css</category>
      <category>responsive</category>
      <category>variables</category>
    </item>
    <item>
      <title>How to change the color of a div by clicking on it - beginner tutorial</title>
      <author>webcodespace</author>
      <pubDate>Tue, 09 Nov 2021 20:59:02 +0000</pubDate>
      <link>https://dev.to/webcodespace/how-to-change-the-color-of-a-div-by-clicking-on-it-beginner-tutorial-2gh</link>
      <guid>https://dev.to/webcodespace/how-to-change-the-color-of-a-div-by-clicking-on-it-beginner-tutorial-2gh</guid>
      <description>&lt;p&gt;This tutorial is going to be a very basic example on how to change the background color of a div element using simple javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;p&gt;The only prerequisite you need, is the basics of html, css and javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered"&gt;
  &lt;/a&gt;
  What will be covered:
&lt;/h2&gt;

&lt;p&gt;a. How to get an element from the DOM(document object model) &lt;br&gt;
b. How to change the values of css properties using javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's begin..
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h2&gt;

&lt;p&gt;Open your favorite code editor/IDE, and generate the following html boilerplate code. You can also change the title to "Div color changer" if you like.&lt;/p&gt;

&lt;p&gt;Html code:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&amp;gt;
&amp;lt;title&amp;gt;Div color changer&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h2&gt;

&lt;p&gt;Create a div with an id of "ball" inside the body tag of your html. &lt;/p&gt;

&lt;p&gt;Your code should now look like this.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&amp;gt;
&amp;lt;title&amp;gt;div color changer&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id ="ball"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h2&gt;

&lt;p&gt;Next, you create an external css file with the name "style.css" inside the same folder as your html file. &lt;/p&gt;

&lt;p&gt;When you've done that, include a link to "style.css" in the head tag of your html file.&lt;/p&gt;

&lt;p&gt;This is how your code should look now. &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&amp;gt;
&amp;lt;link rel="stylesheet" href="style.css" type="text/css" /&amp;gt;
&amp;lt;title&amp;gt;div color changer&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id ="ball"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h2&gt;

&lt;p&gt;Copy and paste the following css styles into your "style.css" file.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*{
  margin: 0px; 
  padding: 0px; 
  box-sizing: border-box;
}
 #ball{
  height: 20rem;
  width: 20rem;
  border-radius: 50%;
  background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#now-for-the-fun-part"&gt;
  &lt;/a&gt;
  Now for the fun part!!
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5:
&lt;/h2&gt;

&lt;p&gt;Create a "script.js" file and add a link to that file using the html script tag. This file should be created in the same folder too.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&amp;gt;
&amp;lt;title&amp;gt;div color changer&amp;lt;/title&amp;gt;
&amp;lt;link rel="stylesheet" href="style.css" type="text/css" /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id="ball"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script src="script.js" type="text/javascript"&amp;gt; 
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  Step 6:
&lt;/h2&gt;

&lt;p&gt;Add the following code into your "script.js" file.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const redDiv =  document.getElementById("ball");

redDiv.addEventListener("click", ()=&amp;gt;{
redDiv.style.backgroundColor = "blue";
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Viola!!&lt;/p&gt;

&lt;p&gt;Now if you open up the html file in your browser and click on the red div, it changes to blue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-explained"&gt;
  &lt;/a&gt;
  Javascript explained:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;So the first line of the code simply looks into our html file to find an element with the id of "ball" then it collects that element and stores it inside the "redDiv" variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second line adds an event listener to the div element that has been made available through the "redDiv" variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first argument of the "addEventListener" function is the event we are listening for; in this case, the "click" event. The second argument is an arrow function that runs whenever there is a click event on our div. What the arrow function does, is to change the background color property of our div to blue.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If there are any questions, you can leave them in the comments below, and I'll do my best to answer them as soon as possible.&lt;/p&gt;

&lt;p&gt;Happy coding!!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Announcing my book "Rust Web Development"</title>
      <author>Bastian Gruber</author>
      <pubDate>Tue, 09 Nov 2021 20:31:20 +0000</pubDate>
      <link>https://dev.to/gruberb/announcing-my-book-rust-web-development-5b4b</link>
      <guid>https://dev.to/gruberb/announcing-my-book-rust-web-development-5b4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-pragmatic-and-indepthenough-book-about-writing-web-servicesapplications-in-rust"&gt;
  &lt;/a&gt;
  A pragmatic and "in-depth-enough" book about writing web services/applications in Rust
&lt;/h2&gt;

&lt;p&gt;Hey folks! Long time since I have posted here! &lt;a href="https://dev.to/gruberb/intro-to-web-programming-in-rust-for-nodejs-developers-lp"&gt;My original articles&lt;/a&gt; on this platform kicked it all off for me: Getting into Rust, trying to explain to myself how to think about Rust when coming from NodeJS etc. &lt;/p&gt;

&lt;p&gt;One thing lead to another and now I am currently writing a book with Manning titled "Rust Web Development". I want to take you on a journey into Rust and how to think about Web Development when working with Rust.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ready-for-prime-time"&gt;
  &lt;/a&gt;
  Ready for prime time?
&lt;/h3&gt;

&lt;p&gt;Many things are new, different and at first glance, not as easy when comparing it to Java or NodeJS. However, once you understood the moving pieces, Rust is a joy to work with, a super solid language and enough great tooling to use it, right now, in production. &lt;/p&gt;

&lt;p&gt;It also has some tooling from the ecosystem which make it, in my view, a no-brainer to use for any future web service you are going to push to production. &lt;/p&gt;

&lt;p&gt;So in this short post, I want to invite you to come along with me on this journey, and figure it out as we go along converting to Rust! The language itself will eventually be used in the Linux Kernel (fingers-crossed), replace legacy systems and will find many friends in the new world which is currently built right before our eyes (Facebook calls it the metaverse...). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#see-for-yourself"&gt;
  &lt;/a&gt;
  See for yourself
&lt;/h3&gt;

&lt;p&gt;There is a &lt;a href="https://rustwebdevelopment.com/"&gt;website&lt;/a&gt; to the book, where I hopefully soon publish more little articles about Rust and the web, and I will list all talks I gave and Podcasts I am on, so you can learn more about this exciting new way of building for the web. &lt;/p&gt;

&lt;p&gt;And, if you made it this far, with &lt;a href="http://mng.bz/yJmy"&gt;this link you will get a discount purchasing the book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is currently in MEAP, but will be ready starting 2022. &lt;/p&gt;

&lt;p&gt;I am looking forward to your feedback!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>book</category>
    </item>
    <item>
      <title>TUTORIAL: Send An Automated SMS Message When Registering A New User</title>
      <author>Backendless</author>
      <pubDate>Tue, 09 Nov 2021 19:53:18 +0000</pubDate>
      <link>https://dev.to/backendless/tutorial-send-an-automated-sms-message-when-registering-a-new-user-p6d</link>
      <guid>https://dev.to/backendless/tutorial-send-an-automated-sms-message-when-registering-a-new-user-p6d</guid>
      <description>&lt;p&gt;Automated SMS messages are a great way to help onboard users to your app. In this article, we show how easy it is to send an SMS message upon a new user registration using &lt;a href="https://backendless.com/integrate-backendless-with-3000-web-apps-using-zapier/"&gt;Backendless' Zapier integration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SMS, or text messaging, is one of the most effective ways to engage your users. It is also a great way to create two-factor authentication (2FA) to prevent bots and malicious actors from spamming your registration process.&lt;/p&gt;

&lt;p&gt;Backendless is incredibly feature rich, but no platform can cover every niche use case. That’s why we have a Zapier integration, allowing you to access thousands of third-party tools and quickly integrate them into your Backendless app.&lt;/p&gt;

&lt;p&gt;Zapier can connect you with a variety of automation tools. These tools make it easy to automate time-consuming and time sensitive processes, like messages sent after every user registration.&lt;/p&gt;

&lt;p&gt;In this demo, we will create an application that will implement the function of sending SMS to a specific phone number every time a new user registers in the app. This foundation will prepare you for applying automated SMS functionality in a variety of useful ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backendless-setup"&gt;
  &lt;/a&gt;
  Backendless Setup
&lt;/h2&gt;

&lt;p&gt;First, let’s set up our &lt;a href="https://backendless.com/"&gt;Backendless&lt;/a&gt; database and a simple registration form in UI Builder.&lt;/p&gt;

&lt;p&gt;To store data about registered users, we will use the Backendless &lt;code&gt;Users&lt;/code&gt; system table. This table is created automatically when you create a new app. In this table, we will use two fields: &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOFqFMqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/01-Users-system-table-in-Backendless.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOFqFMqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/01-Users-system-table-in-Backendless.jpg" alt="Users system table in Backendless" width="611" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For simplicity, our user interface will consist of two input elements and a “Register” button. You may add additional fields, such as first/last name, username, password confirmation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_1j1tTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/02a-Registration-form-in-Backendless-UI-Builder.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_1j1tTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/02a-Registration-form-in-Backendless-UI-Builder.jpg" alt="Registration form in Backendless UI Builder" width="472" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about setting up your own user registration page, watch the video below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ZVNZk91BE4U"&gt;Programming User Registration in UI Builder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back to our demo, when you click on the “Register” button, data is recorded from the form elements in the “Users” table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmS6q3lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/03a-User-registration-Codeless-logic-highlighting-form-elements-scaled.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmS6q3lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/03a-User-registration-Codeless-logic-highlighting-form-elements-scaled.jpg" alt="User registration Codeless logic highlighting form elements" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Registration of a new user will be a signal (trigger) for Zapier to take action. On this signal, Zapier will receive data about the new user and transfer it to the “ClickSend SMS” application for sending SMS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zapier-setup"&gt;
  &lt;/a&gt;
  Zapier Setup
&lt;/h2&gt;

&lt;p&gt;Next, let’s set up the Zapier side of the equation. If you don’t have an account with &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt;, you will first need to register and log into your Zapier account. A free account is all you will need for this demo.&lt;/p&gt;

&lt;p&gt;Creating the automation with Zapier will consist of two steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;The first step is to define a Trigger (when Zapier needs to start performing an action). In our case, registering a new user will act as a trigger.&lt;/p&gt;

&lt;p&gt;Click on the button “Create Zap”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3IAdF3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/04-Create-new-Zap-in-Zapier-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3IAdF3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/04-Create-new-Zap-in-Zapier-1.jpg" alt="Create new Zap in Zapier" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the “App Event” field, select Backendless.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WrwgwyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/05-Select-Backendless-in-the-App-Event-field-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrwgwyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/05-Select-Backendless-in-the-App-Event-field-in-Zapier.jpg" alt="Select Backendless in the App Event field in Zapier" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the “Trigger Event” drop-down list, select “User Registered” and click the “Continue” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtV6RE2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/06-Select-User-Registered-as-trigger-event-in-Backendless.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtV6RE2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/06-Select-User-Registered-as-trigger-event-in-Backendless.jpg" alt="Select User Registered as trigger event in Backendless" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will need to enter your credentials with which you log into Backendless Console and click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfXo_xYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07-Add-Backendless-credentials-in-Zapier-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfXo_xYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07-Add-Backendless-credentials-in-Zapier-1.jpg" alt="Add Backendless credentials in Zapier" width="766" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you used a social account to register with Backendless, you will need to add a password for your account. To add a password, visit your User Profile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecTtw3gP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07a-Add-Password-in-Backendless.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecTtw3gP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07a-Add-Password-in-Backendless.png" alt="Add Password in Backendless" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the trigger settings, select the name of your Backendless app and click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSIYP6yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/08-Select-Backendless-app-for-trigger-setup-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSIYP6yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/08-Select-Backendless-app-for-trigger-setup-in-Zapier.jpg" alt="Select Backendless app for trigger setup in Zapier" width="880" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to test our trigger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFID3f5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/09-Test-trigger-in-Zapier-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFID3f5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/09-Test-trigger-in-Zapier-1.jpg" alt="Test trigger in Zapier" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the test is successful, an object with data about the registered user will be displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zb40j5N_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/10-Zapier-trigger-test-response-from-Backendless-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zb40j5N_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/10-Zapier-trigger-test-response-from-Backendless-1.jpg" alt="Zapier trigger test response from Backendless" width="880" height="752"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;In the second step, we will tell Zapier what action should be performed after the trigger is fired.&lt;/p&gt;

&lt;p&gt;Select the “ClickSend SMS” application from the drop-down list and select “Send SMS” from the “Action Event” list. Click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5j5y1d8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/11-Select-ClickSend-SMS-app-and-Send-SMS-action-event-in-Zapier-768x425.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5j5y1d8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/11-Select-ClickSend-SMS-app-and-Send-SMS-action-event-in-Zapier-768x425.jpg" alt="Select ClickSend SMS app and Send SMS action event in Zapier" width="768" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will need to enter your credentials with which you log into “ClickSend SMS” APP and click the continue button (if necessary, register for an account at &lt;a href="https://www.clicksend.com/"&gt;ClickSend SMS&lt;/a&gt;; you can start with a free trial).&lt;/p&gt;

&lt;p&gt;Configure the action as shown below. For this demo, we will set the action up to message ourselves that a new user has registered.&lt;/p&gt;

&lt;p&gt;The “To” field should contain the phone number to which SMS will be sent. The “Message” field should contain the message text. If necessary, you can fill in the optional fields. Click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-Gmrp2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/12-Configure-SMS-to-phone-number-and-message-fields-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-Gmrp2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/12-Configure-SMS-to-phone-number-and-message-fields-in-Zapier.jpg" alt="Configure SMS to phone number and message fields in Zapier" width="760" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we’ll test once again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wY5_eQZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/13-Test-Send-SMS-to-ClickSend-SMS-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wY5_eQZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/13-Test-Send-SMS-to-ClickSend-SMS-in-Zapier.jpg" alt="Test Send SMS to ClickSend SMS in Zapier" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we pass the test successfully, you will receive an SMS on your phone with the text displayed in the “Body”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dep_44j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/14-Successful-ClickSend-SMS-test-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dep_44j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/14-Successful-ClickSend-SMS-test-in-Zapier.jpg" alt="Successful ClickSend SMS test in Zapier" width="880" height="725"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the “Turn on Zap” button and you’re ready to go! Zapier is now up and running.&lt;/p&gt;

&lt;p&gt;Be sure to check out our other Zapier demo articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://backendless.com/create-language-translator-with-zapier/"&gt;Creating a language translator using Zapier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More coming soon!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, and as always, Happy Codeless Coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Understanding APIs</title>
      <author>Zackius</author>
      <pubDate>Tue, 09 Nov 2021 19:42:11 +0000</pubDate>
      <link>https://dev.to/zackius/understanding-apis-23oi</link>
      <guid>https://dev.to/zackius/understanding-apis-23oi</guid>
      <description>&lt;p&gt;What’s an API?&lt;br&gt;
If you’ve interacted with tech/web magazines or blogs, you might at one time have seen the word API and wondered what it means and what its purpose is on the web. API is an acronym that is used in software development to stand for Application Programming Interface. An API refers to a set of tasks that provide applications with access to data and allows other applications to interact with other software components. &lt;br&gt;
In simpler terms, an API receives and delivers a user command to a system and sends the response form the system to the user. On your music play app on your phone, when you touch the play button on the screen, APIs receive that command and in turn play the music you want as response. &lt;br&gt;
For an API to be functional there are three things that need to be present and functional. &lt;br&gt;
Application: this refers to a program that is created to perform a certain task other than being compatible with the computer/phone. This can be a media player, a shopping application, or an accounting software. &lt;br&gt;
Programming: this refers to the process of creating an application that carries out a specific task.&lt;br&gt;
Interface: this refers to a distributed boundary across which separate components of an application exchange information. The sharing can be between computer software, hardware or peripheral devices.&lt;/p&gt;

&lt;p&gt;API allows developers to make specific calls in order to receive and send data. This transmission is done using a programming language referred to as “JSON”. Javascript Object Notation(JSON) is an independent and lightweight language that is used in sending information between computers. This language can be used to make defined actions like updating, creating, reading and deleting data. &lt;br&gt;
GET: request information(data) from the server.&lt;br&gt;
POST: sends information and changes from clients to the server.&lt;br&gt;
PUT: revise the existing information or add to it.&lt;br&gt;
DELETE: Removes existing information from the server. &lt;br&gt;
Examples of APIs&lt;br&gt;
When you are using an application on your computer or your phone, the application is connected to a server that stores data. In any case, you might be adding, retrieving, updating or deleting data from the application. In a scenario where you are adding, the APIs will receive your data, interpret it to a language that the server can understand then save it. On the other hand, when retrieving data from the server, the server will retrieve the data, APIs interpret it then send it back to the application for viewing in a readable way. &lt;/p&gt;

&lt;p&gt;To explain it better, let us take a sociable example.&lt;br&gt;
Imagine yourself sitting in a restaurant, a menu is presented to you to choose what kind of food and drinks to take. After going through the menu and choosing what you would like, the waiter takes your request and passes it to the kitchen department for preparation. After preparing your meal(request) the waiters will bring you the meal.&lt;br&gt;
In our restaurant scenario, the menu represents an interface that we relate to and understand what our server can give us. The waiters represent APIs that receive and deliver requests to our server and to you. The kitchen department here represents the server. &lt;/p&gt;

&lt;p&gt;Type of APIs&lt;br&gt;
There are four major types of APIs:&lt;br&gt;
Open APIs: this kind of APIs are also known as Public APIs, this is because they contain no restrictions to access. They can be accessed and used by anyone.&lt;br&gt;
Partner APIs: this type of APIs are not open to the public, to access these APIs a developer requires certain rights or licence  in order to work with them.&lt;br&gt;
Internal APIs: Also referred to as Private APIS, this type of APIs are created to be used within a company. Companies use such APIs to improve their services and products. &lt;br&gt;
Composite APIs: This kind of APIs joins different data and service APIs. It uses a sequence of tasks that runs simultaneously as a result of the implementation and not at the appeal of a task. Its major use is in speeding up the process of execution and enhancing the performance of the listeners in the online interface.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
