<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Supabase: ten months of building. </title>
      <author>Supabase</author>
      <pubDate>Sun, 03 Jan 2021 18:22:39 +0000</pubDate>
      <link>https://dev.to/supabase/supabase-ten-months-of-building-5896</link>
      <guid>https://dev.to/supabase/supabase-ten-months-of-building-5896</guid>
      <description>&lt;p&gt;Supabase is an open source Firebase alternative. We're building the features of Firebase using enterprise-grade open source tools.&lt;/p&gt;




&lt;p&gt;After 10 hectic months of building, Supabase is now in Beta. This is also available as a &lt;a href="https://supabase.io/blog/2021/01/02/supabase-beta-december-2020"&gt;blog post&lt;/a&gt; and a &lt;a href="https://youtu.be/ofSm4BJkZ1g"&gt;video demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supabase-is-now-in-beta" class="anchor"&gt;
  &lt;/a&gt;
  Supabase is now in Beta
&lt;/h3&gt;

&lt;p&gt;We spent months working on Performance, Security, and Reliability. Read more on our &lt;a href="https://supabase.io/beta"&gt;Beta Page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEc_O6HF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/103484765-464e5b80-4e2c-11eb-89c6-8e88fe8105e1.png" class="article-body-image-wrapper"&gt;&lt;img width="1000" alt="This image shows our Beta Page" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEc_O6HF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/103484765-464e5b80-4e2c-11eb-89c6-8e88fe8105e1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-your-docs-inline" class="anchor"&gt;
  &lt;/a&gt;
  Improve your docs inline
&lt;/h3&gt;

&lt;p&gt;Add comments and descriptions to your Tables directly from our auto-generated docs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3VDuYLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10214025/103484975-df31a680-4e2d-11eb-8569-f8248a02b880.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3VDuYLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10214025/103484975-df31a680-4e2d-11eb-8569-f8248a02b880.gif" alt="update-docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-view-now-has-realtime-changes" class="anchor"&gt;
  &lt;/a&gt;
  Table View now has realtime changes
&lt;/h3&gt;

&lt;p&gt;Any updates that happen to your database are reflected in the Table View immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQqGemdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10214025/103484944-8eba4900-4e2d-11eb-867b-c56cfcd207ef.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQqGemdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10214025/103484944-8eba4900-4e2d-11eb-867b-c56cfcd207ef.gif" alt="realtime-updates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-pagination" class="anchor"&gt;
  &lt;/a&gt;
  Table Pagination
&lt;/h3&gt;

&lt;p&gt;Our table view now has pagination - better for working with large data sets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kr9PYAfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10214025/103484937-7d713c80-4e2d-11eb-9ddc-a0c2e871b864.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kr9PYAfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10214025/103484937-7d713c80-4e2d-11eb-9ddc-a0c2e871b864.gif" alt="table-pagination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supabase-raised-a-seed-round" class="anchor"&gt;
  &lt;/a&gt;
  Supabase raised a Seed Round
&lt;/h3&gt;

&lt;p&gt;We raised $6M from Y Combinator, Mozilla, and Coatue. You can read more on &lt;a href="https://techcrunch.com/2020/12/15/supabase-raises-6m-for-its-open-source-firebase-alternative"&gt;TechCrunch&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaizen" class="anchor"&gt;
  &lt;/a&gt;
  Kaizen
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Supabase is now 26% faster in regions which support Graviton (1460 reqs/s up from 1167 reqs/s)&lt;/li&gt;
&lt;li&gt;We launched a new region in Sao Paulo.&lt;/li&gt;
&lt;li&gt;Postgres Array Support. You can now edit Native Postgres array items in the grid editor or the side panel.&lt;/li&gt;
&lt;li&gt;We added better support for your custom Database Types.&lt;/li&gt;
&lt;li&gt;Fixed some buggy keyboard commands. We're continuously improving key commands in the Table editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#community" class="anchor"&gt;
  &lt;/a&gt;
  Community
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We were featured on the GitHub release radar. &lt;a href="https://github.blog/2020-12-07-release-radar-dec-2020/"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/kiwicopple"&gt;@kiwicopple&lt;/a&gt; appeared on  &lt;a href="https://2020.opencoresummit.com/"&gt;Open Core Summit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/aaronksaunders"&gt;@aaronksaunders&lt;/a&gt; created a video series on Supabase + Vue. &lt;a href="https://twitter.com/aaronksaunders/status/1339981480202743811"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CodeByCorey"&gt;@CodeByCorey&lt;/a&gt; tracks realtime page views using Supabase. &lt;a href="https://twitter.com/CodeByCorey/status/1344650699645325312"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ffabss"&gt;@ffbass&lt;/a&gt; started working on gotrue-java. &lt;a href="https://github.com/supabase/gotrue-java"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've grown more than 50% (GitHub star count) since moving into Beta. &lt;a href="https://twitter.com/supabase_io/status/1345410714836594693"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aklM3HgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/103484820-9a594000-4e2c-11eb-9a31-2d661e7048f6.png" class="article-body-image-wrapper"&gt;&lt;img width="737" alt="dec-starcount" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aklM3HgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/103484820-9a594000-4e2c-11eb-9a31-2d661e7048f6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to keep up to date, make sure you &lt;a href="https://www.youtube.com/channel/UCNTVzV1InxHV-YR0fSajqPQ"&gt;subscribe to our YouTube channel&lt;/a&gt; or &lt;a href="https://twitter.com/supabase_io"&gt;follow us on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-next" class="anchor"&gt;
  &lt;/a&gt;
  Coming next
&lt;/h3&gt;

&lt;p&gt;We've go a lot of exciting things planned for Q1 2021. We're already planning out Supabase Storage and a Supabase CLI for better local development. Let us know if there's something you want us to release as a priority! &lt;/p&gt;

&lt;p&gt;We also have something exciting planned with Vercel and Stripe ... &lt;a href="https://twitter.com/rauchg/status/1331021818681978881"&gt;stay tuned&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-started" class="anchor"&gt;
  &lt;/a&gt;
  Get started
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Start using Supabase today: &lt;a href="https://app.supabase.io/"&gt;app.supabase.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Make sure to &lt;a href="https://github.com/supabase/supabase"&gt;star us on GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Follow us &lt;a href="https://twitter.com/supabase_io"&gt;on Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Become a &lt;a href="https://github.com/sponsors/supabase"&gt;sponsor&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>postgres</category>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>6 ways to write a React component (TS Included)</title>
      <author>Mateo Garcia</author>
      <pubDate>Sun, 03 Jan 2021 16:44:21 +0000</pubDate>
      <link>https://dev.to/teo_garcia/6-ways-to-write-a-react-component-ts-included-2k42</link>
      <guid>https://dev.to/teo_garcia/6-ways-to-write-a-react-component-ts-included-2k42</guid>
      <description>&lt;p&gt;Hello everyone, my name is Mateo and like many of you, I have set some goals now that a new year has begun. Sharing, documenting, and applying my knowledge are some of them so I have decided to open this space called &lt;code&gt;Coding with Mateo&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Np29XsRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/88camp6rkxome3to2vs2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Np29XsRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/88camp6rkxome3to2vs2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first post I will write is a compilation of different ways you can write a React component. Additionally, I will leave its version in Typescript in case it is useful to clarify how to annotate the functions in its different presentations, let's start.&lt;/p&gt;

&lt;p&gt;React has gradually become the paradigm/technology we think of when it comes to frontend development. Watch some videos, buy some Udemy courses, make your first task list, finally master the main concepts. However, the diversity of syntax provided by Javascript makes that at some point we don't understand why some people write components one way and others another way.&lt;/p&gt;

&lt;p&gt;It is important to remember that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A React component is a function that thanks to the composition can contain internal functions, including new components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Javascript functions are objects with the difference that they can be executed through parentheses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even if you are still maintaining/writing class components, those components are interpreted, transposed, and executed as ES5 functions since those classes are only &lt;a href="https://sophiali.dev/syntactic-sugar-examples-javascript"&gt;syntactic sugar&lt;/a&gt; of recent EcmaScript features.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whether you are working on a project by yourself or in a team, defining a syntax to declare your utility functions and React components can help to simplify the fatigue caused by the rapid growth of the project structure.&lt;/p&gt;

&lt;p&gt;Below, I show you different ways to write a React component using a button as an example.&lt;/p&gt;

&lt;p&gt;1.Using a regular &lt;code&gt;function&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// Button.jsx&lt;/span&gt;
   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Button.tsx&lt;/span&gt;
   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2.Using a &lt;code&gt;function&lt;/code&gt; expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// Button.jsx&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Button.tsx&lt;/span&gt;
   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;3.Using an &lt;code&gt;arrow function&lt;/code&gt; with &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// Button.jsx&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Button.tsx&lt;/span&gt;
   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;4.Using an &lt;code&gt;arrow function&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// Button.jsx&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Button.tsx&lt;/span&gt;
   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;5.Using an &lt;code&gt;explicit return&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// Button.jsx&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;// or&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="c1"&gt;// Button.tsx&lt;/span&gt;
   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;6.Using a &lt;code&gt;class&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Button.jsx&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Button.tsx&lt;/span&gt;
   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, I must say that, all the ways of writing them work well.  There is no one better than another, feel free to use the one you like best.&lt;/p&gt;

&lt;p&gt;However, I would like to clarify that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The class components are being progressively &lt;a href="https://reactjs.org/blog/2019/02/06/react-v16.8.0.html"&gt;deprecated&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Declaring components with a let can be useful when performing &lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;conditional rendering&lt;/a&gt; based on the props of a parent component.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ThisOrThat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/* 
        Maybe some difficult logic.     
        Of course, that code does not smell good, however, it's 
        important to know that's possible to do this.
      */&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;renderedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getComplexComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;renderedComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;renderedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FallbackComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderedComponent&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would love to know your opinion and what topics you would like to see in my blog posts. Also if you can &lt;code&gt;react&lt;/code&gt; to this blog that would make me very happy.&lt;/p&gt;

&lt;p&gt;Thank you very much and happy new year 🎉🥳&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Linux, the right choice?</title>
      <author>Lucas Marçal Coutinho</author>
      <pubDate>Sun, 03 Jan 2021 15:00:02 +0000</pubDate>
      <link>https://dev.to/lucasmc64/linux-the-right-choice-39fj</link>
      <guid>https://dev.to/lucasmc64/linux-the-right-choice-39fj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;🇧🇷 Caso prefira ler em outra língua, esse artigo foi publicado também em português. Clique &lt;a href="https://lucasmc64.medium.com/linux-a-escolha-certa-b51de07a0df5"&gt;AQUI&lt;/a&gt; para acessar!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you opened this article, you are at least curious about the world of the Penguin. Be careful: you are being attracted to the more open-source, private and customizable side of the Force.&lt;/p&gt;

&lt;p&gt;Some people can feel comfortable in Windows and never even consider an alternative to it, many do not even know that there are options to the Microsoft system and others fear that Linux is just a “black screen” (terminal).&lt;/p&gt;

&lt;p&gt;This is the first in a series of articles in which I will try to resolve some of your doubts about the Linux world and show you that this subject is only a 7-headed monster if you want it to be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after-all-what-is-linux" class="anchor"&gt;
  &lt;/a&gt;
  After all, what is Linux?
&lt;/h2&gt;

&lt;p&gt;At first this question may seem trivial and something similar may come to your mind: “Linux is a &lt;strong&gt;operating system&lt;/strong&gt;, like Windows and MacOS, but &lt;strong&gt;free&lt;/strong&gt;”. But that's not quite it...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Operating System (OS) is the name given to the program or set of programs that manages computer resources, as a bridge with a graphical interface between hardware and the user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Linux, in fact, is not an operating system, but it is the kernel (core) present in several OSs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The kernel, in general, is the heart of the operating system: the part that makes the connection between applications and hardware.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another point is that not all Linux-based software is necessarily free because, as it is an &lt;strong&gt;open-source&lt;/strong&gt; project, its license allows third parties to sell a proprietary version of the kernel or distro. Some examples would be &lt;em&gt;Red Hat Enterprise Linux&lt;/em&gt;, &lt;em&gt;Zorin OS Ultimate&lt;/em&gt; and the &lt;em&gt;SUSE Linux Enterprise&lt;/em&gt; product line.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Open-source software is created under a license that allows the public to study, modify and distribute their code as they see fit. Some restrictions may apply depending on the license.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#distros" class="anchor"&gt;
  &lt;/a&gt;
  Distros
&lt;/h2&gt;

&lt;p&gt;"Distro" is just an abbreviation for "distribution", a term used to refer loosely to a Linux-based operating system.&lt;/p&gt;

&lt;p&gt;There are several distros, each aimed at its audience or for a specific purpose. So, despite being based on the same kernel, the distros can be very different from each other, ranging from a modified kernel and proprietary programs to different interfaces.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Interface is the part of the distro that manages the way things are presented visually to the user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#interfaces" class="anchor"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h2&gt;

&lt;p&gt;Unlike Windows and MacOS, which have only their standard interface, there are several graphical interfaces in the Linux world.&lt;/p&gt;

&lt;p&gt;Some interfaces are more friendly, intuitive and even have similarities with Windows to facilitate the user's transition (such as Cinnamon and KDE Plasma).&lt;/p&gt;

&lt;p&gt;Other interfaces, on the other hand, may have a usability quite different from what you are used to (such as Gnome).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general, other interfaces can also be installed via the terminal and, when logging in, you choose which interface you want to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#gnome" class="anchor"&gt;
  &lt;/a&gt;
  Gnome
&lt;/h3&gt;

&lt;p&gt;Gnome is a project that places a special emphasis on usability and even though it seems strange at first glance, it is an intuitive and easy to adapt interface.&lt;/p&gt;

&lt;p&gt;You may have heard of one of the most famous Linux distros, &lt;em&gt;Ubuntu&lt;/em&gt;. With Gnome as its interface, it is a system recommended by many people precisely because it is easy to learn to use, has a solid base and constant updates.&lt;/p&gt;

&lt;p&gt;There are several other distros that use Gnome as an interface - &lt;em&gt;Manjaro&lt;/em&gt;, &lt;em&gt;Debian&lt;/em&gt;, &lt;em&gt;Fedora&lt;/em&gt;, &lt;em&gt;Pop!_OS&lt;/em&gt;, &lt;em&gt;GnomeOS&lt;/em&gt; - each with its own unique features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cinnamon" class="anchor"&gt;
  &lt;/a&gt;
  Cinnamon
&lt;/h3&gt;

&lt;p&gt;Cinnamon is an interface derived from Gnome developed by the &lt;em&gt;Linux Mint&lt;/em&gt; team. For Windows users, this is a much more friendly and familiar interface, which is precisely what he intends to do: be a gateway for those who want to migrate to the Linux world.&lt;/p&gt;

&lt;p&gt;Without a doubt, &lt;em&gt;Linux Mint&lt;/em&gt; is another great recommendation, with an extremely intuitive interface and, as it is based on &lt;em&gt;Ubuntu&lt;/em&gt;, it has its base of programs updated.&lt;/p&gt;

&lt;p&gt;There are other distros that use Cinnamon besides &lt;em&gt;Linux Mint&lt;/em&gt; like &lt;em&gt;Debian&lt;/em&gt; and &lt;em&gt;Fedora&lt;/em&gt;, with their differences, of course.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is worth mentioning that distros can release different versions of themselves but with a different interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#kde-plasma" class="anchor"&gt;
  &lt;/a&gt;
  KDE Plasma
&lt;/h3&gt;

&lt;p&gt;KDE Plasma is developed by the KDE team with a focus on usability and, mainly, customization. &lt;em&gt;KDE Neon&lt;/em&gt; is the distro that KDE maintains to test new features in KDE Plasma.&lt;/p&gt;

&lt;p&gt;With advanced customization options available by default, distros with KDE Plasma are a great option for anyone looking to modify the system to the fullest.&lt;/p&gt;

&lt;p&gt;Some of the distros that adopt this interface are &lt;em&gt;Manjaro&lt;/em&gt;, &lt;em&gt;Debian&lt;/em&gt;, &lt;em&gt;Fedora&lt;/em&gt; and &lt;em&gt;Kubuntu&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outhers-interfaces" class="anchor"&gt;
  &lt;/a&gt;
  Outhers interfaces
&lt;/h3&gt;

&lt;p&gt;There are other interfaces like DDE, XFCE, LXDE, LXQT, Mate and UKUI. I recommend you do your research, take a look at the channel &lt;a href="https://www.youtube.com/user/Diolinux"&gt;🇧🇷 Diolinux&lt;/a&gt; to see how the interfaces work and which ones you like best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perfection-is-individual" class="anchor"&gt;
  &lt;/a&gt;
  Perfection is individual
&lt;/h2&gt;

&lt;p&gt;The perfect OS does not exist, but everyone is constantly updating to always be the best version of themselves. However, the perfect system &lt;strong&gt;for you&lt;/strong&gt; would be one that meets all &lt;strong&gt;your needs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is also no perfect interface, but the one that you feel most &lt;strong&gt;comfortable&lt;/strong&gt; to use, in which you are more &lt;strong&gt;productive&lt;/strong&gt; or just the one you find most &lt;strong&gt;beautiful&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I recommend that you test, experiment and learn more about it. Most distros do not charge you anything for using them and none limit your access to the system so... why not give it a try?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons" class="anchor"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h2&gt;

&lt;p&gt;Nothing is perfect, unfortunately neither is the Linux world. So, here are some pros and cons of using Linux distros over Windows.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux distros are faster than Windows&lt;/td&gt;
&lt;td&gt;Linux has few NATIVE games&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux distros are more secure than Windows&lt;/td&gt;
&lt;td&gt;There are programs for Windows that do not exist in the Linux world&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux is open-source and most distros are free&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple choice of interfaces&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;It is extremely customizable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Full system access&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Research, first of all, whether the programs and resources you need are available in the Linux world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#choosing-your-distro" class="anchor"&gt;
  &lt;/a&gt;
  Choosing your distro
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I recommend that you watch the videos &lt;a href="https://www.youtube.com/watch?v=MBYeDHDOGIs"&gt;🇧🇷 Qual a melhor distro para “——”&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=MI5jvKGajz8&amp;amp;t=132s"&gt;🇧🇷 Como escolher a melhor distro para o seu uso?&lt;/a&gt;. The first is basically a re-recording of the second, but both complement each other and will show you some other important points for choosing the distro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Taking into account some points I separated some recommendations of distros for questions:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beauty" class="anchor"&gt;
  &lt;/a&gt;
  Beauty
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Deepin&lt;/em&gt; and &lt;em&gt;Ubuntu Kylin&lt;/em&gt; are by far the most beautiful distro for me. But there is a catch: both are chinese distros and there is no guarantee that you will find any material (forum, documentation, videos...) in english or in your native language for you to consult if there is a problem. Another point is that &lt;em&gt;Ubuntu Kylin&lt;/em&gt; itself may have some parts of the system not translated.&lt;/p&gt;

&lt;p&gt;Another very beautiful distro is &lt;em&gt;eXternOS&lt;/em&gt;, but it is still in beta until the posting of this article.&lt;/p&gt;

&lt;p&gt;One option would be to use a distro with KDE Plasma and modify it as you wish, there are several tutorials on the internet and the results are incredibly beautiful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#games" class="anchor"&gt;
  &lt;/a&gt;
  Games
&lt;/h3&gt;

&lt;p&gt;This is a wound that anyone who does not like the Linux world loves to hammer. As I said earlier, Linux does not have many native games like Windows... But there is nothing to stop trying to run Windows games on Linux.&lt;/p&gt;

&lt;p&gt;I recommend you to watch these two videos: &lt;a href="https://www.youtube.com/user/Diolinux"&gt;🇧🇷 Configurando o &lt;em&gt;Pop!_OS&lt;/em&gt; para jogos&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=7Yd_TugJg3w"&gt;🇧🇷 Como jogar no Linux em 2020&lt;/a&gt;. They will give you a sense of how things work and give you tips on where to look to see if your favorite games are supported on Linux.&lt;/p&gt;

&lt;p&gt;And, as one of the video titles already suggests, &lt;em&gt;Pop!_OS&lt;/em&gt; is one of the best distros to play today, already coming with Nvidia drivers (choosing this option on the site) and having a repository (program base) updated frequently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development" class="anchor"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;Here we already need the latest software, constant updates and a large arsenal of programs. &lt;em&gt;Ubuntu&lt;/em&gt; has long been the darling and the best distro to develop in the Linux world because it is popular, stable and easy to use.&lt;/p&gt;

&lt;p&gt;However, over time, other distros have also acquired and reinforced these characteristics, with some having more appeal to the developer audience like &lt;em&gt;Pop!_OS&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stability-one-distro-to-rule-them-all" class="anchor"&gt;
  &lt;/a&gt;
  Stability (one distro to rule them all)
&lt;/h3&gt;

&lt;p&gt;In general, distros like &lt;em&gt;Ubuntu&lt;/em&gt;, &lt;em&gt;Linux Mint&lt;/em&gt; and &lt;em&gt;Pop!_OS&lt;/em&gt; try to deliver a balance between stability and new features. However, there is an operating system that is known to focus on stability: &lt;em&gt;Debian&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Debian&lt;/em&gt; is an operating system composed entirely of free software and maintained by the community. Its update cycle is considerably longer than traditional distros: they usually release updates every 6 months, whereas &lt;em&gt;Debian&lt;/em&gt; releases every 2 years (some specific patches may be released in the meantime).&lt;/p&gt;

&lt;p&gt;This distro may not yet have the programs in their most recent versions, as their updates are only available after many tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-called-freedom-right" class="anchor"&gt;
  &lt;/a&gt;
  It's called freedom, right?
&lt;/h2&gt;

&lt;p&gt;You don't have to be indecisive among so many choices, it's open-source! If you want, just format and install another distro or another interface. You are free to install, reinstall and modify as you wish.&lt;/p&gt;

&lt;p&gt;I hope I have clarified some of your doubts. I know I haven't addressed every possible subject, but other articles will come to complement this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback" class="anchor"&gt;
  &lt;/a&gt;
  Feedback!
&lt;/h2&gt;

&lt;p&gt;Feel free to say what you think of this article, ask questions, point out a topic that was not very well explained or that needed to be talked about, suggest other topics and complement what has already been said. To the next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-recommendations" class="anchor"&gt;
  &lt;/a&gt;
  References and recommendations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/Diolinux"&gt;🇧🇷 Diolinux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLHz_AreHm4dlIXleu20uwPWFOSswqLYbV"&gt;🇧🇷 Curso de Linux - Curso em Vídeo&lt;/a&gt; &lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Loading Animation - Ripple Effect in Mosaic (keyframes, flex box)</title>
      <author>crayoncode</author>
      <pubDate>Sun, 03 Jan 2021 14:59:40 +0000</pubDate>
      <link>https://dev.to/crayoncode/css-loading-animation-ripple-effect-in-mosaic-keyframes-flex-box-4a77</link>
      <guid>https://dev.to/crayoncode/css-loading-animation-ripple-effect-in-mosaic-keyframes-flex-box-4a77</guid>
      <description>&lt;p&gt;Today let's work with CSS animations, delays and flex box in order to create a nice little ripple effect on a colored mosaic.&lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GmjnDw_DQD8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/eYdVLJo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#markup" class="anchor"&gt;
  &lt;/a&gt;
  Markup
&lt;/h2&gt;

&lt;p&gt;The markup of this loader is quite simple as it consists of one wrapping &lt;code&gt;div.mosaic-loader&lt;/code&gt; and 16 &lt;code&gt;div.cell&lt;/code&gt;s. A templating engine like Pug can greatly help here, as it requires us to write only a few lines of code instead of copy'n'pasting a lot of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- const cells = 4;
.mosaic-loader
  - for (let i = 0; i &amp;lt; cells; i++)
    - for (let j = 0; j &amp;lt; cells; j++)
      div(class='cell d-' + (i + j))
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The expanded HTML looks like this. note that every 4 lines the &lt;code&gt;d-n&lt;/code&gt; class starts with a lower value. This comes from the &lt;code&gt;i+j&lt;/code&gt; as it sums up the row and the column index and therefore creates the diagonal symmetry. This is crucial for correctly managing the animation delays later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mosaic-loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell d-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  ...8 more with d2-5 and d3-6
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-css" class="anchor"&gt;
  &lt;/a&gt;
  Basic CSS
&lt;/h2&gt;

&lt;p&gt;The basic CSS code on one hand consists of the setup of the wrapper and on the other hand of the setup for each cell. In the beginning some CSS custom properties like &lt;code&gt;--cell-size&lt;/code&gt; are defined, as they allow us to easily customize the loader's appearance for each use case. Go ahead, give it a try and play with the values in the embedded code pen.&lt;/p&gt;

&lt;p&gt;The wrapper itself is a &lt;code&gt;flex&lt;/code&gt; container that allows its child elements to be wrapped. By calculating the &lt;code&gt;--total-size&lt;/code&gt; as the width each of the elements in one row need and setting this as the wrapper's width, it ensures the square shape of the entire loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mosaic-loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--cell-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;64px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--cell-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--cells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--total-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-spacing&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="na"&gt;--cell-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;total-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;total-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For each cell, the &lt;code&gt;flex&lt;/code&gt; configuration is setup in a way such that it can neither shrink nor grow (&lt;code&gt;0 0&lt;/code&gt;) and always remains at a flex base (width in this case) of &lt;code&gt;--cell-size&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mosaic-loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;

  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-animation-itself" class="anchor"&gt;
  &lt;/a&gt;
  The animation itself
&lt;/h2&gt;

&lt;p&gt;Now, for the animation itself it is setup to run for 1.5s and infinitely often. The keyframes are configured such that from 0% to 30% the &lt;code&gt;background-color&lt;/code&gt; fades from transparent to &lt;code&gt;--cell-color&lt;/code&gt; and back to transparent until 60%. So the rest of the 40% of the animation time it stays transparent in order to give it some time to overlap with the others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mosaic-loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;ripple&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;ripple&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;30&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;60&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#managing-the-delays" class="anchor"&gt;
  &lt;/a&gt;
  Managing the delays
&lt;/h2&gt;

&lt;p&gt;As indicated in the beginning, to produce the actual ripple effect it is the delays between the diagonals need to be managed correctly. The number of different delays is calculated by the number of cells in on row multiplied by two minus two. And between each step the delay is increased by 100 milliseconds, such that it produces some temporal overlapping across the neighboring diangonals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mosaic-loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$delays&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="nv"&gt;$delays&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.d-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-it-colorful" class="anchor"&gt;
  &lt;/a&gt;
  Making it colorful
&lt;/h2&gt;

&lt;p&gt;And finally, to make it cheerfully colorful, just create an array of 16 colors and apply them via the &lt;code&gt;:nth-child&lt;/code&gt; selector. The nice thing is, that by using the &lt;code&gt;--cell-color&lt;/code&gt; CSS custom property, the color for each cell can be overridden individually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.mosaic-loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="ow"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;through&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;--cell-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cell-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>css</category>
      <category>webdev</category>
      <category>ui</category>
    </item>
    <item>
      <title>666 Django projects checked for inefficient database queries. Over half had these 4 anti-patterns</title>
      <author>Django Doctor</author>
      <pubDate>Sun, 03 Jan 2021 14:50:32 +0000</pubDate>
      <link>https://dev.to/djangodoctor/666-django-projects-checked-for-inefficient-database-queries-over-half-had-these-4-anti-patterns-4383</link>
      <guid>https://dev.to/djangodoctor/666-django-projects-checked-for-inefficient-database-queries-over-half-had-these-4-anti-patterns-4383</guid>
      <description>&lt;p&gt;All mature codebases contain anti-patterns: code problems that introduce security holes, tech debt that raises the cost of working with the codebase, and code that goes against best practice that slows it down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://django.doctor"&gt;Django Doctor&lt;/a&gt; performs static analysis to find and auto fix such problems. We checked 666 Django codebases for inefficient Django ORM calls and were surprised with the extent of the problem: &lt;strong&gt;50% of all Django codebases we checked had the following anti patterns&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;16% used &lt;code&gt;queryset.count() &amp;gt; 0&lt;/code&gt; instead of &lt;code&gt;queryset.exists()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;15% used &lt;code&gt;len(queryset)&lt;/code&gt; instead of &lt;code&gt;queryset.count()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;10% checked &lt;code&gt;if queryset:&lt;/code&gt; instead of &lt;code&gt;if queryset.exists():&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;10% did not use foreign keys directly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These at best slow down the Django app, and at worse can bring production down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How would you solve these performance anti-patterns? Try &lt;a href="https://django.doctor/challenge/database-queries"&gt;our Django performance refactor challenge&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Given these problems were present in over half of the  Django github repositories checked, there's a good chance that yours has at least one of these problems. An experienced Django dev may think they would not make these mistakes, but the thing is no dev is an island: over time devs change teams, inherit brownfield codebase that have accumulated tech debt, and will review code written by junior devs. It's therefore important to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;avoid the mistake&lt;/li&gt;
&lt;li&gt;know how to effectively find and fix the mistake&lt;/li&gt;
&lt;li&gt;know how to communicate to junior devs &lt;em&gt;why&lt;/em&gt; it's a problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-count-gt-0-endraw-instead-of-raw-exists-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using &lt;code&gt;.count() &amp;gt; 0&lt;/code&gt; instead of &lt;code&gt;.exists()&lt;/code&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Comparing &lt;code&gt;queryset.count()&lt;/code&gt; is less efficient than checking &lt;code&gt;queryset.exists()&lt;/code&gt;. The &lt;a href="https://docs.djangoproject.com/en/3.1/topics/db/optimization/#use-queryset-exists"&gt;Django docs&lt;/a&gt; tells us to use &lt;code&gt;queryset.count()&lt;/code&gt; if you only want the count, and use &lt;code&gt;queryset.exists()&lt;/code&gt; if you only want to find out if at least one result exists.&lt;/p&gt;

&lt;p&gt;The reason for this is because &lt;code&gt;queryset.count()&lt;/code&gt; performs an SQL operation that scans &lt;em&gt;every&lt;/em&gt; row in the database table to calculate the sum. On the other hand &lt;code&gt;queryset.exists()&lt;/code&gt; simply reads a single record in &lt;a href="https://github.com/django/django/blob/b996424199cca58f64b77faeaa367b7e7efb9776/django/db/models/sql/query.py#L528"&gt;the most optimized way&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove ordering&lt;/li&gt;
&lt;li&gt;remove grouping&lt;/li&gt;
&lt;li&gt;clear any dev-defined &lt;code&gt;select_related&lt;/code&gt; and &lt;code&gt;distinct&lt;/code&gt; from the queryset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"oh no. Run!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Django Doctor would auto fix this to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"oh no. Run!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://django.doctor/advice/C9002"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-lenqueryset-endraw-instead-of-raw-querysetcount-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using &lt;code&gt;len(queryset)&lt;/code&gt; instead of &lt;code&gt;queryset.count()&lt;/code&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;len(queryset)&lt;/code&gt; performs the count at application level. That is much less efficient than doing &lt;code&gt;queryset.count()&lt;/code&gt;, which does the calculation at database level and just returns the count.&lt;/p&gt;

&lt;p&gt;Querysets are &lt;a href="https://docs.djangoproject.com/en/3.1/topics/db/queries/#querysets-are-lazy"&gt;lazily evaluated&lt;/a&gt; - meaning the records are not read from the database until code interact with the data. Thats's why we can do &lt;code&gt;queryset.all()&lt;/code&gt; without downloading every records from the database.&lt;/p&gt;

&lt;p&gt;An example of something that interacts with the data is doing &lt;code&gt;len(queryset)&lt;/code&gt;. This &lt;em&gt;will&lt;/em&gt; read all the records in the queryset: effectively downloading the database over the internet. Not particularly efficient.&lt;/p&gt;

&lt;p&gt;On the other hand doing &lt;code&gt;queryset.count()&lt;/code&gt; handles the calculation at the database level by executing SQL like &lt;code&gt;SELECT COUNT(*) FROM table&lt;/code&gt;. That means using &lt;code&gt;queryset.count()&lt;/code&gt; makes the code quicker, and improves database performance. Plus imagine the waste in downloading 5000 records only to check the length and throw them away at the end!&lt;/p&gt;

&lt;p&gt;So instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"oh no. Run!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Django Doctor would auto fix this to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"oh no. Run!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Having said that though, if the records will need reading after the length is checked, then &lt;code&gt;len(queryset)&lt;/code&gt; can be valid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://django.doctor/advice/C9000"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-if-queryset-endraw-instead-of-raw-if-querysetexists-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using &lt;code&gt;if queryset:&lt;/code&gt; instead of &lt;code&gt;if queryset.exists():&lt;/code&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Similar to above, this can load every row in the database table into memory because the queryset is evaluated. Checking if a queryset is truthy/falsey is much less efficient than checking &lt;code&gt;queryset.exists()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is especially inefficient if the table is very large: it can cause a CPU spike on the database and use a lot of memory on the web server. So instead of pulling every single row from the table, check &lt;code&gt;queryset.exists()&lt;/code&gt;, which simply tries to read a single record from the table in a very efficient way.&lt;/p&gt;

&lt;p&gt;So instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"oh no. Run!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Django Doctor would auto fix this to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"oh no. Run!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://django.doctor/advice/C9003"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-use-foreign-keys-directly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Not use foreign keys directly&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When working with foreign keys, accessing &lt;code&gt;model_instance.related_field.id&lt;/code&gt; will result in a database read when &lt;code&gt;related_field.id&lt;/code&gt; is evaluated. That can be eliminated by doing &lt;code&gt;model_instance.related_field_id&lt;/code&gt;, which is the foreign key value that Django has already cached on the object to make this scenario more efficient.&lt;/p&gt;

&lt;p&gt;So instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;farm_ids&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;hound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;farm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;farm_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Django Doctor would auto fix this to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_hounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;farm_ids&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;hound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HoundsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;farm_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;farm_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://django.doctor/advice/C9001"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-your-django-code-have-these-antipatterns" class="anchor"&gt;
  &lt;/a&gt;
  Does your Django code have these anti-patterns?
&lt;/h3&gt;

&lt;p&gt;Over time it's easy for tech debt to slip into your codebase. I can check it for for free you at &lt;a href="https://django.doctor"&gt;django.doctor&lt;/a&gt;. I'm a Django code improvement bot:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MtxqbmyPl6Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you would prefer code smells not make it into your codebase, I also review pull requests:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/28ZCSSDaNnc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
      <category>performance</category>
    </item>
    <item>
      <title>A simple Like is more complicated than you think</title>
      <author>LeviathanProgramming</author>
      <pubDate>Sun, 03 Jan 2021 13:44:56 +0000</pubDate>
      <link>https://dev.to/conner1115/a-simple-like-is-more-complicated-than-you-think-2cd7</link>
      <guid>https://dev.to/conner1115/a-simple-like-is-more-complicated-than-you-think-2cd7</guid>
      <description>&lt;p&gt;You click the like button on a post in social media, on dev.to, or somewhere else.  Have you ever gotten to think about how that little button and its system was made?  How it worked?&lt;/p&gt;

&lt;p&gt;It's not just "oh I pressed the like button".  There is actually a lot of code behind it.&lt;/p&gt;

&lt;p&gt;If I modeled a post table in SQL, it would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE Post (
  id INTEGER NOT NULL,
  text VARCHAR(500), 
  author VARCHAR(50), 
  PRIMARY KEY (id)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you look in detail, the &lt;code&gt;id&lt;/code&gt; key will tell which post it is.  The id is the primary key.&lt;/p&gt;

&lt;p&gt;The text is a string of 500 chars or less.&lt;/p&gt;

&lt;p&gt;The author is a string of 50 chars or less.  This is the username of the author in this example.&lt;/p&gt;

&lt;p&gt;Now you are probably wondering "hey, you forgot the LIKE stat".  I didn't.  I will create a new table for that and show you how to link it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE Like (
  id INTEGER NOT NULL,
  post_for INTEGER, 
  author VARCHAR(50), 
  PRIMARY KEY (id)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The ID is obvious.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;post_for&lt;/code&gt; stat determines which post the like has been submitted to.  The post's id in this example.&lt;/p&gt;

&lt;p&gt;The author is who pressed the like button or submitted the like.&lt;/p&gt;

&lt;p&gt;Now, I'll show you how I would link them.&lt;br&gt;
First, I'll let users make posts with text in them.&lt;br&gt;
I will display the text and author of a post when it is submitted.  Also, I add a like button in the post route&lt;br&gt;
&lt;code&gt;/post/&amp;lt;post_id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the like button is pressed, submit a new like with the author being the user, the post_for stat being the post's id stat.&lt;/p&gt;

&lt;p&gt;To calculate how many likes the post has, count all the likes that have the same ID as the post.&lt;/p&gt;

&lt;p&gt;And finally make sure that a user can only like a post one time.&lt;/p&gt;

&lt;p&gt;Some people prefer other methods and I know that not everyone wants to do this.  I just want to explain how complex a simple Like is.&lt;/p&gt;

&lt;p&gt;If anything was confusing, please tell me.&lt;br&gt;
Thanks for reading.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>I built my Portfolio Website using nothing but HTML &amp; CSS!</title>
      <author>Fahad Imran</author>
      <pubDate>Sun, 03 Jan 2021 12:49:03 +0000</pubDate>
      <link>https://dev.to/codewithfahad/i-built-my-portfolio-website-using-nothing-but-html-css-5bjf</link>
      <guid>https://dev.to/codewithfahad/i-built-my-portfolio-website-using-nothing-but-html-css-5bjf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-i-built" class="anchor"&gt;
  &lt;/a&gt;
  What I built
&lt;/h3&gt;

&lt;p&gt;I built a &lt;strong&gt;developer portfolio&lt;/strong&gt; showcasing my projects, tech stack, and more using plain HTML, CSS, and a bit of JavaScript. This project is also submitted to the &lt;strong&gt;DigitalOcean + DEV hackathon&lt;/strong&gt; and is deployed using DigitalOcean's App Platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#category-submission" class="anchor"&gt;
  &lt;/a&gt;
  Category Submission
&lt;/h3&gt;

&lt;p&gt;This project comes under the &lt;strong&gt;Personal Site/Portfolio&lt;/strong&gt; category of this hackathon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app-link" class="anchor"&gt;
  &lt;/a&gt;
  App Link
&lt;/h3&gt;

&lt;p&gt;The app has been deployed using DigitalOcean's App platform and can be viewed at this &lt;a href="https://portfolio-website-og7ee.ondigitalocean.app/"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h3&gt;

&lt;p&gt;Here are some screenshots of the website for those interested: 😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q56qIyny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f0i3jn43modfyj66bx8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q56qIyny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f0i3jn43modfyj66bx8.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjWmnobH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ospts187g2fqdl8py2rl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjWmnobH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ospts187g2fqdl8py2rl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGOfz58r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b0eg2y71vzxqq18thntq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGOfz58r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b0eg2y71vzxqq18thntq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q21KZAC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nturjpxfjerrdzzapg0w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q21KZAC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nturjpxfjerrdzzapg0w.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;This is a simple portfolio website that can be used by developers. Nowadays, it is important to have a website that can showcase your skills, projects, work experience, and contact information. It is especially important for freelancers as it gives the &lt;strong&gt;potential clients&lt;/strong&gt; a one-stop-shop to find previously completed projects and contact information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Link to Source Code
&lt;/h3&gt;

&lt;p&gt;This project is &lt;strong&gt;open-sourced&lt;/strong&gt; and can be used by anyone. Link to the &lt;strong&gt;GitHub&lt;/strong&gt; repo: &lt;a href="https://github.com/codewithfahad/portfolio-website"&gt;https://github.com/codewithfahad/portfolio-website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissive-license" class="anchor"&gt;
  &lt;/a&gt;
  Permissive License
&lt;/h3&gt;

&lt;p&gt;The project is licensed under the &lt;strong&gt;MIT&lt;/strong&gt; License.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;I wanted to have a portfolio website for quite some time. But I wasn't sure about a design so I kept on procrastinating. But when I heard about this hackathon, I knew this might well be my best chance at not only building this thing out but also participating in the hackathon in the process.&lt;/p&gt;

&lt;p&gt;Thus, I decided to skip the designing process in something like Figma and jump right into coding. Long story short, I was able to come up with a somewhat decent design and complete the website in a little over &lt;strong&gt;2&lt;/strong&gt; days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-it" class="anchor"&gt;
  &lt;/a&gt;
  How I built it
&lt;/h3&gt;

&lt;p&gt;For building this website, my first inclination was to use &lt;strong&gt;React&lt;/strong&gt;. Since I have been using it to build other applications, I thought why not use it for this project as well.&lt;/p&gt;

&lt;p&gt;But at the last moment, I decided to go with nothing but simple &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, and vanilla &lt;strong&gt;JS&lt;/strong&gt; for this website. I wanted to see what I can build without using any framework whatsoever. So, no React, no bootstrap, and no library of any kind was used to build this website. I believe that many applications can be built using these fundamental technologies without jumping into frameworks. &lt;/p&gt;

&lt;p&gt;So beginner web developers should not feel &lt;strong&gt;intimidated&lt;/strong&gt; that they don't know any frameworks. Because in most cases, plain HTML &amp;amp; CSS can do the trick!&lt;/p&gt;

&lt;p&gt;Things I learned when building this website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Smooth Scroll&lt;/li&gt;
&lt;li&gt;Deployment to DigitalOcean&lt;/li&gt;
&lt;li&gt;CSS Grid and Flexbox usage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deployment was simple using &lt;strong&gt;DigitalOcean&lt;/strong&gt;. I signed up for an account and then was able to connect by GitHub to my DigitalOcean account. After that, it was as simple as choosing the correct repo, and voila! The site was published in seconds! 🥳🥳&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resourcesinfo" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources/Info
&lt;/h3&gt;

&lt;p&gt;For the design, I took inspiration from &lt;a href="https://lukenetti.com/"&gt;Luke Netti's portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For implementing smooth scroll functionality, I took help from the &lt;a href="https://webdesign.tutsplus.com/tutorials/smooth-scrolling-vanilla-javascript--cms-35165"&gt;following website&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  That's All Folks!
&lt;/h3&gt;

&lt;p&gt;That is all for this blog. Hope you enjoyed it. As always I would appreciate it if you follow me on Twitter &lt;a href="https://twitter.com/codewithfahad"&gt;@codewithfahad&lt;/a&gt;. You can find more of my blogs &lt;a href="https://codewithfahad.com"&gt;here&lt;/a&gt;. Thanks for reading and happy coding! 😃 &lt;/p&gt;

</description>
      <category>dohackathon</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Weak References in JavaScript</title>
      <author>Alvin Bryan</author>
      <pubDate>Sun, 03 Jan 2021 11:29:06 +0000</pubDate>
      <link>https://dev.to/alvinometric/weak-references-in-javascript-3ni9</link>
      <guid>https://dev.to/alvinometric/weak-references-in-javascript-3ni9</guid>
      <description>&lt;p&gt;ES6 introduced &lt;code&gt;WeakMaps&lt;/code&gt; and &lt;code&gt;WeakSets&lt;/code&gt;, which brings weak and strong references to JavaScript, a concept front-enders are not particularly used to.&lt;br&gt;
If you're working on games, you have to pay very close attention to how memory and performance is managed.&lt;/p&gt;

&lt;p&gt;I'm using &lt;code&gt;WeakMap&lt;/code&gt; here as an example, but it's the same for &lt;code&gt;WeakSet&lt;/code&gt; too. The main difference between &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; is that the latter only keeps unique values.&lt;/p&gt;

&lt;p&gt;According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computer programming, a weak reference is a reference that does not protect the referenced object from collection by a garbage collector, unlike a strong reference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That actually, surprisingly, makes a lot of sense! Wikipedia got me used to definitions like &lt;code&gt;Coroutines are computer program components that generalize subroutines for non-preemptive multitasking by allowing execution to be suspended and resumed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, what a &lt;code&gt;WeakMap&lt;/code&gt; does, compared to a good old &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{}&lt;/code&gt; is each individual key element in the set can be garbage-collected when they are not referenced somewhere else:&lt;/p&gt;

&lt;p&gt;If this is the content of a regular &lt;code&gt;Map&lt;/code&gt; / &lt;code&gt;{}&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spritesheet-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="cm"&gt;/* gigantic array with a lot of stuff */&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello bla bla&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you're only using it in the code like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spritesheetID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bigObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// the gigantic array in myMap.data is in memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;whole object&lt;/em&gt; and the gigantic array will remain in memory and will &lt;em&gt;not&lt;/em&gt; be CGed until it or its references are destroyed.&lt;/p&gt;

&lt;p&gt;Whereas if you use a weak map anything that isn't being used in your program will be garbage-collected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a WeakMap from the big object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weakMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bigObject&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// gigantic array is garbage-collected&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spritesheetID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weakMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you could manually &lt;code&gt;delete&lt;/code&gt; the keys of the object that you don't use, but this trick saves you having to keep track of your usage because this isn't C++.&lt;/p&gt;

&lt;p&gt;People have also found other ways to use this with promises and more in &lt;a href="http://stackoverflow.com/questions/29413222/what-are-the-actual-uses-of-es6-weakmap"&gt;this Stackoverflow thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's all for this post! It's a simple concept but needed clarification for me, so I thought I might as well share it.&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@thefredyjacob"&gt;Fredy Jacob&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Coding the Wikipedia's Tooltip!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Sun, 03 Jan 2021 11:24:24 +0000</pubDate>
      <link>https://dev.to/ziratsu/coding-the-wikipedia-s-tooltip-dh6</link>
      <guid>https://dev.to/ziratsu/coding-the-wikipedia-s-tooltip-dh6</guid>
      <description>&lt;p&gt;Recreating UI of popular websites is &lt;strong&gt;fun&lt;/strong&gt;, today we are going to code &lt;strong&gt;the Wikipedia's tooltip !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt; it's right here : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UFfPFeoE1dU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But first ...&lt;br&gt;
&lt;strong&gt;What is a tooltip ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Tooltip is usually &lt;strong&gt;some context&lt;/strong&gt; displayed by hovering a link, a button or an icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqJlAsZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8g8mcvmm2bxd2es6xivj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqJlAsZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8g8mcvmm2bxd2es6xivj.png" alt="tooltip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's do it, &lt;em&gt;step by step.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-create-the-tooltip-and-the-links" class="anchor"&gt;
  &lt;/a&gt;
  1. Create the tooltip and the links.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The links :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tooltip1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tooltip2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tooltip3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The tooltip :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Libero tenetur non laborum dolorem laboriosam quo quibusdam assumenda dolores eveniet. Ipsum?
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Style it,&lt;/strong&gt; with position absolute, to make it easyer to place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.tooltip-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;425px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;-20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.fade-in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fade&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;fade&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice the &lt;strong&gt;lovely animation,&lt;/strong&gt; to display from none to block and then animate from opacity 0 to 1 ! ♥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-animate-with-javascript" class="anchor"&gt;
  &lt;/a&gt;
  2 Animate with JavaScript.
&lt;/h2&gt;

&lt;p&gt;Take all the links, and the tooltip container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tooltips&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tooltip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tooltipContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tooltip-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Listen to mouseenter and mouseout on every link and place the tooltip where the mouse is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tooltips&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;tooltip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;tooltip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseenter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;tooltipContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fade-in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;tooltipContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;tooltipContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;tooltip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tooltipContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fade-in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Hurray, we made it !&lt;/em&gt;&lt;br&gt;
If you want to &lt;strong&gt;add custom text&lt;/strong&gt; for each link to the tooltip, I'm showing it in the video, I don't want to make too long article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source code,&lt;/strong&gt; with all the &lt;strong&gt;shiny CSS&lt;/strong&gt; is right here :&lt;br&gt;
&lt;a href="https://codepen.io/Ziratsu/pen/ExgEwOw"&gt;https://codepen.io/Ziratsu/pen/ExgEwOw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Come and take a look at &lt;strong&gt;my brand new Youtube channel&lt;/strong&gt; :&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCiukrDWz1wqlHAvIdqgqmQg"&gt;https://www.youtube.com/channel/UCiukrDWz1wqlHAvIdqgqmQg&lt;/a&gt;&lt;br&gt;
Be the &lt;strong&gt;pioneer&lt;/strong&gt; that follows me uh ? 😎&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you next time for some quick and polished tutorials !&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ui</category>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>A list of actually useful Nocode tools and I am not talking about site builders.</title>
      <author>Fayaz Ahmed</author>
      <pubDate>Sun, 03 Jan 2021 08:31:36 +0000</pubDate>
      <link>https://dev.to/fayaz/a-list-of-actually-useful-nocode-tools-and-i-am-not-talking-about-site-builders-3m4g</link>
      <guid>https://dev.to/fayaz/a-list-of-actually-useful-nocode-tools-and-i-am-not-talking-about-site-builders-3m4g</guid>
      <description>&lt;p&gt;There's a lot of buzz going around the web dev world regarding Nocode, but a ton of these do the same thing and kind of miss the point of why they are to be used in the first place.&lt;/p&gt;

&lt;p&gt;These tools are not just another Website/App builder, but actual tools that will help you develop/scale your existing apps/websites which solve production use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pwabuilder" class="anchor"&gt;
  &lt;/a&gt;
  1.  &lt;a href="https://www.pwabuilder.com/"&gt;PWABuilder&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jUArMWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dyubax3rxhmdbxkks01i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jUArMWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dyubax3rxhmdbxkks01i.jpg" alt="PWA Builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have used this and you will be surprised how well it works. The name says PWA Builder, but in fact it makes your PWAs - actual android apps which you can host on the Google play store, these are small light weight apps which are hardly like 1 - 2 MB in size.&lt;/p&gt;

&lt;p&gt;PS, they even have a neat PWA component library, like Auth, Contact Picker, Install component, which you can use in your PWAs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-appsmith" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-HijEDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ocoi9yqcgv3q12zp6ef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-HijEDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ocoi9yqcgv3q12zp6ef.png" alt="Appsmith"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another tool that I have fallen in love with recently, imagine building internal admin panels without code with charts, APIs, form collections, all with a drag and drop interface.&lt;/p&gt;

&lt;p&gt;You can even connect it directly to your Mysql, PGSQL databased right within this tool.&lt;/p&gt;

&lt;p&gt;I am surprised by how many complex use cases it handles.&lt;/p&gt;

&lt;p&gt;PS - it's all &lt;a href="https://github.com/appsmithorg/appsmith"&gt;open source&lt;/a&gt; and they even have the hosted version for free(for now).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-nocodeapi" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://nocodeapi.com"&gt;NoCodeApi&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfpmkoLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfh9qz3j3y0xdprv4at8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfpmkoLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfh9qz3j3y0xdprv4at8.jpg" alt="NoCodeApi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been seeing NoCodeApi being built and grow since the beginning and I cannot stress enough how useful and polished this tool is, you need not read the docs of third party APIs, set up separate servers, write code, handle auth, tokens, API keys etc. All you need is an account and just get started using APIs from Google, Instagram, Twitter, Airtable, Slack and there are literally tons of other platform APIs you can use in your projects.&lt;/p&gt;

&lt;p&gt;PS, I have seen the next update of NoCodeApi and Danish is making something really amazing for developers called Dev APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-pipedream" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://pipedream.com/"&gt;Pipedream&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKdvTAMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nbqgrummqd2hn6q553wf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKdvTAMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nbqgrummqd2hn6q553wf.jpg" alt="Pipedream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not exactly sure what to call this platform, because it does so many things you won't believe. Think of it like Zapier + IFTTT + Glitch + Firebase Database combines.&lt;/p&gt;

&lt;p&gt;It has all the automation magic and it gives you the complete flexibility of writing code, it even lets you add/edit their own hooks. Pipedream even allows you to save data on an actual database&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-letter" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://letter.so/"&gt;Letter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFErIyir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0meu9w6nbejt3j302bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFErIyir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0meu9w6nbejt3j302bo.png" alt="Letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People sending newsletters, you know how hard it is to make good looking emails, letter is simple yet powerful, it can import data like images, titles, descriptions from links. right in their builder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mail-4-good" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/freeCodeCamp/mail-for-good"&gt;Mail 4 Good&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZEffyvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/138x41e3jrovr0kw9m1a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZEffyvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/138x41e3jrovr0kw9m1a.jpg" alt="Mail4Good"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For sending 10,000 emails, Mailchimp charges you $200, Mail4Good does it for $1 (I am not kidding). The thing is you need to host it yourself, it is open source and it uses Amazon SES behind the curtains which makes it so cheap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-descript" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.descript.com/"&gt;Descript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEGAKZo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lptg15qvh2wdjr9618mn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEGAKZo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lptg15qvh2wdjr9618mn.jpg" alt="Descript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descript is like magic for Independent video makers, it generates a transcript, editing videos is a breeze with this platform. Their website says &lt;strong&gt;video editor that works like a doc&lt;/strong&gt; and I could not agree more.&lt;/p&gt;

&lt;p&gt;Just look at their demo video and you will understand what I am talking about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8bannerbear" class="anchor"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://www.bannerbear.com/"&gt;BannerBear&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_Xl5KJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p8bi4unoac92kteh4i4n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_Xl5KJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p8bi4unoac92kteh4i4n.jpg" alt="BannerBear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BannerBear automates Image generation for you, you just need to pass along some parameters to its API, and it will make the poster, image, text embedding, image resizing on the fly. &lt;/p&gt;

&lt;p&gt;You can even generate these images on the bulk by uploading them to Airtable or google sheets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-super" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://super.so/"&gt;Super&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4TDI6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x44sqbydbb79m8eb07z8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4TDI6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x44sqbydbb79m8eb07z8.jpg" alt="Super"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Super lets you use Notion as your CMS. It even lets you connect custom domains to the site that is generated.&lt;/p&gt;

&lt;p&gt;Do consider supporting me by buying &lt;a href="https://fayazz.co/coffee"&gt;coffees&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like my content do follow me on &lt;a href="https://twitter.com/fayazara"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For paid articles on Javascript, APIs, SDK Integrations etc just DM on my twitter handle.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a Snake Game with Python</title>
      <author>Kumar Shubham</author>
      <pubDate>Sun, 03 Jan 2021 07:07:42 +0000</pubDate>
      <link>https://dev.to/shubham1710/build-a-snake-game-with-python-23an</link>
      <guid>https://dev.to/shubham1710/build-a-snake-game-with-python-23an</guid>
      <description>&lt;p&gt;Hello readers, let’s build a game using Python. Yes, you heard that right! We will be building a simple snake game using the pygame library.&lt;/p&gt;

&lt;p&gt;Remember the old days, when everyone used to play the iconic snake game. Let’s revive those old days and build one on our own! So, in this tutorial, we will be building that iconic game.&lt;/p&gt;

&lt;p&gt;So, let’s start building our game. We will do it step by step to get a clear understanding of every part of the game and what purpose it has in our game! So, let’s begin:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-the-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Importing the libraries
&lt;/h3&gt;

&lt;p&gt;First, of all, we need to import the libraries into our code which will be used to build the game. We will need the below-mentioned libraries to build and run our game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pygame
import time
import random
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;pygame:&lt;/strong&gt; This library will help us get all the graphical components to build the game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;random:&lt;/strong&gt; This library will help us in spawning the food at random locations in the game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;time:&lt;/strong&gt; This helps us with time-related functionalities in the game, as the speed of the snake.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-the-game-and-setting-the-graphics" class="anchor"&gt;
  &lt;/a&gt;
  Starting the game and Setting the Graphics
&lt;/h3&gt;

&lt;p&gt;Now, let’s begin building the actual part of the game. We will first initialise the game to have a window with us in which the game will be played.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pygame.init()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we would love to define the colours we would be using in the game with the help of RGB notations. Get the RGB codes from the internet and put these as co-ordinates for the colour variables.&lt;/p&gt;

&lt;p&gt;We have defined 6 colours in our game but you are free to use any colour of your choice. Make sure the colour combinations are good for playing the game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;white = (255, 255, 255)
yellow = (255, 255, 102)
black = (0, 0, 0)
red = (213, 50, 80)
green = (0, 255, 0)
blue = (50, 153, 213)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we should define the size of the display in which our game would be running. So, in this case, we would define the height to be 600px and width to be 800px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;width = 800
height = 600
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we will set our display with the defined width and height variables as input and we would describe the name of the game to be displayed as a caption for our game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dis = pygame.display.set_mode((width, height))
pygame.display.set_caption(‘Shubham Snake Game’)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#defining-the-variables-being-used-in-the-game" class="anchor"&gt;
  &lt;/a&gt;
  Defining the variables being used in the Game
&lt;/h3&gt;

&lt;p&gt;Now, we will initialize our clock variable which will make use of the time package which we imported earlier. This variable ‘clock’ will take care of all time-related queries in our complete code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clock = pygame.time.Clock()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let’s define the speed of our snake and also the size of the snake’s block i.e. the width of the snake. This is purely based on user choice and I have also chosen some numbers which I felt like a good fit for the game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;snake_block = 10
snake_speed = 12
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we describe the font size and font style for score display and for the display of other information such as to notify that you lost the game or you want to play again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;font_style = pygame.font.SysFont(“bahnschrift”, 25)
score_font = pygame.font.SysFont(“comicsansms”, 35)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#defining-helper-functions" class="anchor"&gt;
  &lt;/a&gt;
  Defining helper functions
&lt;/h3&gt;

&lt;p&gt;Here, we need to define three helper functions for the following purposes:- for displaying the score, for handling the snake and for handling the display of other relevant information in the game respectively.&lt;/p&gt;

&lt;p&gt;So, at first, we define the function to help us with the score display. We will define the position where it would be displayed in the game and how will it render the score.&lt;/p&gt;

&lt;p&gt;The below function takes in the score as a parameter which it displays. We will calculate the score later on in our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Your_score(score):
    value = score_font.render("Your Score: " + str(score), True, yellow)
    dis.blit(value, [0, 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we will be defining our snake. Without the snake, our game has no significance. So, let’s make the most important part of our game, the snake. We will define the colour and position of the snake and its size i.e. &lt;em&gt;snake_block&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The function below takes snake_block and snake_list as an input. We will be defining the snake_list after on in our program. So, don’t worry if you do not get anything properly now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def our_snake(snake_block, snake_list):
 for x in snake_list:
 pygame.draw.rect(dis, black, [x[0], x[1], snake_block, snake_block])
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next and our last helper function would be to display any sort of message we need to show to the user playing our game.&lt;/p&gt;

&lt;p&gt;This helper function takes the msg and colour as an input parameter. We will set the font and then display the message in the required colour. We will need to specify the position where the message will be displayed in the game display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def message(msg, colour):
 mesg = font_style.render(msg, True, colour)
 dis.blit(mesg, [width / 6, height / 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#building-the-game-loop" class="anchor"&gt;
  &lt;/a&gt;
  Building the Game Loop
&lt;/h3&gt;

&lt;p&gt;Now, we start building out the components of the game which will make it run and respond to user inputs through the keyboard.&lt;br&gt;
We start by defining two boolean variables: &lt;em&gt;game_over&lt;/em&gt; and &lt;em&gt;game_close&lt;/em&gt;. They will describe the states of the game.&lt;/p&gt;

&lt;p&gt;The first one will tell the game whether it’s over or not. The next variable defines whether the game is closed and we need to play again or not. We define both as false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;game_over = False
game_close = False
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At the next step, we aim to define the other variables we would need in the game.&lt;/p&gt;

&lt;p&gt;We will be defining &lt;em&gt;x1&lt;/em&gt; and &lt;em&gt;y1&lt;/em&gt; to denote the position of the snake in our game. We initialize them width/2 and height/2 respectively. Also, we will be defining the variables &lt;em&gt;x1_change&lt;/em&gt; and &lt;em&gt;y1_change&lt;/em&gt; which will be used to denote the changes in the position of the snake based on the input provided by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x1 = width / 2
y1 = height / 2

x1_change = 0
y1_change = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, we need to define the &lt;em&gt;snake_List&lt;/em&gt; and snake_length variables to store all the head positions of the snake and the length of the snake respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;snake_List = []
snake_length = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We also need to initialize the position where the food will spawn in our game each time after it is eaten by the snake. We will make use of the random library to help us in determining the position for the food.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;foodx = round(random.randrange(0, width — snake_block) / 10.0) * 10.0
foody = round(random.randrange(0, height — snake_block) / 10.0) * 10.0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we would start a loop that would run until game_over turns to be True.&lt;/p&gt;

&lt;p&gt;Inside that loop, we would first define the instructions to be performed in case the game_close variable is True.&lt;/p&gt;

&lt;p&gt;Below is the code which would help us tackle this situation when game_close is equal to True.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while game_close == True:
 dis.fill(blue)
 message(“Oops! Your snake died! Press P to play again or Q to quit”, red)
 Your_score(snake_length — 1)
 pygame.display.update()

 for event in pygame.event.get():
   if event.type == pygame.KEYDOWN:
     if event.key == pygame.K_q:
       game_over = True
       game_close = False
     if event.key == pygame.K_p:
       gameLoop()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see above, we have defined many things. We fill the display with Blue colour (you can surely choose yours). We then display a message showing that the person lost the game and we should ask whether the person wants to play it again or quit the game.&lt;/p&gt;

&lt;p&gt;We also display the user’s score equal to the length of the snake minus 1. We update score by 1 each time our snake eats food.&lt;br&gt;
Now, for taking user input regarding whether he wants to play again or quit it, we define a for-loop. As we asked the user for input regarding his decision we define our possibilities for the input.&lt;/p&gt;

&lt;p&gt;If the user inputs a ‘p’ then we will just continue our game loop. If the user inputs ‘q’ then we need to quit the game.&lt;/p&gt;

&lt;p&gt;Now, after handling the condition of game_close, we would next define all the required steps which will allow our snake to move by the user’s input. We will accept both W, A, S, D and the up, down, left and right key combos for playing the game. You are free to choose your choice of keys to play the game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for event in pygame.event.get():
 if event.type == pygame.QUIT:
   game_over = True
 if event.type == pygame.KEYDOWN:
   if event.key == pygame.K_LEFT or event.key == pygame.K_a:
     x1_change = -snake_block
     y1_change = 0
   elif event.key == pygame.K_RIGHT or event.key == pygame.K_d:
     x1_change = snake_block
     y1_change = 0
   elif event.key == pygame.K_UP or event.key == pygame.K_w:
     y1_change = -snake_block
     x1_change = 0
   elif event.key == pygame.K_DOWN or event.key == pygame.K_s:
     y1_change = snake_block
     x1_change = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above code, we change the values of &lt;em&gt;x1_change&lt;/em&gt; and &lt;em&gt;y1_change&lt;/em&gt; according to inputs provided by the user. Also, we quit the game if the user wants to quit the game.&lt;/p&gt;

&lt;p&gt;Next, we would define the condition for losing the game. Also, we update the values of x1 and y1 with help of x1_change and y1_change. We also fill the entire display with blue colour and we draw the snake and food by passing in the position of their appearance in the display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; if x1 &amp;gt;= width or x1 &amp;lt; 0 or y1 &amp;gt;= height or y1 &amp;lt; 0:
    game_close = True
 x1 += x1_change
 y1 += y1_change
 dis.fill(blue)
 pygame.draw.rect(dis, green, [foodx, foody, snake_block, snake_block])
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we define a list known as snake_Head which will store the values of the head of the snake after each iteration. We append the values of x1 and y1 to it. Then, we append that snake_Head to the snake_List.&lt;/p&gt;

&lt;p&gt;Then we check the condition check whether the length of the snake_List is greater than snake_length. If yes, delete the first element in the snake_List.&lt;/p&gt;

&lt;p&gt;Then, we check whether that current snake_Head is equal to any of the elements of snake_List except the one which is added newly i.e. the snake_Head being checked. If yes, then we close the game and the player loses.&lt;/p&gt;

&lt;p&gt;This is because the occurrence of snake_Head in snake_List means it has been added to the snake_List before and finding the same value again signifies that snake bites itself. So, the player should lose at that moment.&lt;/p&gt;

&lt;p&gt;Then we call the function our_snake and Your_score (defined earlier) and pass the required parameters to these functions to display the updated snake and the score of the player.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; snake_Head = []
 snake_Head.append(x1)
 snake_Head.append(y1)
 snake_List.append(snake_Head)
 if len(snake_List) &amp;gt; snake_length:
   del snake_List[0]

 for x in snake_List[:-1]:
   if x == snake_Head:
     game_close = True

 our_snake(snake_block, snake_List)
 Your_score(snake_length — 1)

 pygame.display.update()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we will form a new food once the snake has eaten the previous one. So, for doing this, we need to find a new random position in the display to spawn the food. Also, we need to increase the length of the snake by 1 since it just ate the food.&lt;/p&gt;

&lt;p&gt;Next, we give the snake speed as a parameter to the clock.tick which is to run the game loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if x1 == foodx and y1 == foody:
  foodx = round(random.randrange(0, width — snake_block) / 10.0) * 10.0
  foody = round(random.randrange(0, height — snake_block) / 10.0) * 10.0
  snake_length += 1

clock.tick(snake_speed)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our game is almost finished by now. One last step, we need to quit the game and call the game loop again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  pygame.quit()
  quit()
gameLoop()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, we have completed our snake game. Here’s the complete code for the snake game:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pygame
import time
import random

pygame.init()

white = (255, 255, 255)
yellow = (255, 255, 102)
black = (0, 0, 0)
red = (213, 50, 80)
green = (0, 255, 0)
blue = (50, 153, 213)

dis_width = 800
dis_height = 600

dis = pygame.display.set_mode((dis_width, dis_height))
pygame.display.set_caption('Shubham Snake Game')

clock = pygame.time.Clock()

snake_block = 10
snake_speed = 15

font_style = pygame.font.SysFont("bahnschrift", 25)
score_font = pygame.font.SysFont("comicsansms", 35)

def Your_score(score):
    value = score_font.render("Your Score: " + str(score), True, yellow)
    dis.blit(value, [0, 0])

def our_snake(snake_block, snake_list):
    for x in snake_list:
        pygame.draw.rect(dis, black, [x[0], x[1], snake_block, snake_block])

def message(msg, color):
    mesg = font_style.render(msg, True, color)
    dis.blit(mesg, [dis_width / 6, dis_height / 3])

def gameLoop():
    game_over = False
    game_close = False

    x1 = dis_width / 2
    y1 = dis_height / 2

    x1_change = 0
    y1_change = 0

    snake_List = []
    Length_of_snake = 1

    foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0
    foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0

    while not game_over:

        while game_close == True:
            dis.fill(blue)
            message("You Lost! Press C-Play Again or Q-Quit", red)
            Your_score(Length_of_snake - 1)
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        game_over = True
                        game_close = False
                    if event.key == pygame.K_c:
                        gameLoop()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    x1_change = -snake_block
                    y1_change = 0
                elif event.key == pygame.K_RIGHT:
                    x1_change = snake_block
                    y1_change = 0
                elif event.key == pygame.K_UP:
                    y1_change = -snake_block
                    x1_change = 0
                elif event.key == pygame.K_DOWN:
                    y1_change = snake_block
                    x1_change = 0

        if x1 &amp;gt;= dis_width or x1 &amp;lt; 0 or y1 &amp;gt;= dis_height or y1 &amp;lt; 0:
            game_close = True
        x1 += x1_change
        y1 += y1_change
        dis.fill(blue)
        pygame.draw.rect(dis, green, [foodx, foody, snake_block, snake_block])
        snake_Head = []
        snake_Head.append(x1)
        snake_Head.append(y1)
        snake_List.append(snake_Head)
        if len(snake_List) &amp;gt; Length_of_snake:
            del snake_List[0]

        for x in snake_List[:-1]:
            if x == snake_Head:
                game_close = True

        our_snake(snake_block, snake_List)
        Your_score(Length_of_snake - 1)

        pygame.display.update()

        if x1 == foodx and y1 == foody:
            foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0
            foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0
            Length_of_snake += 1

        clock.tick(snake_speed)

    pygame.quit()
    quit()

gameLoop()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, hope you enjoyed reading this article. I hope you learnt something new from this article. Do try it on your own and try to modify the features and implement a better model of this. Some examples of improvements could be to have various levels of difficulty with varying snake speeds and width. It can be made more interactive and beautiful.&lt;/p&gt;

&lt;p&gt;Go, try it out and make something new out of it. Visit the &lt;a href="https://github.com/shubham1710/snake-game-python"&gt;Github Repository of this project&lt;/a&gt; for more updates on this.&lt;/p&gt;

&lt;p&gt;Thank you for reading it. Hope you loved it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published &lt;a href="https://medium.com/datadriveninvestor/building-a-snake-game-with-python-4d9e4a8dd4ad"&gt;at Medium&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>gamedev</category>
      <category>programming</category>
    </item>
    <item>
      <title>The best web accessibility tools for developers in 2021</title>
      <author>Jake Tracey</author>
      <pubDate>Sun, 03 Jan 2021 06:27:51 +0000</pubDate>
      <link>https://dev.to/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8</link>
      <guid>https://dev.to/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8</guid>
      <description>&lt;p&gt;The quality of the tools you use defines the speed with which you can diagnose and resolve problems. &lt;/p&gt;

&lt;p&gt;Each year the landscape changes dramatically in web technologies, and of late the tooling for accessibility is no exception.&lt;/p&gt;

&lt;p&gt;I’ve divided this article into 4 categories - resources, development tools, continuous integration and screen readers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;These are the pages that I keep bookmarked for reference and to learn new techniques.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility"&gt;Mozilla Accessibility Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/"&gt;W3C WCAG Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/category/accessibility"&gt;Smashing Magazine - Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/tag/accessibility/"&gt;CSS Tricks - Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a number of great accessibility blogs on the web which I suggest browsing - a good jumping off point is available at &lt;a href="https://www.digitala11y.com/accessibility-blogs/"&gt;Digital A11y&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-tools" class="anchor"&gt;
  &lt;/a&gt;
  Development tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.deque.com/axe/"&gt;axe&lt;/a&gt; - axe has quickly become the defacto standard for automated accessibility testing. Deque's axe-core testing engine provides the under the hood implementation for most common tools, and they also provide a free Chrome extension that quickly identifies any in page errors for most common issues while providing guidance on how to resolve them. Definitely my first port of call when testing any new code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/pa11y/pa11y"&gt;pa11y&lt;/a&gt; - pa11y is an automated testing tool based on axe-core that can be run on your development environment as part of your commit hooks or front-end build pipeline. It's extremely configurable so you can run automated tests for different accessibility standards and viewports, ignoring specific WCAG rule sets as well as triggering actions on pages as a part of your test suite. @f3igao's wonderful blog post, &lt;a href="https://medium.com/@f3igao/how-to-automate-web-accessibility-testing-921512bdd4bf"&gt;How to automate web accessibility testing&lt;/a&gt; is a great starting off point if you are looking to fully integrate pa11y with your front-end build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/MSU-NatSci/DomainAccessibilityAudit"&gt;DomainAccessibilityAudit&lt;/a&gt; - I found this tool while researching ways to test an entire website for a11y issues and this was a perfect fit. You can feed it a root URL to start testing on and it will scrape all links on all subsequent pages and perform an audit, essentially crawling the entire site and producing a report of a11y issues. You can also input a sitemap.xml if you want to test a specific set of pages instead of crawling the entire site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://accessibilityinsights.io/docs/en/web/overview/"&gt;Accessibility insights for web&lt;/a&gt; - Microsoft's commitment to accessible technologies shines with their free Chrome extension and provides another useful interface to the axe-core framework. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/siteimprove-accessibility/efcfolpjihicnikpmhnmphjhhpiclljc"&gt;Siteimprove Accessibility Checker&lt;/a&gt; - The Siteimprove browser extension provides one of the most comprehensive interfaces to resolving issues with detailed recommendations on how to fix them. Highly recommended to keep in your toolbox.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; - Don't have time or access to install software to run a quick a11y check? Lighthouse comes built in with Chrome DevTools and provides a fast, easy to understand issue checker that integrates perfectly with the Chrome browser. It also offers other suggestions in terms of improving page performance, server configuration and insights into using progressive web applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#continuous-integration" class="anchor"&gt;
  &lt;/a&gt;
  Continuous integration
&lt;/h2&gt;

&lt;p&gt;Catching issues before they are in production is one of the major benefits of adding accessibility tooling to your CI pipeline. Recently there has been huge progress in the ease of integration and reporting in this space, which I expect will continue to improve over the next year.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/pa11y/pa11y-ci"&gt;pa11y-ci&lt;/a&gt; - A set of command line tools for pa11y, pa11y-ci gives you the opportunity to run your suite of pa11y tests on your CI server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/GoogleChrome/lighthouse-ci"&gt;lighthouse-ci&lt;/a&gt; - If you're looking to run a comprehensive set of tests in your CI environment, lighthouse-ci brings all the power of Google's Lighthouse app to the table. In addition to accessibility checks, lighthouse-ci will report on your app's performance, SEO and best practices in one of the most polished standalone reports available.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screen-readers" class="anchor"&gt;
  &lt;/a&gt;
  Screen readers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freedomscientific.com/products/software/jaws/"&gt;JAWS&lt;/a&gt; - JAWS is the most popular and oldest screen reader that is still in use. It represents a huge proportion of screen reader users so it is an essential tool when testing for issues. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.nvaccess.org/about-nvda/"&gt;NVDA&lt;/a&gt; - NVDA is my screen reader of choice for testing because it's open source and free. It's also updated quite frequently and in my experience, has less quirks than JAWS. I expect in the coming years NVDA will overtake JAWS in terms of popularity, so if you were to pick one to learn, NVDA would be it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.apple.com/voiceover/info/guide/"&gt;VoiceOver&lt;/a&gt; - VoiceOver is the defacto standard for screen readers on iOS and Mac OS X. It is extremely easy to use and the documentation is incredible. The vast majority of screen reader users on mobile are using VoiceOver so it is the most important tool you can use if a mobile audience is your primary demographic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://support.google.com/accessibility/android/answer/6283677?hl=en"&gt;TalkBack&lt;/a&gt; - TalkBack is the Android OS screen reader. Similarly to VoiceOver, when developing for the mobile web, it is essential to test using TalkBack. Unfortunately, the OS version fragmentation on Android devices varies wildly, so it may be best in your particular scenario to test using a couple of versions older than the latest Android OS when conducting audits using TalkBack.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find this list helpful - each year I will add an additional update with any new tools I have discovered, and provide any comments on how the landscape is progressing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://jaketracey.com/best-web-accessibilty-tools-for-developers-2021/"&gt;jaketracey.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
