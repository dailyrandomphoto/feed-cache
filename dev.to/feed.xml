<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How cryptography üí™works to protect ML models</title>
      <author>Cossack Labs</author>
      <pubDate>Mon, 25 Oct 2021 16:01:07 +0000</pubDate>
      <link>https://dev.to/cossacklabs/how-cryptography-works-to-protect-ml-models-476o</link>
      <guid>https://dev.to/cossacklabs/how-cryptography-works-to-protect-ml-models-476o</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Let‚Äôs speak about &lt;a href="https://www.youtube.com/watch?v=rj5zbIleekA&amp;amp;t=5s&amp;amp;ab_channel=NoNameCon"&gt;Machine Learning and cryptography&lt;/a&gt;. Are they a match? 
  spoiler:
  &lt;p&gt;yep &lt;/p&gt;

&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs imagine that you are in ML.&lt;/strong&gt;&lt;br&gt;
You trained fantastic ML models that add cat‚Äôs ears =^..^= (&lt;em&gt;nekomimi&lt;/em&gt;) to all people on the video. You decided to make an app for that! Suddenly, your app became popular, and some people wanted to copy it. So, it would be best to protect your ML models from leakage and misuse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simplified, it works like this:&lt;/strong&gt; users upload their videos to your app. Your app takes them to your backend, which generates a video-specific ML model, and then sends it back to the app. Then your application stores and executes it.&lt;/p&gt;

&lt;p&gt;Being a üí™ security pro, you understand that ML models need protection. But &lt;strong&gt;from a data security perspective ML model is a‚Ä¶ just file with model data and procedure/algorithm&lt;/strong&gt;. So, you‚Äôre to adjust your security efforts and protect those tiny ML models‚Äîfrom their generation point to their usage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMXyo_b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z611h7ye9m1jhnj5ug14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMXyo_b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z611h7ye9m1jhnj5ug14.png" alt="IML dataflow, by Anastasiia Voitova, Cossack Labs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You carefully add encryption: the backend will encrypt each ML model per user per video using ephemeral keys and &lt;a href="https://datatracker.ietf.org/doc/draft-irtf-cfrg-hpke/"&gt;an HPKE-like approach&lt;/a&gt;. It means that every ML model will be explicitly encrypted for specific videos by your backend code. This approach is known as &lt;a href="https://www.infoq.com/articles/ale-software-architects/"&gt;application-level encryption (ALE)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Your mobile apps will receive an encrypted model and decrypt it before usage. &lt;strong&gt;Each ML model is encrypted by a unique encryption key used only once to make things complicated for attackers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_VDKlre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a1xp3gjdb66vmo4l5g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_VDKlre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a1xp3gjdb66vmo4l5g2.png" alt="Encryption layer: solutions, by Anastasiia Voitova, Cossack Labs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Indeed, you don‚Äôt want to leave encryption alone.&lt;/p&gt;

&lt;p&gt;So, you add multiple protection measures: use Keychain/Keystore on a device, add logging and monitoring on a server, and an anti-fraud system that prevents sending ML models to untrusted users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRIu7kE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyflukqb6c6xp87v5f4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRIu7kE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyflukqb6c6xp87v5f4q.png" alt="Anti-fraud system 201, by Anastasiia Voitova, Cossack Labs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Curious to learn details?&lt;/p&gt;

&lt;p&gt;Dive into the full video‚Äîto learn more about cryptography, cloud storage security, API protection, anti-fraud system, etc.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rj5zbIleekA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Sounds too complicated as for protecting =^..^= cat-ears ML model?&lt;/p&gt;

&lt;p&gt;Well, imagine a financial analytics ML model instead. We built specific ML-protection technologies several times, as it was exciting every time.&lt;/p&gt;




&lt;p&gt;Say hi to &lt;a href="https://twitter.com/vixentael"&gt;@vixentael&lt;/a&gt; and follow &lt;a class="mentioned-user" href="https://dev.to/cossacklabs"&gt;@cossacklabs&lt;/a&gt;
 for data security updates on &lt;a href="https://twitter.com/cossacklabs"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCQbAyrwHKJ8QRDTOHs90O0g"&gt;YouTube&lt;/a&gt;, &lt;a href="https://github.com/cossacklabs"&gt;Linkedin&lt;/a&gt;, and our &lt;a href="https://www.cossacklabs.com/"&gt;website&lt;/a&gt;. üëãüß°üîê&lt;/p&gt;

</description>
      <category>security</category>
      <category>cryptography</category>
      <category>riskmanagement</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>5 Best Free Email Marketing Tools List</title>
      <author>Bhavyashah</author>
      <pubDate>Mon, 25 Oct 2021 15:58:37 +0000</pubDate>
      <link>https://dev.to/bhavyashah/5-best-free-email-marketing-tools-list-4pb1</link>
      <guid>https://dev.to/bhavyashah/5-best-free-email-marketing-tools-list-4pb1</guid>
      <description>&lt;p&gt;Email marketing is a highly effective way to promote your business or online project. It‚Äôs also a very cost-effective means of promoting your website. So it‚Äôs no wonder that &lt;a href="https://www.blogtriggers.com/2021/06/create-email-newsletter-widget-in-blogger.html"&gt;email newsletter&lt;/a&gt; has become a common part of a large number of businesses strategies in recent years.&lt;/p&gt;

&lt;p&gt;There are numerous tools that can help you with your email marketing. There are free tools and paid tools. Here is a list of 5 Free email marketing tools to help you with your email campaigns.&lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://mailchimp.com/"&gt;MailChimp&lt;/a&gt;&lt;br&gt;
2) &lt;a href="https://www.mailmunch.com/"&gt;MailMunch&lt;/a&gt;&lt;br&gt;
3) &lt;a href="https://www.mailerlite.com/"&gt;Mailerlite&lt;/a&gt;&lt;br&gt;
4) &lt;a href="https://www.hubspot.com/"&gt;Hubspot&lt;/a&gt;&lt;br&gt;
5) &lt;a href="https://convertkit.com/"&gt;ConvertKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For More Stuff you can also See this &lt;a href="https://in.pinterest.com/blogtriggers/"&gt;website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tools</category>
    </item>
    <item>
      <title>Ddosify : High-performance load testing tool</title>
      <author>NaveenKumar Namachivayam ‚ö°</author>
      <pubDate>Mon, 25 Oct 2021 15:56:12 +0000</pubDate>
      <link>https://dev.to/qainsights/ddosify-high-performance-load-testing-tool-56d6</link>
      <guid>https://dev.to/qainsights/ddosify-high-performance-load-testing-tool-56d6</guid>
      <description>&lt;p&gt;There are over &lt;a href="https://github.com/QAInsights/Performance-Testing-Tools" rel="noreferrer noopener"&gt;50+ tools and solutions&lt;/a&gt; available in the market for performance testing your application and services. Now it is time to check out Ddosify, high-performance load testing tool which offers free and commercial features to test web applications and services over HTTP(S), HTTP/2, and other protocols are on their way. In this blog article, let us deep-dive into Ddosify tool and see whether it satisfies a typical performance engineer or not.&lt;/p&gt;

&lt;p&gt;Before we see Ddosify, let us try to understand the name of the tool. Ddosify contains &lt;code&gt;Ddos&lt;/code&gt; term. DDoS stands for Distributed Denial of Services. Below is the Wikipedia entry for Denial of Service:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In computing, a denial-of-service attack is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An attacker targets a machine and tries to disrupt its services. The term &lt;em&gt;distributed &lt;/em&gt;stands for &lt;em&gt;multiple sources. &lt;/em&gt;Instead of attacking a system from one source, attacker uses multiple sources.&lt;/p&gt;

&lt;p&gt;If you try to fit the &lt;em&gt;DDoS &lt;/em&gt;capabilities for good intent, you will get &lt;code&gt;Ddosify&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;What is Ddosify?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ddosify/ddosify" rel="noreferrer noopener"&gt;Ddosify&lt;/a&gt; is a high-performance load testing tool written in Golang. It comes in two flavors: open-source and commercial. &lt;/p&gt;

&lt;p&gt;It supports HTTP(S), HTTP/2 protocols (as of now); other protocols are on the way.&lt;/p&gt;

&lt;p&gt;JSON support for creating scenarios.&lt;/p&gt;

&lt;p&gt;Supports various workload models.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;As Ddosify is Golang based, the prerequisite is to install the latest and stable version of Golang if you want to build from the source, else you can download the binaries to get started. Head to https://golang.org/dl/ to install the Golang.&lt;/p&gt;

&lt;p&gt;To install Ddosify, you can leverage Docker or install it from source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it --rm ddosify/ddosify
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;go install -v go.ddosify.com/ddosify@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After successful installation, you can verify Ddosify by issuing the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ddosify -version&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Quick Start&lt;/h2&gt;

&lt;p&gt;Let us start a quick load testing, targeting the demo app. I am running a sample Jetty app locally on the port 8080. To begin the testing using Ddosify, you can issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ddosify -t http://localhost:8080/test/hello&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command sends 100 requests in 10 seconds. Below is the output. During the test, Ddosify displays the status runtime. Once the test is done, it will display the results with DNS, Connection, Request Write, Server Processing, Response Read time and Total time in seconds.&lt;/p&gt;

&lt;p&gt;To terminate the test, you can press &lt;code&gt;Ctrl + C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqMwTg3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-4-1024x651.png" alt="Ddosify : High-performance load testing tool"&gt;&lt;/a&gt;Ddosify : High-performance load testing tool&lt;/p&gt;

&lt;h2&gt;Scenario Design&lt;/h2&gt;

&lt;p&gt;Now let us design a quick scenario to test the demo app in JSON. Copy and paste the below JSON and save it as &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To start the test, issue &lt;code&gt;ddosify -config .\config.json&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "request_count": 20,
  "load_type": "linear",
  "duration": 5,
  "output": "stdout",
  "steps": [
    {
      "id": 1,
      "url": "http://localhost:8080/test/session/",
      "protocol": "http",
      "method": "POST",
      "headers": {
        "ContenType": "application/xml",
        "header1": "header2"
      },
      "payload": "Name=test&amp;amp;Value=test&amp;amp;Action=Set",
      "timeout": 3,      
      "others": {
        "keep-alive": true,
        "disableCompression": false,
        "h2": true,
        "disable-redirect": true
      }
    }    
  ]
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above scenario throws 20 requests (iterates) over the period of 5 seconds. Below is the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fVB8E9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-5-1024x568.png" alt="Ddosify : High-performance load testing tool"&gt;&lt;/a&gt;Ddosify : High-performance load testing tool&lt;/p&gt;

&lt;p&gt;Below are the various flags available for Ddosify at this time of writing. &lt;/p&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;br&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;br&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Required?&lt;/th&gt;
&lt;br&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;br&gt;
&lt;tbody&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Target website URL. Example:¬†&lt;a href="https://ddosify.com/"&gt;&lt;/a&gt;&lt;a href="https://ddosify.com"&gt;https://ddosify.com&lt;/a&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Total request count&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Test duration in seconds.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Protocol of the request. Supported protocols are¬†&lt;em&gt;HTTP, HTTPS&lt;/em&gt;. HTTP/2 support is only available by using a config file as described. More protocols will be added.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;HTTPS&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-m&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Request method. Available methods for HTTP(s) are¬†&lt;em&gt;GET, POST, PUT, DELETE, UPDATE, PATCH&lt;/em&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-b&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;The payload of the network packet. AKA body for the HTTP.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Basic authentication. Usage:¬†&lt;code&gt;-a username:password&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Headers of the request. You can provide multiple headers with multiple¬†&lt;code&gt;-h&lt;/code&gt;¬†flag.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-T&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Timeout of the request in seconds.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-P&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Proxy address as host:port.¬†&lt;code&gt;-P &lt;a href="http://user:pass@proxy_host.com:port"&gt;http://user:pass@proxy_host.com:port&lt;/a&gt;'&lt;/code&gt;&lt;br&gt;
&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Test result output destination. Other output types will be added.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;a href="https://github.com/ddosify/ddosify#load-types"&gt;Type&lt;/a&gt;¬†of the load test. Ddosify supports 3 load types.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;linear&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-config&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
&lt;a href="https://github.com/ddosify/ddosify#config-file"&gt;Config File&lt;/a&gt;¬†of the load test.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;code&gt;-version&lt;/code&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;Prints version, git commit, built date (utc), go information and quit&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/tbody&gt;
&lt;br&gt;
&lt;/table&gt;&lt;/div&gt;
Ddosify Flags


&lt;h2&gt;Workload Models&lt;/h2&gt;

&lt;p&gt;At this moment, Ddosify supports three workload models: Linear, Incremental, and Waved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linear &lt;/strong&gt;helps to inject the load consistently over the period of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incremental &lt;/strong&gt;injects the load gradually increasing.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;wave &lt;/strong&gt;pattern injects the load like peaks and valleys. &lt;/p&gt;

&lt;h2&gt;How many requests you can send from your system?&lt;/h2&gt;

&lt;p&gt;To determine, how many requests you can generate on the system, purely depends on the CPU, memory, and other parameters. You need to run benchmark tests and conclude your findings.&lt;/p&gt;

&lt;p&gt;I have two cores with 16 GB RAM. Golang is based on a lightweight thread managed by Go runtime called goroutines. Golang has better concurrency than other languages. You can easily spin up hundreds of threads using minimal resources. &lt;/p&gt;

&lt;p&gt;I executed a test with 10000 requests. As you see, the load is proportional to the time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0cspo1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-6-1024x779.png" alt="High Load Test"&gt;&lt;/a&gt;High Load Test&lt;/p&gt;

&lt;p&gt;When I injected with 10000000, I observed high CPU and memory on ddosify.exe and the test took a long time to complete. I have to terminate the exe file. It is not DDosify issue, it is my system configuration. I have an under-powered config which cannot be useful for running very high load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/10/image-8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otJlTPWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/10/image-8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overall&lt;/h2&gt;

&lt;p&gt;Ddosify might be a good fit if you want to run a very high load quickly with minimal configuration. It is still in the very early stages, and a lot of features are missing (parameterization, logical actions, scripting to name a few). The commercial version is yet to be released.; I am on the waiting list. I hope Ddosify team will develop the features which will satisfy typical performance engineers eventually. I urge you to try Ddosify to ddosify your app. &lt;/p&gt;

</description>
      <category>performance</category>
      <category>testing</category>
      <category>webperf</category>
      <category>go</category>
    </item>
    <item>
      <title>Authentication based on clean architecture</title>
      <author>John Piedrahita</author>
      <pubDate>Mon, 25 Oct 2021 15:35:03 +0000</pubDate>
      <link>https://dev.to/japhernandez/authentication-based-on-clean-architecture-1n74</link>
      <guid>https://dev.to/japhernandez/authentication-based-on-clean-architecture-1n74</guid>
      <description>&lt;h4&gt;
  &lt;a href="#first-delivery"&gt;
  &lt;/a&gt;
  &lt;em&gt;First delivery...&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;In this new installment I share with you several use cases for authenticating to an API, with the @clean/scaffold package.&lt;/p&gt;

&lt;p&gt;Use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user may be able to register.&lt;/li&gt;
&lt;li&gt;A user can log in to the system through jwt authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We install the package globally on our pc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g @tsclean/scaffold
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:project --name=authentication
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the entity with the corresponding attributes, in this case we are going to store a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:entity --name=user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/domain/models/user.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the interface that will communicate the domain layer with the infrastructure layer. This interface will contain the use case.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The interfaces when compiling the code to javascript are lost, for this reason to be able to apply the principle of Inversion of Dependencies, we must make reference in the communication of the components by means of a constant.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:interface --name=add-user --path=models
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/domain/models/gateways/add-user-repository.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the service that is going to have all the logic to store the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:service --name=add-user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interface to communicate the service with external layers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/use-cases/add-user-service.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Exist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the business logic in the service, this involves applying some business rules.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/use-cases/impl/add-user-service-impl.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the basic logic for the service to store the user, but we must check that the email is unique and create a hash for the password, so we get closer to a real world application.&lt;/p&gt;

&lt;p&gt;We must create two interfaces for this purpose, one for the email validation and the other to create the password hash.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/models/gateways/check-email-repository.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/domain/models/gateways/hash-repository.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the interfaces have been created to handle some of the business rules, we implement the interfaces in the service, passing them as a dependency in the constructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/domain/use-cases/impl/add-user-service-impl.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/check-email-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/hash-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;checkEmailRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userExist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkEmailRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userExist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hashPassword&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the adapter in infrastructure layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:adapter-orm --name=user --orm=mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must configure in the .env the url that you will use in the connection with mongoose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: An update has been made in the plugin to give a management to the providers generating a single file, in this we include all the providers that are being created and by means of the spread operator we include them in the main container of the application so that the dependencies are solved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/adapters/orm/mongoose/models/user.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserModel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserModelSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/adapters/orm/mongoose/user-mongoose-repository-adapter.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserModelSchema&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/adapters/orm/mongoose/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/check-email-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IAddUserRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// We create this function to manage the entity that exists in the domain.&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;UserModelSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;checkEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ICheckEmailRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;UserModelSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we create the adapter of an external library to create the hash of the password, for this we use bcrypt, where we make the implementation of the interface, decoupling completely the components.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/adapters/bcrypt-adapter.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bcrypt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IHashRepository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/hash-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BcryptAdapter&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IHashRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/driven-adapters/providers/index.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BcryptAdapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/adapters/bcrypt-adapter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/adapters/orm/mongoose/user-mongoose-repository-adapter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/impl/add-user-service-impl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/add-user-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/check-email-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/gateways/hash-repository&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adapters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BcryptAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HASH_REPOSITORY&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_REPOSITORY&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserMongooseRepositoryAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CHECK_EMAIL_REPOSITORY&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;classAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserServiceImpl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the controller as an entry point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scaffold create:controller --name=add-user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/entry-points/api/add-user-controller.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/v1/add-user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserController&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are already validating in the use case that the email is unique, but it returns only a boolean value, we must handle this exception at the entry point, in this case the controller, in addition we validate that the email has the correct format and the body of the request does not bring empty fields.&lt;/p&gt;

&lt;p&gt;To achieve this we create our own helper or we make use of an external library, if you make use of a library you must create the corresponding adapter for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/helpers/validate-fields.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9_&lt;/span&gt;&lt;span class="se"&gt;\.\-])&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\@(([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;\-])&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.)&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]{2,4})&lt;/span&gt;&lt;span class="sr"&gt;+$/&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ValidateFields&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;fieldsValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFieldEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; field is required`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;REGEX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is invalid`&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFieldEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;isFieldEmpty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/infrastructure/entry-points/api/add-user-controller.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/models/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/domain/use-cases/add-user-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/helpers/validate-fields&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/v1/add-user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AddUserController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ADD_USER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addUserController&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AddUserParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IAddUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exist&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ValidateFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldsValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUserService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email is already in use&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create an index file to export all the controllers to the container.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/infrastructure/entry-points/api/index.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AddUserController&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/entry-points/api/add-user-controller&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controllers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;AddUserController&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we configure all the components in the main container&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/application/app.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/entry-points/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/infrastructure/driven-adapters/providers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code looks much cleaner with the update that was made.&lt;/p&gt;

&lt;p&gt;Previously when creating the adapter, the index.ts file that starts the application was updated with the necessary configuration to make the connection with the database manager.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/index.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module-alias/register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;helmet&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;StartProjectServer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tsclean/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AppContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/application/app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/application/config/environment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DB Mongo connected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;StartProjectServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helmet&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running on port: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#next-second-delivery"&gt;
  &lt;/a&gt;
  &lt;em&gt;next second delivery...&lt;/em&gt;
&lt;/h4&gt;

</description>
    </item>
    <item>
      <title>Hosting Website on Firebase</title>
      <author>Krutik Raut</author>
      <pubDate>Mon, 25 Oct 2021 15:34:00 +0000</pubDate>
      <link>https://dev.to/reboot13_dev/hosting-website-on-firebase-5ged</link>
      <guid>https://dev.to/reboot13_dev/hosting-website-on-firebase-5ged</guid>
      <description>&lt;p&gt;This instruction is for making newbies work easy so that they can follow exactly the same steps I am giving below&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder name &lt;strong&gt;&lt;em&gt;website&lt;/em&gt;&lt;/strong&gt; on desktop&lt;/li&gt;
&lt;li&gt;Create another folder within the website folder name it as &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Add your HTML/CSS/JS and images files to the &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure the main page of your website is named as an &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;Firebase hosting does not support any server-side scripts such as Ruby, PHP, Python, or anything else that is processing your files before output. That would require an application engine such as Google App Engine, Heroku, or similar. The hosting service is a static website hosting service.&lt;/p&gt;

&lt;p&gt;Before starting install node js on your device.&lt;/p&gt;

&lt;p&gt;Link:  &lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once you are done with installing &lt;strong&gt;Node JS&lt;/strong&gt; Follow the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Go to &lt;a href="https://firebase.google.com/"&gt;https://firebase.google.com/&lt;/a&gt; and click on &lt;strong&gt;Get started.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
Click on &lt;strong&gt;Add Project&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
Enter your Project name and continue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reboot13-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
Enable google analytics on your project if you want to track users and click on continue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Firebase will create your project within a few seconds&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Click on continue.&lt;/li&gt;
&lt;/ul&gt;



&lt;br&gt;
Lets Install Firebase CLI on our device

&lt;ul&gt;
&lt;li&gt;
Now Open your terminal (Command Prompt).
-
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g firebase-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This will install firebase tools globally on your device.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This will redirect you to the browser&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Now select the Gmail account in which you have created the Project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Allow access to Firebase and get back to the terminal.&lt;/p&gt;

&lt;p&gt;Once you are logged in change the directory in the terminal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd C:\Users\common\Desktop\website

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;You're about to initialize a Firebase project in this directory:&lt;/p&gt;

&lt;p&gt;C:\Users\common\Desktop\website? &lt;/p&gt;

&lt;p&gt;Are you ready to proceed? (Y/n)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;y&lt;/strong&gt; and press enter&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scroll down user navigation keys (arrow keys) and press space to select &lt;/p&gt;

&lt;p&gt;(*) Hosting: Configure and deploy Firebase Hosting sites&lt;/p&gt;

&lt;p&gt;(*)means it's selected.&lt;/p&gt;

&lt;p&gt;Press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Please select an option: (Use arrow keys)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select &amp;gt; Use an existing project and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select a default Firebase project for this directory: (Use arrow keys)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select your project name and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select a default Firebase project for this directory: (Use arrow keys)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we named our folder public&lt;/p&gt;

&lt;p&gt;type &lt;strong&gt;public&lt;/strong&gt; and press enter&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Configure as a single-page app (rewrite all URLs to /index.html)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? Set up automatic builds and deploys with GitHub? (y/N)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;File public/404.html already exists. Overwrite? (y/N)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;? File public/index.html already exists. Overwrite? (y/N)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;p&gt;Don't overwrite any file just type &lt;strong&gt;n&lt;/strong&gt; and press enter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Firebase initialization complete!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
Now Type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Deploy complete!&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Done you successfully hosted your website on Firebase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;project name&amp;gt;.web.app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the one I hosted &lt;a href="https://reboot13-dev.web.app"&gt;https://reboot13-dev.web.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Youtube Video Tutorial: &lt;a href="https://www.youtube.com/watch?v=KQs7adkKNHk"&gt;https://www.youtube.com/watch?v=KQs7adkKNHk&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reboot13"&gt;
  &lt;/a&gt;
  Reboot13
&lt;/h3&gt;

&lt;p&gt;Youtube: &lt;a href="https://youtube.com/krutikraut"&gt;https://youtube.com/krutikraut&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/reboot13-git"&gt;https://github.com/reboot13-git&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>firebase</category>
      <category>hosting</category>
      <category>website</category>
    </item>
    <item>
      <title>Localize your React.js App the simplest way you've ever seen</title>
      <author>Jan Cizmar</author>
      <pubDate>Mon, 25 Oct 2021 15:29:32 +0000</pubDate>
      <link>https://dev.to/tolgee_i18n/localize-your-reactjs-app-the-simplest-way-youve-ever-seen-ch5</link>
      <guid>https://dev.to/tolgee_i18n/localize-your-reactjs-app-the-simplest-way-youve-ever-seen-ch5</guid>
      <description>&lt;p&gt;Translating an App to multiple languages (localization) is tricky part of many applications. Tolgee is simplifying the localization process and saves developer's time üë®‚Äçüíªüë©üèª‚Äçüíª by removing repetitive tasks üîÅ ‚ùå. Saving time? That's what I want. Show me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tolgee"&gt;
  &lt;/a&gt;
  What is Tolgee
&lt;/h2&gt;

&lt;p&gt;Tolgee is &lt;strong&gt;open-source&lt;/strong&gt; tool combining localization platform and SDKs to provide simple way to translate the web applications for both developers and translators. üë®‚Äçüíªüë©üèª‚Äçüíªüßñüèºüë©üèª‚Äçüíªüßñüèº&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-context-translating"&gt;
  &lt;/a&gt;
  In context translating üìñ
&lt;/h2&gt;

&lt;p&gt;As a developer of localized application, you probably have to modify localization data every time you need to change a text. So you have to open the file, add or find the key to modify, save it and check whether everything was changed correctly in the app. With Tolgee you can just &lt;code&gt;ALT + click&lt;/code&gt; the actual translated text in your app and üí•boomüí• translation dialog appears and you are able to translate it right away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeIK8NH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43135o8bo4w65qw868kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeIK8NH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43135o8bo4w65qw868kc.png" alt="Tolgee - in context translation dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-screenshot-generation"&gt;
  &lt;/a&gt;
  Automatic Screenshot Generation üì∏
&lt;/h2&gt;

&lt;p&gt;Another tricky part of localization is providing context üìñ to translators. Only exporting the keys and translations in source language is not always enough. Tolgee enables you to take and upload screenshot directly in the in-context translation dialog. So no more manual taking and uploading screenshots.üåÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#localization-platform-included"&gt;
  &lt;/a&gt;
  Localization platform included ‚úÖ
&lt;/h2&gt;

&lt;p&gt;Tolgee is also localization platform, where you can manage all your localization strings üìö. So you can provide access to translators and they can translate the texts there. If you uploaded screenshots before, they know the context of the translations perfectly so they can produce perfect results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isnt-that-hard-to-integrate-no-its-not"&gt;
  &lt;/a&gt;
  Isn't that hard to integrate? No it's not!
&lt;/h2&gt;

&lt;p&gt;To get started, you can simply follow the integration guides provided in the platform. Which is the simplest way to get started. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login to &lt;a href="https://app.tolgee.io"&gt;Tolgee Cloud&lt;/a&gt; or use your self hosted &lt;a href="https://tolgee.io/docs/server_and_web_app/self_hosting/running_with_docker"&gt;Tolgee instance&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new project by clicking &lt;strong&gt;&lt;code&gt;Add&lt;/code&gt; button in the top right&lt;/strong&gt;. And filling the project name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvNIzvCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3993x5vuqmrfqbvz6lov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvNIzvCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3993x5vuqmrfqbvz6lov.png" alt="Add button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Optionally, you can add multiple languages to translate your app into.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Integrate&lt;/code&gt; from side menu, choose &lt;strong&gt;React&lt;/strong&gt; and generate an API key with &lt;strong&gt;all scopes checked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR0-yh8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwnhivvi8fr48u16iy4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR0-yh8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwnhivvi8fr48u16iy4a.png" alt="Add button"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Success! üéâ Now you just have to follow the integration guide.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-integrate-it-into-cra-app"&gt;
  &lt;/a&gt;
  Let's integrate it into CRA App
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate brand new CRA App and open it your favorite editor&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app tolgee-hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Tolgee packages ‚¨áÔ∏è&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @tolgee/react @tolgee/ui --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Tolgee properties to you development &lt;code&gt;.env&lt;/code&gt; file &lt;code&gt;env.development.local&lt;/code&gt; by &lt;strong&gt;copying it&lt;/strong&gt; from the integration guide&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_TOLGEE_API_URL=https://app.tolgee.io
REACT_APP_TOLGEE_API_KEY=&amp;lt;your API key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wrap your App component in &lt;code&gt;index.js&lt;/code&gt; with &lt;code&gt;TolgeeProvider&lt;/code&gt; component. Again, you can copy it from the integration guide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;code&gt;App.js&lt;/code&gt; and replace all the crap with simple "Hello world!" message.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrap the "Hello world!" with &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; component and add keyName prop.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="na"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello_world"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let's run the App in the browser and see the magic! ü™Ñ Hold your &lt;em&gt;ALT&lt;/em&gt; key and move your mouse over the text. It should be highlighted. When you click it, dialog opens and you're able to edit the text ‚úèÔ∏è or generate screenshots. üì∑&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnDpNpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz4o6exaqanlxcm6ruft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnDpNpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz4o6exaqanlxcm6ruft.png" alt="In-context translation of hello_world key"&gt;&lt;/a&gt;&lt;br&gt;
After you hit the update button, your &lt;code&gt;Hello World!&lt;/code&gt; text will be immediately changed to the new value!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zypGE1kk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqd1z1v4ubq0oxfuhmz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zypGE1kk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqd1z1v4ubq0oxfuhmz1.png" alt="The result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#congratulations-youre-done"&gt;
  &lt;/a&gt;
  Congratulations! You're done! üéâüéâüéâ
&lt;/h2&gt;

&lt;p&gt;You can find the resulting code in &lt;a href="https://github.com/JanCizmar/tolgee-react-hello-world"&gt;this GitHub repo&lt;/a&gt;, &lt;strong&gt;but you have to add your &lt;code&gt;.env.development.local&lt;/code&gt; file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you are able to translate your Applications with Tolgee. To learn more about Tolgee or to find out how to translate more complicated cases, &lt;a href="https://tolgee.io"&gt;visit our docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;Tolgee is open-source tool simplifying the process of web based application. It has this features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's open-source&lt;/li&gt;
&lt;li&gt;You can translate in the context of your App&lt;/li&gt;
&lt;li&gt;You can generate screenshots automatically&lt;/li&gt;
&lt;li&gt;You should use it and save time!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üôèüôèüôè If you like what we do, please star our GitHub projects. üôèüôèüôè&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tolgee/server"&gt;Tolgee Server&lt;/a&gt; ‚≠ê&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tolgee/tolgee-js"&gt;Tolgee JS&lt;/a&gt; ‚≠ê&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://tolgee.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkILodBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq3xtc3ikjzpbkx3it93.jpg" alt="Mouse"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Greater Than &amp; Greater Than or Equal To ( $gt &amp; $gte ) Operators in MongoDB | Theory with Hands-on</title>
      <author>Srajan Gupta</author>
      <pubDate>Mon, 25 Oct 2021 15:26:36 +0000</pubDate>
      <link>https://dev.to/srajangupta__/greater-than-greater-than-or-equal-to-gt-gte-operators-in-mongodb-theory-with-hands-on-1pl7</link>
      <guid>https://dev.to/srajangupta__/greater-than-greater-than-or-equal-to-gt-gte-operators-in-mongodb-theory-with-hands-on-1pl7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BTeGXtAxVvE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial is all about the Greater Than &amp;amp; Greater Than or Equal To Operators in MongoDB.&lt;br&gt;
This tutorial includes both theoretical and hands-on explanation.&lt;/p&gt;

&lt;p&gt;Project Enquiries: &lt;a href="https://www.srajangupta.com/"&gt;https://www.srajangupta.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>mongoose</category>
      <category>nosql</category>
      <category>node</category>
    </item>
    <item>
      <title>Yarn 3.1 üéÉüëª Corepack, ESM, pnpm, Optional Packages ...</title>
      <author>Ma√´l Nison</author>
      <pubDate>Mon, 25 Oct 2021 15:05:15 +0000</pubDate>
      <link>https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak</link>
      <guid>https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak</guid>
      <description>&lt;p&gt;Welcome to the release notes for &lt;strong&gt;Yarn 3.1&lt;/strong&gt;! We're quite excited by this release, as it brings various improvements that we've all been looking forward to. Let's dig into that!&lt;/p&gt;

&lt;p&gt;As always, keep in mind those are only the highlights, the &lt;a href="https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md"&gt;full changelog&lt;/a&gt; is much more comprehensive. And if you just happen to love reading our release posts, here are the past entries üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07"&gt;Yarn 3.0 üöÄü§ñ Performances, ESBuild, Better Patches, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-4-log-filters-audits-better-warnings-49io"&gt;Yarn 2.4 üéÑüéÅ Log Filters, Audits, Better Warnings, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-3-info-command-detailed-options-nohoist-409h"&gt;Yarn 2.3 üç¶‚ú® Info Command, Detailed Options, Nohoist, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-2-dedupe-faster-lighter-ha5"&gt;Yarn 2.2 üöÖüåü Dedupe, Faster, Lighter, ...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arcanis/yarn-2-1-git-workspaces-focused-installs-loose-mode-live-playground-4kfc"&gt;Yarn 2.1 üê±‚Äçüèç Git Workspaces, Focused Installs, Loose Mode, ...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sponsoring"&gt;
  &lt;/a&gt;
  Sponsoring
&lt;/h2&gt;

&lt;p&gt;The Yarn org needs your help to make our work more sustainable! Please take a look at our &lt;a href="https://opencollective.com/yarnpkg"&gt;OpenCollective&lt;/a&gt; and &lt;a href="https://github.com/sponsors/yarnpkg"&gt;GitHub Sponsors&lt;/a&gt; pages for more details üòä&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#nodejs-corepack-integration"&gt;Node.js Corepack Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#esm-support"&gt;ESM Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-install-mode-raw-pnpm-endraw-"&gt;New Install Mode: &lt;code&gt;pnpm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conditional-packages"&gt;Conditional Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smart-changeset-filters"&gt;Smart Changeset Filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-workspace-syntax-raw-workspace-endraw-"&gt;New Workspace Syntax: &lt;code&gt;workspace:^&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  Improvements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-corepack-integration"&gt;
  &lt;/a&gt;
  Node.js Corepack Integration
&lt;/h3&gt;

&lt;p&gt;Did you know that Yarn now ships with Node? This is done via the Node.js &lt;a href="https://nodejs.org/api/corepack.html"&gt;Corepack project&lt;/a&gt;, which includes both the Yarn and pnpm binaries as shims. By adding the &lt;code&gt;packageManager&lt;/code&gt; field to your &lt;code&gt;package.json&lt;/code&gt;, you can enforce the use of a specific package manager &amp;amp; package manager version in a completely transparent way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packageManager"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yarn@3.1.0"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that Corepack is available starting from Node.js 16.9, but is currently opt-in. Don't forget to run &lt;code&gt;corepack enable&lt;/code&gt; a single time to make sure the shims are globally installed!&lt;/p&gt;

&lt;p&gt;We also improved in 3.1 the &lt;code&gt;init&lt;/code&gt; command to properly support Corepack: running &lt;code&gt;yarn init -2&lt;/code&gt; will now automatically setup a Yarn Modern project, setting its &lt;code&gt;packageManager&lt;/code&gt; field as required üí´&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esm-support"&gt;
  &lt;/a&gt;
  ESM Support
&lt;/h3&gt;

&lt;p&gt;ESM has always been supported when using the &lt;a href="https://yarnpkg.com/configuration/yarnrc#nodeLinker"&gt;&lt;code&gt;node_modules&lt;/code&gt; linker&lt;/a&gt;, since it's the same old install strategy that Node has always supported. However, with PnP taking ownership of the resolution pipeline, compatibility with ESM wasn't a given and had to be implemented using the &lt;a href="https://nodejs.org/dist/latest-v9.x/docs/api/esm.html#esm_loader_hooks"&gt;Loader Hook API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While the Loader Hook API isn't entirely stable yet, a large amount of work has been made lately and our team has been able to produce an initial experimental support for ESM modules. It should be enabled automatically if we detect that one of the packages in your dependency tree contains a &lt;code&gt;"type": "module"&lt;/code&gt; field, but you can enable or disable it manually through your settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;pnpEnableEsmLoader&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Being experimental, it's possible that some bugs may arise or that new Node releases bring some breaking changes around the API. Be sure to report issues on our &lt;a href="https://github.com/yarnpkg/berry"&gt;bug tracker&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-install-mode-raw-pnpm-endraw-"&gt;
  &lt;/a&gt;
  New Install Mode: &lt;code&gt;pnpm&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://pnpm.io/"&gt;pnpm package manager&lt;/a&gt; was one of the first tools to advocate for using symlinks when installing packages within the &lt;code&gt;node_modules&lt;/code&gt; folder. While we went another way with PnP, we decided that the implementation cost was low enough that it would be worth adding support for this symlink-based install strategy as well.&lt;/p&gt;

&lt;p&gt;Starting from Yarn 3.1, you can try out symlink-based installs by adding the following setting to your &lt;code&gt;.yarnrc.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;nodeLinker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pnpm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conditional-packages"&gt;
  &lt;/a&gt;
  Conditional Packages
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://esbuild.github.io/"&gt;Esbuild&lt;/a&gt; and &lt;a href="https://swc.rs/"&gt;swc&lt;/a&gt; are two native packages that gained a lot of attention lately thanks to their impressive performances over their competitors. They recently revamped how their packages are built to avoid complex postinstall scripts, but did so in a way that was less efficient than before for Yarn projects.&lt;/p&gt;

&lt;p&gt;Yarn 3.1 features a new optimization that kicks in when a package is listed as &lt;code&gt;optionalDependencies&lt;/code&gt; and lists &lt;code&gt;os&lt;/code&gt; and/or &lt;code&gt;cpu&lt;/code&gt; fields. When that happens, Yarn will skip fetching and installing those packages unless they match the current system parameters.&lt;/p&gt;

&lt;p&gt;In case you need to manually configure a strict set of package architectures to support (for example like in a zero-install case, where you want to read from an immutable set of packages), you can use the &lt;code&gt;supportedArchitectures&lt;/code&gt; setting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;supportedArchitectures&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;linux&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;darwin&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;x64&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;arm64&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#smart-changeset-filters"&gt;
  &lt;/a&gt;
  Smart Changeset Filters
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;yarn workspaces foreach&lt;/code&gt; and &lt;code&gt;yarn workspaces list&lt;/code&gt; commands now ships with brand new &lt;code&gt;--since&lt;/code&gt; flags. When set, those commands will only execute against the packages that changed when compared to the main branch (either &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;, depending on the branches in your repository).&lt;/p&gt;

&lt;p&gt;This can come in handy if you wish to only run builds in some specific workspaces, or just get a list of the workspaces which changed for scripting purposes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn workspaces foreach --since run eslint .
yarn workspaces list --since
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--since&lt;/code&gt; flag also accepts an optional argument (&lt;code&gt;--since=${commit-ish}&lt;/code&gt;) to manually define a source from which the changes should be derived. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-workspace-syntax-raw-workspace-endraw-"&gt;
  &lt;/a&gt;
  New Workspace Syntax: &lt;code&gt;workspace:^&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Workspaces supported a special syntax via &lt;code&gt;workspace:*&lt;/code&gt;, with those ranges being replaced at publish-time by exact ranges corresponding to the real version of the target workspace. However, if you wanted to use a caret instead of an exact range, you had to use the verbose &lt;code&gt;workspace:^x.y.z&lt;/code&gt; form, which Yarn updated repo-wide after each publish.&lt;/p&gt;

&lt;p&gt;Yarn now supports &lt;code&gt;workspace:^&lt;/code&gt; and &lt;code&gt;workspace:~&lt;/code&gt; as well, making it much easier to cross-reference workspaces within a monorepo where most packages are intended to be published, by preventing a good amount of the merge conflicts that used to happen after Yarn updated the verbose ranges.&lt;/p&gt;

&lt;p&gt;Additionally, as a special case, this syntax is now allowed in the &lt;code&gt;peerDependencies&lt;/code&gt; field as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@my/other-package"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workspace:^"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>npm</category>
      <category>node</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Position Absolute and Relative‚Ää ‚Äî The Simplest¬†Guide</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Mon, 25 Oct 2021 14:51:45 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/position-absolute-and-relative-the-simplest-guide-5169</link>
      <guid>https://dev.to/domagojvidovic/position-absolute-and-relative-the-simplest-guide-5169</guid>
      <description>&lt;p&gt;I remember the time when I was starting my Frontend journey.&lt;/p&gt;

&lt;p&gt;CSS caused a lot of headaches. Like most people, I assumed that it's easy. Then, I was annoyed when I couldn't get it working.&lt;/p&gt;

&lt;p&gt;My usual flow was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Detect a problem.&lt;/li&gt;
&lt;li&gt;Google it.&lt;/li&gt;
&lt;li&gt;Find a solution on StackOverflow.&lt;/li&gt;
&lt;li&gt;C/P it without any understanding.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Position absolute and relative were properties I often encountered. "What the heck are they?"&lt;/p&gt;

&lt;p&gt;They should be used far less often than you might use them, and when used properly, they are quite simple.&lt;/p&gt;

&lt;p&gt;Let's dive deeper into the topic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-are-position-absolute-and-relative%C2%A0related"&gt;
  &lt;/a&gt;
  How Are Position Absolute and Relative¬†Related?
&lt;/h2&gt;

&lt;p&gt;Usually, all elements follow the DOM flow.¬†&lt;/p&gt;

&lt;p&gt;But sometimes, you need to break that flow and tell an element exactly where to go.&lt;/p&gt;

&lt;p&gt;Let's say that I have this HTML page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HsvrL-cd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcwvzstgiyalh0bs3r76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsvrL-cd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcwvzstgiyalh0bs3r76.png" alt="HTML Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is quite simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bordered-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute-item"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;153&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;103&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;228&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bordered-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.absolute-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I want to absolutely position my &lt;code&gt;absolute-item&lt;/code&gt; right now and tell it exactly where to be. I want it to be always inside the &lt;code&gt;bordered-container&lt;/code&gt;; &lt;code&gt;10px&lt;/code&gt; away from the bottom, and &lt;code&gt;30px&lt;/code&gt; from the right.&lt;/p&gt;

&lt;p&gt;Let's add the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.absolute-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjZw8JyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8xx7nibv33eeavqaoji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjZw8JyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8xx7nibv33eeavqaoji.png" alt="Position absolute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's, obviously, not what we wanted. The square is positioned &lt;code&gt;10px&lt;/code&gt;/&lt;code&gt;30px&lt;/code&gt; away from the edge of a whole document, not the &lt;code&gt;bordered-container&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;That's why we need &lt;code&gt;position: relative;&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#its-not-black%C2%A0magic"&gt;
  &lt;/a&gt;
  It's Not Black¬†Magic
&lt;/h2&gt;

&lt;p&gt;Whenever you set &lt;code&gt;position: absolute;&lt;/code&gt; to an element, it must be positioned &lt;strong&gt;relative&lt;/strong&gt; to something.&lt;/p&gt;

&lt;p&gt;Your absolute element will look for the closest parent with &lt;code&gt;position: relative;&lt;/code&gt;, and position itself relative to it.&lt;/p&gt;

&lt;p&gt;If there are no elements like that, it will be positioned relative to the &lt;code&gt;body&lt;/code&gt; element. This happened in our previous case.&lt;/p&gt;

&lt;p&gt;To fix this, we simply need to add &lt;code&gt;position: relative;&lt;/code&gt; to our &lt;code&gt;bordered-container&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.bordered-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDE_Od2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ce14ftotzbqrn1y2hz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDE_Od2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ce14ftotzbqrn1y2hz5.png" alt="Absolutely positioned item"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep, it's that simple.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-the-heck-is%C2%A0zindex"&gt;
  &lt;/a&gt;
  What The Heck Is¬†Z-Index?
&lt;/h2&gt;

&lt;p&gt;When dealing with absolute positions, you might encounter on z-index, so it's worth mentioning.&lt;/p&gt;

&lt;p&gt;I'm sure that you've tried setting it to &lt;code&gt;9999&lt;/code&gt; but it still didn't work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt; is used when you have multiple absolute position elements.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;absolute positioned&lt;/strong&gt; element with the biggest &lt;code&gt;z-index&lt;/code&gt; will go on the top. The one with the lowest, on the bottom.¬†&lt;/p&gt;

&lt;p&gt;That's it.&lt;/p&gt;

&lt;p&gt;Let's keep it simple.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-downsides-of-position%C2%A0absolute"&gt;
  &lt;/a&gt;
  The Downsides Of Position¬†Absolute
&lt;/h2&gt;

&lt;p&gt;Absolutely positioned elements break the DOM flow.¬†&lt;/p&gt;

&lt;p&gt;They don't take any physical space on the document.&lt;/p&gt;

&lt;p&gt;That means that the elements above/below could overlap with, even if you don't want it.&lt;/p&gt;

&lt;p&gt;This can become tricky to maintain.¬†&lt;/p&gt;

&lt;p&gt;Our elements should be isolated, if we change one of them, we don't want to adjust everything else.&lt;/p&gt;

&lt;p&gt;That doesn't mean &lt;code&gt;position: absolute;&lt;/code&gt; is bad! It means that it has its own use cases and you need to know about them.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-to-use%C2%A0it"&gt;
  &lt;/a&gt;
  When To Use¬†It
&lt;/h2&gt;

&lt;p&gt;If you need to adjust the layout within a page or a component, you should avoid &lt;code&gt;position: absolute;&lt;/code&gt; in 99% of the cases. Opt-in for Flexbox or Grid instead.&lt;/p&gt;

&lt;p&gt;However, if you want to add a badge to your image, it's just perfect. You always want the badge to be on the top (or the edge) of the image, so that it seems like it's a part of an image.&lt;/p&gt;

&lt;p&gt;Or if you want to stack a few images/elements onto each other. There's no way other than &lt;code&gt;position: absolute;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's the ultimate guide: &lt;strong&gt;use absolute positioning only when there's no other way to achieve that&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Absolute positioning is powerful, and the Web wouldn't be able to look this way without it.&lt;/p&gt;

&lt;p&gt;If used properly, it's a charm.&lt;/p&gt;

&lt;p&gt;But those use cases are quite rare. If you use it often, you will make your app a hell to maintain.&lt;/p&gt;

&lt;p&gt;If you find a StackOverflow answer with &lt;code&gt;position: absolute;&lt;/code&gt;, try to skip it. Keep looking. Is there any other way to do it?&lt;/p&gt;

&lt;p&gt;If so, avoid the &lt;code&gt;absolute&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://domagojvidovic.com/post/position-absolute-relative-the-simplest-guide"&gt;This post was originally published on Dom's personal blog. Check out dat new amazing blog design there ‚ú®&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Page Object Pattern + Reusable Functions in Cypress</title>
      <author>ajdin.must</author>
      <pubDate>Mon, 25 Oct 2021 14:49:33 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/page-object-pattern-reusable-functions-in-cypress-35jj</link>
      <guid>https://dev.to/bornfightcompany/page-object-pattern-reusable-functions-in-cypress-35jj</guid>
      <description>&lt;h4&gt;
  &lt;a href="#if-you-have-ever-wished-to-have-more-structured-reusable-and-readable-automated-tests-you-should-have-started-with-the-page-object-pattern"&gt;
  &lt;/a&gt;
  If you have ever wished to have more structured, reusable, and readable automated tests, you should have started with the Page Object Pattern.
&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;&lt;br&gt;
&lt;b&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#page-object-pattern"&gt;
  &lt;/a&gt;
  Page Object Pattern
&lt;/h5&gt;

&lt;p&gt;Page Object Pattern is basically removing all the page information from your actual test and grouping them together considering their location on your web page. For example, you can take all the selectors that you have on the homepage of your web and put them in one class, give them more meaningful names and then call them in any of your tests ...&lt;/p&gt;

&lt;p&gt;Imagine your homepage went through a design and development modification that impacted your selectors to change, you would need to go through all of your tests and change the same selector in all the places. However, with the page object pattern, you change the selector only in one place - in the class that you have created for the homepage selectors. There, you saved yourself a lot of time and made sure that there won't be some forgotten, unchanged, and obsolete selectors in one of your tests.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#adding-more-of-reusability"&gt;
  &lt;/a&gt;
  Adding More of Reusability
&lt;/h4&gt;

&lt;p&gt;Nevertheless, you can make your tests even more structured, reusable, understandable, and easier to maintain, by adding custom commands and reusable functions to them. The same way I made a class for homepage selectors I also made a class for all the functions from the homepage, that are used all over the different tests. For example, if I had 5 different tests/test cases where a user fills out the same form, I wouldn't be needed to copy/paste Cypress code to every each of the tests but I'd reuse the already written functions.&lt;/p&gt;

&lt;p&gt;Example how my Cypress test would look like with the page object pattern and reusable functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe("Fill out user satisfaction form", function () {

    it("Check if the user can fill out the form", function () {
        cy.visitFormsPage();
        cy.userAcceptsTerms();
        cy.userFillsOutsTheForm();
        cy.formFilledOutCorrectlyAssert();
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;&lt;br&gt;
&lt;b&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#all-together-now"&gt;
  &lt;/a&gt;
  All together now
&lt;/h5&gt;

&lt;p&gt;Combining page object pattern and reusable functions gave me a whole new perspective of the tests. Not only are they easier to use and maintain, but they also look very neat and easier to understand for my other colleagues, even non-technical members of the team. In the beginning, you need to spend a bit more time on the setup but later on, you will see that the effort is paid off.&lt;/p&gt;

&lt;p&gt;Feel free to share with me some of your "reusability" secrets.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>cypress</category>
      <category>testing</category>
      <category>testautomation</category>
    </item>
    <item>
      <title>11 Apps Ideas to Develop for Restaurants and Food Business 2021</title>
      <author>Price List</author>
      <pubDate>Mon, 25 Oct 2021 14:48:54 +0000</pubDate>
      <link>https://dev.to/pricelist/11-apps-ideas-to-develop-for-restaurants-and-food-business-2021-2mgk</link>
      <guid>https://dev.to/pricelist/11-apps-ideas-to-develop-for-restaurants-and-food-business-2021-2mgk</guid>
      <description>&lt;p&gt;The industry related with food businesses is a dynamic and highly consumable area that is always evolving. Food businesses do not lose their attractiveness as long as they continue to provide standard food to their clients and are able to contact the appropriate clientele.&lt;/p&gt;

&lt;p&gt;When it comes to starting a food company startup, having a solid app concept that can keep up with current technological advancements and industry trends may be quite beneficial in keeping a healthy balance between demand and supply.&lt;/p&gt;

&lt;p&gt;A food company can never lose its appeal as long as it continues to give high-quality foods to its consumers and is able to reach the appropriate audience.&lt;/p&gt;

&lt;p&gt;A unique company idea that can adapt to the current technical advancements and market trends may play a significant part in balancing the demand and supply in the food industry when it comes to launching a food business startup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Pizza Delivery App Idea&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We all know that pizza is the most popular and mouth-watering cuisine on the planet. Typically, a pizza business will utilize this kind of application. Thus, without physically visiting the restaurant, customers may choose their favorite pizza, place an order, and pay for their purchase using a variety of payment ways.&lt;/p&gt;

&lt;p&gt;Restaurant operators may attract more clients by providing them with this kind of ordering app to use while eating in their establishment. Why? Customers are more comfortable purchasing pizza using an app since their favorite pizza is delivered to their doorway, and it is more dependable to purchase pizza through an app.&lt;/p&gt;

&lt;p&gt;The following choices are available if you have a food ordering app (such as a pizza ordering app) for delivery service: If you do not have the necessary resources, you may outsource this function to a third party.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Fast Food Delivery App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Statista estimates that the typical individual goes to the grocery store 1.6 times per week and spends about 60 hours buying food each year, according to the research.&lt;/p&gt;

&lt;p&gt;You may create a grocery shopping and delivery app that enables users to search for groceries delivery providers in their immediate vicinity. This may be accomplished with the use of technology such as RTLS (Real-Time Locating Systems), and they can get delivery at their doorstep.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Food Coupon &amp;amp; Deals Offering App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a well-known truth that customers usually look for discounts and &lt;a href="https://jobsintanzania.org/mcdonalds-menu-prices-in-canada/"&gt;specials menu prices&lt;/a&gt; before placing an order or booking a seat at a restaurant. In light of the above, you may develop Deals &amp;amp; Discount applications for your restaurant or for other businesses to use.&lt;/p&gt;

&lt;p&gt;In order to maintain and attract new consumers, you or your affiliated restaurants may offer current specials on food and their festive specialties on your website. The software assists you in identifying your most loyal clients and rewarding them in a way that encourages them to continue to return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Catering Booking Services App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another really viable food business app ideas is the development of a catering booking services app. If you currently own a catering company, you may use it to supplement your income. Alternatively, you may create a catering services marketplace application. Let's take a look at each of these possibilities.&lt;/p&gt;

&lt;p&gt;Consider the following scenario: you already operate a catering firm. Now, your clients may or may not be local citizens, depending on their location. If you don't have a mobile app, you'll miss out on consumers who can't come to your location but want to learn more about the numerous sorts of services you provide. Because of this, it is critical that you develop a mobile application for your catering booking services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. An App For Table Reservations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Who would want to lose one of their most valuable consumers during the weekend rush? There is no one. Right? The table reservation app concept is the finest one for your business since it can operate smoothly and cater to each and every customer in a professional manner. In comparison to your competition, this mobile app concept for your restaurant company would show your food ordering services in a composed and professional manner.&lt;/p&gt;

&lt;p&gt;Allocate time slots, table locations, dates, and preferred food orders for your users so that your service wins the time game and the consumer is happy with the luxurious care they get at your restaurant. The most advantageous aspect of designing a mobile application is that it streamlines numerous monotonous duties, allowing you as the company owner to explore additional business development opportunities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Food Donation App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This mobile app concept has the potential to function in two ways.&lt;/p&gt;

&lt;p&gt;The lack of storage space and utilization options at restaurants causes them to deal with leftover food on a daily basis, which must be thrown away eventually. With the use of a food donation app, restaurants may broadcast their inventory of leftovers on a daily basis and encourage NGOs and other similar groups to claim the food for the needy.&lt;/p&gt;

&lt;p&gt;That is one method of developing a food donation application. The other is to develop an app that allows users to schedule or purchase food for others while also encouraging them to pass the gift around.&lt;/p&gt;

&lt;p&gt;For example, anybody may use your app to purchase a cup of coffee and then purchase another with the direction that it be handed to a homeless person. Customers are served in an ethical manner, and less fortunate individuals are helped in the process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Baby Food Suggestions App Idea&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This kind of application is mostly utilized for newborns between the ages of 5 and 4 months and up to 2 years. It is possible for a restaurant to use this kind of app concept in order to increase the number of visits to their restaurant website or mobile app.&lt;/p&gt;

&lt;p&gt;Because this app offers the whole meal plan for a newborn, it may assist new parents in determining the correct meal for their child based on their child's age at the time of delivery. This app also provides various medicines for newborns, each with a detailed explanation on how to use them.&lt;/p&gt;

&lt;p&gt;In the event that you are the owner of a baby food business, this app will greatly assist you in increasing your profits by contacting more clients via an app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Food And Nutrition App For Gym Enthusiasts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fitness aficionados may use food and nutrition apps to keep track of their meals, as well as diet plans for both losing and gaining weight. If you own a food court catering to gym goers, this diet and nutrition app concept can help you expand your company and sales by reaching out to customers via an online meal ordering application.&lt;/p&gt;

&lt;p&gt;Consumers find it easier to use this sort of software since it provides them with food that corresponds to their diet plan, as well as a diet chart. This sort of software is divided into separate segments based on the needs of users, such as carbohydrate food, protein food, and so on. Furthermore, restaurants may utilize this app to increase the number of people that visit their establishment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Experimental Cooking App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A large number of customers request the chef's special or bring in an order that is a unique twist on their favorite dish. With the help of an experimental cookery application, you may avoid disappointing such guests while still leaving yourself enough time to produce what they need.&lt;/p&gt;

&lt;p&gt;This mobile app concept for restaurants has the potential to be very successful.&lt;/p&gt;

&lt;p&gt;Allow them to choose their favorite cuisines, preferred ingredients, and preferred cooking techniques ahead of time using the app on their smartphones. You may even set up a delivery service for such things if you so choose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Digital Menu App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Restaurants often utilize this sort of app to replace conventional menu cards and to display an online &lt;a href="https://jobsintanzania.org/mcdonalds-menu-prices-in-canada/"&gt;food menu and price list&lt;/a&gt;on a smart screen, complete with photographs and price information for customers.&lt;/p&gt;

&lt;p&gt;One of the most useful benefits of an Electronic Menu app is that it not only allows a restaurant to update its menu at any time, but it also improves the whole dine-out experience.&lt;/p&gt;

&lt;p&gt;As a result, customers get the whole menu on their screen, similar to a restaurant ordering app, and may choose the food item they want before placing their order.&lt;/p&gt;

&lt;p&gt;They may look at the photographs and descriptions of food items on the e-menu to have a better knowledge of the meal selection. In a nutshell, this app makes the meal ordering process more efficient and convenient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Food Reviews And Rating Ap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When a food ordering app is used, this sort of function is included since it assists your customers in selecting high-rated cuisine while also allowing owners to determine which service portions need work.&lt;/p&gt;

&lt;p&gt;Restaurants that provide marketplace food ordering and delivery services may benefit from this sort of feature since it allows them to obtain customer feedback on the service and food quality they provide.&lt;/p&gt;

&lt;p&gt;It is in the best interests of restaurant owners to keep their restaurants' reputations intact, and you should constantly solicit comments and reviews from customers about your services.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Loopple - Product Hunt Launch</title>
      <author>rarestoma</author>
      <pubDate>Mon, 25 Oct 2021 14:43:57 +0000</pubDate>
      <link>https://dev.to/rarestoma/loopple-product-hunt-launch-5eae</link>
      <guid>https://dev.to/rarestoma/loopple-product-hunt-launch-5eae</guid>
      <description>&lt;p&gt;Hi Coders,&lt;/p&gt;

&lt;p&gt;It‚Äôs been about 9 months since I started working on &lt;a href="https://www.loopple.com/"&gt;Loopple&lt;/a&gt;. During this time, a lot of changes have been made and I worked hard on offering the best possible dashboard builder experience.&lt;/p&gt;

&lt;p&gt;Loopple is a dashboard builder that helps developers to create beautiful admin panels in minutes. The editor will help you speed up the development process and will provide you with an easier way to prototype your dashboards layouts.&lt;/p&gt;

&lt;p&gt;Today I launched Loopple on Product Hunt and I am more than happy that is featured and #1.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loopple on Product Hunt: &lt;a href="https://www.producthunt.com/posts/loopple"&gt;https://www.producthunt.com/posts/loopple&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Loopple Website: &lt;a href="https://www.loopple.com/"&gt;https://www.loopple.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>product</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
