<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Django Cookie-Cutter - Simple Theme-able Generator</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 04 Sep 2021 09:50:47 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-cookie-cutter-simple-theme-able-generator-1b7p</link>
      <guid>https://dev.to/sm0ke/django-cookie-cutter-simple-theme-able-generator-1b7p</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presets &lt;strong&gt;&lt;a href="https://blog.appseed.us/django-cookie-cutter-generator/"&gt;Django Cookie-Cutter&lt;/a&gt;&lt;/strong&gt; as a simple way to build a &lt;strong&gt;Django&lt;/strong&gt; project with less manual coding and the possibility to customize a few things like UI design and database type (SQLite, MySql, or PostgreSQL). For newcomers, &lt;strong&gt;CookieCutter&lt;/strong&gt; is a command-line utility that creates projects from project templates and &lt;strong&gt;Django&lt;/strong&gt; is a leading web framework built by experts using a batteries-included concept.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;What's in the box&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the &lt;strong&gt;Django Cookie-Cutter&lt;/strong&gt; tool any developer can generate simple Django projects like the ones listed below with customized design and database backends plus minor things like project name and README instructions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(free) &lt;a href="https://appseed.us/product/django-soft-ui-dashboard"&gt;Django Soft UI&lt;/a&gt; - simple Django dashboard with Soft UI design&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Django Volt&lt;/a&gt; - a modern dashboard with Bootstrap 5 design&lt;/li&gt;
&lt;li&gt;(free) &lt;a href="https://appseed.us/admin-dashboards/django-datta-able"&gt;Django Datta Able&lt;/a&gt; - open-source colorful dashboard&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQXM3KkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5krd3m435ipok2pefik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQXM3KkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5krd3m435ipok2pefik.png" alt="Django Cookie-Cutter - Sample Projects."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;p&gt;To use this simple generator a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; should be installed in the workstation starting with Python3 and GIT:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Python&lt;/strong&gt; - a modern script language used for many types of projects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIT&lt;/strong&gt; - a command-line tool used to download sources from Github&lt;/li&gt;
&lt;li&gt;A modern editor like &lt;strong&gt;VSCode&lt;/strong&gt;, &lt;strong&gt;Atom&lt;/strong&gt;, or even &lt;strong&gt;Notepad++&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have all the tools properly installed, we can move on and build a Django project.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Install dependencies (cookie-cutter and GitPython)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;cookiecutter
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;GitPython
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command uses PIP, the official package manager for Python, to install required modules globally in the system. The recommended way to install packages is to use a virtual environment that isolates the installation as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;cookiecutter
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;GitPython
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Generate the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter https://github.com/app-generator/cookiecutter-django.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Customize the future project&lt;/p&gt;

&lt;p&gt;Most of the commands provide a default value selectable by an &lt;code&gt;ENTER&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Project Name Option &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; project_name &lt;span class="o"&gt;[&lt;/span&gt;Django Seed project]: django_volt

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Project Slug is the directory name&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; project_slug &lt;span class="o"&gt;[&lt;/span&gt;django_volt]:

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Project Description: saved in the README file &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; description &lt;span class="o"&gt;[&lt;/span&gt;A simple Django project]: My Simple Django Project

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Project Author: saved in the README file   &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; author_name &lt;span class="o"&gt;[]&lt;/span&gt;: Sm0ke

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Author Email: saved in the README file   &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; email &lt;span class="o"&gt;[&lt;/span&gt;bill@microsoft.com]:

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Project Version: saved &lt;span class="k"&gt;in &lt;/span&gt;the README file
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; version &lt;span class="o"&gt;[&lt;/span&gt;0.0.1]:

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; UI Kit: &lt;span class="o"&gt;(&lt;/span&gt;Volt default option&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Select theme:
1 - volt
2 - soft-ui
3 - datta-able

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Database: &lt;span class="o"&gt;(&lt;/span&gt;SQLite default option&lt;span class="o"&gt;)&lt;/span&gt; 
Select database:
1 - sqlite3
2 - mysql
3 - postgresql

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Database Credentials: Used to configure the connection
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; database_name &lt;span class="o"&gt;[&lt;/span&gt;appseed_django]: db_name
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; database_user &lt;span class="o"&gt;[&lt;/span&gt;appseed_user]: db_user
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; database_pass &lt;span class="o"&gt;[&lt;/span&gt;Pass1234]: SuperS3cret_Hgdv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end, the UI is downloaded from a public repository and injected into the codebase.  Let's open the generated directory &lt;code&gt;django_volt&lt;/code&gt; and visualize the codebase.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLVusI_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/metqfqa7r2301am2rs6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLVusI_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/metqfqa7r2301am2rs6e.png" alt="Django Cookie-Cutter - Generated Codebase"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Item #1&lt;/strong&gt; is the project README customized to explain how to build the project according to the selected options (database, project name...).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Item #2&lt;/strong&gt; - applications that provide basic features like authentication, forms validation, and UI Theme integration.&lt;/p&gt;




&lt;p&gt;The next logical step is to follow the build instructions presented in the README file and start the generated project:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Create a virtual environment&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install project dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Set up the database (create tables)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the generated Django project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the application (development mode)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the web app in the browser: http://127.0.0.1:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The project should look like the original &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Volt Dashboard&lt;/a&gt; &lt;strong&gt;(demo link)&lt;/strong&gt; and the log in page is shown by default for guest users. Once we create a new user and Sign IN, the access to the private pages is unlocked.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzHXPbVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97ahr94yq8r1nga3d4m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzHXPbVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97ahr94yq8r1nga3d4m8.png" alt="Django Cookie-Cutter - Login Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Django Cookie-Cutter Volt - Dashboard Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABZIUiiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9goyn6ybq764gotlcg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABZIUiiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9goyn6ybq764gotlcg5.png" alt="Django Cookie-Cutter - Dashboard Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In the same way, we can build more Django projects but using different UI kits without coding anything.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#soft-ui-a-modern-bootstrap-5-design"&gt;
  &lt;/a&gt;
  Soft UI - A modern Bootstrap 5 design
&lt;/h3&gt;

&lt;p&gt;Designed for those who like bold elements and beautiful websites, Soft UI Dashboard is ready to help you create stunning websites and web apps. Soft UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://django-soft-ui-dashboard.appseed-srv1.com/"&gt;Django Soft UI Dashboard&lt;/a&gt; - LIVE Demo&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ya8bgUyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05uo4gwzvs8e7pcbzv47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ya8bgUyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05uo4gwzvs8e7pcbzv47.png" alt="Django Cookie-Cutter - Soft UI."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#datta-able-a-colorful-dashboard"&gt;
  &lt;/a&gt;
  Datta Able - a colorful dashboard
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-dattaable-pro"&gt;Datta Able&lt;/a&gt; Bootstrap Lite is the most stylized Bootstrap 4 Lite Admin Template, around all other Lite/Free admin templates in the market. It comes with high feature-rich pages and components with fully developer-centric code. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://django-datta-able.appseed-srv1.com/"&gt;Datta Able Django&lt;/a&gt; - LIVE deployment&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReUz9n34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baqys3tp10ydnutya9su.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReUz9n34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baqys3tp10ydnutya9su.png" alt="Django Cookie-Cutter - Datta Able."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The &lt;strong&gt;Django Cookie-Cutter&lt;/strong&gt; tool will be updated with more options (deployment), UI Themes, and more featured bundled in the codebase.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New themes: CoreUI, AdminLTE (popular open-source templates)&lt;/li&gt;
&lt;li&gt;Deployment: AWS, Google Cloud, HEROKU, Docker&lt;/li&gt;
&lt;li&gt;Modules: Data tables, Charts, Stripe Payments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full list with future evolutions can be found here: &lt;a href="https://github.com/app-generator/boilerplate-code-django-dashboard/issues/14"&gt;Django Codebase SPECS&lt;/a&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboards&lt;/a&gt; built with modern UI kits&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Admin Dashboards&lt;/a&gt; - curated index provided by AppSeed&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published on Dev.to&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>django</category>
      <category>cookiecutter</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Hooks in React</title>
      <author>suraj more</author>
      <pubDate>Sat, 04 Sep 2021 09:31:25 +0000</pubDate>
      <link>https://dev.to/surajmore98/hooks-in-react-4f6a</link>
      <guid>https://dev.to/surajmore98/hooks-in-react-4f6a</guid>
      <description>&lt;p&gt;Hooks are a new feature introduced in React 16.8 and available in later versions. We can use state and other features of react by using hooks. React has two ways of creating component, one is using class and other is using function.&lt;/p&gt;

&lt;p&gt;using class to generate component needs to add react boiler-plate code because of that using function for generating component is introduced. to use state like features of react in later way hooks are useful.&lt;/p&gt;

&lt;p&gt;There is certain hooks that react provide us. useState, useEffect, useRef and useReducer. but we can create custom hooks as per our requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState:
&lt;/h2&gt;

&lt;p&gt;as name suggests it used to handle state of component. It helps to manage state between component re-renders.&lt;/p&gt;

&lt;p&gt;lets look at example below,&lt;br&gt;
we have one button "Click Me", on clicking that button text should be changed to &lt;strong&gt;"title changed"&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default function App() {
  let title = "Initial header";
  const handleClick = () =&amp;gt; {
    title = "title changed";
    console.log(title);
  }
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;

    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcAOzkPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c73ymtl7jvjzts7xc6a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcAOzkPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c73ymtl7jvjzts7xc6a.gif" alt="without_usestate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as we can see, when button is clicked the title value is changed in console, but on browser it shows old value, to update value component needs to re-render and between that rendering process we also need to maintain updated state. This thing can be achieved using &lt;strong&gt;useState&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";

export default function App() {
  const [title, setTitle] = useState("Initial header");
  const handleClick = () =&amp;gt; {
    setTitle("title changed");
  };
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmf-kRtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bboj7tv3117s154scano.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmf-kRtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bboj7tv3117s154scano.gif" alt="with_usestate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect:
&lt;/h2&gt;

&lt;p&gt;useEffect hook is used to handle activities when component renders . There is some syntax variation is used to customize useEffect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//executes at component's initial render
  useEffect(()=&amp;gt; {

  }, []);

//executes at component's state title is changed.
  useEffect(()=&amp;gt; {

  }, title);

//executes at component's renders
  useEffect(()=&amp;gt; {

  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPG3jIJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6xok1m8sfbctc2ehh24.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPG3jIJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6xok1m8sfbctc2ehh24.gif" alt="useEffect"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Automating Kubernetes Cluster on AWS using Ansible and deploying WordPress with MySQL on k8s cluster</title>
      <author>Suraj Warbhe</author>
      <pubDate>Sat, 04 Sep 2021 09:17:44 +0000</pubDate>
      <link>https://dev.to/surajwarbhe/automating-kubernetes-cluster-on-aws-using-ansible-and-deploying-wordpress-with-mysql-on-k8s-cluster-3p4c</link>
      <guid>https://dev.to/surajwarbhe/automating-kubernetes-cluster-on-aws-using-ansible-and-deploying-wordpress-with-mysql-on-k8s-cluster-3p4c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#usecase"&gt;
  &lt;/a&gt;
  USE-CASE
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create Ansible Playbook to launch 3 AWS EC2 Instance&lt;/li&gt;
&lt;li&gt;Create Ansible Playbook to configure Docker over those instances&lt;/li&gt;
&lt;li&gt;Create Playbook to configure K8S Master, K8S Worker Nodes on the above created EC2 Instances using kubeadm&lt;/li&gt;
&lt;li&gt;Launch a WordPress and MySQL database connected to it in the respective slaves&lt;/li&gt;
&lt;li&gt;Expose the WordPress pod and the client able to hit the WordPress IP with its respective port.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite-for-rhel8"&gt;
  &lt;/a&gt;
  Pre-requisite: (FOR RHEL-8)
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Controller node should be setup with ansible installation and configuration, when controller node is RHEL8&lt;/li&gt;
&lt;li&gt;Create one &lt;code&gt;IAM&lt;/code&gt; user having Administrator Access and note down their &lt;code&gt;access key&lt;/code&gt; and &lt;code&gt;secret key&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create one &lt;code&gt;Key pair&lt;/code&gt; in &lt;code&gt;(.pem)&lt;/code&gt; format on AWS Cloud, download it in your local system and transfer it over RHEL-8 through &lt;code&gt;WinSCP&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-ansible-installation-and-configuration"&gt;
  &lt;/a&gt;
  STEP 1 : Ansible Installation and Configuration
&lt;/h3&gt;

&lt;p&gt;Install Ansible on Base OS (RHEL8), configure ansible configuration file. &lt;br&gt;
To do this use below commands-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install python3 -y

pip3 install ansible -y

vim /etc/ansible/ansible.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: &lt;code&gt;Python&lt;/code&gt; should be installed on your OS to setup Ansible.&lt;br&gt;
Write below commands in your configuration &lt;code&gt;ansible.cfg&lt;/code&gt; file. For this you can prefer any editor like &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;gedit&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[defaults]
inventory=/root/ip.txt  #inventory path
host_key_checking=False
command_warnings=False
deprecation_warnings=False
ask_pass=False
roles_path= /root/roles      #roles path
force_valid_group_names = ignore
private_key_file= /root/awskey.pem   #your key-pair 
remote_user=ec2-user

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-ansible-roles"&gt;
  &lt;/a&gt;
  STEP 2 : Create Ansible Roles
&lt;/h3&gt;

&lt;p&gt;🔶 Go inside your roles workspace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use Below commands to create 3 different roles&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For Kubernetes Cluster&lt;/li&gt;
&lt;li&gt;For Kubernetes Master&lt;/li&gt;
&lt;li&gt;For Kubernetes Slaves
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-galaxy init &amp;lt;role_name&amp;gt;

ansible-galaxy init kube_cluster
ansible-galaxy init k8s_master
ansible-galaxy init k8s_slave
ansible-galaxy init wordpress_mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-write-role-for-kubernetes-cluster"&gt;
  &lt;/a&gt;
  STEP 3 : Write role for Kubernetes Cluster
&lt;/h3&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/kube_cluster/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔶 I am going to create cluster over &lt;code&gt;Amazon Linux instances&lt;/code&gt;.&lt;br&gt;
Write below source code inside it-&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Installing boto &amp;amp; boto3 libraries
  pip:
    name: "{{ item }}"
    state: present
  loop: "{{ lib_names }}"

- name: Creating Security Group for K8s Cluster
  ec2_group:
    name: "{{ sg_name }}"
    description: Security Group for allowing all port
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    rules:
    - proto: all
      cidr_ip: 0.0.0.0/0
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0

- name: Launching three EC2 instances on AWS
  ec2:
    key_name: "{{ keypair }}"
    instance_type: "{{ instance_flavour }}"
    image: "{{ ami_id }}"
    wait: true
    group: "{{ sg_name }}"
    count: 1
    vpc_subnet_id: "{{ subnet_name }}"
    assign_public_ip: yes
    region: "{{ region_name }}"
    state: present
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    instance_tags:
      Name: "{{ item }}"
  register: ec2
  loop: "{{ instance_tag }}"

- name: Add 1st instance to host group ec2_master
    add_host:
    hostname: "{{ ec2.results[0].instances[0].public_ip }}"
    groupname: ec2_master

- name: Add 2nd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[1].instances[0].public_ip }}"
    groupname: ec2_slave

- name: Add 3rd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[2].instances[0].public_ip }}"
    groupname: ec2_slave

- name: Waiting for SSH
  wait_for:
    host: "{{ ec2.results[2].instances[0].public_dns_name }}"
    port: 22
    state: started

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation-of-source-code"&gt;
  &lt;/a&gt;
  Explanation of Source Code:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are using &lt;code&gt;pip&lt;/code&gt; module to install two packages — &lt;code&gt;boto&lt;/code&gt; &amp;amp; &lt;code&gt;boto3&lt;/code&gt;, because these packages has the capability to contact to AWS to launch the EC2 instances. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ec2_group&lt;/code&gt; module to create Security Group on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ec2&lt;/code&gt; module to launch instance on AWS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;register&lt;/code&gt; keyword will store all the Metadata in a variable called &lt;code&gt;ec2&lt;/code&gt; so that in future we can parse the required information from it. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;loop&lt;/code&gt; which again using one variable which contains one list. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;item&lt;/code&gt; keyword we are calling the list values one after another.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add_host&lt;/code&gt; module which has the capability to create one dynamic inventory while running the playbook. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; keyword tells the values to store in the dynamic host group.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wait_for&lt;/code&gt; module to hold the playbook for few seconds till all the node’s SSH service started.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;access key&lt;/code&gt; and &lt;code&gt;secret key&lt;/code&gt; are stored inside &lt;code&gt;vault&lt;/code&gt; files to hide it from other users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔶 Go inside the vars folder. We have to write entire variables inside this folder. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can directly mention variables inside tasks file but it is good practice to write them inside &lt;code&gt;vars&lt;/code&gt; files so that we can change according to our requirements.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/kube_cluster/vars

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;instance_tag:
        - master
        - slave1
        - slave2

lib_names:
        - boto
        - boto3

sg_name: Allow_All_SG
region_name: ap-south-1
subnet_name: subnet-49f0e521
ami_id: ami-010aff33ed5991201
keypair: awskey
instance_flavour: t2.small
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-write-role-for-kubernetes-master"&gt;
  &lt;/a&gt;
  STEP 4 : Write role for Kubernetes Master
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the k8s master-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing docker and iproute-tc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Yum repo for Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing kubeadm, kubelet &amp;amp; kubectl program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling the docker and Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling the config images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the docker daemon.json file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restarting the docker service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Ip tables and refreshing sysctl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starting kubeadm service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting HOME directory for .kube Directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copying file config file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing Addons e.g flannel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the token&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store output of token in a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/k8s_master/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present

- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present

- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker

- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted

- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "systemctl"
  shell: "sysctl --system"

- name: "Starting kubeadm service"
  shell: "kubeadm init  --ignore-preflight-errors=all"

- name: "Creating .kube Directory"
  file:
     path: $HOME/.kube
     state: directory

- name: "Copying file config file"
  shell: "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
  ignore_errors: yes

- name: "Installing Addons e.g flannel"
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

- name: "Creating the token"
  shell: "kubeadm token create --print-join-command"
  register: token

- debug:
       msg: "{{ token.stdout }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation-of-source-code"&gt;
  &lt;/a&gt;
  Explanation of Source Code:
&lt;/h4&gt;

&lt;p&gt;1.We need to install &lt;code&gt;kubeadm&lt;/code&gt; program on our master node to setup K8s cluster.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are installing &lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;Kubeadm&lt;/code&gt; &amp;amp; &lt;code&gt;iproute-tc&lt;/code&gt; packages on our Master Instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;service&lt;/code&gt; module is used to start the docker &amp;amp; kubelet service. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;command&lt;/code&gt; module to run kubeadm command which will pull all the Docker Images required to run Kubernetes Cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to change our Docker default cgroup to &lt;code&gt;systemd&lt;/code&gt;, otherwise kubeadm won't be able to setup K8s cluster. To do that at first using &lt;code&gt;copy&lt;/code&gt; module we are creating one file &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; &amp;amp; putting some content in it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next using &lt;code&gt;command&lt;/code&gt; module we are initializing the cluster &amp;amp; then using &lt;code&gt;shell&lt;/code&gt; module we are setting up &lt;code&gt;kubectl&lt;/code&gt; command on our Master Node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next using &lt;code&gt;command&lt;/code&gt; module I deployed &lt;code&gt;Flannel&lt;/code&gt; on the Kubernetes Cluster so that it create the overlay network setup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also the 2nd &lt;code&gt;command&lt;/code&gt; module is used to get the token for the slave node to join the cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;register&lt;/code&gt; I stored the output of 2nd &lt;code&gt;command&lt;/code&gt; module in a variable called &lt;code&gt;token&lt;/code&gt;. Now this token variable contain the command that we need to run on slave node, so that it joins the master node.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-5-write-role-for-kubernetes-slaves"&gt;
  &lt;/a&gt;
  STEP 5 : Write role for Kubernetes Slaves
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the k8s slaves-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing docker and iproute-tc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Yum repo for Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing kubeadm,kubelet kubectl program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling the docker and Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling the config images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the docker daemon.json file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restarting the docker service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the IP tables and refreshing sysctl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the join command which we store while configuring master&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/k8s_slave/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present

- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present

- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker

- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted

- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: "systemctl"
  shell: "sysctl --system"

- name: joining to Master
  command: "{{ hostvars[groups['ec2_master'][0]]['token']['stdout'] }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-write-role-for-wordpress-and-mysql-setup"&gt;
  &lt;/a&gt;
  STEP 6 : Write role for Wordpress and MySQL Setup
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the Wordpress-&lt;/p&gt;

&lt;p&gt;🔶 Go inside the &lt;code&gt;files&lt;/code&gt; folder of &lt;code&gt;wordpress_mysql&lt;/code&gt; role. We have to write entire configuration files inside this folder.&lt;br&gt;
🔶 We have to create 5 files here to create pods, setup of PVC and secrets' file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/wordpress_mysql/files

vim wordpress.yml

vim pvc_wordpress.yml

vim mysql.yml

vim pvc_mysql.yml

vim secret.yml

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Write Below source to configure &lt;code&gt;Wordpress&lt;/code&gt; installation part inside &lt;code&gt;wordpress.yml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
    - port: 80
      nodePort: 30333
  selector:
    app: wordpress
    tier: frontend
  type: LoadBalancer
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
      containers:
      - image: wordpress:4.8-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysqlsecret
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumes:
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Write Below source to setup PVC for Wordpress in &lt;code&gt;pvc_wordpress.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
   name: wordpress-pv-claim
   labels:
        app: wordpress
        tier: frontend
spec:
   storageClassName: ""
   resources:
        requests:
             storage: 1Gi
   accessModes:
     - ReadWriteOnce
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  storageClassName: ""
  capacity:
     storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /wordpressdata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Write Below source to configure MYSQL installation part inside &lt;code&gt;mysql.yml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
  clusterIP: None
--------
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysqlsecret
              key: password
        - name: MYSQL_USER
          value: udit
        - name: MYSQL_DATABASE
          value: task23db
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Write Below source to setup PVC for MySQL in &lt;code&gt;pvc_mysql.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
   name: mysql-pv-claim
   labels:
        app: wordpress
        tier: mysql
spec:
   storageClassName: ""
   resources:
        requests:
             storage: 1Gi
   accessModes:
     - ReadWriteOnce
--------

apiVersion: v1
kind: PersistentVolume
metadata:
  name: msql-pv
spec:
  storageClassName: ""
  capacity:
     storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mysqldata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Lastly, create a secrete file &lt;code&gt;secret.yml&lt;/code&gt; which will contain the password of the MySQL database-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Secret
metadata:
  name: Suraj
data:
   password: Mysqlpass@2001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/wordpress_mysql/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  - name: Copying Wordpress and MySQL files to K8s Master Node
    copy:
        src: "{{ item }}"
        dest: /root/
    loop:
        - mysql.yml
        - pvc_mysql.yml
        - pvc_wordpress.yml
        - secret.yml
        - wordpress.yml

  - name: Creating directory over which MySQL container mounts the PersistentVolume at /var/lib/mysql.
    file:
        path: /mysqldata
        state: directory

  - name: Creating directory over which WordPress container mounts the PersistentVolume at /var/www/html.
    file:
        path: /wordpressdata
        state: directory


  - name: Configuration and Setup of Wordpress and MySQL
    shell: "kubectl create -f /root/{{ item }}"
    loop:
        - mysql.yml
        - pvc_mysql.yml
        - pvc_wordpress.yml
        - wordpress.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-7-write-ansible-vault-files"&gt;
  &lt;/a&gt;
  STEP 7 : Write Ansible Vault Files
&lt;/h3&gt;

&lt;p&gt;🔶 Go to your roles workspace&lt;br&gt;
🔶 Run below command and create vault file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-vault create &amp;lt;filename&amp;gt;.yml

ansible-vault create cred.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 It will ask to provide one vault password &amp;amp; provide as per your choice.&lt;br&gt;
🔶 Then, open it with editor, create two variables in this file &amp;amp; put your AWS &lt;code&gt;access key&lt;/code&gt; &amp;amp; &lt;code&gt;secret key&lt;/code&gt; as values. &lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;access_key: ABCDEFGHIJKLMN
secret_key: abcdefghijklmn12345
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Save the file with command &lt;code&gt;(:wq)&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-8-create-setup-file"&gt;
  &lt;/a&gt;
  STEP 8 : Create Setup file
&lt;/h3&gt;

&lt;p&gt;Now it's finally the time to create the &lt;code&gt;setup.yml&lt;/code&gt; file inside same workspace which we gonna run to setup this entire infrastructure on AWS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- hosts: localhost
  gather_facts: no
  vars_files:
         - cred.yml
  tasks:
         - name: "Running kube_cluster role"
           include_role:
                name: kube_cluster


- hosts: ec2_master
  gather_facts: no
  tasks:
    - name: Running K8s_Master Role
      include_role:
        name: k8s_master

- hosts: ec2_slave
  gather_facts: no
  tasks:
    - name: Running K8s_Slave Role
      include_role:
        name: k8s_slave

- hosts: ec2_master
  gather_facts: no
  tasks:
    - name: Running Wordpress-MySQL Role
      include_role:
        name: wordpress_mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔶 Write proper &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;vault file name&lt;/code&gt; and &lt;code&gt;role name&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-9-run-your-ansible-playbook"&gt;
  &lt;/a&gt;
  STEP 9 : RUN your Ansible Playbook
&lt;/h3&gt;

&lt;p&gt;🔶 use below commands to run your ansible playbook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook setup.yml --ask-vault-pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Next it will prompt you to pass the password of your Ansible Vault (cred.yml file), provide your password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5koXwdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ws1d8924uk8my86jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5koXwdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ws1d8924uk8my86jt.png" alt="root@localhost__roles 01-09-2021 02_48_38 PM"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_v9VMzyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgb8fos6gc47z1d042zb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_v9VMzyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgb8fos6gc47z1d042zb.png" alt="root@localhost__roles 01-09-2021 02_49_15 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tn8d4EUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a77ho2409cm8gq3sh7kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tn8d4EUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a77ho2409cm8gq3sh7kd.png" alt="root@localhost__roles 01-09-2021 02_49_46 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WF86n_Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhw9qqk65eeg14q75enb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WF86n_Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhw9qqk65eeg14q75enb.png" alt="root@localhost__roles 04-09-2021 10_56_25 AM"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#yay-it-run-successfully-and-setup-entire-infrastructure"&gt;
  &lt;/a&gt;
  YAY!, IT RUN SUCCESSFULLY AND SETUP ENTIRE INFRASTRUCTURE
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyFtWs4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5ex40ovdf3i6bbhn6hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyFtWs4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5ex40ovdf3i6bbhn6hh.png" alt="Connect to instance _ EC2 Management Console - Google Chrome 01-09-2021 02_57_17 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-8-testing"&gt;
  &lt;/a&gt;
  STEP 8 : TESTING...
&lt;/h3&gt;

&lt;p&gt;🔶 Now lets check our multi-node cluster is using below commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A79PrMSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6nvsc2xhy6msybh71b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A79PrMSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6nvsc2xhy6msybh71b4.png" alt="Select root@ip-172-31-35-184_~ 01-09-2021 02_53_32 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#here-we-can-see-our-who-cluster-is-launched-successfully-and-our-all-nodes-is-ready-phase"&gt;
  &lt;/a&gt;
  🔶 Here we can see our who cluster is launched successfully and our all nodes is ready phase.
&lt;/h6&gt;

&lt;p&gt;🔶 Now once your pods are ready, then you can take the public of any node either master or slave with the exposed port you will landed to the Wordpress login page and then enter password and username of the mysql database and hit the run installation button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsSEreug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D12AQHI3rjKrMsInA/article-inline_image-shrink_1000_1488/0/1619173264511%3Fe%3D1635984000%26v%3Dbeta%26t%3DwEnFMEJAXEeo8ApTznSo11MwKGqqQNpOZAt5Z80FRGw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsSEreug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D12AQHI3rjKrMsInA/article-inline_image-shrink_1000_1488/0/1619173264511%3Fe%3D1635984000%26v%3Dbeta%26t%3DwEnFMEJAXEeo8ApTznSo11MwKGqqQNpOZAt5Z80FRGw" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUE3o7x6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D12AQGdGcY2TIK2pQ/article-inline_image-shrink_1000_1488/0/1619173275736%3Fe%3D1635984000%26v%3Dbeta%26t%3DtweyV51yrIL7wFBWw4_ogB_CYKy7RPwhwW0zXZeEo0w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUE3o7x6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D12AQGdGcY2TIK2pQ/article-inline_image-shrink_1000_1488/0/1619173275736%3Fe%3D1635984000%26v%3Dbeta%26t%3DtweyV51yrIL7wFBWw4_ogB_CYKy7RPwhwW0zXZeEo0w" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;🔶 YAY! Your Wordpress application is ready !! &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#github-link-httpsgithubcomsurajwarbheansibleplaybookk8wordpressmysql"&gt;
  &lt;/a&gt;
  GitHub Link: &lt;a href="https://github.com/surajwarbhe/Ansible-Playbook-K8-Wordpress-MySQL"&gt;https://github.com/surajwarbhe/Ansible-Playbook-K8-Wordpress-MySQL&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#linkedin-profile-httpswwwlinkedincominsurajwarbhe"&gt;
  &lt;/a&gt;
  LinkedIn profile: &lt;a href="https://www.linkedin.com/in/suraj-warbhe/"&gt;https://www.linkedin.com/in/suraj-warbhe/&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" alt="68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f69346776387341505f5f586746673d3d2d3931363135303430372e3136316636643238343363343039646134303138393"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>mysql</category>
      <category>ansible</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>Building custom hooks in React to fetch Data</title>
      <author>Shahid Rizwan</author>
      <pubDate>Sat, 04 Sep 2021 08:02:10 +0000</pubDate>
      <link>https://dev.to/shaedrizwan/building-custom-hooks-in-react-to-fetch-data-4ig6</link>
      <guid>https://dev.to/shaedrizwan/building-custom-hooks-in-react-to-fetch-data-4ig6</guid>
      <description>&lt;p&gt;Fetching data from the backend is one of the crucial parts of the web application. For every application to work dynamically, it fetches the data from the server and then displays it in the user interface.&lt;/p&gt;

&lt;p&gt;We retrieve the data using the API call and using built-in React hooks like useState, useEffect, and useReducer, the retrieved data is set to the state variable. It is then used in components for showing it in the view.&lt;/p&gt;

&lt;p&gt;Before jumping into the code of how's it's done, let's first look at what React hooks are and why it is used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react-hooks"&gt;
  &lt;/a&gt;
  What is React Hooks
&lt;/h2&gt;

&lt;p&gt;React hooks were first introduced in React 16.8. They are functions that let you hook into React state.&lt;/p&gt;

&lt;p&gt;Some of the built-in hooks provided by React are useState, useEffect, useContext, useReducer, useRef, useCallback, and useMemo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-react-hooks-are-used"&gt;
  &lt;/a&gt;
  Why React Hooks are used
&lt;/h2&gt;

&lt;p&gt;One of the main advantages of using React hooks is the re-usability of logic. The hooks can be used in multiple components where we have to use a specific function.&lt;/p&gt;

&lt;p&gt;It also makes the code more readable, efficient, and easy to maintain.&lt;/p&gt;

&lt;p&gt;The normal code for fetching the data from the server and updating in the component is shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function Home(){

    const [data,setData] = useState(null)
    const [loading,setLoading] = useState(false)
    const [error,setError] = useState(null)

    useEffect(()=&amp;gt;{
        (
        async function(){
            try{
                setLoading(true)
                const response = await axios.get('http:localhost:4000')
                setData(response.data)
            }
            catch(err){
                setError(err)
            }finally{
                setLoading(false)
            }
        }
        )()
    },[])

    return(
        {loading &amp;amp;&amp;amp; &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}
        {data &amp;amp;&amp;amp; &amp;lt;div&amp;gt;{data}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We write the logic inside the useEffect hook to update the state properties like data, loading, and error.&lt;/p&gt;

&lt;p&gt;While it's perfectly fine to write like this, what if we want to do the same kind of thing in multiple components where we have to fetch another data.&lt;/p&gt;

&lt;p&gt;We have to rewrite all of these codes multiple times in all of those components which is not very efficient and hard to manage.&lt;/p&gt;

&lt;p&gt;In big codebases, it is better to follow the Don't Repeat Yourself (DRY) principles, that is, it's better to write code once and make it reusable instead of writing it again and again in multiple components.&lt;/p&gt;

&lt;p&gt;That's where the real magic of Custom Hook is. We can write the code in a separate js file and call it with URL from all the components that might need to fetch the data from the server.&lt;/p&gt;

&lt;p&gt;This makes the code efficient and easily maintainable.&lt;/p&gt;

&lt;p&gt;Like useState and useEffect have their function, we create custom hooks by combining them for a specific ability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-custom-usefetch-hook"&gt;
  &lt;/a&gt;
  Creating custom useFetch hook
&lt;/h2&gt;

&lt;p&gt;We first create a new javascript file with the name useFetch.js.&lt;br&gt;
The name of the hooks starts with use as a part of react hooks convention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h84g7xCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8ipnu7lhb7tmd0mcfu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h84g7xCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8ipnu7lhb7tmd0mcfu1.png" alt="useFetch javascript file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the file, create a new function with the name of the hook. The difference between React hook and a React component is that hook doesn't return JSX. It only returns the state variable or function that you want to use in a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function useFetch(){

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make an API call, use a useEffect hook because it will trigger the API call function inside it when rendered. Here, the API call is made using Axios.&lt;/p&gt;

&lt;p&gt;The API Url that needs to be called is passed to the hook as an argument from the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect } from "react"
import axios from axios

export function useFetch(url){
   useEffect(()=&amp;gt;{
      (
         async function(){
            const response = await axios.get(url)
         }
      )()
   },[url])

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usually, we have 3 state variables that are data, error, and loading created using useState to store the response data, error and loading respectively,&lt;/p&gt;

&lt;p&gt;If the data is received, we set it to the data variable. If not, the error message will be set to the error variable.&lt;/p&gt;

&lt;p&gt;Loader is initialized as false. When the API is called, it is set to true so that a loader component can be loaded in the view.&lt;/p&gt;

&lt;p&gt;At the end of the API call, this loader is set back to false by using the finally block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect, useState } from "react"
import axios from "axios"


export default function useFetch(url){

    const [data,setData] = useState(null)
    const [error,setError] = useState(null)
    const [loading,setLoading] = useState(false)

    useEffect(() =&amp;gt; {
        (
            async function(){
                try{
                    setLoading(true)
                    const response = await axios.get(url)
                    setData(response.data)
                }catch(err){
                    setError(err)
                }finally{
                    setLoading(false)
                }
            }
        )()
    }, [url])

    return { data, error, loading }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only dependency we're going to put in the useEffect dependency array is Url because if the Url changes, we have to request new data.&lt;/p&gt;

&lt;p&gt;That's basically for useEffect. Now we return the states that are created inside the hook as an object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-custom-hook-in-the-component"&gt;
  &lt;/a&gt;
  Using Custom Hook in the Component
&lt;/h2&gt;

&lt;p&gt;Inside the component, import the useFetch hook from its javascript file. After importing, call the hook with the API Url as an argument.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-data-using-custom-hook"&gt;
  &lt;/a&gt;
  Fetching data using custom Hook
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function Home(){
    const {data,loading,error} = useFetch('https://localhost:4000')

        if(error){
           console.log(error)
        }

    return(
        {loading &amp;amp;&amp;amp; &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}
        {data &amp;amp;&amp;amp; &amp;lt;div&amp;gt;{data.map(item =&amp;gt; &amp;lt;div&amp;gt;{item}&amp;lt;/div&amp;gt;)}&amp;lt;/div&amp;gt;}
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to this, we can also customize the hook by making it return any function that can be called from the component.&lt;/p&gt;

&lt;p&gt;For example, we can create a refetch() function inside the hooks that re-fetches the API when called.&lt;/p&gt;

&lt;p&gt;This function can be returned from the hook and can be called from the component.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Git and Github: The Complete Guides - Chapter 2</title>
      <author>Goran Kortjie</author>
      <pubDate>Sat, 04 Sep 2021 07:09:10 +0000</pubDate>
      <link>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-2-559</link>
      <guid>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-2-559</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvwnyE2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7an2i0uf70z8df374ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvwnyE2h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7an2i0uf70z8df374ic.png" alt="goran-greets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are creating your &lt;strong&gt;&lt;u&gt;timeline/branch&lt;/u&gt;&lt;/strong&gt; &lt;code&gt;i.e&lt;/code&gt; setting up the history of your project. You gain an important ability to go &lt;u&gt;back in time&lt;/u&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ew5kgL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s75pywemzcrs0297mwt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ew5kgL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s75pywemzcrs0297mwt.gif" alt="reversetime"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By going back, you are able to &lt;strong&gt;checkout&lt;/strong&gt; the previous states your project was in, you are able to &lt;strong&gt;revert&lt;/strong&gt; the changes of those states and even &lt;strong&gt;reset&lt;/strong&gt; the course of history!&lt;/p&gt;

&lt;p&gt;The common theme is &lt;em&gt;&lt;u&gt;Undoing&lt;/u&gt;&lt;/em&gt; and we will discuss this in detail later on, For now I want to discuss a topic we briefly touched on in the first chapter. That is &lt;strong&gt;HEAD&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;What is HEAD?&lt;/h3&gt;

&lt;p&gt;To have a clear understanding of &lt;strong&gt;HEAD&lt;/strong&gt; let us see an example of &lt;strong&gt;HEAD&lt;/strong&gt; again. When we log the history of our project using the summary syntax with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --oneline 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FdoIETpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajw9iwrpzwtm3czybkh5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FdoIETpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajw9iwrpzwtm3czybkh5.gif" alt="git-history-summary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now see a summary of the history of our commits. If you notice the first commit, there is a &lt;u&gt;(HEAD -&amp;gt; master)&lt;/u&gt; associated with it. &lt;strong&gt;HEAD&lt;/strong&gt; is a pointer, &lt;strong&gt;master&lt;/strong&gt; is the default branch. The branch itself is a timeline of the commits. By default &lt;strong&gt;HEAD&lt;/strong&gt; points to the last commit, but if you go back in time to other previous states of the project, then &lt;strong&gt;HEAD&lt;/strong&gt; will point to the relevant commit. &lt;code&gt;More on this soon...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To prove that &lt;strong&gt;HEAD&lt;/strong&gt; points to the last commit by default, we can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git show HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiR7xsAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6ni5rfvxp423pjxhuqk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiR7xsAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6ni5rfvxp423pjxhuqk.gif" alt="git-show-head"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output from this command shows us the last commit with a bunch of information. The bottom half of which will be discussed in other chapters...&lt;/p&gt;

&lt;p&gt;Notice that &lt;strong&gt;HEAD&lt;/strong&gt; acted as a unique identifier (ID) of a commit. Meaning if we pass in the weird string of characters of the last commit along with &lt;code&gt;git show&lt;/code&gt; we will get the same output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fupQzsXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aso8k3b7en4206v90igl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fupQzsXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aso8k3b7en4206v90igl.gif" alt="git-show-id"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use &lt;strong&gt;HEAD&lt;/strong&gt; instead of an ID. It's interesting to see how we can show other commits using &lt;strong&gt;HEAD&lt;/strong&gt;. To demonstrate let us clear the screen. Run the command to log a summary of the history of our commits to us. To use &lt;strong&gt;HEAD&lt;/strong&gt; to log details of other commits use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git show HEAD~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tilde sign is followed by a number representing the index of the commit. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git show HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LC6Pn5JN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ax29n4ait7y4eej1vle.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LC6Pn5JN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ax29n4ait7y4eej1vle.gif" alt="git-show-head-$"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We wrote 1 but &lt;strong&gt;HEAD&lt;/strong&gt; is pointing to the second commit. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The commits in history are zero-indexed, meaning you start counting from 0. &lt;u&gt;Remember that!&lt;/u&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's enough about &lt;strong&gt;HEAD&lt;/strong&gt;, we will be using it throughout this journey.&lt;/p&gt;




&lt;h3&gt;Time to Undo Things&lt;/h3&gt;

&lt;p&gt;I actually mentioned the three basic commands we will be discussing that allow us to &lt;strong&gt;undo&lt;/strong&gt; things. These commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checkout&lt;/li&gt;
&lt;li&gt;revert&lt;/li&gt;
&lt;li&gt;reset&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Checkout&lt;/h3&gt;

&lt;p&gt;We will start with &lt;strong&gt;checkout&lt;/strong&gt;, with the help of this command we are able to unmodify files, also we can go &lt;u&gt;back in time&lt;/u&gt; and check different states of our project. It also allows us to move between different branches.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;u&gt;unmodify&lt;/u&gt; is not a word, but for some reason I feel comfortable with it here 🤔.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Unmodify&lt;/h4&gt;

&lt;p&gt;Lets first see how we can unmodify files. To do this we have to first modify some of our files in our project, This is completely up to you just remember to save the changes you make in your file.&lt;/p&gt;

&lt;p&gt;When we check the status of our files, we see that our files have been modified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXEQ1bKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zih8qmsbse1gyfahsi9h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXEQ1bKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zih8qmsbse1gyfahsi9h.gif" alt="git-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets say for some reason we accidentally introduced an error, and we need to unmodify the file. For example we created a variable we shouldn't have. We can use the following command to unmodify the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the file you want to unmodify. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdh4GWiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytts9ah0u2elv4u1711l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdh4GWiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytts9ah0u2elv4u1711l.gif" alt="git-checkout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a way to unmodify a bunch of files at the same time we can use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout *
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another job that &lt;code&gt;git checkout&lt;/code&gt; can do is go &lt;u&gt;back in time&lt;/u&gt; and check the previous states of the project. Unlike the other two commands we will also be discussing, &lt;strong&gt;checkout&lt;/strong&gt; is the safest one. Because with &lt;strong&gt;checkout&lt;/strong&gt; we cannot change or delete previous commits.&lt;/p&gt;

&lt;p&gt;To go &lt;u&gt;back in time&lt;/u&gt; we need to specify the &lt;strong&gt;commit/snapshot&lt;/strong&gt; we want to go back to, we have learned we can specify a commit using the &lt;u&gt;Unique Identifier&lt;/u&gt; (ID) or with the &lt;em&gt;HEAD&lt;/em&gt; pointer. We perform the jump by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the ID of the commit you want to go back to. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout 90077b6 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the &lt;em&gt;HEAD&lt;/em&gt; pointer like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout HEAD~2 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PpDBacbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke0d3h3mrndar5uxhkht.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PpDBacbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke0d3h3mrndar5uxhkht.gif" alt="git-time-jump"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have now gone &lt;u&gt;back in time&lt;/u&gt; to the previous state of your project. Something you will notice is how any files that you may have created after this commit have been deleted, also any changes to any files will go back to the state it was in when you made this commit.&lt;/p&gt;

&lt;p&gt;Awesome right! 👍 &lt;/p&gt;

&lt;p&gt;We went &lt;u&gt;back in time&lt;/u&gt;. But you might be thinking, did that really just delete all the work from before?&lt;br&gt;
Especially if you run the command to see the history of your commits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --oneline 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlBwsN6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7f6nqtrzxfrnlupd5bz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlBwsN6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7f6nqtrzxfrnlupd5bz.gif" alt="git-oneline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mLd6e1zM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryslkg4pjllucfzhgbu5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mLd6e1zM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryslkg4pjllucfzhgbu5.gif" alt="noooo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at the output of our &lt;code&gt;git checkout ___&lt;/code&gt; command, you will notice it says we are in a &lt;strong&gt;detached HEAD&lt;/strong&gt; state. This means that our &lt;em&gt;HEAD&lt;/em&gt; is no longer pointing to the last commit. Instead &lt;em&gt;HEAD&lt;/em&gt; is now pointing to the &lt;strong&gt;ID&lt;/strong&gt; of the commit we are currently in. That's how we are able to go back to the previous state of our projects.&lt;/p&gt;

&lt;p&gt;To go &lt;strong&gt;back to the future&lt;/strong&gt; 😏  we just need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are back! if we check to make sure all our commits are still intact, we will be delighted to see they all still there, more importantly &lt;em&gt;HEAD&lt;/em&gt; is pointing at the last commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1e8HNj8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltlbtivw75copw37afic.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1e8HNj8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltlbtivw75copw37afic.gif" alt="git-checkout-master"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Checkout&lt;/strong&gt; is really safe because it is &lt;u&gt;read-only&lt;/u&gt;, you cannot change or edit previous commits&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets prove it by going &lt;u&gt;back in time&lt;/u&gt; again.&lt;/p&gt;

&lt;p&gt;We now know how we can go &lt;u&gt;back in time&lt;/u&gt; to a previous commit. &lt;code&gt;git checkout&lt;/code&gt; followed by the ID of the commit. Once we are in the previous state, we can go through the normal procedure of modifying our files, setting them to the staging area and finally running the commit with a message of-course. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvYhdbcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87oishllgfo2knzqz34d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvYhdbcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87oishllgfo2knzqz34d.gif" alt="git-checkout-readonly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we run the &lt;code&gt;git log --oneline&lt;/code&gt; we can see the commit we just made, but if we go 😏 &lt;strong&gt;back to the future&lt;/strong&gt; / &lt;u&gt;master branch&lt;/u&gt; and run the same command again. We don't see the commit at all!&lt;/p&gt;

&lt;p&gt;If we go &lt;u&gt;back in time&lt;/u&gt; to the same commit as before and run the command, we don't see the commit there either. This is what we mean when we say &lt;strong&gt;checkout is safe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make a new commit in the case of &lt;strong&gt;checkout&lt;/strong&gt; you can do this by creating other branches. But lets keep that for later...&lt;/p&gt;

&lt;p&gt;We are going to go over the other commands that allow you to make permanent changes to the timeline of your project. &lt;strong&gt;revert&lt;/strong&gt; and &lt;strong&gt;reset&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Revert&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;git revert&lt;/code&gt; command is used to undo the changes to your projects commit history. How it works is like this: &lt;u&gt;It takes a specific commit&lt;/u&gt;, &lt;u&gt;it inverses that commit&lt;/u&gt;, &lt;u&gt;then creates a new revert commit&lt;/u&gt;. We do this by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the ID of the commit you want to revert, For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert 736ec6b 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dn3gjC48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fckovafcaxw5ngwmgmdw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dn3gjC48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fckovafcaxw5ngwmgmdw.gif" alt="git-revert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new temporary file is opened called &lt;strong&gt;COMMIT_EDITMSG&lt;/strong&gt;, it contains the original commit message and a info message to let you know that &lt;u&gt;this reverts commit with the specified ID&lt;/u&gt;. When you close the file, whatever changes you made in the specified commit will be undone and a new commit will be added to the timeline.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you remove the original message and leave it empty and close the temporary file, it will abort the revert process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One other thing to take note of is, when you use the &lt;code&gt;git revert&lt;/code&gt; command, you don't touch any of the changes of other commits, you only make the change to the specified commit.&lt;/p&gt;

&lt;p&gt;This is useful because maybe you have some mistakes in your previous specified commits and &lt;code&gt;git revert&lt;/code&gt; allows you to fix those mistakes without changing any other commit.&lt;/p&gt;

&lt;h3&gt;Reset&lt;/h3&gt;

&lt;p&gt;This is known as the &lt;strong&gt;dangerous&lt;/strong&gt; or &lt;strong&gt;unsafe&lt;/strong&gt; command because it can permanently delete your work. So needless to say you must be careful with &lt;code&gt;git reset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;git reset&lt;/code&gt; command is a little unique in that it has three different &lt;u&gt;flags&lt;/u&gt; you can use with it and each flag behaves in different ways. &lt;/p&gt;

&lt;p&gt;These flags are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mixed&lt;/li&gt;
&lt;li&gt;soft&lt;/li&gt;
&lt;li&gt;hard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --soft 5d5751c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the unique identifier of the previous commit, &lt;strong&gt;meaning the ID of the commit &lt;u&gt;BEFORE&lt;/u&gt; the commits you want to delete.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you perform a &lt;code&gt;git reset&lt;/code&gt; you choose the commit you want to start your deletion at, and only start deleting all the commits that come after.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Mixed&lt;/h4&gt;

&lt;p&gt;The &lt;strong&gt;mixed flag&lt;/strong&gt; is a &lt;u&gt;default flag&lt;/u&gt;, meaning if we run just &lt;code&gt;git reset&lt;/code&gt; then the &lt;strong&gt;mixed flag&lt;/strong&gt; will work anyway.&lt;/p&gt;

&lt;p&gt;Go ahead and make a couple of commits, by now you should be familiar with the whole process...&lt;/p&gt;

&lt;p&gt;When we run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --mixed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYdnaOFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fivoat987mdn7e9lg078.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYdnaOFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fivoat987mdn7e9lg078.gif" alt="git-reset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The commits seem to be removed from the history of commits but they don't seem to have been physically removed. This is because we only removed them from the staging area. We can check this by running the &lt;code&gt;git status&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q64wRyXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8d9vyk8l0kxjz23uz0f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q64wRyXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8d9vyk8l0kxjz23uz0f.gif" alt="git-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To completely remove files after running the &lt;code&gt;git reset --mixed&lt;/code&gt; command, we need to run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVqxZV05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjq7yggjdpct8lr5b2w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVqxZV05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjq7yggjdpct8lr5b2w.gif" alt="git-checkout."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see the &lt;code&gt;git reset&lt;/code&gt; command with the &lt;code&gt;--mixed&lt;/code&gt; flag only deletes the commits from the history and also unstages the files from the staging area, they end up in the working directory.&lt;/p&gt;

&lt;h4&gt;Soft&lt;/h4&gt;

&lt;p&gt;There is a small difference between the &lt;code&gt;--soft&lt;/code&gt; flag and the &lt;code&gt;--mixed&lt;/code&gt; flag. Just like the latter, the &lt;code&gt;--soft&lt;/code&gt; flag is followed by the unique ID of the commit before the actual commits you want to change. Also like &lt;code&gt;--mixed&lt;/code&gt; when you run the command it will remove the commits from the history. But a key difference is the files are maintained at the staging area. We can check this by running &lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--URxzO_Zm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uqb83g71s8ecogfgijb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URxzO_Zm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uqb83g71s8ecogfgijb.gif" alt="git-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see both files are green, meaning they are still in the staging area. To remove them from the staging area we have to run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will remove them from the staging area and finally to delete the files permanently. We run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases &lt;code&gt;--mixed&lt;/code&gt; and &lt;code&gt;--soft&lt;/code&gt;, we go through a couple of steps in order to make the changes to the files.&lt;/p&gt;

&lt;h4&gt;Hard&lt;/h4&gt;

&lt;p&gt;If you want to remove the commits in history and delete the files simultaneously, you can simply use &lt;code&gt;git reset&lt;/code&gt; with the &lt;code&gt;--hard&lt;/code&gt; flag. We can run the command as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is followed by the commit (ID) &lt;strong&gt;BEFORE&lt;/strong&gt; the commits you want to delete. Remember this will permanently delete your files!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CltQKged--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6m1r0zftdolppb89y18.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CltQKged--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6m1r0zftdolppb89y18.gif" alt="git-reset-hard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Git Ignore&lt;/h3&gt;

&lt;p&gt;We covered a bunch so far, how we can track files, how to add them to the staging area, how to make commits and also how to undo things. This seems like the right time to discuss how we can ignore files or folders from tracking, meaning the files and folders that should not be recognised by Git.&lt;/p&gt;

&lt;p&gt;When you are working on projects, you might have some files that you actually don't need to keep track of because it might slow down your workflow. Here we will introduce a solution to ignore those particular files.&lt;/p&gt;

&lt;p&gt;In Git we call this the &lt;strong&gt;.gitignore file&lt;/strong&gt;, really it doesn't have a name, you just need to specify its extension which is &lt;strong&gt;.gitignore&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First we need to create a new file and call it &lt;code&gt;.gitignore&lt;/code&gt; then we can check the status and see that it is not being tracked. To see how it works, lets create two text files inside the same directory as the .gitignore file. Once we create them we can check the status and see that we now have three files that are untracked. You can also notice this by there green color and the &lt;strong&gt;U&lt;/strong&gt; next to the files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxBHB3t5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a0lvp1smig8i2pioibx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxBHB3t5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a0lvp1smig8i2pioibx.gif" alt="git-ignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To let Git know we don't want files/folders to be tracked, we need to insert them into the &lt;code&gt;.gitignore&lt;/code&gt; file. We insert them by specifying the path of the files relative to the path of the .gitignore file.&lt;/p&gt;

&lt;p&gt;When we added the files correctly inside the &lt;code&gt;.gitignore&lt;/code&gt; file and save. We will no longer have a green color to the files or have the &lt;strong&gt;U&lt;/strong&gt; next to them. Immediately they will be ignored by Git.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI-YdO2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wp1qq0npoacdwz6x7vm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI-YdO2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wp1qq0npoacdwz6x7vm.gif" alt="git-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to discuss something that I think you need to be aware of when working with &lt;strong&gt;.gitignore&lt;/strong&gt;, Suppose we wanted Git to ignore our index.html and style.css file. We would add them to the &lt;code&gt;.gitignore&lt;/code&gt; file and save. You would think that they would be ignored by Git, but if we modify those files again and check the status, we see Git has still been tracking our files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZz95vPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxx4w305glqxs7d75oyl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZz95vPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxx4w305glqxs7d75oyl.gif" alt="git-ignore-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason for this behaviour is because those two files have already been modified before we even created the &lt;code&gt;.gitignore&lt;/code&gt; file. In order to fix this, we have to delete the cache from the history. We do that by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rm -r cached .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run this command we cleaned the cache.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSBSkj4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoqwf9liy38r9233zhqh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSBSkj4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoqwf9liy38r9233zhqh.gif" alt="git-ignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some extra tips for working with the &lt;code&gt;.gitignore&lt;/code&gt; file. As you may have noticed every time we want to have a file ignored by Git, we have to insert the path of that file inside the &lt;code&gt;.gitignore&lt;/code&gt; file. Imagine we had hundreds of files that we needed Git to ignore, having to insert them one-by-one would be ridiculously slow. Therefore we get to use a special character for specifying all files. This character is the &lt;strong&gt;asterisks&lt;/strong&gt; *&lt;/p&gt;

&lt;p&gt;For instance we have a folder named newFolder and it contains hundreds of files we want to ignore, to select all of them we use the asterisk:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;newFolder/*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But say for instance, the same folder had some images or style.css files inside that we needed for our project, the only files we want to ignore in this folder is the text files. If we use the command from before, Git would ignore all files in the folder. To fix this we can specify the extension that Git should ignore by using the asterisk along with the extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;newFolder/*.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That concludes this chapter, I think we've covered &lt;strong&gt;Git&lt;/strong&gt; so it's time to explore &lt;strong&gt;GitHub&lt;/strong&gt; next. I hope you found it enjoyable, if you did leave a heart or you can just &lt;code&gt;.gitignore&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2t888V2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9m9pfjcidqqbnlr6ce3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2t888V2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9m9pfjcidqqbnlr6ce3.gif" alt="serena"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A FRAMEWORK FOR SYSTEM DESIGN INTERVIEWS </title>
      <author>Salah Elhossiny</author>
      <pubDate>Sat, 04 Sep 2021 07:04:50 +0000</pubDate>
      <link>https://dev.to/salah856/a-framework-for-system-design-interviews-1onl</link>
      <guid>https://dev.to/salah856/a-framework-for-system-design-interviews-1onl</guid>
      <description>&lt;p&gt;In this article, I would like to share some insights about process of system design interview from &lt;a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF"&gt;  System design interview book &lt;/a&gt; .  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-4step-process-for-effective-system-design-interview"&gt;
  &lt;/a&gt;
  A 4-step process for effective system design interview
&lt;/h1&gt;

&lt;p&gt;Every system design interview is different. A great system design interview is open-ended and there is no one-size-fits-all solution. However, there are steps and common ground to cover in every system design interview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-understand-the-problem-and-establish-design-scope"&gt;
  &lt;/a&gt;
  Step 1 - Understand the problem and establish design scope
&lt;/h2&gt;

&lt;p&gt;"Why did the tiger roar?"&lt;/p&gt;

&lt;p&gt;A hand shot up in the back of the class.&lt;br&gt;
"Yes, Jimmy?", the teacher responded.&lt;br&gt;
"Because he was HUNGRY".&lt;br&gt;
"Very good Jimmy."&lt;/p&gt;

&lt;p&gt;Throughout his childhood, Jimmy has always been the first to answer questions in the class.&lt;/p&gt;

&lt;p&gt;Whenever the teacher asks a question, there is always a kid in the classroom who loves to take a crack at the question, no matter if he knows the answer or not. That is Jimmy. &lt;/p&gt;

&lt;p&gt;Jimmy is an ace student. He takes pride in knowing all the answers fast. In exams, he is usually the first person to finish the questions. He is a teacher's top choice for any academic competition.&lt;/p&gt;

&lt;p&gt;DON'T be like Jimmy.&lt;/p&gt;

&lt;p&gt;In a system design interview, giving out an answer quickly without thinking gives you no bonus points. Answering without a thorough understanding of the requirements is a huge red&lt;br&gt;
flag as the interview is not a trivia contest. There is no right answer.&lt;br&gt;
So, do not jump right in to give a solution. Slow down. Think deeply and ask questions to&lt;br&gt;
clarify requirements and assumptions. This is extremely important.&lt;/p&gt;

&lt;p&gt;As an engineer, we like to solve hard problems and jump into the final design; however, this&lt;br&gt;
approach is likely to lead you to design the wrong system. One of the most important skills as an engineer is to ask the right questions, make the proper assumptions, and gather all the information needed to build a system. So, do not be afraid to ask questions.&lt;/p&gt;

&lt;p&gt;When you ask a question, the interviewer either answers your question directly or asks you to&lt;br&gt;
make your assumptions. If the latter happens, write down your assumptions on the whiteboard or paper. You might need them later.&lt;/p&gt;

&lt;p&gt;What kind of questions to ask? Ask questions to understand the exact requirements. Here is a list of questions to help you get started:&lt;/p&gt;

&lt;p&gt;• What specific features are we going to build?&lt;br&gt;
• How many users does the product have?&lt;br&gt;
• How fast does the company anticipate to scale up? What are the anticipated scales in 3 months, 6 months, and a year?&lt;br&gt;
• What is the company’s technology stack? What existing services you might leverage to simplify the design?&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
If you are asked to design a news feed system, you want to ask questions that help you clarify the requirements. The conversation between you and the interviewer might look like this:&lt;/p&gt;

&lt;p&gt;Candidate: Is this a mobile app? Or a web app? Or both?&lt;br&gt;
Interviewer: Both.&lt;br&gt;
Candidate: What are the most important features for the product?&lt;/p&gt;

&lt;p&gt;Interviewer: Ability to make a post and see friends’ news feed.&lt;/p&gt;

&lt;p&gt;Candidate: Is the news feed sorted in reverse chronological order or a particular order? The particular order means each post is given a different weight. For instance, posts from your close friends are more important than posts from a group.&lt;/p&gt;

&lt;p&gt;Interviewer: To keep things simple, let us assume the feed is sorted by reverse chronological order.&lt;/p&gt;

&lt;p&gt;Candidate: How many friends can a user have?&lt;br&gt;
Interviewer: 5000&lt;/p&gt;

&lt;p&gt;Candidate: What is the traffic volume?&lt;br&gt;
Interviewer: 10 million daily active users (DAU)&lt;/p&gt;

&lt;p&gt;Candidate: Can feed contain images, videos, or just text?&lt;br&gt;
Interviewer: It can contain media files, including both images and videos.&lt;/p&gt;

&lt;p&gt;Above are some sample questions that you can ask your interviewer. It is important to understand the requirements and clarify ambiguities&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-propose-highlevel-design-and-get-buyin"&gt;
  &lt;/a&gt;
  Step 2 - Propose high-level design and get buy-in
&lt;/h2&gt;

&lt;p&gt;In this step, we aim to develop a high-level design and reach an agreement with the interviewer on the design. It is a great idea to collaborate with the interviewer during the&lt;br&gt;
process.&lt;/p&gt;

&lt;p&gt;• Come up with an initial blueprint for the design. Ask for feedback. Treat your interviewer as a teammate and work together. Many good interviewers love to talk and get involved.&lt;/p&gt;

&lt;p&gt;• Draw box diagrams with key components on the whiteboard or paper. This might include clients (mobile/web), APIs, web servers, data stores, cache, CDN, message queue, etc.&lt;/p&gt;

&lt;p&gt;• Do back-of-the-envelope calculations to evaluate if your blueprint fits the scale constraints. Think out loud. Communicate with your interviewer if back-of-the-envelope is&lt;br&gt;
necessary before diving into it. If possible, go through a few concrete use cases. This will help you frame the high-level design. It is also likely that the use cases would help you discover edge cases you have not yet considered. Should we include API endpoints and database schema here? This depends on the problem.&lt;/p&gt;

&lt;p&gt;For large design problems like “Design Google search engine”, this is a bit of too low level.&lt;/p&gt;

&lt;p&gt;For a problem like designing the backend for a multi-player poker game, this is a fair game. Communicate with your interviewer.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Let us use “Design a news feed system” to demonstrate how to approach the high-level design. &lt;/p&gt;

&lt;p&gt;Here you are not required to understand how the system actually works.  At the high level, the design is divided into two flows: feed publishing and news feed building.&lt;/p&gt;

&lt;p&gt;• Feed publishing: when a user publishes a post, corresponding data is written into cache/database, and the post will be populated into friends’ news feed.&lt;/p&gt;

&lt;p&gt;• Newsfeed building: the news feed is built by aggregating friends’ posts in a reverse chronological order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pFeTzLrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0ki07feflsxcpn3r5jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFeTzLrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0ki07feflsxcpn3r5jd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2BUa9XNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghvfpp9cfvpm69ok0lgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2BUa9XNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghvfpp9cfvpm69ok0lgw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-design-deep-dive"&gt;
  &lt;/a&gt;
  Step 3 - Design deep dive
&lt;/h2&gt;

&lt;p&gt;At this step, you and your interviewer should have already achieved the following objectives:&lt;/p&gt;

&lt;p&gt;• Agreed on the overall goals and feature scope&lt;br&gt;
• Sketched out a high-level blueprint for the overall design&lt;br&gt;
• Obtained feedback from your interviewer on the high-level design&lt;br&gt;
• Had some initial ideas about areas to focus on in deep dive based on her feedback&lt;/p&gt;

&lt;p&gt;You shall work with the interviewer to identify and prioritize components in the architecture.&lt;/p&gt;

&lt;p&gt;It is worth stressing that every interview is different. Sometimes, the interviewer may give off hints that she likes focusing on high-level design. Sometimes, for a senior candidate interview, the discussion could be on the system performance characteristics, likely focusing on the bottlenecks and resource estimations. &lt;/p&gt;

&lt;p&gt;In most cases, the interviewer may want you to dig into details of some system components. For URL shortener, it is interesting to dive into the hash function design that converts a long URL to a short one. &lt;/p&gt;

&lt;p&gt;For a chat system, how to reduce latency and how to support online/offline status are two interesting topics.&lt;/p&gt;

&lt;p&gt;Time management is essential as it is easy to get carried away with minute details that do not demonstrate your abilities. You must be armed with signals to show your interviewer. Try not to get into unnecessary details. For example, talking about the EdgeRank algorithm of&lt;br&gt;
Facebook feed ranking in detail is not ideal during a system design interview as this takes&lt;br&gt;
much precious time and does not prove your ability in designing a scalable system.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;At this point, we have discussed the high-level design for a news feed system, and the interviewer is happy with your proposal. Next, we will investigate two of the most important use cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Feed publishing&lt;/li&gt;
&lt;li&gt;News feed retrieval&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMJY4W1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo233ec9bn4x312dajti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMJY4W1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo233ec9bn4x312dajti.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpD-Rrbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovrx928cu0y6nxy2amf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpD-Rrbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovrx928cu0y6nxy2amf1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-wrap-up"&gt;
  &lt;/a&gt;
  Step 4 - Wrap up
&lt;/h2&gt;

&lt;p&gt;In this final step, the interviewer might ask you a few follow-up questions or give you the freedom to discuss other additional points. Here are a few directions to follow:&lt;/p&gt;

&lt;p&gt;• The interviewer might want you to identify the system bottlenecks and discuss potential improvements. Never say your design is perfect and nothing can be improved. There is&lt;br&gt;
always something to improve upon. This is a great opportunity to show your critical thinking and leave a good final impression.&lt;/p&gt;

&lt;p&gt;• It could be useful to give the interviewer a recap of your design. This is particularly important if you suggested a few solutions. Refreshing your interviewer’s memory can be helpful after a long session.&lt;/p&gt;

&lt;p&gt;• Error cases (server failure, network loss, etc.) are interesting to talk about.&lt;/p&gt;

&lt;p&gt;• Operation issues are worth mentioning. How do you monitor &lt;br&gt;
metrics and error logs? How to roll out the system?&lt;/p&gt;

&lt;p&gt;• How to handle the next scale curve is also an interesting topic. For example, if your current design supports 1 million users, what changes do you need to make to support 10 million users?&lt;/p&gt;

&lt;p&gt;• Propose other refinements you need if you had more time.&lt;/p&gt;

&lt;p&gt;To wrap up, we summarize a list of the Dos and Don’ts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dos"&gt;
  &lt;/a&gt;
  Dos
&lt;/h3&gt;

&lt;p&gt;• Always ask for clarification. Do not assume your assumption is correct.&lt;br&gt;
• Understand the requirements of the problem.&lt;br&gt;
• There is neither the right answer nor the best answer. A solution designed to solve the problems of a young startup is different from that of an established company with millions of users. Make sure you understand the requirements.&lt;/p&gt;

&lt;p&gt;• Let the interviewer know what you are thinking. Communicate with your interview.&lt;/p&gt;

&lt;p&gt;• Suggest multiple approaches if possible.&lt;br&gt;
• Once you agree with your interviewer on the blueprint, go into details on each component. Design the most critical components first.&lt;/p&gt;

&lt;p&gt;• Bounce ideas off the interviewer. A good interviewer works with you as a teammate.&lt;br&gt;
• Never give up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#donts"&gt;
  &lt;/a&gt;
  Don'ts
&lt;/h3&gt;

&lt;p&gt;• Don't be unprepared for typical interview questions.&lt;br&gt;
• Don’t jump into a solution without clarifying the requirements and assumptions.&lt;/p&gt;

&lt;p&gt;• Don’t go into too much detail on a single component in the beginning. Give the high-level design first then drills down.&lt;br&gt;
• If you get stuck, don't hesitate to ask for hints.&lt;br&gt;
• Again, communicate. Don't think in silence.&lt;/p&gt;

&lt;p&gt;• Don’t think your interview is done once you give the design. You are not done until your interviewer says you are done. Ask for feedback early and often.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-allocation-on-each-step"&gt;
  &lt;/a&gt;
  Time allocation on each step
&lt;/h2&gt;

&lt;p&gt;System design interview questions are usually very broad, and 45 minutes or an hour is not enough to cover the entire design. Time management is essential. How much time should you spend on each step? &lt;/p&gt;

&lt;p&gt;The following is a very rough guide on distributing your time in a 45-minute interview session. Please remember this is a rough estimate, and the actual time distribution depends on the scope of the problem and the requirements from the interviewer&lt;/p&gt;

&lt;p&gt;Step 1 Understand the problem and establish design scope: 3 - 10 minutes&lt;/p&gt;

&lt;p&gt;Step 2 Propose high-level design and get buy-in: 10 - 15 minutes&lt;/p&gt;

&lt;p&gt;Step 3 Design deep dive: 10 - 25 minutes&lt;/p&gt;

&lt;p&gt;Step 4 Wrap: 3 - 5 minutes&lt;/p&gt;

</description>
      <category>systems</category>
      <category>design</category>
    </item>
    <item>
      <title>Getting Started with Appwrite Realtime for Flutter</title>
      <author>Damodar Lohani</author>
      <pubDate>Sat, 04 Sep 2021 06:46:19 +0000</pubDate>
      <link>https://dev.to/appwrite/getting-started-with-appwrite-realtime-for-flutter-4229</link>
      <guid>https://dev.to/appwrite/getting-started-with-appwrite-realtime-for-flutter-4229</guid>
      <description>&lt;p&gt;Realtime service is one of the most sought after features of Appwrite and it's now ready to play with! It's been a while as we already had realtime alpha release and a getting started tutorial to go with it. In this tutorial, we will dive into the details and understand how to develop a Flutter app leveraging Appwrite's realtime capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  📝 Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to continue with this tutorial, you need to have access to an Appwrite console with a project. If you have not already installed Appwrite, please do so. Installing Appwrite is really simple following Appwrite's official &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;. Installation should only take around 2 minutes. Once installed, login to your console and &lt;strong&gt;create a new Project&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-database"&gt;
  &lt;/a&gt;
  💾 Setup Database
&lt;/h2&gt;

&lt;p&gt;Once you have logged in to the console and selected your project, from the left sidebar in the dashboard click on the &lt;strong&gt;Database&lt;/strong&gt; option to get to the database page.&lt;/p&gt;

&lt;p&gt;Once on the database page, click on the &lt;strong&gt;Add Collection&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xd-YwBoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/032v3z2l3piultfmrre9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xd-YwBoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/032v3z2l3piultfmrre9.png" alt="Create Collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the dialog that pops up, set the collection name to &lt;strong&gt;Items&lt;/strong&gt; and click on the &lt;strong&gt;Create&lt;/strong&gt; button to create the collection, and you will be redirected to the new collection's page where we can define its rules. Define the following rules, then click the &lt;strong&gt;Update&lt;/strong&gt; button. Also note down the &lt;strong&gt;Collection ID&lt;/strong&gt; from the right side of the settings page as we will need that later in our code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Name&lt;/li&gt;
&lt;li&gt;Key: name&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxeDPXoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0so4ggo1mb4d8vs2eyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxeDPXoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0so4ggo1mb4d8vs2eyb.png" alt="Add Collection Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the permissions, set the read and right permission both to &lt;code&gt;*&lt;/code&gt; so that anyone can read and write.&lt;/p&gt;

&lt;p&gt;Now that the collection is created we need to create a user. This user will be used to create sessions when we authenticate with the realtime API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-flutter-project-and-dependencies"&gt;
  &lt;/a&gt;
  ⚙️ Setup Flutter Project and Dependencies
&lt;/h2&gt;

&lt;p&gt;We will begin by creating a new Flutter project. From your terminal in your project folder, type the following command to create a new Flutter project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter create flappwrite_realtime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we add the Appwrite's SDK, to do that from your terminal, in your newly created project directory, type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flappwrite_realtime
flutter pub add appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will add Appwrite's latest Flutter SDK with realtime service, as a dependency to your Flutter project.&lt;/p&gt;

&lt;p&gt;Once you have installed the dependency and run &lt;code&gt;flutter pub get&lt;/code&gt; you should be ready to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-add-flutter-platforms"&gt;
  &lt;/a&gt;
  ➕️ Add Flutter Platforms
&lt;/h2&gt;

&lt;p&gt;To initialize the Appwrite SDK and start interacting with Appwrite services, you first need to add a new Flutter platform to your project. If you are running on Flutter web, you can simply add web platform instead of Flutter platforms. To add a new platform, go to your Appwrite console, select your project, and click the &lt;strong&gt;Add Platform&lt;/strong&gt; button on the project Dashboard. Choose either Flutter or web platform.&lt;/p&gt;

&lt;p&gt;If you choose web, add &lt;strong&gt;localhost&lt;/strong&gt; as the host name. If you choose Flutter, from the dialog, choose one of the tabs, based on which platform you plan to run on. You can add multiple platforms similarly.&lt;/p&gt;

&lt;p&gt;If you choose to add a Android platform, on the dialog box add the details. Add your app name and package name. Your package name is generally the &lt;code&gt;applicationId&lt;/code&gt; in your app-level &lt;code&gt;build.gradle&lt;/code&gt;&lt;br&gt;
file. You may also find your package name in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZ_P8dWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0p73qo6b1im45xq0f80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZ_P8dWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0p73qo6b1im45xq0f80.png" alt="Add Flutter Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By registering a new platform, you are allowing your app to communicate with the Appwrite API.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  👩‍🔧 Home Page
&lt;/h2&gt;

&lt;p&gt;We will start by creating a simple stateful widget that will list all the items from our items collection, and also allow adding new items as well as deleting existing items. Our Home page will also connect to Appwrite's realtime service and display changes in the items collection by updating the UI as they happen. So, let's create our &lt;strong&gt;HomePage&lt;/strong&gt; widget. Modify the code in &lt;strong&gt;lib/main.dart&lt;/strong&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'FlAppwrite Realtime Demo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;primarySwatch:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_HomePageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomePageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[];&lt;/span&gt;
  &lt;span class="n"&gt;TextEditingController&lt;/span&gt; &lt;span class="n"&gt;_nameController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextEditingController&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'FlAppwrite Realtime Demo'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
            &lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="o"&gt;]),&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// dialog to add new item&lt;/span&gt;
          &lt;span class="n"&gt;showDialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;context:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AlertDialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new item'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;content:&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;controller:&lt;/span&gt; &lt;span class="n"&gt;_nameController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;actions:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Cancel'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// add new item&lt;/span&gt;
                    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_nameController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;_nameController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                      &lt;span class="n"&gt;_addItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                  &lt;span class="o"&gt;},&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;],&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_addItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;millisecondsSinceEpoch&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;initState&lt;/strong&gt; function of the HomePage, we will create and initialize our Appwrite client, as well as subscribe to realtime changes in documents in our &lt;strong&gt;items&lt;/strong&gt; collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;RealtimeSubscription&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;http://localhost/v1&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// your endpoint&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//your project id&lt;/span&gt;
        &lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;strong&gt;dispose&lt;/strong&gt; method, close the subscription.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us setup different variables and functions to load the initial data, listen to changes in the collection documents and update the UI to reflect the changes in realtime.&lt;/p&gt;

&lt;p&gt;First, initialize our items collection id and and setup a function to load initial data when the application first starts. For that we will also setup Appwrite database service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;collectionId&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//replace with your collection id, which can be found in your collection's settings page.&lt;/span&gt;

&lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@override&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;http://localhost/v1&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// your endpoint&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//your project id&lt;/span&gt;
        &lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;loadItems&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;loadItems&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;listDocuments&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;collectionId:&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'documents'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to be able to add data to our collection, we must first create a session. Let's add a login function and call it from our &lt;code&gt;initState&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@override&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will setup our subscribe function that will listen to changes to documents in our items collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Realtime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;
      &lt;span class="s"&gt;'collections.&amp;lt;collectionId&amp;gt;.documents'&lt;/span&gt;
    &lt;span class="o"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//replace &amp;lt;collectionId&amp;gt; with the ID of your items collection, which can be found in your collection's settings page.&lt;/span&gt;

    &lt;span class="c1"&gt;// listen to changes&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;listen&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// data will consist of `event` and a `payload`&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"database.documents.create"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"database.documents.delete"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeWhere&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's modify our &lt;code&gt;_addItem&lt;/code&gt; function to add item to Appwrite's database and see how the view updates in realtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;collectionId:&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;data:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="nl"&gt;read:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="nl"&gt;write:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us also modify our &lt;code&gt;ListTile&lt;/code&gt; widget to add a delete button that will allow us to delete the item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
    &lt;span class="nl"&gt;trailing:&lt;/span&gt; &lt;span class="n"&gt;IconButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;collectionId:&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;documentId:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complete-example"&gt;
  &lt;/a&gt;
  Complete Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'FlAppwrite Realtime Demo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;primarySwatch:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_HomePageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomePageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[];&lt;/span&gt;
  &lt;span class="n"&gt;TextEditingController&lt;/span&gt; &lt;span class="n"&gt;_nameController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextEditingController&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;RealtimeSubscription&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'COLLECTION_ID'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;http://localhost/v1&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// your endpoint&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'YOUR_PROJECT_ID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//your project id&lt;/span&gt;
        &lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;loadItems&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;loadItems&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;listDocuments&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;collectionId:&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'documents'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
      &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Realtime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;
      &lt;span class="s"&gt;'collections.&amp;lt;collectionId&amp;gt;.documents'&lt;/span&gt;
    &lt;span class="o"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//replace &amp;lt;collectionId&amp;gt; with the ID of your items collection, which can be found in your collection's settings page.&lt;/span&gt;

    &lt;span class="c1"&gt;// listen to changes&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;listen&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// data will consist of `event` and a `payload`&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"database.documents.create"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"database.documents.delete"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeWhere&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'FlAppwrite Realtime Demo'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
              &lt;span class="nl"&gt;trailing:&lt;/span&gt; &lt;span class="n"&gt;IconButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;collectionId:&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;documentId:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
                  &lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;},&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="o"&gt;]),&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// dialog to add new item&lt;/span&gt;
          &lt;span class="n"&gt;showDialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;context:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AlertDialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new item'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;content:&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;controller:&lt;/span&gt; &lt;span class="n"&gt;_nameController&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;actions:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Cancel'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;TextButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// add new item&lt;/span&gt;
                    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_nameController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;_nameController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                      &lt;span class="n"&gt;_addItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                  &lt;span class="o"&gt;},&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;],&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_addItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;collectionId:&lt;/span&gt; &lt;span class="n"&gt;itemsCollection&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;data:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
          &lt;span class="nl"&gt;read:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
          &lt;span class="nl"&gt;write:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🥂 Conclusion
&lt;/h2&gt;

&lt;p&gt;I enjoyed a lot writing tutorial and I hope you enjoyed learning and building Flutter application with Appwrite Realtime service. The full source code for this application is available on my &lt;a href="https://github.com/lohanidamodar/flappwrite_realtime"&gt;GitHub repository&lt;/a&gt;. Feel free to get back to us if you have any queries or comments. Excited to see what the community will build with Flutter and Appwrite Realtime. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  🎓 Learn More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/getting-started-with-flutter"&gt;Getting Started With Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/playground-for-flutter"&gt;Flutter Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flutter</category>
      <category>news</category>
      <category>opensource</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Best Back-end Web Development Frameworks</title>
      <author>CodeSnail 🐌</author>
      <pubDate>Sat, 04 Sep 2021 06:38:46 +0000</pubDate>
      <link>https://dev.to/soniarpit/best-back-end-web-development-frameworks-2om4</link>
      <guid>https://dev.to/soniarpit/best-back-end-web-development-frameworks-2om4</guid>
      <description>&lt;p&gt;Choosing the best backend web development framework is a little bit harder for beginners. With the so many availabilities of web frameworks, it’s confusing to choose the best web framework according to your skills.&lt;/p&gt;

&lt;p&gt;Here are best web development frameworks. Sequence doesn't matter, every frameworks are best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-django"&gt;
  &lt;/a&gt;
  1. Django
&lt;/h2&gt;

&lt;p&gt;Django is one of the most popular web frameworks written in python. Django framework follows Model View Template (MVT) pattern. If you already know python programming or your background is python then this is the best web framework.&lt;/p&gt;

&lt;p&gt;This back-end framework is optimal, reduced coding, pluggability, greater reusability, and faster development.&lt;/p&gt;

&lt;p&gt;Django Rest Framework is also best and easier to make REST API&lt;/p&gt;

&lt;p&gt;Personally, I used this framework.&lt;/p&gt;

&lt;p&gt;Tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codesnail.com/django-todo-app-tutorial/"&gt;Todo app in Django&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.codesnail.com/django-blog-tutorial/"&gt;Blog app in Django&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-laravel"&gt;
  &lt;/a&gt;
  2. Laravel
&lt;/h2&gt;

&lt;p&gt;Written in PHP&lt;/p&gt;

&lt;p&gt;Laravel is a PHP framework that follows Model View Controller (MVC) architecture. People who love PHP can easily learn Laravel.&lt;/p&gt;

&lt;p&gt;It offers a modular packaging system equipped with a dedicated dependency manager. Laravel is rated as one of the best web frameworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-flask"&gt;
  &lt;/a&gt;
  3. Flask
&lt;/h2&gt;

&lt;p&gt;Written in Python&lt;/p&gt;

&lt;p&gt;Flask is a Python-based micro web framework. It is micro in the sense that Flask aims to keep the core simple but extensible. Developers that have a grasp of Python can easily adapt to working with Flask. As a micro-framework, it’s perfect for applications that require heavy customization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-expressjs"&gt;
  &lt;/a&gt;
  4. Express.js
&lt;/h2&gt;

&lt;p&gt;Written in JavaScript&lt;/p&gt;

&lt;p&gt;Express.js, aka Express, is a backend web application framework designed for building web applications and APIs. It provides a thin layer of fundamental web app features. And with a myriad of HTTP utility methods and middleware, creating a robust API is quick and easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ruby-on-rails"&gt;
  &lt;/a&gt;
  5. Ruby on Rails
&lt;/h2&gt;

&lt;p&gt;Written in Ruby&lt;/p&gt;

&lt;p&gt;Ruby on Rails, also known as Rails, is a server-side framework written in Ruby. It offers default structures for a database, web pages, and web service. Scalability is one of the main reasons for many users to opt for Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Read full article: &lt;a href="https://www.codesnail.com/backend-web-development-frameworks/"&gt;Best Back-end Web Development Frameworks&lt;/a&gt;&lt;/p&gt;

</description>
      <category>framework</category>
      <category>webdev</category>
      <category>django</category>
      <category>laravel</category>
    </item>
    <item>
      <title>My niche list of useful tools (will be updating regularly)</title>
      <author>Anjali Vanga</author>
      <pubDate>Sat, 04 Sep 2021 06:27:58 +0000</pubDate>
      <link>https://dev.to/anjalivanga/my-niche-list-of-useful-tools-will-be-updating-regularly-4i54</link>
      <guid>https://dev.to/anjalivanga/my-niche-list-of-useful-tools-will-be-updating-regularly-4i54</guid>
      <description>&lt;p&gt;A seasonal gamer, developer or a tech enthusiast needs a reliable repository of tools they can go back to every time they comes across a particular problem. &lt;/p&gt;

&lt;p&gt;The field of tech is so deep and ever emerging that you can always find a unique product or tool that can entirely change the routine way of doing things. &lt;/p&gt;

&lt;p&gt;In this article, I have curated a list of product reviews, alternatives, tools and detailed guides. You can refer to this guide to discover new products and inform your self with latest scoop on all the best gaming tools.&lt;/p&gt;

&lt;p&gt;Although the products listed below might not be popular these tools and guides can come very handy to improve your productivity and in case of gamers, your entire gaming experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-razer-cortex"&gt;
  &lt;/a&gt;
  1. Razer Cortex
&lt;/h2&gt;

&lt;p&gt;Razer Cortex is a system optimization software used to improve your gaming experience and the overall performance of your PC, built by the gaming hardware manufacturer Razer. It essentially enhances your play by boosting your system performance and gives you the ability to discover the best gaming deal. &lt;a href="https://www.remote.tools/remote-work/razer-cortex-review"&gt;In this article&lt;/a&gt;, we have written a comprehensive Razer Cortex review so you know everything about this product before you decide to use it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-best-nvidia-control-panel-settings"&gt;
  &lt;/a&gt;
  2. Best Nvidia Control Panel Settings
&lt;/h2&gt;

&lt;p&gt;Optimizing your game settings to maximize the performance and overall visuals and sound of your game can be an entirely different experience. Every serious gamer dreams about a seamless high-quality gaming experience. So, &lt;a href="https://www.remote.tools/remote-work/best-nvidia-control-panel-settings"&gt;in this article&lt;/a&gt;, we have brought to you the best Nvidia Control Panel Settings in 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-best-voice-changer-for-mac-apps"&gt;
  &lt;/a&gt;
  3. Best Voice changer for Mac Apps.
&lt;/h2&gt;

&lt;p&gt;Voice changer applications are extremely popular among gamers who use them to alter their voices on Discord. A voice changer app alters the pitch of your voice to make it sound a bit funny. People use these voice modulation apps to make funny videos and audios and post them on social media. &lt;a href="https://www.remote.tools/remote-work/voice-changer-for-mac"&gt;In this article&lt;/a&gt;, we list down the best voice changer for Mac and Windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-best-iso-creator"&gt;
  &lt;/a&gt;
  4. Best ISO Creator
&lt;/h2&gt;

&lt;p&gt;The best free ISO creator software are tools that create ISO files that are essentially replicas of the content transcribed on a compact optical disc that is stored digitally on your hard drive. &lt;a href="https://www.remote.tools/remote-work/best-free-iso-creator"&gt;In this article&lt;/a&gt;, we have prepared a listicle of all the top best free ISO creator tools with a detailed review of all their functionalities and features.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Python syntaxerror: eol while scanning string literal</title>
      <author>Srinivas</author>
      <pubDate>Sat, 04 Sep 2021 06:24:18 +0000</pubDate>
      <link>https://dev.to/itsmycode/python-syntaxerror-eol-while-scanning-string-literal-1962</link>
      <guid>https://dev.to/itsmycode/python-syntaxerror-eol-while-scanning-string-literal-1962</guid>
      <description>&lt;p&gt;ItsMyCode |&lt;/p&gt;

&lt;p&gt;Python is an interpreted language that means, unlike other languages( &lt;strong&gt;Java, C++, C#, etc.&lt;/strong&gt; ), Python doesn’t convert the entire code into low-level machine code at once; rather, each line of code is executed line by line.&lt;/p&gt;

&lt;p&gt;The Syntax Error mainly occurs when the Python interpreter finds some anomalies in your code. Some of the common issues are “ &lt;strong&gt;missing out the brackets&lt;/strong&gt; ,” &lt;strong&gt;“missing quotes&lt;/strong&gt; ,” “ &lt;strong&gt;if-else mismatch&lt;/strong&gt; ,” etc.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-eol-while-scanning-string-literal-error-mean-in-python"&gt;
  &lt;/a&gt;
  What does EOL while scanning string literal error mean in Python?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;EOL&lt;/strong&gt; stands for “ &lt;strong&gt;End of line&lt;/strong&gt; ,” and the Syntax error means that we have not followed the guidelines of Python Programming. &lt;/p&gt;

&lt;p&gt;If you read the error carefully, Python is expecting a character at the end of the line. In this instance, Python expects the string closing character ( &lt;strong&gt;&lt;code&gt;"&lt;/code&gt;&lt;/strong&gt; ), which needs to be closed at the end of the line.&lt;/p&gt;

&lt;p&gt;The  &lt;strong&gt;eol while scanning string literal error&lt;/strong&gt;  in Python occurs in 3 main use cases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Missing quotation marks&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String spanning multiple lines using the wrong syntax&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mismatch of quotes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using backslash before the ending quotation mark&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#missing-quotation-marks"&gt;
  &lt;/a&gt;
  Missing quotation marks
&lt;/h2&gt;

&lt;p&gt;String in Python must be opened and closed properly with quotations marks; else, you will get a syntax error. Let’s take an example of a string that is not closed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My name is Chandler Bing)
getName()

# Output
  File "&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Projects&lt;/span&gt;\&lt;span class="n"&gt;Tryouts&lt;/span&gt;\&lt;span class="n"&gt;listindexerror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="s"&gt;", line 2
    return "&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Chandler&lt;/span&gt; &lt;span class="n"&gt;Bing&lt;/span&gt;
                                    &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EOL&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;scanning&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;literal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solution –&lt;/strong&gt;  We can easily fix this error by closing the string with the same quotation mark we used to open our string in the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My name is Chandler Bing"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Chandler&lt;/span&gt; &lt;span class="n"&gt;Bing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-spanning-multiple-lines-using-the-wrong-syntax"&gt;
  &lt;/a&gt;
  String spanning multiple lines using the wrong syntax
&lt;/h2&gt;

&lt;p&gt;In some cases, the string value can span multiple lines if you don’t use a proper syntax in the multi-line string, then Python will throw  &lt;strong&gt;eol while scanning string literal error.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"This is Chandler Bing and i am one of the famous actor in the 
    TV Series called Friends. Welcome to My world"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"c:\Projects\Tryouts\listindexerror.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"This is Chandler Bing and i am one of the famous actor in the 
                                                                            ^
SyntaxError: EOL while scanning string literal
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Solution – *&lt;/em&gt; If you have a multi-line string in Python, the best way to declare it is by enclosing it using triple quotes. &lt;/p&gt;

&lt;p&gt;Either enclose it by using 3 single quotation*&lt;em&gt;&lt;code&gt;(''' Hello ''')&lt;/code&gt;&lt;/em&gt;* marks or 3 double quotation &lt;strong&gt;&lt;code&gt;(""" Hello """)&lt;/code&gt;&lt;/strong&gt; marks to resolve the issue. &lt;/p&gt;

&lt;p&gt;Alternatively, you can declare the string in one line and use &lt;strong&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/strong&gt; to split wherever required into multi-line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""This is Chandler Bing and i am one of the famous actor in the 
    TV Series called Friends. Welcome to My world"""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Chandler&lt;/span&gt; &lt;span class="n"&gt;Bing&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;famous&lt;/span&gt; &lt;span class="n"&gt;actor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; 
    &lt;span class="n"&gt;TV&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;Friends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mismatch-of-quotes"&gt;
  &lt;/a&gt;
  Mismatch of quotes
&lt;/h2&gt;

&lt;p&gt;The type of quote used to open a string should be the same as closing the string that means if you have used single quotes &lt;strong&gt;(&lt;code&gt;'&lt;/code&gt;)&lt;/strong&gt; to open a string, do use single quotes &lt;strong&gt;(&lt;code&gt;'&lt;/code&gt;)&lt;/strong&gt; to close a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World'
    print(message)

getMessage()

# Output
 File "&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Projects&lt;/span&gt;\&lt;span class="n"&gt;Tryouts&lt;/span&gt;\&lt;span class="n"&gt;listindexerror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="s"&gt;", line 2
    message= "&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="s"&gt;'
                          ^
SyntaxError: EOL while scanning string literal
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solution –&lt;/strong&gt;  Changing the quotation mark*&lt;em&gt;(&lt;code&gt;"&lt;/code&gt;)&lt;/em&gt;* to match the beginning of the string will resolve the issue here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-backslash-before-the-ending-quotation-mark"&gt;
  &lt;/a&gt;
  Using backslash before the ending quotation mark
&lt;/h2&gt;

&lt;p&gt;In storing the directory path in a variable, we often use backlash, which will lead to  &lt;strong&gt;eol while scanning string literal error.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It causes a Syntax error because Python interprets backslash*&lt;em&gt;&lt;code&gt;(\)&lt;/code&gt;&lt;/em&gt;* as an escape sequence. So, in this case, it will treat both &lt;strong&gt;&lt;code&gt;(\")&lt;/code&gt;&lt;/strong&gt;as a single character, and according to Python, the string is not enclosed properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Storing a directory path 
&lt;/span&gt;&lt;span class="n"&gt;folderPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"C:\Program Files\Python&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;
print(folderPath)

# Output
  File "&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Projects&lt;/span&gt;\&lt;span class="n"&gt;Tryouts&lt;/span&gt;\&lt;span class="n"&gt;listindexerror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="s"&gt;", line 2
    folderPath= "&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;\&lt;span class="n"&gt;Python&lt;/span&gt;\&lt;span class="s"&gt;"
                                          ^
SyntaxError: EOL while scanning string literal
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Solution- *&lt;/em&gt; Replace the backslash with an escape sequence, adding double backslash so that Python can interpret and execute properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Storing a directory path 
&lt;/span&gt;&lt;span class="n"&gt;folderPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Program Files&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Python&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folderPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Program&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;\&lt;span class="n"&gt;Python&lt;/span&gt;\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The post &lt;a href="https://itsmycode.com/python-syntaxerror-eol-while-scanning-string-literal/"&gt;Python syntaxerror: eol while scanning string literal&lt;/a&gt; appeared first on &lt;a href="https://itsmycode.com"&gt;ItsMyCode&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Make your Unix terminal beautiful &amp; productive.</title>
      <author>Yogesh Devaliya</author>
      <pubDate>Sat, 04 Sep 2021 06:06:41 +0000</pubDate>
      <link>https://dev.to/yogeshdev/make-your-unix-terminal-beautiful-productive-c1d</link>
      <guid>https://dev.to/yogeshdev/make-your-unix-terminal-beautiful-productive-c1d</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuN-r9nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv0bzborsmlslls63704.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuN-r9nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv0bzborsmlslls63704.gif" alt="1600947596-terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will configure the Unix terminal/shell, upgrade the settings, install the plugins/packages to increase productivity, speed, and change the look and feel of your terminal.&lt;/p&gt;

&lt;p&gt;First of all, check the activated shell using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$SHELL&lt;/span&gt; 
or 
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The below command will display all the available shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/shells
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQwAL0NS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/default-shells.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQwAL0NS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/default-shells.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Steps to setup &amp;amp; configure the &lt;strong&gt;Terminal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-zsh-shell"&gt;Install ZSH &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-oh-my-zsh"&gt;Install &amp;amp; Configure Oh-my-zsh &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#themes"&gt;Install Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Install Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminal-preferences"&gt;Fonts &amp;amp; Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Setup Starship&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default terminal that comes with Linux(Ubuntu like OS) is Bash(Bourne Again Shell).&lt;br&gt;
In this tutorial, we will first change the shell and configure it and then install/update the plugins &amp;amp; color preferences.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-zsh-shell-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install Zsh Shell&lt;/strong&gt; ()
&lt;/h3&gt;

&lt;p&gt;First, check whether zsh is installed or not using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt; /etc/shells grep zsh
outout: 
/bin/zsh
/usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Debian(ubuntu like distros)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Redhat
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For OpenSuse
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;zypper install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Arc Linux or Manjaro
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pacman -S zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Fedora
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dnf install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For free bsd
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pkg install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For macOS
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can download it from source &lt;strong&gt;&lt;a href="http://zsh.sourceforge.net/Arc/source.html"&gt;http://zsh.sourceforge.net/Arc/source.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Official Installation Doc: &lt;strong&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH"&gt;https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check zsh version:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;zsh --version&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Zsh has been installed successfully. &lt;/p&gt;

&lt;p&gt;Now, make zsh your default terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to switch back to the default bash or any other terminal, then run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chsh -s /bin/bash or exec bash
or
chsh -s /bin/zsh or exec zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then restart the terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-oh-my-zsh"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install oh my zsh&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Oh-my-zsh is an open-source framework for managing Zsh configuration.&lt;/p&gt;

&lt;p&gt;Install via &lt;strong&gt;Curl&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install via &lt;strong&gt;wget&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Manual Installation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -Lo install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the variable of the .zshrc file to confirm that zsh is activated.&lt;/p&gt;

&lt;p&gt;Open zshrc file: &amp;gt; sudo nano ~/.zshrc&lt;br&gt;
&lt;code&gt;export ZSH="$HOME/.oh-my-zsh"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure the above variable is set inside the .zshrc file.  If it's not there then edit the file and add the above line.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To apply all the edited changes in the bashrc/zshrc file you must have to run&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 or&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we will install the omz plugins and themes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#themes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Themes&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The Theme(ZSH_THEME) is a  variable of the zshrc(omz) file. To add or update the theme, you've to first install(if theme is not installed) the theme and then update the theme(ZSH_THEME) variable.&lt;/p&gt;

&lt;p&gt;The oh-my-zsh comes with predefined themes. You can set them by setting the ZSH_THEME variable. &lt;/p&gt;

&lt;p&gt;The default and popular themes of omzs are robbyrussell and agnoster that come with omz installation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the robbyrussell theme&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ZSH_THEME="robbyrussell"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZejIoGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/robbyrussell.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZejIoGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/robbyrussell.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agnoster theme&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ZSH_THEME="agnoster"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nEgJqE1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/agnoster.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nEgJqE1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/agnoster.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many more theme options available with Oh-my-zsh. &lt;br&gt;
For example Pure, Avit, Apple, Bira, etc...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the full list of Oh-My-Zsh Themes: &lt;strong&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;https://github.com/ohmyzsh/ohmyzsh/wiki/Themes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apart from that, you can install external themes as well. Some of the popular themes are Powerlevel10k, Powerlevel9k, Spaceship, Bullet-Train, etc...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#powerlevel10k"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Powerlevel10k&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Powerlvel10k is a fully customizable and more advanced theme of zsh. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Oh my zsh&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;set the theme in ZSH_THME variable in the .zshrc file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ZSH_THEME="powerlevel10k/powerlevel10k"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWBqWVh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/powerlevel10k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWBqWVh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/powerlevel10k.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure &lt;strong&gt;Powerlevel10k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Type command:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;p10 configure&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 to start Powerlevel10k configuration.&lt;/p&gt;

&lt;p&gt;Or else you can edit the configuration file: ~/.p10k.zsh&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VuwJiJpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/configuration-wizard.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VuwJiJpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/configuration-wizard.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more details: &lt;strong&gt;&lt;a href="https://github.com/romkatv/powerlevel10k"&gt;https://github.com/romkatv/powerlevel10k&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#spaceship"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Spaceship&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Another powerful theme is Spaceship. It comes with many features and an extremely customizable zsh prompt theme. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Oh My Zsh&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/denysdovhan/spaceship-prompt.git "$ZSH_CUSTOM/themes/spaceship-prompt" --depth=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Symlink spaceship. zsh-theme to your oh-my-zsh custom themes directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then set the ZSH_THEME variable in .zshrc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ZSH_THEME="spaceship"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="/images/articles/terminal-setup/spaceship.png" class="article-body-image-wrapper"&gt;&lt;img src="/images/articles/terminal-setup/spaceship.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9iuT7_yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10276208/36086434-5de52ace-0ff2-11e8-8299-c67f9ab4e9bd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9iuT7_yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/10276208/36086434-5de52ace-0ff2-11e8-8299-c67f9ab4e9bd.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more details: &lt;strong&gt;&lt;a href="https://denysdovhan.com/spaceship-prompt/"&gt;https://denysdovhan.com/spaceship-prompt/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Plugins&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The Plugins is an set of variable(array) that contains a list of activated plugin values in the zshrc(omz) file. To add or update the plugins, you've to first install(if not installed) the plugin and then update the plugins variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=(git node autojump ... )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The values of the plugins variable should be separated by space, not by a comma.&lt;br&gt;
Now, install some of the useful plugins.&lt;br&gt;
&lt;strong&gt;Git&lt;/strong&gt;&lt;br&gt;
Just add the word git in plugins var.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=(git ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;zsh-autosuggestions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Oh-My-Zsh&lt;/p&gt;

&lt;p&gt;First, clone the directory using git&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and activate the plugin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=(... zsh-autosuggestions)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or Manual Installation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add the following line to ~/.zshrc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and restart the terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;zsh-syntax-highlighting&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Zsh&lt;/p&gt;

&lt;p&gt;Clone the git repo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
echo "source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" &amp;gt;&amp;gt; ${ZDOTDIR:-$HOME}/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then enable the plugin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Oh-My-Zsh&lt;/p&gt;

&lt;p&gt;Clone the repo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the zsh-syntax-highlighting value in plugins variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=(... zsh-syntax-highlighting)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And restart the terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGeEN_k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGeEN_k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1SQHbeJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SQHbeJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FuMLbhGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FuMLbhGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXwT-c6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXwT-c6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/hl5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;z or Zsh-z&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Z allows you to jump quickly to the directory that you visited most in the past. Z will remember the path you've entered frequently and helped you to jump around them with few keystrokes. &lt;/p&gt;

&lt;p&gt;Z uses regular expression.&lt;/p&gt;

&lt;p&gt;To enable the z plugin, assing z to your plugin variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=(... z )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzz-18Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzz-18Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/images/articles/terminal-setup/z.gif" alt="Plugin:Z"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more oh-my-zsh plugins: &lt;strong&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins"&gt;https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#terminal-preferences"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Terminal Preferences&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Install the &lt;strong&gt;Patched Fonts&lt;/strong&gt; for the terminal. The patched font will be used to display characters, glyph, icons, arrow effects, emojis. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install Powerline fonts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install fonts-powerline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more options: &lt;strong&gt;&lt;a href="https://github.com/powerline/fonts#quick-installation"&gt;https://github.com/powerline/fonts#quick-installation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download and Install the Powerline/Nerd font&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/powerline/fonts/tree/master/SourceCodePro"&gt;Source Code Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/powerline/fonts/tree/master/FiraMono"&gt;Fura/Fira Mono Powerline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/powerline/fonts/tree/master/Hack"&gt;Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/powerline/fonts"&gt;Other Poweline Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanoasis/nerd-fonts"&gt;Nerd Fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then select the preferable front in custom font inside the text tab in Preferences.&lt;br&gt;
&lt;a href="https://designdrastic.com/images/articles/terminal-setup/preference-text.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change the colors(color scheme) of the Terminal&lt;/strong&gt;&lt;br&gt;
Open the preferences and select the second tab=&amp;gt;  Colors. &lt;/p&gt;

&lt;p&gt;Available Buil-in Schemes are:&lt;br&gt;
&lt;a href="https://designdrastic.com/images/articles/terminal-setup/built-in-schemes.png"&gt;&lt;/a&gt;&lt;br&gt;
Tango &amp;amp; Solarized are recommended.&lt;/p&gt;

&lt;p&gt;You can also customize the colors according to your need in the custom tab.&lt;/p&gt;

&lt;p&gt;Next, you can make the terminal productive and more customizable with &lt;strong&gt;Starship&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#starship"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Starship&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Install and configure Starship&lt;/strong&gt;&lt;br&gt;
The Starship is "The minimal, blazing-fast, and infinitely customizable prompt for any shell!"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
Using curl&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -fsSL https://starship.rs/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Brew&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install starship
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Scoop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scoop install starship
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation, add the below line to initialize the &lt;strong&gt;Starship&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Bash(~/.bashrc)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eval "$(starship init bash)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Zsh(~/.zshrc)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eval "$(starship init zsh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Fish(~/.config/fish/config.fish)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;starship init fish | source
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;br&gt;
Starship uses a TOML file for configuration. &lt;/p&gt;

&lt;p&gt;TOML Doc: &lt;strong&gt;&lt;a href="https://github.com/toml-lang/toml"&gt;https://github.com/toml-lang/toml&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get started configuring starship, create the config file starship.toml inside .config directory. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;starship.toml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_newline = false
symbol = "➜"
[language]
symbol='*'
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For prompt configuration visit: &lt;strong&gt;&lt;a href="https://starship.rs/config/#prompt"&gt;https://starship.rs/config/#prompt&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pSVMM0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/starship/starship/master/media/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pSVMM0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/starship/starship/master/media/demo.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmuxtilix"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Tmux/Tilix&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;tmux is a program that runs in a terminal and allows multiple other terminal programs to be run inside it.&lt;/p&gt;

&lt;p&gt;Tilix is similar to Tmux. It is a tiling terminal emulator. Tmux/Tilix can split your emulator window into multiple terminal panes. &lt;br&gt;
&lt;a href="/images/articles/terminal-setup/tilix.png" class="article-body-image-wrapper"&gt;&lt;img src="/images/articles/terminal-setup/tilix.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you guys find the article helpful.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Login into AOL Mail Account

</title>
      <author>Lora Boden</author>
      <pubDate>Sat, 04 Sep 2021 05:58:00 +0000</pubDate>
      <link>https://dev.to/techservicepro/login-into-aol-mail-account-2jl9</link>
      <guid>https://dev.to/techservicepro/login-into-aol-mail-account-2jl9</guid>
      <description>&lt;p&gt;Our guide can be used to login to AOL account &amp;amp; troubleshoot problems that get up while doing this. Those who are looking for techniques to restore their electronic mail related issue can also have a look at this guide. To realise more, hold reading it.&lt;/p&gt;

&lt;p&gt;AOL mail is one of the oldest however relied on electronic mail services ruling withinside the market. Millions of clients have made it an vital part of their life and are the usage of it each day to carry out their duties of receiving and sending emails. But, the AOL Mail Login approach on occasion hit back them and compel to recheck their login approach. Issues consisting of incorrect password, username problems along with server problems are the principle ones.&lt;/p&gt;

&lt;p&gt;Although we accept as true with that during case you have a look at the AOL login steps in the correct manner then you can get proper of access in your account. Below, we have got listed the steps following which you can log in to AOL mail.&lt;/p&gt;

&lt;p&gt;You can have a look at the below-given steps and login to AOL mail. Open a web browser to your computer or the telecellsmartphone that you are the usage of.&lt;/p&gt;

&lt;p&gt;Type AOL.com withinside the net browser URL.&lt;/p&gt;

&lt;p&gt;What are the motives behind login failure?&lt;/p&gt;

&lt;p&gt;Before you exercise any troubleshooting steps, you want to check what feasible motives can stand up this kind of problem. Take a be aware at the ones reasons and figure out what can be the feasible motives.&lt;/p&gt;

&lt;p&gt;Wrong Email and password:- If you enter the wrong email and password then there may be this shape of problem wherein Aolmaillogin may be prohibited. Hence, recheck your credentials to assure that you have not executed any spelling or capitalization mistake.&lt;/p&gt;

&lt;p&gt;Internet tempo problem:- AOL Email Sign in machine can be executed with high-tempo net. Unless you have were given a brief connection to your machine, the problem at some point of sign-in can be very common.&lt;/p&gt;

&lt;p&gt;AOL Server down:- Check if the server of the AOL net webweb page is up or not. It there is a global outrage you then definately surely want to stay up for some time and reattempt this approach after an hour.&lt;/p&gt;

&lt;p&gt;Firewall:- It is often seen that an unwanted firewall can block your way from getting access to some specific websites. Maybe AOL mail login webweb web page may be one among them. Hence, disable the firewalls and do this machine again. &lt;/p&gt;

&lt;p&gt;Read more:- &lt;a href="http://aolmaildesk.com/"&gt;http://aolmaildesk.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
