<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deploy Express.js app to Vercel - VIDEO</title>
      <author>Ha Tuan Em</author>
      <pubDate>Fri, 16 Jul 2021 13:45:42 +0000</pubDate>
      <link>https://dev.to/hte305/deploy-express-js-app-to-vercel-video-1ac5</link>
      <guid>https://dev.to/hte305/deploy-express-js-app-to-vercel-video-1ac5</guid>
      <description>&lt;p&gt;I had been launch my channel on youtube to note every technical which I love. Hope you can find something helpful in your adventure.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/C1Sf_ntbqZQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>vercel</category>
      <category>deploy</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 16th July 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 16 Jul 2021 13:42:22 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-16th-july-2021-37oh</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-16th-july-2021-37oh</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-budibase"&gt;
  &lt;/a&gt;
  1. Budibase
&lt;/h3&gt;

&lt;p&gt;Budibase is an open-source low-code platform, helping developers and IT professionals build, automate, and ship internal tools on their own infrastructure in minutes.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Budibase"&gt;
        Budibase
      &lt;/a&gt; / &lt;a href="https://github.com/Budibase/budibase"&gt;
        budibase
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Budibase is an open-source low code platform that helps IT professionals build, automate and self-host internal tools in minutes 🚀 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://www.budibase.com" rel="nofollow"&gt;
    &lt;img alt="Budibase" src="https://camo.githubusercontent.com/a2c0a133e99f625574a121dbbd51ddb5aa99f461e409df3eedcb15e633a82e24/68747470733a2f2f64333377756272666b69306c36382e636c6f756466726f6e742e6e65742f616163333231353964373230376235303835653734613765663637616662623730323737383663352f32623166642f696d672f6c6f676f2f62622d656d626c656d2e737667" width="60"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
  Budibase
&lt;/h1&gt;

&lt;h3&gt;
  Build, automate and self-host internal tools in minutes
&lt;/h3&gt;

&lt;p&gt;
  Budibase is an open-source low-code platform, helping developers and IT professionals build, automate, and ship internal tools on their own infrastructure in minutes
&lt;/p&gt;

&lt;h3&gt;

 🤖 🎨 🚀
&lt;/h3&gt;

&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/74ca785214a7a4e3451c8a23fa1f132bb3ac8499fe243797cdd06fc2a6100cf5/68747470733a2f2f692e696d6775722e636f6d2f35426e5850734e2e706e67"&gt;&lt;img alt="Budibase design ui" src="https://camo.githubusercontent.com/74ca785214a7a4e3451c8a23fa1f132bb3ac8499fe243797cdd06fc2a6100cf5/68747470733a2f2f692e696d6775722e636f6d2f35426e5850734e2e706e67"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://github.com/Budibase/budibase/releases"&gt;
    &lt;img alt="GitHub all releases" src="https://camo.githubusercontent.com/ce724dddd4cff17a5748845e40570e5736bf34127f8afcf534a1c52a55ea6ebc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f42756469626173652f62756469626173652f746f74616c"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/Budibase/budibase/releases"&gt;
    &lt;img alt="GitHub release (latest by date)" src="https://camo.githubusercontent.com/304cb17d4ef8272c7c3983847cabda89cb488b554ea7025f2518e610111a80b5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f42756469626173652f6275646962617365"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/intent/follow?screen_name=budibase" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/3ac1c4c2d127fb4048b67daff93fc315f4767357115cc5048f887b61eb0ecca2/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f62756469626173653f7374796c653d736f6369616c" alt="Follow @budibase"&gt;
  &lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d620efaa3eac1c5b060ece5d6aacfcc8b81a74a04d05cd0398689c01c4463bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d76322e3025323061646f707465642d6666363962342e737667"&gt;&lt;img src="https://camo.githubusercontent.com/7d620efaa3eac1c5b060ece5d6aacfcc8b81a74a04d05cd0398689c01c4463bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d76322e3025323061646f707465642d6666363962342e737667" alt="Code of conduct"&gt;&lt;/a&gt;
  &lt;a href="https://codecov.io/gh/Budibase/budibase" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/99b7e388aa57a2190a46a0feb84fcb103f3ab0155cc7a1326866e36846958ffa/68747470733a2f2f636f6465636f762e696f2f67682f42756469626173652f62756469626173652f67726170682f62616467652e7376673f746f6b656e3d453857325a4658514f48"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;

  &lt;a href="https://docs.budibase.com/getting-started" rel="nofollow"&gt;Get started&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://docs.budibase.com" rel="nofollow"&gt;Docs&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/Budibase/budibase/discussions?discussions_q=category%3AIdeas"&gt;Feature request&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/Budibase/budibase/issues"&gt;Report a bug&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  Support: &lt;a href="https://github.com/Budibase/budibase/discussions"&gt;Discussions&lt;/a&gt;
&lt;/h3&gt;



&lt;h2&gt;
✨ Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build and ship real software.&lt;/strong&gt; Unlike other platforms, with Budibase you build and ship single page applications. Budibase applications have performance baked in and can be designed responsively, providing your users with a great experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open source and extensible.&lt;/strong&gt; Budibase is open-source - licensed as GPL v3. This should fill you with confidence that Budibase will always be around. You can also code against Budibase or fork it and make changes as you please, providing a developer-friendly experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Load data or start from scratch.&lt;/strong&gt; Budibase pulls in data from multiple sources, including MongoDB, CouchDB, PostgreSQL, mySQL, Airtable, S3, DyanmoDB…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Budibase/budibase"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-drawio-vs-code-integration"&gt;
  &lt;/a&gt;
  2. Draw.io VS Code Integration
&lt;/h3&gt;

&lt;p&gt;This unofficial extension integrates Draw.io (also known as diagrams.net) into VS Code.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hediet"&gt;
        hediet
      &lt;/a&gt; / &lt;a href="https://github.com/hediet/vscode-drawio"&gt;
        vscode-drawio
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This unofficial extension integrates Draw.io (also known as diagrams.net) into VS Code.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Draw.io VS Code Integration&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/sponsors/hediet"&gt;&lt;img src="https://camo.githubusercontent.com/61ba3866dc50fa0a561b627dffbcafa4e9a4e457468e1ee66fca8f48fa25c158/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d736f6369616c266c6162656c3d53706f6e736f72266d6573736167653d254532253944254134266c6f676f3d47697448756226636f6c6f72266c696e6b3d25334375726c253345" alt=""&gt;&lt;/a&gt;
&lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ZP5F38L4C88UY&amp;amp;source=url" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e566aacc826ad030d98ca79faf0e5f0795c42619ad753dbd3859789b08a7910f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d736f6369616c266c6162656c3d446f6e617465266d6573736167653d254532253944254134266c6f676f3d50617970616c26636f6c6f72266c696e6b3d25334375726c253345" alt=""&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/intent/follow?screen_name=hediet_dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9b23970bfdd1d765b5970d4bb0077d33cea55095ba3e52129c8ca51ef81e38ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6865646965745f6465762e7376673f7374796c653d736f6369616c" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This unofficial extension integrates &lt;a href="https://app.diagrams.net/" rel="nofollow"&gt;Draw.io&lt;/a&gt; (also known as &lt;a href="https://raw.githubusercontent.com/hediet/vscode-drawio/master/diagrams.net"&gt;diagrams.net&lt;/a&gt;) into VS Code.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Edit &lt;code&gt;.drawio&lt;/code&gt;, &lt;code&gt;.dio&lt;/code&gt;, &lt;code&gt;.drawio.svg&lt;/code&gt; or &lt;code&gt;.drawio.png&lt;/code&gt; files in the Draw.io editor
&lt;ul&gt;
&lt;li&gt;To create a new diagram, simply create an empty &lt;code&gt;*.drawio&lt;/code&gt;, &lt;code&gt;*.drawio.svg&lt;/code&gt; or &lt;code&gt;*.drawio.png&lt;/code&gt; file and open it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.drawio.svg&lt;/code&gt; are valid &lt;code&gt;.svg&lt;/code&gt; files that can be embedded in Github readme files! No export needed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.drawio.png&lt;/code&gt; are valid &lt;code&gt;.png&lt;/code&gt; files! No export needed. You should use &lt;code&gt;.svg&lt;/code&gt; though whenever possible - they look much better!&lt;/li&gt;
&lt;li&gt;To convert between different formats, use the &lt;code&gt;Draw.io: Convert To...&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Uses an offline version of Draw.io by default.&lt;/li&gt;
&lt;li&gt;Multiple Draw.io themes are available.&lt;/li&gt;
&lt;li&gt;Use liveshare to collaboratively edit a diagram with others.&lt;/li&gt;
&lt;li&gt;Nodes/edges can be linked with code spans.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Demo&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/hediet/vscode-drawio/master/./docs/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2AxK6wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/hediet/vscode-drawio/master/./docs/demo.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
Like it so far? You might also like my &lt;a href="https://github.com/hediet/chrome-ext-github-monaco"&gt;open source&lt;/a&gt; &lt;a href="https://chrome.google.com/webstore/detail/monaco-markdown-editor-fo/mmpbdjdnmhgkpligeniippcgfmkgkpnf" rel="nofollow"&gt;Chrome extension that enhances the Github markdown editor&lt;/a&gt;!&lt;/h1&gt;



&lt;h2&gt;
Editing .drawio.svg/.drawio.png Files&lt;/h2&gt;

&lt;p&gt;You…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hediet/vscode-drawio"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#3-leetcode-patterns"&gt;
  &lt;/a&gt;
  3. Leetcode Patterns
&lt;/h3&gt;

&lt;p&gt;A curated list of leetcode questions grouped by their common patterns. This repo is intended for any individual wanting to improve their problem solving skills for software engineering interviews.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/seanprashad"&gt;
        seanprashad
      &lt;/a&gt; / &lt;a href="https://github.com/seanprashad/leetcode-patterns"&gt;
        leetcode-patterns
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated list of leetcode questions grouped by their common patterns
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Leetcode Patterns&lt;/h1&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#preface"&gt;Preface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#question-list"&gt;Question List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#solutions"&gt;Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#leetcode-discuss"&gt;Leetcode Discuss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#tips-to-consider"&gt;Tips to Consider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#suggestions"&gt;Suggestions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#acknowledgements"&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Background&lt;/h2&gt;
&lt;p&gt;This repo is intended for any individual wanting to improve their problem
solving skills for software engineering interviews.&lt;/p&gt;
&lt;p&gt;Problems are grouped under their respective subtopic, in order to focus on
repeatedly applying common patterns rather than randomly tackling questions.&lt;/p&gt;
&lt;p&gt;All questions are available on &lt;a href="https://leetcode.com" rel="nofollow"&gt;leetcode.com&lt;/a&gt; with some requiring &lt;a href="https://leetcode.com/subscribe/" rel="nofollow"&gt;leetcode premium&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Preface&lt;/h2&gt;
&lt;p&gt;It is highly recommended to read chapters 1, 2, 3, 4, 8, and 10 of &lt;a href="http://www.crackingthecodinginterview.com/contents.html" rel="nofollow"&gt;Cracking The Coding Interview&lt;/a&gt;
to familiarize yourself with the following data structures and their operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;li&gt;Linked Lists&lt;/li&gt;
&lt;li&gt;Queues&lt;/li&gt;
&lt;li&gt;Heaps&lt;/li&gt;
&lt;li&gt;Stacks&lt;/li&gt;
&lt;li&gt;Trees&lt;/li&gt;
&lt;li&gt;Graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, you should have a good grasp on common algorithms such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Breadth-first search&lt;/li&gt;
&lt;li&gt;Depth-first search&lt;/li&gt;
&lt;li&gt;Binary search&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Notes&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/open?id=1ao4ZA28zzBttDkuS6MLQI52gDs_CJZEm" rel="nofollow"&gt;This pdf&lt;/a&gt; contains useful information for the built-in data structures in Java.&lt;/p&gt;
&lt;p&gt;Other useful methods to know include &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-int-" rel="nofollow"&gt;&lt;code&gt;substring()&lt;/code&gt;&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/seanprashad/leetcode-patterns"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-usecolor"&gt;
  &lt;/a&gt;
  4. use-color
&lt;/h3&gt;

&lt;p&gt;The powerful color hook that all designers deserve. Parse and stringify that just works &amp;amp; Strict type checking at compile time.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/junhoyeo"&gt;
        junhoyeo
      &lt;/a&gt; / &lt;a href="https://github.com/junhoyeo/use-color"&gt;
        use-color
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🛼🛼🛼 The powerful color hook that all designers deserve. ✨ Parse and stringify that just works &amp;amp; 🦾 Strict type checking at compile time
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/junhoyeo/use-color/raw/main/docs/images/roller-skate-emoji.png"&gt;&lt;img alt="roller skate emoji" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZyAb5wD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/junhoyeo/use-color/raw/main/docs/images/roller-skate-emoji.png" width="96"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;h1&gt;
use-color&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/use-color" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/86369c38def4d6dff23e2afb390ac952c0aa6c17836d9a80c50d54bc6007a04d/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f7573652d636f6c6f72" alt="NPM version"&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/result?p=use-color" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/292b66208dfb856dd3cb4157ac06498a7a865b049ada2a102c08df750dd315ec/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f7573652d636f6c6f72" alt="Package size"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/junhoyeo/use-color" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8f2cbe9e3db9877bbf380d30840575acbcefe555f42dfe6325188c9ce794a43/68747470733a2f2f636f6465636f762e696f2f67682f6a756e686f79656f2f7573652d636f6c6f722f6272616e63682f6d61696e2f67726170682f62616467652e7376673f746f6b656e3d4f514b53475944355549" alt="codecov"&gt;&lt;/a&gt; &lt;a href="https://github.com/junhoyeo/use-color/actions/workflows/build.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L1uccShG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/junhoyeo/use-color/actions/workflows/build.yml/badge.svg" alt="Build"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The powerful &lt;strong&gt;color&lt;/strong&gt; hook that all designers deserve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;yarn add use-color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight highlight-source-tsx position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useColor&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'use-color'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Core functions&lt;/h2&gt;
&lt;p&gt;All the functions and types that power the hook are exported. Detailed documentation is TBD(planning to detach them as a core module).&lt;/p&gt;
&lt;div class="highlight highlight-source-tsx position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;parseColor&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'use-color/parser'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-smi"&gt;ColorInput&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'use-color/types/ColorInput'&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;givenColor&lt;/span&gt;: &lt;span class="pl-smi"&gt;ColorInput&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;'rgb(34, 114, 235)'&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;color&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;parseColor&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;givenColor&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Parse&lt;/h2&gt;
&lt;div class="highlight highlight-source-tsx position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useColor&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'#2272eb'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;rgb&lt;/span&gt; &lt;span class="pl-c"&gt;// { r: 34, g: 114, b: 235 }&lt;/span&gt;
&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;rgba&lt;/span&gt; &lt;span class="pl-c"&gt;// { r: 34, g: 114, b: 235, a: 1 }&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useColor&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'rgb(34, 114, 235)'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;strings&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;hex&lt;/span&gt; &lt;span class="pl-c"&gt;// #2272eb&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useColor&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'rgba(34, 114, 235, 0.5)'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;strings&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;hex&lt;/span&gt; &lt;span class="pl-c"&gt;// #2272eb80&lt;/span&gt;
&lt;span class="pl-s1"&gt;color&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;rgb&lt;/span&gt; &lt;span class="pl-c"&gt;// { r: 34, g:&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/junhoyeo/use-color"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-boxicons"&gt;
  &lt;/a&gt;
  5. Boxicons
&lt;/h3&gt;

&lt;p&gt;Boxicons is a carefully designed open source iconset with 1000+ icons. It's crafted to look enrich your website/app experience.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/atisawd"&gt;
        atisawd
      &lt;/a&gt; / &lt;a href="https://github.com/atisawd/boxicons"&gt;
        boxicons
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      High Quality web friendly icons
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
BoxIcons&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/boxicons" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee0be0e50fc6d8e3392affa08db27ec20d0d23d25e1122ec060213128cc4669d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f626f7869636f6e732f616c6c2f62616467652e7376673f6c6162656c3d66696e616e6369616c2b636f6e7472696275746f7273" alt="Financial Contributors on Open Collective"&gt;&lt;/a&gt; &lt;a href="https://github.com/atisawd/boxicons/issues"&gt;&lt;img src="https://camo.githubusercontent.com/b5b7835adcf8d819b7734a469faa60c8efea40cb3c125822838bcdb5cc5a5cd2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f617469736177642f626f7869636f6e732e737667" alt="GitHub issues"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/intent/tweet?text=Wow:&amp;amp;url=https%3A%2F%2Fgithub.com%2Fatisawd%2Fboxicons" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9a00c80a07e513cb44dc49a0a21a3288c395992511aa9f214244d105a2ed05ec/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f6769746875622e636f6d2f617469736177642f626f7869636f6e732e7376673f7374796c653d736f6369616c" alt="Twitter"&gt;&lt;/a&gt;
&lt;a href="https://paypal.me/atisawd" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7e95fa4e4602021e2a5038c958f6829b6eba946b1b881037c57795c81e92597d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f6e6174652d70617970616c2d626c75652e7376673f7374796c653d666c61742d737175617265" alt="Donate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;High Quality web friendly icons&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;'Boxicons' is a carefully designed open source iconset with 1000+ icons. It's crafted to look enrich your website/app experience.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Announcing Boxicons v2.0.7!&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;40+ icons added.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;To install via npm, simply do the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ npm install boxicons --save&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;import the module&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;import 'boxicons'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;h3&gt;
Using via CSS&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Include the stylesheet on your document's &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-c1"&gt;rel&lt;/span&gt;="&lt;span class="pl-s"&gt;stylesheet&lt;/span&gt;" &lt;span class="pl-c1"&gt;href&lt;/span&gt;="&lt;span class="pl-s"&gt;boxicons.min.css&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Instead of installing you may use the remote version&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-c1"&gt;rel&lt;/span&gt;="&lt;span class="pl-s"&gt;stylesheet&lt;/span&gt;"
  &lt;span class="pl-c1"&gt;href&lt;/span&gt;="&lt;span class="pl-s"&gt;https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-c1"&gt;rel&lt;/span&gt;="&lt;span class="pl-s"&gt;stylesheet&lt;/span&gt;"
  &lt;span class="pl-c1"&gt;href&lt;/span&gt;="&lt;span class="pl-s"&gt;https://unpkg.com/boxicons@latest/css/boxicons.min.css&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;head&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;To use an icon on your page, add a class 'bx' and seperate class with the icons name with a prefix 'bx-' for regular icons , 'bxs-' for solid icons and 'bxl-'…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/atisawd/boxicons"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-awesome-scalability"&gt;
  &lt;/a&gt;
  6. Awesome Scalability
&lt;/h3&gt;

&lt;p&gt;The Patterns of Scalable, Reliable, and Performant Large-Scale Systems. Concepts are explained in the articles of prominent engineers and credible references. Case studies are taken from battle-tested systems that serve millions to billions of users.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/binhnguyennus"&gt;
        binhnguyennus
      &lt;/a&gt; / &lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;
        awesome-scalability
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Patterns of Scalable, Reliable, and Performant Large-Scale Systems
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="http://awesome-scalability.com/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6a8pgi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/logo.png" alt="Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An updated and organized reading list for illustrating the patterns of scalable, reliable, and performant large-scale systems. Concepts are explained in the articles of prominent engineers and credible references. Case studies are taken from battle-tested systems that serve millions to billions of users.&lt;/p&gt;
&lt;h4&gt;
If your system goes slow&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Understand your problems: scalability problem (fast for a single user but slow under heavy load) or performance problem (slow for a single user) by reviewing some &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#principle"&gt;design principles&lt;/a&gt; and checking how &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#scalability"&gt;scalability&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#performance"&gt;performance&lt;/a&gt; problems are solved at tech companies. The section of &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#intelligence"&gt;intelligence&lt;/a&gt; are created for those who work with data and machine learning at big (data) and deep (learning) scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
If your system goes down&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;"Even if you lose all one day, you can build all over again if you retain your calm!" - Thuan Pham, former CTO of Uber. So, keep calm and mind the &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#availability"&gt;availability&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#stability"&gt;stability&lt;/a&gt; matters!&lt;/p&gt;
&lt;/blockquote&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/binhnguyennus/awesome-scalability"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-geist"&gt;
  &lt;/a&gt;
  7. Geist
&lt;/h3&gt;

&lt;p&gt;Modern and minimalist React UI library, originating from Vercel's design.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/geist-org"&gt;
        geist-org
      &lt;/a&gt; / &lt;a href="https://github.com/geist-org/react"&gt;
        react
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Modern and minimalist React UI library.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p height="370"&gt;
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/11304944/91128466-dfc96c00-e6da-11ea-8b03-a96e6b98667d.png"&gt;&lt;img height="370" src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4QvZdJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/11304944/91128466-dfc96c00-e6da-11ea-8b03-a96e6b98667d.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d55c790f31bab3d5189a6439962b8cea36f134740aedf89c9d41ca38a1c2fcf/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f67656973742d6f72672f72656163743f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d303030303030"&gt;&lt;img alt="Codecov" src="https://camo.githubusercontent.com/4d55c790f31bab3d5189a6439962b8cea36f134740aedf89c9d41ca38a1c2fcf/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f67656973742d6f72672f72656163743f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d303030303030"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a8322ad0027e5a581a4d0b23c3dfecf4c129df26b506caa0e187202f113258ca/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f67656973742d6f72672f72656163743f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d303030303030"&gt;&lt;img alt="CircleCI" src="https://camo.githubusercontent.com/a8322ad0027e5a581a4d0b23c3dfecf4c129df26b506caa0e187202f113258ca/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f67656973742d6f72672f72656163743f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d303030303030"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f887b119c1507b08b907527df12ca15a6326caa4909d7314d1acb32db2985980/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4067656973742d75692f72656163743f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d303030303030"&gt;&lt;img alt="npm (scoped)" src="https://camo.githubusercontent.com/f887b119c1507b08b907527df12ca15a6326caa4909d7314d1acb32db2985980/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4067656973742d75692f72656163743f7374796c653d666f722d7468652d6261646765266c6162656c436f6c6f723d303030303030"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Modern and minimalist React UI library, originating from Vercel's design.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
Quick Start&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;run &lt;code&gt;yarn add @geist-ui/react&lt;/code&gt; or &lt;code&gt;npm i @geist-ui/react&lt;/code&gt; install it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;import into project:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;GeistProvider&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;CssBaseline&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@geist-ui/react'&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;Application&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;GeistProvider&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;CssBaseline&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c"&gt; // ---&amp;gt; Normalize styles&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;AppComponent&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c"&gt; // ---&amp;gt; Your App Component&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;GeistProvider&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;br&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://react.geist-ui.dev" rel="nofollow"&gt;Document Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react.geist-ui.dev/zh-cn" rel="nofollow"&gt;中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/geist-org/react/blob/master/.github/CONTRIBUTING.md"&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2&gt;
Showcases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://secret.gl/" rel="nofollow"&gt;Secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://views-docs.unix.bio/" rel="nofollow"&gt;Article view count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cdn.unix.bio/" rel="nofollow"&gt;Tree viewer for CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://img.unix.bio/" rel="nofollow"&gt;Better social image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sentineo.app" rel="nofollow"&gt;SentiNEO: Near-Earth Objects Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ofekashery/react-dashboard-design"&gt;Dashboard Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/geist-org/react/issues/new"&gt;Add here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2&gt;
LICENSE&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/geist-org/react/master/./LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/geist-org/react"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#8-nuxtjs"&gt;
  &lt;/a&gt;
  8. Nuxt.js
&lt;/h3&gt;

&lt;p&gt;Build your next Vue.js application with confidence using Nuxt: a framework making web development simple and powerful. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nuxt"&gt;
        nuxt
      &lt;/a&gt; / &lt;a href="https://github.com/nuxt/nuxt.js"&gt;
        nuxt.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Intuitive Vue Framework
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/nuxt/nuxt.js/dev/./.github/nuxt.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--op7wMe8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/nuxt/nuxt.js/dev/./.github/nuxt.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/nuxt/nuxt.js/actions?query=branch%3Adev+event%3Apush"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QiU-9zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nuxt/nuxt.js/workflows/test/badge.svg%3Fbranch%3Ddev%26event%3Dpush" alt="Tests Status"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/nuxt/nuxt.js/actions?query=branch%3Adev+event%3Apush"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dkwwioB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nuxt/nuxt.js/workflows/windows/badge.svg%3Fbranch%3Ddev%26event%3Dpush" alt="Windows Status"&gt;&lt;/a&gt;
  &lt;a href="https://codecov.io/gh/nuxt/nuxt.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/288c3cfbfb193be58c5fb9e329c3e0eb1390c86de04b4cfbac1b939943245851/68747470733a2f2f62616467656e2e6e65742f636f6465636f762f632f6769746875622f6e7578742f6e7578742e6a732f6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/nuxt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/35f59c88736cadf760c2a60d567e3423b658d6fd1eab7f4dfb84d8b6626621e5/68747470733a2f2f62616467656e2e6e65742f6e706d2f646d2f6e757874" alt="Downloads"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/nuxt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3b51e8dc61ecec371e25f561c00fc135970b8ea1496d7936a7bfc7cc584e30ad/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f6e757874" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/nuxt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c6a06bff12896256c1bc0efbb1168745d1eb1a4ba7ac0b1addda9fabfd74f07a/68747470733a2f2f62616467656e2e6e65742f6e706d2f6c6963656e73652f6e757874" alt="License"&gt;&lt;/a&gt;
  &lt;a href="https://discord.nuxtjs.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/201ca59da89f569642e32ed484be1aa15612a4945c9da40525d12843f420ac8d/68747470733a2f2f62616467656e2e6e65742f62616467652f446973636f72642f6a6f696e2d75732f373238394441" alt="Discord"&gt;&lt;/a&gt;
 &lt;/p&gt;
 &lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#platinum-sponsors" alt="Platinum Sponsors on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/ab1c4e8ab295dcb32be2fd5a3b80341b2a2674d4ea93d490902fcad4c1f7eae5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6e7578746a732f74696572732f706c6174696e756d2d73706f6e736f72732f62616467652e737667"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#gold-sponsors" alt="Gold Sponsors on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/8600d2103e8816c3acbd71eaac7b34181e3df360ae1fa3ca4928034fbe9afef9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6e7578746a732f74696572732f676f6c642d73706f6e736f72732f62616467652e737667"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#silver-sponsors" alt="Silver Sponsors on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/4600ca1f5aee03174fddeff5876d164c531d022c11c35f8e0f35cbfcbfb3412f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6e7578746a732f74696572732f73696c7665722d73706f6e736f72732f62616467652e737667"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#bronze-sponsors" alt="Bronze Sponsors on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/91ba393a978e59cfc7b4ee8542057a0b96de4d87165ecd869073c3333d5ff80a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6e7578746a732f74696572732f62726f6e7a652d73706f6e736f72732f62616467652e737667"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#nuxters" alt="Nuxters on Open Collective"&gt;&lt;img src="https://camo.githubusercontent.com/5eecee63bfe1b8b56dd68975275f31eb914f5acc6d482fb17d706ca21dde2636/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f6e7578746a732f74696572732f6e7578746572732f62616467652e737667"&gt;&lt;/a&gt;
  &lt;a href="https://oc.nuxtjs.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0106bbd51ff7ec6b8b9af2619132bdcf5804c74ecd81b2abdeae053df9b86af1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f727425323075732d4f70656e253230436f6c6c6563746976652d3431423838332e737667" alt="Support us"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://otechie.com/nuxt?ref=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9637df5b1ca7d3a707b5d8d7ef9bc30d09ff7a9b2b3748234e14e760c8315e2a/68747470733a2f2f6170692e6f7465636869652e636f6d2f636f6e73756c74616e63792f6e7578742f62616467652e737667" alt="Hire Nuxt"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build your next Vue.js application with confidence using Nuxt: a framework making web development simple and powerful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
📘 Documentation: &lt;a href="https://nuxtjs.org" rel="nofollow"&gt;https://nuxtjs.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
👥 Community: &lt;a href="https://cmty.app/nuxt" rel="nofollow"&gt;cmty.app/nuxt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🎬 Video: &lt;a href="https://www.youtube.com/watch?v=kmf-p-pTi40" rel="nofollow"&gt;1 minute demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🐦 Twitter: &lt;a href="https://twitter.nuxtjs.org/" rel="nofollow"&gt;@nuxt_js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
💬 Chat: &lt;a href="https://discord.nuxtjs.org/" rel="nofollow"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🌟 &lt;a href="https://awesome.nuxtjs.org/" rel="nofollow"&gt;AwesomeNuxt&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
👉 &lt;a href="https://template.nuxtjs.org" rel="nofollow"&gt;Play with Nuxt online&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Automatic transpilation and bundling (with webpack and babel)&lt;/li&gt;
&lt;li&gt;Hot code reloading&lt;/li&gt;
&lt;li&gt;Server-side rendering OR Single Page App OR Static Generated, you choose 🔥
&lt;/li&gt;
&lt;li&gt;Static file serving. &lt;code&gt;./static/&lt;/code&gt; is mapped to &lt;code&gt;/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Configurable with a &lt;code&gt;nuxt.config.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Custom layouts with the &lt;code&gt;layouts/&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;li&gt;Code splitting for every &lt;code&gt;pages/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Loading just the critical CSS (page-level)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more at &lt;a href="https://nuxtjs.org" rel="nofollow"&gt;https://nuxtjs.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
Getting started&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ npx create-nuxt-app &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;project-name&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;It's as simple as that!&lt;/p&gt;
&lt;p&gt;Learn more at &lt;a href="https://nuxtjs.org/guide/installation" rel="nofollow"&gt;https://nuxtjs.org/guide/installation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;Please take a look at &lt;a href="https://nuxtjs.org/examples" rel="nofollow"&gt;https://nuxtjs.org/examples&lt;/a&gt; or directly in &lt;a href="https://github.com/nuxt/nuxt.js/tree/dev/examples"&gt;https://github.com/nuxt/nuxt.js/tree/dev/examples&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Production deployment&lt;/h2&gt;
&lt;p&gt;To deploy, instead of running nuxt, you probably want to build ahead of time. Therefore, building and…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nuxt/nuxt.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#9-baileys"&gt;
  &lt;/a&gt;
  9. Baileys
&lt;/h3&gt;

&lt;p&gt;Lightweight full-featured typescript/javascript WhatsApp Web API&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/adiwajshing"&gt;
        adiwajshing
      &lt;/a&gt; / &lt;a href="https://github.com/adiwajshing/Baileys"&gt;
        Baileys
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Lightweight full-featured typescript/javascript WhatsApp Web API
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Baileys - Typescript/Javascript WhatsApp Web API&lt;/h1&gt;
&lt;p&gt;Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a &lt;strong&gt;WebSocket&lt;/strong&gt;. Not running Selenium or Chromimum saves you like &lt;strong&gt;half a gig&lt;/strong&gt; of ram :/&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href="https://github.com/sigalor/whatsapp-web-reveng"&gt;@Sigalor&lt;/a&gt; for writing his observations on the workings of WhatsApp Web and thanks to &lt;a href="https://github.com/Rhymen/go-whatsapp/"&gt;@Rhymen&lt;/a&gt; for the &lt;strong&gt;go&lt;/strong&gt; implementation.&lt;/p&gt;
&lt;p&gt;Baileys is type-safe, extensible and simple to use. If you require more functionality than provided, it'll super easy for you to write an extension. More on this &lt;a href="https://raw.githubusercontent.com/adiwajshing/Baileys/master/#WritingCustomFunctionality"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're interested in building a WhatsApp bot, you may wanna check out &lt;a href="https://github.com/adiwajshing/WhatsappInfoBot"&gt;WhatsAppInfoBot&lt;/a&gt; and an actual bot built with it, &lt;a href="https://github.com/ashokatechmin/Messcat"&gt;Messcat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read the docs &lt;a href="https://adiwajshing.github.io/Baileys" rel="nofollow"&gt;here&lt;/a&gt;&lt;/strong&gt;
&lt;strong&gt;Join the Discord &lt;a href="https://discord.gg/7FYURJyqng" rel="nofollow"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;p&gt;Do check out &amp;amp; run &lt;a href="https://raw.githubusercontent.com/adiwajshing/Baileys/master/Example/example.ts"&gt;example.ts&lt;/a&gt; to see example usage of the library
The script covers most common use cases
To run the example…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/adiwajshing/Baileys"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-reactwindow"&gt;
  &lt;/a&gt;
  10. react-window
&lt;/h3&gt;

&lt;p&gt;React components for efficiently rendering large lists and tabular data. React window works by only rendering part of a large data set (just enough to fill the viewport). This helps address some common performance bottlenecks.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bvaughn"&gt;
        bvaughn
      &lt;/a&gt; / &lt;a href="https://github.com/bvaughn/react-window"&gt;
        react-window
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React components for efficiently rendering large lists and tabular data
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
react-window&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;React components for efficiently rendering large lists and tabular data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React window works by only rendering &lt;em&gt;part&lt;/em&gt; of a large data set (just enough to fill the viewport). This helps address some common performance bottlenecks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It reduces the amount of work (and time) required to render the initial view and to process updates.&lt;/li&gt;
&lt;li&gt;It reduces the memory footprint by avoiding over-allocation of DOM nodes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://yarnpkg.com/en/package/react-window" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e180c3bcb410337ee81067432c6f7ca519659cc53747714e305a3042a36d4b55/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d77696e646f772e7376673f7374796c653d666f722d7468652d6261646765" alt="NPM registry"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/bvaughn/react-window" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c0bc66fb6e64c168237024b5a605a5982697a4c4f24993332868a2e7bbeced1c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f63692d7472617669732d677265656e2e7376673f7374796c653d666f722d7468652d6261646765" alt="Travis"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bvaughn/react-window/master/LICENSE.md"&gt;&lt;img src="https://camo.githubusercontent.com/2d59ad1fac0e81cd942fc1d1792d741aeeff0f3159a0897c629e0049560e27f2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d6d69742d7265642e7376673f7374796c653d666f722d7468652d6261646765" alt="NPM license"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bvaughn/react-window/master/#backers"&gt;&lt;img src="https://camo.githubusercontent.com/7a129bc875f4dfd704ab9a433535069668362d057d61463952bfbe4099d799b5/68747470733a2f2f696d672e736869656c64732e696f2f6f70656e636f6c6c6563746976652f6261636b6572732f72656163742d77696e646f773f6c6f676f3d6f70656e2d636f6c6c656374697665267374796c653d666f722d7468652d6261646765" alt="OpenCollective"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/bvaughn/react-window/master/#sponsors"&gt;&lt;img src="https://camo.githubusercontent.com/f93fc99daa8a7fbb2f48ab589dc4ab04c353f030558238e9226a0af7c1e16d81/68747470733a2f2f696d672e736869656c64732e696f2f6f70656e636f6c6c6563746976652f73706f6e736f72732f72656163742d77696e646f773f6c6f676f3d6f70656e2d636f6c6c656374697665267374796c653d666f722d7468652d6261646765" alt="OpenCollective"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Sponsors&lt;/h3&gt;
&lt;p&gt;The following wonderful companies have sponsored react-window:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/react-window/sponsor/0/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1851c960e0ebe1317db832c419f4e1421cb824bd91fc7b25b23f4cbf1b336b72/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f302f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/1/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/870d1c5659588f8b2047ce701d6f0fc4523d94d398991b25d72a971c20c60ea2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f312f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/2/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5ac3e00cdf9487c5702962e7d11e0b22f829e1ab328aed54065a84cc51835956/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f322f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/3/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/993d3fbae81378fc8bda7ca27821859254e4322ec84abd9c9e1bafe01110ee23/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f332f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/4/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4e90b1857c4a1f6761addcf80cbdc2b264ff1bbb492653979e827531e78566e9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f342f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/5/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5fa8fef3bff87e30bd3d388de1284eb24ef24c0d27c811a83885ce191df4cc1a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f352f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/6/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80be032bb476628236de7857b694c77154f5b6040cfce05151040d651d858126/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f362f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/7/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e8134ca35ea78caa56404aebca9820fb1301aa91cc62bffec13d1310b6704adc/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f372f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/8/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3feb2a6c47bb23a39a0caad41f38594ff5f647297a83fa7c8453f198d1b315f1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/9/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7f38ce11d2e3f0a0bd4e1d06bbb2b47becc2e5545c152727bcd4fc0a24901d7f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f392f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/10/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dad38c9d334e1f79ab0b53fd5f1f118281358556781a1f20b8ba7fd8206fd9f9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31302f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/11/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4e0775aea056e6b4d01b5198f0698989052d1e50bcd424058e33fc240a027487/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31312f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/12/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/931c4c283e52aace759e4d4b6331e35573354d255b8430c29ac9d57796b01fdb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31322f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/13/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eae059e42429d7c626f0c3b1687f17bfd6084cbbd51255cf092565b366ce30ce/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31332f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/14/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/287dbcb5ae1a71eb929bcdaf3cbc4b98693078148d65c990239b28a903d6af2c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31342f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/15/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/db3eeda36d8fa589f663938467f0f8df413057a4cd199d5b9440dee36c3aa3d9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31352f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/16/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b126dd33a927335fd166f68e8ccfcfb4db6d2c17fd981a4b048a0760b20c4462/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31362f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/17/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5389b377b036cd2f6bca2ca1356a5ed697ac1877b1995104d9d8e940c66baba0/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31372f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/18/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8176d3c6f125deb4e4c140833b117509b8faa6baa36017b94c2a42c53df4c7a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/19/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/acc60e83e65b83d28810058585ba3dc15d82110cdf8d7152a3659a3f84bf80a4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f31392f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/20/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/baf371f76e0eb4e66606e37a789b0962ff7c11b465e0e3dbc965c0c3ea85608e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32302f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/21/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b5c8a1a03136f2b74a1f88f9f9ce9a659eb8e9fb232f00a9bf598be27402536e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32312f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/22/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ce42fede98de786f2a6aa34f08ec23cd5e02b2f9388a7642959bc310345c4df/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32322f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/23/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c0b578859cf09ee316e4fa0572a046ba9b2c0562e25d16bae917ffd9d4073c46/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32332f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/24/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/28c88dca54d37ae4a4d62c6565db015d049055fd83c700b327cd87c60b848f1c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32342f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/25/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/955061be92a85b8758dd04849d2bfdbd6f5f8dcf28b9721010e68d32ae21157c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32352f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/26/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3753c5edfa805f7212d43c2e305ee17fcdb00e443213d4041d4e3976aa5c65a4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32362f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/27/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/159343e671e3930775f89bfa476ff374a4151c2d103a39cccebeabbcc8d85762/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32372f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/28/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/251b2bd5bf833e0caad0e7ea999d41c2a7cd592173f29faebceebbf6d7d4739e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/sponsor/29/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1621679e3470c8a0601cabc96c81ff94036d6a4ceb5954d98f1a6b944ea4ca7d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f73706f6e736f722f32392f6176617461722e737667"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/react-window#sponsor" rel="nofollow"&gt;Learn more about becoming a sponsor!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencollective.com/react-window/backer/0/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f20b110d2d5ffe720ca1c4f4967187d6035938cd5e93181975549332375bf2f4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f302f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/1/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/af8e375528686fc541cbe5ddc3699dea23b2eeb9d709aec8d3d50d0bc3ad640c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f312f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/2/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1bf85cff66c1d34a4c04c56f346408476686f8d060f17c9fd5823d1825f19d7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f322f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/3/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bf802149d7d3cdb181f77cb3472570a9a206618ad758d47370c83522242bb7c0/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f332f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/4/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/109d20c6fad9e72c5c19cc8142e347eb582566ddd4f1b566a9946d8e7b79c217/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f342f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/5/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d307a78bce006931b137856bb16fcbbbdecbd41a0afefd3a458fec016de98b03/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f352f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/6/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8379c9f34fc8a1ac9db50efe92ed114d22aa1e7ffa7595eb4053275f6c28286b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f362f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/7/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69a1f1b4638ce7b8daa7b01244d6f4777c2f4d6a25dab58bb7ff4e464bd53ebf/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f372f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/8/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/969549aa0a8dac6e66dd1e3ed3dc2711cece0a177343eb703f44cc94d8a26b80/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/9/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dcf67e1af96dcf38f5b3019ca350ef4842fb8c89cea2027b66f05a0d8c6d104f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f392f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/10/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cfb8bce3f51a26235dcd1fff0341bb735553c2959a6fa4664c359c38f8cb4c1d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31302f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/11/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9da09923e1bbb6341eaa944cf010488701d8268d8e674c0962ffc92a2915bb35/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31312f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/12/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7e5cea5f55984723f9b4b7cf15fae82ffdd22901dd6209afd39a05aba412a1ee/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31322f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/13/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/99be1f3274efc8cfe4dae41d615bb1d016e88b52d9df38ccd9556455ea415798/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31332f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/14/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80a1de6c2a680ffbeade89060d84649d6eaa10978151c5c448ce8c0c66de53e9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31342f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/15/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dd9d0649f25cf64929e740a158d36049572b1ea4ba74d3295a0e9e52e0029471/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31352f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/16/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/12a1c0e95249fff4b99d4060359bedebd639aa2f60c52e46edfda9b483dc8980/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31362f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/17/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8a971aeaee316e6507bc44cd091b4737f9aa6935ebec2a3d2d59cb0ddd41c5f1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31372f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/18/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ccc3458ac30f08aed497c35f3537b9067f67260a25a5df19cc87b4486afb0106/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/19/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a98ed57526ac2ade68a3f3802c9fa4319160a358020026685ce6aee82ec3772/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f31392f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/20/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0d62e5395621cd200fc838b4e6f5143c9acb0f8d3552e6da121a8a99ea61850/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32302f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/21/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c9cc9b660fa5df4b3ebb24e72878f19b62173ab640e1902b86e51f27e210acd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32312f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/22/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc07e7223f9d278a8deac40fe28d6872bffe5e02fdc97398b7c4d50583322731/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32322f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/23/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/94f011cff0f77a8415f6bc5c71df4b6e1a50874a6c3a2c10daa946498de57d20/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32332f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/24/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/045262a6c4d6a9dfb4be0663c4389a71969ea9151c18b8293baed19b70e7f148/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32342f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/25/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c3ff05825778f736701268e1a9cdfd261d5d4a428fae6a0044d9eca1812d0066/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32352f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/26/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/42f2fdb50dc9375f0a94e725dcb85668ef3b49b50e18182b2e962162c3a3b8f1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32362f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/27/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f646959accaa831b756a7d46e2d2f173d63baeacfbe21237cba8f05f9c869f3e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32372f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/28/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9aed853b40716e3bd86eba0dc0afb6af3cb100e294a0f6e15c935a0766e40112/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;a href="https://opencollective.com/react-window/backer/29/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78ebe0b52da954f69c04778cb8df7bd63ac9d4388837626840eb4ab9b0d6cb41/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f72656163742d77696e646f772f6261636b65722f32392f6176617461722e737667"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Yarn&lt;/span&gt;
yarn add react-window
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; NPM&lt;/span&gt;
npm install --save react-window&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Learn more at &lt;a href="https://react-window.now.sh/" rel="nofollow"&gt;react-window.now.sh&lt;/a&gt;:&lt;/p&gt;
&lt;h2&gt;
Related libraries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://npmjs.com/package/react-virtualized-auto-sizer" rel="nofollow"&gt;&lt;code&gt;react-virtualized-auto-sizer&lt;/code&gt;&lt;/a&gt;: HOC that grows to fit all of the available space and passes the width and height values to its child.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://npmjs.com/package/react-window-infinite-loader" rel="nofollow"&gt;&lt;code&gt;react-window-infinite-loader&lt;/code&gt;&lt;/a&gt;: Helps break large data sets down into chunks that can be just-in-time loaded as they are scrolled into view. It can also be used to create infinite…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bvaughn/react-window"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +3,208 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +1,800 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt; +1,643 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +1,310 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb JavaScript Style Guide&lt;/a&gt; +1,073 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +38%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unadlib/fronts"&gt;Fronts&lt;/a&gt; +35%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hieunc229/copilot-clone"&gt;Captain Stack&lt;/a&gt; +34%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vuejs/petite-vue"&gt;petite-vue&lt;/a&gt; +22%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NoQuarterTeam/boilerplate"&gt;Fullstack Boilerplate&lt;/a&gt; +18%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +7,012 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;The Book Of Secret Knowledge&lt;/a&gt; +5,193 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +4,348 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners"&gt;Web Development for Beginners&lt;/a&gt; +3,989 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt; +3,848 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/wellyshen/react-cool-virtual"&gt;React Virtual Cool&lt;/a&gt; +177%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossf/scorecard"&gt;Security Scorecards&lt;/a&gt; +171%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NoQuarterTeam/boilerplate"&gt;Fullstack Boilerplate&lt;/a&gt; +137%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SigNoz/signoz"&gt;SigNoz&lt;/a&gt; +126%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maaslalani/slides"&gt;Slides&lt;/a&gt; +78%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Pinia vs. Vuex: Is Pinia a good replacement for Vuex?</title>
      <author>Matt Angelosanto</author>
      <pubDate>Fri, 16 Jul 2021 13:31:53 +0000</pubDate>
      <link>https://dev.to/logrocket/pinia-vs-vuex-is-pinia-a-good-replacement-for-vuex-2k03</link>
      <guid>https://dev.to/logrocket/pinia-vs-vuex-is-pinia-a-good-replacement-for-vuex-2k03</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/emmanueljohn/"&gt;Emmanuel John&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Pinia, a lightweight state management library for Vue.js, has gained recent popularity. It uses the new reactivity system in Vue 3 to build an intuitive and fully typed state management library.&lt;/p&gt;

&lt;p&gt;Pinia’s success can be attributed to its unique features (extensibility, store module organization, grouping of state changes, multiple stores creation, and so on) for managing stored data.&lt;/p&gt;

&lt;p&gt;On the other hand, Vuex is also a popular state management library built for the Vue framework, and it is the recommended library for state management by the Vue core team. Vuex is highly focused on application scalability, developer ergonomics, and confidence. It is based on the same flux architecture as Redux.&lt;/p&gt;

&lt;p&gt;In this article, we will make a comparison between Pinia and Vuex. We will analyze the setup, community strengths, and performance of both frameworks. We’ll also look at new changes in Vuex 5 compared to Pinia 2.&lt;/p&gt;

&lt;p&gt;The code snippets used in this article are based on the Vue 3 Composition API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pinia-setup"&gt;
  &lt;/a&gt;
  Pinia setup
&lt;/h3&gt;

&lt;p&gt;It is easy to get started with Pinia because it only requires installation and creating a store.&lt;/p&gt;

&lt;p&gt;To install Pinia, you can run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add pinia@next
&lt;span class="c"&gt;# or with npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;pinia@next
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This version is compatible with Vue 3. If you are looking for the version compatible with Vue 2.x, check &lt;a href="https://github.com/posva/pinia/tree/v1"&gt;the &lt;code&gt;v1&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pinia is a wrapper around the Vue 3 Composition API. Hence you don’t have to initialize it as a plugin unless there’s a situation where you want Vue devtools support, SSR support, and webpack code splitting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPinia&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pinia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createPinia&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, you add Pinia to the Vue.js project so that you can use Pinia’s global object in your code.&lt;/p&gt;

&lt;p&gt;To create a store, you call the &lt;code&gt;defineStore&lt;/code&gt; method with an object containing the states, actions, and getters needed to create a basic store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stores/todo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pinia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodoStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cook noodles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vuex-setup"&gt;
  &lt;/a&gt;
  Vuex setup
&lt;/h3&gt;

&lt;p&gt;Vuex is also easy to set up, requiring installation and creating a store.&lt;/p&gt;

&lt;p&gt;To install Vuex, you can run the following commands in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;vuex@next &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;span class="c"&gt;# or with yarn&lt;/span&gt;
yarn add vuex@next &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a store, you call the &lt;code&gt;createStore&lt;/code&gt; method with an object containing the states, actions, and getters needed to create a basic store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//store.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;doneTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the Vuex global object, you need to add Vuex to the root Vue.js project file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Vuex and Pinia access their stores slightly differently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pinia-usage"&gt;
  &lt;/a&gt;
  Pinia usage
&lt;/h3&gt;

&lt;p&gt;Using Pinia, the store can be accessed as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTodoStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// gives access only to specific state&lt;/span&gt;
      &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the state object of the store is omitted while accessing its properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuex-usage"&gt;
  &lt;/a&gt;
  Vuex usage
&lt;/h3&gt;

&lt;p&gt;Using Vuex, the store can be accessed as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// access a state in computed function&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

      &lt;span class="c1"&gt;// access a getter in computed function&lt;/span&gt;
      &lt;span class="na"&gt;double&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#community-and-ecosystem-strength"&gt;
  &lt;/a&gt;
  Community and ecosystem strength
&lt;/h2&gt;

&lt;p&gt;Pinia has a small community at the time of writing this article, which results in few contributions and fewer solutions on Stack Overflow.&lt;/p&gt;

&lt;p&gt;Due to Pinia’s popularity beginning early last year, and its progress so far, its community is fast growing. Hopefully, there will be more contributors and solutions on Pinia soon.&lt;/p&gt;

&lt;p&gt;Vuex, being the recommended state management library by the Vue.js core team, has a large community with major contributions from the core team members. Solutions to Vuex bugs are readily available on Stack Overflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-curve-and-documentation"&gt;
  &lt;/a&gt;
  Learning curve and documentation
&lt;/h2&gt;

&lt;p&gt;Both state management libraries are fairly easy to learn since they have great documentation and learning resources on YouTube and third-party blogs. Their learning curve is easier for developers with previous experience working with Flux architecture libraries like Redux, MobX, Recoil, and more.&lt;/p&gt;

&lt;p&gt;Both libraries’ documentations are great and written in a manner friendly to both experienced and new developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-ratings"&gt;
  &lt;/a&gt;
  GitHub ratings
&lt;/h2&gt;

&lt;p&gt;At the time of writing this article, Pinia has two major releases: v1 and v2, with v2 having &lt;a href="https://github.com/posva/pinia/"&gt;over 1.6K stars on GitHub&lt;/a&gt;. It’s inarguably one of the fastest-growing state management libraries in the Vue.js ecosystem, given that it was initially released in 2019 and it’s relatively new.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMOQ9hfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/pinia-github-stars.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMOQ9hfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/pinia-github-stars.png" alt="Pinia GitHub Stars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, from the creation date of Vuex until now, the Vuex library has made five stable releases. Although v5 is in its experimental stage, Vuex’s v4 is the most stable release so far and has &lt;a href="https://github.com/vuejs/vuex/releases"&gt;about 26.3K stars on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oK8cW_MC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/vuex-github-stars.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oK8cW_MC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/vuex-github-stars.png" alt="Vuex GitHub Stars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Both Pinia and Vuex are super fast, and in some cases your web application will be faster when using Pinia compared to Vuex. This performance boost can be attributed to Pinia’s extremely light weight. Pinia weighs around 1KB.&lt;/p&gt;

&lt;p&gt;Although Pinia is built with Vue devtools support, some features like time traveling and editing are still not supported because Vue devtools doesn't expose the necessary APIs. This is worth noting when developmental speed and debugging are of more preference for your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-pinia-2-with-vuex-4"&gt;
  &lt;/a&gt;
  Comparing Pinia 2 with Vuex 4
&lt;/h2&gt;

&lt;p&gt;Pinia &lt;a href="https://pinia.esm.dev/introduction.html#rfcs"&gt;draws these comparisons to Vuex 3 and 4&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Mutations no longer exist. They were very often perceived as extremely verbose. They initially brought devtools integration but that is no longer an issue.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;No need to create custom complex wrappers to support TypeScript, everything is typed and the API is designed in a way to leverage TS type inference as much as possible.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are additional insights Pinia makes in the comparison between its state management library and Vuex:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Pinia has no support for nested stores. Instead, it allows you to create stores as you need them. However, stores can still be nested implicitly by importing and using a store inside another&lt;/li&gt;
&lt;li&gt;  Stores are namespaced automatically as they are defined. Hence there is no need to namespace modules explicitly&lt;/li&gt;
&lt;li&gt;  Pinia allows you to build multiple stores and let your bundler code split them automatically&lt;/li&gt;
&lt;li&gt;  Pinia allows getters to be used in other getters&lt;/li&gt;
&lt;li&gt;  Pinia allows grouping of changes in the devtools timeline using &lt;code&gt;$patch&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$patch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postsCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing Pinia 2 (currently in alpha) with Vuex, we can deduce that Pinia is ahead of Vuex 4.&lt;/p&gt;

&lt;p&gt;The Vue.js core team has an open RFC for Vuex 5 similar to the one used by Pinia. Currently, Vuex goes through RFC to gather as much feedback from the community as possible. Hopefully, the stable release of Vuex 5 will outperform Pinia 2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pinia.esm.dev/introduction.html"&gt;According to the creator of Pinia&lt;/a&gt; (Eduardo San Martin Morote), who is also part of the Vue.js core team and actively participates in the design of Vuex, Pinia and Vuex have more similarities than differences:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pinia tries to stay as close to Vuex's philosophy as possible. It was designed to test out a proposal for the next iteration of Vuex and it was a success as we currently have an open RFC for Vuex 5 with &lt;a href="https://github.com/vuejs/rfcs/discussions/270"&gt;an API very similar&lt;/a&gt; to the one used by Pinia. My personal intention with this project is to redesign the experience of using a global Store while keeping the approachable philosophy of Vue. I keep the API of Pinia as close as Vuex as it keeps moving forward to make it easy for people to migrate to Vuex or to even fusion both projects (under Vuex) in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although Pinia is good enough to replace Vuex, replacing Vuex is not its aim, hence Vuex remains the recommended state management library for Vue.js applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuex-and-pinia-pros-and-cons"&gt;
  &lt;/a&gt;
  Vuex and Pinia Pros and Cons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vuex-pros"&gt;
  &lt;/a&gt;
  Vuex Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Supports debugging features like time traveling and editing&lt;/li&gt;
&lt;li&gt;  Suitable for large-scale and high-complexity Vue.js projects&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vuex-cons"&gt;
  &lt;/a&gt;
  Vuex Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  As of Vue 3, the getter's result is not cached as the computed property does&lt;/li&gt;
&lt;li&gt;  Vuex 4 has some problems associated with type safety&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pinia-pros"&gt;
  &lt;/a&gt;
  Pinia Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Full TypeScript support: adding TypeScript is easy compared to adding &lt;a href="https://blog.logrocket.com/vue-typescript-tutorial-examples/#usingvuexwithtypescript"&gt;TypeScript in Vuex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Extremely lightweight (weighing around 1KB)&lt;/li&gt;
&lt;li&gt;  The store’s actions are dispatched as regular function calls rather than using the &lt;code&gt;dispatch&lt;/code&gt; method or &lt;code&gt;MapAction&lt;/code&gt; helper function, which is common in Vuex&lt;/li&gt;
&lt;li&gt;  Has support for multiple stores&lt;/li&gt;
&lt;li&gt;  Has support for Vue devtools, SSR, and webpack code splitting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pinia-cons"&gt;
  &lt;/a&gt;
  Pinia Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  No support for debugging features like time traveling and editing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-pinia-and-when-to-use-vuex"&gt;
  &lt;/a&gt;
  When to use Pinia and when to use Vuex
&lt;/h2&gt;

&lt;p&gt;From my personal experience, due to Pinia’s light weight, it is suitable for small- and medium-scale applications. It is also suitable for low-complexity Vue.js projects since some debugging features like time traveling and editing are still not supported.&lt;/p&gt;

&lt;p&gt;Using Vuex for small- to medium-scale Vue.js projects is overkill because its weight contributes heavily to performance reduction. Hence, &lt;a href="https://blog.logrocket.com/do-you-really-need-vuex/"&gt;Vuex is suitable for large-scale and high-complexity Vue.js projects&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we drew comparisons between Vuex and Pinia and highlighted their best features, documentation, community strength, learning curves, and some pitfalls discovered in both libraries at the time of writing.&lt;/p&gt;

&lt;p&gt;Vuex 4 and Pinia are similar in most ways, and they can be used to accomplish the same tasks.&lt;/p&gt;

&lt;p&gt;Overall, one is not better than the other — they both achieve the desired goal. It all depends on your use case and preference.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that the creator of Pinia has stated that the aim of Pinia is not to replace Vuex. Rather, it aims to make it easy for developers to migrate to Vuex or to even fuse both projects (under Vuex) in the future.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#experience-your-vue-apps-exactly-how-a-user-does"&gt;
  &lt;/a&gt;
  Experience your Vue apps exactly how a user does
&lt;/h2&gt;

&lt;p&gt;Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Vue apps — &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kubernetes Backup &amp; Restore made easy!</title>
      <author>Techworld with Nana</author>
      <pubDate>Fri, 16 Jul 2021 13:26:12 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/kubernetes-backup-restore-made-easy-2nlg</link>
      <guid>https://dev.to/techworld_with_nana/kubernetes-backup-restore-made-easy-2nlg</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLy7NrYWoggjztwSskGu59O38gL5v0LjUT"&gt;DevOps tool of the month&lt;/a&gt; is a series, where each month I introduce one new useful DevOps tool in 2021 🙌🏼&lt;/p&gt;

&lt;p&gt;For July I chose: &lt;a href="https://www.kasten.io/devops-tool"&gt;&lt;strong&gt;Kasten's K10 platform&lt;/strong&gt;&lt;/a&gt; 🎉 - a data management platform to &lt;strong&gt;backup and restore your applications easily&lt;/strong&gt; to protect your data.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-01qcysck1c4-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/01qcYSck1c4"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;p&gt;In this tutorial, we are going to talk about a challenging task of data management in Kubernetes and a tool that makes data management very easy for the K8s administrators, which is Kasten's K10.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-data-management-in-k8s-actually-mean-and-why-is-it-a-challenging-task"&gt;
  &lt;/a&gt;
  What does data management in K8s actually mean, and why is it a challenging task? 🧐
&lt;/h2&gt;

&lt;p&gt;Imagine, we have the following real-world setup in our K8s production cluster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#production-setup"&gt;
  &lt;/a&gt;
  Production Setup
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqm2GlEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vuf2skzc4y9yd3gv3cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqm2GlEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vuf2skzc4y9yd3gv3cc.png" alt="Production Kubernetes Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An EKS cluster, where our microservices application is running. Our microservices use ElasticSearch database, which is also running in the cluster. And in addition to that our application is using Amazon's RDS data services, which is a managed database outside the cluster.&lt;/p&gt;

&lt;p&gt;This means our application has &lt;strong&gt;data services both inside and outside the cluster&lt;/strong&gt;. And these data will be physically stored on some storage backend. RDS data will be stored on AWS of course. Data for ElasticSearch will be used in the cluster through K8s Persistent Volume components, but they also need to be physically stored somewhere. This could be a cloud storage on AWS, Google Cloud etc. or on-premise servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-management-use-cases-for-this-setup"&gt;
  &lt;/a&gt;
  Data Management Use Cases for this setup
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Underlying infrastructure fails ⛔️&lt;/strong&gt;&lt;br&gt;
The underlying infrastructure, where the cluster is running fails, and we lose all the pods, and the whole cluster. We would need to recreate the cluster with the same cluster state (K8s components - ectd) and application data. So we need to restore our whole cluster.&lt;br&gt;
&lt;strong&gt;2. ElasticSearch DB gets corrupted ⛔️&lt;/strong&gt;&lt;br&gt;
Or let's say our ElasticSearch DB gets corrupted or hacked into and we lose all the data. Again, we need to restore our database to the latest working state.&lt;br&gt;
&lt;strong&gt;3. Replicating Kubernetes cluster (Multi-Cloud or Hybrid Cloud) ☁️☁️&lt;/strong&gt;&lt;br&gt;
Or another common use case, say our cluster is running on AWS, but we want to make our production cluster more reliable and flexible, by not depending on just 1 cloud provider and by replicating it on a Google Cloud environment with the same application setup and application data.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  The challenge
&lt;/h3&gt;

&lt;p&gt;In all these cases, the challenge is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;how do we &lt;strong&gt;capture an application backup that includes all the data that the application needs&lt;/strong&gt;, whether it's the databases in the K8s cluster or a managed data service outside the cluster?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that if our cluster failed, or something happened to our application and we lost all the data etc, we would &lt;strong&gt;be able to restore or replicate the application state with all its components, like pods, services, configMaps, etc and its data&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;And that is a challenging task.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bad-solution-options"&gt;
  &lt;/a&gt;
  Bad Solution Options 🤨
&lt;/h2&gt;

&lt;p&gt;Now let's look at what alternatives we have available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VM or etcd Backups 👀&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you do VM backups of your cluster nodes or etcd backups, you will save the state of the cluster, but what about the application data? They are not stored on the worker nodes, they are stored outside the cluster on a cloud platform or on on-premise servers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✅  Cluster State backup up&lt;br&gt;
❌   Application Data not backed up &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use Cloud Providers Backup and Restore Mechanism 👀&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other side, for the cloud-storage backends, the cloud providers themselves have their own backup and replication mechanisms. But it's only partially managed by the platform, so you still have to configure the data backups etc yourself. Plus, it's just the data in the volume. This doesn't include the cluster state.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✅  Data in Volume backed up&lt;br&gt;
❌   Only partially managed by cloud platform &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Write Custom Backup and Restore Scripts for the different infrastructure levels 👀&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many teams write custom scripts to piece together backup solutions on different levels, like components and state inside the cluster and data outside the cluster. But this scripts can get very complex, very soon, because the data and state is spread on many levels, many platforms. And the script code usually ends up being too tied to the underlying platform where data is stored.&lt;/p&gt;

&lt;p&gt;The same goes for the restore logic. Many teams use custom scripts to write restore logic or cluster recreation logic from all the different backup sources.&lt;/p&gt;

&lt;p&gt;So overall, your team may end up with lots of complex self-managed scripts, which are usually hard to maintain. 😣&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✅  Tailored to application&lt;br&gt;
❌   Complex scripts&lt;br&gt;
❌   Too tied to the underlying platform&lt;br&gt;
❌   Difficult to maintain&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#how-k10-solves-these-problems"&gt;
  &lt;/a&gt;
  How K10 solves these problems 🚀
&lt;/h2&gt;

&lt;p&gt;These are exactly the challenges that Kasten's K10 tool addresses. So how does K10 solve these problems?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#abstraction-of-underlying-infrastructure"&gt;
  &lt;/a&gt;
  💡 Abstraction of underlying infrastructure 💡
&lt;/h4&gt;

&lt;p&gt;K10 &lt;strong&gt;abstracts away the underlying infrastructure&lt;/strong&gt; to give you a consistent data management support, no matter where the data is actually stored:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi4kYkJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie393kls7l95p6fvscfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi4kYkJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie393kls7l95p6fvscfx.png" alt="K10 abstraction"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So teams can choose whichever infrastructure or platform they want for their application, without sacrificing operational simplicity, because K10 has a pretty extensive ecosystem, and integrates with various relational and NoSQL databases, many different Kubernetes distributions and all clouds.&lt;/p&gt;

&lt;p&gt;So instead of backup scripts for each platform or level, you just have &lt;strong&gt;1 easy UI interface&lt;/strong&gt; of K10 to create complete application backups in the cluster:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYDssRAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgxnjgauiwm1wki2ltdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYDssRAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgxnjgauiwm1wki2ltdj.png" alt="K10 data management platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So everything that is part of the application, like K8s components (pods, services etc.) and application data in volumes as well as data in managed data services outside the cluster will be captured in the application snapshot by K10.&lt;/p&gt;

&lt;p&gt;So you can easily take that snapshot and reproduce or restore your cluster on any infrastructure you want. 🙌&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#policydriven-automation"&gt;
  &lt;/a&gt;
  💡 Policy-driven Automation 💡
&lt;/h4&gt;

&lt;p&gt;K10 works with policies. Instead of manually backing up and restoring your applications, which means more effort and higher risk of making mistakes, you can configure &lt;strong&gt;backup and restore tasks to run automatically&lt;/strong&gt; with the settings you defined in the policy.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#multicluster-manager"&gt;
  &lt;/a&gt;
  💡 Multi-Cluster Manager 💡
&lt;/h4&gt;

&lt;p&gt;Now, what if you have multiple clusters across zones or regions or even across cloud platforms and on-premise data center. How do you consistently manage 10s or 100s of cluster backups? 🤔 Well, K10 actually has a multi-cluster mode. In K10's multi-cluster dashboard, you have a view of all your clusters, as well as a way to create and &lt;strong&gt;configure global backup and restore policies that you can apply to multiple clusters&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#kubernetes-native-api"&gt;
  &lt;/a&gt;
  💡 Kubernetes Native API 💡
&lt;/h4&gt;

&lt;p&gt;Now, if you have 100s or 1000s of applications across many clusters, of course you don't want to create policies on the UI. For that, K10 provides us with &lt;strong&gt;Kubernetes native way of scripting policies with YAML&lt;/strong&gt;. So you can also automate your policy creation and configuration as part of your policy as code workflow. 👍&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#k10-in-action-handson-demo"&gt;
  &lt;/a&gt;
  K10 in Action - Hands-On Demo 👩🏻‍💻
&lt;/h2&gt;

&lt;p&gt;In the video, I will show you how K10 actually works in practice. In the hands-on demo, we will create an automated backup policy for our mysql application to protect its data and then restore it within seconds:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/01qcYSck1c4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;More awesome tools coming up next on this series, so stay tuned for it! 🎬 😊&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 😍 for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>docker</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🌪️ Tornado Asynchronous Framework For Python</title>
      <author>Bek Brace</author>
      <pubDate>Fri, 16 Jul 2021 13:25:58 +0000</pubDate>
      <link>https://dev.to/bekbrace/tornado-asynchronous-framework-for-python-4cap</link>
      <guid>https://dev.to/bekbrace/tornado-asynchronous-framework-for-python-4cap</guid>
      <description>&lt;p&gt;Tornado is a Python open source framework, but also an asynchronous networking library, and it was originally developed for a company called FriendFeed, which was acquired by Facebook recently in 2009. To understand Tornado we need to know what is it good for.&lt;/p&gt;

&lt;p&gt;Make sure to check out my last video on tornado Framework &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-gJ21qzpieA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Tornado is ideal for building apps asking for high performance and several thousand concurrent users; it can handle 10K connections at once, in addition to that it's non-blocking network IO. Asynchronous programming was introduced to python since python 3.5 when the asyncio library was introduced.&lt;/p&gt;

&lt;p&gt;Before anything, you need to know that Asynchronous programming, more specifically async syntax makes you code faster to execute.&lt;/p&gt;

&lt;p&gt;Async is a way of Concurrent ProgrammingAsync is one way of doing concurrent programming, which means doing many things at once or achieving multiple tasks at once.&lt;/p&gt;

&lt;p&gt;How does Python achieve multiple tasks at once ?&lt;/p&gt;

&lt;p&gt;1 OS makes multi-sharing and multi-tasking happen: One way is to run multiple terminal instances and run your server, and all of them will work concurrently in the same time; and your operating system takes care of sharing your CPU resources among those terminal instances.&lt;/p&gt;

&lt;p&gt;2 Another way of achieving multiple tasks at once is by using threads. A thread is a line of execution for several instructions which means that they all share access to common resources, and here the operating system intervens to share your CPU with these threads&lt;/p&gt;

&lt;p&gt;3 The last way is asynchronous programming which what Tornado does, even though the opperating system will not have any role here, yet we'll be able to achieve multiple things at once with asynchronous programming&lt;/p&gt;

&lt;p&gt;Drop your comment or contact me on: &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;br&gt;
Github page: &lt;a href="https://github.com/BekBrace%E2%80%8B"&gt;https://github.com/BekBrace​&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading and watching &lt;br&gt;
Until next time - Peace out, &lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easy UI "2.0" is out 🥳🥳🥳</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Fri, 16 Jul 2021 12:49:04 +0000</pubDate>
      <link>https://dev.to/sidthedev/easy-ui-2-0-is-out-3g78</link>
      <guid>https://dev.to/sidthedev/easy-ui-2-0-is-out-3g78</guid>
      <description>&lt;p&gt;Here you go. I redesigned the Easy UI site&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_HPSKjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc1sujygrtlb7k73h526.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_HPSKjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc1sujygrtlb7k73h526.jpeg" alt="Easy UI"&gt;&lt;/a&gt;&lt;br&gt;
You can check it out &lt;a href="https://easyui.dev"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A complete redesign&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://easyui.dev/preview/smooth"&gt;The "Smooth" template&lt;/a&gt;:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7fBEBbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwsvao8rzvzmepybrveh.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;We decided to use &lt;a href="https://flurly.com"&gt;Flurly&lt;/a&gt; for payments, because it's a lot better than shopify 😂, and also because it's created by fellow indiehackers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-gift-to-the-dev-community"&gt;
  &lt;/a&gt;
  A gift to the dev community 💖
&lt;/h2&gt;

&lt;p&gt;With this launch comes a gift to the developer community for being so amazing 🥰. You can now get all templates for just $45 (worth $130)!&lt;/p&gt;

&lt;p&gt;Please upvote us on producthunt too 🙏 &lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/easy-ui-2-0?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-easy-ui-2-0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFOC5V-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D304741%26theme%3Dlight" alt="Easy UI 2.0 - Landing page templates for your next website | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ui</category>
      <category>ux</category>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Access the Amazon Elastic File System (EFS) from multiple VPC using VPC Peering </title>
      <author>Víctor Pérez Pereira</author>
      <pubDate>Fri, 16 Jul 2021 12:30:25 +0000</pubDate>
      <link>https://dev.to/aws-builders/access-the-amazon-elastic-file-system-efs-from-multiple-vpc-using-vpc-peering-3kb9</link>
      <guid>https://dev.to/aws-builders/access-the-amazon-elastic-file-system-efs-from-multiple-vpc-using-vpc-peering-3kb9</guid>
      <description>&lt;p&gt;When there are different environments (development, quality, production) in AWS, and we separate them in many VPC's or AWS accounts, but need access to the same EFS (Elastic File System), we can apply a configuration with VPC Peering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon Elastic File System (EFS)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Amazon Elastic File System (Amazon EFS) provides a simple, serverless, set-and-forget, elastic file system that lets you share file data without provisioning or managing storage.&lt;/em&gt; &lt;a href="https://aws.amazon.com/efs"&gt;1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VPC peering&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;A VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses. Instances in either VPC can communicate with each other as if they are within the same network.&lt;/em&gt; &lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html"&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKuXUZW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oquurmndwmhw3jl1piub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKuXUZW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oquurmndwmhw3jl1piub.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example:
&lt;/h3&gt;

&lt;p&gt;We have two VPC in the same region with EFS connection using VPC Peering. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc13-WAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4drrluaks3z5yp8eq6br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc13-WAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4drrluaks3z5yp8eq6br.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h3&gt;

&lt;p&gt;1- Create VPC Peering: Here I share a guide with information and configuration of the VPC Peering. &lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/create-vpc-peering-connection.html#create-vpc-peering-connection-local"&gt;https://docs.aws.amazon.com/vpc/latest/peering/create-vpc-peering-connection.html#create-vpc-peering-connection-local&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, we create VPC Peering with the following network. &lt;/p&gt;

&lt;p&gt;Name: VPC-A: 10.8.0.0/16 &lt;br&gt;
Name: VPC-B:  172.31.0.0/16&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eim5I99m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iez2h768h2x4kj3bc5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eim5I99m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iez2h768h2x4kj3bc5v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Later in the previous phase, we configure and create EFS. Here I share guide: &lt;a href="https://docs.aws.amazon.com/efs/latest/ug/gs-step-two-create-efs-resources.html"&gt;https://docs.aws.amazon.com/efs/latest/ug/gs-step-two-create-efs-resources.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example: we create an EFS with ID fs-da19746e on VPC 10.8.0.0/16 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjTTByzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89tq2tqq6ajyoht0kzth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjTTByzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89tq2tqq6ajyoht0kzth.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Now, we set up our EFS in Ubuntu Linux instance the network 10.8.0.0/16&lt;/p&gt;

&lt;p&gt;Before this, we create a directory /efs/shared, and we edit file /etc/fstab and add the following line:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fsda19746eefsuseast1amazonawscom-efsshared-nfs4-defaultsnetdev-0-0"&gt;
  &lt;/a&gt;
  fs-da19746e.efs.us-east-1.amazonaws.com:/ /efs-shared nfs4 defaults,_netdev 0 0
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeC9pdXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzq4m51ewyl6quzxpla6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeC9pdXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzq4m51ewyl6quzxpla6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We check that it is set up EFS using the command: df -h&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzHVq36K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7272j0nxc4rv5c47s6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzHVq36K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7272j0nxc4rv5c47s6h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we create a file with two lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2JXaYqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2vawz4cfw7dz4c9s34x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2JXaYqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2vawz4cfw7dz4c9s34x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we repeat the previous step but, now with the instance in VPC 172.3.1.0.0/16 however, for a successful connection, we must make the last command’s.&lt;/p&gt;

&lt;p&gt;4- Open a Cloud Shell in the Virginia region, then execute the following command:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-efs-describemounttargets-filesystemid-fsda19746e"&gt;
  &lt;/a&gt;
  aws efs describe-mount-targets --file-system-id fs-da19746e
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---znnq39y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37trn9xfhf46mh8mcfpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---znnq39y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37trn9xfhf46mh8mcfpw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obtain the interface IP of the EFS and write the following command in the instance EC2 the VPC 172.31.0.0/16 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#echo-108181-fsda19746eefsuseast1amazonawscom-sudo-tee-a-etchosts"&gt;
  &lt;/a&gt;
  echo "10.8.1.81 fs-da19746e.efs.us-east-1.amazonaws.com" | sudo tee -a /etc/hosts
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1U4LvGvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ncmlpytf8nop9yvjf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U4LvGvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ncmlpytf8nop9yvjf5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later, we execute the same process and create directory /efs-shared and add it, then set up the disk in /etc/fstab the instance EC2 with the following command: mount /efs/shared. Finally, we verify if there is a file with the name "test".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGJVVcM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68i42olm6a4k6oj9eagf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGJVVcM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68i42olm6a4k6oj9eagf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twSr7IIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p3kwdqimi97egoq2rqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twSr7IIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p3kwdqimi97egoq2rqt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these steps, now we have obtained EFS access in the different VPC no matter where EFS are configured.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations:
&lt;/h4&gt;

&lt;p&gt;● Verify that the security group is attached to the EFS and available open port TCP:2049.&lt;/p&gt;

&lt;p&gt;● VPC Peering has route tables that associate the connection with the EC2 instances.&lt;/p&gt;

&lt;p&gt;● For this example, we use a network interface, the EFS, but you can use more interfaces in different subnets associated with the VPC.&lt;/p&gt;

&lt;p&gt;● You can connect VPC Peering with different AWS accounts and other regions in the same account; however, it is important that the networks are not the same because VPC Peering doesn't accept the equal networks.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>efs</category>
      <category>vpc</category>
    </item>
    <item>
      <title>Developing Self Compassion: An Answer to the Constant Burnout</title>
      <author>Omri Lavi</author>
      <pubDate>Fri, 16 Jul 2021 12:17:14 +0000</pubDate>
      <link>https://dev.to/omril321/developing-self-compassion-an-answer-to-the-constant-burnout-35e1</link>
      <guid>https://dev.to/omril321/developing-self-compassion-an-answer-to-the-constant-burnout-35e1</guid>
      <description>&lt;p&gt;In the last few years, I developed an efficient routine to improve my abilities as a developer. I contributed to open source, read a lot, wrote blog posts and was active in social networks. Yet, I had a constant feeling that it's not enough - that I'm not &lt;em&gt;good enough&lt;/em&gt;. I thought I had to keep working hard, otherwise I'll go downhill. &lt;/p&gt;

&lt;p&gt;At some point I realized I was very stressed, and that I was concerned all the time, and that I couldn't rest properly. I couldn't accept positive feedbacks and found reasons why they are wrong. Generally speaking, I was very hard with myself. At some point I became aware of this situation and decided to make a process to change it. Now, a few months later, I feel much better with myself. I wanted to share my process, so that it will help others out there in similar situations. &lt;/p&gt;

&lt;p&gt;Feel like you're working hard and it's still &lt;em&gt;not enough?&lt;/em&gt; Are you unhappy with your job even though it's pretty good? Are you generally stressed about &lt;em&gt;your value as a developer&lt;/em&gt;? This post is for you. Take a few minutes to read through - you'll get a new perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-previous-routine"&gt;
  &lt;/a&gt;
  My Previous Routine
&lt;/h2&gt;

&lt;p&gt;In the past, I had a strict daily routine. It aggregated to the following weekly agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reading a tech book - 1.5 hrs/week&lt;/li&gt;
&lt;li&gt;Side projects, open source or writing - 10 hrs/week&lt;/li&gt;
&lt;li&gt;Reading and keeping up to date - 3 hrs/week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, if I had spare time, I spent it on side projects or reading. I didn't rest. &lt;/p&gt;

&lt;p&gt;I learned a lot and created a lot of content. I was confident my work "pays off". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DidxqCde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6r7hjuj1066k5kbog2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DidxqCde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6r7hjuj1066k5kbog2.png"&gt;&lt;/a&gt;&lt;br&gt;Stressful free-time activities. (Image by &lt;a href="https://unsplash.com/photos/1K9T5YiZ2WU"&gt;Tim Gouw&lt;/a&gt;)
  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-cracks-start-to-show"&gt;
  &lt;/a&gt;
  When Cracks Start to Show
&lt;/h2&gt;

&lt;p&gt;With time, I noticed some things about myself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was always stressed.&lt;/li&gt;
&lt;li&gt;I couldn't rest properly.&lt;/li&gt;
&lt;li&gt;I was very sensitive to issues at work, and they influenced my mood.&lt;/li&gt;
&lt;li&gt;Even though I got positive feedbacks, I wasn't able to accept them. I found reasons why the feedbacks were wrong, and gave myself negative counter-feedbacks.&lt;/li&gt;
&lt;li&gt;I had "tunnel vision" when encountering issues. I couldn't see the "big picture". I was too busy being concerned how I'll be perceived.&lt;/li&gt;
&lt;li&gt;I constantly swung between finding flaws in myself and in the environment (the company, the process, my coworkers).&lt;/li&gt;
&lt;li&gt;I thought about work day and night. I enjoy thinking about technical challenges, but this was a different experience. It troubled me &lt;em&gt;where I was wrong&lt;/em&gt;, and what will my coworkers/supervisor say.&lt;/li&gt;
&lt;li&gt;I had a very strong imposter syndrome. I felt less professional than my surroundings and was afraid people will find out about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a long time I thought that &lt;em&gt;this is the price for having a good job&lt;/em&gt;, and that I have to accept it. I thought that if I'll learn and do more, I'll feel better with myself, since I'll be "more professional". I remember telling myself "you can learn more, instead of resting in the evening - spend the time by reading some more". So I pushed it a little more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-awakening"&gt;
  &lt;/a&gt;
  The Awakening
&lt;/h2&gt;

&lt;p&gt;In 2020 Covid came along, and a personal disaster happened about at the same time. I started thinking about how I spend my time and what I sacrifice. I realized that the routine I'm having was taking its toll. It led me to some serious thinking about my goals and their prices. &lt;/p&gt;

&lt;p&gt;I talked about this a lot with my wife, who is — luckily — a personal consultant. This led me to a decision to make a change. I adjusted my goals, determined to be happier.&lt;/p&gt;

&lt;p&gt;Now, these are some big words. What does being happy even mean? Don't worry, this post won't get a spiritual twist 😜 &lt;/p&gt;

&lt;p&gt;"Happiness" a profoundly personal definition and will differ for each individual. For me, I wanted to have a balance between:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A challenging and rewarding day job.&lt;/li&gt;
&lt;li&gt;Time to spend with my family and friends.&lt;/li&gt;
&lt;li&gt;The ability to maintain my hobbies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or in other words: retaining a good job, without allowing it consuming all my energy, all the time.&lt;/p&gt;

&lt;p&gt;I started a process to achieve my new goals.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#becoming-aware"&gt;
  &lt;/a&gt;
  Becoming Aware
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nI8UoPfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei8c6gwgvux7rr6klait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nI8UoPfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei8c6gwgvux7rr6klait.png"&gt;&lt;/a&gt;&lt;br&gt;Monkey observing itself in the mirror. It's time for reflections. (Image by &lt;a href="https://unsplash.com/photos/84oiI1wT4zU"&gt;Andre Mouton&lt;/a&gt;)
  &lt;/p&gt;

&lt;p&gt;My process took part in two seemingly orthogonal parts. The first one is simple: I reduced the "extra" time I spend (side projects, reading, etc.) to an acceptable minimum. I still spend time, but considerably less. But, this isn't enough by itself. I can't "switch off" the part of my brain which constantly judged and said "it's not enough". &lt;/p&gt;

&lt;p&gt;This was the second part, which required some more work. I observed at my thoughts and feelings about not being good enough. I noticed the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I thought I needed to know everything&lt;/strong&gt;. I was afraid of encountering the unknown since it felt like a test. Each time someone else knew something I did not, I felt very bad. "I should have known this" was a common thought. On hindsight, I tried avoiding the unknown by trying to learn as much as possible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I was very concerned with how I'm perceived&lt;/strong&gt;. This made me feel occasionally under test (even when I wasn't). When struggling with a technical issue, the soon-to-come feedback troubled me more than the issue itself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I had unrealistic ideals&lt;/strong&gt;. I know a few very successful individuals, and I take them as role-models. Yet, unconsciously I thought I can have all the positive aspects from my idols (writing blogs, contributing to open-source...), without having any of the negative aspects (the sacrifices).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I understood that my ideals made me very judgmental about myself and my surroundings.&lt;/strong&gt; When things didn't go as I imagined I became upset. It could have been something in the workflow, or a coworker that didn't see things as I do . The gap between my ideals and the reality made me believe (sometimes) I don't fit.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Almost all my feedbacks were positive&lt;/strong&gt;. This part is important - my feelings about not being good enough were not based on any external feedback. Objectively, I was doing ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After learning about my thoughts and feelings, I started making cognitive changes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#changing-the-narrative"&gt;
  &lt;/a&gt;
  Changing the Narrative
&lt;/h2&gt;

&lt;p&gt;To achieve my goals, I needed to cognitively change the way I think. This may sound abstract, and it's easy to be cynical about it. However, it is feasible with a lot of hard work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I accepted I CAN'T have it all&lt;/strong&gt;. I'm no superman. I adjusted my ideals and "lowered the bar".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I remind myself where I'm doing OK&lt;/strong&gt;. I don't &lt;em&gt;have&lt;/em&gt; to be overwhelmingly great, being OK is good enough. I allowed myself listening to external positive feedbacks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I decided to gain meaning from myself, and not my surroundings.&lt;/strong&gt; If negative feedbacks show up, they shouldn't affect my self-esteem. Having areas that need improvements don't make me a bad developer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I accepted I can't know everything&lt;/strong&gt;. Learning is great. But, naturally, it is not possible to know everything. It is GUARANTEED I will bump into things I don't know, and someone else will. No one can escape this scenario. This led me to an important understanding. &lt;em&gt;Professionalism is measured not only by what you know, but how you learn what you don't know.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I accepted that people have different values than me&lt;/strong&gt;. Sometimes I have opinions of how things "should be", that weren't in line with my coworkers' opinions. In times where I couldn't convince my colleagues, I felt very bad. Instead, I now allow myself letting go of some of my ideas. "Chasing" them and trying to make them happen at all cost was frustrating.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I accepted my judgmental nature&lt;/strong&gt;. When a judgmental though came to my mind, I noticed it, and labeled it as such. I doubted it instead of accepting it as is. Eventually, I could separate cases where things are truly "bad" or rather they just don't match my ideal (which is my problem). I moved from a passive point of view ("This is bad" or "I am bad") to an active point of view ("Should this be improved? Can I improve it? What can I do?").&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I decided to spend less time "learning" and "pushing myself forward".&lt;/strong&gt; Instead, I spent some time with non-work things. I learned to juggle. I improved my chess skills. I exercise more. I even play more PC games (an extreme luxury in the past).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I know what you're thinking. "Huh, that's a one way street for becoming a mediocre developer, or worse". Is it so?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#slowing-down-%E2%89%A0-stopping"&gt;
  &lt;/a&gt;
  Slowing Down ≠ Stopping
&lt;/h2&gt;

&lt;p&gt;Naturally, this change may slow my career progress. However, the pros beat the cons. I don't feel stressed, and I'm more energetic. Non-work activities were more enjoyable. I'm more concentrated at work, and I solve problems quicker. When incidents come up at work, I'm much more calm and focused. Innovative ideas come to my mind more often, and I have time to implement them. I learn and create because I &lt;em&gt;want to&lt;/em&gt;, not because I &lt;em&gt;have to&lt;/em&gt;. Once you realize you don't really chase anything - the meaning of speed matters less.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qu4NRocq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q72hxdjn4hktpz69kjqg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qu4NRocq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q72hxdjn4hktpz69kjqg.jpg"&gt;&lt;/a&gt;&lt;br&gt;A walking person enjoying the view. It's not a race, you won't "win" by going faster. (Image by &lt;a href="https://unsplash.com/photos/mNGaaLeWEp0"&gt;Emma Simpson&lt;/a&gt;)
  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Being a developer is very demanding by itself. On top of that, each person in the dev community has something to say about what you should learn, and what you should do. FOMO is inevitable, and it's easy to feel bad (or simply not good enough) with yourself. &lt;/p&gt;

&lt;p&gt;I wanted to share my story, maybe it will help other devs with similar feelings.  My main message to you is: Relax, breath. Remember to slow down sometimes. You're doing alright 🤗&lt;/p&gt;

&lt;p&gt;On a more personal note (if that's even possible), it was very difficult to me for write on such a personal topic. I'd love to hear your thoughts about this - feel free to approach me at any way (comments, DM, emails - you name it)&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Creating a multi architecture CI/CD deployment for Amazon ECS and ECS Anywhere</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Fri, 16 Jul 2021 12:08:59 +0000</pubDate>
      <link>https://dev.to/aws/creating-a-multi-architecture-ci-cd-deployment-for-amazon-ecs-and-ecs-anywhere-15o3</link>
      <guid>https://dev.to/aws/creating-a-multi-architecture-ci-cd-deployment-for-amazon-ecs-and-ecs-anywhere-15o3</guid>
      <description>&lt;p&gt;Organisations are moving their workloads to the cloud as quickly as they can. While most applications can be easily migrated to the cloud, some applications need to remain on-premises due to low-latency or data sovereignty requirements. &lt;/p&gt;

&lt;p&gt;Regardless of where workloads may reside, organisations want to be able to develop once and be able to deploy workloads to the cloud or on-premises in an agile and consistent fashion using a common set of APIs to manage and operate. &lt;/p&gt;

&lt;p&gt;Furthermore, enterprises need to be able to leverage investments in skills, technology, and processes across their environments. This leads many enterprises to seek hybrid cloud architectures to integrate their on-premises and cloud operations to support a broad spectrum of use cases, &lt;/p&gt;

&lt;p&gt;In this post I am going to explore how you can deploy your application to both your own environment and the AWS Cloud. We will take a simple application, a Dockerised Spring Boot application, and then automate the build and deployment of that application so that we can run it anywhere we want and on multiple processor architectures. For this I am going to setup Amazon ECS and ECS Anywhere, which allows you to run your ECS applications anywhere you want.&lt;/p&gt;

&lt;p&gt;We will cover setting up a simple hybrid environment, with my home network being a proxy for your own on premises environment, and set up the site to site VPN and software components that enable us to seamlessly deploy our containerised applications on both our Cloud and our on premises servers.&lt;/p&gt;

&lt;p&gt;This is what it will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IT_vwPtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT_vwPtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch2.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The kinds of use case and problems this will help you with include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;building my applications so they will work across different architecture types, providing me with more choice and options&lt;/li&gt;
&lt;li&gt;simplifying and centralising my application builds so I can build once and deploy anywhere on any architecture&lt;/li&gt;
&lt;li&gt;manage my containerised applications running either in AWS or within my own environments (via ECS Anywhere)&lt;/li&gt;
&lt;li&gt;provide additional deployment applications for applications that might have requirements to run locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post will be in two parts.&lt;/p&gt;

&lt;p&gt;The first part will look at setting up the multi-architecture build pipeline, that will take our sample Spring Boot application, and then build it and deploy it to some target clusters running mixed x86 and AWS Graviton2/arm based instance types.&lt;/p&gt;

&lt;p&gt;The second part will look at extending this model, setting up the hybrid environment using ECS Anywhere and then using that to deploy the same application seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will need&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can follow on with this post as I have published all the scripts and code so you can replicated this for yourself. Find the &lt;a href="https://github.com/094459/blog-multi-arch-springboot"&gt;GitHub repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need a developer environment that has the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS Account with the right level of access (Admin) as well as the &lt;a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html?icmpid=docs_acc_console_connect"&gt;CodeCommit configured&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS cli&lt;/li&gt;
&lt;li&gt;Docker running on your local environment&lt;/li&gt;
&lt;li&gt;A Docker Hub account (we will need to use this to pull down containers during the build process)&lt;/li&gt;
&lt;li&gt;AWS CDK setup and running (cdk --version should be at least version 1.110.1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have been running this demo for about a week, and it has cost me so about $22 per day but I suspect if you get it up and running and then explore and remove everything it will cost a lot less. These exclude any costs you might have for your local environment.&lt;/p&gt;

&lt;p&gt;I will cover how to remove everything at the end as part of the clean up activities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-zero-the-application"&gt;
  &lt;/a&gt;
  Part zero: The application
&lt;/h2&gt;

&lt;p&gt;The app we will be using is a simple Spring Boot application that will display a different logo based on what the underlying architecture is.&lt;/p&gt;

&lt;p&gt;The application has been containerised, and here is the Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM amazoncorretto:11 as builder

COPY . /srv
WORKDIR /srv
RUN ./mvnw package spring-boot:repackage


FROM amazoncorretto:11

COPY --from=builder /srv/target/spring-boot-demo-1.0.0.jar /srv/
EXPOSE 8080

ENTRYPOINT ["java","-jar", "/srv/spring-boot-demo-1.0.0.jar"]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you access the application via a web browser, it will display information about the underlying system that it is running on, changing image based on the process architecture.&lt;/p&gt;

&lt;p&gt;We can run this application on our local developer environment which we will see in a moment so you can see it running as you might typically do as part of your development workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-one-setting-up-the-multi-architecture-cicd-pipeline"&gt;
  &lt;/a&gt;
  Part One: Setting up the Multi architecture CI/CD pipeline
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are going to set up the environment using Infrastructure as Code (IaC) and in this particular walkthrough, I am going to use AWS CDK. This will do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup the initial source code and container repositories via a setup script&lt;/li&gt;
&lt;li&gt;set up the networking infrastructure, including the site to site VPN which we will use later&lt;/li&gt;
&lt;li&gt;set up the Amazon ECS cluster, deploying our application&lt;/li&gt;
&lt;li&gt;deploy a CI/CD pipeline that will automate the rebuilding and repacking of our application when changes are detected, and deploy the latest version to our Amazon ECS Cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what it will look like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lDxi6xBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lDxi6xBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch1.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need to create and store securely the Docker Hub username and password which will be used by the automation scripts. We do not want to store these in the configuration files, as we do not want to leak those to our source control systems. We will store this using AWS Parameter Store, and then reference these in our code we will run later.&lt;/p&gt;

&lt;p&gt;We will create two parameters, one for the Docker Hub username, the other for the password. In our code we reference these as "/springboot-multiarch/dockerhub/username" and "/springboot-multiarch/dockerhub/password" so if you change these, remember to update the code where they are referenced.&lt;/p&gt;

&lt;p&gt;To create your username/password, go to your Docker Hub account settings and create a new token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXv0pu8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/dhub.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXv0pu8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/dhub.png%3Fraw%3Dtrue" alt="screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have created one called "multi-arch-spring" and it will generate a token. You need to record this and keep it safe as we will use it in the next step.&lt;/p&gt;

&lt;p&gt;From the command line, lets store these using the following commands, replacing the region where you want to deploy this solution and the password token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ssm put-parameter --name "/springboot-multiarch/dockerhub/username" --value "multi-arch-spring" --type "SecureString" --region={your region where you will deploy this app}
aws ssm put-parameter --name "/springboot-multiarch/dockerhub/password" --value "{your token}" --type "SecureString" --region={your region where you will deploy this app}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the AWS console, if you go to the AWS Systems Manager, Parameter Store you should now see these@&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTp4eiz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTp4eiz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm.png%3Fraw%3Dtrue" alt="show"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to proceed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running the setup script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] Check out the repository on your developer machine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example below, I am checking the repository out after swtiching to a separate folder off my home folder in a directory called blog-demo [cd ~/blog-demo]&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~
mkdir blog-demo
cd ~/blog-demo
git clone https://github.com/094459/blog-multi-arch-springboot.git
cd blog-multi-arch-springboot/demo-multiarch-springboot-multiarch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[2] Review the setup.sh script, changing the parameters at the top of the script so that they work for your own environment. You MUST change the AWS DEFAULT REGION and AWS ACCOUNT, the others you can leave if you want but are customisable. Any changes will need to be updated in the CDK application which we will use later.&lt;/p&gt;

&lt;p&gt;For the rest of this walk through, I will use these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AWS_DEFAULT_REGION={your AWS region}
AWS_ACCOUNT={your AWS account number}
AWS_ECR_REPO=demo-multiarch-springboot-ecsanywhere
AWS_CC_REPO=demo-multiarch-springboot-ecsanywhere
COMMIT_HASH="abcdef"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[3] Run the setup.sh script, which will 1/Create a Code Commit repository, 2/Create an ECR repository and 3/Build and publish the sample Spring Boot application in the ECR repository.&lt;/p&gt;

&lt;p&gt;We are containerising this application as we will be using this container when we create the Amazon ECS cluster.&lt;/p&gt;

&lt;p&gt;Running this script may take 10-15 minutes (or more depending on your internet speeds) but you should see something like this (your specific details will be different to the following)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
...
The push refers to repository [704533066374.dkr.ecr.eu-west-1.amazonaws.com/demo-multiarch-springboot-ecsanywhere-test]
05aeb36b29bc: Pushed
# create AWS ECR Repo
91a6dcd86b53: Pushed
ec1372e9de86: Pushed
abcdef-arm64: digest: sha256:f51d9da34442fb53f67439752754fd36e02406d061db0a574429e6ecf94d9689 size: 954
Created manifest list 704533066374.dkr.ecr.eu-west-1.amazonaws.com/demo-multiarch-springboot-ecsanywhere-test:abcdef
{
   "schemaVersion": 2,
   "mediaType": "application/vnd.docker.distribution.manifest.list.v2+json",
   "manifests": [
      {
         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
         "size": 954,
         "digest": "sha256:28ad0b732b826e8a27575715b3d922c4ce0065749be31af7325ab5f96c5fba9b",
         "platform": {
            "architecture": "amd64",
            "os": "linux"
         }
      },
      {
         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
         "size": 954,
         "digest": "sha256:f51d9da34442fb53f67439752754fd36e02406d061db0a574429e6ecf94d9689",
         "platform": {
            "architecture": "arm64",
            "os": "linux"
         }
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have our containerised application stored in Amazon ECR, which we will use when we build our Amazon ECS cluster.&lt;/p&gt;

&lt;p&gt;[4] We are now going to populate the CodeCommit repository that was created. We will create a new working directory to do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/blog-demo
git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/demo-multiarch-springboot-ecsanywhere-test demo-app
cd demo-app
cp -r ~/blog-demo/blog-multi-arch-springboot/demo-multiarch-springboot-multiarch/* .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a directory structure that looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── cdk-app
│   └── ecs-anywhere
│       ├── app.py
│       ├── ecs_anywhere
│       │   ├── ecs_anywhere_cicd.py
│       │   ├── ecs_anywhere_ecs.py
│       │   ├── ecs_anywhere_pipe.py
│       │   ├── ecs_anywhere_repo.py
│       │   └── ecs_anywhere_vpc.py
│       └── requirements.txt
├── pipeline
│   ├── ecs-pipeline
│   └── eks-pipeline
├── setup.sh
└── springbootdemo
    ├── Dockerfile
    ├── mvnw
    ├── pom.xml
    ├── src
    │   └── main
    │       ├── java
    │       │   └── hello
    │       │       ├── Application.java
    │       │       └── HelloController.java
    │       └── resources
    │           └── static
    │               ├── css
    │               │   └── style.css
    │               └── images
    │                   ├── arm.png
    │                   ├── aws.png
    │                   └── intel.png
    ├── tf-any.json
    ├── tf.json
    └── tf.json.template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[5] Commit this and then publish to the CodeCommit repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "Initial upload"
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! If you get prompted for username/password, then you may not have the CodeCommit Git helper configured. Check out the documented linked above. In your .gitconfig file I have the following setup&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[credential]
  helper =
  helper = !aws codecommit credential-helper $@
  UseHttpPath = true

[user]
  email = xxxx@xxxx.com
  name = xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;[6] We will now change the default branch to Main. This is much easier to do via the console, where you go to the repository (demo-multiarch-springboot-ecsanywhere-test) create a branch (main) and then go to settings and make this the default branch. &lt;/p&gt;

&lt;p&gt;Once you have done this, switch to the main branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
git checkout main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have the application we can make updates too that will trigger our CI/CD pipeline later on. Now we can set that up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploy the AWS resources via AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[7] We are now ready to deploy the AWS resources using AWS CDK. We go back to the first folder we checked out, and go to the folder where the CDK app has been created. We need to adjust the app.py file, which contains parameters to customise the demo for your environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/blog-demo/blog-multi-arch-springboot/demo-multiarch-springboot-multiarch/cdk-app/ecs-anywhere
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you look at the app.py file, you will need to change the env_EU and the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from aws_cdk import core

from ecs_anywhere.ecs_anywhere_cicd import EcsAnywhereCICDStack
from ecs_anywhere.ecs_anywhere_vpc import EcsAnywhereVPCStack
from ecs_anywhere.ecs_anywhere_ecs import EcsAnywhereECSStack
from ecs_anywhere.ecs_anywhere_pipe import EcsAnywherePipeStack
from ecs_anywhere.ecs_anywhere_repo import EcsAnywhereLBStack

env_EU=core.Environment(region="eu-west-1", account="704533066374")

props = {
    'mydcexternalip': '79.67.110.xx',
    'mydcinternalcidr' : '192.168.1.0/24',
    'awsvpccidr':'10.0.0.0/16',
    'ecsclustername':'mydc-ecs',
    'ecr-repo': 'demo-multiarch-springboot-ecsanywhere',
    'code-repo' : 'demo-multiarch-springboot-multiarch',
    'image-tag' : 'abcdef',
    'home-pi' : '192.168.1.99'
    }

app = core.App()

mydc_vpc = EcsAnywhereVPCStack(
    scope=app,
    id="ecs-anywhere-vpc",
    env=env_EU,
    props=props
)

mydc_lb = EcsAnywhereLBStack(
    scope=app,
    id="ecs-anywhere-lb",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props
)

mydc_ecs_cicd = EcsAnywhereCICDStack(
    scope=app,
    id="ecs-anywhere-cicd",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props  
)

mydc_ecs_pipe = EcsAnywherePipeStack(
    scope=app,
    id="ecs-anywhere-pipe",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props  
)

mydc_ecs = EcsAnywhereECSStack(
    scope=app,
    id="ecs-anywhere-cfn",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props
)

app.synth()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The app.py shows you the different stacks that you will need to deploy to build this demo. The first thing we need to do is set the correct values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env_EU=core.Environment(region="{your aws region}", account="{your aws account}")

props = {
    'mydcexternalip': '{your external router IP - you can find this via tools like what is my IP}',
    'mydcinternalcidr' : '{your home network CIDR e.g.192.168.1.0/24}',
    'awsvpccidr':'{your VPC CIDR range e.g 10.0.0.0/16}',
    'ecsclustername':'{name for your ecs cluster e.g. mydc-ecs}',
    'ecr-repo': '{name of the ECR repo - must match what you set in the setup.sh e.g. demo-multiarch-springboot-ecsanywhere}',
    'code-repo' : '{name of the CodeCommit repo - must match what you setup above, e.g. demo-multiarch-springboot-multiarch}',
    'image-tag' : '{initial hash for ECR repo - must match what you have setup above, e.g. abcdef}'
    }
    'home-pi' : '{the IP address of the Raspberry Pi you will be running your workloads on your local network}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have amended this file and saved it, we are ready to deploy the first stack. To make sure it is all working as expect, type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you should see the following output, which means we are ready to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ecs-anywhere-cfn
ecs-anywhere-pipe
ecs-anywhere-vpc
ecs-anywhere-cicd
ecs-anywhere-lb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Deploy the VPC stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[8] The first stack we will deploy is the VPC which will deploy and configure all the networking components. Much of this will be used in Part Two. To deploy,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-vpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you should see something like this if successful. You will need this info for Part Two, so make sure you keep a record although you can view this information in the CloudFormation console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ✅  ecs-anywhere-vpc

Outputs:
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcC99028A5E0C4BB86 = vpc-0e77901855dd34b64
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcprivateSubnet1Subnet907447937118DADD = subnet-00d3e62f014db2eb2
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcprivateSubnet2Subnet2F863D5508703380 = subnet-084ab056d6ab1ae1a
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcpublicSubnet1Subnet93B9609B6FB2CB58 = subnet-0eb59347bf659e8d0
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcpublicSubnet2Subnet252458EC3B8C529C = subnet-038234a8a8bffb90a
ecs-anywhere-vpc.VPCId = vpc-0e77901855dd34b64
ecs-anywhere-vpc.VPGId = vgw-0bc980838a7a37eda

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-vpc/a5f78e70-e28e-11eb-90fc-026316002c84
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Deploy the Amazon ECS Cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[9] The next stage we will deploy the application into an Amazon ECS cluster. This will create two EC2 instances, one using x86 and the other, using AWS Graviton2 instance types. It will set up the application load balancer and create a service. Once this has completed, we will be able to access the application via the DNS name that is displayed in the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-cicd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a review screen that shows the security changes this stack will deploy. Answer Y to deploy. After a while, if you are successful you will see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ✅  ecs-anywhere-cicd

Outputs:
ecs-anywhere-cicd.LoadBalancerEndpoint = ecs-a-LB8A1-UQ0ZD3461WUB-1638849351.eu-central-1.elb.amazonaws.com

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-cicd/7004c1a0-e290-11eb-9334-0288a08f1e2c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[10] You will now be able to access the application via the browser, using the endpoint that is output. In my example, when I enter "&lt;a href="http://ecs-a-LB8A1-UQ0ZD3461WUB-1638849351.eu-central-1.elb.amazonaws.com"&gt;http://ecs-a-LB8A1-UQ0ZD3461WUB-1638849351.eu-central-1.elb.amazonaws.com&lt;/a&gt;" into my browser and refresh a few times, I see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLJa2Qf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-x86.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLJa2Qf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-x86.png%3Fraw%3Dtrue" alt="demo app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I refresh the page a few times, you should see it change as your request is served up by a different container instance running on a different processor architecture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1zpsdZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-arm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1zpsdZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-arm.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have now deployed the application, next step is to setup and deploy a CI/CD so we can make changes and automate the process of 1/building updates container images of our application, and 2/deploy this to this cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying the CI/CD System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[11] From the command line, we can deploy the CI/CD setup with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a review screen that shows the security changes this stack will deploy. Answer Y to deploy. After a while, if you are successful you will see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ✅  ecs-anywhere-pipe

Outputs:
ecs-anywhere-pipe.CodeCommitOutput = https://git-codecommit.eu-central-1.amazonaws.com/v1/repos/demo-springboot-repo

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-pipe/30f90840-e29a-11eb-b20f-0ae3cbe3a3b6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it, you now have a CI/CD setup that is going to build both x86 and arm container images of your application every time you change your code.&lt;/p&gt;

&lt;p&gt;The CDK application builds the CodePipeline and CodeBuild steps, ensures that the right permissions are defined and that it is integrated with the right source code repository to trigger the pipeline. It does not configure what these steps will do however, and for that we have some additional yml files where we configure the actual build steps.&lt;/p&gt;

&lt;p&gt;In the source code repository you will find a directory called "pipelines/ecs-pipeline" which has three files; armbuild.yml, amdbuild.yml and post_build.yml. These are the files that are used to create the specific actions that will be done by the automation. They use environment variables, including some we have set in the code to store values such as the ECS Cluster and Service name, the Docker Hub username and password and the tag id used for the container repository.&lt;/p&gt;

&lt;p&gt;Here is the post_build.yml file that takes the x86 and arm built containers, creates the container manifest files, tags them, uploads them to the Amazon ECR repository and then finally kicks of the deployment to our ECS cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - ARM_TAG=${IMAGE_TAG}-arm64
      - AMD_TAG=${IMAGE_TAG}-amd64
      - echo $REPOSITORY_URI
      - echo $IMAGE_TAG
      - echo $AMD_TAG
      - echo $ARM_TAG
      - export DOCKER_CLI_EXPERIMENTAL=enabled
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker manifest...
      - docker manifest create $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$ARM_TAG $REPOSITORY_URI:$AMD_TAG
      - docker manifest annotate --arch arm64 $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$ARM_TAG
      - docker manifest annotate --arch amd64 $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$AMD_TAG
      - docker manifest inspect $REPOSITORY_URI:$IMAGE_TAG
      - docker manifest push $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
       - cd springbootdemo
       - sed -i "s|{ecr_image}|${REPOSITORY_URI}:${IMAGE_TAG}|g" tf.json
       - sed -i "s|{region}|$AWS_DEFAULT_REGION|g" tf.json
       - sed -i "s|{log_group}|$ECS_SN|g" tf.json
       - aws ecs register-task-definition --cli-input-json file://tf.json
       - TASK_DEFINITON="springboot-cicd"
       - TASK_REVISION=`aws ecs describe-task-definition --task-definition $TASK_DEFINITON | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
       - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEFINITON:${TASK_REVISION} 
       - aws ssm put-parameter --name "/demo/ecsanywhere/latestimage" --value ${IMAGE_TAG} --type "String" --overwrite

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review what we have done so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reviewing what we just did&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have used AWS CDK as well as some scripts to automate the deployment and configuration of our sample application into an Amazon ECS cluster, and setup a simple CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;If you go to the AWS Console and review the Pipelines under CodePipeline, you should see that you now have a pipeline called "ECSAnyWhere" (or if you modified the code, what ever you renamed it to) with a status of successful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZuVx6Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/pipeline.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZuVx6Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/pipeline.png%3Fraw%3Dtrue" alt="pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can explore the build logs to see the output for each stage to see in more detail what is happening.&lt;/p&gt;

&lt;p&gt;When we make changes to our application, it kicks off the CI/CD system which builds the application on both x86 and arm platforms, and then deploys these on both x86 and Graviton2 instance types. Check out the application repo locally and make some changes. The code you can change is the HelloController.java (it will be n the springboot/src/main/java/hello directory) and I suggest perhaps changing the version number or the text that is displayed. &lt;/p&gt;

&lt;p&gt;Once you have committed the code, when you go back to the CodePipeline screen, you should see that the pipeline is kicking off. It will take around 5-10 minutes for the code to update and deploy to the ECS Cluster. Once it has, check both the application via the browser to see if your changes have been successful, or the logs (see below)&lt;/p&gt;

&lt;p&gt;You can review the output of this via the CloudFormation console. There will be a new CloudWatch log group, which should have a log stream for each ECS instance (so if you follow all the defaults, there will be two). When you open these log streams, you should see the output as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJI_tiWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/cw.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJI_tiWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/cw.png%3Fraw%3Dtrue" alt="logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the next part we are going to integrate with our "on premises" environment, which in my case, is my home network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-two-setting-up-and-integrating-with-your-local-environment"&gt;
  &lt;/a&gt;
  Part Two: Setting up and integrating with your local environment
&lt;/h2&gt;

&lt;p&gt;Now that we have our application, the next stage is to integrate this with our own environment. I am going to be doing the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup the local environment - configuring the site to site VPN and all the additional software components needed&lt;/li&gt;
&lt;li&gt;Deploying the AWS resources - we will set up an Amazon ECS cluster that will use the application we have just automated&lt;/li&gt;
&lt;li&gt;Integrate the on premises and AWS cloud environments&lt;/li&gt;
&lt;li&gt;Run our workloads, testing them both in the Cloud and on premises.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a number of great blog posts I read whilst preparing this post, which you should check out. The first is from Romain Jourdan &lt;a href="https://aws-oss.beachgeek.co.uk/pz"&gt;Secure Connection between AWS VPC and a Raspberry Pi&lt;/a&gt;, but there are a few others that are worth mentioning. This blog post from Nathan Peck, &lt;a href="https://aws-oss.beachgeek.co.uk/q0"&gt;Building an Amazon ECS Anywhere home lab with Amazon VPC network connectivity&lt;/a&gt; and this post &lt;a href="https://aws-oss.beachgeek.co.uk/q2"&gt;Look ma, I can run containers on Amazon ECS Anywhere — On-premises or on the Cloud !!&lt;/a&gt;. Finally, this great post, &lt;a href="https://aws-oss.beachgeek.co.uk/q1"&gt;Setup Raspberry PI 3 as AWS VPN Customer Gateway&lt;/a&gt; helped get me unstuck when I had VPN issues.&lt;/p&gt;

&lt;p&gt;Make sure you check them out if you get stuck or want to dive a little deeper into this setup. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am going to be using a Raspberry Pi as VPN Gateway, setup on my local network. I will use a different Raspberry Pi to run the application workloads.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have a different VPN Gateway (for example, if you are using a Unify type solution, then check out this Romain Jourdan blog post above). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing I have done on my home router is to create a Firewall DMZ, which opens up the world to the Internet, to a single host (in my case, a Raspberry Pi which I will host my VPN Gateway). It is outside the scope of this post on how that is configured, but it is a hardened/secure configuration given it is "exposed".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating the local Raspberry Pi's&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing I had to do was to update the firmware and kernel to latest version on the Raspberry Pi. This is outside the scope of this post, but if you get errors during the VPN setup with missing libraries, it is likely they are the cause of the problem so make sure you update everything before proceeding. You should do this at the start before you begin.&lt;/p&gt;

&lt;p&gt;I was using two different kinds of Raspberry Pi's - for the VPN Gateway I used an older Raspberry Pi Model 3 Rev B (running Raspbian), but for the Workloads I had a later Raspberry pi Model 4 (I was running Ubuntu 20.04.02 LTS).&lt;/p&gt;

&lt;p&gt;This is the output once I had updated the Pi running the VPN Gateway&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uname-a output
Linux dmcpi01 5.10.44-v7+ #1428 SMP Thu Jun 24 17:22:49 BST 2021 armv7l GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the output once I had updated the Pi running the workloads&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uname -a
Linux ubuntu 5.4.0-1038-raspi #41-Ubuntu SMP PREEMPT Thu Jun 17 14:14:11 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the Pi running the workloads I needed to make a modifications to /boot/firmware/cmdline.txt to append the following cgroup_enable=memory&lt;/p&gt;

&lt;p&gt;This is what mine looked like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;net.ifnames=0 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that change was done, a reboot is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the local Raspberry Pi that will run the local VPN Gateway&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] I needed to install some additional packages and dependencies. On the Raspberry Pi that is going to be my VPN Gateway, I run these commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install strongswan raspberrypi-kernel-headers lsof
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check to see if this has been successful by running this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ipsec status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should not return any errors. This is now ready for connecting to our AWS VPN, which we will now create so for the time being we will leave this and come back later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Site to Site VPN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[2] When we ran the "cdk deploy ecs-anywhere-vpc" it deployed and configured everything on the AWS side for the Site to Site VPN. We now just need to configure the local VPN gateway (Strongswan) to set up the ipsec tunnels.&lt;/p&gt;

&lt;p&gt;From the AWS console, you can see this if you go to the VPC, Site to Site Connections which should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IdSOK6aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-before.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IdSOK6aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-before.png%3Fraw%3Dtrue" alt="vpn-down"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This information was provided in the parameter section of the app.py file, and the important details here now are the CIDR address ranges (that need to match your local network - for mine this is 192.168.1.0/24) and the external IP address which is what the VPN tunnel from the AWS side is going to look to connect to. If you are unsure what this is, you can find it by googling "my IP address" - make sure you are not connected to a VPN though, otherwise you will get a different.&lt;/p&gt;

&lt;p&gt;You will need to click on the DOWNLOAD CONFIGURATION (highlighted above/arrow) and then select STRONGSWAN from the pull down menu. There are only single options for PLATFORM/SOFTWARE so click on the DOWNLOAD button, which will download a text file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0nLfF6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-strong.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0nLfF6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-strong.png%3Fraw%3Dtrue" alt="strong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] You will now need to follow the instructions provided in that text file on your Raspberry Pi local gateway.&lt;/p&gt;

&lt;p&gt;It should be pretty straight forward, but might take you around 10-15 minutes to complete. For reference, these are the steps I took:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changed /etc/sysctl.conf as per the various options documented (and then reload this via sudo sysctl -p)&lt;/li&gt;
&lt;li&gt;Created the ipsec.conf and added details for the two ipsec tunnels&lt;/li&gt;
&lt;li&gt;Created the ipsec.secrets and added the shared secrets&lt;/li&gt;
&lt;li&gt;Created the tunnel interfaces, running these commands:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ip link add Tunnel1 type vti local 192.168.1.6 remote 35.156.20.208 key 100
sudo ip addr add 169.254.100.230/30 remote 169.254.100.229/30 dev Tunnel1
sudo ip link set Tunnel1 up mtu 1419
sudo ip route add 10.0.0.0/16 dev Tunnel1 metric 100
sudo iptables -t mangle -A FORWARD -o Tunnel1 -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
sudo iptables -t mangle -A INPUT -p esp -s 35.156.20.208 -d 79.67.110.164 -j MARK --set-xmark 100

sudo ip link add Tunnel2 type vti local 192.168.1.6 remote 52.58.162.102 key 200
sudo ip addr add 169.254.254.234/30 remote 169.254.254.233/30 dev Tunnel2
sudo ip link set Tunnel2 up mtu 1419
sudo ip route add 10.0.0.0/16 dev Tunnel2 metric 200
sudo iptables -t mangle -A FORWARD -o Tunnel2 -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
sudo iptables -t mangle -A INPUT -p esp -s 52.58.162.102 -d 79.67.110.164 -j MARK --set-xmark 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have run this successfully, when you run the ifconfig-a command, you should now see two new interfaces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tunnel1   Link encap:IPIP Tunnel  HWaddr
          inet addr:169.254.100.230  P-t-P:169.254.100.229  Mask:255.255.255.252
          inet6 addr: fe80::5efe:c0a8:106/64 Scope:Link
          UP POINTOPOINT RUNNING NOARP  MTU:1419  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:8 dropped:0 overruns:0 carrier:8
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

Tunnel2   Link encap:IPIP Tunnel  HWaddr
          inet addr:169.254.254.234  P-t-P:169.254.254.233  Mask:255.255.255.252
          inet6 addr: fe80::5efe:c0a8:106/64 Scope:Link
          UP POINTOPOINT RUNNING NOARP  MTU:1419  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:3 dropped:0 overruns:0 carrier:3
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we check the routing tables, we should see we now have a path to our VPC on AWS via those interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;netstat -rn

Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         192.168.1.1     0.0.0.0         UG        0 0          0 wlan0
10.0.0.0        0.0.0.0         255.255.0.0     U         0 0          0 Tunnel1
10.0.0.0        0.0.0.0         255.255.0.0     U         0 0          0 Tunnel2
169.254.100.228 0.0.0.0         255.255.255.252 U         0 0          0 Tunnel1
169.254.254.232 0.0.0.0         255.255.255.252 U         0 0          0 Tunnel2
192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 wlan0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! This information is not persistent. If you restart your Pi, you will need to repeat these steps. Read the text file for details of how you can persist the configuration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[4] We can now start the local Strongswan VPN by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ipsec start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which we can check by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ipsec status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should now see that the VPN is starting and establishing the connection with the AWS VPN Gateway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Security Associations (2 up, 0 connecting):
     Tunnel2[2]: ESTABLISHED 3 seconds ago, 192.168.1.6[80.42.49.11]...18.184.143.185[18.184.143.185]
     Tunnel2{2}:  INSTALLED, TUNNEL, ESP in UDP SPIs: c6777c18_i c9f1bf73_o
     Tunnel2{2}:   0.0.0.0/0 === 0.0.0.0/0
     Tunnel1[1]: ESTABLISHED 3 seconds ago, 192.168.1.6[80.42.49.11]...3.65.61.44[3.65.61.44]
     Tunnel1{1}:  INSTALLED, TUNNEL, ESP in UDP SPIs: c57f2982_i cbfd1699_o
     Tunnel1{1}:   0.0.0.0/0 === 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note!&lt;/strong&gt; If you see the following, then it is likely that you have entered the ipsec.conf/ipsec.security details incorrectly, so review that information.&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Security Associations (2 up, 0 connecting):
     Tunnel2[2]: CONNECTING, 192.168.1.6[%any]...52.58.162.102[%any]
     Tunnel1[1]: CONNECTING, 192.168.1.6[%any]...35.156.20.208[%any]
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;We can verify that everything is working by going to the AWS Console, and checking the status of the tunnel again. You should see that the VPN tunnel is now up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6iLQQ7UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-up.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6iLQQ7UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-up.png%3Fraw%3Dtrue" alt="vpn-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Route to AWS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is one final thing we need to do. On the Raspberry Pi that will be running our sample application, it does not yet know how to route traffic to AWS via the VPN. We need to add a static route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ip route add 10.0.0.0/16 via 192.168.1.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will route all traffic for AWS via the Raspberry Pi VPN gateway (192.168.1.6) we just created.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! This is quite an important step. If the workload machine does not have a route back, during the later sections of this blog post, when you come to create a load balancer to this instance, you will get errors because the Pi does not know how to route traffic via the VPN.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have now finished the networking part, and can move onto setting up our local workloads.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! Whilst I was putting this together, my broadband went down. When it came back, my external IP had changed. I had to update the IP in the app.py and then redeploy the ecs-anywhere-vpc stack to update everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Configuring and deploying AWS resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now have a secure connection between our AWS environment and our local environment. We will come back to this in a moment. Now we are going to setup our local Raspberry Pi workload machine so that it can become a host that can run our containerised applications and integrate with the Amazon ECS control plane.&lt;/p&gt;

&lt;p&gt;This will involve creating a new ECS cluster in which we can register these "EXTERNAL" resources, and then setting up the software on those local resources (in my case, the Raspberry Pi workload machine) so that it can be managed by Amazon ECS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! Connectivity between AWS and our local environment is needed as the local instance is in essence being managed by the Amazon ECS control plane. Whilst it can tolerate some down time, after a few hours you will experience issues with your local environment. Therefore this is not (currently at least) intended for disconnected/infrequently connected environments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[4] We now need to go back to our developer machine where we ran t[]he CDK applications as part of Part One, and run the following to deploy a new Amazon ECS cluster which we will use to register the EXTERNAL, or hybrid ECS Anywhere instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-cfn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be prompted to review security settings, repond Y and if successful you should see output like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 ✅  ecs-anywhere-cfn

Outputs:
ecs-anywhere-cfn.ECSAnyWhereIamRole = ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP
ecs-anywhere-cfn.ECSClusterName = mydc-ecs-extcluster

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-cfn/24fb74e0-e2fb-11eb-ae06-06c47aa6fac8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to use the values of ecs-anywhere-cfn.ECSAnyWhereIamRole in a moment. In my example here, it is ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP&lt;/p&gt;

&lt;p&gt;If you go to the AWS console you will now see a new ECS cluster appear (which should match the name in the output of ecs-anywhere-cfn.ECSClusterName (so in the above example, this is mydc-ecs-extcluster)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the local Raspberry Pi that will run our ECS Anywhere workloads&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[5] Log back into your local Raspberry Pi where you plan to run your workloads. You will need to install the AWS cli and then configure with a set of AWS credentials. I created a new IAM user for this purpose, but this is up to you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install awscli
aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[6] We now need to install the agent software onto this Raspberry Pi (workload). Before we do that though, we need to get an activation code, which we will use the IAM role we created above (the output from the CDK app - ecs-anywhere-ec2.ECSAnyWhereIamRole, which in my example was ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ssm create-activation --iam-role ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP --region={region} | tee ssm-activation.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generated the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "ActivationId": "0c8840d6-cd71-482c-9ea5-3c8380cc325a",
    "ActivationCode": "v4PEBr7nyIQ6u55OaWs!"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! Do not share these or store these electronically. I have changed these values and they will not work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Will need these values in a minute, so lets create environment variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export id="0c8840d6-cd71-482c-9ea5-3c8380cc325a"
export code="v4PEBr7nyIQ6u55OaWs!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Once you have these values, the clock is ticking. You will have a short amount of time in which to run the script (which will depend on how you have configured your AWS environment account timeouts). To know if this is the cause of any issues, you will see the following error in your logs like &lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;level=error time=2021-06-30T16:22:12Z msg="Unable to register as a container instance with ECS: ExpiredTokenException: The security token included in the request is expired\n\tstatus code: 400, request id: f21461d9-ba49-4097-a66c-a902747428c4" module=client.go
level=error time=2021-06-30T16:22:12Z msg="Error registering: ExpiredTokenException: The security token included in the request is expired\n\tstatus code: 400, request id: f21461d9-ba49-4097-a66c-a902747428c4" module=agent.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;[7] Run the following command which will download the ECS Anywhere installation script which does three things: it installs the ECS Agent, the SSM Agent and the Docker engine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --proto "https" -o ~/ecs-anywhere-install.sh "https://amazon-ecs-agent.s3.amazonaws.com/ecs-anywhere-install-latest.sh"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we ran the CDK script to provision the ECS cluster, it output the name of the ECS Cluster, so lets assign that to an environment variable as will need to use that in the next step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export ecscluster="mydc-ecs-extcluster"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[8] We can now run the installation script to install and configure the required software components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo bash ~/ecs-anywhere-install.sh --region {your AWS region} --cluster $ecscluster --activation-id $id --activation-code $code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to take a few minutes whilst it downloads, installs and configures the SSM and ECS agents on the Raspberry Pi.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you see the following error, make sure you have set your AWS region information correctly:&lt;/p&gt;

&lt;p&gt;Error occurred fetching the seelog config file path:  open /etc/amazon/ssm/seelog.xml: no such file or directory&lt;br&gt;
Initializing new seelog logger&lt;br&gt;
New Seelog Logger Creation Complete&lt;br&gt;
2021-07-12 12:46:23 WARN Could not read InstanceFingerprint file: InstanceFingerprint does not exist.&lt;br&gt;
2021-07-12 12:46:23 INFO No initial fingerprint detected, generating fingerprint file...&lt;br&gt;
2021-07-12 12:46:25 ERROR Registration failed due to error registering the instance with AWS SSM. InvalidActivation:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should get output similar to the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
...
Ping ECS Agent registered successfully! Container instance arn: "arn:aws:ecs:eu-west-1:704533066374:container-instance/ecs-anywhere-ec2-mydcecsclusterBB109425-r7l2mKClssuV/8dfb8700d9a1460dad403a321db6b5b9"

You can check your ECS cluster here https://console.aws.amazon.com/ecs/home?region=eu-west-1#/clusters/ecs-anywhere-ec2-mydcecsclusterBB109425-r7l2mKClssuV

# ok
##########################


##########################
This script installed three open source packages that all use Apache License 2.0.
You can view their license information here:
  - ECS Agent https://github.com/aws/amazon-ecs-agent/blob/master/LICENSE
  - SSM Agent https://github.com/aws/amazon-ssm-agent/blob/master/LICENSE
  - Docker engine https://github.com/moby/moby/blob/master/LICENSE
##########################
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What just happened? &lt;/p&gt;

&lt;p&gt;Well, on your local (in my case, Raspberry Pi) the script (ecs-anywhere-install.sh) installs and configures the AWS SSM Agent as well as the ECS Anywhere agent. The script will also install additional software for running your container applications, for example Docker.&lt;/p&gt;

&lt;p&gt;If we go to AWS System Manager &amp;gt; Fleet Management we should now see our Raspberry Pi show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93xQKyTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm-fleet.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93xQKyTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm-fleet.png%3Fraw%3Dtrue" alt="ssm-fleet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ECS Agent has also been added as a resource to the ECS Cluster we created. If we go to the AWS Console and look at the ECS Clusters, we will see this new resource listed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtNsgBbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtNsgBbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-1.png%3Fraw%3Dtrue" alt="resource1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can click on it to see more details about the available resources (memory / cpu / processor / etc) that this instance provides&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMtS4MYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMtS4MYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-2.png%3Fraw%3Dtrue" alt="resource2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now deploy our application to this ECS cluster, and it will get deployed onto our local Raspberry Pi and then be accessible via the local network (in my case, this is &lt;a href="http://192.168.1.99"&gt;http://192.168.1.99&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying the application to your local ECS Anywhere cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[9] We will do this via the cli before we amend the CI/CD system so that this is automatically done every time there is an update.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! The first time that you launch the task, the Raspberry Pi will need to download the container images so it will take longer to start the application (and will vary depending on your internet connection). If you notice your Task is in "PENDING" then this could be the reason.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing we need to do is prep the task_definion.json file which we will use to create a new version of the task definition that was created during the AWS CDK ecs-anywhere-cfn deployment. We create a file called tf-any.json as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "requiresCompatibilities": [
        "EXTERNAL"
    ],
    "containerDefinitions": [{
        "name": "springboot-remote",
        "image": "{ecr_image}",
        "memory": 256,
        "cpu": 256,
        "essential": true,
        "portMappings": [{
            "containerPort": 8080,
            "hostPort": 8080,
            "protocol": "tcp"
        }]
    }],
    "networkMode": "bridge",
    "family": "ecsanywhere"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know what the latest container image is by looking in the ECR Repository. (When we come to automate this via CI/CD, these are passed as environment variables, so we only need to do this now as we bootstrap the application for the first time)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export APP="704533066374.dkr.ecr.eu-central-1.amazonaws.com/demo-springboot-ecsanywhere:56beb49"
sed -i "s|{ecr_image}|$APP|g" tf-any.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! If you are using a Mac, you will need to use "sed -i '.bak' "s|{ecr_image}|$APP|g" tf-any.json"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will update the file with the container reference and has. We can now register a new task definition. I will use what we already have in the post_build.yml script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOCAL_ECS_CLUSTER="mydc-ecs-extcluster"
LOCAL_ECS_SERVICE="mydc-ecs-svc"
LOCAL_TASK_DEFINITON="ecsanywhere"
aws ecs register-task-definition --cli-input-json file://tf-any.json --region={the region where the ECS cluster is running}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate output similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "taskDefinition": {
        "taskDefinitionArn": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:5",
        "containerDefinitions": [
            {
                "name": "springboot-remote",
                "image": "704533066374.dkr.ecr.eu-central-1.amazonaws.com/demo-springboot-ecsanywhere:56beb49",
                "cpu": 256,
                "memory": 256,
                "portMappings": [
                    {
                        "containerPort": 8080,
                        "hostPort": 8080,
                        "protocol": "tcp"
                    }
                ],
                "essential": true,
                "environment": [],
                "mountPoints": [],
                "volumesFrom": []
            }
        ],
        "family": "ecsanywhere",
        "networkMode": "bridge",
        "revision": 5,
        "volumes": [],
        "status": "ACTIVE",
        "requiresAttributes": [
            {
                "name": "com.amazonaws.ecs.capability.ecr-auth"
            }
        ],
        "placementConstraints": [],
        "compatibilities": [
            "EXTERNAL",
            "EC2"
        ],
        "requiresCompatibilities": [
            "EXTERNAL"
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I need to grab the latest version from that output, and then use that to update the running service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOCAL_TASK_REVISION=`aws ecs describe-task-definition --task-definition $LOCAL_TASK_DEFINITON --region={the region where the ECS cluster is running} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use "echo $LOCAL_TASK_REVISION" you will see the new version number which we will use when we update the running service. Now we have everything we need to update the service, which we can do using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ecs update-service --cluster $LOCAL_ECS_CLUSTER --service $LOCAL_ECS_SERVICE --task-definition $LOCAL_TASK_DEFINITON:${LOCAL_TASK_REVISION} --region={the region where the ECS cluster is running}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will give you something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "service": {
        "serviceArn": "arn:aws:ecs:eu-central-1:704533066374:service/mydc-ecs-extcluster/mydc-ecs-svc",
        "serviceName": "mydc-ecs-svc",
        "clusterArn": "arn:aws:ecs:eu-central-1:704533066374:cluster/mydc-ecs-extcluster",
        "loadBalancers": [],
        "serviceRegistries": [],
        "status": "ACTIVE",
        "desiredCount": 1,
        "runningCount": 1,
        "pendingCount": 0,
        "launchType": "EXTERNAL",
        "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:5",
        "deploymentConfiguration": {
            "deploymentCircuitBreaker": {
                "enable": false,
                "rollback": false
            },
            "maximumPercent": 200,
            "minimumHealthyPercent": 100
        },
        "deployments": [
            {
                "id": "ecs-svc/2775386206525924918",
                "status": "PRIMARY",
                "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:5",
                "desiredCount": 1,
                "pendingCount": 0,
                "runningCount": 0,
                "failedTasks": 0,
                "createdAt": 1626102200.686,
                "updatedAt": 1626102200.686,
                "launchType": "EXTERNAL",
                "rolloutState": "IN_PROGRESS",
                "rolloutStateReason": "ECS deployment ecs-svc/2775386206525924918 in progress."
            },
            {
                "id": "ecs-svc/7501839119011433935",
                "status": "ACTIVE",
                "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:4",
                "desiredCount": 1,
                "pendingCount": 0,
                "runningCount": 0,
                "failedTasks": 2,
                "createdAt": 1626101923.328,
                "updatedAt": 1626101923.328,
                "launchType": "EXTERNAL",
                "rolloutState": "IN_PROGRESS",
                "rolloutStateReason": "ECS deployment ecs-svc/7501839119011433935 in progress."
            },
            {
                "id": "ecs-svc/5388566575203796106",
                "status": "ACTIVE",
                "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:3",
                "desiredCount": 1,
                "pendingCount": 0,
                "runningCount": 1,
                "failedTasks": 0,
                "createdAt": 1626101139.148,
                "updatedAt": 1626101938.625,
                "launchType": "EXTERNAL",
                "rolloutState": "COMPLETED",
                "rolloutStateReason": "ECS deployment ecs-svc/5388566575203796106 completed."
            }
        ],
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Accessing the application locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[10] On your local network, you can now access the application via your web browser on port 8080. When I access this on my network, this is what I get.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BDK8vuGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/remote-app.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BDK8vuGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/remote-app.png" alt="local-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we know it works, we can automate those steps and incorporate it within the CI/CD system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating the CI/CD to deploy locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do this all we need to do is update the post_build step in the CI/CD workflow. The containers have already been built/packaged, so all we need is to add the following steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#       - sed -i "s|{ecr_image}|${REPOSITORY_URI}:${IMAGE_TAG}|g" tf-any.json
#       - LOCAL_ECS_CLUSTER="mydc-ecs-extcluster"
#       - LOCAL_ECS_SERVICE="mydc-ecs-svc"
#       - aws ecs register-task-definition --cli-input-json file://tf-any.json
#       - LOCAL_TASK_DEFINITON="ecsanywhere"
#       - LOCAL_TASK_REVISION=`aws ecs describe-task-definition --task-definition $LOCAL_TASK_DEFINITON | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
#       - aws ecs update-service --cluster $LOCAL_ECS_CLUSTER --service $LOCAL_ECS_SERVICE --task-definition $LOCAL_TASK_DEFINITON:${LOCAL_TASK_REVISION} 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are already in the sample files, but commented out. This is because the post_build script would have failed prior to us setting up the remote cluster. We can now enable these (and if you have changed any of the names, make sure you update the values above).&lt;/p&gt;

&lt;p&gt;To do this, we check out the repository, make the changes and then commit the changes. Once committed, this will trigger the build process. The changes we will make are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;upload the new tf-any.json file to the springboot folder - this is going to be updated every time a new container image is built, and then used to register a new task&lt;/li&gt;
&lt;li&gt;update the post_build.yml to include the steps above, updating the tf-any.json file and then triggering the deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Change the following line in the code, increasing the number so you can see that a new version has been deployed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str = str.concat("&amp;lt;p style='text-align:center;font-family:Arial'&amp;gt;Version : 25 &amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;\n");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once committed, you should see the Pipeline trigger the build process. Make sure you check out the logs in CodePipeline, looking at the Post Build logs. You will the new lines we added to the build script running the update and deploy to the local Raspberry Pi managed via ECS Anywhere.&lt;/p&gt;

&lt;p&gt;After about 5-10 minutes, refresh the browsers for the local and the AWS load balanced version and they should both be at the same revision. But wait, they are not. The ECS cluster on AWS has updated, but not the local one. What is going on?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Local Cluster vs AWS Clusters&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason why the local ECS cluster has not updated is because there are no other instances to deploy the application onto. We have two instances on AWS, and these are rolled out one at a time, validated and then the old one removed. With our local instance, we only have the single Raspberry Pi.&lt;/p&gt;

&lt;p&gt;We will need to stop the running task. The ECS Anywhere agent will then detect that it is not running and then start a new instance, choosing the latest version that we just created. To do this, from the AWS Console, go to the Amazon ECS Cluster view, select the local cluster (mine is called mydc-ecs-extcluster) and then click on the TASKS tab. Select the check box next to the running task and select STOP, ignoring the warning. &lt;/p&gt;

&lt;p&gt;If you try and access the application via a browser, you will now get an error. We have no running containers to service our requests. After about 1-2 minutes, the ECS Service will realise there are no tasks running and kick off a new one. Once this is up and running, when we refresh, you should now see that this is running the same version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Adding more local capacity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can easily address this issue by adding more local instances to the local ECS Cluster that is managed by ECS Anywhere.&lt;/p&gt;

&lt;p&gt;Repeating the steps above, I added another local machine - this time, my main Ubuntu desktop which is running on an old x86 machine. I can see this has been successful as it now appears as a new ECS instance under the ECS instances tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOPW2q2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOPW2q2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-2.png%3Fraw%3Dtrue" alt="additional instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you now kick off a new build, it will provision the task on the free instance, check that it is up and running before draining session from the old application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chs4uzNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-4.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chs4uzNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-4.png%3Fraw%3Dtrue" alt="provisioning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we wanted too, we could increase the number of instances we want this cluster to support (when we set it up via the CDK application, we defined we wanted the "desired count" to be one. If we go back to that code, update the number to two, and redeploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        service = ecs.CfnService(
            self,
            f"{props['ecsclustername']}-svc",
            service_name=f"{props['ecsclustername']}-svc",
            cluster=f"{props['ecsclustername']}-extcluster",
            launch_type="EXTERNAL",
            desired_count=2,
            task_definition="ecsanywhere"
            #task.to_string()
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now see we have this cluster with running running tasks, spread across the two different (local) ECS instances managed by ECS Anywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNdWdYY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-3.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNdWdYY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-3.png%3Fraw%3Dtrue" alt="updating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we have them both running&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYX_jPrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-5.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYX_jPrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-5.png%3Fraw%3Dtrue" alt="running"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bskkIX-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-6.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bskkIX-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-6.png%3Fraw%3Dtrue" alt="running2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are nearly finished, just one last thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessing the application via an AWS Load Balancer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It would be great if we could now access the application via a load balancer in the cloud. Why would we do that? Perhaps we want to leverage a Cloud based application load balancer rather than deploying and managing our own one. This would allow us to deploy more local machines, and then ECS Anywhere would be able to deploy those applications across those instances. No more manually stopping tasks.&lt;/p&gt;

&lt;p&gt;We can automate that with some more CDK code, and adding a new item in the props file so we do not need to hard code the entry.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        local_lb_security_group = ec2.SecurityGroup(
            self,
            "Load Balance internal Springboot http access",
            vpc=vpc
        )

        local_lb_security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(80)
        )
        local_lb_security_group.add_egress_rule(
            ec2.Peer.ipv4(f"{props['mydcinternalcidr']}"),
            ec2.Port.tcp(8080)
        )

        lb = elbv2.ApplicationLoadBalancer(
            self,
            "LB",
            vpc=vpc,
            internet_facing=True,
            security_group=local_lb_security_group
        )

        listener = lb.add_listener(
            "Listener",
            port=80,
            open=True
        )

        remotepi = elbv2.IpTarget(
            f"{props['home-pi']}",
            port=8080,
            availability_zone="all")

        listener.add_targets(
            "Target",
            port=8080,
            targets=[remotepi]
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To kick this off we just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-lb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after a few minutes, you should see the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ecs-anywhere-lb
ecs-anywhere-lb: deploying...
ecs-anywhere-lb: creating CloudFormation changeset...


 ✅  ecs-anywhere-lb

Outputs:
ecs-anywhere-lb.PiRemoteLB = ecs-a-LB8A1-UMQHFMJZEX80-435054691.eu-central-1.elb.amazonaws.com

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-lb/017fbe20-e3ca-11eb-b32e-06f34beb5820

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that it outputs the DNS name of the Load Balancer created, which we can put into our browser. When we put "ecs-a-LB8A1-UMQHFMJZEX80-435054691.eu-central-1.elb.amazonaws.com" into our browser, we see our glorious application again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OZbiMYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OZbiMYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-pi.png" alt="local-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! We only added one of the local nodes but we can add both which we will see in the next section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Improvements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you have come to the end of this post and walk through. As always, this is just the start and I hope that you take the time to explore the code and build upon it and improve it for your own use cases. &lt;/p&gt;

&lt;p&gt;One thing that I did manage to do via the console, but have not figured out yet how to do via my CDK application is to incorporate the local Raspberry Pi into the first ECS cluster. Do do this I first uninstalled the previous step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk destroy ecs-anywhere-lb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this finished, I then went to the AWS console, found the Target Group that had the existing EC2 instances registered (one running on x86 instance types, the other AWS Graviton2) and then registered manually my local Raspberry Pi (using the settings of the VPC created as part of this application, the IP address of the local Raspberry Pi 192.168.1.99, and the other local machine 192.168.1.110, the port they are listening to - 8080. I then added this to the cluster.&lt;/p&gt;

&lt;p&gt;When that completed, it came back as unhealthy. Why?&lt;/p&gt;

&lt;p&gt;This is to be expected, and shows the security groups working. The original ECS Cluster has a security group setup that controls access from the Application Load Balancer to the EC2 instances, on the target port (8080). That was for the subnet that those instances were on, not my local network (which is on a 192.168.1.0/24 CIDR).&lt;/p&gt;

&lt;p&gt;I needed to add a new rule that would allow the Application Load Balancer to health check and route traffic, so I added a new rule (in my instance, updating sg-027005ab1cded3bce to enable TCP port 8080 access to the CIDR 192.168.1.0/24 range.&lt;/p&gt;

&lt;p&gt;Once that was completed, I now had three healthy targets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dte9HH44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dte9HH44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-7.png" alt="healthy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now when refreshing the original link, we can see we have all four different hosts servicing requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smpZR0kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smpZR0kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-4.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Managing your local ECS Anywhere cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I thought it would be useful to share some of the things I found useful when administering the local ECS Anywhere instance. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Managing the agent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To shutdown, restart and get a status you can use the following commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl stop ecs
sudo systemctl status ecs
sudo systemctl start ecs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;● ecs.service - Amazon Elastic Container Service - container agent
     Loaded: loaded (/lib/systemd/system/ecs.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2021-06-28 12:37:53 UTC; 2 days ago
       Docs: https://aws.amazon.com/documentation/ecs/
   Main PID: 2214 (amazon-ecs-init)
      Tasks: 8 (limit: 4435)
     Memory: 12.0M
     CGroup: /system.slice/ecs.service
             └─2214 /usr/libexec/amazon-ecs-init start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Log files&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to find the log files, then these are located in /var/log/ecs &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ecs-agent.log&lt;/li&gt;
&lt;li&gt;ecs-init.log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view the ECS agent initialisation logs as well as the operational logs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Other key files&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The name of the ECS Cluster can be found in /etc/ecs/ecs.config. You may need to update/remove this as you experiment.&lt;/p&gt;

&lt;p&gt;If you are trying this and run into the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;level=critical time=2021-06-30T15:52:29Z msg="Data mismatch; saved cluster 'dc_pi_ecs_cluster' does not match configured cluster 'ecs-anywhere-ec2-mydcecsclusterBB109425-3HBnIv5IpvQm'. Perhaps you want to delete the configured checkpoint file?" module=agent.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the agent starts (perhaps because this is a subsequent installation or you have changed values) then you may need shutdown your ECS agent, move/rename the following file /var/lib/ecs/data/agent.db and then restart to recover.&lt;/p&gt;

&lt;p&gt;You may also need to move/rename the /var/lib/amazon/ssm if you get issues around the agent failing to install on subsequent attempts. If you are seeing errors like this in your hibernate.log&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-30 18:30:37 ERROR Health ping failed with error - error occurred in RequestManagedInstanceRoleToken: AccessDeniedException: Authentication failed
    status code: 400, request id: afbe8882-27ed-49fa-92a9-1c3582b12f11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shut down your agent/uninstall/move or rename that directory and re-run the script.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Removing the AWS resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can clean up what we have created by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk destroy ecs-anywhere-lb
cdk destroy ecs-anywhere-cfn
cdk destroy ecs-anywhere-pipe
cdk destroy ecs-anywhere-cicd
cdk destroy ecs-anywhere-vpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this has completed, you will then manually need to delete the following AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS CodeCommit and ECR repositories as these will not be deleted&lt;/li&gt;
&lt;li&gt;AWS System Manager Parameter Store values for the Docker Hub user name and password and the ECS Cluster details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cleaning up your local environment&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl stop amazon-ssm-agent
sudo systemctl stop ecs

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the ECS Anywhere and SSM agents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt remove amazon-ecs-init
sudo apt remove amazon-ssm-agent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the Strongswan software from the Pi VPN Gateway&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt remove strongswan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should can also remove the /etc/ecs.config file which may not be removed when the package is installed, as well as cleaning up the /var/lib/ecs folder too.&lt;/p&gt;

&lt;p&gt;And your environment should now be disconnected from AWS Systems Manager and Amazon ECS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post I have shown you one way in which you can automate the creation of multiple architecture and deployment options for your containerised applications, integrating with ECS Anywhere to provide you with more choices as to where you deploy those workloads.&lt;/p&gt;

&lt;p&gt;There are many ways the scripts could be improved, but I hope that these will save you some time as you look to automate your deployment processes. I will hope to build on this post with future posts which add/update the existing CDK applications to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adding security to the application, automating the provisioning of SSL certificates and a friendly DNS name&lt;/li&gt;
&lt;li&gt;integrating other applications or services we might need to use as part of our application&lt;/li&gt;
&lt;li&gt;what would you like to see?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, I would be grateful if you could provide me with some short feedback on this walkthrough. Please complete this &lt;a href="https://eventbox.dev/survey/C6HLWSB"&gt;very short survey here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please let me know if you find this post useful and how you might use this kind of setup. Are you exploring moving your workloads to arm processing architectures? Are you looking to explore hybrid scenarios where you deploy a single application across different environments?&lt;/p&gt;

&lt;p&gt;Made with ❤️&lt;/p&gt;

</description>
      <category>aws</category>
      <category>containers</category>
    </item>
    <item>
      <title>AWS Basics: What's in a default AWS VPC and how to recreate one.</title>
      <author>Lee Wynne</author>
      <pubDate>Fri, 16 Jul 2021 11:54:05 +0000</pubDate>
      <link>https://dev.to/leewynne/aws-basics-what-s-in-a-default-aws-vpc-and-how-to-recreate-one-29ig</link>
      <guid>https://dev.to/leewynne/aws-basics-what-s-in-a-default-aws-vpc-and-how-to-recreate-one-29ig</guid>
      <description>&lt;h2&gt;
  &lt;a href="#%C2%A0you-have-vpcs-in-your-aws-account-by-default"&gt;
  &lt;/a&gt;
   You have VPC's in your AWS account by default.
&lt;/h2&gt;

&lt;p&gt;AWS make it pretty easy to consume their services in the quickest way possible. Once you have &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;created an account&lt;/a&gt; and attached a credit card for billing you are pretty much ready to to start building and deploying some really cool stuff.&lt;/p&gt;

&lt;p&gt;Some of those AWS services don't need a VPC, object storage though an s3 bucket is a good example or compute, storage, databases, networking and containers through AWS LightSail is also a good example 👇🏼&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/leewynne" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJSHiz_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8bnWhDU3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19958/acd11d40-2247-40c5-a3f6-1805b734c466.jpeg" alt="leewynne"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/leewynne/the-easiest-way-to-get-started-with-aws-regardless-of-your-background-1nl2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The easiest way to get started with AWS regardless of your background&lt;/h2&gt;
      &lt;h3&gt;Lee Wynne ・ Jul 5 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Some AWS services need to be hosted in a VPC, like production ec2 instances, vpn and direct connect connectivity and all sorts of other services that you want to wrap more control and high availability around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-a-default-vpc-even-exist"&gt;
  &lt;/a&gt;
  Why does a default VPC even exist?
&lt;/h2&gt;

&lt;p&gt;Having a default VPC makes it pretty easy to programmatically launch AWS services into an existing pre built VPC without needing to know how to build your own AWS VPC with a public and private subnet. Otherwise you would need to know how to do this 👇🏼&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/leewynne" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJSHiz_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8bnWhDU3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19958/acd11d40-2247-40c5-a3f6-1805b734c466.jpeg" alt="leewynne"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/leewynne/aws-vpc-basics-building-your-first-vpc-with-a-public-and-private-subnet-22ll" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;AWS VPC Basics. Building your first VPC with a public and private subnet&lt;/h2&gt;
      &lt;h3&gt;Lee Wynne ・ Jul 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;There are many AWS partner integrations out there that assume that you have a default VPC if you are deploying their products to AWS.&lt;/p&gt;

&lt;p&gt;Every AWS account has one default VPC for each AWS Region (Not sure if that applies to regions that you haven't actually activated yet, doubt it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-a-default-vpc"&gt;
  &lt;/a&gt;
  What's in a default VPC
&lt;/h2&gt;

&lt;p&gt;When AWS create a default VPC for, they do the following to set it up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a VPC with a size /16 IPv4 CIDR block (172.31.0.0/16). This provides up to 65,536 private IPv4 addresses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a size /20 default subnet in each Availability Zone. This provides up to 4,096 addresses per subnet, a few of which are reserved for our use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an internet gateway and connect it to your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a route to the main route table that points all traffic (0.0.0.0/0) to the Internet gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a default security group and associate it with your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That list is a great footprint for learning more about creating your own VPC and what should potentially be in it and here is an example schematic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDQZrryv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/kqgd6gglqc4m2brz71te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDQZrryv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/kqgd6gglqc4m2brz71te.png" alt="default-vpc-diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Your default VPC is also extensible, meaning you add other stuff to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add additional nondefault subnets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the main route table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add additional route tables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Associate additional security groups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the rules of the default security group.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add AWS Site-to-Site VPN connections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add more IPv4 CIDR blocks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-recreate-a-default-vpc"&gt;
  &lt;/a&gt;
  How do you recreate a default VPC?
&lt;/h2&gt;

&lt;p&gt;If you have deleted your default VPC, you can't restore it 😭 but you can easily recreate it 🛠&lt;/p&gt;

&lt;p&gt;If you want to re-create a default VPC using the Amazon VPC console, do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open the Amazon VPC console at &lt;a href="https://console.aws.amazon.com/vpc/"&gt;https://console.aws.amazon.com/vpc/&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the navigation pane, choose Your VPCs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose Actions, Create Default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose Create. Close the confirmation screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was easy!&lt;/p&gt;

&lt;p&gt;Or if you want to do it from the AWS CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 create-default-vpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There we go, everything you need to know about default VPC's and how to recreate one.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awsnewbies</category>
      <category>networking</category>
    </item>
    <item>
      <title>No, they didn't make a mistake</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 16 Jul 2021 11:43:53 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/no-they-didn-t-make-a-mistake-5gg8</link>
      <guid>https://dev.to/dailydevtips1/no-they-didn-t-make-a-mistake-5gg8</guid>
      <description>&lt;p&gt;Hey you, yes you! Stop feeling like they made a mistake.&lt;br&gt;
That company hired you because they saw you fit for the job.&lt;/p&gt;

&lt;p&gt;And yes, you might not feel like you're ready at this time, but let me tell you a little secret. We all feel this way.&lt;/p&gt;

&lt;p&gt;Some might call it imposter syndrome, and some might call it an introvert, where others might think they are a cheat.&lt;/p&gt;

&lt;p&gt;But stop feeling that way. You are valuable, you are a developer, and you are good enough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-feel-this-way"&gt;
  &lt;/a&gt;
  Why do we feel this way?
&lt;/h2&gt;

&lt;p&gt;It might be a natural cause because of the day and age we live in. We get to see so many great people showing off what they do, their rank, and how good they are.&lt;br&gt;
And yes, that's quite demotivating at times.&lt;/p&gt;

&lt;p&gt;But the #1 thing you have to realize, those people felt the same way.&lt;br&gt;
They just worked hard and put in the time to get over that feeling.&lt;/p&gt;

&lt;p&gt;It's also natural to feel nervous at first, thought run wild, and your brain is tricking you into believing you don't belong in that spot.&lt;/p&gt;

&lt;p&gt;But let's try and fix that because sorry to say this, but your brain is wrong!&lt;/p&gt;

&lt;p&gt;Here are five tips to help show you they didn't make a mistake!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-value-yourself"&gt;
  &lt;/a&gt;
  1. Value yourself
&lt;/h2&gt;

&lt;p&gt;Just take a step back, and look where you're at. Would your 15-year-old version be able to do the things you do today?&lt;/p&gt;

&lt;p&gt;I'm pretty sure the answer is no, unless you're 15, but then have a look at your five years younger self.&lt;/p&gt;

&lt;p&gt;This is because you have grown, as a person, in your skills, and it shows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-dont-need-to-know-everything"&gt;
  &lt;/a&gt;
  2. You don't need to know everything
&lt;/h2&gt;

&lt;p&gt;The most common belief is that we need to 100% know all the things when we get hired for a job.&lt;/p&gt;

&lt;p&gt;And this is the biggest BS you can tell yourself.&lt;/p&gt;

&lt;p&gt;We need to be able to grow in a job and learn things while doing our job. I've said this before, and I'll repeat it: Being a developer is a never-ending learning curve.&lt;/p&gt;

&lt;p&gt;For example, I was being interviewed as a senior developer for a Laravel/Ionic position for my last job. At the time, I'd never touched Laravel at all.&lt;br&gt;
For sure, I was a bit skeptical, but I was brutally honest; I had zero experience in Laravel but did use Symphony for a long time.&lt;/p&gt;

&lt;p&gt;The result:&lt;br&gt;
A two-week learning curve in Laravel and working on some projects. And now I'm confident enough to say I know Laravel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-try-to-be-someone-else"&gt;
  &lt;/a&gt;
  3. Don't try to be someone else
&lt;/h2&gt;

&lt;p&gt;It's ok not to be perfect at everything, but be honest about it.&lt;br&gt;
There is nothing wrong with saying to a company, what your strengths are, and being that person that tells their weaknesses.&lt;/p&gt;

&lt;p&gt;It comes close to the above point, and you realize it shows when you are faking something.&lt;/p&gt;

&lt;p&gt;I always try to imagine being the receiving end of the communication.&lt;/p&gt;

&lt;p&gt;How would I feel after the interview? Did I say stuff that wasn't true?&lt;br&gt;
Did I upsell myself too much?&lt;/p&gt;

&lt;p&gt;And again, nothing wrong with upselling yourself, but be careful with this approach.&lt;/p&gt;

&lt;p&gt;Please don't say you're an expert [INSERT RANDOM FRAMEWORK] user while you never touched it.&lt;br&gt;
This will quickly reflect and make you look like a fraud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-its-ok-to-be-nervous"&gt;
  &lt;/a&gt;
  4. It's ok to be nervous
&lt;/h2&gt;

&lt;p&gt;Don't think you have to be a super(wo)man now. You don't need to feel all confident and mighty.&lt;/p&gt;

&lt;p&gt;It's ok to feel nervous; nervous for a job interview, for the first week/month/year working there.&lt;/p&gt;

&lt;p&gt;And that's ok because it is stressful.&lt;br&gt;
We are all learning, and at times we might feel like there is something wrong with that.&lt;br&gt;
But let me assure you, there's not!&lt;/p&gt;

&lt;p&gt;Being a bit nervous might even help us.&lt;br&gt;
Nervousness is something people pick up on, and it might help you feel more at ease.&lt;br&gt;
It also makes us more on edge and really on top of our game as nervous people.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-value-you-offer"&gt;
  &lt;/a&gt;
  5. The value you offer
&lt;/h2&gt;

&lt;p&gt;Now, let's look at the last part of this.&lt;br&gt;
A company hired you. Just think about the value you are adding there!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another sparring partner&lt;/li&gt;
&lt;li&gt;Someone to question if processes are the right way&lt;/li&gt;
&lt;li&gt;A enthusiastic soul that lifts people up&lt;/li&gt;
&lt;li&gt;You help them out. It's work they couldn't get done before&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is all because they hired you!&lt;br&gt;
Not because they made a mistake.&lt;/p&gt;

&lt;p&gt;I hope you will re-evaluate yourself and accept the simple but undeniable fact that you are valuable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Time to say goodbye - Enzyme.js</title>
      <author>Piotr Staniów</author>
      <pubDate>Fri, 16 Jul 2021 11:43:18 +0000</pubDate>
      <link>https://dev.to/piotrstaniow/time-to-say-goodbye-enzyme-js-348c</link>
      <guid>https://dev.to/piotrstaniow/time-to-say-goodbye-enzyme-js-348c</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was also published on my &lt;a href="https://www.piotrstaniow.pl/blog/"&gt;blog&lt;/a&gt; and you can read it &lt;a href="https://www.piotrstaniow.pl/goodbye-enzyme"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let me start with a bold statement: &lt;strong&gt;It's time to deprecate&lt;br&gt;
&lt;a href="https://enzymejs.github.io/enzyme/"&gt;Enzyme.js&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While of course this is an opinion rather than a fact, I think the overall React ecosystem and community would benefit from that move.&lt;/p&gt;

&lt;p&gt;In 2019, when I was working in AWS CloudWatch UI team, I was the person behind introduction of React Testing Library, and I was frequently and passionately advocating for replacing Enzyme with it. It's certainly never easy to get people excited to learn (yet another!) new JavaScript library that does the same thing. Yet, when I was leaving Amazon, I had impression this was a successful move, and RTL was steadily gaining traction in my team's projects.&lt;/p&gt;

&lt;p&gt;There are however many more companies in the world using React, and they would vastly benefit from ditching Enzyme too! Let's have an honest discussion about how the React world has changed in past 5 years, and why Enzyme should be deprecated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-deprecation-means-in-software-development"&gt;
  &lt;/a&gt;
  What deprecation means in software development?
&lt;/h2&gt;

&lt;p&gt;In the programming context, deprecation simply means communicating to other developers that a piece of software is no longer a preferred solution, and that it has been superseded by newer code.&lt;/p&gt;

&lt;p&gt;It doesn't mean that you should immediately stop working on anything else and rewrite code to use newer software, and it also doesn't always mean the deprecated software will be unmaintained.&lt;/p&gt;

&lt;p&gt;However, deprecation expresses the intent that we want to gradually and organically transition to using newer solution, as we see it more beneficial, either to users or to developers experience.&lt;/p&gt;

&lt;p&gt;Today, there are two competing libraries for testing React components: &lt;a href="https://www.npmjs.com/package/enzyme"&gt;Enzyme&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/@testing-library/react"&gt;React Testing Library&lt;/a&gt;, and I would like to convince you that Enzyme shouldn't be used in your new code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-reacts-history"&gt;
  &lt;/a&gt;
  A bit of React's history
&lt;/h2&gt;

&lt;p&gt;Let's quickly recap what was happening in React world in the last 5 years.&lt;/p&gt;

&lt;p&gt;In 2016 AirBnB has first released &lt;a href="https://www.npmjs.com/package/enzyme"&gt;Enzyme&lt;/a&gt; - their own React testing library. At that time, AirBnB was one of the leaders in the React ecosystem, heavily contributing to numerous open source projects. For many their tools became a de facto standard in the industry, and without any doubt they empowered countless developers. They have also redefined what it means to write modern JavaScript code, by influencing developers code style through popular ESLint AirBnB preset.&lt;/p&gt;

&lt;p&gt;It'd be hard for me to imagine what would it be like back then to write tests if it wasn't for Enzyme. Even with Enzyme, it was noticeably harder than it is today, and I still vividly remember installing and configuring in my project &lt;a href="https://www.npmjs.com/package/mocha"&gt;Mocha&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/chai"&gt;Chai&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/sinon"&gt;Sinon&lt;/a&gt;, and &lt;a href="https://www.npmjs.com/package/jsdom"&gt;JSDOM&lt;/a&gt;, to get pretty much the same&lt;br&gt;
tooling that today a single library - &lt;a href="https://www.npmjs.com/package/jest"&gt;Jest&lt;/a&gt; - provides out of the box, while adding numerous features on top of that.&lt;/p&gt;

&lt;p&gt;The world has already moved on. In April 2018 (wow, that's already 3 years?!), Kent C. Dodds has &lt;a href="https://kentcdodds.com/blog/introducing-the-react-testing-library"&gt;announced on his blog&lt;/a&gt; the release of React Testing Library, which drastically changes the approach to writing unit tests in React.&lt;/p&gt;

&lt;p&gt;In February 2019, React team has released the new, long anticipated version of React (16.8) that has transformed the API significantly and introduced &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;.&lt;br&gt;
In reality, this has completely changed how modern React code is written, and countless libraries in the ecosystem were rewritten or amended to support hooks.&lt;/p&gt;

&lt;p&gt;We all have changed our thinking about function-based components from being stateless and presentational-only, to being a fully-fledged alternative to class-based components. Many React tutorials became obsolete at that moment too.&lt;/p&gt;

&lt;p&gt;In February 2020, AirBnB &lt;a href="https://medium.com/airbnb-engineering/phase-ii-enzyme-d9efa717e297"&gt;has announced&lt;/a&gt; they are moving the ownership over Enzyme to an external GitHub organization.&lt;br&gt;
While they promise to also keep supporting Enzyme, they also mention that React Testing Library is getting traction amongst their projects:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While other options like React Testing Library have gained traction within Airbnb,&lt;br&gt;
we will still be using and contributing to Enzyme for the foreseeable future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/airbnb-engineering/phase-ii-enzyme-d9efa717e297"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fast forward to 2021, and there's currently exactly one developer maintaining Enzyme:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i am the only enzyme developer, to be clear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/enzymejs/enzyme/issues/2429#issuecomment-858010582"&gt;Jordan Harband's comment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's also something more going in the background - React team has committed to completely rewrite React docs, giving it a long-deserved refresh. It will also represent the change in how modern React code looks like today, and this is using functional components with hooks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Class components are going to be around for years to come—for example, there are tens of thousands in production at Facebook already. However, we do recommend that new apps be built with function components and Hooks, which is why we want those docs front and center. The class component docs will remain available for folks working with those components, and class components themselves might one day be spun out into their own package—but if that did happen, we're provide migration scripts to automate that transition :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/reactjs/reactjs.org/issues/3308#issuecomment-705707032"&gt;Rachel Nabors' comment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-enzyme-should-be-deprecated"&gt;
  &lt;/a&gt;
  Why Enzyme should be deprecated?
&lt;/h2&gt;

&lt;p&gt;There are a couple of reasons that can be summarized in a few bullets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It has a long record of falling behind changes in React, preventing people from transitioning to newer React versions&lt;/li&gt;
&lt;li&gt;It relies on React internal implementation, and React team discourages using it&lt;/li&gt;
&lt;li&gt;It is currently maintained by single person - and it's risky for so many companies to rely on a single person to maintain one of their crucial pieces of software&lt;/li&gt;
&lt;li&gt;It facilitates some bad testing practices, and tests in Enzyme don't represent customer experience&lt;/li&gt;
&lt;li&gt;There's a far better solution in the market, and the industry has already moved on&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#new-react-features-arent-supported"&gt;
  &lt;/a&gt;
  New React features aren't supported
&lt;/h3&gt;

&lt;p&gt;In my experience, in the past 3 years it was nearly always the case that Enzyme wasn't supporting the latest bits of React, and this wasn't changing for months.&lt;/p&gt;

&lt;p&gt;If you're writing new code, I'd argue it's a good practice to use possibly newer versions of libraries, as they receive generally better support and go in par with the industry standards.&lt;/p&gt;

&lt;p&gt;When you have a look at Enzyme's &lt;a href="https://github.com/enzymejs/enzyme/issues/1553"&gt;issue tracker&lt;/a&gt; it still doesn't fully support React 16, which was released about 3 years ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/enzymejs/enzyme/issues/2429"&gt;The support for React 17&lt;/a&gt; is also an open issue for nearly a year now, and you can only choose amongst &lt;a href="https://www.npmjs.com/search?q=enzyme-adapter-react-17"&gt;6 unofficial adapters&lt;/a&gt; that try to provide support for React 17 to Enzyme, each solving and having their own subset of problems.&lt;/p&gt;

&lt;p&gt;Just as a reminder, &lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;React 18 Alpha&lt;/a&gt; was recently released - and while everything may change, it's not unrealistic to think it might be shipped in a few months from now.&lt;/p&gt;

&lt;p&gt;What's a weaker point of Enzyme is there are actually pieces of API within Enzyme that are only working with class-based components, and they have no equivalents for function-based ones.&lt;/p&gt;

&lt;p&gt;The reality is that if you're writing new code today, you probably don't want to use Enzyme for testing it. Chances are, that if you're writing modern React code - you will sooner or later encounter issues (like &lt;a href="https://github.com/enzymejs/enzyme/issues/2309"&gt;this one&lt;/a&gt; or &lt;a href="https://github.com/enzymejs/enzyme/issues/2174"&gt;that one&lt;/a&gt;). It usually ends up in either writing some hacks to work around the problem, or changing test scenarios to match library's capabilities, or leaving a code piece of untested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-discouraged-by-react-core-team"&gt;
  &lt;/a&gt;
  It is discouraged by React core team
&lt;/h3&gt;

&lt;p&gt;While this argument may or may not resonate with you, it's important for me that the experts behind React to us are discouraging the use of Enzyme, and recommend switching to React Testing Library.&lt;/p&gt;

&lt;p&gt;After all, we all trust them in what they plan for the React's implementation to become and how they shape their APIs. So when they recommend using React Testing Library, they probably know what they are talking about.&lt;/p&gt;

&lt;p&gt;There's a number of cues that the industry has moved on already. It seems that Facebook - the very company in which React was born - has frozen their Enzyme tests and banned using it in any new tests:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While tangential to the issue, I think it’s worth noting that if you can use a project like React Testing Library that doesn’t depend on React internals, it’s generally a good idea. At FB we’ve frozen Enzyme tests to stay on an old version of React that won’t be upgraded for this reason, and we banned using it in any new tests. I don’t want to hijack this issue with an unrelated discussion, but for people who feel blocked by this, I want to provide some encouragement that it’s a worthwhile investment to use a different approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/enzymejs/enzyme/issues/2429#issuecomment-817750268"&gt;Dan Abramov's comment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you wonder what is in the official React documentation today, &lt;a href="https://reactjs.org/docs/testing.htm"&gt;the recommendation&lt;/a&gt; is to actually use React Testing Library. Certainly, there are circumstances in which you won't be able to use RTL, I get it. There's surely added cost to training your developers on new technology, there will be some friction around that.&lt;br&gt;
You probably won't also devote hundreds of developer-hours to rewrite your tried-and-tested in battle unit tests, potentially introducing bugs to them.&lt;/p&gt;

&lt;p&gt;And that is &lt;em&gt;fine&lt;/em&gt;! There's no rush for a change needed, this is not a security issue.&lt;/p&gt;

&lt;p&gt;I read this as a significant message though - experts and community behind React have assessed options and made their choice. If you don't want to make a profound research on why RTL is better than Enzyme, the official docs is your first resource to go to for knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-maintained-by-a-single-person"&gt;
  &lt;/a&gt;
  It is maintained by a single person
&lt;/h3&gt;

&lt;p&gt;As of today, Enzyme is maintained by a single person - &lt;a href="https://twitter.com/ljharb"&gt;Jordan Harband&lt;/a&gt;. He's a prolific open source contributor, member of TC39 committee (they &lt;a href="https://tc39.es/"&gt;specify JavaScript&lt;/a&gt;) and really a hero, who is single-handedly maintaining what empowers millions of tests suites around the world.&lt;/p&gt;

&lt;p&gt;The reality though is, he's presumably splitting his time between many projects, and he has a personal life like all of us do. It is unreasonable to expect that a single person can maintain something so core to developer's work as Enzyme is, with all the nuances and edge-cases we encounter.&lt;/p&gt;

&lt;p&gt;In fact, it is dangerous for any company to put so much responsibility on a single person. Even today, we see side effects of that situation: there are tests which weren't written, cases we spent hours debugging, or features we didn't use to simplify our codebase, because Enzyme isn't up-to-date. The other side of the coin is, we probably shouldn't put so much responsibility and pressure on anyone.&lt;/p&gt;

&lt;p&gt;The problem is more complicated of course, and we should ask why out of thousands companies using Enzyme there's so few that are actually contributing back to the open source code. The same code that generates revenue for them. I think though the reality is that this won't change swiftly, and we have to deal with the present, far from ideal situation. Today, Enzyme has a single developer, and even if there were more - it would take many months to resolve all of Enzyme's problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-somewhat-easier-to-misuse"&gt;
  &lt;/a&gt;
  It is somewhat easier to misuse
&lt;/h3&gt;

&lt;p&gt;Amongst all unit tests I've seen written in Enzyme and React Testing Library, I would argue it is easier to misuse Enzyme than RTL.&lt;/p&gt;

&lt;p&gt;They represent two different approaches, where Enzyme provides wrappers around components, and RTL is focused on rendering components "the way customers see them" (DOM representation).&lt;/p&gt;

&lt;p&gt;Maybe it's because I've seen more tests in Enzyme throughout these years, but I've seen too many examples of meaningless tests. Tests which were shallowly rendering a component with a spy function as prop, which was next extracted using Enzyme's &lt;code&gt;.props()&lt;/code&gt; method, called directly and asserted to be called.&lt;/p&gt;

&lt;p&gt;Doesn't make sense? To me neither but things like that happen, and I think Enzyme makes it too easy to create empty lines coverage with such tests.&lt;/p&gt;

&lt;p&gt;Even more frequently, I saw a snapshot of component's props,&lt;br&gt;
which tells absolutely nothing about the test case intent, and is tightly coupling tests with internal implementation details.&lt;/p&gt;

&lt;p&gt;While certainly there are many ways to go sideways with React Testing Library, in my experience RTL is just a brilliant piece of software that makes people write more meaningful tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-industry-has-already-moved-on"&gt;
  &lt;/a&gt;
  The industry has already moved on
&lt;/h3&gt;

&lt;p&gt;React Testing Library is extremely well-thought in the aspect of "how others will use this library?" and "what practices do I encourage?". I prefer this approach over Enzyme - which is quite powerful but at the same time leaves too many ways of achieving the same goal.&lt;/p&gt;

&lt;p&gt;One example is RTL's focus on testing the customers experience - after all, it is what really matters. Our customers don't see what props our components have, or if they're an array or an object, as long as it works - and will help you deliver value in the future.&lt;/p&gt;

&lt;p&gt;This is also true about React Testing Library API which provides querying functions which let you grab DOM elements using accessibility features. Which is a really nice nudge to actually introduce them, and support an estimated 10% of users who may need these features to be on your website.&lt;/p&gt;

&lt;p&gt;Writing such tests in RTL is also cheaper than any browser-based tests, as they are almost never flaky, and are far easier to maintain. At the same time, you're operating on native DOM elements (well, &lt;code&gt;jsdom&lt;/code&gt; implementation of those) which is extremely powerful. It doesn't require you to learn any extra APIs, there's just native browser's API we all know.&lt;/p&gt;

&lt;p&gt;If you're considering how your tests should be split today, I'd encourage you to write as many tests in React Testing Library as you can. If something can't be tested in RTL (I promise drawing a rectangle in SVG with drag and drop can be!), then fall back to Puppeteer or Cypress - That would be for instance when you need actual styles to be computed, or make some end to end testing.&lt;/p&gt;

&lt;p&gt;If RTL doesn't support something, you have entire DOM available for you. Unfortunately, Enzyme doesn't let you get underlying elements if they come from functional components but will &lt;a href="https://enzymejs.github.io/enzyme/docs/api/ReactWrapper/getDOMNode.html"&gt;throw an error instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ultimately, the industry has already moved on. &lt;a href="https://www.npmjs.com/package/enzyme"&gt;Enzyme&lt;/a&gt; in the past year had a steady number of weekly downloads at around 2.1-2.5M. At the same time, &lt;a href="https://www.npmjs.com/package/@testing-library/react"&gt;React Testing Library&lt;/a&gt; has gone from 1.8M to over 4M weekly downloads.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQsmczGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.piotrstaniow.pl/static/5b5beaf5ece3a234bc22273b55305329/2108e/npm-enzyme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQsmczGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.piotrstaniow.pl/static/5b5beaf5ece3a234bc22273b55305329/2108e/npm-enzyme.png" alt="Enzyme weekly downloads"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;center&gt;&lt;small&gt;Enzyme weekly downloads&lt;/small&gt;&lt;/center&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9F-ufEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.piotrstaniow.pl/static/f92a56e630c81360a6f1d6874ba73207/7f664/npm-react-testing-library.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9F-ufEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.piotrstaniow.pl/static/f92a56e630c81360a6f1d6874ba73207/7f664/npm-react-testing-library.png" alt="React Testing Library weekly downloads"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;center&gt;&lt;small&gt;React Testing Library weekly downloads&lt;/small&gt;&lt;/center&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://2020.stateofjs.com/en-US/technologies/testing/"&gt;2020 State of JS survey&lt;/a&gt; developers have delivered their opinion on React Testing Library - of those who already have heard of it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;58% of developers have used it and would use it,&lt;/li&gt;
&lt;li&gt;further 30% have heard of it and would like to use it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, GitHub Insights tool provides an interesting statistics on the usage of both. Amongst open source repositories hosted at GitHub, at the time of writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;354,059 repositories are &lt;a href="https://github.com/enzymejs/enzyme/network/dependents"&gt;dependents of Enzyme&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2,440,909 repositories are &lt;a href="https://github.com/testing-library/react-testing-library/network/dependents"&gt;dependents of React Testing Library&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;It seems that the reality is that the industry has already made the shift towards React Testing Library, and this is for many and good reasons.&lt;/p&gt;

&lt;p&gt;It's hard to tell how realistic it is to expect that Enzyme will be deprecated anytime in the near future, but it seems an inevitable move that probably is already visible in the horizon. While Enzyme is still used by many today, I would expect the numbers to decrease sharply pretty soon.&lt;/p&gt;

&lt;p&gt;Deprecating the library today would help many companies avoid introducing unnecessary technical debt and would send a clear message to the entire community that the future is in React Testing Library.&lt;/p&gt;

&lt;p&gt;It is not a message to say "immediately cease using it", and it is not to say "rewrite immediately all your tests". However, you probably shouldn't be covering newly written code with tests using Enzyme. Both libraries can safely co-exist, and you may simply ban new code from using Enzyme, letting developers organically and gradually transition when it's convenient.&lt;/p&gt;

&lt;p&gt;The React's future is in function-based components, React Hooks, asynchronous rendering - and these features are best served today with React Testing Library. Looking at the past three years of Enzyme's path, it seems unlikely to catch up with all of these features, while also resolving its other problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is time to deprecate Enzyme.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was also published on my &lt;a href="https://www.piotrstaniow.pl/blog/"&gt;blog&lt;/a&gt; and you can read it &lt;a href="https://www.piotrstaniow.pl/goodbye-enzyme"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
  </channel>
</rss>
