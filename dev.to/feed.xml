<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 simple management tricks I learned as a Tech Lead</title>
      <author>Kate</author>
      <pubDate>Thu, 08 Apr 2021 07:39:42 +0000</pubDate>
      <link>https://dev.to/kalabro/3-simple-management-tricks-i-learned-as-a-tech-lead-4apn</link>
      <guid>https://dev.to/kalabro/3-simple-management-tricks-i-learned-as-a-tech-lead-4apn</guid>
      <description>&lt;p&gt;Developers often blame "bad management" when something goes wrong. I've been there too, I remember the pain. &lt;/p&gt;

&lt;p&gt;For me, it was useful to sit on both chairs for a while acting as a Tech Lead. In this article, I share three dead simple tricks everyone can start using now to become better managers for themselves. No MBA required ü§ì&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-repeat-say-it-again"&gt;
  &lt;/a&gt;
  1. Repeat (say it again)
&lt;/h2&gt;

&lt;p&gt;Yes, the tricks will be very simple, even stupid, but they work! One of my favourites is repeating. It's a very powerful yet underestimated technique. &lt;/p&gt;

&lt;p&gt;Finding the courage to say something once is hard, especially when the topic is important to you.  But don't stop there! People forget, deprioritise and misunderstand all the time. &lt;/p&gt;

&lt;p&gt;Internet is full of advice on how to say No, which implies that everything has to be said at least twice. Camille Fournier actually suggests you need to say it three times:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally, never underestimate how many times and how many ways something needs to be said before it sinks in. Communication in a large organization is hard. In my experience, most people need to hear something at least three times before it really sinks in.&lt;br&gt;
&lt;a href="https://www.amazon.com/dp/B06XP3GJ7F/ref=cm_sw_em_r_mt_dp_MKXET9C33MXQ4TEVK3NG"&gt;The Manager's Path, Camille Fournier&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some examples where repeating is useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remind about an ongoing problem if it was deprioritised.&lt;/li&gt;
&lt;li&gt;Talk to someone else if the first contacted person wasn't helpful. &lt;/li&gt;
&lt;li&gt;Insist on prioritising some refactoring or housekeeping work.&lt;/li&gt;
&lt;li&gt;Rephrase technical concept in plain English.&lt;/li&gt;
&lt;li&gt;Keep pointing out the agreed coding practices until they are being followed.&lt;/li&gt;
&lt;li&gt;Thank teammates for their help, again and again, in different ways.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some channels may overuse repetition (e.g. TV series or popular non-fiction). It annoys us and we may think that saying the same thing multiple times is rude or dull. From my experience, if you are respectful and creative, everyone will appreciate your persistence. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-write-full-sentences-overcommunicate"&gt;
  &lt;/a&gt;
  2. Write full sentences (overcommunicate)
&lt;/h2&gt;

&lt;p&gt;Remote work involves a lot of written communication via email and chat apps. Make your written communication explicit and straight to the point so that people don't have to read 50 chat messages and two different Jira tickets to understand your last "@channel" message in Slack.&lt;/p&gt;

&lt;p&gt;Two ways of saying "No update yet" about the hosting incident:&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;br&gt;
&lt;em&gt;No update yet. I'm checking with Mike from DevOps team about the issue with &lt;a href="http://www.example.com"&gt;www.example.com&lt;/a&gt; deployment. I will come back to you in 15 min.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ùå &lt;br&gt;
&lt;em&gt;No update yet. I'll check with Mike about that issue.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(Who is Mike? Which issue? When will you check? When will my site go up!?)&lt;/p&gt;

&lt;p&gt;Again, over-communication isn't rude, it's really the opposite. If something is obvious to you (e.g. there is an ongoing issue with &lt;a href="http://www.example.com"&gt;www.example.com&lt;/a&gt; ), it doesn't mean it's obvious to everyone else. Give them the necessary context as part of your text message, and you'll get meaningful responses faster. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-take-care-of-yourself"&gt;
  &lt;/a&gt;
  3. Take care of yourself
&lt;/h2&gt;

&lt;p&gt;If I would need to limit this article to only one piece of advice, I would keep this one.&lt;/p&gt;

&lt;p&gt;You know better than anyone else when you are stuck or bored or confused. It's very normal and it happens to all of us from time to time. Take action to get yourself out of it. If we all as individuals will take care of ourselves, many problems will be resolved much quicker and easier. Uncommunicated problems create more problems.&lt;/p&gt;

&lt;p&gt;Your manager may catch some signals of your burnout when it's too late. Help them and ask for a break sooner. &lt;/p&gt;

&lt;p&gt;Your boss may have no idea that you want to leave the company because you hate DevOps work. Help them and ask for more frontend work in the upcoming project. &lt;/p&gt;

&lt;p&gt;Your client has no idea that you are a morning person. Help them and ask to move late meetings earlier in the day. Repeat if it didn't work from the first time üòÉ&lt;/p&gt;

&lt;p&gt;There is no point in struggling at work. Happy people deliver better results, but what is more important, they make other people happier. &lt;/p&gt;

&lt;p&gt;Hopefully, these simple tricks will make you a bit happier at work too! &lt;/p&gt;

</description>
      <category>career</category>
      <category>softskills</category>
      <category>management</category>
    </item>
    <item>
      <title>How do YOU moderate dev.to?</title>
      <author>jeikabu</author>
      <pubDate>Thu, 08 Apr 2021 07:39:31 +0000</pubDate>
      <link>https://dev.to/jeikabu/how-do-you-moderate-dev-to-3a22</link>
      <guid>https://dev.to/jeikabu/how-do-you-moderate-dev-to-3a22</guid>
      <description>&lt;p&gt;Dev.to has &lt;a href="https://dev.to/community-moderation"&gt;"trusted users"&lt;/a&gt; that can moderate posts/comments.&lt;/p&gt;

&lt;p&gt;If you've got this, how have you used it, or when do you &lt;em&gt;not&lt;/em&gt; use it?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>meta</category>
      <category>moderator</category>
    </item>
    <item>
      <title>Do you code mobile-first?</title>
      <author>Madza</author>
      <pubDate>Thu, 08 Apr 2021 07:30:12 +0000</pubDate>
      <link>https://dev.to/madza/do-you-code-mobile-first-3ad6</link>
      <guid>https://dev.to/madza/do-you-code-mobile-first-3ad6</guid>
      <description>&lt;p&gt;According to &lt;a href="https://gs.statcounter.com/platform-market-share/desktop-mobile-tablet"&gt;Statcounter&lt;/a&gt;, the device market share in 2021 Q1 is:&lt;/p&gt;

&lt;p&gt;54.25% - Mobile&lt;br&gt;
42.9% - Desktop&lt;br&gt;
2.85% - Tablet&lt;/p&gt;

&lt;p&gt;What is your preferred dev workflow?&lt;br&gt;
Do you code mobile-first? Or do you design for desktop and then work on responsiveness for the mobile afterward? &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>coding</category>
      <category>css</category>
    </item>
    <item>
      <title>YouTua - Complete Solution for Downloading Videos/Playlists from various websites</title>
      <author>Dhruv Panchal</author>
      <pubDate>Thu, 08 Apr 2021 07:09:07 +0000</pubDate>
      <link>https://dev.to/dhhruv/youtua-complete-solution-for-downloading-videos-playlists-from-various-websites-3b3</link>
      <guid>https://dev.to/dhhruv/youtua-complete-solution-for-downloading-videos-playlists-from-various-websites-3b3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;Video Streaming Platforms are becoming an integral part of our lives today as now and then you need them to get information as well as for entertainment purposes. But the users agree that offline viewing is much better than streaming directly from the websites or mobile applications due to many reasons such as buffering etc.. Even watching favourite videos is fun but at times you'd like to get these videos downloaded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So the question arises that can you download them ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of softwares that provides you the rich features to download videos from these websites such as but the &lt;strong&gt;Fun Part is many of their functions are paid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plus "Video Downloader Not Working" is a problem frequently reported by users in such softwares.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reasons-"&gt;
  &lt;/a&gt;
  Reasons :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Website has changed its coding and site layout, which prevent you from getting its videos so downloader needs to be updated.&lt;/li&gt;
&lt;li&gt;The URL of the video can't be recognized by the downloader.&lt;/li&gt;
&lt;li&gt;Some videos are not available for download due to the copyright issues.&lt;/li&gt;
&lt;li&gt;Your Windows firewall may disallow the downloader from operating.&lt;/li&gt;
&lt;li&gt;Video tool compatibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problems-in-current-downloaders"&gt;
  &lt;/a&gt;
  Problems in Current Downloaders:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You will find these programs or some downloading sites can be buggy or less than perfect. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;After installing the software in your system it takes more than 300-400 MB of space just for it's resources.&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how to handle this situation and what to use ?&lt;/p&gt;

&lt;p&gt;Coming to Solution part, there comes this &lt;strong&gt;Open Source Video Downloader named &lt;a href="https://github.com/dhhruv/YouTua"&gt;YouTua&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtua"&gt;
  &lt;/a&gt;
  YouTua üé¨
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua"&gt;YouTua&lt;/a&gt; is a GUI Program which let's you download videos/playlists from various &lt;a href="https://github.com/dhhruv/YouTua/blob/master/Supported%20Sites.txt"&gt;supported sites&lt;/a&gt; for free. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You don't need to install it as it is a runnable (Click and Run) file so just Open, Download and Close. &lt;/li&gt;
&lt;li&gt;If we talk about size then in Windows it's about 40 MB which is drastically small then the other softwares available. That's it!&lt;/li&gt;
&lt;li&gt;Formats are available for downloading videos such as &lt;strong&gt;(mp4/mkv/webm)&lt;/strong&gt; from quality starting from &lt;strong&gt;144p to 2160p&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua/releases/download/2.1.0/YouTua.exe"&gt;Download YouTua.exe for Windows&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c6Y5xUA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/106863834-15916880-66ef-11eb-9178-22f23c2693a4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c6Y5xUA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/106863834-15916880-66ef-11eb-9178-22f23c2693a4.PNG" alt="YouTua Working Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can get more information about YouTua on: &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/YouTua"&gt;
        YouTua
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üé¨ YouTua is a GUI Program to download videos/playlists from various supported sites.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-to-use-"&gt;
  &lt;/a&gt;
  How To Use !
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Select the OUTPUT Folder by manually adding path or selecting the FOLDER using the SELECT FOLDER Button.
(By Default the OUTPUT FOLDER is set to the current directory.)&lt;/li&gt;
&lt;li&gt;Enter the Link of Video you want to download.&lt;/li&gt;
&lt;li&gt;Select the Format to download the video (mp4/mkv/webm).&lt;/li&gt;
&lt;li&gt;Select the Quality in which you want to download the video (144p to 2160p).
(If your preferred Quality is not available then the lower best quality will be downloaded.) &lt;/li&gt;
&lt;li&gt;To download the available subtitles check the subtitles button.&lt;/li&gt;
&lt;li&gt;Click START DOWNLOAD and enjoy.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#future-updates"&gt;
  &lt;/a&gt;
  Future Updates:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Currently Working on Script for downloading from the websites in Audio Format.&lt;/li&gt;
&lt;li&gt;Available Audio formats will be &lt;strong&gt;(mp3/m4a/webm)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, stay tuned for further updates on GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/YouTua"&gt;
        YouTua
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üé¨ YouTua is a GUI Program to download videos/playlists from various supported sites.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua/releases/download/2.1.0/YouTua.exe"&gt;Download YouTua.exe for Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to contribute in this Software then feel free to contact me on GitHub in the repository and you can ask me anything about it in comments plus suggestions are always welcomed on how to improve this.&lt;/p&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Do you use Magic links?</title>
      <author>Madza</author>
      <pubDate>Thu, 08 Apr 2021 07:07:06 +0000</pubDate>
      <link>https://dev.to/madza/what-is-your-attitude-towards-magic-links-15o6</link>
      <guid>https://dev.to/madza/what-is-your-attitude-towards-magic-links-15o6</guid>
      <description>&lt;p&gt;Magic links are passwordless auth methods, that generate unique access links. These are usually valid for a short period of time and normally sent to the email you provide in the login step. &lt;/p&gt;

&lt;p&gt;Personally, I'm not a huge fan, and I prefer to login with social accounts, as it's way easier than opening an email each time.  &lt;/p&gt;

&lt;p&gt;What is your experience with these? Do you use them? &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>security</category>
    </item>
    <item>
      <title>Testing API calls in Insomnia</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 08 Apr 2021 06:40:49 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/testing-api-calls-in-insomnia-3ap5</link>
      <guid>https://dev.to/dailydevtips1/testing-api-calls-in-insomnia-3ap5</guid>
      <description>&lt;p&gt;So far, we &lt;a href="https://daily-dev-tips.com/posts/laravel-basic-api-routes/"&gt;setup an API in Laravel&lt;/a&gt;, and a great way to explore your API is making use of API Clients.&lt;/p&gt;

&lt;p&gt;Some clients you can consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paw.cloud/"&gt;PAW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It all does pretty much the same, so it really comes down to which ever you like best.&lt;br&gt;
I recently moved from Postman to Insomnia.&lt;/p&gt;

&lt;p&gt;So I'll be showing you how to use Insomnia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication-with-our-api"&gt;
  &lt;/a&gt;
  Authentication with our API
&lt;/h2&gt;

&lt;p&gt;The first step is to authenticate with our API.&lt;br&gt;
As you may have seen in our &lt;a href="https://daily-dev-tips.com/posts/protecting-our-laravel-api-with-sanctum/"&gt;API documentation article&lt;/a&gt;, we need to make a post to the &lt;code&gt;login&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;Let's open up Insomnia and add a new request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iB77vseZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617521980378/YOzdeHMg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iB77vseZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617521980378/YOzdeHMg7.png" alt="Insomnia add new request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the request a good name, let's say Login.&lt;br&gt;
On the right side, change the method to POST and the type to Multipart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsGyU_WK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522062631/CC1XPjwzI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsGyU_WK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522062631/CC1XPjwzI.png" alt="Insomnia request builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've added the request, it shows up the detail view.&lt;br&gt;
Fill out the endpoint you are wanting to test.&lt;/p&gt;

&lt;p&gt;In our case: &lt;code&gt;http://localhost:8084/api/login&lt;/code&gt;.&lt;br&gt;
In the form, section add two fields: &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMi-lnkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522214742/ijPypjJKj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMi-lnkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522214742/ijPypjJKj.png" alt="POST request in insomnia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see on the right-hand side, we get our response.&lt;br&gt;
This gives us an access_token we can use for further calls.&lt;/p&gt;

&lt;p&gt;Let's add the &lt;code&gt;me&lt;/code&gt; request next. This will be a GET request to the &lt;code&gt;/me&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;Only now do we have to open up the &lt;code&gt;Bearer&lt;/code&gt; section and add the token we just received on the login call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqBpLIHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522343537/L5HHkmhb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqBpLIHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522343537/L5HHkmhb9.png" alt="Insomnia token request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this way, we can make authenticated requests to our API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-environments"&gt;
  &lt;/a&gt;
  Managing environments
&lt;/h2&gt;

&lt;p&gt;A cool thing most API clients can do is the managing environment.&lt;br&gt;
You often have your own local environment, a staging/testing, and a production environment.&lt;/p&gt;

&lt;p&gt;In Insomnia, it's super easy to add these different variables so we can easily switch between them.&lt;/p&gt;

&lt;p&gt;Click the No Environment button on the top left corner and click manage environments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0fSNEFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522731294/dvx7DvQSC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0fSNEFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522731294/dvx7DvQSC.png" alt="Insomnia environments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will find a Base environment that will have variables that will work for every single one.&lt;br&gt;
But we'll go ahead and add two new ones: a Production and a local one will only use a &lt;code&gt;URL&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKpSS6vT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522860758/e5M17siLE.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKpSS6vT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522860758/e5M17siLE.gif" alt="Adding environments in Insomnia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we go back to our request, we can change our URL to &lt;code&gt;{{url}}&lt;/code&gt;; this will make it a dynamic variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3T1hXK4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522930116/746glHcdD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3T1hXK4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617522930116/746glHcdD.png" alt="Variable environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This makes it super easy to switch between our environments without having to change the URL all the time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-our-access-token"&gt;
  &lt;/a&gt;
  Automating our access token
&lt;/h2&gt;

&lt;p&gt;Another thing we can automate is the access_token, it will expire, and we then manually need to do the login call again and re-set it.&lt;/p&gt;

&lt;p&gt;But we can create another environment variable for this.&lt;/p&gt;

&lt;p&gt;Go to the local environment and add an "access_token", start typing &lt;code&gt;response&lt;/code&gt;, and show Body Attributes.&lt;/p&gt;

&lt;p&gt;You can then click this section and open up the tag details.&lt;/p&gt;

&lt;p&gt;We will set the tag to request the login call and filter the \$.access_token, since that is the variable name.&lt;br&gt;
We can then set a trigger behavior to resend when it's expired.&lt;/p&gt;

&lt;p&gt;It will then automatically fetch a new token when needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7AYh3emO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617523964631/tgrJ4kAKt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7AYh3emO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617523964631/tgrJ4kAKt.png" alt="Set access_token dynamic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This newly created access token we can then set on our other request in the token field.&lt;/p&gt;

&lt;p&gt;Open the me call, and in the Token field, type &lt;code&gt;_.access_token&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aWfik-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617524034793/u2KUn60W0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aWfik-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617524034793/u2KUn60W0.png" alt="Dynamic access token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. We now have an easy way to switch environments and even automatically set the access_token!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>testing</category>
      <category>api</category>
    </item>
    <item>
      <title>Diffing in React</title>
      <author>Asish Raz</author>
      <pubDate>Thu, 08 Apr 2021 06:22:11 +0000</pubDate>
      <link>https://dev.to/gareeb_coder/diffing-in-react-1n7h</link>
      <guid>https://dev.to/gareeb_coder/diffing-in-react-1n7h</guid>
      <description>&lt;p&gt;As a react-developer, you must come across the topic &lt;strong&gt;DIFFING&lt;/strong&gt;. &lt;br&gt;
I read few articles and understood the basics of them. And out of nowhere, I thought of sharing my knowledge in a simpler way or maybe in a non-technical way. üòúüòú&lt;/p&gt;

&lt;p&gt;Think for a moment, Whatsapp as a &lt;em&gt;VIRTUAL DOM&lt;/em&gt; &lt;br&gt;
Let suppose, JSX element have their own &lt;em&gt;Whatsapp Group&lt;/em&gt;(group name is &lt;em&gt;Virtual DOM Object&lt;/em&gt;)&lt;br&gt;
Now, there is a member of this group, who wants to update itself and not the rest.&lt;/p&gt;

&lt;p&gt;Now the admin of this group: &lt;strong&gt;REACT&lt;/strong&gt; thought of making a new group very similar to the existing one(which means, &lt;em&gt;the new list of objects&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Obviously, this group will also exist in Whatsapp only (that means, &lt;strong&gt;VIRTUAL DOM&lt;/strong&gt;) &lt;/p&gt;

&lt;p&gt;In both the groups, &lt;strong&gt;REACT&lt;/strong&gt; is the only admin. &lt;br&gt;
And &lt;strong&gt;REACT&lt;/strong&gt; observe both the groups from the top-level and wanted to see, which member of the existing group has been changed(that means, &lt;em&gt;which of the VIRTUAL DOM Object has been changed&lt;/em&gt;) &lt;br&gt;
And it found out the member. &lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;this process of finding out or the comparison&lt;/em&gt; (in React language) is called &lt;strong&gt;DIFFING&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;That's it&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Thank you for taking out your time and reading it. I tried for the first time, writing some tech article like this. Let me know, your thoughts on it.&lt;br&gt;
Any appreciation, criticism are welcome. üëç&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>writing</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Web Services vs API</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Thu, 08 Apr 2021 06:18:38 +0000</pubDate>
      <link>https://dev.to/priyans23611789/web-services-vs-api-h96</link>
      <guid>https://dev.to/priyans23611789/web-services-vs-api-h96</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNI6q0A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjrmet0aj6xcjpc73t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNI6q0A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjrmet0aj6xcjpc73t7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;APIs and Web Services are those two terms that get overlapped and confused with each other. You might have heard these words used interchangeably quite often. Although they do have a few overlaps, the concept of both is different. So let‚Äôs get started with the basics and help you to understand the difference and similarities between them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-web-service"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Is a Web Service?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Web Services are a web application component. It is a set of technologies and rules that allows two or more components on the web or internet to interact with each other. These components can be anything from a web server to a web browser. As defined by the World Wide Web Consortium(W3C), Web Services render a standard way of communication between software applications that run on different frameworks or platforms. Web Service is a system designed to support interoperable interactions between machines over a network. Therefore, web services need the network to operate.&lt;/p&gt;

&lt;p&gt;The first web service used is WSDL (Web Services Description Language) - which is a set of rules that are used to describe web services and is written in XML. Apart from that, web Services mostly use SOAP (Simple Object Access Protocol) - a messaging protocol that shares XML data via HTTP (HyperText Transfer Protocol) requests. It is mainly associated with &lt;a href="https://www.decipherzone.com/blog-detail/soa-vs-microservices"&gt;Service Oriented Architecture (SOA)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Overall, a web service is nothing but a connection technology that enables two or more components aka services to interoperate. These are the bridge between components on the web. Each of these components or programs does things that other programs need, whether it‚Äôs featuring a database, computation, or executing scripts. Technically, web services send data back and forth through HTTP requests. These requests often return textual data in XML or JSON form.&lt;/p&gt;

&lt;p&gt;But what are APIs then? Let‚Äôs check!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/What-is-an-API-and-How-it-works-"&gt;What is an API?&lt;/a&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The term API stands for Application Programming Interface. It is a set of routines, object classes, data structures, or protocols offered by libraries or operating systems to support application development. It enables two otherwise distanced entities to communicate in a standardized way. An API is similar to a messenger that receives requests and informs the system what a user wants to do and then returns the response.&lt;/p&gt;

&lt;p&gt;To help you understand the concept of API, let‚Äôs see a scenario. You are probably familiar with the process of searching for flights or trains online. On the application or website, you will get the drop-down menu to choose departure city, date, destination, return date, class and other variables. To book your flight or train, you interact with the database of airlines or railways respectively to check if there‚Äôs any seat available for you. But what if you are not using a railways or airways website or app that aggregates information from their databases. Instead, you are using a third-party travel website that checks different databases and provides the information you have asked for. In that case, with your query, that website will interact with API to get information from different systems over the internet to check prices, availability and book seats. After that, it delivers the response back to the travel website and finally shows it to you.&lt;/p&gt;

&lt;p&gt;So an API could be anything in any form. The only thing that it has to be is a way of communication with a software component. But how is it different from web services?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#key-difference-between-web-services-and-apis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/api-vs-web-services"&gt;Key Difference Between Web Services and APIs&lt;/a&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Web Services vs APIs.&lt;/strong&gt; Clearly, both Web Services and APIs are a means of communication. The basic difference between them is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Services provide interaction between two machines over a network while APIs acts as an interface between two different applications for interoperability.&lt;/li&gt;

&lt;li&gt;Web Services requires a network connection while APIs may or may not require a network for their operability.&lt;/li&gt;

&lt;li&gt;While APIs can use any protocols or design patterns, web services mostly use SOAP and sometimes REST, XML-RPC, or UDDI.&lt;/li&gt;

&lt;li&gt;Many public APIs are transparent with open documentation and self-service portals for rapid developer onboarding. However, web services offer specific data or functionality to certain patterns only. &lt;/li&gt;

&lt;li&gt; Moreover, each web service is an API but all APIs are not web services because a web service might not perform all the operations that an API would do.&lt;/li&gt;

&lt;li&gt;APIs features efficiency, wide reach, personalization, data ownership, time-effectiveness, programming language independence, and easy integration with GUI; Web Services offer loose coupling, synchronous and asynchronous functionality, document exchange support while supporting remote procedure calls. &lt;/li&gt;

&lt;li&gt; As web services need SOAP protocol to transfer data over the network, it does not have a lightweight architecture. On the other hand, APIs have a lightweight architecture as most of their required libraries and data are running on the .NET framework. &lt;/li&gt;

&lt;li&gt; Web Services provides support for HTTP only while APIs support HTTP/s, URL Requests/Response Headers and so on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you understand that API is an interface that enables to build on the data and functionality of another application, web service is a network-based resource to fulfil a certain task. Both the API and Web Services are useful at their core. If you want to develop an application for your business, hire developers who have vast experience and knowledge in the related field.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.decipherzone.com/blog-detail/customer-experience-web-design"&gt;Decipher&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>react</category>
    </item>
    <item>
      <title>An In-depth Introduction to State in React ‚Äì Explained with Code Examples</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 08 Apr 2021 05:59:32 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/how-state-works-in-react-explained-with-code-examples-2mjd</link>
      <guid>https://dev.to/myogeshchavan97/how-state-works-in-react-explained-with-code-examples-2mjd</guid>
      <description>&lt;p&gt;The state is the most complex thing in React that beginners, as well as experienced developers, struggle to understand. So in this article, we'll explore all about the state in React. &lt;/p&gt;

&lt;p&gt;Before understanding the state, let's first understand some basics so it's easy to understand the state later. &lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-render-data-in-the-ui-in-react"&gt;
  &lt;/a&gt;
  How to Render Data in the UI in React
&lt;/h2&gt;

&lt;p&gt;To render anything on the screen in React, we use the &lt;code&gt;ReactDOM.render&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;It has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;element&lt;/code&gt; can be any HTML element, JSX or a component that returns a JSX&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;container&lt;/code&gt; is the element on the UI inside which we want to render the data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callback&lt;/code&gt; is the optional function we can pass which gets called once something is rendered or re-rendered on the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/focused-shockley-oh4tn?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we're just rendering a single h1 element to the screen.&lt;/p&gt;

&lt;p&gt;To render multiple elements we can do it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React is awesome.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/white-hooks-dgru0?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can also take out the JSX and put it in a variable which is a preferred way of rendering content If it gets larger like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React is awesome.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/trusting-night-5g825?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we've also added an extra pair of round brackets to align the JSX properly and to make it a single JSX expression.&lt;/p&gt;

&lt;p&gt;If you want to understand JSX in detail and its various important features, check out my &lt;a href="https://www.freecodecamp.org/news/jsx-in-react-introduction/"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's display a button and some text on the screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/quizzical-cohen-x55p8?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9094AWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860095077/UZqsWe8fK.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9094AWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860095077/UZqsWe8fK.gif" alt="counter_initial.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when we click on the button, the &lt;code&gt;counter&lt;/code&gt; value is incremented as can be seen in the console but on the UI it's not getting updated.&lt;/p&gt;

&lt;p&gt;This is because we're rendering the &lt;code&gt;content&lt;/code&gt; JSX only once using the &lt;code&gt;ReactDOM.render&lt;/code&gt; method when the page is loaded and we're not calling it again so even though the value of &lt;code&gt;counter&lt;/code&gt; is updating, it's not getting displayed on the UI. So let's fix this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;renderContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;renderContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/adoring-noether-8gsgu?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we've moved the &lt;code&gt;content&lt;/code&gt; JSX and  &lt;code&gt;ReactDOM.render&lt;/code&gt; method call inside a &lt;code&gt;renderContent&lt;/code&gt; function and once it's defined, we're calling the function so it will render the content on UI on page load.&lt;/p&gt;

&lt;p&gt;Note that, we've also added  &lt;code&gt;renderContent&lt;/code&gt; function call inside the &lt;code&gt;handleClick&lt;/code&gt; function so every time we click on the button, the &lt;code&gt;renderContent&lt;/code&gt; function will be called and we'll see the updated counter on the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZoefOHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860129906/UMBjqUyNU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZoefOHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860129906/UMBjqUyNU.gif" alt="counter_updated.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As can you see, it's working as expected and the &lt;code&gt;counter&lt;/code&gt; value is correctly getting displayed on the UI. &lt;/p&gt;

&lt;p&gt;You might think that it's costly to re-render the entire DOM again on every button click but it's not because React uses Virtual DOM algorithm where it checks what is changed on the UI and only re-renders the elements which are changed and entire DOM is not re-rendered again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTmFgIRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860148606/IZTjwxwoS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTmFgIRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860148606/IZTjwxwoS.gif" alt="counter_preview.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://8gsgu.csb.app/"&gt;Preview link&lt;/a&gt; for the Code Sandbox to try it yourself.&lt;/p&gt;

&lt;p&gt;As you can see, only the counter value is re-rendered and not the entire DOM. This is the reason React is so fast and virtual DOM makes React more useful.&lt;/p&gt;

&lt;p&gt;But still, it's not feasible to call &lt;code&gt;renderContent&lt;/code&gt; function every time we want to update the UI. So React added a concept of State.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-state-in-react"&gt;
  &lt;/a&gt;
  Introduction to State in React
&lt;/h2&gt;

&lt;p&gt;The state allows us to manage the changing data in the application. It's defined as an object where we define key-value pairs specifying various data we want to track in the application.&lt;/p&gt;

&lt;p&gt;In React, all the code we write is defined inside a component.&lt;/p&gt;

&lt;p&gt;There are mainly two ways of creating a component in React:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class based component&lt;/li&gt;
&lt;li&gt;functional component&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We'll start with class based component now. Later in this article, we will see a functional component way of creating components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should know how to work with class based components as well as functional components including hooks. &lt;/p&gt;

&lt;p&gt;Instead of directly learning functional components with React hooks you should first understand class based components so it's easy to clear the basics.&lt;/p&gt;

&lt;p&gt;A Class based component is created by using an ES6 class keyword and by extending the &lt;code&gt;Component&lt;/code&gt; class provided by React like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that, the name of the component starts with a capital letter(&lt;code&gt;Counter&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/nostalgic-burnell-57fhd?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's explore what we're doing here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inside the constructor function, we're first calling &lt;code&gt;super&lt;/code&gt; by passing &lt;code&gt;props&lt;/code&gt; to it. Then we've defined the state as an object with &lt;code&gt;counter&lt;/code&gt; as a property of the object.&lt;/li&gt;
&lt;li&gt;We're also binding &lt;code&gt;this&lt;/code&gt; context to &lt;code&gt;handleClick&lt;/code&gt; function so inside the &lt;code&gt;handleClick&lt;/code&gt; function we get correct context for &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then inside the &lt;code&gt;handleClick&lt;/code&gt; function, we're updating the &lt;code&gt;counter&lt;/code&gt; and logging it to the console.&lt;/li&gt;
&lt;li&gt;And inside the &lt;code&gt;render&lt;/code&gt; method, we're returning the JSX that we want to render on the UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ro-gYI28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860172160/9Reehx6c6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro-gYI28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860172160/9Reehx6c6.gif" alt="counter_mutate_state.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;counter&lt;/code&gt; is correctly getting updated as can be seen in the console but it's not getting updated on the UI.&lt;/p&gt;

&lt;p&gt;This is because we're directly updating the state inside the &lt;code&gt;handleClick&lt;/code&gt; function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So React does not re-render the component and &lt;strong&gt;it's also a bad practice to directly update state.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never ever directly update/mutate state in React as it's a bad practice and it will cause issues in your application. Also, your component will not be re-rendered on state change If you make a direct state change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#syntax-of-setstate"&gt;
  &lt;/a&gt;
  Syntax of setState
&lt;/h2&gt;

&lt;p&gt;To make the state change, React has provided a &lt;code&gt;setState&lt;/code&gt; function that allows us to update the value of the state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setState&lt;/code&gt; function has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setState(updater, [callback])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;updater&lt;/code&gt; can either be a function or an object&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callback&lt;/code&gt; is an optional function that gets executed once the state is successfully updated&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Calling &lt;code&gt;setState&lt;/code&gt; automatically re-renders the entire component and all its child components. We don't need to manually re-render as seen previously using the &lt;code&gt;renderContent&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-a-function-to-update-state-in-react"&gt;
  &lt;/a&gt;
  How to Use a Function to Update State in React
&lt;/h2&gt;

&lt;p&gt;Let's modify the &lt;a href="https://codesandbox.io/s/nostalgic-burnell-57fhd?file=/src/index.js"&gt;above Code Sandbox&lt;/a&gt; to use the &lt;code&gt;setState&lt;/code&gt; function for updating the state.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/withered-dust-p3emg?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you check the updated &lt;code&gt;handleClick&lt;/code&gt; function it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're passing a function as a first argument to the &lt;code&gt;setState&lt;/code&gt; function and we're returning a new state object with &lt;code&gt;counter&lt;/code&gt; incremented by 1 based on the previous value of &lt;code&gt;counter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We're using the arrow function in the above code, but using a normal function will also work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9jWFqBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860195497/jxwbF6-jy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9jWFqBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860195497/jxwbF6-jy.gif" alt="counter_updated_async.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you notice, we're correctly getting the updated value of the &lt;code&gt;counter&lt;/code&gt; on the UI but in the console, we're getting the previous &lt;code&gt;counter&lt;/code&gt; value even though we've added console.log after &lt;code&gt;this.setState&lt;/code&gt; call.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is because the &lt;code&gt;setState&lt;/code&gt; function is asynchronous in nature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means even though we called &lt;code&gt;setState&lt;/code&gt; to increment the &lt;code&gt;counter&lt;/code&gt; value by 1, It does not happen immediately because when we call &lt;code&gt;setState&lt;/code&gt; function, the entire component gets re-rendered so React needs to check what all things need to be changed using Virtual DOM algorithm and perform various checks for an efficient update of the UI.&lt;/p&gt;

&lt;p&gt;This is the reason you may not get the updated value for &lt;code&gt;counter&lt;/code&gt; immediately after the call to &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very important thing to keep in mind in React as you will encounter hard to debug issues If you don't write code by keeping in mind that &lt;code&gt;setState&lt;/code&gt; is asynchronous in React.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If for some reason you want to get the updated value of state immediately after &lt;code&gt;setState&lt;/code&gt; call, you can pass a function as the second argument to the &lt;code&gt;setState&lt;/code&gt; call which will be executed once the state is updated.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/jolly-dawn-65wis?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with that change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eTFGcCzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860218997/5eQykv2mF.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eTFGcCzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860218997/5eQykv2mF.gif" alt="counter_updated_sync.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we're getting the correct value of &lt;code&gt;counter&lt;/code&gt; in the console as soon as it's updated on the UI.&lt;/p&gt;

&lt;p&gt;In the above demo, the &lt;code&gt;handleClick&lt;/code&gt; function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here, for the &lt;code&gt;setState&lt;/code&gt; function call, we're passing two arguments. The first is a function that returns a new State and the second is a callback function that will be called once the state is updated. We're just logging the updated counter value to the console in the callback function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Even though React provides a callback function to get the updated state value immediately to perform some operation, It's recommended to use it only for quick testing or logging. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, React recommends to use the &lt;code&gt;componentDidUpdate&lt;/code&gt; method which is React life cycle method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/youthful-pine-txb1o?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about why to use &lt;code&gt;componentDidUpdate&lt;/code&gt; instead of &lt;code&gt;setState&lt;/code&gt; callback &lt;a href="https://stackoverflow.com/questions/56501409/what-is-the-advantage-of-using-componentdidupdate-over-the-setstate-callback#answer-56502614"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simplify-state-and-method-declaration"&gt;
  &lt;/a&gt;
  How to Simplify State and Method Declaration
&lt;/h2&gt;

&lt;p&gt;If you see the constructor code in the above Code Sandbox demos, you will see that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make use of the &lt;code&gt;this&lt;/code&gt; keyword inside the &lt;code&gt;handleClick&lt;/code&gt; event handler, we have to bind it in the constructor as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, just for declaring the state, we have to create a constructor, add a &lt;code&gt;super&lt;/code&gt; call inside it and then we can declare the state.&lt;/p&gt;

&lt;p&gt;This is not just cumbersome but also makes the code unnecessarily complicated.&lt;/p&gt;

&lt;p&gt;As the number of event handlers increases, the number of &lt;code&gt;.bind&lt;/code&gt; calls also increases. We can avoid doing this using the class properties syntax.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/sad-bassi-7fxnl?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with the class properties syntax.&lt;/p&gt;

&lt;p&gt;Here, we've moved the state directly inside the class as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;handlerClick&lt;/code&gt; event handler is changed to arrow function syntax like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As arrow functions do not have their own &lt;code&gt;this&lt;/code&gt; context, it will take the context as the class so there is no need of using &lt;code&gt;.bind&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This makes code a lot simpler and easy to understand as we don't need to keep binding every event handler.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; already has in-built support for it and you can start using this syntax right now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We'll be using this syntax from now onwards and is the popular and preferred way to write React components.&lt;/p&gt;

&lt;p&gt;If you want to learn more about this class properties syntax, check out my &lt;a href="https://javascript.plainenglish.io/how-to-write-clean-and-easy-to-understand-react-code-using-class-properties-syntax-5b375b0618d3?source=friends_link&amp;amp;sk=c170992cab9025fddb7b34b8894ea993"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-es6-shorthand-syntax"&gt;
  &lt;/a&gt;
  How to Use ES6 Shorthand Syntax
&lt;/h2&gt;

&lt;p&gt;If you check the &lt;code&gt;setState&lt;/code&gt; function call in the above code sandbox, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a lot of code. Just for returning an object from a function, we're using 5 lines of code.&lt;/p&gt;

&lt;p&gt;We can simplify it to a single line as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've wrapped the object in round brackets to make it implicit return. This works because If we have a single statement in an arrow function we can skip the return keyword and curly brackets like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the above code is the same as below code:&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But as the opening curly bracket is considered as the start of the function body, we need to wrap the object inside round brackets to make it work properly.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/zen-galois-pew17?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with this change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-an-object-as-a-state-updater-in-react"&gt;
  &lt;/a&gt;
  How to Use an Object as a State Updater in React
&lt;/h2&gt;

&lt;p&gt;In the above code, we've used a function as the first argument for &lt;code&gt;setState&lt;/code&gt; but we can also pass an object as an argument.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/zealous-nobel-yvvmw?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7i18K063--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860244631/1v3RrY63N.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7i18K063--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860244631/1v3RrY63N.gif" alt="updated_name.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The component code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've added an input textbox where the user types name and it's displayed below the textbox as the user types into the textbox. &lt;/p&gt;

&lt;p&gt;In the state, we've initialized the name property to &lt;code&gt;Mike&lt;/code&gt; and we've added an &lt;code&gt;onChange&lt;/code&gt; handler to the input textbox like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when we type anything in the textbox, we're updating the state with the value typed by passing an object to the &lt;code&gt;setState&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;But which form of &lt;code&gt;setState&lt;/code&gt; to use and is preferred? whether to pass an object or a function as a first argument to the &lt;code&gt;setState&lt;/code&gt; function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The answer is:&lt;/strong&gt; pass an object, If you don't need the &lt;code&gt;prevState&lt;/code&gt; parameter to find the next state value otherwise pass the function as the first argument to &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But you need to be aware of one issue with passing an object as an argument.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/eloquent-panini-u2ooe?file=/src/index.js"&gt;this Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the above demo, the &lt;code&gt;handleClick&lt;/code&gt; method looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're taking the current value of the &lt;code&gt;counter&lt;/code&gt; and incrementing it by 1 and it works fine as can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROVNBQGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860266756/iMr9r7yFE.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROVNBQGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860266756/iMr9r7yFE.gif" alt="object_setstate_correct.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, take a look at &lt;a href="https://codesandbox.io/s/busy-johnson-oqvfn?file=/src/index.js"&gt;this Code Sandbox Demo&lt;/a&gt; which is a modified version of the previous Code Sandbox demo.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;handleClick&lt;/code&gt; method looks like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're first setting the &lt;code&gt;counter&lt;/code&gt; value to 5 and then incrementing it by 1. So the expected value of &lt;code&gt;counter&lt;/code&gt; is 6. Let's see if that's the case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9U9Q_qzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860292261/uPJ6m7fGU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9U9Q_qzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860292261/uPJ6m7fGU.gif" alt="object_setstate_wrong.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when we click the button the first time, we expected the &lt;code&gt;counter&lt;/code&gt; value to become 5 but it becomes 1 and on every next click it's incremented by 1.&lt;/p&gt;

&lt;p&gt;This is because as we have seen previously, the &lt;code&gt;setState&lt;/code&gt; function is asynchronous in nature. When we call &lt;code&gt;setState&lt;/code&gt; function, the value of the &lt;code&gt;counter&lt;/code&gt; does not become 5 immediately so on the next line we're getting the &lt;code&gt;counter&lt;/code&gt; value of 0 which we've initialized the state initially. &lt;/p&gt;

&lt;p&gt;So it becomes 1 when we call &lt;code&gt;setState&lt;/code&gt; again to increment the &lt;code&gt;counter&lt;/code&gt; by 1 and it keeps on incrementing by 1 only.&lt;/p&gt;

&lt;p&gt;To fix this issue, we need to use the updater syntax of the &lt;code&gt;setState&lt;/code&gt; where we pass a function as the first argument.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/strange-silence-qhykz?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the above demo, the &lt;code&gt;handleClick&lt;/code&gt; method looks like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98H2VpPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860314528/4CA-SlvHw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98H2VpPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860314528/4CA-SlvHw.gif" alt="object_setstate_updater.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when we first time clicks on the button, the value of &lt;code&gt;counter&lt;/code&gt; becomes 7 which is as expected because first, we set it to 5 and then increment it by 1 twice so it becomes 7 and it remains at 7 even If we click the button multiple times because on every click we're re-setting it to 5 and incrementing twice.&lt;/p&gt;

&lt;p&gt;This is because inside the &lt;code&gt;handleClick&lt;/code&gt; we're calling &lt;code&gt;setState&lt;/code&gt; to set the &lt;code&gt;counter&lt;/code&gt; value to 5 by passing an object as the first argument to the &lt;code&gt;setState&lt;/code&gt; function and after that, we've called two &lt;code&gt;setState&lt;/code&gt; calls where we're using the function as the first argument.&lt;/p&gt;

&lt;p&gt;So how does this work correctly?&lt;/p&gt;

&lt;p&gt;When React sees a &lt;code&gt;setState&lt;/code&gt; call, it schedules an update to make a change to the state because it's asynchronous but before it completes the state change, React sees that there is another &lt;code&gt;setState&lt;/code&gt; call so React will not re-render immediately with a new &lt;code&gt;counter&lt;/code&gt; value but It merges all the &lt;code&gt;setState&lt;/code&gt; calls and updates the &lt;code&gt;counter&lt;/code&gt; based of the previous value of &lt;code&gt;counter&lt;/code&gt; as we've used the &lt;code&gt;prevState.counter&lt;/code&gt; to calculate the &lt;code&gt;counter&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;And once all the &lt;code&gt;setState&lt;/code&gt; calls are completed successfully, then only React re-renders the component. So even If there are three &lt;code&gt;setState&lt;/code&gt; calls, React will re-render the component only once, which you can confirm by adding a &lt;code&gt;console.log&lt;/code&gt; statement inside the &lt;code&gt;render&lt;/code&gt; method.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So the point to remember is that you should carefully use an object as the first argument to &lt;code&gt;setState&lt;/code&gt; call as it might result in an unpredictable outcome and use function as the first argument to get the correct result based on the previous result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might not call &lt;code&gt;setState&lt;/code&gt; one after another as we've done in the above demo but you might call it inside another function as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;doSomethingElse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something different &lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// some code&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;doSomethingElse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we've defined a &lt;code&gt;isLoggedIn&lt;/code&gt; state and we've two functions &lt;code&gt;handleClick&lt;/code&gt; and &lt;code&gt;doSomethingElse&lt;/code&gt;. Inside the &lt;code&gt;handleClick&lt;/code&gt; function, we're updating the &lt;code&gt;isLoggedIn&lt;/code&gt; state value to &lt;code&gt;true&lt;/code&gt; and immediately we're calling the &lt;code&gt;doSomethingElse&lt;/code&gt; function on the next line.&lt;/p&gt;

&lt;p&gt;So inside the &lt;code&gt;doSomethingElse&lt;/code&gt; you might think that you will get the &lt;code&gt;isLoggedIn&lt;/code&gt; state as &lt;code&gt;true&lt;/code&gt; and code inside if condition will be executed but it will not be executed because &lt;code&gt;setState&lt;/code&gt; is asynchronous and the state might not be updated immediately. &lt;/p&gt;

&lt;p&gt;That's why React added lifecycle methods like &lt;code&gt;componendDidUpdate&lt;/code&gt; to do something when state or prop is updated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So you should keep an eye to check If you're using the same &lt;code&gt;state&lt;/code&gt; variable again in the next line or next function to do some operation to avoid the undesired results. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-merge-setstate-calls-in-react"&gt;
  &lt;/a&gt;
  How to Merge setState Calls in React
&lt;/h2&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/bold-cache-zcj4u?file=/src/index.js"&gt;this CodeSandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we've &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;counter&lt;/code&gt; properties declared in the state like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;handleOnClick&lt;/code&gt; and &lt;code&gt;handleOnChange&lt;/code&gt; event handlers declared like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleOnClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;handleOnChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check the &lt;code&gt;setState&lt;/code&gt; calls in the above functions, you can see that, inside the &lt;code&gt;handleOnClick&lt;/code&gt; function, we're only setting the state for &lt;code&gt;counter&lt;/code&gt; and inside the &lt;code&gt;handleOnChange&lt;/code&gt; function we're only setting the state for &lt;code&gt;username&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So we don't need to set the state for both of the state variables at the same time like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somevalue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can update only the one which we want to update. React will manually merge the other state properties and we don't need to worry about manually merging them ourselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOMQ4k9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860345126/a6YXmrocE.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOMQ4k9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860345126/a6YXmrocE.gif" alt="state_merged.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we're successfully changing the &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; independently of each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-state-in-functional-components-in-react"&gt;
  &lt;/a&gt;
  How to Use State in Functional Components in React
&lt;/h2&gt;

&lt;p&gt;Until now, we've seen how to use state in class based components. Let's now see how to use it in functional components. &lt;/p&gt;

&lt;p&gt;Functional components are similar to class components except that they do not have state and lifecycle methods. This is the reason, you may have heard of them called as stateless functional components.&lt;/p&gt;

&lt;p&gt;These components only accept props and return some JSX.&lt;/p&gt;

&lt;p&gt;Functional components make code short and easier to understand and test.&lt;/p&gt;

&lt;p&gt;They're also a little faster to execute as they don't have lifecycle methods and don't have extra data offered by &lt;code&gt;React.Component&lt;/code&gt; class which we extend in class based components.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/sleepy-pascal-8ugh3?file=/src/index.js"&gt;this Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we're loading a list of 20 random users from the &lt;a href="https://randomuser.me/"&gt;random user generator API&lt;/a&gt;, when the component is loaded inside the &lt;code&gt;componentDidMount&lt;/code&gt; method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/?page=0&amp;amp;results=20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and once we got those users, we're setting it to the &lt;code&gt;users&lt;/code&gt; state and displaying it on the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're passing all the data that we need to display to the &lt;code&gt;User&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;User&lt;/code&gt; component looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This &lt;code&gt;User&lt;/code&gt; component is a functional component.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A functional component is a function that starts with a capital letter and returns a JSX.&lt;/p&gt;

&lt;p&gt;Always remember to start your component name with a capital letter like &lt;code&gt;User&lt;/code&gt; whether it's a class based component or a functional component because that's how React differentiates it from normal HTML elements when we use them like &lt;code&gt;&amp;lt;User /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we use &lt;code&gt;&amp;lt;user /&amp;gt;&lt;/code&gt;, React will check for the HTML element with the name &lt;code&gt;user&lt;/code&gt; and as there is no such HTML element, you'll not get the desired output.&lt;/p&gt;

&lt;p&gt;In the above &lt;code&gt;User&lt;/code&gt; functional component, we get the props passed to the component inside the &lt;code&gt;props&lt;/code&gt; parameter of the function.&lt;/p&gt;

&lt;p&gt;So instead of using &lt;code&gt;this.props&lt;/code&gt; as in class components, we're using just &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We never use &lt;code&gt;this&lt;/code&gt; keyword in functional components so it avoids the various issues associated with &lt;code&gt;this&lt;/code&gt; binding. &lt;/p&gt;

&lt;p&gt;Therefore, functional components are preferred over class components. &lt;/p&gt;

&lt;p&gt;Once we've &lt;code&gt;props&lt;/code&gt;, we're using the object destructuring syntax to get the values out of it and display on the UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-state-in-react-hooks"&gt;
  &lt;/a&gt;
  How to Use State in React Hooks
&lt;/h2&gt;

&lt;p&gt;Starting with version 16.8.0, React introduced hooks that have completely changed the way we write code in React. Using React Hooks we can use state and lifecycle methods inside functional components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React hooks are functional components with added state and lifecycle methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now, there is very little to no difference between class based component and functional components. &lt;/p&gt;

&lt;p&gt;Both of them can have state and life cycle methods.&lt;/p&gt;

&lt;p&gt;But React hooks are nowadays preferred for writing React components because they make the code shorter and easier to understand. &lt;/p&gt;

&lt;p&gt;You will rarely find React components written using class components nowadays.&lt;/p&gt;

&lt;p&gt;To declare a state using React Hooks, we need to use the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook accepts a parameter which is the initial value of the state.&lt;/p&gt;

&lt;p&gt;In class based components, state is always an object but when using &lt;code&gt;useState&lt;/code&gt;, you can provide any value as the initial value like a number, string, boolean, object, array, null etc.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook returns an array whose first value is the current value of the state and the second value is the function which we will use to update the state similar to &lt;code&gt;setState&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take an example of class based component which uses state and we will convert it into a functional component using hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;handleOnClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleOnClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/delicate-thunder-xdpri?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; which is written using class components.&lt;/p&gt;

&lt;p&gt;Let‚Äôs convert the above code to use hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/elegant-heyrovsky-3qco5?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; which is written using React hooks.&lt;/p&gt;

&lt;p&gt;As you can see, using React hooks makes the code a lot shorter and easier to understand.&lt;/p&gt;

&lt;p&gt;Let‚Äôs understand the above code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To use the &lt;code&gt;useState&lt;/code&gt; hook, we need to import it as we have done it in the first line.&lt;/li&gt;
&lt;li&gt;Inside the App component, we are calling &lt;code&gt;useState&lt;/code&gt; by passing &lt;code&gt;0&lt;/code&gt; as the initial value and using destructuring syntax, we stored the array values returned by &lt;code&gt;useState&lt;/code&gt; into &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;setCounter&lt;/code&gt; variables.&lt;/li&gt;
&lt;li&gt;It's a common convention to prefix the function name used to update the state with the &lt;code&gt;set&lt;/code&gt; keyword as in &lt;code&gt;setCounter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When we click the increment button, we are defining an inline function and calling the &lt;code&gt;setCounter&lt;/code&gt; function by passing the updated counter value.&lt;/li&gt;
&lt;li&gt;Note that, as we already have the counter value, we have used that to increment the counter using &lt;code&gt;setCounter(counter + 1)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Since there is a single statement in the inline on click handler, there is no need for moving the code into a separate function. Though you can do that if the code inside the handler becomes complex.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you want to learn in detail about &lt;code&gt;useState&lt;/code&gt; and other React hooks along with examples, then check out my &lt;a href="https://levelup.gitconnected.com/an-introduction-to-react-hooks-50281fd961fe?source=friends_link&amp;amp;sk=89baff89ec8bc637e7c13b7554904e54"&gt;Introduction to React Hooks&lt;/a&gt; article.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Want to learn all ES6+ features in detail including let and const, promises, various promise methods, array and object destructuring, arrow functions, async/await, import and export and a whole lot more from scratch?&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;Mastering Modern JavaScript&lt;/a&gt; book. This book covers all the pre-requisites for learning React and helps you to become better at JavaScript and React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out free preview contents of the book &lt;a href="https://www.freecodecamp.org/news/learn-modern-javascript/"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, you can check out my &lt;strong&gt;free&lt;/strong&gt; &lt;a href="https://yogeshchavan.podia.com/react-router-introduction"&gt;Introduction to React Router&lt;/a&gt; course to learn React Router from scratch.&lt;/p&gt;

&lt;p&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What are Data Structures?</title>
      <author>Rishabh Singh ‚ö°</author>
      <pubDate>Thu, 08 Apr 2021 05:52:47 +0000</pubDate>
      <link>https://dev.to/mindninjax/what-are-data-structures-ec5</link>
      <guid>https://dev.to/mindninjax/what-are-data-structures-ec5</guid>
      <description>&lt;p&gt;If you are preparing for a coding interview, implement a new algorithm or maybe you simply wanna help yourself with your computer science academic curriculum, the knowledge of Data Structures is a must. &lt;/p&gt;

&lt;p&gt;In this article, we will cover all the essential yet basic knowledge you need to get started learning Data Structures and in the following parts, we will take a deep dive into all the popular data structures to help you get familiar with them as fast as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-coding-in-simple-terms"&gt;
  &lt;/a&gt;
  What is Coding - in simple terms?
&lt;/h2&gt;

&lt;p&gt;If you are from a computer science background then you may already know quite a few things about what exactly coding is but talking in the simplest terms possible &amp;amp; in the term that's relevant to our topic, coding is nothing but manipulation of data. &lt;/p&gt;

&lt;p&gt;Now, this may sound a little absurd to you but if you look closely all we do in coding is structure, organize &amp;amp; manage data, in short, all we do is deal with data in one or another way.&lt;/p&gt;

&lt;p&gt;Simplifying this definition, we can say that data structures are a way to organize and manage data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-data-structures"&gt;
  &lt;/a&gt;
  What is Data Structures?
&lt;/h2&gt;

&lt;p&gt;We already saw what basically a data structure is, in simple terms. Now coming to a more generic definition, let's have a glance over the basic Wikipedia definition of Data Structures.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this definition, we can extract 3 main points about Data Structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a collection of data values&lt;/li&gt;
&lt;li&gt;There is a relationship among those data values&lt;/li&gt;
&lt;li&gt;And there are certain operations that can be performed on them to manipulate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's verify these points with an example of a simple one-dimensional array.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you know nothing about arrays right now, we are going to cover arrays in future parts of this series. &lt;/p&gt;

&lt;p&gt;For now, you can refer to the Wikipedia definition here but basically, an array is a collection of data that usually belongs to the same type. &lt;/p&gt;

&lt;p&gt;For example &lt;strong&gt;&lt;em&gt;an array of numbers&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfb9QMBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.geeksforgeeks.org/wp-content/uploads/array-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfb9QMBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.geeksforgeeks.org/wp-content/uploads/array-2.png" alt="https://media.geeksforgeeks.org/wp-content/uploads/array-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you look closely at the above illustration, you will notice that an array can contain multiple units of data that usually belong to the same type. In this case, it is an array of alphabets. &lt;/p&gt;

&lt;p&gt;Along with that, we have some notations below the array which starts from 0. These are called indexes and help us to access the values of the array at that specific index. You don't have to worry about the 3 digit numbers above the array as of now so let's arbitrarily ignore them. &lt;/p&gt;

&lt;p&gt;Now coming back to our points, we can say that the first point is true since the array is a collection of data, the second point is true as well since there is a relationship between the data values which is described by the index number.&lt;/p&gt;

&lt;p&gt;And we can definitely perform operations on the array to maybe delete an element, move an element, add a new element, etc. Hence the third point also ends up being true. &lt;/p&gt;

&lt;p&gt;So you just saw how data structures like arrays fit well into the definition of data structures &amp;amp; follow the same fundamental points described.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-summary"&gt;
  &lt;/a&gt;
  Final Summary
&lt;/h2&gt;

&lt;p&gt;A Data Structure is nothing but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a collection of data&lt;/li&gt;
&lt;li&gt;that data is somehow related to one another&lt;/li&gt;
&lt;li&gt;&amp;amp; you can perform operations on it to manipulate it as per your needs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you learned something new today. Please leave a like, a lovely comment, or feedback &amp;amp; also consider following me as I regularly post useful &amp;amp; informative articles to help you become a better programmer. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion &amp;amp; I will try my best to help you :D&lt;/p&gt;

</description>
      <category>java</category>
      <category>cpp</category>
      <category>python</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>49 Days of Ruby: Day 12 - Conditional Statements, Part I</title>
      <author>Ben Greenberg</author>
      <pubDate>Thu, 08 Apr 2021 05:40:41 +0000</pubDate>
      <link>https://dev.to/bengreenberg/49-days-of-ruby-day-12-conditional-statements-part-i-3gh5</link>
      <guid>https://dev.to/bengreenberg/49-days-of-ruby-day-12-conditional-statements-part-i-3gh5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Welcome to day 12 of the 49 Days of Ruby! üéâ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the past 11 days, we have learned about a wide variety of topics and gained a solid grounding in Ruby. Congrats!&lt;/p&gt;

&lt;p&gt;Today, we are going to begin applying that learning in some real-world coding examples. The first building block that we will look at is &lt;em&gt;conditional statements&lt;/em&gt;. Over the next two days, we will look at two varieties of them.&lt;/p&gt;

&lt;p&gt;Let's start with the first conditional statement: the &lt;strong&gt;if/else&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ifelse-condition-what-is-it"&gt;
  &lt;/a&gt;
  If/Else Condition: What Is It?
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;if/else&lt;/strong&gt; pattern is an incredibly common coding choice because it reflects how we often think. Take the following scenario:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You are at the grocery store. You want to purchase apples. You think to yourself: if they have red apples, buy the red apples, else, purchase the green apples.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;We have just described an if/else condition! If there are green apples, do X, else, do Y.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ifelse-in-ruby"&gt;
  &lt;/a&gt;
  If/Else in Ruby
&lt;/h2&gt;

&lt;p&gt;Now that we have a grasp of what it is. How do we build it in Ruby?&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;morning_coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'yes'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;morning_coffee&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'yes'&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Glad you enjoyed!'&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'It is time to have your cup of coffee!'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we created a new variable called &lt;code&gt;morning_coffee&lt;/code&gt; and set it to &lt;code&gt;yes&lt;/code&gt;. We then created an if/else condition checking the value of &lt;code&gt;morning_coffee&lt;/code&gt;. If &lt;code&gt;morning_coffee&lt;/code&gt; equals &lt;code&gt;yes&lt;/code&gt; we output one thing, else, we output something else.&lt;/p&gt;

&lt;p&gt;What can you do with if/else conditions? Share your learning! Tomorrow, we'll dive into &lt;code&gt;elsif&lt;/code&gt;, and how that can add more nuance to your conditional statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Come back tomorrow for the next installment of 49 Days of Ruby! You can join the conversation on Twitter with the hashtag &lt;a href="https://twitter.com/hashtag/49daysofruby"&gt;#49daysofruby&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>Web Security: Hashing, Salting, and Encryption</title>
      <author>Joseph Maurer</author>
      <pubDate>Thu, 08 Apr 2021 05:11:57 +0000</pubDate>
      <link>https://dev.to/mwrpwr/web-security-hashing-salting-and-encryption-l30</link>
      <guid>https://dev.to/mwrpwr/web-security-hashing-salting-and-encryption-l30</guid>
      <description>&lt;p&gt;As a web developer or engineer it is imperative that your users‚Äô information is safe and secure in a database and during communication with your front end. But adding extra security to your code can add complexity to how your system works. Here is some basic terminology that every developer needs to know at a minimum before handling user information.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Hashing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Passwords and sensitive information should never be transmitted as plain text. It can and will be stolen, no matter how many users you have on your system. A hash generates a unique fixed length output representation of a given input. A website should maintain a known secret key, and combine both the password and key to generate a scrambled output. Even if a bad actor were to acquire the hashed value of the password, they would still not be able to work out what the password is if a proper salt is used. Hashing is deterministic and therefore is not good enough on its own and not a replacement for encryption. But at a bare minimum it is a step up from transmitting raw¬†text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Rp2wRBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/659/0%2Aw8QVgl_Z3KCxv1_7" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Rp2wRBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/659/0%2Aw8QVgl_Z3KCxv1_7"&gt;&lt;/a&gt;Here is an ASP.NET Core example of how to hash a string. Source: &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/password-hashing?view=aspnetcore-5.0"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Salting&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you notice in the code above, there is a variable called salt that is a 128 byte array. What in the world is this? Salting is the addition of unique, random characters known only to the site at the beginning of the string that you want to hash. The salt is typically then stored by the site and used when validating the hash. The reason that a salt is needed is because inputs could potentially be hashed to the same string, but since the salt is random the hashes will then be¬†unique.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pro tip:&lt;/em&gt; You can hash and sal multiple times to increase the difficulty in breaking the security.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Encryption is a function of cryptography and is similar to hashing, except encryption is designed to be undone, while hashing is not. Let‚Äôs take a look at an example of how to encrypt data in an ASP.NET c# environment. The using aes variable in the example is what is doing the encryption. Aes is a reference to the AES encryption algorithm which you can read more about¬†&lt;a href="https://www.educative.io/edpresso/what-is-the-aes-algorithm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nhbag7sI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/695/0%2ALUwMXnLt_C1bRWRN" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhbag7sI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/695/0%2ALUwMXnLt_C1bRWRN"&gt;&lt;/a&gt;Here is an ASP.NET Core example of how to encrypt data. Source: &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/encrypting-data"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Keys&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Symmetric and Asymmetric Keys are a great security practice for keeping data safe. Continuing with the above example, AES is a symmetric algorithm meaning that you need to use the same key to encrypt and decrypt the data. As with everything in this post, never store a cryptographic key in plaintext or transfer a key between machines in plain text. It‚Äôs not sage. Instead, consider using a &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-store-asymmetric-keys-in-a-key-container"&gt;secure key container&lt;/a&gt; to store any cryptographic keys. In the below example we create an EncryptionMethod object that is initialize to the URL identifies of the cryptographic algorithm used to generate the AES¬†key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E9GFtRXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/435/0%2ADQ2oijUceMLdz-C7" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--E9GFtRXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/435/0%2ADQ2oijUceMLdz-C7"&gt;&lt;/a&gt;Encrypt XML Elements with Symmetric Keys Source: &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-encrypt-xml-elements-with-symmetric-keys"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are so many resources out there that can help you if you are trying to add more security to your platform. And the best practices can really save you and your company later down the line. Personally I have never had to write production encryption code, but doing research on the topic makes me want to know more about the¬†topic!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/maurerpwer"&gt;Tweet me&lt;/a&gt; if you work with encryption and any challenges that you¬†face!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fXqZV8Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De5d9a49621db" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXqZV8Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De5d9a49621db" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>csharp</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
