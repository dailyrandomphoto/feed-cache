<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Guide to ERP Integration with eCommerce Platforms</title>
      <author>Natalia API2Cart</author>
      <pubDate>Fri, 19 Nov 2021 14:23:27 +0000</pubDate>
      <link>https://dev.to/natalia27070051/guide-to-erp-integration-with-ecommerce-platforms-gaj</link>
      <guid>https://dev.to/natalia27070051/guide-to-erp-integration-with-ecommerce-platforms-gaj</guid>
      <description>&lt;p&gt;In the eCommerce industry, customer experience is the critical driver for business growth and development. For customer satisfaction, it’s the responsibility of online merchants to provide their clients with an exceptional shopping experience. An ERP system does a great job of providing merchants with the data they need to offer such experiences to their customers.&lt;/p&gt;

&lt;p&gt;However, as the customer demands keep evolving, an ERP system should also look into other data sources to generate personalized data sets for businesses. That said, ERP integration with eCommerce platforms is a stepping stone to the successful evolution of ERP systems.&lt;/p&gt;

&lt;p&gt;Read along to find out how you can establish ERP integration efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-erp-system"&gt;
  &lt;/a&gt;
  What is an ERP System?
&lt;/h2&gt;

&lt;p&gt;An &lt;a href="https://api2cart.com/ecommerce/significance-of-erp-systems/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=erpintegrationn.kov"&gt;Enterprise Resource Planning (ERP) system&lt;/a&gt;, as the name suggests, is software that manages and automates the various functions of an enterprise. It helps to automate operations in different departments - accounting, sales, marketing, supply chain, etc. - and collects data from them to form a single source of information for the management.&lt;/p&gt;

&lt;p&gt;Some standard functions of an ERP are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To automate repetitive business tasks that can impact the overall productivity of its workforce.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To collect data from various sources and analyze to generate actionable insights for businesses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To generate reports by compiling operational data of the business, allowing the management to make well-informed decisions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To overlook financial data of a business, enabling faster handling of monthly financial statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To manage the manufacturing processes and supply chain of a business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To plan, organize, and determine the best strategize to utilize business funds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To integrate data from various departments of the organization for providing a centralized view of a business’s operations and finances.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-erp-integration"&gt;
  &lt;/a&gt;
  What is ERP Integration?
&lt;/h2&gt;

&lt;p&gt;ERP integration is the process of connecting an ERP software with various other applications, in and out of the organization, to get real-time data from them in a single place. It gives a unified view of all the connected applications regardless of their presence in the organization.&lt;/p&gt;

&lt;p&gt;ERP integration combines data from various sources of information and departments, including accounts, HR, finance, commerce, back-office, manufacturing, supply chain, etc. It uses this data to effectively manage the workflows and processes of a business and improve the way how different departments of an organization collaborate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-erp-integration-with-ecommerce-platforms"&gt;
  &lt;/a&gt;
  What is ERP integration with eCommerce Platforms?
&lt;/h2&gt;

&lt;p&gt;ERP integration with eCommerce platforms is the process of establishing integration between an ERP software and eCommerce platforms like Magento, Shopify, WooCommerce, etc. Such integration facilitates a seamless transfer of data from the eCommerce platform to the ERP software.&lt;/p&gt;

&lt;p&gt;The question, however, is - why does an ERP software need to integrate with eCommerce platforms?&lt;/p&gt;

&lt;p&gt;The answer is simple - ERP software looks after all the crucial processes in an eCommerce business. These processes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;monitoring inventory,&lt;/li&gt;
&lt;li&gt;processing orders,&lt;/li&gt;
&lt;li&gt;optimizing shipping process,&lt;/li&gt;
&lt;li&gt;generating custom reports, and&lt;/li&gt;
&lt;li&gt;tracking multiple application workflows in real-time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these processes need data related to customers, orders, products, and categories. Such data is stored in the merchants' online stores, which are built on the above-mentioned eCommerce platforms. Therefore, ERP integration with eCommerce platforms is necessary if the ERP software needs access to this data.&lt;/p&gt;

&lt;p&gt;When an ERP integrates with the eCommerce platform, it can retrieve and manage an online store's data through the platforms’ APIs.&lt;/p&gt;

&lt;p&gt;Moreover, there are several benefits associated with &lt;a href="https://api2cart.com/use-cases/erp-api-integration/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=erpintegrationn.kov"&gt;ERP integration with multiple eCommerce platforms&lt;/a&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ERP eCommerce integration opens new business opportunities. The eCommerce platforms you connect with have multiple online stores built on them, apart from your clients’. These online store owners can be your future clients when they get to know the functionalities of your ERP software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the store owners turn into your clients, it brings a healthy revenue stream for your business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;eCommerce platforms operate in multiple countries across the globe. When you integrate with these platforms, you get international exposure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-develop-an-ecommerce-erp-integration"&gt;
  &lt;/a&gt;
  How to Develop an eCommerce ERP Integration?
&lt;/h2&gt;

&lt;p&gt;There are two ways to develop an eCommerce ERP integration - in-house integration development and using third-party integration development services.&lt;/p&gt;

&lt;p&gt;While in-house integration development can cost you a significant amount of time, money, and resources, employing a third-party service to develop integrations is your most feasible option.&lt;/p&gt;

&lt;p&gt;With third-party service providers like API2Cart, you can easily develop ERP integration with multiple eCommerce platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api2cart.com/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=erpintegrationn.kov"&gt;API2Cart&lt;/a&gt; is a unified API that allows SaaS solutions like ERP to integrate with more than 40 eCommerce platforms at once. As a result, it saves the vendors a lot of time and money they would otherwise have invested in establishing individual, manual integrations.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CV7-CemkiBk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;API2Cart provides you with more than 100 API methods to retrieve and manage data from the eCommerce platforms. These methods allow you to seamlessly edit, delete, modify, and update data in the online stores.&lt;/p&gt;

&lt;p&gt;Moreover, API2Cart also looks after the maintenance and upgrades required by integrations once they are developed. If you look into in-house development, you would also have to bear the cost of maintenance and updates equivalent to developing new integrations.&lt;/p&gt;

&lt;p&gt;eCommerce platforms keep rolling out new versions of their API, and you will need to update your integrations every time there’s a new release. If you choose manual integrations, these updates and maintenance might cost you a fortune, considering the salary you will pay to the developers and the infrastructure you will deploy.&lt;/p&gt;

&lt;p&gt;API2Cart can save you from all these pain points with its unified API. You need to connect your ERP software with API2Cart, and it will automatically connect your software with all the eCommerce platforms of your choice.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>api</category>
      <category>integration</category>
      <category>saas</category>
    </item>
    <item>
      <title>Making the Switch...</title>
      <author>AnthonyH00</author>
      <pubDate>Fri, 19 Nov 2021 14:17:51 +0000</pubDate>
      <link>https://dev.to/anqirek/making-the-switch-np9</link>
      <guid>https://dev.to/anqirek/making-the-switch-np9</guid>
      <description>&lt;p&gt;At the start of my tech career, if you would have told me I'll be in a coding bootcamp in a few years, I would have thought you were crazy. Why? I believed it was extremely out of reach.&lt;br&gt;
    Most colleagues, friends, and professionals I know that changed careers in IT, have switched from Software Engineering to Network Engineering. Usually citing plainness, and tediousness of coding as the main reasons for their decision.&lt;br&gt;
   I started my career working in Helpdesk support. As the company was small, after a short time, I touched all levels of Networking, from installing apps, to using heat maps, and setting up Networks from the bottom up. I enjoyed the challenge of building out a network from scratch. More than that, when it aligned with what the client needs were(I'm looking at you, bandwidth), that generally made me happy. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pY9donsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/delx4lm7b3t90gl9cof8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pY9donsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/delx4lm7b3t90gl9cof8.png" alt="Image description" width="710" height="722"&gt;&lt;/a&gt;&lt;em&gt;Source:&lt;a href="https://community.fs.com/blog/tcpip-vs-osi-whats-the-difference-between-the-two-models.html"&gt;https://community.fs.com/blog/tcpip-vs-osi-whats-the-difference-between-the-two-models.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After working in Helpdesk for a few years, I moved into more of a hybrid role, splitting onsite, remote, and managerial work. From here on, I worked with various departments, assisting with NOC, Escalation, and the Solution teams. I think this is where I became interested in programming. It was the only department I didn't directly work with, but collaborated a few times and my interest was piqued.&lt;br&gt;
   I also learned a valuable lesson during this period. Why I enjoyed Networking, had nothing to do with Networking, and more so, who I was as a person. As the company grew, I realized the values I held, were no longer applicable.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKOM-f7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xfzyhci73faib6p0ywa.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKOM-f7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xfzyhci73faib6p0ywa.JPG" alt="Image description" width="880" height="1173"&gt;&lt;/a&gt;&lt;br&gt;
  I did a few free coding courses, (CodeAcademy, Solo learn, among others..) but was very hesitant about taking it a step further. I was comfortable, complacent, and it wasn't a decision I could just make on a whim. &lt;br&gt;
  The longer I fretted over this, the unhappier I was. So...I just moved. Once I made that decision, a weight was lifted off my shoulders, and out my pockets, but I was satisfied with my decision.&lt;br&gt;
   After a few months into the bootcamp, I believe I made the right decision. Although, this is not easy, by any means, I am moving forward, learning new things everyday.  I do agree, some of what I've learned has been tedious as it's been daunting, though this has been the most creative freedom I've had in a long time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover Source:&lt;a href="https://www.nytimes.com/2020/07/01/technology/personaltech/make-your-tech-last-longer.html"&gt;https://www.nytimes.com/2020/07/01/technology/personaltech/make-your-tech-last-longer.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>About testing in Go</title>
      <author>Alex Romanova</author>
      <pubDate>Fri, 19 Nov 2021 14:17:23 +0000</pubDate>
      <link>https://dev.to/sirinoks/about-testing-in-go-313d</link>
      <guid>https://dev.to/sirinoks/about-testing-in-go-313d</guid>
      <description>&lt;p&gt;This post will be about my &lt;a href="https://github.com/gempir/gempbot/pull/10"&gt;pull request&lt;/a&gt; that did some tests with Go.&lt;/p&gt;

&lt;p&gt;Here's some backstory about why I chose this &lt;a href="https://github.com/gempir/gempbot"&gt;repo&lt;/a&gt;. I've been contributing to &lt;a href="https://github.com/SevenTV"&gt;7tv&lt;/a&gt;, but I'm also a member of their discord community. There I noticed a project that uses 7tv that was also written in Go. A small project from someone in the same community - likely to explain stuff and help out, shouldn't be too difficult of an app. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTyic2fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911250826897543178/Screenshot_138.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTyic2fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911250826897543178/Screenshot_138.png" width="643" height="1016"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I reached out. You can look at my previous post how that went. Long story short, I decided to try my newly acquired knowledge of testing in a different language. The one I'm really interested in - GO.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-test"&gt;
  &lt;/a&gt;
  How to test?
&lt;/h2&gt;

&lt;p&gt;I researched some basic stuff, &lt;a href="https://golang.org/doc/tutorial/add-a-test"&gt;official documentation&lt;/a&gt; got me started.&lt;/p&gt;

&lt;p&gt;Some specific things I noticed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To make a test file, you have to name it NAME_test.go, instead of NAME.test.js compared to JS.&lt;/li&gt;
&lt;li&gt;Go has a built in &lt;code&gt;testing&lt;/code&gt; package, which makes it simple and universal for any GO unit testing.&lt;/li&gt;
&lt;li&gt;The most useful resource I found is (Go by example)[&lt;a href="https://gobyexample.com/testing"&gt;https://gobyexample.com/testing&lt;/a&gt;]. Really shows all you need to begin and make it work. Was even easier than JS, honestly. The table example was really useful too.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did
&lt;/h2&gt;

&lt;p&gt;I followed author's advice and made tests for &lt;code&gt;humanize&lt;/code&gt;. Those functions have simple string/int input and output. I was happy with how fast I figured things out. &lt;/p&gt;

&lt;p&gt;I really a system of testing tables, it looks clean and structured.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hpbIDdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911253461813821461/Screenshot_139.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hpbIDdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911253461813821461/Screenshot_139.png" width="734" height="543"&gt;&lt;/a&gt;&lt;br&gt;
You can see that I created variables in my test for arguments and the return value I expect. Then I made a table with those variables united in a single object. That way you can later loop through them and check if that combination works together.&lt;/p&gt;

&lt;p&gt;Here's some more code. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function to test:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;StringToSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HasSuffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSuffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"m"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HasSuffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSuffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"s"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The testing function itself:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestStringToSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="p"&gt;}{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"60s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"1m"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"60m"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c"&gt;//Big example&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"22s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c"&gt;//Basic example&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c"&gt;//Empty string&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"10d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c"&gt;//Invalid input&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="n"&gt;StringToSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got %d, want %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There was finally something I could fix through my testing. I figured out that when this following function returns a value with combined units (minutes and seconds), it returns it in a float format, adding a bunch of &lt;code&gt;.000000&lt;/code&gt;. Not only it looked bad, it also wasn't consistent with other return values which were ints.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;SecondsToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%ds"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%dm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;floored&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;floored&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%fm %fs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floored&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how it would look with combined values:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kKnzeFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911247618154311721/Screenshot_137.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kKnzeFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911247618154311721/Screenshot_137.png" width="548" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I actually changed something in the original code to match the format!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;floored&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;floored&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%dm %ds"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;floored&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-level-mocks"&gt;
  &lt;/a&gt;
  Next level: Mocks?
&lt;/h2&gt;

&lt;p&gt;I was content with myself. I did tests that actually worked. Maybe I can make tests for something more difficult?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoboiA7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911257381969727548/Screenshot_140.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoboiA7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911257381969727548/Screenshot_140.png" width="547" height="102"&gt;&lt;/a&gt;&lt;br&gt;
So my next quest: How do I mock in go? I went to google. There was a problem. I couldn't find a clear and solid answer. So I went on to ask people who might know. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpLu_kol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911257871235317810/Screenshot_141.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpLu_kol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911257871235317810/Screenshot_141.png" width="524" height="536"&gt;&lt;/a&gt;&lt;br&gt;
He showed me his repo where he made a bunch of tests, however I couldn't figure it out. So I went in voice to see what he'll explain..&lt;/p&gt;

&lt;p&gt;What he showed was.. a lot. Fast. I couldn't follow. He'd jump from document to document, adding in words I didn't know, and I was really too confused to even form a question. Basically...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDUMI40E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911247191929155604/bla_bla1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDUMI40E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.discordapp.com/attachments/353432193730871296/911247191929155604/bla_bla1.gif" width="380" height="181"&gt;&lt;/a&gt;&lt;br&gt;
And then he went on to build his new chair that apparently had wrong instructions.&lt;/p&gt;

&lt;p&gt;So I decided I'll postpone my learning about mocks in Go. After all, I had enough to make a &lt;a href="https://github.com/gempir/gempbot/pull/10"&gt;PR&lt;/a&gt; where things didn't break yet. I still learned new things. Good enough for me. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;YAY I DID SOMETHING NEW IN GO&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>How to destructure object and make alias for keys name</title>
      <author>Heru Hartanto</author>
      <pubDate>Fri, 19 Nov 2021 14:16:03 +0000</pubDate>
      <link>https://dev.to/elukuro/how-to-destructure-object-and-make-alias-for-keys-name-3ki</link>
      <guid>https://dev.to/elukuro/how-to-destructure-object-and-make-alias-for-keys-name-3ki</guid>
      <description>&lt;p&gt;Let say you have object that look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ireland&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you want to destructure this object and change &lt;code&gt;country&lt;/code&gt; key name with &lt;code&gt;nationality&lt;/code&gt;, here how to do that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nationality&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;
    &lt;span class="cm"&gt;/*
        firstName
        'John'
        lastName
        'Doe'
        country
        Uncaught ReferenceError: country is not defined 
--&amp;gt; because we don't declare country variable
        nationality
        'Ireland'
    */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Top Tips To Get Hired By Big Tech Companies</title>
      <author>Joseph Mania</author>
      <pubDate>Fri, 19 Nov 2021 14:08:38 +0000</pubDate>
      <link>https://dev.to/maniamartial/top-tips-to-get-hired-by-big-tech-companies-3gcn</link>
      <guid>https://dev.to/maniamartial/top-tips-to-get-hired-by-big-tech-companies-3gcn</guid>
      <description>&lt;p&gt;Getting a degree in computer science or engineering is never an assurance you are going to be employed. It is just a step ahead over a self-taught programmer or Bootcamp person🤣🤣. The IT industry is changing, today you don’t need even that degree to work with Google, Facebook etc.&lt;/p&gt;

&lt;p&gt;You just have to gain hands-on –experience using a variety of technologies. If you want to major in web development, dig deep to know how those browsers transform your code into a real product. Gain knowledge in programming languages, databases, workflow tools, and libraries. Let’s narrow down the best tips:&lt;/p&gt;

&lt;p&gt;Grasp the Key concept while in institution&lt;br&gt;
If you are taking computer science or any IT field as a four-year degree course, don’t rely on class education alone. Technology is growing at a terrific speed. Get general knowledge of how compilers work. Play around with the hardware and software to understand their relationship. Boot camp might sound best, but you have to take your time and revisit some CS areas. Peruse through a variety of programs to learn more than what you gain in school.&lt;/p&gt;

&lt;p&gt;Gain tech skills that your dream company uses&lt;br&gt;
The good thing about working for a big company, you will always get a job with any tool you are learning. If you are good at python, you will work with a team of pythoneers. But if you are going to join a minor startup, you must diversify your skills. Learn the data structure and algorithms, then understand how time and space complexity works. This is more than just writing programs. You have to know how to scale down applications. Let the software perform the required job with as little time and memory as possible.&lt;/p&gt;

&lt;p&gt;Online certification might be an added advantage. LinkedIn, freecodecamp, Udacity,udemy, etc. have a hundred tech certificates. They might give you an edge over others while applying for the same role.&lt;/p&gt;

&lt;p&gt;Get some experience&lt;br&gt;
This is where the hands-on experience gets to climax. Anything you learn must be able to translate into something useful and essential. Work on a variety of projects and push them on GitHub. Contribute to open-source projects and learn to read other people’s code. It will motivate you to work hard. But don’t scare away when you find complex code written by your peers, your time will come. Focus on your work and be consistent. Open your mind to be able to absorb more knowledge.&lt;/p&gt;

&lt;p&gt;Soft skills are essential&lt;br&gt;
Every industry demands better communication among individuals. You are going to work with a team of new people. There is sharing of ideas and solving problems. You must learn the soft skills to collaborate with others well. If you are a technical lead, it means you will present the software with the document to the hired non-technical individuals.&lt;/p&gt;

&lt;p&gt;Bonus: Programming! Coding! Solving Problems!&lt;/p&gt;

&lt;p&gt;Read the blog and watch podcasts to be updated on the trend. Your machine should sit next to you. Make sure you write some code daily to stay focused. Coding interviews are indeed very challenging, but the job comes with a reward. Hard work and sacrifice.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Responsive Design CSS Tips</title>
      <author>Fidal Mathew</author>
      <pubDate>Fri, 19 Nov 2021 13:59:18 +0000</pubDate>
      <link>https://dev.to/fidalmathew/responsive-design-css-tips-eab</link>
      <guid>https://dev.to/fidalmathew/responsive-design-css-tips-eab</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Padding/Margin - We usually use a lot of padding when we make websites for desktops, to make them more attractive. While making it responsive for mobiles, tablets try decreasing the existing paddings and margins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use em/rem/ percentages - Always try using em/percentage/rem instead of px, so that the text, images size adjust with respect to the device width.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flex-wrap - Using flexbox to align your HTML elements such as &lt;/p&gt;,&lt;p&gt; etc provides the &lt;br&gt;
force elements onto one line or can wrap onto multiple lines according to their width.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Media query - Media query should be used to set width and height according to the breakpoints. Breakpoint refers to the width at which the website starts looking distorted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Box-Sizing - It resolves a lot of problems padding causes, using box-sizing on HTML elements with a percentage width will take padding into account rather than having to adjust the width due to padding.&lt;/p&gt;&lt;/li&gt;


&lt;/ol&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 42 of 100 Days of Code &amp; Scrum: Footer, SCSS Debugging, and Breakpoints</title>
      <author>Rammina</author>
      <pubDate>Fri, 19 Nov 2021 13:53:47 +0000</pubDate>
      <link>https://dev.to/rammina/day-42-of-100-days-of-code-scrum-footer-scss-debugging-and-breakpoints-1edh</link>
      <guid>https://dev.to/rammina/day-42-of-100-days-of-code-scrum-footer-scss-debugging-and-breakpoints-1edh</guid>
      <description>&lt;p&gt;Hello there, everyone!&lt;/p&gt;

&lt;p&gt;Today, I almost finished the skeleton layout for my entire homepage. Now, I just need to design the homepage and look for images to use for styling. I've made a decent amount of progress so far, so I'm fairly pleased.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finished most of the contact form's skeleton, added state management, and validation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;fixed bugs on displaying error messages for the input fields.&lt;/li&gt;
&lt;li&gt;fixed broken CSS styling and classNames.&lt;/li&gt;
&lt;li&gt;add footer skeleton layout.&lt;/li&gt;
&lt;li&gt;add styling for different breakpoints.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day, everyone! Thank you for reading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum Master learning pathway | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding React to an Optimizely UI - Part 2</title>
      <author>Sam Kirkpatrick</author>
      <pubDate>Fri, 19 Nov 2021 13:52:04 +0000</pubDate>
      <link>https://dev.to/skmte/adding-react-to-an-optimizely-ui-part-2-n37</link>
      <guid>https://dev.to/skmte/adding-react-to-an-optimizely-ui-part-2-n37</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/skmte/adding-react-to-an-optimizely-ui-part-1-31kh"&gt;Part 1 of this series&lt;/a&gt;, I gave a start-to-finish overview of how we at &lt;a href="https://www.madetoengage.com"&gt;Made to Engage&lt;/a&gt; integrated a React application into an Optimizely ASP.NET MVC website.&lt;/p&gt;

&lt;p&gt;I'd like to delve into several aspects of the process in more detail over the next few parts, starting with the choice of React itself and the specifics of how we actually implemented it, given there were (as there always is with anything front-end...) several options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-a-frontend-framework"&gt;
  &lt;/a&gt;
  Why a Front-End Framework?
&lt;/h2&gt;

&lt;p&gt;JavaScript is easily the most flexible way of implementing a performant, user-centric experience in a browser. Your HTML gives you structure, CSS makes it pretty and JavaScript manipulates it as necessary. &lt;/p&gt;

&lt;p&gt;At some point, the amount of JavaScript code increases and the amount of manipulation required - even with the help of some still very popular libraries... &lt;strong&gt;cough...&lt;small&gt;jQuery&lt;/small&gt;...cough&lt;/strong&gt; - reaches the point of being unmanageable and unsustainable. FE frameworks have, in recent years, really risen to address these limitations. &lt;/p&gt;

&lt;p&gt;Taking on a project to do exactly what these frameworks are designed to do really meant it was a no-brainer to go with one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-which-one"&gt;
  &lt;/a&gt;
  But which one?
&lt;/h2&gt;

&lt;p&gt;The decision of which front-end framework to build on given a reasonably blank slate is always a challenging one. The stereotype of the front-end development landscape changing every 15 minutes is not entirely undeserved - the choices are, indeed, ever more numerous.&lt;/p&gt;

&lt;p&gt;But the big name players are still &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; and &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, in my opinion (and I fully confess there was a lot of my opinion in the decision phase here!). Other noteworthy candidates were &lt;a href="https://nextjs.org/"&gt;Next.JS&lt;/a&gt; and &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;However, for reasons including (but not limited to):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In-house developer experience&lt;/li&gt;
&lt;li&gt;Learning curve&lt;/li&gt;
&lt;li&gt;Community support and documentation&lt;/li&gt;
&lt;li&gt;Training availability&lt;/li&gt;
&lt;li&gt;Package library diversity&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...we chose React. &lt;/p&gt;

&lt;p&gt;And then we added &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As someone who was - despite my years of experience and interest in new development tools - actively resistant to adopting TypeScript, I have to say that starting an essentially green-field JavaScript project nowadays without it would be churlish. And it has definitely grown on me. The supporting tools in IDEs like VS Code are really excellent and the assistance you get when developing actually does help significantly.&lt;/p&gt;

&lt;p&gt;I have no doubt that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;perfectly valid arguments could have been made for using a number of other frameworks&lt;/li&gt;
&lt;li&gt;we would have successfully produced a solution using any one of those number of other frameworks&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But React it would be for us for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-with-net"&gt;
  &lt;/a&gt;
  Integrating with .NET
&lt;/h2&gt;

&lt;p&gt;Since we remain somewhat constrained by a traditional MVC architecture and a UI rendered using Razor views, we needed a way to integrate the React app into the site.&lt;/p&gt;

&lt;p&gt;One potential option would have been to use &lt;a href="https://reactjs.net/"&gt;ReactJS.NET&lt;/a&gt; - a platform almost specifically built to do what we were trying to do. But the coupling of Razor and React required by this tool just felt "wrong", and would have left us inseparably tied to React (&lt;a href="https://world.optimizely.com/forum/developer-forum/Developer-to-developer/Thread-Container/2020/5/using-reactjs-net-is-dxp/#222699"&gt;a view also expressed by the Optimizely team themselves&lt;/a&gt;). Given our "proof of concept" stage, maintaining the ability to swap out one framework for another one in the (unlikely-but-you-just-never-know) event of reaching an insurmountable road block was important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-createreactapp-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;create-react-app&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The de-facto standard when starting a new React application is to open a terminal and run &lt;code&gt;npx create-react-app&lt;/code&gt;. Again, we decided against this. Whilst this app does indeed give you absolutely everything you need to create, build and deploy a React application, it includes a bulk load of features that we didn't expect to need and we weren't creating a Single Page Application (SPA) - something &lt;code&gt;create-react-app&lt;/code&gt; is very much angled towards.&lt;/p&gt;

&lt;p&gt;Our app was going to be a fully built-by-hand endeavour. Starting with a brand new working folder and &lt;code&gt;npm init&lt;/code&gt; and a &lt;code&gt;src/index.tsx&lt;/code&gt;, off we went.&lt;/p&gt;

</description>
      <category>react</category>
      <category>optimizely</category>
      <category>javascript</category>
    </item>
    <item>
      <title>IRIS API Explorer Application</title>
      <author>InterSystems Developer</author>
      <pubDate>Fri, 19 Nov 2021 13:36:22 +0000</pubDate>
      <link>https://dev.to/intersystems/iris-api-explorer-application-32gk</link>
      <guid>https://dev.to/intersystems/iris-api-explorer-application-32gk</guid>
      <description>&lt;h3&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;InterSystems IRIS 2019 is going to introduce new and exciting features. One of the areas with new interesting must-to-know things is the API Management. &lt;/p&gt;

&lt;p&gt;OpenAPI initiative (&lt;a href="https://www.openapis.org/"&gt;https://www.openapis.org/&lt;/a&gt;) is the organization supporting a standard specification to define APIs (&lt;a href="https://github.com/OAI/OpenAPI-Specification"&gt;https://github.com/OAI/OpenAPI-Specification&lt;/a&gt;). The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for REST APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service.&lt;/p&gt;

&lt;p&gt;InterSystems introduces in InterSystems IRIS &lt;strong&gt;support for an API-design first approach&lt;/strong&gt;, this approach allows to design your specification first and then generate server-side from it. If we design the API first, normally we use Swagger Editor or another similar tool to create the specification and get the OAS specification in JSON format whenever we want.&lt;/p&gt;

&lt;p&gt;Once we have the API designed and ready to implement then we can create the server side API logic using the OAS specification. In InterSystems IRIS 2019.1 we can use the new routine &lt;strong&gt;^%REST&lt;/strong&gt; to scaffold the API and automatically generate the classes where put the code that will call the business logic. The methods of this classes will be based on naming conventions although you can define the method and class in your specification (operationId).&lt;/p&gt;

&lt;p&gt;Example of use of the InterSystems IRIS REST Command Line Interface:&lt;/p&gt;

&lt;p&gt;USER&amp;gt;do ^%REST&lt;br&gt; &lt;br&gt;REST Command Line Interface (CLI) helps you CREATE or DELETE a REST application &lt;/p&gt;

&lt;p&gt;Enter an application name or (L)ist all REST applications (L): acmeapi&lt;br&gt;REST application not found: acmeapi&lt;br&gt;Do you want to create a new REST application? Y or N (Y):&lt;br&gt; &lt;br&gt;File path or absolute URL of a swagger document.&lt;br&gt;If no document specified, then create an empty application.&lt;br&gt;OpenAPI 2.0 swagger: C:\myspec\acme.swagger.json&lt;br&gt; &lt;br&gt;OpenAPI 2.0 swagger document: C:\myspec\notification.swagger.json&lt;br&gt;Confirm operation, Y or N (Y):&lt;br&gt;-----Creating REST application: acmeapi-----&lt;br&gt;CREATE acmeapi.spec&lt;br&gt;GENERATE acmeapi.disp&lt;br&gt;CREATE acmenapi.impl&lt;br&gt;REST application successfully created.&lt;br&gt; &lt;br&gt;Create a web application for the REST application? Y or N (Y):&lt;br&gt;Specify web application name. Default is /csp/api/acme&lt;br&gt;Web application name: /csp/api/acme/v1&lt;br&gt; &lt;br&gt;-----Deploying REST application: acmeapi-----&lt;br&gt;Application acmeapi deployed to /csp/api/acme/v1&lt;br&gt; &lt;/p&gt;

&lt;p&gt;At this moment the creation of a REST API only can use the &lt;strong&gt;OpenAPI 2.0&lt;/strong&gt; Swagger specification in order to build the scaffold of the API.&lt;/p&gt;

&lt;p&gt;As you see this routine create three classes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;application&amp;gt;&lt;strong&gt;.spec&lt;/strong&gt;: this class is the container for the swagger spec (XData OpenAPI block). This class is read-only.&lt;/li&gt;
&lt;li&gt;&amp;lt;application&amp;gt;&lt;strong&gt;.disp&lt;/strong&gt;: dispatch class ready to use in the CSP application. It extends %CSP.REST and define the XData UrlMap. This class is read-only and marked as system class (by default is hidden in Atelier).&lt;/li&gt;
&lt;li&gt;&amp;lt;application&amp;gt;&lt;strong&gt;.impl&lt;/strong&gt;: class defining all the necessary signature methods. This class should be complete in order to make the API works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  What if I have my API developed already?
&lt;/h3&gt;

&lt;p&gt;In InterSystems IRIS 2018.1 InterSystems introduced the service discovery that enables developers to explore the API capabilities remotely. Also the Swagger integration allowing you to generate an Open API Specification (OAS) from your existing REST application. So, any API that we modify in InterSystems IRIS it can auto-generate the swagger specification.&lt;/p&gt;

&lt;p&gt;It is possible to query all the available APIs in the system through a management API:&lt;/p&gt;

&lt;p&gt;HTTP GET http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/api/mgmnt/ &lt;/p&gt;

&lt;p&gt;Returns:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;[&lt;br&gt;...,&lt;br&gt;    {&lt;br&gt;        "name": "/csp/petstore/v2",&lt;br&gt;        "dispatchClass": "petstore.disp",&lt;br&gt;        "namespace": "USER",&lt;br&gt;        "resource": "",&lt;br&gt;        "swaggerSpec": "/api/mgmnt/v1/USER/spec/csp/petstore/v2",&lt;br&gt;        "enabled": true&lt;br&gt;    }&lt;br&gt;]&lt;/p&gt;

&lt;p&gt;Moreover the Swagger specification of the API can be retrieve doing a HTTP GET to the URL show by the property swaggerSpec. Any API operation defined by the original swagger specification has a new property defining the name of the method that should implement the action:&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;"x-ISC_ServiceMethod": "getPetById",&lt;/p&gt;

&lt;p&gt;A really funny stuff is that we can make use of this api/mgmnt not only for discovery, also for API creation/query/delete using &lt;/p&gt;

&lt;p&gt;HTTP POST to /api/mgmnt/v2/&amp;lt;namespace&amp;gt;/&amp;lt;applicationName&amp;gt;&lt;br&gt;HTTP GET to /api/mgmnt/v2/&amp;lt;namespace&amp;gt;/&amp;lt;applicationName&amp;gt;&lt;br&gt;HTTP DELETE to /api/mgmnt/v2/&amp;lt;namespace&amp;gt;/&amp;lt;applicationName&amp;gt;&lt;/p&gt;

&lt;h3&gt;
  IRIS API Explorer
&lt;/h3&gt;

&lt;p&gt;IRIS Explorer is an Angular 5 application that take advantage of this API in order to provide a nice visual tool to manage IRIS APIs. Let's do a quick tour:&lt;/p&gt;

&lt;p&gt;First we need to do a login into an InterSystems IRIS instance (by default look for a local instance in port 52773):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IK9xEXwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvm0jvtj2h300xwu6brs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IK9xEXwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvm0jvtj2h300xwu6brs.png" alt="Image description" width="880" height="657"&gt;&lt;/a&gt;&lt;br&gt;
After login the app make a query to retrieve all the existing APIS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zrdykgG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrulrvtwpzkc54773lo4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrdykgG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrulrvtwpzkc54773lo4.png" alt="Image description" width="880" height="332"&gt;&lt;/a&gt;&lt;br&gt;
We can delete an existing APIs or we can create a new one. To create a New Application we need to provide the Namespace, the Application Name and the Swagger specification from a .json file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_XZHwN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7p021fuzllbnhkap43i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_XZHwN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7p021fuzllbnhkap43i.png" alt="Image description" width="880" height="400"&gt;&lt;/a&gt;&lt;br&gt;
Once we have the API created we can view the specification. In order to make this more funny I embedded a Swager-UI (&lt;a href="https://github.com/swagger-api/swagger-ui"&gt;https://github.com/swagger-api/swagger-ui&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-SIT3IN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2w3ihbidqr4539zggr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-SIT3IN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2w3ihbidqr4539zggr.png" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;
And of course we can retrieve the JSON OAS Spec:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--30ur4ydV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxq3whwj3x4xnvtkvrun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30ur4ydV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxq3whwj3x4xnvtkvrun.png" alt="Image description" width="880" height="548"&gt;&lt;/a&gt;&lt;br&gt;
All the code is open and is up to you to use or modify as your convenience. The App is available in Open Exchange:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://openexchange.intersystems.com/index.html#!/package/IRIS%20API%20EXPLORER"&gt;https://openexchange.intersystems.com/index.html#!/package/IRIS%20API%20EXPLORER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And also in GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drechema/iris-explorer"&gt;https://github.com/drechema/iris-explorer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope it will be useful&lt;/p&gt;

</description>
      <category>angular</category>
      <category>api</category>
      <category>practice</category>
      <category>programming</category>
    </item>
    <item>
      <title>Symfony Station Communique - 19 November 2021. A Look at Symfony and PHP News.</title>
      <author>Reuben Walker, Jr.</author>
      <pubDate>Fri, 19 Nov 2021 13:28:29 +0000</pubDate>
      <link>https://dev.to/reubenwalker64/symfony-station-communique-19-november-2021-a-look-at-symfony-and-php-news-53df</link>
      <guid>https://dev.to/reubenwalker64/symfony-station-communique-19-november-2021-a-look-at-symfony-and-php-news-53df</guid>
      <description>&lt;p&gt;This post originally appeared on &lt;a href="https://www.symfonystation.com/Communiques"&gt;Symfony Station&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Welcome to this week's Symfony Station Communique. It’s your weekly review of the most valuable and essential news in the Symfony and PHP development communities. This week it’s pretty extensive, so take your time and peruse it for the most valuable items.&lt;/p&gt;

&lt;p&gt;Thanks to Javier Eguiluz and Symfony for sharing &lt;a href="https://www.symfonystation.com/Symfony-Station-Communique-12-November-2021"&gt;our last communique&lt;/a&gt; in their &lt;a href="https://symfony.com/blog/a-week-of-symfony-776-8-14-november-2021"&gt;Week of Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Please note all links will open in a new browser window. My opinions, if I present any, will be in bold.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XH6z9_82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/symfony-logo-no-text.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XH6z9_82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/symfony-logo-no-text.png" alt="Symfony logo" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#symfony"&gt;
  &lt;/a&gt;
  Symfony
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This week
&lt;/h3&gt;

&lt;p&gt;As always, we will start with the official news from Symfony.&lt;/p&gt;

&lt;p&gt;Highlight -&amp;gt; “This week, Symfony development activity focused on polishing and tweaking the upcoming Symfony 5.4 and 6.0 releases (both will be published before the end of this month). In addition, Symfony announced a new sponsoring program for SaaS providers to back their Symfony bridges.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/a-week-of-symfony-776-8-14-november-2021"&gt;A Week of Symfony #776 (8-14 November 2021)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Javier continues a series of posts on what’s new in Symfony 5.4.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/new-in-symfony-5-4-new-validation-constraints"&gt;New in Symfony 5.4: New Validation Constraints&lt;/a&gt; &lt;br&gt;
&lt;a href="https://symfony.com/blog/new-in-symfony-5-4-configurable-exceptions"&gt;New in Symfony 5.4: Configurable Exceptions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://symfony.com/blog/new-in-symfony-5-4-filesystem-path-class"&gt;New in Symfony 5.4: Filesystem Path Class&lt;/a&gt;&lt;br&gt;
&lt;a href="https://symfony.com/blog/new-in-symfony-5-4-redesigned-profiler-logs"&gt;New in Symfony 5.4: Redesigned Profiler Logs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://symfony.com/blog/new-in-symfony-5-4-language-negotiation"&gt;New in Symfony 5.4: Language Negotiation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great deals are available if you are looking for official certification.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/black-friday-2021-offers-from-the-symfony-ecosystem"&gt;Black Friday 2021 Offers from the Symfony Ecosystem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is self-explanatory.&lt;br&gt;
&lt;a href="https://symfony.com/blog/symfony-6-0-0-beta2-released"&gt;Symfony 6.0.0-BETA2 released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symfony has announced the final schedule for SymfonyWorld Online 2021 Winter Conference. We're excited about the Symfony 6 sessions (of course) and the ones on design patterns, runtime, Docker, TWIG, API platform, and Symfony UX! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/announcing-the-final-schedule-of-symfonyworld-online-2021-winter-conference"&gt;Announcing the Final Schedule of SymfonyWorld Online 2021 Winter Conference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They also announced the new and retiring members of the Symfony Core Team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/new-core-team-members-2021-edition"&gt;New Core Team Members, 2021 Edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thB3ZkQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Featured-Item.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thB3ZkQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Featured-Item.png" alt="Featured Item graphic" width="660" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-item"&gt;
  &lt;/a&gt;
  Featured Item
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;We continue to highlight the most significant post of the week.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-involved-with-this"&gt;
  &lt;/a&gt;
  Get involved with this!
&lt;/h3&gt;

&lt;p&gt;The first event was this Thursday, but it is a year-long initiative.&lt;/p&gt;

&lt;p&gt;Denmark notes: “Digital solutions can promote human rights, bring people closer to the decisions that influence their lives, and make democratic institutions stronger and more responsive. Yet online, expectations and aspirations for democracy have not been fully met. Digital technologies pose a severe threat to democracies globally and our democratic practices.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techfordemocracy.dk/"&gt;Join us to make tech work for democracy and human rights!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Via SymfonyCasts: “Another busy week in Symfony Security! So let's get down to business.” &lt;/p&gt;

&lt;p&gt;&lt;a href="https://5hy9x.r.ag.d.sendibm3.com/mk/mr/Y7pmZuSKCPrRs2rY9mCHTSeoD-yG8CW7x7pPARUGdEdM_yJUmeHST2T7g7dsmvKVIa4L0WezNLyDBtauw00KIdX-suCG8qQDpzCD-UBjZOeL-jrX3LeFs3b1AP6oozddeJyOOO1qrA"&gt;This week on SymfonyCasts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is self-explanatory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.strangebuzz.com/en/snippets/getting-the-first-character-of-a-string-with-php"&gt;Getting the first character of a string with PHP and Symfony.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following post looks at using the Svelte javascript framework with Symfony.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.dev-web.io/2021/11/09/svelte-symfony-ma-cure-damincissement/"&gt;Svelte + Symfony, ma cure d’amincissement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We curated several posts last week from Mickaël Andrieu. Here is another one from his series on controlling the quality of your Symfony and PHP projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mickael-andrieu.medium.com/contr%C3%B4lez-la-qualit%C3%A9-de-vos-projets-php-symfony-%C3%A0-laide-des-github-actions-2e82ce7f83b6"&gt;Contrôlez la qualité de vos projets PHP &amp;amp; Symfony à l’aide des GitHub Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Matthias Noback says: “a paradigm shift happened years ago when we went from symfony1 to Symfony 2, introducing the Dependency Injection container. The idea of Dependency Injection was quite new to many developers back then, and we had to talk and read about it a lot before we were ready for this amazing yet weird concept. What got in the way of adoption, I think, was the Yaml or XML syntax for service definitions, an approach that was probably copied from Spring. If we'd start by writing our service containers in plain PHP, that would've been much easier to learn and do.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://matthiasnoback.nl/2021/11/the-dependency-injection-paradigm/"&gt;The Dependency Injection Paradigm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alexandre Daubois notes: “I’ve been involved in the addition of enumerations support in the Symfony framework. A news item was posted on Symfony’s blog about enumerations in the framework. You may want to read it first! This article is a supplement with additional code snippets and information.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alex-daubois.medium.com/using-php-8-1-enumerations-in-symfony-af5ba761135d"&gt;Using PHP 8.1 enumerations in Symfony: Symfony 5.4/6.0 will support them from day one.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wouter Carabain has another article on his Symfony and React app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://woutercarabain.com/webdevelopment/tying-up-loose-ends-and-stock-portfolio-api-part-4/"&gt;Tying up loose ends &amp;amp; Stock Portfolio API (Part 4)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Techno Craft has two articles covering command line interfaces and Symfony.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@technocraft.devops/how-to-create-a-custom-cli-and-use-it-in-symfony-part1-a41b2a763549"&gt;How to create a custom CLI and use it in Symfony (part1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@technocraft.devops/how-to-create-a-custom-cli-and-use-it-in-symfony-part2-cf688df73834"&gt;How to create a custom CLI and use it in Symfony (part2)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Marco Pfeiffer notes that there are only 2 types of database relations. All other types are usually bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.marco.zone/mastering-doctrine-orm-relations-571060c5b40e"&gt;Mastering Doctrine ORM relations&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeless"&gt;
  &lt;/a&gt;
  Timeless
&lt;/h3&gt;

&lt;p&gt;Soft Gorillas says: “Choosing the right technology for application development is an important task. However, a lack of knowledge about the most popular tech stack may result in choosing a framework that will not assure great performance or crucial features. So today, we’d like to tell you more about Symfony.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@Softgorillas/symfony-why-it-a-good-technology-for-your-business-application-development-4957645d044c"&gt;Symfony — why it's a good technology for your business application development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Olususi Oluyemi has this classic post for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://auth0.com/blog/creating-your-first-symfony-app-and-adding-authentication/"&gt;Creating your First Symfony App and Adding Authentication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ran across Akashic Seer’s blog this month, which is a treasure chest of Symfony-related posts. Here are a few posts from his archive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://akashicseer.com/web-development/how-does-login-and-authentication-work-in-symfony-5/"&gt;How does login and authentication work in Symfony 5?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://akashicseer.com/web-development/symfony-5-how-to-import-or-link-to-javascript-and-css-files-with-webpack-encore/"&gt;Symfony 5+: how to import or link to javascript and CSS files with webpack encore.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ga9mH96g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/php-logo_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ga9mH96g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/php-logo_2.png" alt="PHP logo" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This week
&lt;/h3&gt;

&lt;p&gt;Just how fast is PHP 8.1? It’s this quick. Wow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://externals.io/message/116323"&gt;Automatic performance benchmarking: PHP 8.1 is ~30% faster than PHP 7.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“These days we hear a lot about dynamic properties in PHP and the possibility of it being deprecated by version 8.2, only to disappear from version 9. The proposal is documented in a dedicated RFC, and it generated a lot of discussions especially on the social networks (like Twitter, etc),” says Roberto Butti.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/php-what-are-dynamic-properties-2509c6fbccf8"&gt;PHP, what are dynamic properties?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Roberto also published this very useful e-book. "50 drops of PHP" is an open-source e-book, that you can download for free. It collects 50 useful, unknown, and underrated PHP functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/robertobutti/50-drops-of-php-433m"&gt;50 Drops of PHP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fabio Hiroki looks at the Adapter pattern’s use with email notifications. Its purpose is to make classes that have incompatible interfaces work together. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabiohiroki.medium.com/php-design-patterns-adapter-dce46dc74a2a"&gt;PHP Design Patterns — Adapter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arash has another interesting pattern post on Medium.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@arash-jafari/strategy-design-pattern-in-php-8-9c8bb2793e18"&gt;Strategy Design Pattern In PHP8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, on Medium, Patrick Augustus looks at inheritances and traits in PHP. You will probably need the translate button on this one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@trickaugusto1206/heran%C3%A7as-horizontais-com-traits-em-php-8a31929da2fd"&gt;Horizontal Inheritances with Traits in PHP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s some excellent information on using PHP and the Nginx server with Docker from Samuel Fontebasso in these two articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.fontebasso.com.br/php-nginx-with-docker-in-production-20ffdb73ec5b"&gt;PHP+Nginx with Docker in production: Part 1 - Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.fontebasso.com.br/php-nginx-with-docker-in-production-cc1a9be05b91"&gt;PHP+Nginx with Docker in production: Part 2 - Running your code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike traditional PHP, where you run servers behind an Apache or Nginx HTTP service with either mod_php or PHP-FPM enabled, your PHP applications would run using a stateless model, whereas Swoole runs using a stateful model. By design, Swoole runs in memory. It takes advantage of saving things in memory, so you don't have to reload everything for every request coming into your servers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.swoole.co.uk/article/isolating-variables-with-coroutine-context"&gt;Isolating global variables with a co-routine context manager in Swoole&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arjuna Sky Kok says: “Dealing with dates and times is one of those things that can frustrate programmers a lot. At the same time, they are fundamental to software development, used from everything from meta and how things are ordered to time-based triggers and lots in between.&lt;/p&gt;

&lt;p&gt;Dates and times are prone to errors too. Handle them incorrectly, and they can confuse end-users and fellow programmers alike.&lt;/p&gt;

&lt;p&gt;This is a quick guide to dealing with dates and times specifically in the PHP programming language.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/php-date-and-time-recipes/"&gt;PHP Date and Time Recipes&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-week"&gt;
  &lt;/a&gt;
  Last Week
&lt;/h3&gt;

&lt;p&gt;Speaking of time, Rubén Rubio - great name ;) - says: “It is a good practice to use an interface to manage the clock in an application, as it allows having full control of time. For example, it eases testing, as it lets us define the concrete time for each test.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/filmineng/stopping-time-with-php-3m8k"&gt;Stopping time with PHP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP Architect has an enticing new book out. It’s worth a look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.phparch.com/books/the-complementary-php-testing-tools-cookbook/https://smaine-milianni.medium.com/larchi-hexa-est-ce-archi-bien-fd0449b32e33"&gt;The Complementary PHP Testing Tools Cookbook&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeless"&gt;
  &lt;/a&gt;
  Timeless
&lt;/h3&gt;

&lt;p&gt;Ashley Allen states: “In programming, it's important to make sure that your code is readable, maintainable, extendable, and easily testable. One of the ways that we can improve all of these factors in our code is by using interfaces.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ashallendesign.co.uk/blog/using-interfaces-to-write-better-php-code"&gt;Using Interfaces to Write Better PHP Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ashly Rich attended a talk a few years ago and found out how vastly complicated cryptography is and how PHP is making encryption more accessible thanks to the introduction of Sodium. Data encryption in PHP has been vital to his work on SpinupWP, a cloud-based server control panel with root access to thousands of servers and sites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deliciousbrains.com/php-encryption-methods/"&gt;Best Ways to Encrypt Passwords, Keys, &amp;amp; More with PHP in 2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvXlR0Jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/code-logo_1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvXlR0Jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/code-logo_1.jpeg" alt="Code logo" width="626" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h2&gt;

&lt;p&gt;Cinto provides a look at an important topic, SSL and TLS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/a-highly-simplified-overview-of-ssl-tls-dc4068543253"&gt;A Highly Simplified Overview of SSL/TLS: Understanding network communication using real-life analogies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mateusz Cholewka notes: “Nowadays we are using docker a lot in web development. It’s easy to use, great for scaling, and gives us an immutable environment for running your application from local development to deploying on production. However, to get the best experience when using docker, you should apply some practices to get fast and light builds of your docker images.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@kontaktmtk3d/here-are-the-dockerfile-tips-you-can-use-to-get-your-builds-faster-and-safer-51ae8d16a6c7"&gt;Here are the Dockerfile tips you can use to get your builds faster and safer.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abdul Wahab says: “In general, web services have been in existence for just as long as the HTTP protocol has existed. But, since the beginning of cloud computing, they have become the ubiquitous method of enabling client interaction with services and data.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abdulrwahab.medium.com/api-architecture-best-practices-for-designing-rest-apis-bf907025f5f"&gt;API Architecture — Design Best Practices for REST APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is more like a short book so bookmark it for reading at your leisure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.toptal.com/project-managers/agile/ultimate-introduction-to-agile-project-management"&gt;The Ultimate Introduction To Agile Project Management&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image Credit: Rafael Henrique/SOPA Images/LightRocket via Getty Images&lt;/p&gt;

&lt;p&gt;Hear from CIOs, CTOs, and other C-level and senior execs on data and AI strategies at the Future of Work Summit this January 12, 2022. Learn more&lt;/p&gt;

&lt;p&gt;In this year’s GitHub Octoverse Report, their research tells you how to improve your performance and well-being by developing code, creating documentation, and supporting communities in smarter, more sustainable ways.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://octoverse.github.com/"&gt;State of the Octoverse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenAI removed the waitlist for GPT-3, its large language model that can automatically write emails and articles, compose poetry, create code across a dozen programming languages, and more. Any developer in a supported country can sign up to begin integrating the model with their app or service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://venturebeat.com/2021/11/18/openai-makes-gpt-3-generally-available-through-its-api/"&gt;OpenAI makes GPT-3 generally available through its API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you published or seen something related to Symfony or PHP that we missed? If so, please contact us.&lt;/p&gt;

&lt;p&gt;That's it for this week. Thanks for making it to the end of another extended edition. I look forward to sharing next week's Symfony and PHP news with you on Friday. Next week is also the Thanksgiving holiday in the U.S. so it may be a short (or long) edition. It depends on how much time I want to spend around the in-laws. ;)&lt;/p&gt;

&lt;p&gt;Please share this post. :) Be sure to join our newsletter list (at the bottom of &lt;a href="https://symfonystation.com/Communiques"&gt;this page&lt;/a&gt;, so you get each week's communique directly in your inbox (a day early). And &lt;a href="https://twitter.com/symfonystation"&gt;follow us on Twitter&lt;/a&gt; at @symfonfystation.&lt;/p&gt;

&lt;p&gt;Happy coding Symfonistas!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHynFiuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Reuben_5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHynFiuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Reuben_5.png" alt="Photo of Reuben Walker" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reuben Walker&lt;br&gt;
Founder &lt;a href="https://www.symfonystation.com/"&gt;Symfony Station&lt;/a&gt;&lt;br&gt;
Reuben is also Ringmaster of &lt;a href="https://media.mobileatom.net/"&gt;Mobile Atom Media&lt;/a&gt; and its division &lt;a href="https://www.mobileatom.net/"&gt;Mobile Atom Code&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>symfony</category>
      <category>php</category>
      <category>docker</category>
      <category>cli</category>
    </item>
    <item>
      <title>How To Launch A Celebrity Subscription App Like OnlyFans In 2022?
</title>
      <author>Jenny C. Wilson</author>
      <pubDate>Fri, 19 Nov 2021 13:28:10 +0000</pubDate>
      <link>https://dev.to/jennycwilson/how-to-launch-a-celebrity-subscription-app-like-onlyfans-in-2022-2h7</link>
      <guid>https://dev.to/jennycwilson/how-to-launch-a-celebrity-subscription-app-like-onlyfans-in-2022-2h7</guid>
      <description>&lt;p&gt;OnlyFans is a London-based company that launched its app in 2016. Since its launch, it has revolutionized the content subscription apps market. Such apps give opportunities for content creators to showcase their talents and earn revenue. This platform has caught the attention of 170 million registered users and 1.5 million content creators. &lt;/p&gt;

&lt;p&gt;Among many other premium celebrity subscription apps, OnlyFans stand apart with a unique set of features. This platform’s growth &amp;amp; popularity prompts entrepreneurs to launch a fan club website similar to OnlyFans.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OnlyFans Clone - A Readily Available Premium Social Media App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Those are the days when a conventional approach is preferred in which the app was crafted from scratch. But, this requires a lot of time and includes a considerable investment. There comes a clone script, a modern approach to developing the app which is available at a nominal cost and does not need much time. &lt;/p&gt;

&lt;p&gt;It would be the choice for you to prefer the app development approach based on your requirements. The ones who want to launch a premium social media app instantly can make use of the &lt;strong&gt;&lt;a href="https://www.uberlikeapp.com/onlyfans-clone"&gt;OnlyFans Clone Script&lt;/a&gt;&lt;/strong&gt;. It is a pre-built app solution that is readily available for deployment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of OnlyFans Clone Script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On a general note, both app development approaches have pros and cons on their own. In this, let us see the key advantages of OnlyFans Clone Script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inclusion of new features and integration of third-party services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the script is highly customizable &amp;amp; fully scalable, any number of features can be included based on your app requirements. Alongside, you can contemplate integrating third-party services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rebranding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The app solution will be well-crafted beforehand. With necessary modifications, you can brand it with your company name, tagline, symbol, etc. It indicates owning the app. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available at an economical price&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The app that is built from scratch requires a maximum of 4 to 6 months. Depending on this time limit, the cost for development will be determined and considerably, you need to contribute more. On the other side, crafting the app using an OnlyFans Clone Script does not require much time for customization. And so, the cost would be comparatively less.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soon to hit the market&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the customization &amp;amp; scalability element, the OnlyFans Clone app can be launched sooner, depending on your platform selection. When choosing multiple platforms, you can aim for wider coverage. With the inclusion of features such as multilingual and multi-currency, you can leap into the global market without any barriers.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why wait? Launch OnlyFans Clone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why can’t you leverage a great opportunity? Utilize the clone script and launch OnlyFans Clone in 2022. Everything to do is, approach the company that is experienced in crafting the premium subscription-based celebrity app. &lt;/p&gt;

</description>
      <category>onlyfansclone</category>
      <category>onlyfansclonescript</category>
      <category>onlyfanscloneappdevelopment</category>
    </item>
    <item>
      <title>Node.js: multi-target debugging QEWDjs using Visual Studio Code</title>
      <author>InterSystems Developer</author>
      <pubDate>Fri, 19 Nov 2021 13:27:41 +0000</pubDate>
      <link>https://dev.to/intersystems/nodejs-multi-target-debugging-qewdjs-using-visual-studio-code-3b0g</link>
      <guid>https://dev.to/intersystems/nodejs-multi-target-debugging-qewdjs-using-visual-studio-code-3b0g</guid>
      <description>&lt;p&gt;One of the most important features during application development is the ability to debug your code easily. Because of the asynchrnous nature, a standard Node.js application server works single-threaded by default. When you are developing applications using an IDE like Visual Studio Code, you can very easily debug your Node.js process:&lt;/p&gt;

&lt;p&gt;First, &lt;a href="https://code.visualstudio.com/"&gt;download the free Visual Studio Code IDE&lt;/a&gt; (@code) and install it on your development machine.&lt;/p&gt;

&lt;p&gt;We will start with basic debugging using a very small test.js file and go to the debug view:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOgu56vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5yer7xqq6pgiuz9pu4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOgu56vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5yer7xqq6pgiuz9pu4r.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice we need to define a debug configuration first (at the top, click on "No configurations" and select "Add configuration". You'll see a "launch.json" file is created and select "Node.js: launch program":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnw4pSa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs935jfvcnbmxzhkb03n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnw4pSa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs935jfvcnbmxzhkb03n.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modify the "program" property to the filename you want to launch and debug ("program": "${workspaceFolder}/test.js" in this case) and save launch.json. Now you can start debugging - click in the left column of the first "var" line in our "test.js" file to set a breakpoint, start the debug session with the green "play" button at the top (you'll notice that your "Launch program" configuration was automatically selected in the debugger). The debugger stops at our breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T_ZieSKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxlfblm9un8s6g14nbrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_ZieSKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxlfblm9un8s6g14nbrv.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can step now through the code, view variable contents hovering over the variable names in your code, watch variables, ... (see all possibilities in the Debug menu). You'll see that a debug toolbar is active at the top with the usual debug icons. Also notice on the left in "loaded scripts" that our node.js script is loaded and running. &lt;/p&gt;

&lt;p&gt;In this case, we launched the Node.js process "inside" the @code IDE and debug output is available in the "debug output" window:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym8iemiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01yrlzgl8jcjuieb2o4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym8iemiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01yrlzgl8jcjuieb2o4v.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is the "standard" way of debugging a Node.js application server - @code is by default using the standard "debug" protocol built into Node.js.&lt;/p&gt;

&lt;p&gt;You can also debug a Node.js application in a different way: when you run your Node.js application in it's own commandline window, you can "attach" the @code debugger to it. This is the recommended way to debug Node.js applications in a normal (development) setting. To do this, we first add a new "attach" debug configuration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZDnR_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7uctj58w8tsmg05ms99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_ZDnR_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7uctj58w8tsmg05ms99.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Go to the debug configuration inside  launch.json and modify it as shown here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqQ_o7nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1gkx01gz4iusm4x2onp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqQ_o7nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1gkx01gz4iusm4x2onp.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now launch your Node.js application in it's own commandline window and add both the "inspect" and "debug-brk" flag to debug it ("inspect" is the newest debug protocol in Node.js, please make sure you have at least Node.js version 6.9.x or higher installed for this):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mDOQug2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6de7i0nnmfn2tvq5vrsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mDOQug2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6de7i0nnmfn2tvq5vrsp.png" alt="Image description" width="659" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see your application is started and the debugger is listening on the default inspector port 9229. Because we used the "debug-brk" flag, execution stopped at your first code line and node is waiting for an external debugger (@code in our case) to connect to it. Now go to @code and select the "Attach" debug configuration (don't forget to save "launch.json" first!), now set only a breakpoint on line 3 and start debugging:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVmllzTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idpdfimrlvwtskp5vlqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVmllzTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idpdfimrlvwtskp5vlqs.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt;&lt;br&gt;
  You see the code is stopped at the first line (because we used the "debug-brk" flag) and we can debug again as usual. Output is appearing in our commandline window now. You see the debugger is attached too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzQC_4Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7bvb7j027ziystgzq98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzQC_4Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7bvb7j027ziystgzq98.png" alt="Image description" width="659" height="482"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When finished, disconnect the @code debugger with the rightmost icon in the debug toolbar. The node.js process in your commandline window will stop as soon as the @code debugger has disconnected.&lt;/p&gt;




&lt;p&gt;Above you could see how to debug a Node.js application running in a single thread. However, to take advantage of multi-core CPU's, Node.js also allows you to fork multiple child processes in your application using it's &lt;a href="https://nodejs.org/api/child_process.html"&gt;Child process module&lt;/a&gt;. In your code, you'll typically use the fork() method to start additional child processes. When you want to debug these, you'll need to launch them each with a different "inspector" port, because the Node.js child process module doesn't detect automatically the master process was started in debugging mode and you need to "fix" the commandline arguments for the child processes you are forking. A good way to do this is to increment the standard inspect port when forking each child process like the code in the &lt;a href="https://github.com/robtweed/ewd-qoper8/blob/master/lib/master/proto/startWorker.js"&gt;ewd-qoper8 module&lt;/a&gt; does for you inside the &lt;a href="http://qewdjs.com/"&gt;QEWDjs&lt;/a&gt; application server framework:&lt;/p&gt;

&lt;p&gt;  var q.worker.inspectPort = 9229;&lt;br&gt;  var q.worker.debugPort = 5858;&lt;br&gt;  ...&lt;br&gt;  var cp = require('child_process');&lt;br&gt;  ...&lt;br&gt;  var execArgv = process.execArgv.map(function (option, index) {&lt;br&gt;    if (option.indexOf('--inspect') !== -1) {&lt;br&gt;      q.worker.inspectPort++;;&lt;br&gt;      return '--inspect=' + q.worker.inspectPort;&lt;br&gt;    }&lt;br&gt;    else if ((option.indexOf('--debug') !== -1) &amp;amp;&amp;amp; (option.indexOf('--debug-brk') === -1)) {&lt;br&gt;      q.worker.debugPort++;&lt;br&gt;      return '--debug=' + q.worker.debugPort;&lt;br&gt;    }&lt;br&gt;    else {&lt;br&gt;      return option;&lt;br&gt;    }&lt;br&gt;  });&lt;br&gt;  var workerProcess = cp.fork(this.worker.loaderFilePath, args, { execArgv: execArgv, env: process.env });&lt;br&gt; &lt;/p&gt;

&lt;p&gt;As each child process has it's own debug port, you'll no longer get "Unable to open devtools socket: address already in use" errors when forking child processes with debugging options.&lt;/p&gt;

&lt;p&gt;FYI, if you use the Node.js &lt;a href="https://nodejs.org/api/cluster.html"&gt;cluster module&lt;/a&gt; in your applications, each forked worker will get it's &lt;a href="https://nodejs.org/api/cluster.html#cluster_cluster_settings"&gt;inspectPort incremented automatically&lt;/a&gt;. The cluster module fixes this for you.&lt;/p&gt;

&lt;p&gt;Because you want to debug these more complex situations where your Node.js application server is running a master process and multiple child/worker processes, we will use the technique above to run each process on it's own inspect port. We can now easily define a &lt;a href="https://code.visualstudio.com/docs/editor/debugging#_multitarget-debugging"&gt;multi-target debugging&lt;/a&gt; configuration and debug seamlessly as you do with a single-threaded server instance.&lt;/p&gt;

&lt;p&gt;I will show here how this works with a QEWDjs back-end server as I used in my &lt;a href="https://community.intersystems.com/post/nodejs-create-basic-web-app-react-part-2"&gt;React example part 2&lt;/a&gt;. In this example, the QEWDjs server has a poolSize of 1, this means you have a single master process and one worker process. The worker processes are started on-demand by default, but QEWDjs allows you to prefork them by adding a "poolPrefork: true" parameter in your QEWD config. This is necessary to make sure all worker processes are running before we start debugging in @code.&lt;/p&gt;

&lt;p&gt;In this debug setting, you will launch your QEWD server in debug mode using inspect mode with an optional starting port:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egIgXpWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftd0kmjzaik90iayzzdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egIgXpWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftd0kmjzaik90iayzzdr.png" alt="Image description" width="659" height="482"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This means your master process will listen on port 9329 and your first worker on port 9330, additional workers will listen on 9331, ...&lt;/p&gt;

&lt;p&gt;In @code, we will now define all debug configurations needed to attach to both Node.js processes. Attaching to the QEWDjs server is the way to go here because when you are using the microservices capabilities, you can have multiple QEWD server instances running on your development environment and sending the output to one single debug console in @code could become very confusing as you don't know which instance output is coming from.&lt;/p&gt;

&lt;p&gt;Go to @code and add two configurations as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gNdX4JLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fabvxtg6pf399cdj5oz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gNdX4JLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fabvxtg6pf399cdj5oz6.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We added an "attach" debug configuration for the master process and one for the worker process (on different ports). &lt;/p&gt;

&lt;p&gt;Now we can just use the "compounds" feature in @code to tie together both debug configs to one compound debug config we can start at the same time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZw45NGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zephydwjcrdfcr3vlgx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZw45NGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zephydwjcrdfcr3vlgx2.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now start debugging by selecting the "multi-target debugging" config at the top and watch the debugger attaching to both Node.js processes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epbKuVFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0upbrgpxqv1dzqs35s1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epbKuVFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0upbrgpxqv1dzqs35s1.png" alt="Image description" width="659" height="482"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You see "Debugger attached" appearing twice now. You can now easily debug in @code the same way as you would debug a single-threaded instance of Node.js - you won't see any difference. Just add your breakpoints, single-step through the code, ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVxSmDTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pdhh9o6zifl2owh6z9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVxSmDTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pdhh9o6zifl2owh6z9a.png" alt="Image description" width="880" height="663"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You'll notice a difference at the left side: you see multiple processes running now on the call stack and in loaded scripts.&lt;/p&gt;

&lt;p&gt;To stop debugging, you'll need to disconnect all debug connections (you'll have to click "disconnect" in the top toolbar as many times as you have Node.js processes).&lt;/p&gt;

&lt;p&gt;This feature in @code makes it very powerful and as I outlined above, you can easily extend this to multiple server instances and more workers: just start the first one on the default debug port with:&lt;/p&gt;

&lt;p&gt;node --inspect=9229 qewd-start.js&lt;/p&gt;

&lt;p&gt;and the second instance with:&lt;/p&gt;

&lt;p&gt;node --inspect=9329 qewd-start-microservices.js&lt;/p&gt;

&lt;p&gt;Just add more debug configurations and compounds accordingly and you can debug as many processes simultaneously as you like!&lt;/p&gt;

&lt;p&gt;QEWDjs takes care of assigning debug ports correctly to each worker started.&lt;/p&gt;

&lt;p&gt;If you combine the debugging functionality for your Node.js JavaScript code with the &lt;a href="http://www.georgejames.com/serenji"&gt;Serenji&lt;/a&gt; debugger and/or Studio/Atelier, you can debug your extrinsic functions you can call from JavaScript with the &lt;a href="https://www.npmjs.com/package/qewd-cos"&gt;qewd-cos&lt;/a&gt; module too in Caché (adding the power of classes and SQL to JavaScript!).&lt;/p&gt;

&lt;p&gt;Happy debugging! &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOeL2QOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.intersystems.com/sites/all/libraries/ckeditor/plugins/smiley/images/wink_smile.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOeL2QOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.intersystems.com/sites/all/libraries/ckeditor/plugins/smiley/images/wink_smile.png" alt="wink" title="wink" width="23" height="23"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>studio</category>
      <category>node</category>
    </item>
  </channel>
</rss>
