<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adding custom Docker containers to Appwrite</title>
      <author>Alex Weininger</author>
      <pubDate>Tue, 01 Jun 2021 01:24:40 +0000</pubDate>
      <link>https://dev.to/streamlux/adding-custom-docker-containers-to-appwrite-2chp</link>
      <guid>https://dev.to/streamlux/adding-custom-docker-containers-to-appwrite-2chp</guid>
      <description>&lt;p&gt;In my second post to dev.to, I'll describe how you can add your very own Docker containers to Appwrite!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;While exploring different backend infrastructure options at &lt;a href="https://streamlux.com"&gt;Streamlux&lt;/a&gt;, we decided it would be best to add our own containers to the Appwrite Traefik network. This way we could host completely custom web servers on the same machine as Appwrite. Allowing for extremely low latency between the server and Appwrite, and allowing us to have 100% flexibility in terms of API.&lt;/p&gt;

&lt;p&gt;If you haven't heard of Appwrite, taken from &lt;a href="https://appwrite.io"&gt;Appwrite.io&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is a self-hosted solution that provides developers with a set of easy-to-use and integrate REST APIs to manage their core backend needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From one developer to another, check it out, it's awesome!&lt;/p&gt;

&lt;p&gt;Now let's get back to the task at hand. Adding custom Docker containers to Appwrite is relatively straight forward. However, if you're new to Docker or Traefik it can be a bit daunting.&lt;/p&gt;

&lt;p&gt;The majority of the changes we have to make will be to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file located in the folder where Appwrite has been installed. For me it was in a folder named &lt;code&gt;appwrite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I'll go into a little more detail on the changes we will be making to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file, but feel free to skip the background section and get right into the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file handles the startup of all the Docker containers Appwrite consists of. Appwrite uses Traefik as a reverse proxy to route incoming network requests to the correct containers.&lt;/p&gt;

&lt;p&gt;When adding our own container, we usually want to be able to handle incoming network requests. To tell Traefik we want requests that are pointed to a specific endpoint like &lt;code&gt;www.mydomain.com/customApi&lt;/code&gt; to be routed to our container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes"&gt;
  &lt;/a&gt;
  Changes
&lt;/h2&gt;

&lt;p&gt;The first change will be at the very top of your &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;providers.docker.exposedByDefault&lt;/code&gt; from &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;traefik&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;traefik:2.3&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appwrite-traefik&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.file.directory=/storage/config&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.file.watch=true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.docker=true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--providers.docker.exposedByDefault=true&lt;/span&gt; &lt;span class="c1"&gt;# default is false, change it to true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, your appwrite service labels section needs to be updated to include:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.enable=true"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.constraint-label-stack=appwrite"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.docker.network=appwrite"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.services.appwrite-service.loadbalancer.server.port=80"&lt;/span&gt;
&lt;span class="c1"&gt;# http&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.entrypoints=web&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.rule=PathPrefix(`/`)&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.service=appwrite-service&lt;/span&gt;
&lt;span class="c1"&gt;# https&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.entrypoints=websecure&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.rule=PathPrefix(`/`)&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.service=appwrite-service&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.tls=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the appwrite service will now look like this (leave everything after the labels section as it is).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;appwrite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appwrite/appwrite:0.8.0&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
    &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.enable=true"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.constraint-label-stack=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.docker.network=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.services.appwrite-service.loadbalancer.server.port=80"&lt;/span&gt;
        &lt;span class="c1"&gt;#http&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.entrypoints=web&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.rule=PathPrefix(`/`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-http.service=appwrite-service&lt;/span&gt;
        &lt;span class="c1"&gt;# https&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.entrypoints=websecure&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.rule=PathPrefix(`/`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.service=appwrite-service&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-https.tls=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all the changes we have to make to the appwrite configuration. Now we can add our own service.&lt;/p&gt;

&lt;p&gt;Here is an example Node.js service definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;appwrite-customApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;node:12-alpine"&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.middlewares.portainerpathstrip.stripprefix.prefixes=/customApi/"&lt;/span&gt; &lt;span class="c1"&gt;# requests to this endpoint will be routed to our container &lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.middlewares.portainerpathstrip.stripprefix.forceSlash=false"&lt;/span&gt;

        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.enable=true"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.constraint-label-stack=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.docker.network=appwrite"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.services.appwrite-customApi-loadbalancer.server.port=8081"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.middlewares=portainerpathstrip"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto = https&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.entrypoints=web&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.rule=PathPrefix(`/customApi`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-http.service=appwrite-customApi&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.middlewares=portainerpathstrip"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.entrypoints=websecure&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.rule=PathPrefix(`/customApi`)&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.service=appwrite-customApi&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;traefik.http.routers.appwrite-customApi-https.tls=true&lt;/span&gt;

    &lt;span class="c1"&gt;# customize the following properties based on your docker container&lt;/span&gt;

    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;node"&lt;/span&gt;
    &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/node/app&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=production&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PORT=8081&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;../customApi/:/home/node/app&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;prod"&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be able to copy and paste this, and then change the properties to be able to start your container properly. One thing to note is the port. I have it running on port 8081, so when starting your web server in your container you should start it on port 8081. If you change the port, make sure you change it in all the places it's references in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;After you're done, you can run &lt;code&gt;docker-compose up -d&lt;/code&gt; to restart the docker containers that have had configuration changes. &lt;/p&gt;

&lt;p&gt;You can run &lt;code&gt;docker ps&lt;/code&gt; to view the containers and make sure your new container has started. &lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;docker logs [CONTAINER NAME]&lt;/code&gt; to view the logs from your container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-notes"&gt;
  &lt;/a&gt;
  Finishing notes
&lt;/h2&gt;

&lt;p&gt;I would love to know if you have success adding your own container to the Appwrite Traefik proxy. It would be awesome to compile some example &lt;code&gt;docker-compose.yml&lt;/code&gt; files to make it easier for other users.&lt;/p&gt;

&lt;p&gt;Please reach out to me with any questions you have or things I missed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;First and foremost I have to give credit to Appwrite. And specifically the absolutely amazing Appwrite team. Go check them out and show your support for their awesome work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/appwrite"&gt;Appwrite on Dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io"&gt;Appwrite.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Join the Appwrite discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;VS Code extension&lt;/a&gt; - maintained with ❤️ by the Streamlux team!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#streamlux"&gt;
  &lt;/a&gt;
  Streamlux
&lt;/h2&gt;

&lt;p&gt;And finally, if you found this post helpful, I am posting today on behalf of my company &lt;a href="https://streamlux.com"&gt;Streamlux&lt;/a&gt;. After months of hard work we've recently released a public beta of our desktop app. If you are a Twitch streamer or viewer come check out what we have in store.&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>docker</category>
      <category>backend</category>
    </item>
    <item>
      <title>La propiedad display en CSS</title>
      <author>Lupita Code 🌄</author>
      <pubDate>Tue, 01 Jun 2021 00:56:13 +0000</pubDate>
      <link>https://dev.to/lupitacode/la-propiedad-display-en-css-1b6a</link>
      <guid>https://dev.to/lupitacode/la-propiedad-display-en-css-1b6a</guid>
      <description>&lt;p&gt;¡Hola gente bonita!👋&lt;/p&gt;

&lt;p&gt;En este articulo voy a explicar sobre la propiedad &lt;code&gt;display&lt;/code&gt; y los diferentes valores que esta contiene, antes de empezar es necesario comprender algunos conceptos, como el modelo de caja (box-model) o incluso el &lt;a href="https://dev.to/lupitacode/que-es-el-box-sizing-en-css-2pi9"&gt;box-sizing&lt;/a&gt; ya que considero que estos temas (tal como en la serie Dark 📺) están conectados 😂. Vamos a empezar a repasar algunas cosas importantes.&lt;/p&gt;

&lt;p&gt;Es importante que entiendas que cada elemento HTML en una pagina web es una caja rectangular, esta es la forma en que se representan todos los elementos, no existen elementos triangulares, redondos, poligonales etc. Todos los elementos en HTML por defecto son rectangulares ya que internamente el navegador dibuja un rectángulo.&lt;/p&gt;

&lt;p&gt;Aunque usted visualice en un sitio web algún elemento redondo diseñado en CSS, ese elemento seguirá siendo rectangular y esto es porque como he dicho anteriormente cada elemento del diseño web es una caja, el navegador renderiza cada elemento de la página web como un elemento rectangular y con CSS nosotros definimos las propiedades como el tamaño, el color, los estilos, el margen y mucho más de estos elementos rectangulares.&lt;/p&gt;

&lt;p&gt;Esto puedes comprobarlo con el siguiente ejemplo, con ayuda de la propiedad &lt;code&gt;outline&lt;/code&gt;, podemos ver todos los elementos de la pagina de inicio de Google de forma rectangular y esto lo puedes hacer con cualquier otro sitio web.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
    outline: 1px solid red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD-tIhUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyykfbzrr25abrxbmmio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD-tIhUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyykfbzrr25abrxbmmio.png" alt="Página de inicio de Google."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entonces cada elemento HTML es una caja formada por 4 áreas: &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt; y &lt;code&gt;margin&lt;/code&gt;. Estas áreas se apilan para formar el modelo de caja (box model).&lt;/p&gt;

&lt;p&gt;Cuando se establece una anchura o una altura en un elemento, esto sólo se aplica al área de contenido (content) de la caja, no a la caja completa. El padding y border se añaden a la anchura y la altura para obtener el tamaño total de la caja, si quieres profundizar mas en este tema, te invito a leer mi articulo de &lt;a href="https://dev.to/lupitacode/que-es-el-box-sizing-en-css-2pi9"&gt;box-sizing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#la-propiedad-display"&gt;
  &lt;/a&gt;
  La propiedad Display
&lt;/h2&gt;

&lt;p&gt;De forma natural existen elementos HTML en línea y elementos de bloque, esto quiere decir que muchas etiquetas HTML tienen asignado un estilo CSS por defecto aunque no lo hayas especificado, todos los elementos tienen establecido un valor de la propiedad &lt;code&gt;display&lt;/code&gt; que puede ser &lt;code&gt;inline&lt;/code&gt; o puede ser &lt;code&gt;block&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La documentación de la MDN define la propiedad display de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;La propiedad CSS display especifica si un elemento es tratado como &lt;code&gt;block&lt;/code&gt; o &lt;code&gt;inline&lt;/code&gt; y el diseño usado por sus hijos, como flow layout, grid (Cuadricula) o flex (Flexible). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Formalmente la propiedad display establece los tipos de &lt;strong&gt;visualización interna y externa de un elemento&lt;/strong&gt;. La de tipo externa establece la participación de un elemento en el flujo normal; la tipo interna establece el layout (Diseño) de los hijos.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flujo-normal-normal-flow"&gt;
  &lt;/a&gt;
  Flujo Normal (normal flow)
&lt;/h4&gt;

&lt;p&gt;El flujo normal en HTML es el orden natural en el que los elementos aparecen en pantalla, es decir, los elementos aparecerán colocados tal como estén ordenados en el código HTML solo si no se aplica ningún CSS que cambie la forma en la que se comportan.&lt;/p&gt;

&lt;p&gt;Como ya hemos mencionado anteriormente estos elementos en HTML por defecto son elementos "en línea" o elementos "en bloque".&lt;/p&gt;

&lt;p&gt;Conociendo esto, la documentación de la MDN define el flujo normal de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El flujo normal, o flow Layout, es la forma en que los elementos de bloque y en línea se muestran en una página antes de que se realicen cambios en su diseño.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¿Cómo se comportan los elementos Block e Inline cuando forman parte del flujo normal?&lt;/p&gt;

&lt;p&gt;En el flujo normal, los elementos en línea se muestran en la dirección en línea, es decir, se muestran uno tras otro, comenzando por la izquierda. Los elementos en bloque se muestran uno detrás de otro, es decir, comienzan en la parte superior y se mueven hacia abajo en la página.&lt;/p&gt;

&lt;p&gt;📖 Esto lo podemos comprender cuando leemos un libro, siempre vamos a leer de arriba hacia abajo y de izquierda a derecha.&lt;/p&gt;

&lt;p&gt;La propiedad display aparte de tener los valores anteriores también tiene un valor llamado: &lt;code&gt;inline-block&lt;/code&gt; que junto con los demás nos sirve para definir la colocación de elementos individuales, también tiene otros valores importantes como: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;flex&lt;/code&gt; y &lt;code&gt;grid&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-inline"&gt;
  &lt;/a&gt;
  🍫 display: inline
&lt;/h2&gt;

&lt;p&gt;Los elementos en línea no admiten dimensiones (width, height) pero si admiten margin, padding y border, solo ocupan lo que tengan en su contenido, es decir, aunque quieras declarar un ancho y alto a un elemento de línea no podrá tener efecto ya que estos elementos no aceptan dimensiones, así también lo explica la documentación de la MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Los elementos en línea tienen su altura y anchura determinados por su contenido. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si hay varios elementos en línea estarán colocados de izquierda a derecha (uno al lado de otro).&lt;/p&gt;

&lt;p&gt;Por ejemplo, el elemento HTML &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; es un elemento de línea por defecto y no importa cuántas etiquetas &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; haya, siempre aparecerán en línea o, en otras palabras, una inmediatamente después de la otra, produciendo una cadena continua de texto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;span class="inline"&amp;gt;Soy un elemento de linea&amp;lt;/span&amp;gt;
 &amp;lt;span class="inline"&amp;gt;Soy otro elemento de linea&amp;lt;/span&amp;gt;
 &amp;lt;span class="inline"&amp;gt;Soy otro elemento más de linea&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.inline {
    background-color: khaki;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFPV2GP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xr8rpxh6rxk8eb8898.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFPV2GP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1xr8rpxh6rxk8eb8898.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si quieres cambiar el tamaño, tienes que tener en cuenta que no podrás hacerlo porque recuerda que los elementos de línea no admiten dimensiones, esto lo puedes cambiar por &lt;code&gt;display: block&lt;/code&gt; o &lt;code&gt;display: inline-block&lt;/code&gt; de esta forma ya podrás cambiar el tamaño de tus elementos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1les-son-los-elementos-de-l%C3%ADnea"&gt;
  &lt;/a&gt;
  🤔 ¿Cuáles son los elementos de línea?
&lt;/h3&gt;

&lt;p&gt;La siguiente es una lista de los elementos en línea de HTML, podemos ver algunos de estos elementos en los cuales colocamos contenido en forma de texto:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;tt&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;abbr&lt;/code&gt;, &lt;code&gt;acronym&lt;/code&gt;, &lt;code&gt;cite&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;dfn&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;kbd&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;samp&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;bdo&lt;/code&gt;, &lt;code&gt;br&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;img&lt;/code&gt;&lt;/strong&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;sup&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;button&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;😰 ¿Debo aprender de memoria todos los elementos de línea? La respuesta es que no es necesario, simplemente con la practica lograras identificar que elementos son de línea o de bloque. Recuerda que la practica hace al maestro. 🤓 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#display-block"&gt;
  &lt;/a&gt;
  📄 display: block
&lt;/h2&gt;

&lt;p&gt;Un elemento de bloque es un elemento que ocupa el ancho máximo disponible. Tal y como dice la documentación de la MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;De manera predeterminada, el contenido de un elemento de nivel de bloque es el 100% del ancho de su elemento padre y su altura viene determinada por su contenido.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esto nos quiere decir que los elementos de tipo bloque abarcan el 100% del espacio que tengan disponible, es decir, se estiran por todo el ancho de la página.&lt;/p&gt;

&lt;p&gt;Cabe mencionar que estos elementos si admiten dimensiones pero no pueden tener otro elemento a su lado ya que abarcan todo el espacio que tengan disponible por lo tanto estarán colocados de arriba hacia abajo, aunque este comportamiento por defecto puede ser modificado colocando &lt;code&gt;display: inline-block&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Cuando hay varios elementos, estos están separados por sus márgenes, como vemos en la siguiente imagen, esto tiene que ver con un tema fundamental llamado: Colapso de márgenes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;p class="block"&amp;gt;Soy un elemento de bloque&amp;lt;/p&amp;gt;
 &amp;lt;p class="block"&amp;gt;Soy otro elemento de bloque&amp;lt;/p&amp;gt;
 &amp;lt;p class="block"&amp;gt;Soy otro elemento más de bloque&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.block {
    background-color: khaki;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--444M8d5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhhg516qhqvtnkitr90c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--444M8d5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhhg516qhqvtnkitr90c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En general, los elementos en bloque también pueden contener elementos en línea y otros elementos en bloque, así que los elementos en bloque crean estructuras "más grandes" que los elementos en línea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1les-son-los-elementos-de-bloque"&gt;
  &lt;/a&gt;
  🤔 ¿Cuáles son los elementos de bloque?
&lt;/h3&gt;

&lt;p&gt;La siguiente es una lista de los elementos en bloque, alguno de ellos los podemos ver como contenedores:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;hgroup&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;...&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Recuerda que no es necesario que memorices cada uno de estos elementos, ya que con la practica lograras identificarlos fácilmente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-inlineblock"&gt;
  &lt;/a&gt;
  ⏸️ display: inline-block
&lt;/h2&gt;

&lt;p&gt;Es una combinación entre los dos tipos de elementos mencionados anteriormente (block e inline), los elementos con el valor &lt;code&gt;inline-block&lt;/code&gt; admiten dimensiones pero todavía son elementos de línea, es decir estarán colocados uno al lado de otro.&lt;/p&gt;

&lt;p&gt;Un dato curioso es que según la documentación oficial de la MDN el elemento HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; es un elemento inline, pero una imagen es como cualquier otro elemento de bloque porque puede contener: &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt; y también puedes modificar su altura y anchura.&lt;/p&gt;

&lt;p&gt;🤯 Para ser precisos una imagen es en realidad un elemento de línea y de bloque al mismo tiempo, en otras palabras: &lt;code&gt;display: inline-block&lt;/code&gt;. ¡Vamos a comprobarlo!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img class="image" src="http://lorempixel.com/200/200/technics/" alt="" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.image {
    width: 300px;
    height: 300px;
    padding: 20px;
    margin: 30px;
    border: 5px solid red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjna0ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpddhnrg3l97psdi2mcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjna0ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpddhnrg3l97psdi2mcp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-none"&gt;
  &lt;/a&gt;
  👻 display: none
&lt;/h2&gt;

&lt;p&gt;Lo que hace el valor &lt;code&gt;none&lt;/code&gt; de la propiedad &lt;code&gt;display&lt;/code&gt; es que oculta un elemento, por lo que no ocupara ningún espacio. El elemento estará oculto y la pagina será desplegada como si el elemento no estuviera allí.&lt;/p&gt;

&lt;p&gt;Este valor se utiliza constantemente cuando en los dispositivos móviles no queremos que haya elementos que tengan que mostrarse al usuario por el espacio que ocupan, pero que en pantallas grandes si tengan que aparecer.&lt;/p&gt;

&lt;p&gt;Hay que tener cuidado con este valor, porque sabemos que si oculta el elemento pero se sigue renderizando, por ejemplo, si en un sitio web al &lt;code&gt;body&lt;/code&gt; le colocáramos la declaración: &lt;code&gt;display: none&lt;/code&gt; no se mostraría nada pero los recursos se seguirían cargando, por lo tanto hay que utilizarlo con cuidado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-flex-y-display-grid"&gt;
  &lt;/a&gt;
  ↕️↔️ display: flex y display: grid
&lt;/h2&gt;

&lt;p&gt;Los últimos valores mas importantes de la propiedad display es &lt;code&gt;grid&lt;/code&gt; y &lt;code&gt;flex&lt;/code&gt;. No voy a profundizar en estos temas porque considero que merecen un articulo propio e incluso un tutorial completo, bien explicado y con muchos ejercicios ya que son temas extensos.&lt;/p&gt;

&lt;p&gt;De manera general podemos decir que el valor &lt;code&gt;flex&lt;/code&gt; se usa para maquetar componentes como por ejemplo, un menú de navegación y &lt;code&gt;grid&lt;/code&gt; se usa para maquetar el layout. Se que estoy generalizando y esto, no es 100% así, porque pueden haber componentes complejos en los que es necesario usar &lt;code&gt;grid&lt;/code&gt; y algunos layouts son simples y otros no, todo depende de lo que estés diseñando.&lt;/p&gt;

&lt;p&gt;De todas maneras comparto una infografía de un gran desarrollador llamado Addy Osmani (Ingeniero en Google Chrome) que se basó en el articulo de Ahmad Shadeed para realizar esta comparación.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4M3CTyd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EaWSLbWUcAESEGu.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBF-1ZJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1053159168197111808/8eipWrau_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "Use Grid for layout, Flexbox for components": &lt;a href="https://t.co/yNDwQFSWdq"&gt;bit.ly/gr-fl&lt;/a&gt; Great tips on how to decide what fits your use-case by &lt;a href="https://twitter.com/shadeed9"&gt;@shadeed9&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:00 AM - 15 Jun 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1272423597550657537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1272423597550657537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1272423597550657537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;No te preocupes, realizare todo un articulo para ver en profundidad flexbox y grid, pero por ahora es necesario que comprendas como funciona la propiedad display.&lt;/p&gt;

&lt;p&gt;Antes de correr, aprende a caminar 🚶‍♀️....🏃‍♀️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  📋 Conclusión
&lt;/h2&gt;

&lt;p&gt;☑️ Todas las etiquetas HTML tienen configuraciones de estilo CSS por defecto, incluso si ninguna es proporcionada por usted.&lt;br&gt;
☑️ Los elementos en HTML usualmente son elementos "en línea" o elementos "en bloque". Pero este comportamiento por defecto puede ser modificado.&lt;br&gt;
☑️ Los elementos en línea no admiten dimensiones (width, height) aunque si admiten margin, padding y border.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursos"&gt;
  &lt;/a&gt;
  🔎Recursos:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout/Normal_Flow"&gt;Flujo normal | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/HTML/Inline_elements"&gt;Elementos en línea | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/HTML/Block-level_elements"&gt;Elementos en bloque | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer🦸🏻‍♀️&lt;br&gt;
Mis redes sociales donde comparto notas de código:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/lupitacode"&gt;▶️Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/lupitacode"&gt;📷Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/lupitacode"&gt;🐦Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/lupitacode"&gt;🔵Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/lupitacode/"&gt;🔲Codepen&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lupitacode.medium.com/"&gt;✍️Medium&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@lupitacode"&gt;🎵Tik Tok&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>spanish</category>
      <category>latam</category>
    </item>
    <item>
      <title>Getting a URL Parameter in Javascript</title>
      <author>Joseph Maurer</author>
      <pubDate>Mon, 31 May 2021 22:39:47 +0000</pubDate>
      <link>https://dev.to/mwrpwr/getting-a-url-parameter-in-javascript-2c10</link>
      <guid>https://dev.to/mwrpwr/getting-a-url-parameter-in-javascript-2c10</guid>
      <description>&lt;p&gt;When programming in Javascript there are times when you might want to know if there were any parameters passed through the URL. In case you aren’t familiar with URL parameters, they are the arguments set after the base URL and the ‘?’. For example let’s look at the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;josephamaurer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;RecentDevPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;PerPage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;'?PerPage=100'&lt;/em&gt; is the first parameter that is passed with this URL. It’s up to your javascript logic to grab this parameter’s value and use it appropriately. So can there be multiple parameters? You betcha! Additional parameters are added with the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;josephamaurer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;RecentDevPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;PerPage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;‘&amp;amp;Page=2’&lt;/em&gt; is the second parameter that is with this URL. At this point you might be wondering what are the limitations of passing arguments like this? Well the obvious one is that you can’t have any spaces. Another is that the ‘#’ character is reserved for jumping to a section of a document. Generally, &lt;a href="https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters"&gt;URL Encoding&lt;/a&gt; is used to deal with this problem and make any text safe to pass in the URL. Internet Explorer (RIP) had a maximum length of &lt;a href="https://support.microsoft.com/en-us/topic/maximum-url-length-is-2-083-characters-in-internet-explorer-174e7c8a-6666-f4e0-6fd6-908b53c12246"&gt;2,083 characters&lt;/a&gt;. Although, the &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-3.2.1"&gt;RFC 2616&lt;/a&gt; spec says that servers need to be able to handle any number of characters, you do risk a web server failing to respond if the request is too long. I highly recommend looking at the &lt;a href="https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/security/url_display_guidelines/url_display_guidelines.md"&gt;Google Chrome guidelines&lt;/a&gt; if you plan to do this on a production project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-forms"&gt;
  &lt;/a&gt;
  Web Forms
&lt;/h2&gt;

&lt;p&gt;The most common use of these query strings within a URL is web forms. When a user hits submit on a form, their responses are posted in the URL for processing by the backend. In this tutorial, we’ll focus on just grabbing values from that URL for processing, but there are plenty of examples of using this on the backend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#url-search-params"&gt;
  &lt;/a&gt;
  URL Search Params
&lt;/h2&gt;

&lt;p&gt;When using javascript to parse the URL, it is easiest to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;URLSearchParams&lt;/a&gt; instead of trying to parse the string yourself. You could use regular expressions to try to do this, but as &lt;a href="https://dev.to/mwrpwr/why-regular-expressions-are-super-powerful-but-a-terrible-coding-decision-m8i"&gt;I wrote earlier&lt;/a&gt; this is a terrible idea. So let’s look at the example below and see how this works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AlkKh4GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvst670jdjucdn1o4ejq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlkKh4GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvst670jdjucdn1o4ejq.png" alt="Code Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, grabbing the params is actually a really straightforward process. You can very easily query to see what objects are present and check if they are null or an actual value first before using them. At the time of writing this, &lt;a href="https://caniuse.com/urlsearchparams"&gt;browser support&lt;/a&gt; is very good and is available to use almost everywhere. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYhBnhX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnaltsulnnbgxm09n0l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYhBnhX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnaltsulnnbgxm09n0l7.png" alt="browser support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;Building on my last video post, you can now pass parameters to my example page to play with the number of posts that it returns.&lt;br&gt;
&lt;a href="https://www.josephamaurer.com/Projects/DevAPI/RecentDevPosts.html?PerPage=3"&gt;Live Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know if you end up having a use for this method and happy coding 😊&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>When Clients start to Estimate</title>
      <author>Neal Burger</author>
      <pubDate>Mon, 31 May 2021 22:27:26 +0000</pubDate>
      <link>https://dev.to/codeandchaos/when-clients-start-to-estimate-36kh</link>
      <guid>https://dev.to/codeandchaos/when-clients-start-to-estimate-36kh</guid>
      <description>&lt;p&gt;You are having an estimation meeting with a special guest - the client. He is there to clarify features and any open questions. But during the meeting whenever the client feels that the estimation is ‘too high’ - he says: “Last time this same type of bug, had only 50% of the story points”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a good response?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-do-not-invite-the-client-to-the-meeting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Do not invite the client to the meeting&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Well, the most obvious first step is not to invite the client to the meeting. If the client is important to define the task, then have clarifying meetings with the client.&lt;/p&gt;

&lt;p&gt;The process of estimating the tickets is an internal developer affair. Only the developers know the codebase and can make any good estimations of how long a task will take.&lt;/p&gt;

&lt;p&gt;They are already dealing with the complexity of creating the software - usually they are not involved in how the client is being billed. It does not help that the client bullies the developers to do the work faster.&lt;/p&gt;

&lt;p&gt;The client does not know anything about how to develop software. That is the reason he hired your team in the first place. He cannot help with the technical complexity - his opinion of how complicated the task is - is irrelevant.&lt;/p&gt;

&lt;p&gt;If it cannot be avoided, invite the client to the Sprint Planning, then he can decide which tasks he wants to spend money on in the next two weeks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-can-justify-the-high-estimate"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. You can justify the high estimate&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this case, the client compares this bug to another ‘similar’ bug.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-client-is-comparing-it-to-a-totally-unrelated-bug"&gt;
  &lt;/a&gt;
  The client is comparing it to a totally unrelated bug
&lt;/h3&gt;

&lt;p&gt;If the client is comparing it with an unrelated bug. Then case closed - the two bugs are not comparable in the first place. They should have different estimations, as they are not related in any way.&lt;/p&gt;

&lt;p&gt;The ticket the client has given is not related to the discussion and must be dismissed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-related-to-the-first-bug-the-client-mention"&gt;
  &lt;/a&gt;
  It is related to the first bug the client mention
&lt;/h3&gt;

&lt;p&gt;If you encountered the same bug for the second time, then the last bugfix was not enough. This would be a warning signal that:&lt;/p&gt;

&lt;p&gt;a) the last time the bug was not fixed (i.e. the last estimate is useless and additionally the fix needs a correction)&lt;/p&gt;

&lt;p&gt;b) there is a deeper problem in the codebase (i.e. the estimate must be higher)&lt;/p&gt;

&lt;p&gt;The original fix needs to be analyzed and the deeper problem with the code needs a fix. This will take more time than the simple fix that was done the first time around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-it-does-not-matter-what-the-estimate-is"&gt;
  &lt;/a&gt;
  3. It does not matter what the estimate is
&lt;/h2&gt;

&lt;p&gt;There is a very big misconception between “estimation” and “commitment”.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;estimate&lt;/strong&gt; is by definition not exact. The higher the uncertainty the larger the range of the estimate is going to be. And that is a good thing. - I will get this done in 5-10days.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;commitment&lt;/strong&gt; is exact: I am going to get this done in 5 days. It is your responsibility to honor your commitment.&lt;/p&gt;

&lt;p&gt;With an estimate, you are in no way bound or required to finish the task in that timeframe. If I estimated it is going to take 5-10 days, and the work took 20days. Well then I suck at estimating - but it does not matter, it was just a made-up number.&lt;/p&gt;

&lt;p&gt;However, if I committed myself - I am going to do it in 10days. And I miss that deadline I have a big problem. It was unprofessional to commit to something that I could not do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clarify-this-with-your-client"&gt;
  &lt;/a&gt;
  Clarify this with your client
&lt;/h3&gt;

&lt;p&gt;You should make your client aware that it does not matter what the estimate is. Reducing the estimate, will not change how much time is needed to complete the task. The time needed to complete the task is (hopefully) going to be in the estimation range. In short, his bill will be the same, no matter what the estimate is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-improve-your-estimations"&gt;
  &lt;/a&gt;
  3. Improve your estimations
&lt;/h2&gt;

&lt;p&gt;Estimation methods like &lt;a href="https://en.wikipedia.org/wiki/Planning_poker"&gt;Planning Poker&lt;/a&gt; have a step called ‘consensus’ where all devs agree upon a specific number. It appears as if the team then comes up with an ‘exact’ number.&lt;/p&gt;

&lt;p&gt;Let’s take an example of how this can go wrong:&lt;/p&gt;

&lt;p&gt;The devs estimated a ticket. The result? 1x3 points, 1x5 points, and 1x8 points. - At this moment nobody looked at the code or did any further analysis, they only read the ticket description. Everybody invented numbers out of thin air. The consensus for the task will be 5 points. However when reviewing the task after the implementation. It was more complicated than expected and it took the same time as a 12 points ticket.&lt;/p&gt;

&lt;p&gt;When the client sees the result of your estimation vs actual cost he is going to be not very happy.&lt;/p&gt;

&lt;p&gt;The consensus estimation is useless. A much better approach is to write down your estimate in a range 3-8 points.&lt;/p&gt;

&lt;p&gt;Then you can add a second step called commitment. The developer makes a more precise estimation when he starts to implement the ticket. He knows exactly how the codebase looks like and he can do a personalized estimation of how many days it will take him to do the task. (Every developer has a different skillset, thus knows best what his abilities are and when he believes the task will be completed)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-you-are-the-expert"&gt;
  &lt;/a&gt;
  4. You are the expert
&lt;/h2&gt;

&lt;p&gt;The client hired you because you are a professional developer. Something went wrong with this team. The client lost his trust in the skills and abilities of your team. Thus he tries to involve himself more.&lt;/p&gt;

&lt;p&gt;You have to show the client - that you are the expert. The client cannot estimate tasks for you. He is overstepping his competencies and boundaries.&lt;/p&gt;

&lt;p&gt;You must review your estimates to learn how to estimate better in the future. Additionally, you can improve your estimates by doing a code analysis before estimating. And of course, improve your processes (more tests? more manual tests?) to avoid bugs before the client sees them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-do-not-estimate-bugs"&gt;
  &lt;/a&gt;
  5. Do not estimate bugs
&lt;/h2&gt;

&lt;p&gt;Bugs do not need to be estimated. Due to the nature of bugs, any estimation is useless. The developers did not intentionally put a bug in the software. Something unexpected happened, something the developers did not think about in the first place. They need to analyze the situation and apply a fix. Debugging can take hours or mere minutes to figure out what the exact problem is.&lt;/p&gt;

&lt;p&gt;It is more important to set the right priorities for the bugs. So it’s clear how high the impact of a bug is. In any case, the developers should fix the bug as fast as possible.&lt;/p&gt;

&lt;p&gt;If the ‘bugfix’ mutates into a full new feature. Then do not call it a bug - it’s a new feature or a technical improvement. That is a ticket you can estimate again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You have to communicate with your client. In this scenario the client probably just had a high priority bug that needed to be fixed ASAP, and he did not have a lot of money to fix it.&lt;/p&gt;

&lt;p&gt;You have to work together with your client. That means setting boundaries. Which meetings the client is allowed to attend and where his competencies end. This makes the communication easier on both sides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How would you handle this scenario?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>development</category>
      <category>discuss</category>
      <category>devjournal</category>
      <category>agile</category>
    </item>
    <item>
      <title>JS monorepos in prod 1: project initialization</title>
      <author>Worms David</author>
      <pubDate>Mon, 31 May 2021 21:01:28 +0000</pubDate>
      <link>https://dev.to/adaltas/js-monorepos-in-prod-1-project-initialization-129c</link>
      <guid>https://dev.to/adaltas/js-monorepos-in-prod-1-project-initialization-129c</guid>
      <description>&lt;p&gt;Every project journey begins with the step of initialization. When your overall project is composed of multiple projects, it is tempting to create one Git repository per project. In Node.js, a project translates to a package. However, managing too many closely related repositories is confusing and time-consuming.&lt;/p&gt;

&lt;p&gt;Placing multiple projects inside a single Git repository and using a tool like &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt; to facilitate their management worth the effort. This architecture is called a monorepo. It simplifies the versioning and publishing of the components as well as their manipulation and development.&lt;/p&gt;

&lt;p&gt;At Adaltas, we have been developing and maintaining several monorepos for a couple of years. This article is the first one from a serie of five in which we share our best practices. It covers the project initialization using Yarn and Lerna:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://www.adaltas.com/en/2021/01/05/js-monorepos-project-initialization/"&gt;project initialization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://www.adaltas.com/en/2021/01/11/js-monorepos-versioning-publishing/"&gt;versioning and publishing strategies&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href="https://www.adaltas.com/en/2021/02/02/js-monorepos-commits-changelog/"&gt;commit enforcement and changelog generation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Part 4: &lt;a href="https://www.adaltas.com/en/2021/02/25/js-monorepos-unit-testing/"&gt;unit testing with Mocha and Should.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Part 5: &lt;a href="https://www.adaltas.com/en/2021/05/21/js-monorepos-merging-git-repositories/"&gt;merging Git repositories and preserve commit history&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Part 6: CI/CD, continuous testing and deployment with Travis CI&lt;/li&gt;
&lt;li&gt;Part 7: CI/CD, continuous testing and deployment with GitHub Actions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starting-a-new-project"&gt;
  &lt;/a&gt;
  Starting a new project
&lt;/h2&gt;

&lt;p&gt;The idea for an example project comes from our past work. Over the years, we have accumulated several &lt;a href="https://www.gatsbyjs.com/docs/what-is-a-plugin/"&gt;Gatsby plugins&lt;/a&gt; that have never been published and shared with the open-source community. Those plugins are copy/pasted from one Gatsby website to another, sometimes with bug fixes and enhancements. Since we have multiple copies more or less up-to-dates between each other, older websites don't benefit from those changes. The idea is to centralize the development of those plugins inside a single repository and share them by publishing them on NPM.&lt;/p&gt;

&lt;p&gt;A new project is started from scratch. It is called &lt;code&gt;remark-gatsby-plugins&lt;/code&gt; and is hosted on &lt;a href="https://github.com/adaltas/remark-gatsby-plugins"&gt;GitHub&lt;/a&gt;. This repository is a container for multiple packages that are plugins for &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; and &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/"&gt;&lt;code&gt;gatsby-transformer-remark&lt;/code&gt; plugin&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Repository initialization&lt;/span&gt;
&lt;span class="nb"&gt;mkdir &lt;/span&gt;remark-gatsby-plugins
&lt;span class="nb"&gt;cd &lt;/span&gt;remark-gatsby-plugins
git init
&lt;span class="c"&gt;# Create and commit a new file&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"# remark and Gatsby plugins by Adaltas"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; README.md
git add README.md
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"docs: project creating"&lt;/span&gt;
&lt;span class="c"&gt;# Define the GitHub remote server&lt;/span&gt;
git remote add origin https://github.com/adaltas/remark-gatsby-plugins.git
&lt;span class="c"&gt;# Push commits to remote&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin master
&lt;span class="c"&gt;# Next push commands will simply be `git push`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The commit message is prefixed by &lt;code&gt;docs&lt;/code&gt; and it is not by hazard. This aspect is covered later by the Conventional Commits chapter in the following article &lt;em&gt;commit enforcement and changelog generation&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ignoring-files-from-git"&gt;
  &lt;/a&gt;
  Ignoring files from Git
&lt;/h2&gt;

&lt;p&gt;There are two strategies to choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To selectively define the path to be ignored.&lt;/li&gt;
&lt;li&gt;To define global ignore rules and selectively exclude path from those rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I usually choose the latest strategy to ignore all hidden files by default. I start with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;CONTENT&lt;/span&gt;&lt;span class="sh"&gt; &amp;gt; .gitignore
.*
node_modules
!.gitignore
&lt;/span&gt;&lt;span class="no"&gt;CONTENT
&lt;/span&gt;git add .gitignore
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'build: ignore hidden files and node modules'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#project-initialization"&gt;
  &lt;/a&gt;
  Project initialization
&lt;/h2&gt;

&lt;p&gt;I am personally using Yarn instead of NPM. Both package managers are perfectly fine, but I had issues in the past using NPM with monorepos and links. In this setup, Yarn also seems to be the tool of choice across the community. Its native support for monorepos, called workspaces, works well with &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To initialize a package with &lt;code&gt;yarn&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init
yarn init v1.22.5
question name &lt;span class="o"&gt;(&lt;/span&gt;remark-gatsby-plugins&lt;span class="o"&gt;)&lt;/span&gt;: 
question version &lt;span class="o"&gt;(&lt;/span&gt;1.0.0&lt;span class="o"&gt;)&lt;/span&gt;: 0.0.0
question description: A selection of remark and Gatsby plugins developed and used by Adaltas
question entry point &lt;span class="o"&gt;(&lt;/span&gt;index.js&lt;span class="o"&gt;)&lt;/span&gt;: 
question repository url &lt;span class="o"&gt;(&lt;/span&gt;https://github.com/adaltas/remark-gatsby-plugins.git&lt;span class="o"&gt;)&lt;/span&gt;: 
question author &lt;span class="o"&gt;(&lt;/span&gt;David Worms &amp;lt;david@adaltas.com&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;: 
question license &lt;span class="o"&gt;(&lt;/span&gt;MIT&lt;span class="o"&gt;)&lt;/span&gt;: 
question private: 
git add package.json
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"build: package initialization"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It created a &lt;code&gt;package.json&lt;/code&gt; file and committed it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monorepo-with-lerna"&gt;
  &lt;/a&gt;
  Monorepo with Lerna
&lt;/h2&gt;

&lt;p&gt;The project contains a &lt;code&gt;package.json&lt;/code&gt; file. Following the Node.js terminology, the project is now a Node.js package. However, it will not be published on NPM, the official Node.js repository. Only the packages inside this package will be published.&lt;/p&gt;

&lt;p&gt;Instead of creating a Git repository for each package, it is easier to maintain a single repository storing multiple Node.js packages. Since multiple packages are managed inside the same repository, we call this a monorepo.&lt;/p&gt;

&lt;p&gt;Multiple tools exist to manage monorepos. &lt;a href="https://github.com/lerna/lerna"&gt;Lerna&lt;/a&gt; is a popular choice but not the only one. At Adaltas, we have been using it for some time and we continue for this article.&lt;/p&gt;

&lt;p&gt;Besides having just one Git repository to manage, there are additional advantages to legitimate the usage of monorepos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When multiple packages are developed, many duplicated dependencies are declared inside the &lt;code&gt;package.json&lt;/code&gt; file. Declaring the dependencies inside the top-most project managed with Lerna reduces space and time. It is called &lt;a href="https://github.com/lerna/lerna/blob/main/doc/hoist.md"&gt;"hoisting" dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When packages depend on each other's, changes in one package often need to be instantly reflected in the other packages. A single feature may span multiple packages. Publishing the changes of the dependent packages is not possible, it takes too much time and there could be too many changes not justifying a release. The solution is to link the dependencies by creating symbolic links. For large projects, this is a tedious task. A tool like Lerna automates the creation of those links.&lt;/li&gt;
&lt;li&gt;Having one central location federates the execution of your commands. For example, you install all the dependencies of all your packages with a single command, &lt;code&gt;yarn install&lt;/code&gt;. For testing, the command &lt;code&gt;lerna test&lt;/code&gt; runs all your tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, Lerna helps us to manage our versions with respect to the &lt;a href="https://semver.org/"&gt;Semantic Versioning (SemVer)&lt;/a&gt; specification.&lt;/p&gt;

&lt;p&gt;The command to initialize Lerna is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add lerna
yarn lerna init &lt;span class="nt"&gt;--independent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--independent&lt;/code&gt; flag tells Lerna to manage the version of each package independently. Without it, Lerna aligns the versions of the packages it manages.&lt;/p&gt;

&lt;p&gt;These commands add the &lt;code&gt;lerna&lt;/code&gt; dependency to the &lt;code&gt;package.json&lt;/code&gt; and creates a new &lt;code&gt;lerna.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"independent"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we commit our pending changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add lerna.json package.json
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'build: lerna initialization'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#publishing-or-ignoring-lock-files"&gt;
  &lt;/a&gt;
  Publishing or ignoring lock files
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;yarn add&lt;/code&gt; command has generated a &lt;code&gt;yarn.lock&lt;/code&gt; file. With NPM, the file would have been &lt;code&gt;package-lock.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My approach is to publish lock files for my final applications. I don't publish the lock files for the packages which are meant to be used as dependencies. Some people agree with my opinion. However, the Yarn documentation states the contrary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All &lt;code&gt;yarn.lock&lt;/code&gt; files should be checked into source control (e.g. git or mercurial). This allows Yarn to install the same exact dependency tree across all machines, whether it be your coworker’s laptop or a CI server.&lt;br&gt;&lt;br&gt;
  Framework and library authors should also check &lt;code&gt;yarn.lock&lt;/code&gt; into source control. Don’t worry about publishing the &lt;code&gt;yarn.lock&lt;/code&gt; file as it won’t have any effect on users of the library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am perplexed. If it is not used, then why committing a huge file. Anyway, let's ignore them for now. The end result is that those lock files will be ignored from Git:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'package-lock.json'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'yarn.lock'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
git add .gitignore
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"build: ignore lock files"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#yarn-integration"&gt;
  &lt;/a&gt;
  Yarn integration
&lt;/h2&gt;

&lt;p&gt;Since we are using Yarn instead of NPM, add these properties to &lt;code&gt;lerna.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yarn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useWorkspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useWorkspaces&lt;/code&gt; property tells Lerna to not use &lt;code&gt;lerna.json#packages&lt;/code&gt; but instead to look for &lt;code&gt;packages.json#workspaces&lt;/code&gt;. According to the &lt;a href="https://github.com/lerna/lerna/tree/main/commands/bootstrap#--use-workspaces"&gt;Lerna Bootstrap&lt;/a&gt; documentation, both are similar except that Yarn doesn't support recursive globs &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Update Lerna to remove the &lt;code&gt;packages&lt;/code&gt; property from &lt;code&gt;lerna.json&lt;/code&gt;, it now contains only:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yarn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useWorkspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"independent"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;packages.json&lt;/code&gt; file to contain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;private&lt;/code&gt; property is required. Any attempt to register a new dependency without it raises an error from Yarn in the form of "Workspaces can only be enabled in private projects". Note, it was possible to define the project as &lt;code&gt;private&lt;/code&gt; when we were initializing it with &lt;code&gt;yarn init&lt;/code&gt;. Now, that our project is a monorepo, it is a good time to mark the root package as &lt;code&gt;private&lt;/code&gt; since it will not be published on NPM. Only the packages inside it are for publishing.&lt;/p&gt;

&lt;p&gt;Note, executing &lt;code&gt;lerna init&lt;/code&gt; now will sync the &lt;code&gt;packages.json#workspaces&lt;/code&gt; back inside &lt;code&gt;lerna.json#packages&lt;/code&gt; with the new values.&lt;/p&gt;

&lt;p&gt;Now, save the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'build: activate yarn usage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not familiar with Git, the &lt;code&gt;-a&lt;/code&gt; flag adds all the modified files to the commit. New files are disregarded.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-location"&gt;
  &lt;/a&gt;
  Package location
&lt;/h2&gt;

&lt;p&gt;By default, Lerna manages packages inside the "packages" folder. The majority of projects using Lerna uses this convention. It is a good idea to respect it. But in our case, we have two types of plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Gatsby plugins&lt;/li&gt;
&lt;li&gt;The Gatsby Remark plugins which extend the &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, I modify the &lt;code&gt;workspaces&lt;/code&gt; array in the &lt;code&gt;packages.json&lt;/code&gt; file to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"gatsby/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"gatsby-remark/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The packages' location is saved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'build: workspaces declaration'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#packages-creation"&gt;
  &lt;/a&gt;
  Packages creation
&lt;/h2&gt;

&lt;p&gt;Let's import two packages for the sake of testing. They are currently located inside my &lt;code&gt;/tmp&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; /tmp/gatsby-caddy-redirects-conf
total 16
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt;@ 1 david  staff   981B Nov 26 21:20 gatsby-node.js
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt;@ 1 david  staff   239B Nov 26 21:19 package.json
&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; /tmp/gatsby-remark-title-to-frontmatter
total 16
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt;  1 david  staff   1.2K Nov 26 11:35 index.js
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt;@ 1 david  staff   309B Nov 26 21:14 package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To import the packages and commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;gatsby gatsby-remark
&lt;span class="c"&gt;# Import first plugin&lt;/span&gt;
&lt;span class="nb"&gt;mv&lt;/span&gt; /tmp/gatsby-caddy-redirects-conf gatsby/caddy-redirects-conf
git add gatsby/caddy-redirects-conf
&lt;span class="c"&gt;# Import second plugin&lt;/span&gt;
&lt;span class="nb"&gt;mv&lt;/span&gt; /tmp/gatsby-remark-title-to-frontmatter gatsby-remark/title-to-frontmatter
git add gatsby-remark/title-to-frontmatter
&lt;span class="c"&gt;# Commit the changes&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'build: import project'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cheat-sheet"&gt;
  &lt;/a&gt;
  Cheat sheet
&lt;/h2&gt;

&lt;p&gt;Package initialization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Monorepo initialization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add lerna
yarn lerna init
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn lerna init &lt;span class="nt"&gt;--independent&lt;/span&gt;
&lt;span class="c"&gt;# then&lt;/span&gt;
git add lerna.json package.json
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'build: lerna initialization'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ignore lock file (optional):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'package-lock.json'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'yarn.lock'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
git add .gitignore
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"build: ignore lock files"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yarn integration (unless using NPM), remove the &lt;code&gt;package&lt;/code&gt; property from &lt;code&gt;lerna.json&lt;/code&gt; and:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yarn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useWorkspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;packages.json&lt;/code&gt; file to contain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next"&gt;
  &lt;/a&gt;
  Next
&lt;/h2&gt;

&lt;p&gt;The following article cover &lt;em&gt;the versioning and publishing strategies&lt;/em&gt; of packages with Lerna.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>node</category>
      <category>javascript</category>
      <category>git</category>
    </item>
    <item>
      <title>Separating logic in your Redux Toolkit application</title>
      <author>Chinwike Maduabuchi</author>
      <pubDate>Mon, 31 May 2021 20:56:19 +0000</pubDate>
      <link>https://dev.to/chinwike/separating-logic-in-your-redux-toolkit-application-h7i</link>
      <guid>https://dev.to/chinwike/separating-logic-in-your-redux-toolkit-application-h7i</guid>
      <description>&lt;p&gt;Redux Toolkit (which onwards, I will refer to as RTK) is a massive improvement to the Redux ecosystem. RTK changes the way we approach writing Redux logic and is well known for cutting off all the boilerplate code Redux requires.&lt;/p&gt;

&lt;p&gt;I’ve enjoyed playing around with this library for the last couple of days, but recently, I found myself in an unpleasant situation. All my Redux logic, including asynchronous calls to APIs, was packed down into one &lt;code&gt;slice&lt;/code&gt; file (more about slices in a bit). &lt;/p&gt;

&lt;p&gt;Albeit this being the way RTK suggests we structure our slices, the file starts to become hard to navigate as the application grows and eventually becomes an eyesore to look at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;This post isn’t an introductory guide on how to use RTK or Redux in general, however, I’ve done my bit to explain the little nuances that make RTK what it is.&lt;/p&gt;

&lt;p&gt;A little understanding of state management in React is enough to help you wring some value from this post. You can always visit the &lt;a href="https://redux-toolkit.js.org/introduction/getting-started"&gt;docs&lt;/a&gt; to expand your knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slices"&gt;
  &lt;/a&gt;
  SLICES
&lt;/h2&gt;

&lt;p&gt;The term slice will be an unfamiliar word for the uninitiated so I’ll briefly explain what it is. In RTK, a slice is a function that holds the state eventually passed to your Redux store. In a slice, reducer functions used to manipulate state are defined and exported to be made accessible by any component in your app.&lt;/p&gt;

&lt;p&gt;A slice contains the following data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the name of the slice — so it can be referenced in the Redux store&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;initialState&lt;/code&gt; of the reducer&lt;/li&gt;
&lt;li&gt;reducer functions used to make changes to the state&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;extraReducers&lt;/code&gt; argument responsible for responding to external requests (like &lt;code&gt;fetchPosts&lt;/code&gt; below)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic overview of a slice&lt;/p&gt;

&lt;p&gt;In a nutshell, the slice file is the powerhouse of an RTK application. Let’s move on to create a new React application with RTK included by running the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On opening your app in a code editor, you’ll notice that this template has a slightly different folder structure compared to that of create-react-app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afpSs5ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622193005204_RTK%2Bdefault%2Bfolder%2Bstructure.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afpSs5ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622193005204_RTK%2Bdefault%2Bfolder%2Bstructure.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference is the new &lt;code&gt;app&lt;/code&gt; folder which contains the Redux store and the &lt;code&gt;features&lt;/code&gt; folder which holds all the features of the app.&lt;/p&gt;

&lt;p&gt;Each subfolder in the &lt;code&gt;features&lt;/code&gt; folder represents a specific functionality in the RTK application which houses the slice file, the component which makes use of the slice and any other files you may include here e.g. styling files. &lt;/p&gt;

&lt;p&gt;This generated template also includes a sample &lt;code&gt;counter&lt;/code&gt; component which is meant to show you the basics of setting up a functional Redux store with RTK and how to dispatch actions to this store from components.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; to preview this component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUf2PYcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1621850083024_Redux%2Bsample%2Bcounter%2Bcomponent.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUf2PYcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1621850083024_Redux%2Bsample%2Bcounter%2Bcomponent.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the way RTK has structured the app, each feature is completely isolated making it easy to locate newly added features in one directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  THE PROBLEM
&lt;/h2&gt;

&lt;p&gt;Let’s examine &lt;code&gt;counterSlice.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchCount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./counterAPI&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// The function below is called a thunk and allows us to perform async logic. It&lt;/span&gt;
&lt;span class="c1"&gt;// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This&lt;/span&gt;
&lt;span class="c1"&gt;// will call the thunk with the `dispatch` function as the first argument. Async&lt;/span&gt;
&lt;span class="c1"&gt;// code can then be executed and other actions can be dispatched. Thunks are&lt;/span&gt;
&lt;span class="c1"&gt;// typically used to make async requests.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/fetchCount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The `reducers` field lets us define reducers and generate associated actions&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Redux Toolkit allows us to write "mutating" logic in reducers. It&lt;/span&gt;
      &lt;span class="c1"&gt;// doesn't actually mutate the state because it uses the Immer library,&lt;/span&gt;
      &lt;span class="c1"&gt;// which detects changes to a "draft state" and produces a brand new&lt;/span&gt;
      &lt;span class="c1"&gt;// immutable state based off those changes&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Use the PayloadAction type to declare the contents of `action.payload`&lt;/span&gt;
    &lt;span class="na"&gt;incrementByAmount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// The `extraReducers` field lets the slice handle actions defined elsewhere,&lt;/span&gt;
  &lt;span class="c1"&gt;// including actions generated by createAsyncThunk or in other slices.&lt;/span&gt;
  &lt;span class="na"&gt;extraReducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;builder&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementAsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementAsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementByAmount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// The function below is called a selector and allows us to select a value from&lt;/span&gt;
&lt;span class="c1"&gt;// the state. Selectors can also be defined inline where they're used instead of&lt;/span&gt;
&lt;span class="c1"&gt;// in the slice file. For example: `useSelector((state: RootState) =&amp;gt; state.counter.value)`&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I previously mentioned, you will notice that all the logic needed to handle the state for the counter component is consolidated into this single file. The asynchronous calls made using &lt;code&gt;createAsyncThunk&lt;/code&gt;, the &lt;code&gt;createSlice&lt;/code&gt; function and the &lt;code&gt;extraReducers&lt;/code&gt; property are all present.&lt;/p&gt;

&lt;p&gt;As your application grows, you will continue to make more asynchronous requests to your backend API and in turn, have to handle all the possible states of that request to ensure that nothing unexpected breaks your application.&lt;/p&gt;

&lt;p&gt;In RTK, the three possible states of a request are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pending&lt;/li&gt;
&lt;li&gt;fulfilled and&lt;/li&gt;
&lt;li&gt;rejected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that handling one of these cases takes, at least, 3 lines of code. So that’s a minimum of 9 lines for one asynchronous request.&lt;/p&gt;

&lt;p&gt;Imagine how difficult it would be to navigate the file when you have about 10+ asynchronous requests. It’s a nightmare I don’t even want to have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  THE SOLUTION
&lt;/h2&gt;

&lt;p&gt;The best way to improve the readability of your slice files would be to delegate all your asynchronous requests to a separate file and import them into the slice file to handle each state of the request. &lt;/p&gt;

&lt;p&gt;I like to name this file using ‘thunk’ as a suffix in the same way slice files use 'slice’ as their suffix.&lt;/p&gt;

&lt;p&gt;To demonstrate this, I’ve added a new feature to the app which interacts with the &lt;a href="https://docs.github.com/en/rest"&gt;GitHub API&lt;/a&gt;. Below is the current structure&lt;/p&gt;

&lt;p&gt;features&lt;br&gt;
|_counter&lt;br&gt;
|_github &lt;br&gt;
  |_githubSlice.js&lt;br&gt;
  |_githubThunk.js&lt;/p&gt;

&lt;p&gt;&lt;em&gt;githubThunk.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// API keys&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;githubClientId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_CLIENT_ID&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;githubClientSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_CLIENT_SECRET&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github/searchUsers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.github.com/search/users?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
      client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
      client_secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientSecret&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github/getUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;? 
      client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
      client-secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientSecret&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserRepos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAsyncThunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github/getUserRepos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos?per_page=5&amp;amp;sort=created:asc&amp;amp;
    client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;
    client-secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubClientSecret&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info on how to use &lt;code&gt;createAsyncThunk&lt;/code&gt;, reference the &lt;a href="https://redux-toolkit.js.org/api/createAsyncThunk"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These asynchronous requests are then imported into the slice file and handled in &lt;code&gt;extraReducers&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;githubSlice.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUserRepos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./githubThunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;githubSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;clearUsers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extraReducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// searchUsers&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// getUser&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// getUserRepos&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUserRepos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUserRepos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fulfilled&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getUserRepos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rejected&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;clearUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;githubSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;githubSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I admit the extraReducers property still looks a bit clunky but we’re better off doing it this way. Fortunately, this is similar to the way logic is separated in a normal Redux application with the action and reducer folders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-slice-to-the-store"&gt;
  &lt;/a&gt;
  ADDING SLICE TO THE STORE
&lt;/h2&gt;

&lt;p&gt;Every slice you create must be added to your Redux store so you can gain access to its contents. You can achieve this by adding the github slice to &lt;code&gt;App/store.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../features/counter/counterSlice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;githubReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./features/github/githubSlice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;githubReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to take into consideration is how requests are handled in extraReducers. In the sample slice file, &lt;code&gt;counterSlice&lt;/code&gt;, you’ll notice a different syntax is used to handle the requests.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;githubSlice&lt;/code&gt;, I’ve used the map-object notation in &lt;code&gt;extraReducers&lt;/code&gt; to handle my requests mainly because this approach looks tidier and is easier to write.&lt;/p&gt;

&lt;p&gt;The recommended way to handle requests is the builder callback as shown in the sample &lt;code&gt;counterSlice.js&lt;/code&gt; file. This approach is recommended as it has better TypeScript support (and thus, IDE autocomplete even for JavaScript users). This builder notation is also the only way to add matcher reducers and default case reducers to your slice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mutability-and-immutability"&gt;
  &lt;/a&gt;
  MUTABILITY AND IMMUTABILITY
&lt;/h2&gt;

&lt;p&gt;At this point, you may have noticed the contrast in the way state is being modified in RTK compared to how it's done in a normal Redux app or React’s Context API.   &lt;/p&gt;

&lt;p&gt;RTK lets you write simpler immutable update logic using "mutating" syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// RTK&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;

&lt;span class="c1"&gt;// Redux&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;RTK doesn’t mutate the state because it uses the &lt;a href="https://github.com/immerjs/immer"&gt;Immer library&lt;/a&gt; internally to ensure your state isn’t mutated. Immer detects changes to a “draft state” and produces a brand new immutable state based on your changes.&lt;/p&gt;

&lt;p&gt;With this, we can avoid the traditional method of making a copy of the state first before modifying that copy to add new data. Learn more about writing immutable code with Immer &lt;a href="https://redux-toolkit.js.org/usage/immer-reducers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dispatching-actions-in-components"&gt;
  &lt;/a&gt;
  DISPATCHING ACTIONS IN COMPONENTS
&lt;/h2&gt;

&lt;p&gt;With the aid of two important hooks; &lt;code&gt;useSelector&lt;/code&gt; and &lt;code&gt;useDispatch&lt;/code&gt; from another library called &lt;code&gt;react-redux&lt;/code&gt;, you will be able to dispatch the actions you’ve created in your slice file from any component.&lt;/p&gt;

&lt;p&gt;Install react-redux with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can make use of the &lt;code&gt;useDispatch&lt;/code&gt; hook to dispatch actions to the store&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Search.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchUsers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../redux/features/github/githubThunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Search Users...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the request is fulfilled, your Redux store gets populated with data&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-zr99Lk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622199836943_populated%2Bredux%2Bstore.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-zr99Lk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_4ECA4CB2EB28A6EA76B8AB93C85C38D76BE8CB04C97DF7856089D49E3BEADA23_1622199836943_populated%2Bredux%2Bstore.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;Redux Toolkit is undeniably an awesome library. With all the measures they took and how simple it is to use, it shows how focused it is on developer experience and I honestly believe RTK should be the only way Redux is written. &lt;/p&gt;

&lt;p&gt;RTK also hasn’t stopped here. Their team has gone further to make RTK Query, a library built to facilitate caching and fetching data in Redux applications.  It's only a matter of time before RTK becomes the status quo for writing Redux.&lt;/p&gt;

&lt;p&gt;What do you think about this approach and RTK in general? I’d be happy to receive some feedback! 😄&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learning from React - part 3</title>
      <author>Costin Manda</author>
      <pubDate>Mon, 31 May 2021 20:32:49 +0000</pubDate>
      <link>https://dev.to/costinmanda/learning-from-react-part-3-3dc4</link>
      <guid>https://dev.to/costinmanda/learning-from-react-part-3-3dc4</guid>
      <description>&lt;p&gt;Original post at: &lt;a href="https://siderite.dev/blog/learning-from-react---part-3/"&gt;https://siderite.dev/blog/learning-from-react---part-3/&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Learning from React series:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/blog/learning-from-react---part-1/"&gt;Part 1&lt;/a&gt; - why examining React is useful even if you won't end up using it&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/blog/learning-from-react---part-2/"&gt;Part 2&lt;/a&gt; - what Facebook wanted to do with React and how to get a grasp on it&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/blog/learning-from-react---part-3/"&gt;Part 3&lt;/a&gt; (this one) - what is Reactive Programming all about?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The name React is already declaring that it is used in &lt;a href="https://en.wikipedia.org/wiki/Reactive_programming"&gt;reactive programming&lt;/a&gt;, but what is that? Wikipedia is defining it as "&lt;em&gt;a declarative programming paradigm concerned with data streams and the propagation of change&lt;/em&gt;". It expands on that to say that it declares the relationship between elements and updates them when either change. You can easily imagine a graph of elements magically updating as any of them changes. However, the implementation details of that magic matter.&lt;/p&gt;

&lt;p&gt;In 2011 Microsoft revealed a free .Net library called &lt;a href="https://en.wikipedia.org/wiki/ReactiveX"&gt;Reactive Extensions&lt;/a&gt;, or ReactiveX or RX. It was based on a &lt;a href="https://channel9.msdn.com/Blogs/Charles/Erik-Meijer-Rx-in-15-Minutes"&gt;very interesting observation&lt;/a&gt; that the observer/observable patterns are the mirror images of iterator/iterable. When the iterator moves through an iterable, the observer reacts to events in the observable; one is imperative, the other reactive. The library was so popular that it was &lt;a href="http://reactivex.io/"&gt;immediately adopted&lt;/a&gt; for a bunch of programming languages, including Javascript. It also allowed for operations traditionally used for arrays and collections to work with a similar syntax on observables. This is a great example of reactive programming because instead of deciding when to perform a data access (and having to check if it is possible and everything is in range and so on), the code would just wait for something to happen, for an event that provided data, then act on the data.&lt;/p&gt;

&lt;p&gt;One might argue that &lt;a href="https://en.wikipedia.org/wiki/Verilog"&gt;Verilog&lt;/a&gt;, a hardware description language, is also reactive, as it is based on actions being performed on certain events and it even uses non-blocking assignments, which are like declarations of state change which happen at the same time. Reminds me of the way React is implementing state management.&lt;/p&gt;

&lt;p&gt;Of course, reactive programming is also modern UI and when I say modern, I mean everything in the last twenty years. Code gets executed when elements in the user interface change state: on click, on change, on mouse move, on key press etc. That is why, the developers at Facebook argue, browser based UI programming should be reactive at the core. This is not new, it's something you might even be already very familiar with in other contexts. Code that is triggered by events is also called &lt;a href="https://en.wikipedia.org/wiki/Event-driven_programming"&gt;event-driven programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But at the same time, others also claim their software is reactive. &lt;a href="https://en.wikipedia.org/wiki/Microservices"&gt;Microservices&lt;/a&gt; are now very fashionable. The concept revolves around organizing your product into completely independent modules that only have one external responsibility, which then one wires together via some sort of orchestrator. The biggest advantage of this is obviously separation of concerns, a classic divide and conquer strategy generalized over all software, but also the fact that you can independently test and deploy each microservice. You don't even have to shut down running ones or you can start multiple instances, perhaps with multiple versions and in different locations. This is also &lt;a href="https://en.wikipedia.org/wiki/Distributed_computing"&gt;distributed programming&lt;/a&gt;. The way the communication between microservices is done is usually via some sort of message queue, like Rabbit MQ, but I am working on a really old software, written like 15 years ago, which uses IBM MQ to communicate between different portions of the software - let's call them macroservices :) Well, this is supposed to be reactive programming, too, because the microservices are reacting to the messages arriving on the queue and/or sent from others.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern"&gt;observer pattern&lt;/a&gt; is old, it's one of the patterns in the original design patterns book &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;, which started the software design pattern craze which rages on even now. Anybody who ever used it extensively in their software can (and many do) claim that they did reactive programming. Then there is something called the &lt;a href="https://en.wikipedia.org/wiki/Actor_model"&gt;actor model&lt;/a&gt; (which will probably confuse your Google if you search for it), which is actually a mathematical concept and originated in 1973! Implementations of actors are eerily similar to the microservices concept from above.&lt;/p&gt;

&lt;p&gt;And speaking of events, there is another pattern that is focusing on declaring the flow of changes from a given state, given an event. It's called a &lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine"&gt;state machine&lt;/a&gt;. It also boasts separation of concerns because you only care about what happens in any state in case of an event. You can visualize all the possible flows in a state machine, too, as names arrows from any state to another, given that such a transition is defined. The implementation of the state machine engine is irrelevant as long as it enables these state transitions as defined by the developer. &lt;/p&gt;

&lt;p&gt;Everything above, and probably some other concepts that are named differently but kind of mean the same thing, is reactive programming. Let me give you another example: a method or a software function. Can one say it is reactive? After all, it only executes code when you call it! Couldn't we say that the method reacts to an event that contains the parameters the method needs? What about Javascript, which is designed to be single threaded and where each piece of code is executed based on a queue of operations? Isn't it a reactive programming language using an event bus to determine which actions to perform?&lt;/p&gt;

&lt;p&gt;And that's the rub. &lt;strong&gt;The concept of reactivity is subjective and generally irrelevant. The only thing that changes and matters is the implementation of the event transport mechanism and the handling of state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a traditional imperative program we take for granted that the execution of methods will be at the moment of the call and that all methods on that thread will be executed one after the other and that setting a value in memory is atomic and can be read immediately after by any other piece of code and you can even lock that value so it is only read by one entity at a time. Now imagine that you are writing the same program, only we can't make the assumptions above. Calling methods can result in their code getting executed at an arbitrary time or maybe not at all. Whatever you change in a method is only available to that method and there is no way for another method to read the values from another. The result? Your code will take a lot of care to maintain state locally and will start to look more like a state machine, modelling transitions rather than synchronous flows. The order of operations will also be ensured by consuming and emitting the right sort of events. Permanent and/or shared storage will become the responsibility of some of the modules and the idea of "setting data" will become awkward. Keeping these modules in sync will become the greatest hurdle.&lt;/p&gt;

&lt;p&gt;That's all it is! By eliminating assumptions about how your code is executed, the result is something more robust, more generic, more compartmentalized. Is it the golden hammer that will solve all problems? Of course it isn't. We've seen how the concepts at the core of reactive programming have been there since forever. If that was the best way, everybody would already be working like that. The biggest problems of this kind of thinking are resource duplication, as everybody has to keep all the data they use locally, and synchronization, as one cannot assume there exists any source of absolute truth that can be accessed by all at the same time. Debugging the system also becomes a bit complicated.&lt;/p&gt;

&lt;p&gt;This post has reached already a big size and I haven't even touched on functional programming and how it tries to solve... well, everything. I will do that in the next chapter. I have to say that I find the concept of a programming language that eliminates global variable scope and public fields and introduces a delay and a random order of execution of methods or properties from other classes fascinating. Imagine testing and debugging that, then moving the working code to production, where the delay is removed. You will also see that a lot of the ideas above influence how React development is done and perhaps you will understand purists telling everybody how things are not correct until you implement this or that in a certain way. Till next time!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>react</category>
      <category>typescript</category>
      <category>net</category>
    </item>
    <item>
      <title>Why to use useContext?</title>
      <author>Aastha Pandey</author>
      <pubDate>Mon, 31 May 2021 20:15:12 +0000</pubDate>
      <link>https://dev.to/aasthapandey/why-to-use-usecontext-442m</link>
      <guid>https://dev.to/aasthapandey/why-to-use-usecontext-442m</guid>
      <description>&lt;p&gt;What made me use &lt;strong&gt;useContext&lt;/strong&gt;? What would one normally do if they want to pass data down the tree to some component, they will achieve this by passing the data as &lt;em&gt;props&lt;/em&gt; to the child components, I did the same thing until I got to know about &lt;em&gt;useContext&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What if one wants to pass the &lt;em&gt;count&lt;/em&gt; to the last child component in the tree, like in the below code from &lt;em&gt;App&lt;/em&gt; component(Parent Component) to &lt;em&gt;About&lt;/em&gt; component(Last Child Component).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without using useContext&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./About&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Home&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//About.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;About&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;With useContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we are using &lt;em&gt;useContext&lt;/em&gt; we don't need to pass data to &lt;em&gt;Home&lt;/em&gt; component in order to make it available to &lt;em&gt;About&lt;/em&gt; component and we can use the &lt;em&gt;count&lt;/em&gt; in any component which comes down the tree and is child of that component which is enclosed in &lt;em&gt;Provider component&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//App.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CountContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CountContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; 
          &lt;span class="nx"&gt;count&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CountContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./About&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Home&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CountContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CountContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code won't do anything it'll just display a count on the screen that is 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Context should be used to pass those data, which one wants to be displayed on every screen or common for all the pages like user name, theme, number of items in some cart etc.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>Create a Backend API without Writing a Single SQL Query - Intro to Postgres and Prisma for Frontend Developers</title>
      <author>Andrew Jones</author>
      <pubDate>Mon, 31 May 2021 20:10:14 +0000</pubDate>
      <link>https://dev.to/ajones_codes/create-an-entire-backend-without-writing-a-single-sql-query-intro-to-postgres-and-prisma-for-frontend-developers-1ffl</link>
      <guid>https://dev.to/ajones_codes/create-an-entire-backend-without-writing-a-single-sql-query-intro-to-postgres-and-prisma-for-frontend-developers-1ffl</guid>
      <description>&lt;p&gt;&lt;strong&gt;This article is written for someone with 0 backend experience, so anyone should be able to learn from it!&lt;/strong&gt; This guide will &lt;em&gt;not&lt;/em&gt; make you a master-level expert on backend development 🙂&lt;/p&gt;

&lt;p&gt;I'm a frontend developer working on a fullstack project, meaning I've learned a lot about backend development recently (checkout my series &lt;a href="https://dev.to/ajones_codes/building-a-saas-product-in-public-update-1-114i"&gt;here&lt;/a&gt; - some of this article is adapted from part 2 of that series).&lt;/p&gt;

&lt;p&gt;I found some great tools that allow me to easily generate an entire database structure, so I wanted to share them with other frontend developers trying to learn backend engineering. In this article, we will create a simple &lt;code&gt;express&lt;/code&gt; API using - don't get scared by the list of technologies - NodeJS, Prisma, and PostgreSQL.&lt;/p&gt;

&lt;p&gt;If you get stuck, feel free to DM me &lt;a href="https://twitter.com/ajones55555"&gt;on Twitter&lt;/a&gt; for questions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sql-vs-nosql"&gt;
  &lt;/a&gt;
  SQL vs NoSQL
&lt;/h2&gt;

&lt;p&gt;SQL and NoSQL are two types of databases. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql"&gt;
  &lt;/a&gt;
  SQL
&lt;/h3&gt;

&lt;p&gt;SQL uses data &lt;strong&gt;tables&lt;/strong&gt;, sort of like an Excel or Google Sheets spreadsheet. In &lt;strong&gt;relational&lt;/strong&gt; databases, tables can be linked to each other through relation fields. &lt;/p&gt;

&lt;p&gt;For example, let's consider a database storing info about cars and their owners. It could be structured like this:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-owner-endraw-table"&gt;
  &lt;/a&gt;
  &lt;code&gt;owner&lt;/code&gt; table
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;carId&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Steven&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;143&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Sarah&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;145&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#-raw-car-endraw-table"&gt;
  &lt;/a&gt;
  &lt;code&gt;car&lt;/code&gt; table
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;make&lt;/th&gt;
&lt;th&gt;model&lt;/th&gt;
&lt;th&gt;year&lt;/th&gt;
&lt;th&gt;ownerId&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;143&lt;/td&gt;
&lt;td&gt;Chevrolet&lt;/td&gt;
&lt;td&gt;Corvette&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;144&lt;/td&gt;
&lt;td&gt;Honda&lt;/td&gt;
&lt;td&gt;Civic&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;145&lt;/td&gt;
&lt;td&gt;Hyundai&lt;/td&gt;
&lt;td&gt;Palisade&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In this example, the &lt;code&gt;carId&lt;/code&gt; column in the &lt;code&gt;owner&lt;/code&gt; table refers to the &lt;code&gt;id&lt;/code&gt; column of the &lt;code&gt;car&lt;/code&gt; table. The &lt;code&gt;ownerId&lt;/code&gt; column of the &lt;code&gt;car&lt;/code&gt; table refers to the &lt;code&gt;id&lt;/code&gt; column of the owner table. &lt;code&gt;id&lt;/code&gt; is the primary key in each table, and &lt;code&gt;ownerId&lt;/code&gt; and &lt;code&gt;carId&lt;/code&gt; are "foreign keys" because they refer to a different table's primary key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nosql"&gt;
  &lt;/a&gt;
  NoSQL
&lt;/h3&gt;

&lt;p&gt;NoSQL is a document-based type of database, where generally documents are similar to JSON objects. This structure might feel more familiar to frontend developers, but both types of databases have advantages and disadvantages. We'll use SQL in this tutorial, so I won't go into NoSQL too much here. You can read more about their differences online by searching for comparisons!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql-and-database-installation"&gt;
  &lt;/a&gt;
  PostgreSQL and Database Installation
&lt;/h2&gt;

&lt;p&gt;PostgreSQL (sometimes called Postgres) is one extremely popular relational database following SQL standards. It allows us to set up databases with tables and connect them with easily understandable relations.&lt;/p&gt;

&lt;p&gt;First, we'll install Postgres so that you can set up databases on your computer. You can find the download for your OS here: &lt;a href="https://www.postgresql.org/download/"&gt;https://www.postgresql.org/download/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09F6y7HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5o2j3u76vjp820ap0ra7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09F6y7HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5o2j3u76vjp820ap0ra7.PNG" alt="Installation page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you go through the download, stick with default settings. You will be asked for a password for the root user: no matter what you choose, ⚠&lt;strong&gt;make sure to write down the password you selected&lt;/strong&gt;⚠. The default username is &lt;code&gt;postgres&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the installation, you can log in to your local database instance and play with it on the command line! Search your computer for a program called &lt;code&gt;psql&lt;/code&gt;, which is a Terminal/CMD prompt application that lets you interact with your postgres database. Open the program and login by pressing Enter to use the defaults and then entering your password. You should see this when you're done:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--446dl3_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evdeqzc0npzdzqjg1w6f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--446dl3_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evdeqzc0npzdzqjg1w6f.PNG" alt="PSQL Shell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can test out some commands to get familiar with Postgres. First, type &lt;code&gt;\l&lt;/code&gt; and then Enter to list the existing databases on your machine. Postgres should come with a few created by default.&lt;/p&gt;

&lt;p&gt;While I said we wouldn't write a single SQL query, I would recommend creating a separate database for this project. In PSQL, type &lt;code&gt;CREATE DATABASE prismademo;&lt;/code&gt; and press Enter. Then you can connect to the new database with &lt;code&gt;\c prismademo&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You can spend some time creating databases and tables if you want to - there are plenty of simple guides you can find by searching "how to create databases in psql", "how to create tables in psql", etc.&lt;/p&gt;

&lt;p&gt;⚠&lt;strong&gt;Heads up! Most SQL queries you enter in PSQL need to end in a semicolon. Don't forget that part!&lt;/strong&gt;⚠&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-setup"&gt;
  &lt;/a&gt;
  Server Setup
&lt;/h2&gt;

&lt;p&gt;In a normal terminal or CMD prompt (not psql), create a folder for your JavaScript code that we will use to create the API server. I named my folder &lt;code&gt;prisma-demo&lt;/code&gt;. &lt;code&gt;cd&lt;/code&gt; into that folder, and run &lt;code&gt;npm init&lt;/code&gt;. Follow through the steps of initializing your project. Open your project folder in your favorite IDE (if you use VS Code, you can type the command &lt;code&gt;code .&lt;/code&gt; in this directory to open VS Code here). You should see a &lt;code&gt;package.json&lt;/code&gt; with the info you just entered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prisma-integration"&gt;
  &lt;/a&gt;
  Prisma Integration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-prisma"&gt;
  &lt;/a&gt;
  Install Prisma
&lt;/h3&gt;

&lt;p&gt;We're finally at the keystone, &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;, which will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;connect our database and JS server&lt;/li&gt;
&lt;li&gt;generate tables in our database for us&lt;/li&gt;
&lt;li&gt;generate JavaScript functions and TypeScript types for interacting with our database (no worries if you don't use TypeScript, keep reading!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First, do &lt;code&gt;npm install prisma -D&lt;/code&gt; to install Prisma.&lt;/p&gt;

&lt;p&gt;Next, do &lt;code&gt;npx prisma&lt;/code&gt; to verify Prisma is installed, and then &lt;code&gt;npx prisma init&lt;/code&gt;. The second command will generate a Prisma schema file in &lt;code&gt;prisma/schema.prisma&lt;/code&gt; and a &lt;code&gt;.env&lt;/code&gt; with a sample database URL. &lt;/p&gt;

&lt;p&gt;⚠ Next we should add the &lt;code&gt;.env&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt;. Create a &lt;code&gt;.gitignore&lt;/code&gt; file with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.env
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can safely run &lt;code&gt;git init&lt;/code&gt; and commit your project if you want to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fix-the-database-url"&gt;
  &lt;/a&gt;
  Fix the database URL
&lt;/h3&gt;

&lt;p&gt;Open your &lt;code&gt;.env&lt;/code&gt; and replace the sample URL with this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL="postgresql://postgres:INSERTYOURPASSWORD@localhost:5432/prismademo?schema=public"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you didn't create a &lt;code&gt;prismademo&lt;/code&gt; database earlier, replace that part with &lt;code&gt;postgres&lt;/code&gt; before ? in the url.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fill-in-the-prisma-schema"&gt;
  &lt;/a&gt;
  Fill in the Prisma Schema
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;schema.prisma&lt;/code&gt;. Here, we can define data models, and then use the Prisma CLI to generate the required database tables and JavaScript functions based on the data models.&lt;/p&gt;

&lt;p&gt;We'll use the car example from above. We'll say that each person can own multiple cars, and each car can only have one owner, meaning owners/cars have a one-to-many relationship. You can read about all of the possible types of relationships here: &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/relations"&gt;https://www.prisma.io/docs/concepts/components/prisma-schema/relations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add these lines to your schema to set up the models. Note the relation: each owner has a list of cars, and each car can have one owner, specified by &lt;code&gt;ownerId&lt;/code&gt;. Note that it looks sort of similar to a GraphQL Schema!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model Owner {
  // Prisma will automatically create an ID for each entry for us
  id   Int    @id @default(autoincrement())
  name String
  age  Int
  // Each Owner can have multiple cars
  Car  Car[]
}

model Car {
  id      Int    @id @default(autoincrement())
  make    String
  model   String
  year    Int
  // Each Car can have only 1 owner
  ownerId Int
  owner   Owner  @relation(fields: [ownerId], references: [id])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;code&gt;@id&lt;/code&gt; annotation to signify that this is the primary key field for this model. &lt;code&gt;@default(autoincrement())&lt;/code&gt; means that we don't need to provide an ID when we create an owner or car, it will be automatically assigned to &lt;code&gt;1 + the last ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heads up! There's a great VS Code extension to help format and maintain this file: &lt;a href="https://marketplace.visualstudio.com/items?itemName=Prisma.prisma"&gt;https://marketplace.visualstudio.com/items?itemName=Prisma.prisma&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrate-the-schema-to-the-database"&gt;
  &lt;/a&gt;
  Migrate the Schema to the Database
&lt;/h3&gt;

&lt;p&gt;Now that we've created the Prisma Schema, we need to run a command so that Prisma will actually create the tables for this schema in the database. Run &lt;code&gt;npx prisma migrate dev --name "Create initial schema"&lt;/code&gt; in your project directory terminal/cmd prompt. You can change the name text, but keep it descriptive! (Note: if the command freezes at &lt;code&gt;"Running generate...&lt;/code&gt;, stop the process and run &lt;code&gt;npx prisma generate&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Go back to your db in PSQL. Now run &lt;code&gt;\dt&lt;/code&gt;, and you should see the tables created from our Prisma Schema! How cool is that? 😎&lt;/p&gt;

&lt;p&gt;You can also run &lt;code&gt;npx prisma studio&lt;/code&gt; to view your database structure in an interactive web view. I would recommend trying this so that you can see the generated database visually!&lt;/p&gt;

&lt;p&gt;When you run a migration or &lt;code&gt;prisma generate&lt;/code&gt;, Prisma also creates fully-typed JavaScript functions for us to interact with the database without writing any SQL manually! Let's see how we can use those functions to create an API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rest-api-to-create-an-owner-and-a-car"&gt;
  &lt;/a&gt;
  REST API to Create an Owner and a Car
&lt;/h3&gt;

&lt;p&gt;If you're a JS developer, you may already be familiar with this part. Express is an NPM package for writing servers.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm i express body-parser&lt;/code&gt; to install express and body-parser, which we'll use to read JSON input in the API.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;server.js&lt;/code&gt; file in your project root folder. Add this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3030&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we'll create a REST API route to create a user and a car at the same time and link them together.&lt;/p&gt;

&lt;p&gt;Add the Prisma Client import and instantiation to your &lt;code&gt;server.js&lt;/code&gt; file, outside of any route, underneath &lt;code&gt;const port = ...&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a POST route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/owner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a web-app or REST client sends a POST request to this express server with the URL we specified, the server will run this function.&lt;/p&gt;

&lt;p&gt;We'll use the functions which Prisma generated to create an owner and a car in our database.&lt;/p&gt;

&lt;p&gt;The Prisma create functions follow the form &lt;code&gt;prisma.&amp;lt;MODEL NAME&amp;gt;.create&lt;/code&gt;, so in our case we'll use &lt;code&gt;prisma.owner.create(...)&lt;/code&gt;. If you're following along, you'll see that our IDE knows that our model is called &lt;code&gt;owner&lt;/code&gt; and autosuggests it, because Prisma has &lt;em&gt;generated these functions from our schema&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cq490_uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dckes57f7g97oqu5pg7u.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cq490_uC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dckes57f7g97oqu5pg7u.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prisma will suggest fields for the owner model in the &lt;code&gt;data&lt;/code&gt; argument field, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newOwner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another great feature of Prisma is that &lt;strong&gt;we can create the Car database entry and link it to this Owner in the same function call&lt;/strong&gt;. This is how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newOwner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we'll add try/catch for error handling, and a response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newOwner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newOwner&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to create Owner and Car.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Something to Notice&lt;/strong&gt;: We didn't specify ownerId in the car JSON, or carID in the owner JSON. Since we are creating these with one nested in the other in one function call, Prisma will link the IDs for us! This is enabled by the &lt;code&gt;@relation&lt;/code&gt; fields we added in the schema.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-it-out"&gt;
  &lt;/a&gt;
  Testing it Out
&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;node server.js&lt;/code&gt; in your project directory to run your server. You can then use any HTTP Client to test this API route. For example, you can use cURL, Postman, or a NodeJS file with &lt;code&gt;node-fetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No matter how you test it, run a request similar to the following POST request, and you should get the given response!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TbxwMgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8itvqq7rf9qesjl5vgyq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TbxwMgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8itvqq7rf9qesjl5vgyq.PNG" alt="Sample POST Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you also want to get the car information in the response, you can add the &lt;code&gt;include&lt;/code&gt; field in your &lt;code&gt;prisma.owner.create&lt;/code&gt; call to tell Prisma to include the connected Car object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newOwner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Restart the Node server&lt;/em&gt; after adding this field, and re-run the request to see the created car!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3RrWB1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmj3pb667ge088t2cc4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3RrWB1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmj3pb667ge088t2cc4r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎉Congratulations! At this point, you've set up a database, created tables from a schema, and added a REST API to store information in the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view-your-database"&gt;
  &lt;/a&gt;
  View your Database
&lt;/h3&gt;

&lt;p&gt;Back in the &lt;code&gt;psql&lt;/code&gt; terminal, you can run &lt;code&gt;TABLE "Car";&lt;/code&gt; to print out the Car table. You should see output in tabular form like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prismademo=# TABLE "Car";
 id |   make    |  model   | year | ownerId
----+-----------+----------+------+---------
  1 | Chevrolet | Corvette | 2020 |       1
  2 | Chevrolet | Camaro   | 2020 |       2
(2 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also view the data in Prisma Studio by running &lt;code&gt;npx prisma studio&lt;/code&gt; again!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-a-route-to-get-stored-info"&gt;
  &lt;/a&gt;
  Add a Route to GET Stored Info
&lt;/h3&gt;

&lt;p&gt;Lastly, we'll add a REST API route to GET a car, so your frontend can read car data. The requested Car ID will be part of the URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;find___&lt;/code&gt; functions in Prisma allow us to use a filter to get database entries meeting a certain condition. We'll use &lt;code&gt;prisma.car.findFirst(...)&lt;/code&gt; to find the first car with the given ID. &lt;/p&gt;

&lt;p&gt;Underneath the POST route we added, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/car/:carId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;carId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to get car.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We name the URL parameter &lt;code&gt;carId&lt;/code&gt; using the &lt;code&gt;:carId&lt;/code&gt; in the URL. We don't need &lt;code&gt;bodyParser&lt;/code&gt; because we don't need to parse POSTed JSON, like we did when we created the owner/car.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;where&lt;/code&gt; to tell Prisma to get the car with the matching ID. You'll notice autosuggest is supported here too. We use &lt;code&gt;Number(...)&lt;/code&gt; to convert the URL parameter from a string to a number, because the ID is an Int according to our schema. Finally, we use &lt;code&gt;include&lt;/code&gt; to get the owner details with the car details.&lt;/p&gt;

&lt;p&gt;Restart your server. You should be able to go to &lt;code&gt;http://localhost:3030/car/1&lt;/code&gt; in your web browser or HTTP client to view the first car you created!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap-and-taking-it-further"&gt;
  &lt;/a&gt;
  Recap and Taking it Further!
&lt;/h2&gt;

&lt;p&gt;That was a lot of information, very fast. Great work so far!&lt;/p&gt;

&lt;p&gt;To sum it up, in this tutorial you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installed PostgreSQL&lt;/li&gt;
&lt;li&gt;Created a database for your project&lt;/li&gt;
&lt;li&gt;Created database tables from a Schema using Prisma&lt;/li&gt;
&lt;li&gt;Wrote an &lt;code&gt;express&lt;/code&gt; server REST API&lt;/li&gt;
&lt;li&gt;Added routes to the API to create/store and get database entries.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some ideas for taking this further:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try adding new models in the schema (maybe a Dealership, or create a model for the Make instead of just astring)&lt;/li&gt;
&lt;li&gt;New types of relations, or new field types. Maybe a &lt;code&gt;purchasedAt&lt;/code&gt; date field on the car, or allow a car to have more than one owner with a many-to-many relationship.&lt;/li&gt;
&lt;li&gt;Add more API functionality. For example, you can add a route to add another car to an &lt;em&gt;existing&lt;/em&gt; owner, or delete a car from an owner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would definitely recommend checking out the Prisma documentation, especially different &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/relations"&gt;types of relations&lt;/a&gt;, &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-model"&gt;data types&lt;/a&gt;, &lt;a href="https://www.prisma.io/docs/concepts/overview/should-you-use-prisma"&gt;tradeoffs of Prisma&lt;/a&gt;, and more: &lt;a href="https://www.prisma.io/docs/"&gt;https://www.prisma.io/docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also view my source code here: &lt;a href="https://github.com/aej11a/prisma-demo"&gt;https://github.com/aej11a/prisma-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading! Follow me here or &lt;a href="https://twitter.com/ajones55555"&gt;on Twitter&lt;/a&gt; for more updates and other content. Feel free to DM me for questions!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>prisma</category>
      <category>fullstack</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to rate limit a login route in Express using node-rate-limiter-flexible and Redis</title>
      <author>Matt</author>
      <pubDate>Mon, 31 May 2021 20:09:37 +0000</pubDate>
      <link>https://dev.to/mattdclarke/how-to-rate-limit-a-login-route-in-express-using-node-rate-limiter-flexible-and-redis-1i1k</link>
      <guid>https://dev.to/mattdclarke/how-to-rate-limit-a-login-route-in-express-using-node-rate-limiter-flexible-and-redis-1i1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Rate limiting is a method used for controlling network traffic. It limits the number of actions a user can make per unit of time &lt;sup&gt;&lt;a href="https://www.cloudflare.com/learning/bots/what-is-rate-limiting/"&gt;1&lt;/a&gt;&lt;/sup&gt;. In this tutorial, we will rate limit a login route to help protect it from &lt;a href="https://www.kaspersky.com/resource-center/definitions/brute-force-attack"&gt;brute force attacks&lt;/a&gt;. This limits the number of password guesses that can be made by an attacker. We'll use the npm package &lt;a href="https://www.npmjs.com/package/rate-limiter-flexible"&gt;node-rate-limiter-flexible&lt;/a&gt; to count and limit the number of login attempts by key. Each key will have a points value that will count the number of failed login attempts. The keys will expire after a set amount of time. The key-value pairs will be stored in &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;, which is an open-source in-memory data structure store. It has many different use cases. We will use it as a simple database. Redis is simple to use and it is very fast. We'll create an online instance of Redis, connect it to an express application, and then use the Redis command-line interface (redis-cli) to view the database. A prerequisite for this tutorial is an ExpressJS application with a login route and user authentication. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRE6WQph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0duyg6kymp7yu4g0jz2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRE6WQph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0duyg6kymp7yu4g0jz2i.png" alt="Overview of tutorial: Express application with rate limiting on the login route."&gt;&lt;/a&gt;&lt;/p&gt;
Express application with rate limiting on the login route. The key for a particular user stores the number of failed logins. If the number of failed logins exceeds the set maximum number of failed logins, then the route will be blocked. The keys expire after a set amount of time.

  

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We will use two types of keys to count the number of failed logins. One will be a string made using the user's IP address. The other will be a string made by joining the user's email address and IP address. When a user attempts to log in, if the user exists and the password is not correct, the two keys will be created for the user. &lt;/p&gt;

&lt;p&gt;For example, the keys stored in Redis may look like this after a failed login attempt where the password was incorrect:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;key 1:&lt;/strong&gt; &lt;code&gt;"login_fail_ip-192.168.1.1" : 1&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;key 2:&lt;/strong&gt; &lt;code&gt;"login_fail_username_and_ip-example@example.com_192.168.1.1" : 1&lt;/code&gt; &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Express app with login route and login authentication (login with username or email)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Registered users stored in a database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-the-ratelimiting-middleware"&gt;
  &lt;/a&gt;
  Set up the rate-limiting middleware
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#middleware-used-that-is-not-necessary-for-ratelimiting"&gt;
  &lt;/a&gt;
  Middleware used that is not necessary for rate-limiting
&lt;/h3&gt;

&lt;p&gt;This example is from an Express application that uses MongoDB as a database to store the users' data. The following libraries, which will be used in this example, are not necessarily required to set up login rate limiting. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.passportjs.org/"&gt;passport&lt;/a&gt; -  authentication middleware&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original"&gt;util.promisify()&lt;/a&gt; - a method defined in the utilities module of the Node.js standard library. It converts methods that return responses using a callback function to instead return responses in a promise object. The syntax is much cleaner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/connect-flash"&gt;connect-flash&lt;/a&gt; - middleware for flash messages notifying a user if the login was successful or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Submitted data on the &lt;code&gt;request.body&lt;/code&gt; is parsed as a JSON object by the built-in middleware function in Express: &lt;code&gt;Express.json()&lt;/code&gt;. The data is stored in JSON format as it is a commonly used, organized, and easily accessible text-based format &lt;sup&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON"&gt;2&lt;/a&gt;&lt;/sup&gt;.  &lt;/p&gt;

&lt;p&gt;These were added as application-level middleware in &lt;code&gt;app.js&lt;/code&gt; using &lt;code&gt;app.use()&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ratelimiting-middleware"&gt;
  &lt;/a&gt;
  Rate-limiting middleware
&lt;/h3&gt;

&lt;p&gt;The rate-limiting middleware used is a modification of the &lt;a href="https://www.npmjs.com/package/rate-limiter-flexible"&gt;node-rate-limiter-flexible&lt;/a&gt; library example of how to protect a &lt;a href="https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection"&gt;login endpoint&lt;/a&gt;.  This rate-limiting middleware is written for an Express application using a Redis store, but the same idea can be applied to rate-limiting middleware with other Node.js frameworks such as Koa, Hapi, and Nest or a pure NodeJS application &lt;sup&gt;&lt;a href="https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#login-endpoint-protection"&gt;3&lt;/a&gt;&lt;/sup&gt;. We'll create 2 rate limiters. The first blocks the login route, for one hour, after 10 consecutive failed login attempts.  The failed login counts are reset after a successful login.  Rate limiting is based on the user's email address and IP address. The second blocks the login route, for one day, after 100 failed login attempts. Rate limiting is based on the user's IP address. After this middleware is set up, we will set up the Redis database.&lt;/p&gt;

&lt;p&gt;You can simply rate limit based on IP address only, the problem with this is that IP addresses are not always unique &lt;sup&gt;&lt;a href="https://en.wikipedia.org/wiki/Network_address_translation"&gt;4&lt;/a&gt;&lt;/sup&gt;. A user in a network that shares a public IP address could block other users in that network. If you limit based on email address only, then a malicious user could block someone's access to the application by simply sending many requests to log in. Blocking by email address and IP address adds some flexibility. A user may be blocked using one IP address but could try login from another device. It is important to note that most devices use a dynamic IP address that changes over time and that IP addresses can be modified &lt;sup&gt;&lt;a href="https://support.google.com/fiber/answer/3547208?hl=en&amp;lt;/sup"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;, &lt;/sup&gt;&lt;sup&gt;&lt;a href="https://www.cloudflare.com/learning/ddos/glossary/ip-spoofing"&gt;6&lt;/a&gt;&lt;/sup&gt;.  Rate-limiting aims to minimize brute force attacks to guess a user's password. When rate limiting, user experience also needs to be considered. Being too strict by blocking users after only a few attempts is not good for the user experience. You need to make a trade-off between security and user experience.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#npm-packages-required-for-redis-connection-and-ratelimiting"&gt;
  &lt;/a&gt;
  npm packages required for Redis connection and rate-limiting
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/redis"&gt;redis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/rate-limiter-flexible"&gt;node-rate-limiter-flexible&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rate-limit-controller"&gt;
  &lt;/a&gt;
  Rate limit controller
&lt;/h4&gt;

&lt;p&gt;Create a file for the rate-limiting middleware. For example, &lt;code&gt;rateLimitController.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/routes"&gt;controller&lt;/a&gt; that will handle the login route POST request, a connection to Redis will be set up. Then a rate limiter instance that counts and limits the number of failed logins by key will be set up. The &lt;code&gt;storeClient&lt;/code&gt; property of the rate limiter instance will link the rate limiter instance to a Redis database (redisClient) that will be set up later. A points property on the rate limiter instance determines how many login attempts can be made. Keys are created on the instance by using the IP address of the login request or the IP address and email address. When a user fails to log in, points are consumed. This means the count for the key increases. When this count exceeds the points property value, which is the maximum number of failed login attempts allowed, then a message is sent to the user that states that too many login attempts have been made. The keys only exist for a defined amount of time, after this time the rate-limiting is reset. A variable, retrySecs, will be created to determine when a user can try to log in again. The time remaining until another login can be attempted is determined by using the &lt;code&gt;msBeforeNext()&lt;/code&gt; method on the rate limiter instance. &lt;/p&gt;

&lt;p&gt;If the login route is not being rate-limited, then we will authenticate the user. In this tutorial, &lt;a href="http://www.passportjs.org/"&gt;Passport&lt;/a&gt; is used. If the authentication fails and the user's email exists, then a point will be consumed from each rate limiter instance. If authentication is successful the key for the current user, based on IP address and email address, will be deleted and the user will be logged in. A login session is established using the Passport.js method &lt;code&gt;logIn()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rate-limiter-flexible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// create a Redis client - connect to Redis (will be done later in this tutorial)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;enable_offline_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// if no connection, an error will be emitted&lt;/span&gt;
&lt;span class="c1"&gt;// handle connection errors&lt;/span&gt;
&lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// this error is handled by an error handling function that will be explained later in this tutorial&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxWrongAttemptsByIPperDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="c1"&gt;// the rate limiter instance counts and limits the number of failed logins by key&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login_fail_ip_per_day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// maximum number of failed logins allowed. 1 fail = 1 point&lt;/span&gt;
  &lt;span class="c1"&gt;// each failed login consumes a point&lt;/span&gt;
  &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;maxWrongAttemptsByIPperDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// delete key after 24 hours&lt;/span&gt;
  &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// number of seconds to block route if consumed points &amp;gt; points&lt;/span&gt;
  &lt;span class="na"&gt;blockDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="c1"&gt;// Block for 1 day, if 100 wrong attempts per day&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login_fail_consecutive_email_and_ip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Delete key after 1 hour&lt;/span&gt;
  &lt;span class="na"&gt;blockDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="c1"&gt;// Block for 1 hour&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// create key string&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEmailIPkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// rate-limiting middleware controller&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginRouteRateLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ipAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailIPkey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getEmailIPkey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ipAddr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get keys for attempted login&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resSlowByIP&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipAddr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Check if IP or email + IP is already blocked&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resSlowByIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;resSlowByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;maxWrongAttemptsByIPperDay&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resSlowByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msBeforeNext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msBeforeNext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// the IP and email + ip are not rate limited  &lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retrySecs&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// sets the response’s HTTP header field&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Retry-After&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retrySecs&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too many requests. Retry after &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;retrySecs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Consume 1 point from limiters on wrong attempt and block if limits reached&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ipAddr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
          &lt;span class="c1"&gt;// check if user exists by checking if authentication failed because of an incorrect password&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IncorrectPasswordError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed login: not authorized&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// Count failed attempts by Email + IP only for registered users&lt;/span&gt;
            &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="c1"&gt;// if user does not exist (not registered)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IncorrectUsernameError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed login: user does not exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email or password is wrong.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rlRejected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rlRejected&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;rlRejected&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
              &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rlRejected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msBeforeNext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Retry-After&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeOut&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too many login attempts. Retry after &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timeOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; seconds`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// If passport authentication successful&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successful login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Reset limiter based on IP + email on successful authorisation&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// login (Passport.js method)&lt;/span&gt;
        &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#extra-notes"&gt;
  &lt;/a&gt;
  Extra notes
&lt;/h5&gt;

&lt;p&gt;Within the RedisClient, the property &lt;code&gt;enable_offline_queue&lt;/code&gt; is set to false. This is done to prevent issues such as slowing down servers if many requests are queued due to a Redis connection failure. The author of node-rate-limiter-flexible recommends this setting unless you have reasons to change it &lt;sup&gt;&lt;a href="https://github.com/animir/node-rate-limiter-flexible/issues/37"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;req.ip&lt;/code&gt; contains the remote IP address of the request &lt;sup&gt;&lt;a href="https://expressjs.com/en/api.html#req.ip"&gt;8&lt;/a&gt;&lt;/sup&gt;.  If you are using the Express app behind a &lt;a href="https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/"&gt;reverse proxy&lt;/a&gt;, such as Cloudflare CDN, then you should set the Express apps trust proxy setting to true and provide the IP address, subnet, or an array of these that can be trusted as a reverse proxy. If you do not do this, the value of &lt;code&gt;req.ip&lt;/code&gt;  will be the IP address of the reverse proxy &lt;sup&gt;&lt;a href="http://expressjs.com/en/guide/behind-proxies.html"&gt;9&lt;/a&gt;&lt;/sup&gt;.  Also note that running your application locally during development, &lt;code&gt;req.ip&lt;/code&gt; will return 127.0.0.1 if you are using IPv4 or ::1, ::fff:127.0.0.1 if you are using IPv6 &lt;sup&gt;&lt;a href="https://www.npmjs.com/package/request-ip"&gt;10&lt;/a&gt;&lt;/sup&gt;.  These describe the local computer address.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt;, the file with all of your routes. The following route is defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;catchErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rateLimitController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginRouteRateLimit&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;catchErrors&lt;/code&gt; is an error handling function that is used to catch any async-await errors in the controller. This error handling method is from the Wes Bos course &lt;a href="https://learnnode.com/"&gt;Learn Node&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The errors for a Redis connection failure are handled as follows: Node Redis returns a &lt;code&gt;NR_CLOSED&lt;/code&gt; error code if the client's connection dropped. &lt;code&gt;ECONNRESET&lt;/code&gt; is a connection error. You can also set up a retry strategy for Node Redis to try and reconnect if the connection fails &lt;sup&gt;&lt;a href="https://github.com/NodeRedis/node-redis#options-object-properties"&gt;11&lt;/a&gt;&lt;/sup&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NR_CLOSED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ECONNRESET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;There was a connection error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;back&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-redis"&gt;
  &lt;/a&gt;
  Set up Redis
&lt;/h2&gt;

&lt;p&gt;The code above will not work yet as there is no Redis database set up. We will create a Redis database in the cloud using &lt;a href="https://redislabs.com/"&gt;Redis Labs&lt;/a&gt;. We will use the free plan. Then we will connect to this database through our Express app. To view the database, we will download Redis locally so that we can use the built-in client redis-cli (command-line interface). We will download and use Redis using Windows Subsystem for Linux (WSL), which allows you to use a Linux terminal in Windows. Other methods are described on the &lt;a href="https://redis.io/download"&gt;Redis website download page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-account-with-redis-labs"&gt;
  &lt;/a&gt;
  Create an account with Redis Labs
&lt;/h3&gt;

&lt;p&gt;Create an account on the &lt;a href="https://redislabs.com/try-free/"&gt;Redis Labs website&lt;/a&gt;. Follow the instructions in the documentation to learn how to &lt;a href="https://docs.redislabs.com/latest/rc/rc-quickstart/"&gt;create a database&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-the-redis-instance-on-redis-labs-with-your-express-application"&gt;
  &lt;/a&gt;
  Connect the Redis instance on Redis Labs with your Express application
&lt;/h3&gt;

&lt;p&gt;In your express application &lt;code&gt;variables.env&lt;/code&gt; add the REDIS_URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;REDIS_URL=redis://&amp;lt;password&amp;gt;@&amp;lt;Endpoint&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your Endpoint and password can be found in the database in the &lt;strong&gt;Configuration&lt;/strong&gt; details of the &lt;strong&gt;View Database&lt;/strong&gt; screen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Endpoint&lt;/strong&gt; setting shows the URL for your database and the port number.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Access Control &amp;amp; Security&lt;/strong&gt; setting shows the password. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the rate limit controller from the previous section, the following code connects the cloud Redis instance, hosted on Redis Labs, to the Express application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if no connection, an error will be emitted&lt;/span&gt;
  &lt;span class="na"&gt;enable_offline_queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rate limiter instances connect to the  cloud Redis instance as follows (also from the rate limit controller):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterSlowBruteByIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByUsernameAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#set-up-wsl-and-download-redis"&gt;
  &lt;/a&gt;
  Set up WSL and download Redis
&lt;/h3&gt;

&lt;p&gt;You will be able to rate limit your login route now, the next step is to set up Redis locally so that we can view the Redis database using the Redis command-line interface (redis-cli). Redis works best with Linux. Linux and OS X are the two operating systems where Redis is developed and tested the most. Linux is recommended for deployment &lt;sup&gt;&lt;a href="https://redis.io/topics/introduction"&gt;12&lt;/a&gt;, &lt;a href="https://medium.com/@RedisLabs/windows-subsystem-for-linux-wsl-10e3ca4d434e"&gt;13&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://medium.com/@RedisLabs/windows-subsystem-for-linux-wsl-10e3ca4d434e"&gt;this article&lt;/a&gt; on how to set up WSL, download and install a supported Linux distro and install Redis locally. Install Redis somewhere outside of your application. The Linux distro used in this tutorial is Ubuntu 18.04.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-the-rediscli-to-the-redis-instance-on-redis-labs"&gt;
  &lt;/a&gt;
  Connect the redis-cli to the Redis instance on Redis Labs
&lt;/h3&gt;

&lt;p&gt;We will use the redis-cli locally to see the key-value pairs created. Run your Express application and in a WSL terminal run the redis-cli:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cd into the Redis folder that you downloaded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;cd redis-6.2.3&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make sure the server is running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo service redis-server start&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to stop the server: &lt;code&gt;sudo service redis-server stop&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you run &lt;code&gt;redis-cli&lt;/code&gt;, you will connect to the local instance of Redis and will run locally on the Localhost (127.0.0.1:6379). To exit, run &lt;code&gt;quit&lt;/code&gt;. To connect the redis-cli to the cloud instance of the Redis Labs database that we created, we'll use the URL-based connection method from the &lt;a href="https://docs.redislabs.com/latest/rs/administering/creating-databases/"&gt;Redis Labs docs&lt;/a&gt;. This connects to the Redis database using an endpoint URL and port number. Check the database &lt;strong&gt;Configuration&lt;/strong&gt; details in the &lt;strong&gt;View Database&lt;/strong&gt; screen to find the endpoint url and password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ redis-cli -h redis-19836.c9.us-east-1-2.ec2.cloud.redislabs.com
-p 19836 -a astrongpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;h is the host: add your endpoint, without the port number&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;p is the port, which is shown at the end of the endpoint url&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a is access control. Add your password&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can test if the connection worked by typing &lt;code&gt;PING&lt;/code&gt;. If the connection worked redis-cli will return &lt;code&gt;PONG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if the response is &lt;code&gt;NOAUTH Authentication required&lt;/code&gt; - check that you typed the password correctly. You can run &lt;code&gt;quit&lt;/code&gt; to exit the redis-cli so that you can try again.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-redis-commands"&gt;
  &lt;/a&gt;
  Basic Redis commands
&lt;/h3&gt;

&lt;p&gt;There are many &lt;a href="https://redis.io/commands"&gt;commands&lt;/a&gt; available as shown in the docs. For our use case, we only need to know a few simple commands. You can try them in the redis-cli that is connected to your Redis Labs Redis instance. Note that the commands are all uppercase in the Redis docs, but the commands are not case-sensitive. However, key names are case-sensitive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ping"&gt;
  &lt;/a&gt;
  PING
&lt;/h4&gt;

&lt;p&gt;Checks the connection to the Redis database. If there is a connection, &lt;code&gt;PONG&lt;/code&gt; will be returned.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#set"&gt;
  &lt;/a&gt;
  SET
&lt;/h4&gt;

&lt;p&gt;Set the string value of a key. It is used to create a key-value pair or change the value of an existing key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; SET job teacher
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets the key "job" to the value "teacher". The response &lt;code&gt;OK&lt;/code&gt; means that the command was successful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mset"&gt;
  &lt;/a&gt;
  MSET
&lt;/h4&gt;

&lt;p&gt;Like SET, but its sets the values of multiple keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; MSET job "teacher" AGE "50" TITLE "Mr."
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h4&gt;

&lt;p&gt;Get the value for a key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; GET job
"teacher"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mget"&gt;
  &lt;/a&gt;
  MGET
&lt;/h4&gt;

&lt;p&gt;Get the value of multiple keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; MGET job age title
1) "teacher"
2) "50"
3) "Mr."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#del"&gt;
  &lt;/a&gt;
  DEL
&lt;/h4&gt;

&lt;p&gt;Deletes a specific key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; DEL job
(integer) 1 -&amp;gt; this means that it found a key with the name "job" and deleted it. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; GET job
(nil) -&amp;gt; this means that no key with the name "job" exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scan"&gt;
  &lt;/a&gt;
  SCAN
&lt;/h4&gt;

&lt;p&gt;View all keys. It iterates over a collection of keys. It is a cursor-based iterator. If you want to view all entries then run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; SCAN 0
1) "0"
2) "age"
3) "title"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first value returned is "0", which indicates that a full iteration occurred. This means that all of the keys in the database were scanned. For more details, you can read up the description of the &lt;a href="https://redis.io/commands/scan"&gt;SCAN command&lt;/a&gt; in the docs. &lt;/p&gt;

&lt;p&gt;If you want to view all keys, excluding the first key then run &lt;code&gt;SCAN 1&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flushall"&gt;
  &lt;/a&gt;
  FLUSHALL
&lt;/h4&gt;

&lt;p&gt;This deletes all of the keys in the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  CLEAR
&lt;/h4&gt;

&lt;p&gt;Clears the terminal.&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-the-ratelimiting"&gt;
  &lt;/a&gt;
  Test the rate-limiting
&lt;/h2&gt;

&lt;p&gt;We are going to test one of the rate limiters. Run your application locally and connect to Redis labs via the redis-cli in a WSL terminal. Before starting, make sure all of the keys in your database are deleted by running the command  &lt;code&gt;FLUSHALL&lt;/code&gt;. In your rate limit controller middleware (&lt;code&gt;rateLimitController.js&lt;/code&gt;.), set &lt;code&gt;maxConsecutiveFailsByEmailAndIP&lt;/code&gt; to 3. Set the options &lt;code&gt;duration&lt;/code&gt; and &lt;code&gt;blockDuration&lt;/code&gt;  of &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; to 60. This will allow us to test the rate-limiting quickly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RateLimiterRedis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storeClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login_fail_consecutive_email_and_ip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;maxConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; 
  &lt;span class="na"&gt;blockDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;  
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#failed-login-with-an-account-that-does-not-exist"&gt;
  &lt;/a&gt;
  Failed login with an account that does not exist
&lt;/h3&gt;

&lt;p&gt;Try login using an email (or another user identifier, such as user name, used in your app) that does not exist (not registered).&lt;/p&gt;

&lt;p&gt;After this, in the redis-cli, that is connected to your cloud Redis instance hosted on Redis Labs, view all of the keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; SCAN 0
1)"0"
2) "login_fail_ip_per_day:::1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;On localhost, &lt;code&gt;req.ip&lt;/code&gt; will return 127.0.0.1 if you are using IPv4 or ::1,  ::fff:127.0.0.1 if you are using IPv6.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can now check the number of consumed points (number of failed logins) of the &lt;code&gt;limiterSlowBruteByIP&lt;/code&gt; rate limiter for the IP that tried to log in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_ip_per_day:::1
"1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#failed-login-with-an-account-that-does-exist"&gt;
  &lt;/a&gt;
  Failed login with an account that does exist
&lt;/h3&gt;

&lt;p&gt;Now try log in with an existing account and use the wrong password. Then view all of the keys in your Redis database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; SCAN 0
1)"0"
2) "login_fail_ip_per_day:::1"
3) "login_fail_consecutive_username_and_ip:realuser@example.com_::1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now check the number of points consumed for the IP that tried to log in for the &lt;code&gt;limiterSlowBruteByIP&lt;/code&gt; rate limiter key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_ip_per_day:::1
"2"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the number of consumed points for the &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; rate limiter key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_consecutive_username_and_ip:realuser@example.com_::1
"1"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try logging in more than 3 times within 1 minute. After this, you will get this message displayed in your browser:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Too many requests. Retry after 60 seconds.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The login route for the given IP and username pair will be blocked for 60 seconds. This is because the &lt;code&gt;blockDuration&lt;/code&gt; that we set  for the &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; rate limiter is 60 seconds. After 60 seconds, check the number of consumed points for the key again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yourRedisLabsEndpoint&amp;gt; GET login_fail_ip_per_day:::1
(nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does not exist anymore as we set the &lt;code&gt;duration&lt;/code&gt; property to 60. The key is deleted after 60 seconds. &lt;/p&gt;

&lt;p&gt;Now try login using an existing account with the wrong password. After this, log in with the correct password. This will delete the &lt;code&gt;limiterConsecutiveFailsByEmailAndIP&lt;/code&gt; rate limiter key for the given user and IP pair. This occurs once the login is successful, as can be seen in the rate limit controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="p"&gt;...&lt;/span&gt; 

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;resEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consumedPoints&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Reset on successful authorisation&lt;/span&gt;
          &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;limiterConsecutiveFailsByEmailAndIP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailIPkey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can do more thorough testing of POST requests using services such as &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;, which is a tool used to build and test APIs.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is a basic example of how to rate limit a login route in an Express app using node-rate-limiter-flexible and Redis. node-rate-limiter-flexible was used to count and limit the number of login attempts by key. Redis was used to store the keys. We created a rate limiter middleware in an existing application with a login route and authentication. Two rate limiters were created. The first rate limiter rate-limited based on IP. The second rate-limited based on IP and the user's email address. Redis Labs was set up to create an online instance of Redis. The Redis Labs instance was connected to the Express app using an endpoint URL. Redis was installed locally and was connected to the online instance of Redis. Rate-limiting was tested by viewing the database keys, using the redis-cli, after attempted logins. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some useful links for further study:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://www.youtube.com/watch?v=Hbt56gFj998"&gt;Redis Crash Course Tutorial&lt;/a&gt; - learn the basics of Redis&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://www.youtube.com/watch?v=oaJq1mQ3dFI"&gt;Redis Caching in Node.js&lt;/a&gt; - Learn how to cache API calls using Redis.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://codeburst.io/api-rate-limiting-with-node-and-redis-95354259c768"&gt;API Rate Limiting  with Node and Redis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) &lt;a href="https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example"&gt;node-rate-limiter-flexible: rate-limiting examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) &lt;a href="https://redis.io/documentation"&gt;Redis documentation&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;6) &lt;a href="https://docs.redislabs.com/latest/"&gt;Redis Labs documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7) &lt;a href="https://www.youtube.com/c/Redislabs"&gt;Redis Labs YouTube channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>redis</category>
      <category>security</category>
    </item>
    <item>
      <title>Location.reload()</title>
      <author>Maxine Meurer</author>
      <pubDate>Mon, 31 May 2021 20:08:14 +0000</pubDate>
      <link>https://dev.to/mmeurer00/location-reload-a55</link>
      <guid>https://dev.to/mmeurer00/location-reload-a55</guid>
      <description>&lt;p&gt;Before, I write a single word about Javascript, allow me to say one thing, it's a beast. &lt;/p&gt;

&lt;p&gt;Switching gears from Ruby to JS threw me for a loop, but after lots of practice and reading it all started to click. So,  speaking of clicking, let's explore Javascript and all that can be done in a single click. &lt;/p&gt;

&lt;p&gt;The beastly language was Phase four of Flatiron's curriculum, and with every phase comes a project. I was scrambling just to learn the language &lt;em&gt;in a 2 weeks&lt;/em&gt;, and now I had to make a single page application. &lt;em&gt;oof&lt;/em&gt;. But, somehow, we managed, and here we are writing this blog post with some Javascript knowledge (&lt;em&gt;that will be expanded upon over time&lt;/em&gt;), and a fully completed project. &lt;/p&gt;

&lt;p&gt;When creating my first S.P.A (Single Page Application), I encountered setbacks, as most new programmers will when coding, and that's okay! My biggest piece of advice for this, disregarding the language, is to read documentation! &lt;a href="https://developer.mozilla.org/en-US/"&gt;Mozilla&lt;/a&gt; is what is used for Javascript, and thoroughly explains each and every concept there is. This will save you hours of time and frustration, and unlike some other documentation (I found) Mozilla is easy to read and understand.  &lt;/p&gt;

&lt;p&gt;Out of all the setbacks, I found that not having my application reload/refresh after I made a submission of some kind was very annoying. The last thing I wanted was for a user to be confused about their submission, or have to manually refresh it after, each time. Upon some googling and research came &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/reload"&gt;&lt;strong&gt;Location.reload()&lt;/strong&gt;&lt;/a&gt;. This magic method reloads the current URL, similarly to a user manually refreshing the page. Exactly what I needed! &lt;/p&gt;

&lt;p&gt;Adding it into your code is simple. Wherever your input or button tags exist, add it in! See the following from my code as an example: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0kOJgdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwxjr60n3tvf66x5tvgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0kOJgdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwxjr60n3tvf66x5tvgy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you have it! An application that instantly reloads upon submission. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>spa</category>
      <category>beginners</category>
      <category>shecoded</category>
    </item>
    <item>
      <title>Code-server additional settings</title>
      <author>VivekAsCoder</author>
      <pubDate>Mon, 31 May 2021 20:00:16 +0000</pubDate>
      <link>https://dev.to/vivekascoder/code-server-additional-settings-1c59</link>
      <guid>https://dev.to/vivekascoder/code-server-additional-settings-1c59</guid>
      <description>&lt;h1&gt;
  &lt;a href="#things-that-i-forgot-in-the-video"&gt;
  &lt;/a&gt;
  Things that i forgot in the video.
&lt;/h1&gt;

&lt;p&gt;Here is the link to the vide.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YEuZPNza5Dg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-thing-to-mention"&gt;
  &lt;/a&gt;
  A quick thing to mention
&lt;/h2&gt;

&lt;p&gt;I forgot to tell you one important thing. You can access your code-server from any &lt;br&gt;
browser without even ssh'ing into your remote server.&lt;/p&gt;

&lt;p&gt;See the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ja6rgm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WxfBhfD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ja6rgm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WxfBhfD.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to change the &lt;code&gt;bind-addr&lt;/code&gt; in your config file which is located at &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Path: &lt;code&gt;~/.config/code-server/config.yaml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-addr: 0.0.0.0:8000
auth: password
password: SECRET_PASSWORD
cert: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;0.0.0.0&lt;/code&gt; indicates that you can access using your localhost as weel as the public&lt;br&gt;
IP Address of your remote machine.&lt;br&gt;
So basically, it means you can use either &lt;code&gt;localhost:8000&lt;/code&gt; (With port forwarding) or&lt;br&gt;
&lt;code&gt;divcorn.com:8000&lt;/code&gt; (without port forwarding).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-with-raw-localhost-endraw-or-raw-127001-endraw-"&gt;
  &lt;/a&gt;
  Case with &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It basically says that the traffic is only accessible from your local machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-with-raw-0000-endraw-"&gt;
  &lt;/a&gt;
  Case with &lt;code&gt;0.0.0.0&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It basically says that the traffic is accessible from your local machine as well as &lt;br&gt;
public ip address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-access-with-raw-divcorncom-endraw-only"&gt;
  &lt;/a&gt;
  I want to access with &lt;code&gt;divcorn.com&lt;/code&gt; only.
&lt;/h2&gt;

&lt;p&gt;That's a good question, you can achieve it from one of the following ways.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-port-80"&gt;
  &lt;/a&gt;
  Using port 80
&lt;/h3&gt;

&lt;p&gt;When we enter the address of a website, our web browser tries to conect to port 80 by default, that means &lt;code&gt;divcorn.com&lt;/code&gt; and &lt;code&gt;divcorn.com:80&lt;/code&gt; are the same.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code&gt;0.0.0.0:8000&lt;/code&gt;, you can use &lt;code&gt;0.0.0.0:80&lt;/code&gt; then run it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Make sure to stop other services (if any) which are running on port 80.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#using-reverse-proxy-with-nginx-preferred"&gt;
  &lt;/a&gt;
  Using Reverse Proxy with NginX (Preferred)
&lt;/h3&gt;

&lt;p&gt;Many times you might be using you port 80 for your website hosting (if any).&lt;br&gt;
In those cases we can add a &lt;code&gt;CNAME&lt;/code&gt; record from our domain's DNS management console.&lt;br&gt;
Which is pointing to &lt;code&gt;@&lt;/code&gt; or your public ip address and value will be a string example &lt;br&gt;
&lt;code&gt;code&lt;/code&gt;. Then we can create a nginx config file where we will listen at port 80 from the&lt;br&gt;
url &lt;code&gt;code.divcorn.com&lt;/code&gt; and use the reverse proxy to direct the traffic from port 8000 to&lt;br&gt;
the port 80 with &lt;code&gt;code.divcorn.com&lt;/code&gt; only.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want a video on it, please make sure to tell me.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>cloudskills</category>
      <category>azureapril</category>
    </item>
  </channel>
</rss>
