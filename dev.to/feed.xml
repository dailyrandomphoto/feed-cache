<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Feel like a secret agent: Hidden messages in images with steganography üñºÔ∏èüïµÔ∏è‚Äç‚ôÄÔ∏è</title>
      <author>Pascal Thormeier</author>
      <pubDate>Sat, 19 Jun 2021 18:22:38 +0000</pubDate>
      <link>https://dev.to/thormeier/feel-like-a-secret-agent-hidden-messages-in-images-with-steganography-37kh</link>
      <guid>https://dev.to/thormeier/feel-like-a-secret-agent-hidden-messages-in-images-with-steganography-37kh</guid>
      <description>&lt;p&gt;James Bond, Ethan Hunt, Napoleon Solo - secret agents working in disguise, sending secret messages to their employer and other agents. Let's be honest, secret agents are cool. At least in the movies and books. They get awesome gadgets, hunt down villains, get to visit fancy clubs with fancy clothes. And at the end of they day, they save the world. When I was a kid, I would've loved to be a secret agent.&lt;/p&gt;

&lt;p&gt;In this post, I'm going to show you a technique that might well be used by secret agents to hide images within other images: Steganography.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-first-whats-steganography-anyways"&gt;
  &lt;/a&gt;
  But first: What's steganography anyways?
&lt;/h2&gt;

&lt;p&gt;Steganography could be something invented by the famous engineer Q of MI6 in "James Bond" movies, but it's actually much older! Hiding messages or images from eyes that shouldn't see them was a thing since the ancient times already.&lt;/p&gt;

&lt;p&gt;According to Wikipedia, in 440 BC, Herodotus, an ancient Greek writer, once shaved the head of one of his most loyal servants to write a message on their bald head and sent the servant to the recipient once their hair grew back.&lt;/p&gt;

&lt;p&gt;We're not going to shave anyone today, let alone hide messages on each others heads. Instead, we're hiding an image in another image.&lt;/p&gt;

&lt;p&gt;To do this, we get rid of insignificant parts of the colors of one image and replace it with the significant parts of the colors of another image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-what-significant-insignificant"&gt;
  &lt;/a&gt;
  Wait, what? Significant, insignificant?
&lt;/h2&gt;

&lt;p&gt;To understand what that means, we first need to know how colors work, for example, in PNG. Web devs might be familiar with the hex notations of colors, such as &lt;code&gt;#f60053&lt;/code&gt;, or &lt;code&gt;#16ee8a&lt;/code&gt;. A hex color consists of four different parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;#&lt;/code&gt; as a prefix&lt;/li&gt;
&lt;li&gt;Two hex digits for red&lt;/li&gt;
&lt;li&gt;Two hex digits for green&lt;/li&gt;
&lt;li&gt;Two hex digits for blue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the values can go from &lt;code&gt;00&lt;/code&gt; to &lt;code&gt;FF&lt;/code&gt; for each color, this means it's going from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; in decimal. In binary, it would go from &lt;code&gt;00000000&lt;/code&gt; to &lt;code&gt;11111111&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Binary works very similar to decimal: The further left a single digit is, the higher it's value. The "significance" of a bit therefore increases, the further left it is.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;11111111&lt;/code&gt; is almost twice as large as &lt;code&gt;01111111&lt;/code&gt;, &lt;code&gt;11111110&lt;/code&gt; on the other hand is only slightly smaller. A human eye most likely won't notice the difference betweeen &lt;code&gt;#FFFFFF&lt;/code&gt; and &lt;code&gt;#FEFEFE&lt;/code&gt;. It will notice the difference between &lt;code&gt;#FFFFFF&lt;/code&gt; and &lt;code&gt;#7F7F7F&lt;/code&gt;, though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-hide-an-image-with-js"&gt;
  &lt;/a&gt;
  Let's hide an image with JS
&lt;/h2&gt;

&lt;p&gt;Let's hide this stock image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxSj2H49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jot4yko32tc5o3ej8xu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxSj2H49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jot4yko32tc5o3ej8xu.png" alt="A stock image of a computer with some CLI output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in this cat image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWjpVPi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kggvmlnuwti4w9pdot2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWjpVPi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kggvmlnuwti4w9pdot2o.png" alt="A fluffy orange cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Im going to write a little Node script to hide an image in another. This means my script needs to take three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The main image&lt;/li&gt;
&lt;li&gt;The hidden image&lt;/li&gt;
&lt;li&gt;The destination&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's code this out first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mainImagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hiddenImagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetImagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="c1"&gt;// node hide-image.js ./cat.png ./hidden.png ./target.png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far so good. Now I'll install &lt;a href="https://www.npmjs.com/package/image-size"&gt;image-size&lt;/a&gt; to get the size of the main image and &lt;a href="https://www.npmjs.com/package/canvas"&gt;canvas for node&lt;/a&gt; to inspect the images  and generate a new image.&lt;/p&gt;

&lt;p&gt;First, let's find out the dimensions of the main image and the secret image and create canvasses for both of them. I'll also create a canvas for the output image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image-size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mainImagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hiddenImagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetImagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imageSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainImagePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeHidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imageSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hiddenImagePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvasMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sizeMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvasHidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sizeHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvasTarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sizeMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvasMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextHidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvasHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextTarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvasTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I need to load both images into their respective canvasses. Since these methods return promises, I put the rest of the code in an immediately invoked function expression that allows for async/await:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mainImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainImagePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;contextMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hiddenImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hiddenImagePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;contextHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hiddenImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizeHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I iterate over every single pixel of the images and get their color values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;sizeHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;sizeHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colorMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colorHidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these values, I can now calculate the "combined" color of every pixel that I'm going to draw into the target image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calculating-the-new-color"&gt;
  &lt;/a&gt;
  Calculating the new color
&lt;/h2&gt;

&lt;p&gt;I said something about significant bits earlier. To actually calculate the color, let me illustrate this a bit further.&lt;/p&gt;

&lt;p&gt;Let's say, I want to combine the red parts of colors A and B. I'll represent their bits (8bit) as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A7 A6 A5 A4 A3 A2 A1 A0 (color A)
B7 B6 B5 B4 B3 B2 B1 B0 (color B)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To hide the color B in the color A, I replace the first (right most), lets say, 3 bits of A with the last (left most) bits of B. The resulting bit pattern would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A7 A6 A5 A4 A3 B7 B6 B5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means, I lose some information of both colors, but the combined color will not look much different than the color B itself.&lt;/p&gt;

&lt;p&gt;Let's code this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;combineColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aBinary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bBinary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;aBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;aBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;aBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;aBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;aBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;bBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;bBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;bBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can now use that function in the pixel loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colorMain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextMain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colorHidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextHidden&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;combinedColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;combineColors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colorMain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;colorHidden&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="nx"&gt;combineColors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colorMain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;colorHidden&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="nx"&gt;combineColors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colorMain&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;colorHidden&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;contextTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rgb(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;combinedColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;combinedColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;combinedColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;
&lt;span class="nx"&gt;contextTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Almost there, now I only need to save the resulting image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvasTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetImagePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmYLpX7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6i6fx9eposz68hiparc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmYLpX7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6i6fx9eposz68hiparc.png" alt="An image hidden in the cat image from above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on your screen settings, you might see the pattern of the hidden image in the top half of the image. Usually, you would use an image that obfuscates the hidden image more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-how-do-i-restore-the-hidden-image"&gt;
  &lt;/a&gt;
  And how do I restore the hidden image?
&lt;/h2&gt;

&lt;p&gt;To extract the hidden image, all that's necessary is to read out the last 3 bits of each pixel and make them the most significant bits again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cBinary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;cBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
    &lt;span class="nx"&gt;cBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
    &lt;span class="nx"&gt;cBinary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;00000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I do this for every single pixel, I get the original image again (plus a few artifacts):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuQpRN0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijrlpe9vww27bpy11g3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuQpRN0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijrlpe9vww27bpy11g3n.png" alt="Original image in lower quality"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can feel like a real secret agent by hiding images and sending hidden messages to other secret agents!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;or a&lt;/em&gt; ü¶Ñ&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ‚òï&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; üê¶&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>cryptography</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Time Complexity</title>
      <author>Evan</author>
      <pubDate>Sat, 19 Jun 2021 17:57:39 +0000</pubDate>
      <link>https://dev.to/evandaley/time-complexity-for-dummies-3aid</link>
      <guid>https://dev.to/evandaley/time-complexity-for-dummies-3aid</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;To set the stage - pretend you have an array with &lt;code&gt;n&lt;/code&gt; elements, and you have some code that does something to that array. The length of time it takes the program to run might be proportional to the length of the array. If the array has 100 items, and you loop over the array 100 times, you are doing roughly 10,000 operations. Looking at Big O Notation gives you a way to classify that operation. Generally O(n) is considered okay, and O(n^2) is bad!&lt;/p&gt;

&lt;p&gt;This might seem scary at first but really isn't too bad once you get the hang of it.&lt;/p&gt;

&lt;p&gt;If someone asks about time complexity, they usually want you to categorize the code in one of these groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O(1) - Constant time complexity&lt;/li&gt;
&lt;li&gt;O(n) - Linear time complexity&lt;/li&gt;
&lt;li&gt;O(n^2) - Quadratic time complexity&lt;/li&gt;
&lt;li&gt;O(log n) - Logarithmic time complexity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#constant-time-o1"&gt;
  &lt;/a&gt;
  Constant Time: O(1)
&lt;/h2&gt;

&lt;p&gt;This is a simple operation that runs immediately, regardless of the length of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("The first item is:", items[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use case: Doing something simple, one time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-time-on"&gt;
  &lt;/a&gt;
  Linear Time: O(n)
&lt;/h2&gt;

&lt;p&gt;Imagine you have an array of numbers and you want to double each item. To do that, you would just need to touch each number once. The length of time it takes the program to run is proportional to the length of the array. 15 items means your program does roughly 15 operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5HeKLih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8fenlkgpi6eng46vdgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5HeKLih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8fenlkgpi6eng46vdgm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the length of the array goes up, the execution time goes up proportionally. &lt;/p&gt;

&lt;p&gt;Lets visualize that with some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let numbers = [0, 4, 10, 12]
for (let i = 0; i &amp;lt; numbers.length; i++) {
  numbers[i] = numbers[i] * 2
}
console.log(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we hit each item once, the execution time correspond 1-to-1 with the length of the array. This is known as linear time!&lt;/p&gt;

&lt;p&gt;Use case: Any situation where you need to go through an array up to one time. &lt;/p&gt;

&lt;p&gt;Examples: &lt;code&gt;.map&lt;/code&gt;, &lt;code&gt;.filter&lt;/code&gt;, &lt;code&gt;.reduce&lt;/code&gt;, &lt;code&gt;.some&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quadratic-time-on2"&gt;
  &lt;/a&gt;
  Quadratic Time: O(n^2)
&lt;/h2&gt;

&lt;p&gt;Now imagine that for some reason, you have to loop through the list completely, one time for every item in the list. That might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let numbers = [0, 4, 10, 12]
for (let i = 0; i &amp;lt; numbers.length; i++) {
  for (let j = 0; j &amp;lt; numbers.length; j++) {
    const a = numbers[i]
    const b = numbers[j]
    const product = a * b
    console.log(`${a} times ${b} = ${product}`)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since that list has 4 items, and we loop over the whole list 4 times, we end up with 16 total operations (4^2). The length of time it takes to run the program is roughly proportional to the length of the array &lt;em&gt;multiplied by itself&lt;/em&gt;. This is known as O(n^2). &lt;/p&gt;

&lt;p&gt;Generally, if you have a for-loop inside another for-loop and they both have length n, the answer is O(n^2).&lt;/p&gt;

&lt;p&gt;Use case: Bubble Sort, checking for duplicates, finding all possible pairs, &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logarithmic-time-olog-n"&gt;
  &lt;/a&gt;
  Logarithmic Time: O(log n)
&lt;/h2&gt;

&lt;p&gt;The last big one to pay attention to is O(log n). Its a little trickier to explain the math behind this one, but this one applies to most algorithms that divide and conquer. &lt;/p&gt;

&lt;p&gt;Lets say someone picks a number at random from this list &lt;code&gt;[1, 3, 13, 43, 46, 52, 58, 63, 72]&lt;/code&gt;, and you're trying to guess their number.&lt;/p&gt;

&lt;p&gt;Mathmatically, the fastest way to pick the right number is to cut the results in half with each guess.&lt;/p&gt;

&lt;p&gt;Start in the middle. We pick &lt;code&gt;46&lt;/code&gt;. That number is too small. &lt;/p&gt;

&lt;p&gt;At this point, we know the number is in the list &lt;code&gt;[52, 58, 63, 72]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets cut that in half again. We guess &lt;code&gt;58&lt;/code&gt;. That number is too large.&lt;/p&gt;

&lt;p&gt;Now we know the number is &lt;code&gt;52&lt;/code&gt; since thats the only thing left (smaller than &lt;code&gt;58&lt;/code&gt; and larger than &lt;code&gt;46&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The act of dividing the data set in half each time guarantees that we find a result in a certain number of guess. With 9 elements in our array, we know we'll find the answer within 4 guesses (log2(9)). For a dataset of length n, the answer will always be found within log2(n) guesses. &lt;/p&gt;

&lt;p&gt;The only thing you really need to remember about this one is that it applies to divide and conquer algorithms. Anything like binary search that cuts the results in half each time. &lt;/p&gt;

&lt;p&gt;Use case: Binary search, Divide and conquer, most recursive algorithms, &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;Thats pretty much it. Being comfortable with those 3 should cover you in like 99% of interview questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-study"&gt;
  &lt;/a&gt;
  Further Study
&lt;/h2&gt;

&lt;p&gt;Some questions also ask about space complexity. This is the same premise, but they want to know how much space is required for the solution. Are you creating a full copy of the array? That would be O(n) space.&lt;/p&gt;

&lt;p&gt;And there is one other classification of time complexity that comes up very rarely: O(n * log n). &lt;br&gt;
The premise is that you loop over the whole array, and for each item, do some kind of O(log n) operation. It comes up with partitioning and quicksort but thats about it. Its basically just as bad as O(n^2) but with extra steps, and its just slightly better.&lt;/p&gt;

&lt;p&gt;If you want to go deeper, this article does a pretty good job covering more scenarios.&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/big-o-notation-why-it-matters-and-why-it-doesnt-1674cfa8a23c/"&gt;https://www.freecodecamp.org/news/big-o-notation-why-it-matters-and-why-it-doesnt-1674cfa8a23c/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article also goes into great detail:&lt;br&gt;
&lt;a href="https://adrianmejia.com/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/"&gt;https://adrianmejia.com/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript for Web Development</title>
      <author>KUMAR HARSH</author>
      <pubDate>Sat, 19 Jun 2021 17:50:18 +0000</pubDate>
      <link>https://dev.to/cenacr007_harsh/javascript-for-web-development-2c22</link>
      <guid>https://dev.to/cenacr007_harsh/javascript-for-web-development-2c22</guid>
      <description>&lt;p&gt;&lt;strong&gt;This blog is inspired by the Tweet by &lt;a href="https://twitter.com/Prathkum"&gt;Pratham&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For more amazing content do follow him on Twitter.&lt;/p&gt;

&lt;p&gt;Now let's dive into the blog: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; is an enormous language but you don't need to learn everything in the beginning.&lt;/p&gt;

&lt;p&gt;Here is the detailed explanation on JavaScript for Web Development.&lt;/p&gt;

&lt;p&gt;JavaScript is a kind of language that as you progress deeper in the field, you will come to know a lot more cool concepts about it.&lt;/p&gt;

&lt;p&gt;Prerequisites if you want to learn JavaScript for web development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First and foremost, it's a programming language so you should know about basic programming concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data types in JavaScript&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Statements&lt;/li&gt;
&lt;li&gt;Control statements&lt;/li&gt;
&lt;li&gt;Operators&lt;/li&gt;
&lt;li&gt;And other basic stuff....&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you know programming beforehand and have some experience in any programming language like C, C++, Java, Python etc. then this should not be hard for you.&lt;/p&gt;

&lt;p&gt;But you can start with the &lt;strong&gt;ZERO&lt;/strong&gt; knowledge as well.&lt;/p&gt;

&lt;p&gt;There are some advanced topics in JavaScript which you don't need to learn in the beginning. For ex:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Async/await&lt;/li&gt;
&lt;li&gt;callbacks, promises, etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some advance concept which you can learn after you have a decent knowledge of JavaScript.&lt;/p&gt;

&lt;p&gt;You need to cover some intermediate topics so that you can add behaviour to your website. They are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays and their methods&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Arrow function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will help you to work with DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Id1krQ8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kob6c1kmtz8bcp3y8fsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Id1krQ8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kob6c1kmtz8bcp3y8fsj.png" alt="dom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's talk about &lt;strong&gt;DOM&lt;/strong&gt; a little bit. It stands for &lt;strong&gt;Document Object Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consider it as a tree that comprises the content of a particular web page (HTML)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7fDCWIn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4omwdz6s0e480o7dvz1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7fDCWIn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4omwdz6s0e480o7dvz1.jpg" alt="dom2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript and DOM are connected.&lt;/p&gt;

&lt;p&gt;We use DOM to access the elements but write JavaScript code in order to modify them.&lt;/p&gt;

&lt;p&gt;Here is a simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZhcHCz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe15hif5zcz3oewisrss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZhcHCz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe15hif5zcz3oewisrss.png" alt="para"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't get confused here. DOM is not a programming language it's just a model using which we can access and modify HTML elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basic things you need to cover in DOM&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-html-elements"&gt;
  &lt;/a&gt;
  Finding HTML Elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getElementsByTagName()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsById()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementsByClassName()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#changing-html-element"&gt;
  &lt;/a&gt;
  Changing HTML Element
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element.innerHTML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.attribute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element .style.property&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;element.setAttribute&lt;/code&gt;(attr, value)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#adding-and-deleting-elements"&gt;
  &lt;/a&gt;
  Adding and deleting elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createElement(element)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.removeChild(element)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.appendChild(element)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just one last thing and then you will be able to make fully-fledged websites.&lt;/p&gt;

&lt;p&gt;After learning these basic properties and methods, its time to move onto Events and Event Listener&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;addEventListener()&lt;/code&gt; method attaches an event handler to the specified element.&lt;/p&gt;

&lt;p&gt;Up to this point you will able to make a fully functional website using JavaScript. But there are always some margin of improvement&lt;/p&gt;

&lt;p&gt;Here are some advanced key concepts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hoisting&lt;/li&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Callbacks&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Async &amp;amp; Await&lt;/li&gt;
&lt;li&gt;Currying&lt;/li&gt;
&lt;li&gt;And other ES6,ES7 features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project-based learning is the best. &lt;a href="https://www.freecodecamp.org/news/javascript-projects-for-beginners/"&gt;Here&lt;/a&gt; are some practice projects you can build&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do follow &lt;a href="https://twitter.com/Prathkum"&gt;Pratham&lt;/a&gt; if you liked this content and let me know if you want more such blogs about Web Development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEV Profile&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__641726"&gt;
  
    .ltag__user__id__641726 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/cenacr007_harsh" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;KUMAR HARSH&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;B.Tech (CSE) | Competitive Programming Enthusiast | Front End Web Developer | Cloud Computing (GCP) | Blogger&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/cenacr007_harsh"&gt;Follow me on Twitter&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-linkedin"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/kumarharsh22/"&gt;Follow me on Linkedin&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create a Twitch Chat Game with Javascript</title>
      <author>Saji Wang</author>
      <pubDate>Sat, 19 Jun 2021 17:34:46 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-create-a-twitch-chat-game-with-javascript-deg</link>
      <guid>https://dev.to/codesphere/how-to-create-a-twitch-chat-game-with-javascript-deg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Live Streaming is becoming an increasingly popular form of entertainment. As it grows, streamers have looked for more ways to interact with their fans. Through creating systems to automatically allow their fans to interact, streamers have created viral sensations such as Twitch Plays Pokemon, in which commenters can play Pokemon by typing specific commands in chat.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this tutorial, we are going to build a basic Twitch Chat Game that reads Twitch comments and uses them to allow a player to interact with the web app. While we aren't going to get too fancy in terms of what we make, we will go over the building blocks for you to make the next big Twitch game!&lt;/p&gt;

&lt;p&gt;If you'd like to follow along line by line, you can find the source code here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/LiorB-D/TwitchChatGame"&gt;https://github.com/LiorB-D/TwitchChatGame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you'd like to quickly try out the game, you can test out a demo on Codesphere right here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://link.codesphere.com/AE"&gt;https://codesphere.com/#https://github.com/LiorB-D/TwitchChatGame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the app loads in, just enter your twitch channel on line 45 of index.html and run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DVKHjGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3149xomjz8eh95ecjura.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DVKHjGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3149xomjz8eh95ecjura.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tools-well-be%C2%A0using"&gt;
  &lt;/a&gt;
  Tools We'll Be¬†Using
&lt;/h4&gt;

&lt;p&gt;The tools we are going to use in this tutorial are relatively straightforward, though you may need additional libraries and frameworks depending on what kind of game or Twitch bot you are looking for.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tmijs"&gt;
  &lt;/a&gt;
  Tmi.js
&lt;/h4&gt;

&lt;p&gt;First, the cornerstone of our interaction with Twitch chat is going to be a library called tmi.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tmijs.com/"&gt;https://tmijs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tmi.js is a well-documented javascript package that allows you to read and write to a Twitch chat. While there are a few ways to access it, including an NPM package and a ReactJS wrapper, we'll be using a static Javascript file to access tmi.js. You can download that Javascript file here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tmijs/tmi.js/releases/download/v1.8.3/tmi.min.js"&gt;https://github.com/tmijs/tmi.js/releases/download/v1.8.3/tmi.min.js&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#p5js"&gt;
  &lt;/a&gt;
  P5.js
&lt;/h4&gt;

&lt;p&gt;Next, in order to create the graphics for our very simple game, we will use p5.js, an easy-to-use graphics library for javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://p5js.org/"&gt;https://p5js.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can access p5.js via the following CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script
src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.min.js" integrity="sha512-WIklPM6qPCIp6d3fSSr90j+1unQHUOoWDS4sdTiR8gxUTnyZ8S2Mr8e10sKKJ/bhJgpAa/qG068RDkg6fIlNFA=="
crossorigin="anonymous"
&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#codesphere"&gt;
  &lt;/a&gt;
  Codesphere
&lt;/h4&gt;

&lt;p&gt;Finally, we'll be developing and deploying our app with Codesphere. Codesphere is a zero-config cloud provider that offers a Web IDE directly on its platform, in order to make deployment much more seamless.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://link.codesphere.com/AB"&gt;https://codesphere.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't wish to deploy your app, all of the steps in this tutorial will work in your text editor of choice.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-well-be%C2%A0making"&gt;
  &lt;/a&gt;
  What We'll Be¬†Making
&lt;/h4&gt;

&lt;p&gt;To keep things simple, we'll be creating an extremely simple, yet fun game for our twitch viewers to play. Here's how it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A viewer comments "join" to enter the game. They will then see their name on the screen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each round, viewers will comment "A", "B", "C", or "D", and be placed in a corresponding box on a 2x2 grid&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kxbanG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ip0klusggq4hm3550lu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kxbanG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ip0klusggq4hm3550lu3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When the round timer is over, a box is chosen at random and all players in that box are eliminated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The rounds continue until no more people are left standing&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously, a lot more can be added to increase your viewers' involvement and entertainment, but this roulette-esque game will be easy to make and allow us to focus on reading Twitch chat.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-our-express-serveroptional"&gt;
  &lt;/a&gt;
  Setting up our Express Server(Optional)
&lt;/h4&gt;

&lt;p&gt;While the game itself is going to be using static HTML and Javascript files, we can create an Express server very quickly in order to serve our game&lt;/p&gt;

&lt;p&gt;First, initialize your npm project with:&lt;br&gt;
&lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After entering the details for your project, install ExpressJS with:&lt;br&gt;
&lt;code&gt;npm i express&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that is done, create &lt;code&gt;server.js&lt;/code&gt;, &lt;code&gt;index.html&lt;/code&gt;, and a public folder for us to put our &lt;code&gt;TMI.js&lt;/code&gt; file in. Your file tree should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GSB1RdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1te2h8480ryh1jrfosr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GSB1RdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1te2h8480ryh1jrfosr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;server.js&lt;/code&gt; file, place the following code to serve our page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/LiorB-D/c39b3506840b0419340afac03f456a01"&gt;https://gist.github.com/LiorB-D/c39b3506840b0419340afac03f456a01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note the following code which was used to listen to the Twitch chat:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/LiorB-D/f30942dc11f94887fa40e3d1aac637ec"&gt;https://gist.github.com/LiorB-D/f30942dc11f94887fa40e3d1aac637ec&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h4&gt;

&lt;p&gt;There you have it! We then have the full power of Javascript to make Twitch chat games! The possibilities for viewer interaction are endless!&lt;/p&gt;

&lt;p&gt;Some cool things you can make with tmi.js and Javascript include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow Twitch Chat to play Chess against you&lt;/li&gt;
&lt;li&gt;Integrate Spotify with Nodejs and let your viewers queue songs&lt;/li&gt;
&lt;li&gt;Let your viewers compete against each other in an .io type game for prizes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tweet at us the cool things you build @CodesphereCloud!&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at Codesphere, the next generation cloud provider&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>twitch</category>
      <category>javascript</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>
Dockerzing a Python Django Web App on Ubuntu 21.04</title>
      <author>Gautam Ankul</author>
      <pubDate>Sat, 19 Jun 2021 17:25:01 +0000</pubDate>
      <link>https://dev.to/gautamankul/dickerzing-a-python-django-web-app-on-ubuntu-21-04-54o7</link>
      <guid>https://dev.to/gautamankul/dickerzing-a-python-django-web-app-on-ubuntu-21-04-54o7</guid>
      <description>&lt;p&gt;Hey Developer!Today we're learn dockerize a django application on ubuntu It's worked all linux distro ...&lt;br&gt;
This article covered a simple hello world django application In which we talk about Docker&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prerequisite-"&gt;
  &lt;/a&gt;
  prerequisite :
&lt;/h1&gt;

&lt;p&gt;1.Ubuntu (any linux Distro)&lt;br&gt;
2.Python Pip, the package manager&lt;br&gt;
3.Python2 and Python3 &lt;br&gt;
4.Docker&lt;br&gt;
5.Django&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Docker&lt;/strong&gt;&lt;br&gt;
Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Use of Docker&lt;/strong&gt;&lt;br&gt;
When building web applications, you have probably reached a point where you want to run your application in a fashion that is closer to your production environment. Docker allows you to set up your application runtime in such a way that it runs in exactly the same manner as it will in production, on the same operating system, with the same environment variables, and any other configuration and setup you require.&lt;/p&gt;

&lt;p&gt;Means,Docker facilitate to Developer to work with from another existing project own system Docker container holds the entire package of application with own resources. like below example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUn0Nvjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ocsc4e2gxfifpytb02x.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUn0Nvjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ocsc4e2gxfifpytb02x.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are going for Docker installation in Ubuntu for that follow official link .&lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Docker Installation Link &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check Docker version in your system like &lt;code&gt;$ docker --version&lt;/code&gt; if it show like this &lt;code&gt;Docker version 20.10.7, build f0df350&lt;br&gt;
&lt;/code&gt; mean docker installed your system&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Django Project in Pip Environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us, make a directory and install pipenv in that directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir docker-project &amp;amp;&amp;amp; cd docker-project

$ pipenv install django

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we Activate our Environment .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pipenv shell

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now We are create a Django project and Django app..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ django-admin startproject hello-project .

$ cd hello-project

$ python3 manage.py startapp pages

$ python3 manage.py migrate

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now We are going to runserver for all set..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 manage.py runserver

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xla0YOhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87l3v6ym2ziwqkrxt7ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xla0YOhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87l3v6ym2ziwqkrxt7ow.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At Now we are configure file and render &lt;code&gt;hello world&lt;/code&gt; on web page let get start..&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change in setting.py:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# hello_project/settings.py
INSTALLED_APPS = [
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
'pages.apps.PagesConfig', # new

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Change in hello-project urls.py:&lt;/p&gt;

&lt;p&gt;Now we can set the URL route for the pages app. Since we want our message to appear&lt;br&gt;
on the homepage we‚Äôll use the empty string '' . Don‚Äôt forget to add the include import&lt;br&gt;
on the second line as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# hello_project/urls.py

from django.contrib import admin
from django.urls import path, include # new
urlpatterns = [
path('admin/', admin.site.urls),
path('', include('pages.urls')), # new
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Change in pages view.py:
Rather than set up a template at this point we can just hardcode a message in our
view layer at pages/views.py which will output the string ‚ÄúHello, World!‚Äù.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pages/views.py

from django.http import HttpResponse
def home_page_view(request):
    return HttpResponse('Hello, World!')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note:We are create a file in pages (app directory) which name should be &lt;code&gt;urls.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4.Change in page urls.py:&lt;br&gt;
Within your text editor import path on the top line, add the home_page_view , and then&lt;br&gt;
set its route to again be the empty string of '' . Note that we also provide an optional&lt;br&gt;
name, home , for this route which is a best practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pages/urls.py

from django.urls import path
from .views import home_page_view
urlpatterns = [
path('', home_page_view, name='home')
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are done for configure and runserver and see like this page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HE5FXa3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx3a08i83x8vy0fs92m6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HE5FXa3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx3a08i83x8vy0fs92m6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#notice-now-are-exit-the-django-virtual-environment-for-docker-configuration-for-quit-pipenv"&gt;
  &lt;/a&gt;
  Notice: Now are exit the  Django virtual environment for docker configuration for quit pipenv.
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(docker-project)$ exit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs create our first &lt;code&gt;Dockerfile&lt;/code&gt; to see all of this theory in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch Dockerfile

$ touch docker-compose.yml 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#note-here-dockerfile-name-should-be-raw-d-endraw-in-capital-letter-and-project-file-structure-must-be-like-following-image"&gt;
  &lt;/a&gt;
  Note: Here Dockerfile name should be &lt;code&gt;D&lt;/code&gt; in Capital letter. And Project file structure must be like following image.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BwPHlRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipr8gzkexqo7kz8tqfm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BwPHlRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipr8gzkexqo7kz8tqfm1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Docerfile

#pull base image
FROM python:3.9
# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
# Set work directory
WORKDIR /code
# Install dependencies
COPY Pipfile Pipfile.lock /code/
RUN pip install pipenv &amp;amp;&amp;amp; pipenv install --system
# Copy project
COPY . /code/

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Dockerfiles are read from top-to-bottom when an image is created. The first instruc-&lt;br&gt;
tion must be the FROM command which lets us import a base image to use for our&lt;br&gt;
image, in this case Python 3.9.&lt;br&gt;
Then we use the ENV command to set two environment variables:&lt;br&gt;
‚Ä¢ PYTHONUNBUFFERED ensures our console output looks familiar and is not buffered&lt;br&gt;
by Docker, which we don‚Äôt want&lt;br&gt;
‚Ä¢ PYTHONDONTWRITEBYTECODE means Python will not try to write .pyc files which we&lt;br&gt;
also do not desire&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next we use WORKDIR to set a default work directory path within our image called code&lt;br&gt;
which is where we will store our code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For our dependencies we are using Pipenv so we copy over both the Pipfile and&lt;br&gt;
Pipfile.lock files into a /code/ directory in Docker and so on.....&lt;/p&gt;

&lt;p&gt;Note:&lt;br&gt;
Our image instructions are now done so let‚Äôs build the image using the command&lt;br&gt;
docker build . The period, . , indicates the current directory is where to execute the command.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Commad line

$ docker build .

...............................................
Sending build context to Docker daemon
154.1kB
Step 1/7 : FROM python:3.7
...
Step 7/7 : COPY . /code/
---&amp;gt; a48b2acb1fcc
Successfully built a48b2acb1fcc


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Moving on we now need to create a docker-compose.yml file to control how to run the&lt;br&gt;
container that will be built based upon our Dockerfile image.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.7'

services: 
    web:
        build: .
        command: python /code/manage.py runserver 0.0.0.0:8000
        volumes: 
            - .:/code
        ports: 
            - 8000:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final step is to run our Docker container using the command docker-compose up .&lt;br&gt;
This command will result in another long stream of output code on the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose up

........................................................
Creating network "hello_default" with the default driver
Building web
Step 1/7 : FROM python:3.7
...
Creating hello_web_1 ... done
Attaching to hello_web_1
web_1 | Performing system checks...
web_1 |
web_1 | System check identified no issues (0 silenced).
web_1 | September 20, 2019 - 17:21:57
web_1 | Django version 2.2.5, using settings 'hello_project.settings'
web_1 | Starting development server at http://0.0.0.0:8000/
web_1 | Quit the server with CONTROL-C.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To confirm it actually worked, go back to &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; in your web browser.&lt;br&gt;
Refresh the page and the ‚ÄúHello, World‚Äù page should still appear. because this application are running locally your's system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stop the container with Control+c (press the ‚ÄúControl‚Äù and ‚Äúc‚Äù button at the same&lt;br&gt;
time) and additionally type &lt;code&gt;docker-compose down&lt;/code&gt; . Docker containers take up a lot of&lt;br&gt;
memory so it‚Äôs a good idea to stop them in this way when you‚Äôre done using them.&lt;br&gt;
Containers are meant to be stateless which is why we use volumes to copy our code&lt;br&gt;
over locally where it can be saved.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose down

.............................
Removing hello_web_1 ... done
Removing network hello_default

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great Developer's we are create Django application custom image and now we can upload this project image on &lt;a href="https://hub.docker.com/"&gt;Docker Hub &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and fetch it and worked without any  package installation error own your system locally.&lt;br&gt;
Thank You!!&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>ubuntu</category>
      <category>docker</category>
    </item>
    <item>
      <title>Software Engineering :  Interview Guide (Bangla)</title>
      <author>Md. Kawser Habib </author>
      <pubDate>Sat, 19 Jun 2021 17:14:48 +0000</pubDate>
      <link>https://dev.to/khabib97/interview-guide-bangla-1302</link>
      <guid>https://dev.to/khabib97/interview-guide-bangla-1302</guid>
      <description>&lt;p&gt;&lt;em&gt;‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï‡ßá ‡ß´ ‡¶™‡¶∞‡ßç‡¶¨‡ßá ‡¶è‡¶á ‡¶∏‡¶ø‡¶∞‡¶ø‡¶ú ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡ßá‡¶ñ‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßá‡¶∂ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡¶æ‡ßú‡¶æ ‡¶™‡¶æ‡¶á‡•§ ‡¶Ö‡¶®‡ßá‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá ‡¶∏‡¶¨ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶∞‡ßç‡¶¨‡¶ï‡ßá ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶æ‡¶ú‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡•§ ‡¶Ü‡¶∂‡¶æ‡¶ï‡¶∞‡¶ø ‡¶™‡¶æ‡¶†‡¶ï‡¶¶‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶π‡¶¨‡ßá‡•§&lt;/em&gt;   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‡¶∏‡¶´‡¶ü‡¶ì‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶®‡¶ø‡ßü‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶ó‡¶æ‡¶á‡¶°‡•§ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶¶‡¶ø‡¶§‡ßá ‡¶á‡¶ö‡ßç‡¶õ‡ßÅ‡¶ï ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶ó‡¶æ‡¶á‡¶° ‡¶≤‡¶æ‡¶á‡¶® ‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá‡•§&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;... &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E0%A6%AD%E0%A6%BE%E0%A6%B2%E0%A7%8B-%E0%A6%B8%E0%A6%AB%E0%A6%9F%E0%A6%93%E0%A6%AF%E0%A6%BC%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%B0-%E0%A6%87%E0%A6%9E%E0%A7%8D%E0%A6%9C%E0%A6%BF%E0%A6%A8%E0%A6%BF%E0%A6%AF%E0%A6%BC%E0%A6%BE%E0%A6%B0-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%B9%E0%A6%AC%E0%A7%87%E0%A6%A8-%E0%A6%AD%E0%A6%BE%E0%A6%B2%E0%A7%8B-%E0%A6%AC%E0%A7%87%E0%A6%A4%E0%A6%A8%E0%A7%87%E0%A6%B0-%E0%A6%9A%E0%A6%BE%E0%A6%95%E0%A6%B0%E0%A6%BF-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%AA%E0%A6%BE%E0%A6%AC%E0%A7%87%E0%A6%A8"&gt;
  &lt;/a&gt;
  ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡¶´‡¶ü‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶π‡¶¨‡ßá‡¶®/ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶¨‡ßá‡¶§‡¶®‡ßá‡¶∞ ‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶®?
&lt;/h2&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC%E0%A7%A7"&gt;
  &lt;/a&gt;
  ‡¶™‡¶∞‡ßç‡¶¨-‡ßß
&lt;/h3&gt;

&lt;p&gt;‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® &lt;strong&gt;LeetCode&lt;/strong&gt; /.... ‡¶è ‡¶Ø‡¶æ‡¶®‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶ì‡¶ï‡ßá, ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶∏‡ßã‡¶ú‡¶æ ‡¶∏‡ßã‡¶ú‡¶æ ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®‡•§ ‡¶Ø‡¶æ ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶§‡¶æ‡¶á &lt;strong&gt;code&lt;/strong&gt; ‡¶ï‡¶∞‡ßá &lt;strong&gt;submit&lt;/strong&gt; ‡¶ï‡¶∞‡ßá‡¶®‡•§ ‡¶Ø‡¶¶‡¶ø &lt;strong&gt;accepted&lt;/strong&gt; ‡¶π‡¶Ø‡¶º ‡¶Ü‡¶≤‡¶π‡¶æ‡¶Æ‡¶¶‡ßÅ‡¶≤‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡•§ ‡¶®‡¶æ ‡¶π‡¶á‡¶≤‡ßá, ‡¶Ü‡¶∞‡ßã ‡¶¶‡ßÅ‡¶á ‡¶§‡¶ø‡¶® ‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡¶®‡•§ ‡¶ì‡¶ï‡ßá, ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡¶æ‡¶®‡ßç‡¶§ ‡¶¶‡ßá‡¶®‡•§ &lt;strong&gt;accepted&lt;/strong&gt; ‡¶π‡ßã‡¶ï ‡¶¨‡¶æ ‡¶®‡¶æ ‡¶π‡ßã‡¶ï, &lt;strong&gt;discussion board&lt;/strong&gt; ‡¶è ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶®‡•§ ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶°‡¶º‡ßá‡¶®‡•§ ‡¶è‡¶á ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∂‡¶ø‡¶ñ‡¶§‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§&lt;/p&gt;

&lt;p&gt;‡¶Ü‡¶∞ &lt;strong&gt;code accepted&lt;/strong&gt; ‡¶π‡¶≤‡ßá, ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶ñ‡ßÅ‡¶Å‡¶ü‡¶ø‡¶Ø‡¶º‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ü‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶°‡¶º‡ßá‡¶®‡•§ ‡ßØ-‡ßß‡ß¶ ‡¶ú‡¶®‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶™‡¶°‡¶º‡ßá‡¶®‡•§ ‡¶ï‡ßá‡¶® ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶≠‡¶æ‡¶¨‡ßá‡¶®‡•§ &lt;/p&gt;

&lt;p&gt;‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡¶§‡¶¶‡¶ø‡¶® ‡¶Ö‡¶§‡¶ø‡¶¨‡¶æ‡¶π‡¶ø‡¶§ ‡¶π‡¶¨‡ßá, ‡¶§‡¶§ ‡¶Ö‡¶§‡¶ø‡¶Æ‡¶æ‡¶®‡¶¨‡ßÄ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®, ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡•§&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC%E0%A7%A8"&gt;
  &lt;/a&gt;
  ‡¶™‡¶∞‡ßç‡¶¨-‡ß®
&lt;/h3&gt;

&lt;p&gt;‡¶π‡¶æ‡¶Å,  ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶∏‡¶π‡¶ú ‡¶ì ‡¶Æ‡ßã‡¶ü‡¶æ‡¶Æ‡ßÅ‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶Ö‡¶®‡¶æ‡ßü‡¶æ‡¶∏‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡¶´‡¶ü‡¶ì‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡ßß‡¶Æ ‡¶ì ‡ß®‡ßü ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§ &lt;br&gt;
‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Ü‡¶õ‡ßá! &lt;/p&gt;

&lt;p&gt;‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶≤‡ßá‡¶® ‡¶∏‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡¶≤‡ßá‡¶Æ‡¶ü‡¶æ ‡¶®‡¶ø‡ßü‡ßá ‡¶°‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá‡¶®, ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡¶æ‡¶∞‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßÅ‡¶ù-‡¶¨‡ßÅ‡¶ù‡¶æ‡¶≤‡ßá‡¶®, ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡ßç‡¶®‡¶æ‡¶∞ ‡¶ï‡ßá‡¶∏ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá‡¶®, ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã? &lt;br&gt;
‡¶∂‡ßÅ‡¶ß‡ßÅ LeetCode ‡¶è ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶ó‡ßá‡¶≤‡ßá, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ò‡¶æ‡¶§ ‡¶è‡¶á ‡¶ñ‡¶æ‡¶®‡ßá ‡¶ß‡¶∞‡¶æ ‡¶ñ‡¶æ‡¶¨‡ßá‡¶®‡•§ &lt;br&gt;
‡¶™‡ßç‡¶∞‡¶≤‡ßç‡¶¨‡¶≤‡ßá‡¶Æ ‡¶ï‡¶Æ‡¶® ‡¶™‡¶∞‡¶≤‡ßá, ‡¶ó‡ßÅ‡¶ü ‡¶ó‡ßÅ‡¶ü ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶≤‡ßç‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßá‡¶®‡•§ ‡¶Ü‡¶∞ ‡¶ï‡¶Æ‡¶® ‡¶®‡¶æ ‡¶™‡¶∞‡¶≤‡ßá, ‡¶ö‡ßÅ‡¶™ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶∏‡ßá ‡¶¨‡¶∏‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡¶®‡•§ ‡¶è‡¶á ‡¶¶‡ßÅ‡¶ü‡¶æ‡¶á ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶™‡¶æ‡ßü‡•§ ‡¶∞‡ßü‡ßá ‡¶∏‡ßü‡ßá ‡¶Ü‡¶∏‡ßç‡¶§‡ßá ‡¶Ü‡¶∏‡ßç‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ‡ßá ‡¶¢‡ßÅ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ó‡ßã‡¶¨‡ßá‡¶®? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡ßß‡¶Æ ‡¶ì ‡ß®‡ßü ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡¶§‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶æ‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡ßá‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡¶ø‡¶§ ‡¶∂‡ßã‡¶®‡¶æ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø‡•§ ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßã‡¶ù‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßç‡¶≤‡ßá‡¶Æ ‡¶∏‡¶≤‡ßç‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§ &lt;br&gt;
‡¶è‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡ßç‡¶∞‡¶ø ‡¶ì ‡¶™‡ßá‡¶á‡¶° ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶æ‡¶á‡¶ü ‡¶Ü‡¶õ‡ßá‡•§ ‡¶´‡ßç‡¶∞‡¶ø &lt;strong&gt;youtube&lt;/strong&gt; ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶® ‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶¨‡ßá‡¶∂ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ì ‡¶ó‡ßã‡¶õ‡¶æ‡¶®‡ßã &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA"&gt;Back to Back SWE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/tusharroy2525"&gt;Tushar Roy - Coding Made Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCWSYAntBbdd2SLYUqPIxo0w"&gt;Byte By Byte&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC4LyqX6MVkg7NU2qBbvrkSg"&gt;Algopedia&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... ‡¶Ü‡¶∞‡¶ì ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ü‡¶õ‡ßá! &lt;br&gt;
‡¶Ü‡¶Æ‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶ü‡¶æ‡¶ï‡ßá‡¶á ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡¶¨‡ßã‡•§ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶≤‡ßá, ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶ï‡ßã‡¶®‡¶ü‡¶æ‡¶á ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá ‡¶â‡¶†‡ßá ‡¶®‡¶æ ‡¶∂‡ßá‡¶∑ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ üòõ  &lt;/p&gt;

&lt;p&gt;‡¶Æ‡¶®‡ßã‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶¨‡ßÅ‡¶ù‡¶æ‡¶®‡ßã‡¶∞ ‡¶ß‡¶∞‡¶£ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶ø‡¶®‡•§ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ß‡¶∞‡¶£ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡ßá‡¶®‡•§ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶è‡¶ó‡ßã‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡ßá, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤ ‡¶π‡¶¨‡ßá‡¶® ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡•§ &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC%E0%A7%A9"&gt;
  &lt;/a&gt;
  ‡¶™‡¶∞‡ßç‡¶¨-‡ß©
&lt;/h3&gt;

&lt;p&gt;‡ß® ‡¶ü‡¶æ ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶™‡¶∞, ‡ß© ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Ü‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤  ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶π‡ßü ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§‡•§ ‡¶Ø‡¶§ ‡¶∏‡¶ø‡¶®‡¶ø‡ßü‡¶∞ ‡¶π‡¶¨‡ßá‡¶®, ‡¶è‡¶á ‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶§‡¶§ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ï‡¶†‡¶ø‡¶® ‡¶π‡¶¨‡ßá‡•§ &lt;br&gt;
‡¶è‡¶á ‡¶ú‡ßÄ‡¶¨‡¶®‡ßá ‡¶∏‡¶´‡¶ü‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶Ø‡¶§ ‡¶ï‡¶æ‡¶ú ‡¶§‡¶•‡¶æ ‡¶™‡¶æ‡¶™ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡¶®, ‡¶ï‡ßá‡¶® ‡¶ï‡¶∞‡¶õ‡ßá‡¶®, ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶õ‡ßá‡¶® ‡¶è‡¶á ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá ‡¶è‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡•§ ‡¶§‡ßã ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡¶æ‡¶®‡¶æ‡ßü‡ßá ‡¶∞‡¶æ‡¶ñ‡¶≤‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶ì ‡¶¨‡ßÅ‡¶ù‡¶æ‡¶§‡ßá ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶π‡ßü‡•§ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶ó‡ßÅ‡¶≤‡¶æ‡¶§‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ï‡ßã‡¶® ‡¶Ö‡¶∏‡¶Ç‡¶≤‡¶ó‡ßç‡¶®‡¶§‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ ‡¶Æ‡¶æ‡¶•‡¶æ‡ßü ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®‡•§ &lt;/p&gt;

&lt;p&gt;‡¶ó‡¶≤‡ßç‡¶™ ‡¶ö‡¶≤‡¶§‡ßá ‡¶ö‡¶≤‡¶§‡ßá, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡¶§‡ßá ‡¶¢‡ßÅ‡¶ï‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§ ‡¶è‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶†‡¶ø‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶´‡¶æ‡¶Å‡¶ï‡ßá ‡¶´‡¶æ‡¶Å‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡•§ &lt;br&gt;
‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡¶æ‡¶≤ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? &lt;/p&gt;

&lt;p&gt;‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ experience ‡¶Ø‡¶§ ‡¶ï‡¶Æ, ‡¶è‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡¶§ ‡¶∏‡ßã‡¶ú‡¶æ‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶´‡ßç‡¶∞‡ßá‡¶∂‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá, ‡ßß‡ß¶‡ß¶‡ß¶ ‡¶´‡¶ø‡¶ü ‡¶â‡¶Å‡¶ö‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶≤‡ßá‡¶ì ‡¶™‡¶æ‡¶∞ ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§&lt;br&gt;
‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ experience ‡¶Ø‡¶§ ‡¶¨‡ßá‡¶∂‡¶ø, ‡¶§‡¶§ ‡¶ó‡¶≠‡ßÄ‡¶∞‡ßá ‡¶¢‡ßÅ‡¶ï‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶Ü‡¶∞ ‡¶è ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶™‡ßú‡¶§‡ßá ‡¶π‡¶¨‡ßá üòõ ‡•§ ‡¶ñ‡¶æ‡¶§‡¶æ ‡¶ï‡¶≤‡¶Æ ‡¶®‡¶ø‡ßü‡ßá ‡¶¨‡¶∏‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§(‡¶™‡¶æ‡¶∞‡¶≤‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡¶ü‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá)‡•§  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‡¶è‡¶ñ‡¶® ‡¶™‡ßú‡¶¨‡ßá‡¶® ‡¶ï‡¶á ‡¶•‡ßá‡¶ï‡ßá? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶ß‡¶∞‡¶æ ‡¶¨‡¶æ‡¶Å‡¶ß‡¶æ ‡¶ï‡ßã‡¶® ‡¶¨‡¶á ‡¶®‡¶æ‡¶á üôÅ  (‡¶è‡¶ï‡¶¶‡¶Æ ‡¶®‡¶æ‡¶á ‡¶è‡¶ü‡¶æ ‡¶†‡¶ø‡¶ï ‡¶®‡¶æ, ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ú‡ßã‡¶∏ ‡¶¨‡¶á ‡¶Ü‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶™‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ì‡¶ó‡ßÅ‡¶≤‡¶æ ‡¶®‡¶æ ‡¶™‡ßú‡¶æ‡¶á ‡¶≠‡¶æ‡¶≤‡ßã üòõ) ‡•§ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶≠‡¶æ‡¶≤ ‡¶π‡¶ö‡ßç‡¶õ‡ßá &lt;a href="https://educative.io"&gt;educative&lt;/a&gt; ‡¶è‡¶∞ &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview"&gt;Grokking the System Design Interview&lt;/a&gt;‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ü‡¶æ ‡¶™‡ßá‡¶á‡¶° üôÅ ‡•§ ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ &lt;a href="https://drive.google.com/drive/u/0/folders/1Ui2Bm_eyiF3-IUO2kA2qXIKFqMLPDHaN?fbclid=IwAR0GtxSk6YQl2aZlMPGb-M7C2mG2XawJNYVprwrUPrjTzAailqwqcbmXGN0"&gt;‡¶´‡ßç‡¶∞‡¶ø ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™&lt;/a&gt; ‡¶Ü‡¶õ‡ßá‡•§ &lt;/p&gt;

&lt;p&gt;‡¶Ü‡¶∞ ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá, &lt;a href="http://highscalability.com/"&gt;highscalability&lt;/a&gt; ‡¶∏‡¶æ‡¶á‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶Æ‡¶§ ‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶á‡¶°‡¶ø‡ßü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ &lt;/p&gt;

&lt;p&gt;‡¶Ü‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®‡ßá ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßá‡¶∂ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá &lt;strong&gt;Clement&lt;/strong&gt; ‡¶è‡¶∞ &lt;strong&gt;system expart&lt;/strong&gt; ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ó‡ßÅ‡¶≤‡ßã‡•§ ‡¶ï‡ßá‡¶â ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ &lt;/p&gt;

&lt;p&gt;‡¶Ü‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø youtube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá &lt;a href="https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw"&gt;Success in Tech&lt;/a&gt;, &lt;a href="https://www.youtube.com/user/GISIGeometry"&gt;Hussein Nasser&lt;/a&gt; ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§    &lt;/p&gt;

&lt;p&gt;‡¶∏‡¶¨‡¶∂‡ßá‡¶∑‡ßá, ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶®‡¶ø‡ßü‡ßá ‡¶Æ‡¶æ‡¶•‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶ñ‡¶æ‡¶§‡¶æ‡ßü ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ü‡¶Å‡¶ï‡¶ø‡¶¨‡ßÅ‡¶Å‡¶ï‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶ï‡ßá‡¶® &lt;strong&gt;nosql/sql&lt;/strong&gt; ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá? ‡¶ï‡¶ñ‡¶® &lt;strong&gt;caching&lt;/strong&gt; ‡¶ï‡¶∞‡¶¨‡ßá‡¶® / ‡¶ï‡¶ñ‡¶® &lt;strong&gt;distributed caching&lt;/strong&gt; ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? ‡¶ï‡¶ñ‡¶®/ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá &lt;strong&gt;database&lt;/strong&gt; ‡¶è ‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶∂‡¶® ‡¶ï‡¶∞‡¶¨‡¶®‡ßá, ‡¶ï‡ßã‡¶® ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ &lt;strong&gt;indexing&lt;/strong&gt; ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§ &lt;strong&gt;microservice&lt;/strong&gt; ‡¶®‡¶æ &lt;strong&gt;monolithic architecture&lt;/strong&gt; ‡¶è ‡¶™‡ßÅ‡¶∞‡ßã ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßá‡¶®‡•§ redis ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ &lt;strong&gt;Long pooling&lt;/strong&gt; ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá &lt;strong&gt;notification system&lt;/strong&gt; ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶®‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã... ‡•§ ‡¶Ü‡¶∞‡¶ì xyz ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ‡•§ &lt;/p&gt;

&lt;p&gt;‡¶è‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡¶§‡ßá ‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡ßá‡¶á‡•§ ‡¶Æ‡¶æ‡¶•‡¶æ ‡¶†‡¶æ‡¶£‡ßç‡¶°‡¶æ ‡¶∞‡ßá‡¶ñ‡ßá ‡¶Ü‡¶∏‡¶§‡ßá ‡¶Ü‡¶∏‡¶§‡ßá ‡¶Æ‡ßã‡¶ü‡¶æ‡¶Æ‡ßÅ‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡¶≤‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡¶æ‡¶∞‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶∂‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡ßá‡¶á ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßç‚Äå ‡¶™‡¶æ‡¶∞ ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶®‡•§&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC%E0%A7%AA"&gt;
  &lt;/a&gt;
  ‡¶™‡¶∞‡ßç‡¶¨-‡ß™
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%9F%E0%A6%BE%E0%A6%B0%E0%A6%AD%E0%A6%BF%E0%A6%89-%E0%A6%95%E0%A6%B2-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%AE%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A8%E0%A7%87%E0%A6%9C-%E0%A6%95%E0%A6%B0%E0%A6%AC%E0%A7%87%E0%A6%A8"&gt;
  &lt;/a&gt;
  ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶ï‡¶≤ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?
&lt;/h4&gt;

&lt;p&gt;‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®‡ßá‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶ø‡ßü‡¶Æ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶§‡¶ø‡¶®‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶¨‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶§ ‡¶Ø‡ßá ‡¶™‡ßú‡¶≤‡ßá‡¶®, ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡¶§‡ßá‡¶á ‡¶°‡¶æ‡¶ï ‡¶®‡¶æ ‡¶™‡¶æ‡¶®, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≤‡¶æ‡¶≠ ‡¶§‡ßã ‡¶π‡¶≤ ‡¶®‡¶æ‡•§ &lt;br&gt;
‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶ï ‡¶™‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®? ‡¶è‡¶ü‡¶æ ‡¶®‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡•§ ‡¶™‡ßÅ‡¶∞‡ßã‡¶ü‡¶æ‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ + ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ï‡ßá‡•§ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‡¶∞‡¶ø‡¶ú‡¶æ‡¶∞‡ßç‡¶≠ ‡¶â‡¶™‡¶æ‡ßü (&lt;/strong&gt; X ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶§‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§ Y ‡¶ö‡¶æ‡¶ï‡ßÅ‡¶∞‡ßÄ ‡¶ï‡¶∞‡ßá, Y ‡¶ï‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶≠‡¶ø‡¶ü‡¶æ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá‡•§ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶∏‡ßç‡¶•‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶Ö‡¶§ ‡¶≠‡¶æ‡¶≤ ‡¶π‡ßü ‡¶®‡¶æ‡¶á ‡¶è‡¶ñ‡¶®‡¶ì, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶Æ‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§ &lt;strong&gt;)&lt;/strong&gt;    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LinkedIn ‡¶è ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶®‡¶æ‡¶Æ‡¶ï‡¶∞‡¶æ ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßç‡¶∞‡ßÅ‡¶ü‡¶æ‡¶∞‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá‡¶®‡•§ ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßã‡¶∑‡ßç‡¶ü‡ßá ‡¶≤‡¶æ‡¶á‡¶ï ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡ßü ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® üòõ ‡•§ ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶ú‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Ö‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶¨‡ßá‡•§ ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá‡¶® ‡¶è‡¶á ‡¶¨‡¶®‡ßç‡¶ß‡¶®‡ßá, ‡¶â‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßá ‡¶è‡¶ï‡¶¶‡¶ø‡¶®‡•§ ‡¶Ü‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßã ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶°‡¶æ‡¶ï ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ üòÉ ‡•§ &lt;/li&gt;
&lt;li&gt;‡¶è‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∞‡¶ø‡¶ï‡ßç‡¶∞‡ßÅ‡¶ü‡¶æ‡¶Ç ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ ‡¶ì ‡¶´‡ßç‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏  ‡¶∞‡¶ø‡¶ï‡ßç‡¶∞‡ßÅ‡¶ü‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá‡¶®‡•§ ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∞‡¶ø‡¶ï‡ßç‡¶∞‡ßÅ‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶®‡•§ ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá‡¶ì ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶â‡¶™‡¶æ‡ßü‡ßá  ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶∏‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶§‡¶æ‡¶∞‡¶æ‡¶ì ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶Æ‡¶§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶®‡¶ï ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ &lt;/li&gt;
&lt;li&gt;‡¶Ü‡¶™‡¶®‡¶ø ‡¶®‡¶ø‡¶ú‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∞‡¶ø‡¶ï‡ßç‡¶∞‡ßÅ‡¶ü‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶®‡¶ï ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶è‡¶ü‡¶æ‡¶ì ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶â‡¶™‡¶æ‡ßü‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶§‡¶æ‡¶á ‡¶¨‡¶≤‡ßá ‡¶ó‡¶£ ‡¶®‡¶ï ‡¶¶‡¶ø‡ßü‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶∂‡ßÅ‡¶®‡ßá, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞  job description ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü ‡¶§‡¶¨‡ßá‡¶á ‡¶®‡¶ï ‡¶¶‡¶ø‡ßü‡ßá‡¶®‡•§ &lt;/li&gt;
&lt;li&gt;‡¶è‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá LinkedIn ‡¶è ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶ú‡¶¨ ‡¶™‡ßã‡¶∑‡ßç‡¶ü‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶á‡¶ö‡ßç‡¶õ‡¶æ ‡¶Æ‡¶§‡¶® ‡¶∏‡¶¨ ‡¶ú‡¶¨‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶§‡ßá‡¶á ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶∂‡ßÅ‡¶®‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§
LinkedIn ‡¶è ‡¶ú‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶Ö‡¶® ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶ì‡¶™‡ßá‡¶® ‡¶ü‡ßÅ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶è‡¶§‡ßá ‡¶∞‡¶ø‡¶ï‡ßç‡¶∞‡ßÅ‡¶ü‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ú‡¶∞ ‡¶™‡ßú‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶¨‡¶æ‡ßú‡¶¨‡ßá‡•§
&lt;/li&gt;
&lt;li&gt;‡¶∏‡¶Æ‡ßü ‡¶™‡ßá‡¶≤‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü LinkedIn ‡¶è ‡¶™‡ßã‡¶∑‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶è‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶ï ‡¶™‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶¨‡¶æ‡ßú‡¶¨‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§‡¶ø ‡¶¨‡¶æ‡ßú‡¶¨‡ßá‡•§ &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‡¶è‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá &lt;strong&gt;Stackoverflow, Seek, EastNetic, Taylor Hall Recruitment, SPOTYOURJOB&lt;/strong&gt; ‡¶è‡¶Æ‡¶® ‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶ì ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ú‡¶¨ ‡¶™‡ßã‡¶∑‡ßç‡¶ü ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§  &lt;/p&gt;

&lt;p&gt;‡¶∏‡¶ø‡¶≠‡¶ø‡¶ü‡¶æ &lt;strong&gt;job description&lt;/strong&gt; ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶è‡¶≤‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡ßá, ‡¶è‡¶∞‡¶™‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡•§ ‡¶§‡¶æ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá, ‡¶°‡¶æ‡¶ï ‡¶®‡¶æ ‡¶™‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ ‡¶∂‡¶§‡¶≠‡¶æ‡¶ó‡•§   &lt;/p&gt;

&lt;p&gt;‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶â‡¶™‡¶æ‡ßü ‡¶Ö‡¶¨‡¶≤‡¶Æ‡ßç‡¶¨‡¶® ‡¶ï‡¶∞‡ßá &lt;strong&gt;LinkedIn Premium&lt;/strong&gt; ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶ì ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ü‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶ì, ‡¶¨‡ßá‡¶∂ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶ï‡¶≤ ‡¶™‡¶æ‡¶¨‡ßá‡¶® ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßç‚Äå‡•§&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%A6%AA%E0%A6%B0%E0%A7%8D%E0%A6%AC%E0%A7%AB"&gt;
  &lt;/a&gt;
  ‡¶™‡¶∞‡ßç‡¶¨-‡ß´
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#%E0%A6%87%E0%A6%A8%E0%A7%8D%E0%A6%9F%E0%A6%BE%E0%A6%B0%E0%A6%AD%E0%A6%BF%E0%A6%89-%E0%A6%8F%E0%A6%B0-%E0%A6%AD%E0%A7%9F-%E0%A6%95%E0%A6%BF%E0%A6%AD%E0%A6%BE%E0%A6%AC%E0%A7%87-%E0%A6%A6%E0%A7%82%E0%A6%B0-%E0%A6%95%E0%A6%B0%E0%A6%AC%E0%A7%87%E0%A6%A8"&gt;
  &lt;/a&gt;
  ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶è‡¶∞ ‡¶≠‡ßü ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡ßÇ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?
&lt;/h4&gt;

&lt;p&gt;‡¶Ü‡¶™‡¶®‡¶ø ‡¶≠‡¶æ‡¶≤‡ßã ‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡¶≤‡ßá‡¶®, ‡¶ú‡¶¨‡ßá ‡¶Ü‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡¶≤‡ßá‡¶®‡•§ ‡¶è‡¶ñ‡¶® ‡¶°‡¶æ‡¶ï‡¶ì ‡¶™‡ßá‡¶≤‡ßá‡¶®‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤, ‡¶ï‡¶†‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶∂‡¶∞‡ßç‡¶§‡ßá‡¶ì, ‡¶¨‡ßá‡¶∂‡¶ø‡¶∞ ‡¶≠‡¶æ‡¶ó ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶¶‡¶ø‡¶ï‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡ßã‡¶¨‡¶æ‡ßü ‡¶ß‡¶∞‡¶¨‡ßá‡•§ &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡ßã‡¶¨‡¶æ‡ßü ‡¶ß‡¶∞‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶Å‡¶ö‡¶¨‡ßá‡¶® ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Æ‡ßÇ‡¶≤/‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü‡ßá‡¶° ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶§‡ßá ‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡¶§‡ßá ‡¶¨‡¶∏‡¶æ‡•§ &lt;br&gt;
&lt;a href="https://pramp.com"&gt;pramp&lt;/a&gt; /... ‡¶è‡¶∞ ‡¶Æ‡¶§‡¶® ‡¶∏‡¶æ‡¶á‡¶ü‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶π‡¶ú‡ßá‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶è‡¶Æ‡¶® ‡¶∏‡¶æ‡¶á‡¶ü ‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶ø‡¶°‡ßá‡¶®‡ßç‡¶∏ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡ßú‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ &lt;br&gt;
‡¶è‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá ‡¶Ø‡¶¶‡¶ø ‡ß®/‡ß© ‡¶ú‡¶®  ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶®‡¶æ‡¶∞ ‡¶ú‡ßã‡¶ó‡¶æ‡ßú ‡¶ï‡¶æ‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶≠‡¶æ‡¶≤‡ßã ‡¶π‡ßü‡•§ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞‡¶æ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞‡¶æ ‡¶ö‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶°‡ßç‡¶Ø‡¶æ‡¶Æ‡¶ø ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶¶‡ßá‡ßü‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ ‡¶∏‡ßá‡¶á ‡¶∏‡¶æ‡¶•‡ßá &lt;strong&gt;peer pressure&lt;/strong&gt; ‡¶¨‡¶≤‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∑‡ßü ‡¶Ü‡¶õ‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø‡¶∞ ‡¶ó‡¶§‡¶ø ‡¶¨‡¶æ‡ßú‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡ßü‡•§ &lt;/p&gt;

&lt;p&gt;‡¶Ö‡¶®‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßú ‡¶¨‡ßú ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø ‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá‡¶á ‡¶∏‡¶ø‡¶≠‡¶ø ‡¶´‡ßá‡¶≤‡ßá, ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø ‡¶Ü‡¶õ‡ßá ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ ‡¶∏‡¶æ‡¶∞‡¶ø‡¶∞ ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶¨‡ßá‡¶∂ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶¶‡ßá‡ßü‡ßá, ‡¶≠‡¶ø‡¶∏‡¶æ‡¶ì ‡¶∏‡ßç‡¶™‡¶®‡ßç‡¶∏‡¶∞ ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶π‡¶ø‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶ö‡ßÅ‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶Ü‡¶™ ‡¶§‡ßã ‡¶Ü‡¶õ‡ßá‡¶á, ‡¶§‡¶æ‡¶∞‡¶æ‡¶ì ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶¶‡ßá‡ßü‡•§&lt;br&gt;&lt;br&gt;
‡¶∏‡ßÅ‡¶§‡¶∞‡¶æ‡¶Ç, ‡¶è‡¶á ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶æ‡¶®‡ßã ‡¶â‡¶ö‡¶ø‡¶§‡•§ ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶∏‡ßã‡¶ú‡¶æ, ‡¶´‡¶≤‡ßá ‡¶≠‡ßü ‡¶ï‡¶Æ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶∏‡¶æ‡¶•‡ßá ‡ß™-‡ß´ ‡¶ü‡¶æ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶ï‡¶≤ ‡¶™‡ßá‡¶≤‡ßá ‡¶∏‡¶æ‡¶π‡¶∏ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡ßú‡ßá ‡¶Ø‡¶æ‡ßü‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶≠‡¶æ‡¶≤‡ßã ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶π‡ßü ‡¶Ü‡¶∞ ‡¶Ö‡¶´‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ü‡ßá-‡¶¨‡¶≤‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßã ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶á ‡¶´‡ßá‡¶≤‡ßá‡¶® ‡¶Ü‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ü‡ßá-‡¶¨‡¶≤‡ßá ‡¶®‡¶æ‡¶ì ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶§‡¶¨‡ßÅ‡¶ì ‡¶§‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶¶‡ßá‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡•§ ‡¶Ø‡¶æ,  ‡¶Æ‡ßÇ‡¶≤/‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü‡ßá‡¶° ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡¶§‡ßá ‡¶∏‡¶´‡¶≤ ‡¶π‡¶§‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§      &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‡¶¨‡ßã‡¶®‡¶æ‡¶∏&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/mahmud-alnoor-tareq"&gt;‡¶§‡¶æ‡¶∞‡ßá‡¶ï‡ßá‡¶∞&lt;/a&gt; ‡¶ó‡¶æ‡¶á‡¶°&lt;/p&gt;

&lt;p&gt;‡¶Æ‡¶®‡ßá ‡¶Æ‡¶®‡ßá ‡¶≠‡ßá‡¶¨‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡ßá, ‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø‡¶ü‡¶æ ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá, ‡¶Ü‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡¶æ‡¶∞‡¶∞‡¶æ ‡¶ï‡¶≤‡¶ø‡¶ó‡•§ ‡¶§‡¶æ‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡¶∞‡¶õ‡ßá, ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø‡¶ï‡¶æ‡¶∞‡ßá‡¶∞‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ, ‡¶Ø‡¶æ ‡¶§‡¶æ‡¶∞‡¶æ ‡¶´‡ßá‡¶á‡¶∏ ‡¶ï‡¶∞‡¶õ‡ßá, ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶¶‡ßá‡¶∞‡¶ï‡ßá ‡¶¨‡ßÅ‡¶ù‡¶ø‡ßü‡ßá ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶è‡¶™‡ßç‡¶∞‡ßã‡¶ö ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡•§&lt;/p&gt;

&lt;p&gt;‡¶è‡¶á ‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶∏‡ßá‡¶ü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶¢‡ßÅ‡¶ï‡¶æ ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶ï‡¶†‡¶ø‡¶®, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¢‡ßÅ‡¶ï‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶π‡ßü ‡¶ö‡¶Æ‡ßé‡¶ï‡¶æ‡¶∞‡•§ ‡¶Ü‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â‡ßü‡¶æ‡¶∞‡¶∞‡¶æ‡¶ì ‡¶è‡¶∞‡¶ï‡¶Æ ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ï‡ßá‡¶ü‡¶ø‡¶≠ ‡¶™‡ßç‡¶∞‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶™‡ßá‡¶≤‡ßá ‡¶Æ‡ßÅ‡¶ó‡ßç‡¶ß ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ‡¶ì ‡¶•‡¶æ‡¶ï‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡¶∂‡¶ø‡•§&lt;/p&gt;

&lt;p&gt;‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶´‡¶≤‡ßã ‡¶ï‡¶∞‡¶≤‡ßá, ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßç‚Äå ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶ø‡¶â ‡¶è‡¶∞ ‡¶≠‡ßü ‡¶Ö‡¶®‡ßá‡¶ï‡¶æ‡¶Ç‡¶∂‡ßá ‡¶¶‡ßÇ‡¶∞ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§&lt;/p&gt;

</description>
    </item>
    <item>
      <title>‚Äå</title>
      <author>FRADAR</author>
      <pubDate>Sat, 19 Jun 2021 17:04:13 +0000</pubDate>
      <link>https://dev.to/fradar/-4cik</link>
      <guid>https://dev.to/fradar/-4cik</guid>
      <description>&lt;p&gt;Can you make a post with a blank title?&lt;/p&gt;

&lt;p&gt;The answer is no.&lt;/p&gt;

&lt;p&gt;Then how did I do that?!&lt;/p&gt;

&lt;p&gt;I challenge YOU to find out how I did this.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>hack</category>
      <category>html</category>
      <category>blank</category>
    </item>
    <item>
      <title>Why Developers Love to Program at Night?</title>
      <author>DotOnion</author>
      <pubDate>Sat, 19 Jun 2021 16:36:49 +0000</pubDate>
      <link>https://dev.to/dotonion/why-developers-love-to-program-at-night-1m4k</link>
      <guid>https://dev.to/dotonion/why-developers-love-to-program-at-night-1m4k</guid>
      <description>&lt;p&gt;Hello, friends. If you ask most developers when they prefer to work, many will tell you that their most productive hours are at night. This may be especially true for open source contributors who work on projects alongside their day jobs (though hopefully within healthy limits to avoid burnout).&lt;/p&gt;

&lt;p&gt;Some like to start in the evening and work into the wee hours of the morning, while others get up very early - say, at 4am - to get most of the programming work done before the daily grind starts. Today, however, we'll see why most developers like to program at night and how it can help them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-peaceful-rest"&gt;
  &lt;/a&gt;
  1. The Peaceful Rest
&lt;/h2&gt;

&lt;p&gt;When the background noise of various activities (e.g., office chatter, road traffic) is largely absent at night or in the early morning hours, many programmers experience a sense of relaxation. This allows them to be more creative and productive - especially when tackling mentally stimulating tasks like programming.&lt;/p&gt;

&lt;p&gt;The solitude and quiet, as well as the knowledge that they can work undisturbed for a few hours, often takes the stress and time pressure associated with a day's work schedule off their shoulders and allows them to produce higher quality work.&lt;/p&gt;

&lt;p&gt;Not to mention, there's nothing better than indulging in your favorite midnight snacks after you've solved a thorny problem!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-communication"&gt;
  &lt;/a&gt;
  2. Communication
&lt;/h2&gt;

&lt;p&gt;Developers working on open source projects may have a different communication rhythm than a programmer working internally at a company. Most open source communication happens asynchronously through channels like mailing lists or GitHub comments. Often, other programmers are in different countries and time zones, so real-time communication often requires developers to be night owls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-drowsy-brain"&gt;
  &lt;/a&gt;
  3. The Drowsy Brain
&lt;/h2&gt;

&lt;p&gt;It may sound counterintuitive, but as the day progresses, the brain becomes so tired that it can only focus on a single task. This essentially eliminates multitasking, which is a major hurdle to staying focused and productive. But with a tired brain, you can't afford not to stay focused!&lt;/p&gt;

&lt;p&gt;Also, many developers often make the most progress when they go to sleep thinking about the problem they're trying to solve. The subconscious mind gets to work and the answers often come in the early hours of the morning when they are still half asleep.&lt;/p&gt;

&lt;p&gt;This is not surprising as sleep boosts brain function and helps us process new information and think more creatively. When solutions present themselves in the wee hours of the morning, these developers simply get up and get to work without missing a beat.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-think-flexibly-and-creatively"&gt;
  &lt;/a&gt;
  4. Think Flexibly and Creatively
&lt;/h2&gt;

&lt;p&gt;Many programmers experience a surge of creativity at night. The prefrontal cortex, the part of the brain associated with the ability to concentrate, becomes tired at the end of the day. This seems to clear the way for more flexible and creative thinking in some people.&lt;/p&gt;

&lt;p&gt;According to Brant Hasler, assistant professor of psychiatry at the University of Pittsburgh School of Medicine, "With less of this top-down control and 'cognitive inhibition,' the brain could be freed up for divergent thinking, allowing one to make new associations between different concepts more easily." Combined with the positive mood enabled by a more relaxed environment, developers can come up with innovative ideas more easily.&lt;/p&gt;

&lt;p&gt;With no distractions and the space to focus for several hours, you can also "get in the zone." This helps you better focus on a project and get into the flow without worrying about what's going on around you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-bright-computer-screens"&gt;
  &lt;/a&gt;
  5. Bright Computer Screens
&lt;/h2&gt;

&lt;p&gt;The sleep cycle of many programmers is delayed because they look at bright screens all day. The blue light from computer screens disrupts our circadian rhythms by delaying the release of sleep-inducing melatonin, increasing alertness, and resetting the body's internal clock to a later time. As a result, developers tend to go to bed later and later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-influences-from-the-past"&gt;
  &lt;/a&gt;
  6. Influences from the Past
&lt;/h2&gt;

&lt;p&gt;In the past, most developers worked at night out of necessity because shared servers didn't have the processing power to support programming work while everyone else in the company used the servers during the day. Developers had to wait late into the night to perform tasks that weren't feasible during the day, such as testing projects, running extensive code compile-run-debug cycles, and deploying new code. Even though servers are more powerful now and most can support demand, the trend of working at night continues to be part of the culture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-conclusion"&gt;
  &lt;/a&gt;
  7. Conclusion
&lt;/h2&gt;

&lt;p&gt;While there are many reasons why developers prefer to work at night, keep in mind that being a night owl doesn't mean you should skimp on sleep. Lack of sleep leads to stress and restlessness and eventually burnout.&lt;/p&gt;

&lt;p&gt;Getting enough quality sleep is key to maintaining good physical health and brain function. For example, it helps you integrate new information, consolidate memories, think creatively, remove accumulated toxins, regulate your appetite, and prevent premature aging.&lt;/p&gt;

&lt;p&gt;Whatever your schedule, make sure you give your brain the rest it needs so you can be as productive as possible - all day, every day!&lt;/p&gt;

</description>
      <category>programmer</category>
      <category>programming</category>
      <category>night</category>
      <category>science</category>
    </item>
    <item>
      <title>The 4 C's formula by Dan Sullivan</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 19 Jun 2021 16:09:09 +0000</pubDate>
      <link>https://dev.to/sandordargo/the-4-c-s-formula-by-dan-sullivan-4l6d</link>
      <guid>https://dev.to/sandordargo/the-4-c-s-formula-by-dan-sullivan-4l6d</guid>
      <description>&lt;p&gt;I rarely review shortish free e-books, but when I thought about it, I realized there is no real reason behind. In fact, is that a problem that a book is shorter than a 100 pages? Value should not be tied to length. If you think about my book on &lt;a href="https://leanpub.com/cppconst/"&gt;How to use consts in C++&lt;/a&gt;, it's less than 50 and... Ok, I'm kidding here, but even &lt;a href="https://devreads.sandordargo.com/cpp-best-practices-by-jason-turner/"&gt;Jason Turner's C++ Best Practices is about 130 pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But getting back to the length. Do you know why a &lt;em&gt;real&lt;/em&gt; book should have at least so many pages? Because otherwise the title wouldn't fit or would not be legible on the book spine and it would be more difficult to put them on the shelves of a bookshop. That's behind this requirement.&lt;/p&gt;

&lt;p&gt;That is definitely outdated and many books could be distilled into a much clearer form if socially it would be more acceptable.&lt;/p&gt;

&lt;p&gt;This book from the &lt;a href="https://www.linkedin.com/in/dansullivansc/"&gt;Dan Sullivan&lt;/a&gt;, founder of the &lt;a href="https://www.strategiccoach.com/"&gt;Strategic Coach&lt;/a&gt; is only 84 pages including all the cartoons and the necessary clutter and by the way it's for free - well, you need to give him some of your personal data. You can &lt;a href="http://now.strategiccoach.com/4cs-formula"&gt;download it from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The 4 C's formula is about the formula that always leads to personal and entrepreneurial breakthroughs even when we are not aware of this process. By recognizing it we can find strength in our struggles, we can plan our progress and eventually our breakthroughs.&lt;/p&gt;

&lt;p&gt;Let's see the 4 Cs!&lt;/p&gt;

&lt;p&gt;The first C stands for &lt;strong&gt;commitment&lt;/strong&gt;. If you are not committed to achieve something then you'll quit when you face discomfort and uncertainty. Fear will grow within yourself and it will be too strong to tackle. In fact, it's the fear that is strong, but your commitment is too weak to find...&lt;/p&gt;

&lt;p&gt;... &lt;strong&gt;courage&lt;/strong&gt; that is the second C! If you are committed, you'll be brave enough to do whatever is necessary. Courage gives you the strength to endure even when you are afraid a bit, when things don't work out for the first time. Courage immediately grows a bigger future. When you have courage, you will go to uncharted territories where you can fail, you'll be out of your comfort zone. And that's exactly the point, because that's the territory where your courage can create...&lt;/p&gt;

&lt;p&gt;... &lt;strong&gt;capability&lt;/strong&gt;! The period of courage will lead you attain the new capabilities that you need for the breakthrough you look for. When you learn how to do new things, you gain something more than the sheer capability. Along the way, as you practice as you apply your new skills you also gain confidence.&lt;/p&gt;

&lt;p&gt;That &lt;strong&gt;confidence&lt;/strong&gt; is already a reward on its own. We all love being confident, we wish we could always feel that way. But that's only part of the reward. The even bigger payoff is that your greater confidence will increase your motivation and your ability to start over the cycle and keep growing.&lt;/p&gt;

&lt;p&gt;If you don't believe what Dan wrote, it's time to think about your breakthroughs and identify the 4 stages I described to you earlier. He claims that you'll always be able to identify those.&lt;/p&gt;

&lt;p&gt;One of my breakthroughs was that I got into &lt;a href="https://www.youtube.com/watch?v=BEmAo6Fdg-Q"&gt;C++ On Sea 2020&lt;/a&gt;, a well recognized C++ conference. Though I enjoyed all the local conferences where I was given the possibility to share my knowledge, this was on a different scale.&lt;/p&gt;

&lt;p&gt;How did I get there?&lt;/p&gt;

&lt;p&gt;I have a bucket list of 100 items where one of the items was to get into a such a conference. It's not a wish list! It's a list of things I want and I will achieve! I had the commitment and I also had to courage to send dozens of applications with different topics (to different conferences).&lt;/p&gt;

&lt;p&gt;Obviously most failed, but I practiced writing applications and in some cases I received some feedback and in some others I got into a round where the applicants could review all of the applications. It was a great source of learning. Slowly I learned more and more about how to write appealing applications.&lt;/p&gt;

&lt;p&gt;I'll never forget when I received the confirmation mail by &lt;a href="https://twitter.com/phil_nash"&gt;Phil Nash&lt;/a&gt; saying that they were overwhelmed with high quality proposals and he was pleased to say that they accepted &lt;a href="https://www.youtube.com/watch?v=BEmAo6Fdg-Q"&gt;"Undefined behaviour in the STL"&lt;/a&gt; for inclusion in the programme.&lt;/p&gt;

&lt;p&gt;It really boosted my confidence and my reputation - at least within the company. Did it lead to new commitments? Of course, I was committed to continue my journey to become a C++ expert (I'm far from it) and to &lt;a href="https://leanpub.com/u/sandordargo"&gt;publish books&lt;/a&gt;. But that's a story for another day.&lt;/p&gt;

&lt;p&gt;I truly recommend reading &lt;a href="http://now.strategiccoach.com/4cs-formula"&gt;The 4 C's formula&lt;/a&gt; by Dan Sullivan. It's free and not long, yet it offers some very important insights on how we can achieve a breakthrough once we are committed to do something!&lt;/p&gt;

&lt;p&gt;Happy reading!&lt;/p&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>selfdevelopment</category>
    </item>
    <item>
      <title>Yet Another Snazzy Rust CLI</title>
      <author>jeikabu</author>
      <pubDate>Sat, 19 Jun 2021 16:05:32 +0000</pubDate>
      <link>https://dev.to/jeikabu/yet-another-snazzy-rust-cli-k4i</link>
      <guid>https://dev.to/jeikabu/yet-another-snazzy-rust-cli-k4i</guid>
      <description>&lt;p&gt;I recently looked at using &lt;a href="https://github.com/pjeziorowski/rollout"&gt;pjeziorowski's rollout&lt;/a&gt; tool to &lt;a href="https://cyberwritings.com/publishing-articles"&gt;cross-publish to hashnode and devto&lt;/a&gt;.  Started making a few minor changes.  Then considered a few contentious changes.  And in the end decided I should just make my own in Rust.  Because... Rust in all the things.&lt;/p&gt;

&lt;p&gt;I settled on the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Post multiple places&lt;/p&gt;

&lt;p&gt;I've been using GitHub Pages and cross-posting to devto via RSS feed.  But this tends to munge articles a bit; strips syntax highlighting, adds a linefeed to end of code blocks, mangles links to other articles, etc.  All this requires manual fixing before publishing, so I've never been happy with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep articles up to date&lt;/p&gt;

&lt;p&gt;&lt;code&gt;POST&lt;/code&gt;ing is one thing, but I regularly make updates/corrections that I'd like to propogate.  Pretty much all my devto articles are out of date, for this I need &lt;code&gt;PUT&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manage &lt;code&gt;canonical_url&lt;/code&gt; (and front matter, in general)&lt;/p&gt;

&lt;p&gt;Based on where/when the original is posted set the canonical URL for the cross-posts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Async&lt;/p&gt;

&lt;p&gt;I'm impatient.  But I also anticipate needing to do a few requests to publish and update articles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdown&lt;/p&gt;

&lt;p&gt;Articles are written in markdown and may contain &lt;a href="https://jekyllrb.com/docs/front-matter/"&gt;Jekyll front-matter&lt;/a&gt; as used by Github Pages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid confusion with the original (or &lt;a href="https://github.com/fetlife/rollout"&gt;some Ruby feature flag thingie&lt;/a&gt;), I dub thee... &lt;strong&gt;BULLHORN&lt;/strong&gt; (stylized in all-caps, for obvious reasons).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devto-and-rest"&gt;
  &lt;/a&gt;
  Devto and REST
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://docs.forem.com/api/"&gt;devto API&lt;/a&gt; is pretty straight-forward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/the-state-of-rust-http-clients/"&gt;"How to choose the right Rust HTTP client"&lt;/a&gt; gives a good overview of Rust HTTP crates.  In this case, I settled on &lt;a href="https://github.com/seanmonstar/reqwest"&gt;reqwest&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Helper state&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;DevtoCrossPublish&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'s&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'s&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;api_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;reqwest&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Serialized to JSON and used as body of HTTP request&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(serde::Serialize)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;body_markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;canonical_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;#[serde(skip_serializing_if&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Vec::is_empty"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// API is expecting:&lt;/span&gt;
&lt;span class="c"&gt;// {&lt;/span&gt;
&lt;span class="c"&gt;//  article: {&lt;/span&gt;
&lt;span class="c"&gt;//      title: ...&lt;/span&gt;
&lt;span class="c"&gt;//      body_markdown: ...&lt;/span&gt;
&lt;span class="c"&gt;//  }&lt;/span&gt;
&lt;span class="c"&gt;// }&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(serde::Serialize)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Posting a new article is pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://dev.to/api/articles"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Authenticate&lt;/span&gt;
    &lt;span class="nf"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api-key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.api_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Updating an article takes a bit more.  Need to find the devto article corresponding to the original.  I decided the canonical URL was the best way to do this because once published it shouldn't change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Get page of most recent articles&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;me_articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://dev.to/api/articles/me"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api-key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.api_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Find article with matching canonical URL, if it exists&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;compare_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="py"&gt;.front_matter.canonical_url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;existing_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me_articles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;me_articles&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;me_articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;me_articles&lt;/span&gt;&lt;span class="py"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ArticleResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;me_articles&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.find&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;compare_val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Note `put` and URL for existing article&lt;/span&gt;
&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://dev.to/api/articles/{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;existing_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api-key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.api_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#medium-and-rest"&gt;
  &lt;/a&gt;
  Medium and REST
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/Medium/medium-api-docs"&gt;medium API&lt;/a&gt; is pretty limited.  You can post new articles, but you can't update (i.e. PUT) existing articles.  In fact, you can't even GET your articles.  Regardless, I'd still like to check for an article using the canonical URL to avoid POSTing a duplicate.  Unfortunately, it seems the only viable option to obtain your articles is to get your RSS feed, get individual posts, and check the HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element for the canonical link.&lt;/p&gt;

&lt;p&gt;Based on &lt;a href="https://simplabs.com/blog/2020/12/31/xml-and-rust/"&gt;this article&lt;/a&gt;, I decided to try quick-xml.  In &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="nn"&gt;quick-xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.22"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;optional&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nn"&gt;rss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;optional&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Get RSS feed&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://medium.com/feed/@{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="py"&gt;.username&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
    &lt;span class="nf"&gt;.bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;// Parse RSS feed&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;rss&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;read_from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;// Iterate over links to posts&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Get article&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="nf"&gt;.text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c"&gt;// Extract canonical `&amp;lt;link&amp;gt;` from `&amp;lt;head&amp;gt;`&lt;/span&gt;
        &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you get an article, the response body contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- SNIP --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- SNIP --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;data-rh=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt;
            &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://rendered-obsolete.github.io/2021/05/03/dotnet_calli.html"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;data-rh=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;data-rh=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/ld+json"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;data-fela-rehydration=&lt;/span&gt;&lt;span class="s"&gt;"456"&lt;/span&gt; &lt;span class="na"&gt;data-fela-type=&lt;/span&gt;&lt;span class="s"&gt;"STATIC"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- SNIP --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- SNIP --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the canonical URL with &lt;code&gt;rel="canonical"&lt;/code&gt;.  In theory we should be able to enable the &lt;code&gt;"serializer"&lt;/code&gt; feature of quick-xml and follow &lt;a href="https://docs.rs/quick-xml/0.22.0/quick_xml/de/index.html"&gt;the example&lt;/a&gt; to decode with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Debug,&lt;/span&gt; &lt;span class="nd"&gt;serde::Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug,&lt;/span&gt; &lt;span class="nd"&gt;serde::Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Head&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Workaround&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug,&lt;/span&gt; &lt;span class="nd"&gt;serde::Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq)]&lt;/span&gt;
&lt;span class="nd"&gt;#[serde(rename_all&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"lowercase"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Workaround&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug,&lt;/span&gt; &lt;span class="nd"&gt;serde::Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;quick_xml&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;de&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;enum Workaround&lt;/code&gt; is needed because serde doesn't like the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; mixed in between &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;s (see &lt;a href="https://github.com/tafia/quick-xml/issues/177"&gt;this issue&lt;/a&gt;).  However, it fails with &lt;code&gt;EndEventMismatch { expected: "link", found: "head" }&lt;/code&gt;.  If you look at the last &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; in the response it's never closed with &lt;code&gt;/&amp;gt;&lt;/code&gt;- HTML isn't necessarily valid XML.  So we'll instead need to follow the &lt;a href="https://docs.rs/quick-xml/0.22.0/quick_xml/index.html#reader"&gt;reader example&lt;/a&gt; and manually traverse the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;quick_xml&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="nf"&gt;.trim_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;is_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;quick_xml&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;events&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BytesEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BytesStart&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="nf"&gt;.read_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;is_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;End&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_head&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;is_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_head&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="nf"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// Check `e.attributes()` key/value for `rel="canonical"`, etc.&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Eof&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="nf"&gt;.clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Posting an article is similar to devto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}/users/{}/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bearer {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.api_token&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hashnode-and-graphql"&gt;
  &lt;/a&gt;
  Hashnode and GraphQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://engineering.hashnode.com/introducing-hashnode-graphql-api-public-beta-cjydzvp59001q2gs1b5zxaeaf"&gt;Hashnode provides a GraphQL API&lt;/a&gt;.  A GraphQL tutorial is out of scope, but I'll cover the basics.  &lt;a href="https://graphql.org/learn/"&gt;https://graphql.org/learn/&lt;/a&gt; is a good place for further information.&lt;/p&gt;

&lt;p&gt;Hashnode has a web-based &lt;a href="https://api.hashnode.com/"&gt;API sandbox&lt;/a&gt;, but the &lt;a href="https://github.com/graphql/vscode-graphql"&gt;VSCode extension&lt;/a&gt; is even comfier because you can test your queries and then use them directly in Rust:&lt;/p&gt;

&lt;p&gt;&lt;a href="/assets/vscode_graphql_execute.png" class="article-body-image-wrapper"&gt;&lt;img src="/assets/vscode_graphql_execute.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Populate &lt;code&gt;.graphqlrc.yaml&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://api.hashnode.com/&lt;/span&gt;
&lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;endpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://api.hashnode.com/&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${HASHNODE_API_TOKEN}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The will give requests made by the VSCode extension an &lt;code&gt;Authorization&lt;/code&gt; header based on &lt;code&gt;HASHNODE_API_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/hashnode.graphql&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;# `query` keyword and the name we'll use in client code&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# The query we'll run&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;tagCategories&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c"&gt;# Fields to include in response&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click &lt;strong&gt;Execute Query&lt;/strong&gt; in VSCode and it should output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tagCategories"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"56744721958ef13879b94cad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JavaScript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the fields in the response match what we requested.&lt;/p&gt;

&lt;p&gt;The main Rust &lt;a href="https://blog.logrocket.com/code-first-vs-schema-first-development-graphql/"&gt;code-first&lt;/a&gt; GraphQL project seems to be &lt;a href="https://github.com/graphql-rust/juniper"&gt;Juniper&lt;/a&gt;.  Seeing as how I can't abide code littered with string liter-als (pun intended), the schema-first options boil down to &lt;a href="https://github.com/davidpdrsn/juniper-from-schema"&gt;juniper-from-schema&lt;/a&gt; and &lt;a href="https://github.com/graphql-rust/graphql-client"&gt;graphql-client&lt;/a&gt;.  I started with the latter mainly because it has far more stars on github and downloads on crates.io, but also because &lt;a href="https://github.com/graphql-rust/graphql-client/blob/master/examples/github/examples/github.rs"&gt;their examples&lt;/a&gt; use reqwest.&lt;/p&gt;

&lt;p&gt;To use in Rust:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download `graphql-client` tool to `~/.cargo/bin/` (add to $PATH)&lt;/span&gt;
cargo &lt;span class="nb"&gt;install &lt;/span&gt;graphql_client_cli
&lt;span class="c"&gt;# Get hashnode API schema&lt;/span&gt;
graphql-client introspect-schema &lt;span class="nt"&gt;--output&lt;/span&gt; hashnode_schema.json https://api.hashnode.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Time for macro magic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(graphql_client::GraphQLQuery)]&lt;/span&gt;
&lt;span class="nd"&gt;#[graphql(&lt;/span&gt;
    &lt;span class="nd"&gt;schema_path&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hashnode_schema.json"&lt;/span&gt;&lt;span class="nd"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;query_path&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"src/hashnode.graphql"&lt;/span&gt;&lt;span class="nd"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;// Added to `#[derive()]` on `ResponseData`&lt;/span&gt;
    &lt;span class="nd"&gt;response_derives&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Debug"&lt;/span&gt;
    &lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="c"&gt;// Name matches query in hashnode.graphql&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;build_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c"&gt;// Post query to hashnode server&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.hashnode.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;// Response is GraphQL `[Tags]` type (array itself and contained items can be null).&lt;/span&gt;
&lt;span class="c"&gt;// But, `[Tags!]!` (nothing is null) is easier to deal with in Rust&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TagsTagCategories&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Make sure to wrap your `ResponseData` with `graphql_client::Response`!&lt;/span&gt;
    &lt;span class="c"&gt;// If you `resp.json&amp;lt;test::ResponseData&amp;gt;()` you'll get nothing because the &lt;/span&gt;
    &lt;span class="c"&gt;// response is `{ data: ResponseData }`&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;graphql_client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ResponseData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="py"&gt;.data&lt;/span&gt;
        &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="py"&gt;.tag_categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;// Turn `Option&amp;lt;Vec&amp;lt;Option&amp;lt;_&amp;gt;&amp;gt;&amp;gt;` into `Vec&amp;lt;_&amp;gt;`&lt;/span&gt;
        &lt;span class="nf"&gt;.unwrap_or_default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;// Unwrap Some() and remove None&lt;/span&gt;
        &lt;span class="nf"&gt;.filter_map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That probably looks like a lot of code and types.  Rust can infer many of the types and I could have imported the namespaces, but I find it helpful to see explicit modules and types until you understand what's going on.  The last third is just collapsing &lt;code&gt;Option&amp;lt;&amp;gt;&lt;/code&gt;/&lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see what the &lt;code&gt;#[derive()]&lt;/code&gt; and &lt;code&gt;#[graphql()]&lt;/code&gt; macros are doing behind the scenes, you can explicitly generate Rust source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;graphql-client generate src/hashnode.graphql &lt;span class="nt"&gt;--output-directory&lt;/span&gt; src &lt;span class="nt"&gt;--schema-path&lt;/span&gt; ./hashnode_schema.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;hashnode.rs&lt;/code&gt; contains the generated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#![allow(dead_code)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;OPERATION_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Tags"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"query Tags {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;  tagCategories{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    _id&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    name&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    slug&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;  }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;}"&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;serde&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nd"&gt;#[allow(dead_code)]&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;#[allow(dead_code)]&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;#[allow(dead_code)]&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;i64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;#[allow(dead_code)]&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;#[derive(Deserialize)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;TagsTagCategories&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;#[serde(rename&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"_id"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;#[derive(Serialize)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;#[derive(Deserialize)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;ResponseData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;#[serde(rename&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"tagCategories"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;tag_categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TagsTagCategories&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;graphql_client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GraphQLQuery&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Variables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ResponseData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ResponseData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;build_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;graphql_client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;QueryBody&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nn"&gt;graphql_client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;QueryBody&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;QUERY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;operation_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OPERATION_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main take-aways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You end up using both &lt;code&gt;tags::&lt;/code&gt; and &lt;code&gt;Tags::&lt;/code&gt; (note capital &lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/serde-rs/serde"&gt;serde&lt;/a&gt; is used for serialization to/from JSON&lt;/li&gt;
&lt;li&gt;The nullable GraphQL type &lt;code&gt;TYPE&lt;/code&gt; becomes &lt;code&gt;Option&amp;lt;TYPE&amp;gt;&lt;/code&gt; in Rust, while the non-nullable GraphQL &lt;code&gt;TYPE!&lt;/code&gt; becomes &lt;code&gt;TYPE&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Posting an article can be done with a "mutation".  This example is interesting because it shows how to pass arguments to GraphQL with &lt;code&gt;Variables&lt;/code&gt;.  In &lt;code&gt;hashnode.graphql&lt;/code&gt; add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;# We'll provide `$input` and `$pubId` arguments in Rust&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreatePubStory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateStoryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pubId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$hideFromFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# This is the mutation, we use arguments from above&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;createPublicationStory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publicationId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$pubId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hideFromHashnodeFeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$hideFromFeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c"&gt;# Response fields specified in fragment&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="n"&gt;createResponseFields&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# Fragment usable on CreatePostOutput types&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;fragment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;createResponseFields&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreatePostOutput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the corresponding Rust is similar to before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(graphql_client::GraphQLQuery)]&lt;/span&gt;
&lt;span class="nd"&gt;#[graphql(&lt;/span&gt;
    &lt;span class="nd"&gt;schema_path&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hashnode_schema.json"&lt;/span&gt;&lt;span class="nd"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;query_path&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"src/hashnode.graphql"&lt;/span&gt;&lt;span class="nd"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;response_derives&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Debug"&lt;/span&gt;&lt;span class="nd"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;// Add `#[derive(Default)]` to `Variables` type&lt;/span&gt;
    &lt;span class="nd"&gt;variables_derives&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Default"&lt;/span&gt;
    &lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;CreatePubStory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Struct used as mutation input&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;create_pub_story&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CreateStoryInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;content_markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="py"&gt;.body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// Tags from earlier query&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="py"&gt;.front_matter.title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;// etc...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c"&gt;// Pass `$input` and `$pub_id` arguments to `CreatePubStory` mutation in hashnode.graphql via `Variables` struct&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CreatePubStory&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;build_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;create_pub_story&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Variables&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pub_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.pub_id&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nn"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;// Since we added #[derive(Default)]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.client&lt;/span&gt;&lt;span class="nf"&gt;.post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.hashnode.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Required authorization header&lt;/span&gt;
    &lt;span class="nf"&gt;.header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.api_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;graphql_client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;create_pub_story&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ResponseData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Updating a post can be accomplished with &lt;code&gt;updateStory()&lt;/code&gt; mutation.  However, hashnode's API doesn't seem to provide a way to retrieve a post's canonical URL, so we can't use that to locate an existing article like with devto.  Instead, I'll generate a slug from the filename and look for that.  That means I'll have to handle renaming a file, but I figure that's less likely to happen than changing the title, body, or something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#miscellany"&gt;
  &lt;/a&gt;
  Miscellany
&lt;/h2&gt;

&lt;p&gt;To close this out, a few smaller topics that were useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async"&gt;
  &lt;/a&gt;
  Async
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/tokio-rs/tokio"&gt;Tokio&lt;/a&gt; seems to be the de-facto solution for async Rust.  Many of the required types like &lt;code&gt;Future&lt;/code&gt; are in the standard library, but the futures crate &lt;a href="https://rendered-obsolete.github.io/2019/10/28/async_rust_beta.html"&gt;is still pretty useful&lt;/a&gt;.  In &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;futures&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3"&lt;/span&gt;
&lt;span class="nn"&gt;tokio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["full"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;main.rs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Elsewhere:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;future&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;LocalBoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;devto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;devto&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;DevtoCrossPublish&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;devto&lt;/span&gt;&lt;span class="nf"&gt;.publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c"&gt;// Do the same for medium and hashnode...&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;future&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;join_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;join_all&lt;/code&gt; is similar to the &lt;a href="https://rust-lang.github.io/async-book/06_multiple_futures/02_join.html"&gt;&lt;code&gt;join!&lt;/code&gt; macro&lt;/a&gt; and essentially awaits an iterator of futures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error Handling
&lt;/h3&gt;

&lt;p&gt;There's been several chapters in the Rust error handling story; &lt;code&gt;failure&lt;/code&gt;, &lt;code&gt;error-chain&lt;/code&gt;, and a few others I'm forgetting.  Apparently those are old and busted, &lt;a href="https://github.com/dtolnay/anyhow"&gt;&lt;code&gt;anyhow&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/dtolnay/thiserror"&gt;&lt;code&gt;thiserror&lt;/code&gt;&lt;/a&gt; are new hotness.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;anyhow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0"&lt;/span&gt;
&lt;span class="py"&gt;thiserror&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;anyhow works with the &lt;code&gt;std::error::Error&lt;/code&gt; trait, propogates errors with &lt;code&gt;?&lt;/code&gt;, allows specifying additional context, and has some useful macros:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;anyhow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;can_fail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;anyhow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;this_fails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed to whatever"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;also_fails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.with_context&lt;/span&gt;&lt;span class="p"&gt;(||&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Check this: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;important_thing&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;whatever&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// anyhow! macro produces a anyhow::Error&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;anyhow!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Missing attribute: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;other_thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// bail! macro is shorthand for above&lt;/span&gt;
        &lt;span class="nd"&gt;bail!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Missing attribute: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From &lt;a href="https://docs.rs/anyhow/1.0.40/anyhow/struct.Error.html"&gt;the docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(anyhow::)Error works a lot like &lt;code&gt;Box&amp;lt;dyn std::error::Error&amp;gt;&lt;/code&gt;, but with these differences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error requires that the error is Send, Sync, and 'static.&lt;/li&gt;
&lt;li&gt;Error guarantees that a backtrace is available, even if the underlying error type does not provide one.&lt;/li&gt;
&lt;li&gt;Error is represented as a narrow pointer ‚Äî exactly one word in size instead of two.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;thiserror is complementary by helping create custom error types that &lt;code&gt;impl std::error::Error&lt;/code&gt; and &lt;code&gt;impl Display&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(thiserror::Error,&lt;/span&gt; &lt;span class="nd"&gt;Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;#[error(&lt;/span&gt;&lt;span class="s"&gt;"Bad path, expected {expected}: {found}"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;BadPath&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;path&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PathBuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;anyhow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="nf"&gt;.ok_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BadPath&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has several other features, check &lt;a href="https://docs.rs/thiserror/"&gt;the docs&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h3&gt;

&lt;p&gt;I'd wager most people are familiar with &lt;a href="https://crates.io/crates/log"&gt;log&lt;/a&gt; and a logger implementation like &lt;a href="https://docs.rs/env_logger/"&gt;env_logger&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;log&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nn"&gt;env_logger&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nd"&gt;info!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Information: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/tokio-rs/tracing"&gt;tracing&lt;/a&gt; is similar.  In Cargo.toml:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;tracing&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1"&lt;/span&gt;
&lt;span class="py"&gt;tracing-subscriber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;tracing&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nn"&gt;tracing_subscriber&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use &lt;a href="https://docs.rs/tracing-subscriber/0.2.18/tracing_subscriber/filter/struct.EnvFilter.html"&gt;RUST_LOG to filter output&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# PowerShell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;RUST_LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"warn,cargo_bullhorn=trace"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;# bash-like&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;RUST_LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;cargo_bullhorn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tracing provides additional features: logging sections of code with RAII spans, decorator for functions, and more.  Check &lt;a href="https://docs.rs/tracing/0.1.26/tracing/"&gt;the docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>cli</category>
      <category>productivity</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Django Request Object - Soft Introduction for Beginners</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 19 Jun 2021 16:02:59 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-request-object-2hpd</link>
      <guid>https://dev.to/sm0ke/django-request-object-2hpd</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This page explains the &lt;a href="https://docs.appseed.us/content/tutorials/django-request-object"&gt;request object provided by Django&lt;/a&gt; as the default argument in views. For those unfamiliar with &lt;strong&gt;Django&lt;/strong&gt;, this web framework is written in Python by experienced developers using a batteries-included concept.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Let's create a Django project and code our first view where the request object is exposed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create and activate a virtual environment&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Linux-based systems&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows-based systems, the syntax is slightly different:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;.&lt;span class="se"&gt;\e&lt;/span&gt;nv&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Install Django - using PIP (the official package manager for Python)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case anyone prefers a specific Django version, use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"django==2.2.10"&lt;/span&gt; &lt;span class="c"&gt;# This will install 2.x version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#build-a-django-project"&gt;
  &lt;/a&gt;
  Build a Django Project
&lt;/h2&gt;

&lt;p&gt;A new project can be generated with ease in Django by using django-admin that provides a collection of settings for the database, Django, and security layer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create the project folder&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-django-project
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-django-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the directory, we will generate the core of our project using &lt;strong&gt;django-admin&lt;/strong&gt; tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject config &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Set up the database&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations &lt;span class="c"&gt;# generate SQL&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate        &lt;span class="c"&gt;# Apply changes on database   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Start the app in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the web app in browser: http://127.0.0.1:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point we should see the default Django page in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjljQ3TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slln3436eil1r1914dlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjljQ3TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slln3436eil1r1914dlt.png" alt="Django Request Object - The default Django page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#create-new-application"&gt;
  &lt;/a&gt;
  Create New Application
&lt;/h2&gt;

&lt;p&gt;In the previous section, we've generated the core of the project that handles the configuration and now we will create the first Django application to serve a simple page to the users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py startapp app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Update settings to include the new app - &lt;code&gt;config/settings.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: config/settings.py (partial content)
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'app'&lt;/span&gt;                           &lt;span class="c1"&gt;# &amp;lt;-- NEW
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Update routing - &lt;code&gt;config/urls.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: config/urls.py (partial content)
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- NEW
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;                 &lt;span class="c1"&gt;# &amp;lt;-- NEW
&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                         &lt;span class="c1"&gt;# &amp;lt;-- NEW
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Code out first route and get access to the &lt;code&gt;request&lt;/code&gt; object&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;     &lt;span class="c1"&gt;# &amp;lt;-- NEW
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                      &lt;span class="c1"&gt;# &amp;lt;-- NEW    
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello Django"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- NEW   
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sn8_yNr1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrx3y185i09eqggbpe0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sn8_yNr1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrx3y185i09eqggbpe0i.png" alt="Django Request Object - Simple Hello World served by the app."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#request-object-properties"&gt;
  &lt;/a&gt;
  Request Object Properties
&lt;/h2&gt;

&lt;p&gt;The request object in Django comes with a few interesting properties like the IP of the client, the browser (aka user-agent), request path, or the information that help us to detect if the connection is secure (HTTPS-type).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--58M30CDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0n2vi93yo8a3av9m014.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58M30CDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0n2vi93yo8a3av9m014.png" alt="Django Request Object - Header variables"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;How to check the request type in view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A widely user code chunk is when we test the type of the request and manage the submitted data on &lt;code&gt;POST&lt;/code&gt; (when we send information to the server, login action for instance):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;     

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received a GET request"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received a POST request"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For newcomers, &lt;code&gt;GET&lt;/code&gt; is used to pull information from the server without altering anything. Search is a good example of a &lt;code&gt;GET&lt;/code&gt; request when we try to locate information on Google or Wikipedia.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;POST&lt;/code&gt; is used to update the information on the server like change the title for a book or register a new item in our service.&lt;/p&gt;

&lt;p&gt;Another difference between &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; is the location of the submitted information. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt; submits data in URL: &lt;code&gt;http://myservice.com?search=all_books&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt; submits data in the request body (not visible in the URL)&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;List all request headers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This subsection contains a code sample that prints all headers and request objects provided by Django:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;%s&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;%s&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;table&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;/table&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the script output executed using a local development server:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Lz_LkEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxe32dozj885stmftpe2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Lz_LkEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxe32dozj885stmftpe2.png" alt="Django Request Object - Full dump of request variables."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#read-request-variables"&gt;
  &lt;/a&gt;
  Read Request Variables
&lt;/h2&gt;

&lt;p&gt;Django provides dictionaries for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests populated with all variables sent by the client. We can access the variables by &lt;code&gt;key&lt;/code&gt; or using &lt;code&gt;get()&lt;/code&gt; helper for both contexts. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read GET variables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'my_var'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c1"&gt;# this might throw KeyError exception
&lt;/span&gt;
    &lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'var_2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# Soft read on variable
&lt;/span&gt;
    &lt;span class="n"&gt;var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'var_3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Soft Read with Default value     
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For POST, the process is identical.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;post_var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'my_var'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="c1"&gt;# this might throw KeyError exception
&lt;/span&gt;
    &lt;span class="n"&gt;post_var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'var_2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# Soft read on variable
&lt;/span&gt;
    &lt;span class="n"&gt;post_var3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'var_3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Soft Read with Default value     
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! Feel free to AMA in the comments section. For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;Read more about &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; (official docs)&lt;/li&gt;
&lt;li&gt;Start fast a new project using development-ready &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Starters&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>‚úÖ Tell Me About The Project That You Are Most Proud Of | Facebook Behavioral (Jedi) Interview Series üî•</title>
      <author>The Interview Sage</author>
      <pubDate>Sat, 19 Jun 2021 16:00:44 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/tell-me-about-the-project-that-you-are-most-proud-of-facebook-behavioral-jedi-interview-series-4mg1</link>
      <guid>https://dev.to/theinterviewsage/tell-me-about-the-project-that-you-are-most-proud-of-facebook-behavioral-jedi-interview-series-4mg1</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Vy_F4LHMDZ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before we discuss this question, let us recap what the Behavioral Interview Round at Facebook is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8RAbw1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8ob8tjoldnkf5h1vyn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8RAbw1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8ob8tjoldnkf5h1vyn6.png" alt="What is a Behavioral Interview Round at Facebook?" title="What is a Behavioral Interview Round at Facebook?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Behavioral Interview Round is also known as the Jedi Interview round at Facebook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is about you and your history, your r√©sum√©, and your motivation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The purpose of this interview is to assess whether the candidate will thrive in Facebook's peer-to-peer, minimal process, and unstructured engineering organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Software Engineers, the behavioral interview is actually part behavioral and part coding. The coding part is a shorter version of the usual coding interviews and is included to supplement the other two coding interviews to get an additional coding signal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-amp-tricks-to-effectively-prepare-for-behavioral-interviews"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" alt="Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews" title="Behavioral Interview Tips &amp;amp; Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Know yourself! Take the time to review your r√©sum√©, as the interviewer will almost certainly ask about key events in your work history.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have concrete examples or anecdotes to support each of the questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Familiarize yourself with Facebook's mission statement and its five core values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be Bold&lt;/li&gt;
&lt;li&gt;Focus on Impact&lt;/li&gt;
&lt;li&gt;Move Fast&lt;/li&gt;
&lt;li&gt;Be Open&lt;/li&gt;
&lt;li&gt;Build Social Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be yourself! Be open and honest about your successes and failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be humble and focus on teamwork, leadership, and mentorship qualities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let us review how to effectively answer this question.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-tell-me-about-the-project-that-you-are-most-proud-of"&gt;
  &lt;/a&gt;
  Question: Tell me about the project that you are most proud of
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oH57e-hX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cnpy81eimj38yqnotus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oH57e-hX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cnpy81eimj38yqnotus.png" alt="Tell me about the project that you are most proud of" title="Tell me about the project that you are most proud of"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=873s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another popular behavioral interview question is, Tell me about the project that you are most proud of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWygYD7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oes0ymfafu61u42q1w2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWygYD7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oes0ymfafu61u42q1w2i.png" alt="Evaluation Criteria for Tell me about the project that you are most proud of" title="Evaluation Criteria for 'Tell me about the project that you are most proud of'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this question, the interviewer is trying to assess whether your core skills and work ethics align with the company's culture or not.&lt;/p&gt;

&lt;p&gt;They are also trying to get a reading on how you define professional success.&lt;/p&gt;

&lt;p&gt;Your answer should focus on the project's impact and outcomes, as this will demonstrate to the interviewer what you consider important and how you get things done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#response-framework"&gt;
  &lt;/a&gt;
  Response Framework
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J7wZ81if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90tg9bhp88x4kda1z1t0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7wZ81if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90tg9bhp88x4kda1z1t0.png" alt="Response Framework for Tell Me About The Project That You Are Most Proud Of" title="Response Framework for 'Tell Me About The Project That You Are Most Proud Of'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your response to this question should answer the following questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What was the problem that you were trying to solve in this project?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why did you consider this problem as important?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should explain the scale and complexity of the project and your level of ownership.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How did you identify the problem?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How did you gather the resources required to investigate this problem? This may include things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reading a market research paper,&lt;/li&gt;
&lt;li&gt;Collaborating with a Product Manager, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What action steps did you take to resolve the problem?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Was this project a success?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If not, then focus on the major lessons learned while working on the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What was the impact of the project on the company?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yiBGXYUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbk1gxyh601b9ihbkjcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yiBGXYUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbk1gxyh601b9ihbkjcc.png" alt="Tips and Tricks for Tell Me About The Project That You Are Most Proud Of" title="Tips &amp;amp; Tricks for 'Tell Me About The Project That You Are Most Proud Of'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some tips and tricks to effectively prepare for this question.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Prepare the response for this question beforehand, as it will be tough to structure your answer on the spot during the interview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have a compelling story highlighting your key achievements and your end-to-end involvement while working on this project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide a technical overview of the problem and solution, but do not deep dive into a particular technology or tool used for this project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, you can explain how Apache Kafka helped you make the project a success, but there is no need to go into deep technical details of how Apache Kafka works unless asked as a follow-up question.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mention about cross-team collaborations that you did while working on the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not memorize the answer as it should come naturally, and you should sound confident to the interviewer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks to effectively prepare and answer the top questions asked in the Behavioral Interviews at Facebook. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;‚¨áÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Detailed Written Notes on Top Facebook Behavioral Interview Questions&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-behavioral-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook Behavioral Interview
&lt;/h1&gt;

&lt;p&gt;If you have not read our first article on Top Facebook Behavioral Interview Questions, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;‚úÖ Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round üî•&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª May 15 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1) | Facebook Pirate Interview Round&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª Jan 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;‚úÖ &lt;a href="https://bit.ly/Educative-Unlimited"&gt;Educative.io Unlimited Plan [üí∞ 10% off for first 100 users]&lt;/a&gt;&lt;br&gt;
‚úÖ &lt;a href="https://bit.ly/Try-Exponent"&gt;TryExponent.com Membership [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë©‚Äçüíª &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
üöÄ &lt;a href="https://bit.ly/SWE-Interview-Course"&gt;Complete SWE Interview Course [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;br&gt;
üôã‚Äç‚ôÄÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Behavioral Interview Guide [üí∞ Special Discount]&lt;/a&gt;&lt;br&gt;
üìö &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;‚òïÔ∏è Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;
&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;üì∏ Some images used are from free&lt;span&gt;pik&lt;/span&gt;.com: Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
