<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting started with Node JS</title>
      <author>Pooja Gupta</author>
      <pubDate>Tue, 16 Mar 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</link>
      <guid>https://dev.to/poojagupta/getting-started-with-node-js-5f4l</guid>
      <description>&lt;p&gt;Hey folks! I just started learning node JS and thought to share with all of you who are new to node JS and wanted to learn node JS.&lt;br&gt;
so we are gonna see little insights of node JS and after that we will write our first code in node JS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-what-is-node-js" class="anchor"&gt;
  &lt;/a&gt;
  So What is Node JS?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js is a cross-platform JavaScript runtime environment that allows developers to build server-side and network applications with JavaScript.&lt;/li&gt;
&lt;li&gt;NPM is a package manager which comes bundled with node JS which helps in downloading packages into a node_modules folder.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use npm init command to initialize your project which will ask basic information about your project and creates one file package.json which will have all information you provide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So package.json file is face of your project which will contain all the information about your project as well as all those dependencies needed for your project with their version name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Their are a lot of frameworks available which will ease our work while writing our code like express, sails, Hapi, Koa etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But first let we use simple Node JS without any framework to understand it in depth.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In your folder create index.js and do npm init after that write this code in index.js file and do node index.js from the command line from the same path where your index file exists.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(request, response) {
  console.log("Request received.");
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.write("Welcome to node.js World");
  response.end();
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, on each and every url, you found ‚Äúwelcome to node.js world‚Äù. Now we will send different response, according to requested url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require("http");
const port = 8000;

function requestHandler(req, res) {
    if (req.url == "/") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the homepage!");
    }

    // About page
    else if (req.url == "/contact") {
        res.writeHead(200, { "Content-Type": "text/html" });
        res.end("Welcome to the contact page!");
    }

    // 404'd!
    else {
        res.writeHead(404, { "Content-Type": "text/plain" });
        res.end("404 error! File not found.");
    }
}

const server = http.createServer(requestHandler);
server.listen(port, function(err){
    if(err){
        console.log(err);
        return;
    }

    console.log("Server is up and running:", port);
});
console.log("Server has started.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we track requested url and respectively show that content on that url, and handle 404 condition in all other cases. &lt;br&gt;
I hope this article helps you getting started with node JS, don't forget to tell me in comment section how much you liked this post and in case any query reach me out !&lt;br&gt;
Happy Coding!&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>100 underline/overlay  animations | The ultimate CSS collection ü•á</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 16 Mar 2021 15:11:39 +0000</pubDate>
      <link>https://dev.to/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40</link>
      <guid>https://dev.to/afif/100-underline-overlay-animation-the-ultimate-css-collection-4p40</guid>
      <description>&lt;p&gt;Get tired searching animations for your menu items and links? Search no more! Here is a list of more than 100 different animations. From the simple one to the more complex one, you will for sure find what you want.&lt;/p&gt;

&lt;p&gt;No SVG, No JS, No extra tag, No pseudo element, No keyframes ... All of them are done using backgrounds, transition and only one element. Simply add a class and enjoy.&lt;/p&gt;

&lt;p&gt;I am not relying on pseudo element so you can easily use them with elements like &lt;code&gt;input&lt;/code&gt; (where we cannot have pseudo element).&lt;/p&gt;

&lt;p&gt;In order to understand the logic of each animation, I highly recommend my previous article about &lt;code&gt;background-position&lt;/code&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/all-you-need-to-know-about-background-position-3aac" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;All you need to know about background-position&lt;/h2&gt;
      &lt;h3&gt;Temani Afif „Éª Mar 13 „Éª 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#table-of-content" class="anchor"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-basic"&gt;The Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-continuous"&gt;The Continuous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-double"&gt;The Double&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-two-steps"&gt;The Two Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unexpected"&gt;The Unexpected&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-rounded"&gt;The Rounded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fading"&gt;The Fading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-infinite"&gt;The Infinite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-all-sides"&gt;The All Sides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-thick"&gt;The Thick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-sliding"&gt;The Sliding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fancy"&gt;The Fancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-inverted"&gt;The Inverted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-3d"&gt;The 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-basic" class="anchor"&gt;
  &lt;/a&gt;
  The Basic
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/oNYOpBe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentColor&lt;/code&gt; will use the color defined inside &lt;code&gt;color&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I am using CSS variables to make the code shorter. &lt;code&gt;var(--d, 0)&lt;/code&gt; means that the default value is &lt;code&gt;0&lt;/code&gt; then I change it on hover.&lt;/li&gt;
&lt;li&gt;The syntax &lt;code&gt;0 100% /var(--d, 0) 3px&lt;/code&gt; means &lt;code&gt;background-position / background-size&lt;/code&gt;. We adjust the &lt;code&gt;3px&lt;/code&gt; to control the height/thickness of the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-continuous" class="anchor"&gt;
  &lt;/a&gt;
  The Continuous
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKNYZoK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-double" class="anchor"&gt;
  &lt;/a&gt;
  The Double
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJbGzrG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-two-steps" class="anchor"&gt;
  &lt;/a&gt;
  The Two Steps
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWNQZJa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-unexpected" class="anchor"&gt;
  &lt;/a&gt;
  The Unexpected
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYyMdKP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rounded" class="anchor"&gt;
  &lt;/a&gt;
  The Rounded
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYbvQLX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fading" class="anchor"&gt;
  &lt;/a&gt;
  The Fading
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWGPQxp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-infinite" class="anchor"&gt;
  &lt;/a&gt;
  The Infinite
&lt;/h3&gt;

&lt;p&gt;Keep the hover for too long here.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWGPQzg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-all-sides" class="anchor"&gt;
  &lt;/a&gt;
  The All Sides
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEBZxEj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thick" class="anchor"&gt;
  &lt;/a&gt;
  The Thick
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKNYoMo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-sliding" class="anchor"&gt;
  &lt;/a&gt;
  The Sliding
&lt;/h3&gt;

&lt;p&gt;The below requires us to know the width of the element so it's more suitable for monospace fonts where we can use the &lt;code&gt;ch&lt;/code&gt; unit&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PobgRJj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fancy" class="anchor"&gt;
  &lt;/a&gt;
  The Fancy
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BaQEVqz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;sup&gt;(2) and (5) use some hardcoded values that need to be adjusted based on the element width&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-inverted" class="anchor"&gt;
  &lt;/a&gt;
  The Inverted
&lt;/h3&gt;

&lt;p&gt;The below doesn't work on Firefox due to a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1571244"&gt;known bug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzpMvbz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-3d" class="anchor"&gt;
  &lt;/a&gt;
  The 3D
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; the below uses some advanced CSS but I considered CSS variables to make it easy to control&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzpMjWy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Tell me what do you think and which one is your favorite. üëá&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>How to Add Tailwind CSS to Your Angular Application 2021</title>
      <author>Godwin Daniel</author>
      <pubDate>Tue, 16 Mar 2021 14:47:52 +0000</pubDate>
      <link>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</link>
      <guid>https://dev.to/godwindaniel10/how-to-add-tailwind-css-to-your-angular-application-2021-32gj</guid>
      <description>&lt;p&gt;According to the official documentation, Tailwind CSS is a utility-first CSS framework for rapidly building custom user interfaces. I like to think of it as a cool way to write inline styling and achieve an awesome interface without writing a single line of your own CSS.   Angular, on the other hand, is a platform that allows you to build high-quality enterprise applications. Combine Angular with Tailwind CSS and you have a perfect stack for building top-notch web applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, I will walk you through how you can add &lt;br&gt;
       Tailwind CSS to your Angular application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üö©  This article assumes that you're using the Angular CLI &lt;br&gt;
       version 11.2.0 or higher.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-generate-a-new-angular-application" class="anchor"&gt;
  &lt;/a&gt;
  1. Generate a new Angular application
&lt;/h1&gt;

&lt;p&gt;Let's start by creating a new Angular project using the ng new command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng new my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the CLI asks you "which stylesheet format would you like to use?" choose CSS because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With Tailwind, you don't need a CSS preprocessor like Sass. &lt;br&gt;
 You'll rarely need to write custom CSS anyway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your CSS will compile much faster because it won't need to &lt;br&gt;
 pass through multiple compilation pipelines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-install-the-needed-tailwind-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  2. Install the needed tailwind dependencies
&lt;/h1&gt;

&lt;p&gt;Now, install the required dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng add @ngneat/tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;follow the instructions below:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to enable dark mode?

     none
     class
     media
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;class&lt;/strong&gt;  then click (enter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? Would you like to use tailwind directives and functions in 
     component styles? (might increase build time) (y/N) y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ? What @tailwindcss plugins do you want to enable?

     ‚≠ï aspect-ratio
     ‚≠ï forms ‚úî
     ‚≠ï Line-clamp
     ‚≠ï typography ‚úî
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;select &lt;strong&gt;forms&lt;/strong&gt; &amp;amp; &lt;strong&gt;typography&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The command above install all needed packages and update the &lt;br&gt;
  project files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#3-enjoy" class="anchor"&gt;
  &lt;/a&gt;
  3. Enjoy
&lt;/h1&gt;

&lt;p&gt;You can now start your Angular application and enjoy using Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ng serve --open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;code&gt;If you enjoyed this article, follow [@CodeBase__](https://twitter.com/CodeBase__) on Twitter for more content like this.&lt;/code&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>angular</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to publish an unscoped npm package to Github Package Registry</title>
      <author>Akinwunmi Aguda</author>
      <pubDate>Tue, 16 Mar 2021 13:25:24 +0000</pubDate>
      <link>https://dev.to/akinaguda/how-to-publish-an-unscoped-npm-package-to-github-package-registry-19mg</link>
      <guid>https://dev.to/akinaguda/how-to-publish-an-unscoped-npm-package-to-github-package-registry-19mg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-scenario" class="anchor"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h2&gt;

&lt;p&gt;I created a project, bootstrapped with &lt;a href="https://tsdx.io/#quick-start"&gt;tsdx&lt;/a&gt;, and deployed it to npm. I achieved this by logging into npm in my terminal and running&lt;br&gt;
&lt;code&gt;npm publish&lt;/code&gt; or &lt;code&gt;npm publish --access public&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-challenge" class="anchor"&gt;
  &lt;/a&gt;
  The challenge
&lt;/h2&gt;

&lt;p&gt;Subsequently, I decided to publish to the &lt;a href="https://github.com/features/packages"&gt;github package registry&lt;/a&gt;. That's when I realized that to publish to the github registry, the name of my package needed to be scoped (unlike with npm where this is optional).&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/scope"&gt;npm&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scopes are a way of grouping related packages together, and also affect a few things about the way npm treats the package.&lt;/p&gt;

&lt;p&gt;Each npm user/organization has their own scope, and only you can add packages in your scope. This means you don't have to worry about someone taking your package name ahead of you. Thus it is also a good way to signal official packages for organizations. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In summary, scoping a package allows two packages with the same name to co-exist, as long as they are scoped differently. Typically, a scoped package would be have the &lt;code&gt;name&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt; be something like: &lt;code&gt;@someuser/common-package-name&lt;/code&gt; or &lt;code&gt;@someorganization/common-package-name&lt;/code&gt; but mine was more like &lt;code&gt;common-package-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that your package does not have to be &lt;code&gt;@someuser&lt;/code&gt; on github package registry. It could be &lt;code&gt;@anything&lt;/code&gt; but in my case, it seemed like a good idea to just scope it to my username.&lt;/p&gt;

&lt;p&gt;Naturally this would not be a problem if your npm package was already scoped like &lt;code&gt;@someuser/common-package-name&lt;/code&gt; on npm. In my case it was not&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;After some googling, I found this &lt;a href="https://github.com/formium/tsdx/issues/854"&gt;closed issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, &lt;a href="https://github.com/formium/tsdx/issues/854#issuecomment-688474830"&gt;alehechka&lt;/a&gt; created a great github action to so solve this problem.&lt;/p&gt;

&lt;p&gt;The only issue with it was, if your github username had any uppercase characters in it, it will not successfully deploy to the github package registry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
While you could manually do all of this each time you want to deploy, using github actions would be a better and more efficient way to do this.&lt;/p&gt;

&lt;p&gt;So, I made some slight modifications to his solution, and with just two steps, you could deploy your package to the github registry and npm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: add this to your package.json
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"publishConfig": {
   "registry": "https://registry-url"
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Step 2: create a workflow file. For instance, &lt;strong&gt;deploy.yml&lt;/strong&gt; and paste in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: npm-publish
on:
  push:
    branches:
      - master # Change this to your default branch
jobs:
  npm-publish:
    name: npm-publish
    runs-on: ubuntu-latest

    steps:
      # Publish to Node Package Manager
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Setup Node.js (NPM)
        uses: actions/setup-node@master
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Update Publish Config
        run: sed -i 's^registry-url^registry.npmjs.org^' package.json

      - name: Publish to NPM
        run: npm publish --access public
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  gpr-publish:
    name: gpr-publish
    runs-on: ubuntu-latest

    steps:
      # Publish to GitHub Package Registry
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: Store lowercase actor name
        run: |
          echo 'actor_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
          echo ${{ github.actor }} | tr "A-Z" "a-z" &amp;gt;&amp;gt; $GITHUB_ENV
          echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV

      - name: Store package name
        run: |
          echo 'package_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
          grep -Po '"name": *\K"[^"]*"' package.json | grep -oP '"\K[^"\047]+(?=["\047])' &amp;gt;&amp;gt; $GITHUB_ENV
          echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV

      - name: Setup Node.js (GPR)
        uses: actions/setup-node@master
        with:
          node-version: '12.x'
          registry-url: https://npm.pkg.github.com/
          scope: '${{ env.actor_name }}'

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Update Package Name
        run: |
          sed -i 's,"name": "${{ env.package_name }}","name": "@${{ env.actor_name }}/${{ env.package_name }}",' package.json
          cat package.json

      - name: Update Publish Config
        run: |
          sed -i 's^registry-url^npm.pkg.github.com/@${{ env.actor_name }}^' package.json
          cat package.json

      - name: Publish to GitHub Package Registry
        run: npm publish --access public
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's really all you need.&lt;/p&gt;

&lt;p&gt;The changes I made to &lt;a href="https://github.com/formium/tsdx/issues/854#issuecomment-688474830"&gt;this&lt;/a&gt; are:&lt;/p&gt;

&lt;p&gt;Adding the following script to convert the username to lowercase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Store lowercase actor name
   run: |
    echo 'actor_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
    echo ${{ github.actor }} | tr "A-Z" "a-z" &amp;gt;&amp;gt; $GITHUB_ENV
    echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this to get the package name from the package.json and store in an environment variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Store package name
   run: |
    echo 'package_name&amp;lt;&amp;lt;EOF' &amp;gt;&amp;gt; $GITHUB_ENV
    grep -Po '"name": *\K"[^"]*"' package.json | grep -oP '"\K[^"\047]+(?=["\047])' &amp;gt;&amp;gt; $GITHUB_ENV
    echo 'EOF' &amp;gt;&amp;gt; $GITHUB_ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then updated to the github action to change the name of the package in the package.json, to a scoped version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; - name: Update Package Name
   run: |
    sed -i 's,"name": "${{ env.package_name }}","name": "@${{ env.actor_name }}/${{ env.package_name }}",' package.json
    cat package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and finally, I switched out every use of &lt;code&gt;${{ github.actor }}&lt;/code&gt; with &lt;code&gt;@${{ env.actor_name }}&lt;/code&gt; which is the author's name in lowercase.&lt;/p&gt;

</description>
      <category>npm</category>
      <category>github</category>
      <category>actions</category>
      <category>tsdx</category>
    </item>
    <item>
      <title>Rails validations: unique within a certain scope</title>
      <author>matt swanson</author>
      <pubDate>Tue, 16 Mar 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/rails-validations-unique-within-a-certain-scope-41p2</link>
      <guid>https://dev.to/swanson/rails-validations-unique-within-a-certain-scope-41p2</guid>
      <description>&lt;p&gt;It‚Äôs a great idea to make your database and application validations match. If you have &lt;code&gt;validates :name, presence: true&lt;/code&gt; in your model, you should pair it with a &lt;code&gt;not null&lt;/code&gt; database constraint. Unique validations should be paired with a &lt;code&gt;UNIQUE&lt;/code&gt; database index.&lt;/p&gt;

&lt;p&gt;In real-world applications, you often have more complicated validations, but you should continue this practice whenever you can.&lt;/p&gt;

&lt;p&gt;Something I encounter regularly is the need to have records that are unique, but within a certain scope.&lt;/p&gt;

&lt;p&gt;Imagine you were building a typical project management tool. You might want &lt;code&gt;Project&lt;/code&gt;s to have a unique name so they can be distinguished within your UI ‚Äì but you don‚Äôt want the name to be globally unique. If I make a project called ‚ÄúOnboarding‚Äù, another customer should not be restricted from using that name as well.&lt;/p&gt;

&lt;p&gt;Luckily, Rails has got us covered with a handy feature called &lt;strong&gt;validation scopes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;scope&lt;/code&gt; option to the Rails uniqueness validation rule allows us to specify additional columns to consider when checking for uniqueness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Project&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:account&lt;/span&gt;

  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:tasks&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;scope: :account_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This rule says that ‚Äúthe name of this project must unique, within the scope of this account‚Äù. In other words, the combination of a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;account_id&lt;/code&gt; must be unique ‚Äì but you can have projects with the same name in different accounts.&lt;/p&gt;

&lt;p&gt;As we discussed earlier, you really want to back-up your application level validations with database constraints.&lt;/p&gt;

&lt;p&gt;In this case, you‚Äôll want to do a multiple column index. You can do this in a normal Rails migration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateProject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:account_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#options" class="anchor"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;p&gt;You can pass multiple columns to &lt;code&gt;scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you were building a dining app and wanted to enforce that a guest could only have one reservation at a restaurant per day.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reservation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:guest&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:restaurant&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may wish to change the message since the defaults error message will be fairly spartan: ‚Äú{field} has already been taken‚Äù&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;scope: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"Only one reservation per guest per day is permitted"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: In PostgreSQL, the default limit for index names is 63 characters so you may find yourself needing to change the index name if your model or column names are longer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:reservations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:guest_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:restaurant_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:reservation_date&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"idx_reserveration_guest_date_uniq"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Rails API: &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of"&gt;Uniqueness Validations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL Docs: &lt;a href="https://www.postgresql.org/docs/current/ddl-constraints.html"&gt;Postgres Constraints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySql Docs: &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html"&gt;Multi-column Indexes&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Object Design Style Guide Summary</title>
      <author>MiguelDevelopez</author>
      <pubDate>Tue, 16 Mar 2021 10:55:29 +0000</pubDate>
      <link>https://dev.to/migueldevelopez/object-design-style-guide-summary-42bl</link>
      <guid>https://dev.to/migueldevelopez/object-design-style-guide-summary-42bl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-you-should-create-and-use-your-objects" class="anchor"&gt;
  &lt;/a&gt;
  How you should create and use your objects
&lt;/h1&gt;

&lt;p&gt;I‚Äôm currently reading an interesting book called Object Design Style Guide, wrote by Matthias Noback, about how to create objects as best as possible, so I decided to bring it up here and show you some tips and directives I found more interesting. Of course, I recommend you read the whole book if you want to go deep into this topic.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVcNnh58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m821vcaguihcytxktwzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVcNnh58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m821vcaguihcytxktwzx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1%C2%BA-introduction-to-some-oop-concepts" class="anchor"&gt;
  &lt;/a&gt;
  1¬∫ Introduction to some OOP concepts
&lt;/h2&gt;

&lt;p&gt;In this book, inheritance plays a small role, even though it‚Äôs supposed to be one of the pillars of object-oriented programming. In practice, using inheritance mostly leads to a confusing design.&lt;br&gt;
In this book, we‚Äôll use inheritance mainly in two situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When defining interfaces for dependencies &lt;em&gt;(dependency injection and inversion)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When defining a hierarchy of objects, such as when defining custom exceptions that extend from built-in exception classes.
In most other cases we‚Äôd want to actively prevent developers to extend from our classes. You can do so by adding the final keyword in front of the class. It will be more explained later.
The &lt;strong&gt;composition is highly recommended&lt;/strong&gt; over the inheritance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A little space to the test about that the basic structure of the unit test is:&lt;br&gt;
The basic structure of each test method is Arrange - Act - Assert:&lt;br&gt;
1 &lt;strong&gt;Arrange&lt;/strong&gt;: Bring the object that we‚Äôre testing (also known as the SUT, or Subject Under Test) into a certain known state.&lt;br&gt;
2 &lt;strong&gt;Act&lt;/strong&gt;: Call one of its methods.&lt;br&gt;
3 &lt;strong&gt;Assert&lt;/strong&gt;: Make some assertions about the end state.&lt;/p&gt;

&lt;p&gt;Shit's getting real. &lt;strong&gt;There are 2 types of objects:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service objects that either perform a task or return a piece of information. Objects of the first type will be created once, and then be used any number of times, but nothing can be changed about them. They have a very simple lifecycle. Once they‚Äôve been created, they can run forever, like &lt;strong&gt;little machines with specific tasks&lt;/strong&gt;. These kinds of services are &lt;strong&gt;immutables&lt;/strong&gt;.
Service objects are do-ers, and they often have names indicating what they do: renderer, calculator, repository, dispatcher, etc. &lt;/li&gt;
&lt;li&gt;Objects that will hold some data, and optionally expose some behavior for manipulating or retrieving that data, this kind is used by the first type to complete their tasks. These objects are the materials that the services work with. There are two subtypes: value objects and models/entities, but don't get ahead of ourselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#2%C2%BA-focus-on-services" class="anchor"&gt;
  &lt;/a&gt;
  2¬∫ Focus on Services
&lt;/h2&gt;

&lt;p&gt;There is a pile of suggestions about how a service should be, I‚Äôll make the list hiper-summarizing them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To create a service use dependency injection to make the service ready for use immediately after instantiation and test double. So the dependencies should be declared &lt;em&gt;explicitly&lt;/em&gt;.
Here is an example of this, you can see how the parameter $appConfig is only used to get the directory of the cache so‚Ä¶ Instead of injecting the whole configuration object, make sure you only inject the values that the service actually needs.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLogger&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Formatter&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Formatter is a dependency of FileLogger&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Formatter&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;formattedMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚Ä¶.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;When possible you should keep together all the related configuration values that belong together. Service shouldn‚Äôt get the entire global configuration object injected, only the values that it needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WRONG WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySQLTableGateway&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GOOD WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySQLTableGateway&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ConnectionConfiguration&lt;/span&gt; &lt;span class="nv"&gt;$connectionConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $table is the name of the table, It isn‚Äôt necessary to make the connection &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Avoid service locators (a service from which you can retrieve other services) and inject the dependencies that you need explicitly.&lt;/li&gt;
&lt;li&gt;All the constructor arguments should be required because the code will be unnecessarily complicated. If you have the temptation to put it as an optional dependency you can use the &lt;a href="https://refactoring.guru/es/introduce-null-object"&gt;null object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Services should be &lt;strong&gt;immutable&lt;/strong&gt;, that is, impossible to change after they have been fully instantiated because the behavior could be so unpredictable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So... avoid something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventDispatcher&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addListener&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;callable&lt;/span&gt; &lt;span class="nv"&gt;$listener&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$listener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Only assign properties or throw exceptions because of some validation error in the constructor.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLogger&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Logger&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $logFilePath should be properly set up, so we just need a safety check&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;is_writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Log&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="err"&gt;‚Äô&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;writable&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;logFilePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$logFilePath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ideally, create objects to avoid the hidden dependencies, for example, the function json_encode() or a class from PHP like DateTime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WRONG WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResponseFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// json_encode is a hidden dependency&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="no"&gt;JSON_THROW_ON_ERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;JSON_FORCE_OBJECT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;GOOD WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonEncoder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
    &lt;span class="o"&gt;*/&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="no"&gt;JSON_THROW_ON_ERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;JSON_FORCE_OBJECT&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// we can throw our own exception, with more specific info&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Failed to encode data: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;var_export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;previous&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResponseFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;JsonEncoder&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// JsonEncoder can be injected as a dependency&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;JsonEncoder&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonEncoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$jsonEncoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createApiResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonEncoder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can do the same with the date() and big core utilities of your language, and your application layer will be so decoupled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3%C2%BA-other-objects" class="anchor"&gt;
  &lt;/a&gt;
  3¬∫ other objects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-value-object-and-modelentity" class="anchor"&gt;
  &lt;/a&gt;
  3.1 value object and model/entity
&lt;/h3&gt;

&lt;p&gt;The main suggestions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate the objects in the constructor, it will assure you that you only have valid objects in your application, every object will be what it was intended to be. You should throw exceptions in the constructor in case the data is not valid. The book suggests avoiding using custom exceptions for invalid argument exceptions, for this kind of RuntimeExceptions indicates that‚Ä¶ more about it below.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Coordinates&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_construct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'Latitude should be between -90 and 90'&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Don't use property fillers, later we‚Äôll see where you can use them with an example.&lt;/li&gt;
&lt;li&gt;Entity/model should be identifiable with a unique id, value objects don‚Äôt because they only wrap one or more primitive-type values.&lt;/li&gt;
&lt;li&gt;To add more semantic to a constructor the named constructors appear, those are static methods with domain-specific names that allow your code to have a better name than the typical new class(). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Standard way&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$salesOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SalesOrder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Better way&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$salesOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SalesOrder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;place&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put the __construct method as private to avoid using it and call the constructor inside the place() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;  &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Assertion&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;greaterOrEqualThan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromInt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;DecimalValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$precision&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;DecimalValue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DecimalValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nv"&gt;$precision&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;One of the best points of the value objects is that, if you validate in their constructor, when you see a value object you will know that it contains validated information and you will not have to validate this information in other points of the code.&lt;/li&gt;
&lt;li&gt;Test the behavior of an object and the constructor in the way it will fail, don't create a test just to check if the values are correct.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;it_can_be_constructed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$coordinates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coordinates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;60.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$coordinates&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$coordinates&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In summary, a value object does not only represent domain concepts. They can occur anywhere in the application. A value object is an immutable object that wraps primitive-type values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#32-dto-data-transfer-object" class="anchor"&gt;
  &lt;/a&gt;
  3.2 DTO (Data transfer object)
&lt;/h2&gt;

&lt;p&gt;The rules of 3.1 don't fit well with this type of object, the DTO. While in the value object and model we want consistency and validity of the data, in the DTO we just want (nobody expected it by the name) to transfer data from one point to another.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A DTO can be created using a regular constructor. &lt;/li&gt;
&lt;li&gt;Its properties can be set one by one.&lt;/li&gt;
&lt;li&gt;All of its properties are exposed, so make them public and access them directly without getters.&lt;/li&gt;
&lt;li&gt;Its properties contain only primitive-type values.&lt;/li&gt;
&lt;li&gt;Properties can optionally contain other DTOs or simple arrays of DTOs.&lt;/li&gt;
&lt;li&gt;You can use property fillers when needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScheduleMeetup&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fromFormData&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;ScheduleMeetup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ScheduleMeetupl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$formData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scheduleMeetup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, the objects have methods where they contain the behavior, there are two kinds of methods, queries to retrieve information and commands to perform a task, but both of them could be designed with the same ‚Äòtemplate‚Äô, that is:&lt;br&gt;
1¬∫ Checking parameters, throwing errors if there is something wrong.&lt;br&gt;
2¬∫ Do what the method has to do, throwing errors if necessary.&lt;br&gt;
3¬∫ Check postcondition checks. This won‚Äôt be necessary if you have good tests, but for example, if you are working with legacy code it could be good for safety checks.&lt;br&gt;
4¬∫ Returns if is a query method.&lt;/p&gt;

&lt;p&gt;You‚Äôve seen that the exceptions are a good part of a code, some cases where using a custom exception is very useful:&lt;br&gt;
1¬∫ If you want to catch a specific exception type higher up&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// possibly throws ‚ÄòSomeSpecific‚Äô exception&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SomeSpecific&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ‚Ä¶&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2¬∫ If there are multiple ways to instantiate a single type of exception&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CouldNotDeliverOrder&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;itWasAlreadyDelivered&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;CouldNotDeliverOrder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;insufficientQuantitiesInStock&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;CouldNotDeliverOrder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3¬∫ If you want to use named constructors for instantiating the exception&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RuntimeException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ProductId&lt;/span&gt; &lt;span class="nv"&gt;$productld&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$productld&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;CouldNotFindProduct&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you don‚Äôt have to put ‚ÄòException‚Äô in the name of the exception class, instead, use explicit names like InvalidEmailAddress or CouldNotFindProduct.&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;that‚Äôs all folks&lt;/em&gt;, there are soooo many more examples in the book, so I encourage you to take a look at it. &lt;strong&gt;If you want the second part of the book, let me know in the comments&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Sources and more info&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/38wURcK"&gt;The book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://matthiasnoback.nl/"&gt;Blog of the book author&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://verraes.net/2014/06/named-constructors-in-php/"&gt;Named constructors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/49002/prefer-composition-over-inheritance?page=1&amp;amp;tab=votes#tab-top"&gt;Composition over inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>Underrated Articles on Dev.to from Last Week</title>
      <author>Manpreet virk</author>
      <pubDate>Tue, 16 Mar 2021 10:42:07 +0000</pubDate>
      <link>https://dev.to/xenoxdev/underrated-articles-on-dev-to-from-last-week-5a13</link>
      <guid>https://dev.to/xenoxdev/underrated-articles-on-dev-to-from-last-week-5a13</guid>
      <description>&lt;p&gt;Hello! I'm back with another installment of underrated articles from last week! &lt;/p&gt;

&lt;p&gt;Let's check them out üî• -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-vs-code-extensions" class="anchor"&gt;
  &lt;/a&gt;
  1. VS Code Extensions
&lt;/h2&gt;

&lt;p&gt;VS Code is popular because we can add additional features by adding extensions. In this article, Sparsh mentions 10 extensions on VS Code that will immediately help you in your development journey üíØ.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/akathecoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4KjpUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eKdIghSN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435183/1b03b8fc-76cb-4542-8f76-2b6cc1a53814.jpg" alt="akathecoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/akathecoder/top-10-vs-code-extensions-to-level-up-your-development-game-18i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 10 VS Code Extensions to level up your development game&lt;/h2&gt;
      &lt;h3&gt;Sparsh Agarwal „Éª Mar 11 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#extensions&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-list-of-resources" class="anchor"&gt;
  &lt;/a&gt;
  2. List of Resources
&lt;/h2&gt;

&lt;p&gt;Lary recommended some YouTube channels that will guide you through each step of the web development journey. Beginners must check this article out üíõ.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/larymak" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIX4f4qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8stqw_Sm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/495100/39cbe2a8-7358-45a1-bfad-83f6fb4b7e80.jpeg" alt="larymak image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/larymak/useful-resources-for-programmers-and-web-developers-512c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Useful Resources for Programmers and Web Developers&lt;/h2&gt;
      &lt;h3&gt;lary mak „Éª Mar 12 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-the-secret-to-skyrocket-your-career" class="anchor"&gt;
  &lt;/a&gt;
  3. The secret to skyrocket your Career
&lt;/h2&gt;

&lt;p&gt;In this post, Arctype team demonstrates that while working as a team, developers should cultivate a mindset that includes a business perspective, and think like a PM. &lt;br&gt;
He further noted things they learned moving from software engineering to product management.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rettx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CW9truaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sJy9DBTG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/573089/c66c6aa6-b080-474e-ab8b-c49175222c5a.PNG" alt="rettx image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arctype/the-secret-to-growing-your-career-is-not-being-a-better-engineer-3m0h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Secret to Growing Your Career is Not Being a Better Engineer&lt;/h2&gt;
      &lt;h3&gt;Arctype Team „Éª Mar 10 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#startup&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-software-job-in-6-months" class="anchor"&gt;
  &lt;/a&gt;
  4. Software Job in 6 Months
&lt;/h2&gt;

&lt;p&gt;A simple roadmap for becoming a web application developer is penned down by Phillip in this article. Resources are also shared at each step.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ninan_phillip" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvQrJMLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--K6psAe3O--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/457375/cc433bf0-64b1-4bf5-9659-80a8496f49de.png" alt="ninan_phillip image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ninan_phillip/land-a-software-job-in-6-months-8c9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Land a Software Job in 6 Months!&lt;/h2&gt;
      &lt;h3&gt;Phillip Ninan „Éª Mar 11 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-create-registration-app-with-animation-using-the-mern-stack" class="anchor"&gt;
  &lt;/a&gt;
  5. Create Registration App With Animation Using the MERN Stack
&lt;/h2&gt;

&lt;p&gt;Yogesh wrote the process of building an amazing Multi Step Registration form with smooth animated transitions using MERN(MongoDB, Express, React, Node.js) stack.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/myogeshchavan97" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--742238ti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oy7iRf6a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/361592/385c82bb-b96c-4cd6-83a3-ffea25be1d8d.jpeg" alt="myogeshchavan97 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/myogeshchavan97/how-to-create-a-full-stack-multi-step-registration-app-with-nice-animations-using-the-mern-stack-12gp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Create A Full Stack Multi-Step Registration App with nice animations using the MERN Stack &lt;/h2&gt;
      &lt;h3&gt;Yogesh Chavan „Éª Mar 11 „Éª 43 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's all folks! These were our personal favorite underrated posts from last week, and we hope you liked them. Tell us about your favorite posts that went underrated in the comments below!&lt;/em&gt; ‚ù§Ô∏è&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Five classic AWS posts - March 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Tue, 16 Mar 2021 10:09:51 +0000</pubDate>
      <link>https://dev.to/aws-heroes/five-classic-aws-posts-march-2021-4c4h</link>
      <guid>https://dev.to/aws-heroes/five-classic-aws-posts-march-2021-4c4h</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your AWS Heroes! &lt;/p&gt;

&lt;p&gt;Each month I'll be taking a trip down memory lane and showcasing some classic AWS posts. Some of these might be your 'go-to' resources already, others may offer some new insight or ideas.&lt;/p&gt;

&lt;p&gt;Let's jump into the posts!&lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/mlewis7127"&gt;Matt&lt;/a&gt; and all the tools, resources, hints and tips you need to get your AWS Solutions Architect certification. Make sure you check out the rest of Matt's writing for more on databases and AWS.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/mlewis7127" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuFxupj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yIg-FFR---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/289832/315e716e-c246-4b21-9838-c216c0729c6b.png" alt="mlewis7127 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-heroes/how-i-passed-the-solutions-architect-professional-with-mostly-free-content-ine" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I passed the Solutions Architect Professional with mostly free contentü•á&lt;/h2&gt;
      &lt;h3&gt;Matt Lewis „Éª Jun 19 '20 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/veebuv"&gt;Vaibhav&lt;/a&gt; and a beginners guide to the language of AWS and beginner-friendly examples. This post is a great read if you're getting started with AWS or looking for a refresher on key services.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/veebuv" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OrnYLeCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_9mIAsJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/154356/2a39fb27-eed0-4da9-9979-389276c16ae6.jpg" alt="veebuv image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/veebuv/7-vital-aws-concepts-easily-explained-n45" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Vital AWS Concepts easily explained&lt;/h2&gt;
      &lt;h3&gt;Vaibhav Namburi „Éª May 28 '20 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#backend&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/asim_ansari7"&gt;Asim&lt;/a&gt; then shares a tutorial for setting up and deploying an app using AWS. Check out this post, and the rest of Asim's writing, for how to get started quickly with different projects.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/asim_ansari7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUsuwbnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E0MoCNoR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/175714/03618946-c04b-4eaa-979d-f1237494b005.jpg" alt="asim_ansari7 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/asim_ansari7/deploy-a-react-node-app-to-production-on-aws-2gdf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;DEPLOY A REACT + NODE APP TO PRODUCTION ON AWS&lt;/h2&gt;
      &lt;h3&gt;Asim „Éª May 23 '20 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to another classic tutorial, this time from &lt;a href="https://dev.to/dabit3"&gt;Nader.&lt;/a&gt; Nader has been writing on Dev since 2019 and has shared tutorials, tips on breaking into DevRel, and more recently has focussed on AWS Amplify.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eITvyj2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B7bNg-e0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/fc030cc4-9f95-4dd2-812e-ffadd8fb4207.jpg" alt="dabit3 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws/building-a-serverless-live-streaming-platform-with-react-aws-1jmk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building a Serverless Live-streaming Platform with React &amp;amp; AWS&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit „Éª Mar 26 '20 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#awsamplify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#livestreaming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Sticking with the Amplify theme, our last classic post this month is from &lt;a href="https://dev.to/aspittel"&gt;Ali&lt;/a&gt;. Ali has been writing on Dev since 2017 with a focus on breaking into tech, beginners guides, and more advanced tutorials since joining the AWS Amplify team as a Senior Developer Advocate.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws/getting-started-with-amazon-s3-using-aws-amplify-5ake" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a Music Sharing App with Amazon S3 and AWS Amplify&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel „Éª Oct 13 '20 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more great posts check out the &lt;a href="https://dev.to/t/aws"&gt;#aws tag&lt;/a&gt; and the &lt;a href="https://dev.to/aws-heroes"&gt;AWS Heroes&lt;/a&gt;.&lt;/p&gt;




</description>
      <category>aws</category>
      <category>bestofdev</category>
      <category>classicdev</category>
    </item>
    <item>
      <title>Tips on Preparing a Great Developer Resume</title>
      <author>Linda</author>
      <pubDate>Tue, 16 Mar 2021 10:08:06 +0000</pubDate>
      <link>https://dev.to/lindaojo/tips-on-preparing-a-great-developer-resume-ag8</link>
      <guid>https://dev.to/lindaojo/tips-on-preparing-a-great-developer-resume-ag8</guid>
      <description>&lt;p&gt;If you are just starting out on your job search and have been wondering about how to prepare a great resume, then you will love these tips! Remember, the goal of your resume is to sell yourself enough to get a meeting with a recruiter.&lt;/p&gt;

&lt;h3&gt;Tailor your resume to the role&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhFS7HGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839972/customise_k8qzvv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhFS7HGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839972/customise_k8qzvv.jpg" alt="'Chef adding toppings to Pasta'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Research the role you are applying for and focus all your points around the criteria listed.&lt;/p&gt;

&lt;p&gt;Different companies have different needs. Tailoring your resume to reflect that you meet the required needs not only improves your chance of getting a callback but also shows you have a genuine interest in working at that company.&lt;/p&gt;

&lt;p&gt;You should use the job description as a guide by mirroring keywords and requirements in your resume.&lt;/p&gt;

&lt;p&gt;For instance, if the major tool for the available role is mentioned, you should reference projects built with that tool.&lt;/p&gt;

&lt;h3&gt;Optimise for readability&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4UTgkA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839910/readable_cgqtzo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4UTgkA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839910/readable_cgqtzo.jpg" alt="'Blurry text with glasses'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On average, most single-page resumes would be scanned through within a minute. It's important to ensure that one can read through your resume within a minute with ease and leave with a good understanding of who you are.&lt;/p&gt;

&lt;p&gt;A great way to improve readability is by having a simple layout that lets you communicate effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.canva.com"&gt;Canva&lt;/a&gt; has great templates which you can use to create beautiful resumes.&lt;/p&gt;

&lt;h3&gt;Relevant things first, Relevant things only&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNMmeOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840193/relevance_kefotj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNMmeOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840193/relevance_kefotj.jpg" alt="'Relevance'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have the task of making a good impression within a short period of time. Every point should signal to the recruiter that you are a good fit for the team.&lt;/p&gt;

&lt;p&gt;You should only write things on your resume that would improve your chances by sharing useful information with the recruiter. You should not write skills on your resume that are not relevant to the present role you are applying to.&lt;/p&gt;

&lt;p&gt;You can have multiple resumes that contain different sets of skills if you are applying to different roles at once. For instance, you should not use the same resume to apply for a Technical Writer and Frontend Developer role.&lt;/p&gt;

&lt;h3&gt;Use numbers and results&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkSPp6cT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/results_llmfpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkSPp6cT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/results_llmfpk.png" alt="'Charts'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using numbers and outlining the impact you had in past roles does a better job at communicating your relevance to a team instead of listing vague responsibilities.&lt;/p&gt;

&lt;p&gt;For instance, instead of saying:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;" Built complex software features, while working directly with the product owner."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should state a major feature you built and the effect it had on the company profits or user experience e.t.c.&lt;/p&gt;

&lt;p&gt;E.g&lt;br&gt;
&lt;strong&gt;"Implemented a new payment feature with a team of UI designers and product managers which lead to a 11% increase in monthly revenue."&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Don't Quantify your skills&lt;/h3&gt;

&lt;p&gt;Simply list the skills that you possess and let the recruiter be the judge of your proficiency. Don't cut yourself short by quantifying for skills e.g&lt;/p&gt;

&lt;p&gt;‚ùå JavaScript - 60%&lt;/p&gt;

&lt;p&gt;‚ùå HTML - 70%&lt;/p&gt;

&lt;p&gt;‚ùå Angular - 60%&lt;/p&gt;

&lt;p&gt;‚ùå React - 70%&lt;/p&gt;

&lt;p&gt;Please don't do this üëÜüèæ. Not only does it reduce readability it could also reduce your chances.&lt;/p&gt;

&lt;h3&gt;Be honest&lt;/h3&gt;

&lt;p&gt;You should never lie on your resume. If you are going to get that role, you want to get it the right way.&lt;/p&gt;

&lt;p&gt;You shouldn't lie about your years of experience, skills, or interests. Honesty saves everyone's time. &lt;/p&gt;

&lt;h3&gt;Be confident&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ma_Drq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840345/confidence_tzkktx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ma_Drq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840345/confidence_tzkktx.jpg" alt="'Confidence'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be confident in your skills no matter what level you are on. The presence or absence of confidence can be sensed through your resume. You have to believe in yourself&lt;/p&gt;

&lt;h3&gt;Pay attention to details&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRfWexvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840459/details_znej9l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRfWexvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615840459/details_znej9l.jpg" alt="'Attention to Details'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to proofread your resume and also bring on a second set of eyes.&lt;br&gt;
Having multiple grammatical errors in your resume does not speak well of you and could indicate that you don't pay attention to details.&lt;/p&gt;

&lt;p&gt;You would be required to communicate effectively in any job role. Having good writing skills is always a plus.&lt;/p&gt;

&lt;h3&gt;Always save your resume as a PDF file&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmWuK5Dv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/pdf_ebif6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmWuK5Dv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1615839907/pdf_ebif6u.png" alt="'PDF'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you imagine doing all this work and it shows up all scrambled up on the recruiter's screen? To avoid this, always have your resume with the pdf format. That way you can be sure the recruiter would be viewing your resume exactly how you designed it.&lt;/p&gt;

&lt;p&gt;That's all folks, If this was helpful, share it!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>siliconvalley</category>
      <category>programming</category>
    </item>
    <item>
      <title>Fixing a 40-year-old Software Bug</title>
      <author>Ovid</author>
      <pubDate>Tue, 16 Mar 2021 09:44:59 +0000</pubDate>
      <link>https://dev.to/ovid/fixing-a-40-year-old-software-bug-jmm</link>
      <guid>https://dev.to/ovid/fixing-a-40-year-old-software-bug-jmm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I have exact numbers for this because I originally wrote this on the day I found the bug.&lt;/p&gt;




&lt;p&gt;I was working on an ETL system designed to reduce the cost of Phase III clinical trials. In doing so, I was reading some data and I processed 36,916 potential dates. Two of those 36,916 failed to validate. I wasn't concerned as these dates came from clients at big pharmaceutical companies handing us spreadsheets the often had only a vague match with our specification. When you work with clients much larger than you, you often just grin and bear it and die a little inside each day (which reminds me, I need to write up my hell with Yahoo's now-extinct IDIF format some day).&lt;/p&gt;

&lt;p&gt;On that day, however, the pharmaceuticals were blameless. When I inspected the raw data, the failed dates were January 1&lt;sup&gt;st&lt;/sup&gt;, 2011 and January 1&lt;sup&gt;st&lt;/sup&gt;, 2007. I knew those dates. This wasn't sloppy data from a client. I had a bug in software I had just written, but this bug was first released in 1983.&lt;/p&gt;

&lt;p&gt;For anyone who doesn't understand the software ecosystem, this may sound mystifying, but it makes sense. Because of a decision taken a long time ago to make another company money, my client lost money in paying me to fix a bug that one company accidentally introduced and another company deliberately introduced. But to explain it I need to talk about a third company that introduced a &lt;em&gt;feature&lt;/em&gt; that eventually became a bug, and a few other historical tidbits that nonetheless contributed to the obscure bug I fixed that day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#history" class="anchor"&gt;
  &lt;/a&gt;
  History
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#system-clocks" class="anchor"&gt;
  &lt;/a&gt;
  System Clocks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0I0KkhLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y19kul1s9vu4y2ead1c2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0I0KkhLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y19kul1s9vu4y2ead1c2.jpg" alt="Apple II computer with external modem" title="Much of my early programming was on these bad boys."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the good ol' days, Apple computers would sometimes spontaneously reset their date to January 1&lt;sup&gt;st&lt;/sup&gt;, 1904. The reason for this is simple. Back then, &lt;a href="http://en.wikipedia.org/wiki/Apple_II_system_clocks"&gt;Apple computers used battery-powered "system clocks"&lt;/a&gt; to keep track of the date and time. What happened when the battery ran out? Apple computers tracked their dates as &lt;a href="http://lowendmac.com/tech/1-1-2k.shtml"&gt;the number of seconds since the epoch&lt;/a&gt;.  In this sense, an &lt;a href="http://en.wikipedia.org/wiki/Epoch_(reference_date)"&gt;epoch&lt;/a&gt; is merely a reference date from which we start counting and for Macintosh computers, that epoch was January 1&lt;sup&gt;st&lt;/sup&gt;, 1904 and when the system clock battery died, that was your new date and it caused a curious problem.&lt;/p&gt;

&lt;p&gt;Back then, Apple used 32 bits (ones and zeros) to store the number of seconds from their start date. One bit can hold one of  two values, 0 or 1. Two bits can hold one of four values, 00, 01, 10, 11. Three bits can hold one of eight values, 000, 001, 010, 011, 100, 101, 110, 111, and so on. How much can 32 bits hold? 32 bits can hold one of 2&lt;sup&gt;32&lt;/sup&gt;, or 4,294,967,296, values. 2&lt;sup&gt;32&lt;/sup&gt; seconds is just over 136 years, which is why &lt;a href="http://lowendmac.com/lab/04/0115.html"&gt;older Macs couldn't handle dates after 2040&lt;/a&gt; and if your system clock battery died, your date would reset to 0 seconds after the epoch and you'd have to keep manually resetting the date every time you turned on your computer (or until you bought a new battery for your system clock).&lt;/p&gt;

&lt;p&gt;However, the Apple solution of storing dates as the number of seconds &lt;em&gt;after&lt;/em&gt; the epoch means we couldn't handle dates &lt;em&gt;before&lt;/em&gt; the epoch and that had far-reaching implications, as we'll see. This was a feature, not a bug, that Apple introduced. It meant, amongst other things, that the Macintosh operating system was immune to the Y2K bug. (Ironically, many Mac apps weren't immune because they would introduce their own date system to work around the Mac limitations.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lotus-123" class="anchor"&gt;
  &lt;/a&gt;
  Lotus 1-2-3
&lt;/h2&gt;

&lt;p&gt;Moving along, we have &lt;a href="http://en.wikipedia.org/wiki/Lotus_1-2-3"&gt;Lotus 1-2-3&lt;/a&gt;, IBM's "killer app" that helped to launch the PC revolution, though it was &lt;a href="http://en.wikipedia.org/wiki/VisiCalc"&gt;VisiCalc&lt;/a&gt; on the Apple that really launched the personal computer. It's fair to say that if 1-2-3 hadn't come along, PCs would likely have not taken off as quickly as they had and computer technology would have turned out considerably differently. However, Lotus 1-2-3 incorrectly reported 1900 as a leap year. (In literary terms, that sentence is what we call "foreshadowing")&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G46B3LGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d19k4jxmp4x08emjsv6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G46B3LGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d19k4jxmp4x08emjsv6t.png" alt="Text of a Lotus 1-2-3 spreadsheet" title="The Glory Days of Lotus 1-2-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Microsoft released Multiplan, their first spreadsheet program, &lt;a href="http://www.memecentral.com/mylife.htm"&gt;it didn't have much market penetration&lt;/a&gt;. So when they conceived of Excel, they decided to not only copy 1-2-3's row/column naming scheme, they made it bug-for-bug compatible, including treating 1900 as a leap year, &lt;a href="http://support.microsoft.com/kb/214326"&gt;a problem that remains to this day&lt;/a&gt;. This wasn't to be sneaky; they needed Excel to be able to import Lotus 1-2-3 spreadsheets. So for 1-2-3, this was a bug, but for Excel, it was a feature, even if meant sometimes getting dates wrong.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epochs" class="anchor"&gt;
  &lt;/a&gt;
  Epochs
&lt;/h2&gt;

&lt;p&gt;When Microsoft wanted to release Excel for Apple's Macintosh computers, they had a problem. As mentioned, Macintosh didn't recognize dates prior to January 1&lt;sup&gt;st&lt;/sup&gt;, 1904. However, Excel used January 1&lt;sup&gt;st&lt;/sup&gt;, 1900 as its epoch. So Excel was modified to recognize what the epoch was and internally stored dates relative to these respective epochs. &lt;a href="http://support.microsoft.com/kb/214330"&gt;This Microsoft support article explains the problem fairly clearly&lt;/a&gt;. And that leads to &lt;em&gt;my&lt;/em&gt; bug.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-bug" class="anchor"&gt;
  &lt;/a&gt;
  My Bug
&lt;/h1&gt;

&lt;p&gt;My client received spreadsheets from many customers. Those spreadsheets may have been produced on Windows, but they may have been produced on a Mac. As a result, the "epoch" date for the spreadsheets might be January 1&lt;sup&gt;st&lt;/sup&gt;, 1900 or January 1&lt;sup&gt;st&lt;/sup&gt;, 1904. How do you know which one? Well, the &lt;a href="http://msdn.microsoft.com/en-us/library/dd906747(v=office.12).aspx"&gt;Excel file format exposes this information&lt;/a&gt;, but the parser I was using did not and it expected you to know whether you have a 1900 or 1904-based spreadsheet. I suppose I could have spent a lot of time trying to figure out how to read the binary format of Excel and sent a patch to the maintainer of the parser, but I had many other things to do for my client and so I quickly wrote a heuristic to determine whether or not a given spreadsheet was 1900 or 1904. It was pretty simple.&lt;/p&gt;

&lt;p&gt;In Excel, you may have a date of July 5, 1998, but it might be formatted as "07-05-98" (the useless US system), "Jul 5, 98", "July 5, 1998", "5-Jul-98" or any of a number of other useless formats (ironically, the one format my version of Excel didn't offer was the standard ISO 8601 format). Internally, however, the &lt;em&gt;unformatted&lt;/em&gt; value is either "35981", for the 1900 date system, or "34519", for the 1904 system (these numbers represent the number of days after the epoch). So I used a robust date parser to extract the year from the formatted date, and then an Excel date parser to extract the year from the unformatted value. If they're four years apart, I know I'm using the 1904 date system.&lt;/p&gt;

&lt;p&gt;So why didn't I simply use the formatted date? Because July 5, 1998 &lt;em&gt;might&lt;/em&gt; be formatted as "July, 98", losing me the day of the month. We get our spreadsheets from so many companies and they create them in so many different ways that they expect &lt;em&gt;us&lt;/em&gt; (meaning me, in this case) to figure it out. After all, Excel gets it right, I should, too!&lt;/p&gt;

&lt;p&gt;That's when 39082 kicked me in the tail. Remember how Lotus 1-2-3 considered 1900 a leap year and how that was faithfully copied to Excel? Because it adds an extra day to 1900, many date calculation functions relying on this can easily be off by a day. That means that 39082 &lt;em&gt;might&lt;/em&gt; be January 1&lt;sup&gt;st&lt;/sup&gt;, 2011 (on Macs), or it &lt;em&gt;might&lt;/em&gt; be December 31&lt;sup&gt;st&lt;/sup&gt;, 2006 (on Windows). If my "year parser" extracts 2011 from the formatted value, well, that's great. But since the Excel parser doesn't know whether it's a 1900 or 1904 date system, it defaults to the common 1900 date system, returns 2006 as the year, my software saw that the years were &lt;em&gt;five&lt;/em&gt; years apart, assumed an error, logged it, and returned the unformatted value.&lt;/p&gt;

&lt;p&gt;To work around this, I wrote the following (pseudo-code):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;difference = formatted_year - parsed_year
if 0 == difference:
    assume 1900 date system
if 4 == difference:
    assume 1904 date system
if 5 == difference &amp;amp;&amp;amp; 12 == month &amp;amp;&amp;amp; 31 == day:
    assume 1904 date system
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And all 36,916 dates parsed correctly.&lt;/p&gt;




&lt;p&gt;As an aside, &lt;a href="http://www.joelonsoftware.com/items/2006/06/16.html"&gt;according to an anecdote from Joel Spolsky&lt;/a&gt;, the Lotus 1-2-3 "bug" may have been a deliberate attempt to simplify the Lotus software.&lt;/p&gt;

</description>
      <category>bug</category>
      <category>excel</category>
      <category>history</category>
      <category>etl</category>
    </item>
    <item>
      <title>The process behind creating a ruby gem</title>
      <author>Abeid Ahmed</author>
      <pubDate>Tue, 16 Mar 2021 09:39:57 +0000</pubDate>
      <link>https://dev.to/abeidahmed/the-process-behind-creating-a-ruby-gem-492j</link>
      <guid>https://dev.to/abeidahmed/the-process-behind-creating-a-ruby-gem-492j</guid>
      <description>&lt;p&gt;Lately, especially in the rails community, we've been witnessing lots of new stuff like the &lt;a href="https://github.com/hotwired"&gt;hotwire&lt;/a&gt;, and the new encryption system.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjByp3vJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EwJ4wmnXIAEKl_Z.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--AsBXLX9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1176398908983042048/CbStYFS7_normal.jpg" alt="Jorge Manrubia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jorge Manrubia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jorgemanru
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Excited about finally sharing the encryption system we cooked for HEY. Will happen this week. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:19 PM - 10 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1369790017724375048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1369790017724375048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1369790017724375048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you notice carefully, all of these have been extracted from pre-existing applications.&lt;/p&gt;

&lt;p&gt;So you might be wondering, what's the deal with extractions? Why can't I just start writing the gem?&lt;/p&gt;

&lt;p&gt;The most obvious answer that I can give you is that it is difficult to visualize the usage of the gem itself. For example, say you're building an authorization library gem. You would probably need some &lt;code&gt;method&lt;/code&gt; that would run before the &lt;code&gt;controller&lt;/code&gt; actions and pass in some &lt;code&gt;attributes&lt;/code&gt; like the &lt;code&gt;current_user&lt;/code&gt;, &lt;code&gt;role&lt;/code&gt;, &lt;code&gt;action&lt;/code&gt; name, etc to the &lt;code&gt;policy&lt;/code&gt;. Also, should the policies be scoped to the &lt;code&gt;model&lt;/code&gt;? But if you do that, how would you deal with policies that do not have a &lt;code&gt;model&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In order to answer all of these questions, it would be much easier to first implement the functionality into your existing rails application and then extract it if you wish to do so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story-behind" class="anchor"&gt;
  &lt;/a&gt;
  The story behind
&lt;/h2&gt;

&lt;p&gt;Recently, I was working on a project that had the traditional dashboard design; plenty of &lt;code&gt;SVG&lt;/code&gt; icons, user avatar, unnecessary graphs, and charts, etc. The Figma wireframes used icons from &lt;a href="https://heroicons.com/"&gt;heroicons&lt;/a&gt;, and naturally, the first thought that came to my mind was to look for a gem that provided a &lt;code&gt;views&lt;/code&gt; helper method for rendering out the icons. &lt;/p&gt;

&lt;p&gt;I found a couple of gems that did this, and I quickly installed one of them and started using it. After some time, I realized the gem that I installed wasn't extensible. I wasn't able to pass other &lt;code&gt;HTML&lt;/code&gt; attributes other than the ones supported by the gem. So the only thought that came into my mind was to create a helper method that would take in any &lt;code&gt;HTML&lt;/code&gt; attribute like the &lt;code&gt;styles&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;aria&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The first thing that I did was to look for other &lt;code&gt;ruby&lt;/code&gt; gems that did something like this. I came across &lt;a href="https://github.com/primer/octicons/tree/master/lib/octicons_gem"&gt;octicons&lt;/a&gt; by GitHub and liked how they implemented the gem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-figuring-out-the-syntax-of-the-helper-method" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 - Figuring out the syntax of the helper method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heroicon&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"custom-class"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;aria: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;label: &lt;/span&gt;&lt;span class="s2"&gt;"user icon"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is the icon name, and the rest of the options are &lt;code&gt;HTML&lt;/code&gt; attributes. Rails already provides a neat helper method called the &lt;code&gt;content_tag&lt;/code&gt;, so it was a no-brainer for me to utilize it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-setting-up-the-defaults" class="anchor"&gt;
  &lt;/a&gt;
  Step 2 - Setting up the defaults
&lt;/h3&gt;

&lt;p&gt;Each icon library has some defaults, like &lt;code&gt;stroke-width&lt;/code&gt;, &lt;code&gt;viewBox&lt;/code&gt;, etc. In the case of &lt;a href="https://heroicons.com/"&gt;heroicon&lt;/a&gt;, they had two variants, namely: outline and solid. So I came up with the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heroicon&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;variant: &lt;/span&gt;&lt;span class="s2"&gt;"solid"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or, just&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;heroicon&lt;/span&gt; &lt;span class="s2"&gt;"user"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for rendering the &lt;code&gt;outline&lt;/code&gt; version of the icon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-implementing-the-logic" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 - Implementing the logic
&lt;/h3&gt;

&lt;p&gt;After you come with a syntax that you like, the next step would be to test out the helper method and write the logic for it. You're pretty much done now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-bundling-into-a-gem" class="anchor"&gt;
  &lt;/a&gt;
  Step 4 - Bundling into a gem
&lt;/h3&gt;

&lt;p&gt;What's on this step? Initialize the gem repo, copy and paste all the logic and the tests, write your gem's description, and publish it to the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfpromotion" class="anchor"&gt;
  &lt;/a&gt;
  Self-promotion
&lt;/h2&gt;

&lt;p&gt;This is the gem (&lt;a href="https://github.com/abeidahmed/rails-heroicon"&gt;rails_heroicon&lt;/a&gt;) that I implemented following this process. Be sure to stargaze it and use it in your next project if you feel the need to use &lt;code&gt;SVG&lt;/code&gt; icons.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was so satisfied with this process that I created another gem for &lt;a href="https://feathericons.com/"&gt;feathericons&lt;/a&gt;. The gem is called &lt;a href="https://github.com/abeidahmed/rails_feather"&gt;rails_feather&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I agree that there isn't one way of doing the right thing. Especially in software engineering, it's all about trial and error. I found this process quite productive and useful and thought I would share it with you all.&lt;br&gt;
I hope you find it useful. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>API Mocking Strategies for JavaScript Applications</title>
      <author>Artem Zakharchenko</author>
      <pubDate>Tue, 16 Mar 2021 09:08:30 +0000</pubDate>
      <link>https://dev.to/kettanaito/api-mocking-strategies-for-javascript-applications-48kl</link>
      <guid>https://dev.to/kettanaito/api-mocking-strategies-for-javascript-applications-48kl</guid>
      <description>&lt;p&gt;API mocking is easily the most common kind of mocking in JavaScript (apart from the mocking about how there's a new framework every day). No matter what application you're building, it is likely to make some HTTP calls. &lt;/p&gt;

&lt;p&gt;So why do you even need mocking? A good question, &lt;a href="https://dev.to/kettanaito/when-should-i-not-use-mocks-in-testing-544e"&gt;perhaps you don't&lt;/a&gt;. However, if you wish to test the code you write, you'd also have to test the code that does HTTP requests. Making actual requests in your tests is a sure path to flaky and unreliable tests, and here's where API mocking comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-requests-journey" class="anchor"&gt;
  &lt;/a&gt;
  The Request's Journey
&lt;/h2&gt;

&lt;p&gt;Before we rush into code, let's stop for a moment and think about what we're trying to achieve here.&lt;/p&gt;

&lt;p&gt;Mocking is the action of substituting a piece of software with another, seemingly compatible piece. Since we wish to mock an API call, we will be substituting &lt;em&gt;some piece&lt;/em&gt; of the logic responsible for making that call. To better understand which part and why we'll be mocking, we need to visualize a journey of the request first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a high-level overview of what happens when your application makes a request:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7cxaswi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgh5db7ha50vet8gu9w4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cxaswi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgh5db7ha50vet8gu9w4.png" alt="The request's journey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your application calls a &lt;em&gt;request client&lt;/em&gt; to make a request. This can be &lt;code&gt;window.fetch&lt;/code&gt;, &lt;code&gt;react-query&lt;/code&gt;, or Apollo. &lt;/li&gt;
&lt;li&gt;The request client forms a proper request based on your input (resource path, query parameters, headers, body, etc.), and sends it over HTTP to the &lt;em&gt;server&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The server receives a request and returns a &lt;em&gt;response&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Your application receives the response.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;It's important to mention that this diagram may differ based on the application architecture you have. However, there always will be these fundamental pieces: a logic that dispatches a request and a server that processes that request. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This overview gives us some visual clues towards what parts conclude a request. We will be mocking one of those parts to achieve our goal. Now to decide which one...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-mocking-strategies" class="anchor"&gt;
  &lt;/a&gt;
  API mocking strategies
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I've been honored to speak about various API mocking strategies at this year's TestJS Summit conference. In the video below you can get a grasp over mocking as a technique, its purpose, and the most common (&lt;em&gt;and the most efficient&lt;/em&gt;) ways to achieve it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/76yEzm07Kfk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's take a closer look at each strategy in the written form today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Out of the request's journey components (application, request client, server) we surely don't wish to mock an application. That's the code we're trying to test, and mocking it would be, well, pointless. &lt;/p&gt;

&lt;p&gt;This leaves us with the two remaining parts, each representing a mocking strategy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mocking the request client.&lt;/li&gt;
&lt;li&gt;Mocking the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both these strategies are applicable and widely used. Just as any decision in programming, choosing any of these strategies comes with benefits and drawbacks. Let's focus on those.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mocking-the-request-client" class="anchor"&gt;
  &lt;/a&gt;
  Mocking the request client
&lt;/h3&gt;

&lt;p&gt;When you mock the request client, you're making the following change in the request's journey:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEpfxsge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m38dz9a60knsygfu31zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEpfxsge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m38dz9a60knsygfu31zj.png" alt="The request journey altered by the mocking request client strategy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By mocking (substituting) the request client, the &lt;em&gt;actual&lt;/em&gt; request client is taken out of the equation. A compatible client is placed in its stead, giving us the desired power to mock the responses our application receives.&lt;/p&gt;

&lt;p&gt;The most basic example that illustrates this mocking strategy in practice is when you stub the &lt;code&gt;window.fetch&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Respond with a mocked response&lt;/span&gt;
  &lt;span class="c1"&gt;// any time our code calls "window.fetch".&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, most of the time you would use a third-party library that abstracts this logic for you. Some of the prominent libraries for this strategy are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/miragejs/miragejs"&gt;MirageJS&lt;/a&gt;, through &lt;a href="https://github.com/pretenderjs/pretender/blob/e4fa32ab491f5479bb1d0440be1f64e2904994c1/src/index.ts#L32"&gt;Pretender&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nock/nock"&gt;nock&lt;/a&gt;, through &lt;a href="https://github.com/nock/nock/blob/2134a418c358d4134233ffaf7bb25809a5869a71/lib/common.js#L93-L110"&gt;stubbing &lt;code&gt;http&lt;/code&gt;/&lt;code&gt;https&lt;/code&gt; modules&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://netflix.github.io/pollyjs"&gt;PollyJS&lt;/a&gt;, through various &lt;a href="https://github.com/Netflix/pollyjs/tree/cbca602a5a446da46a4a2834f893670b8c577880/packages/%40pollyjs"&gt;adapters&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h4&gt;

&lt;p&gt;This strategy gives us control over the requests/responses at the earliest stage of their flow. The cost of such control is also minimal, as the mocking logic lives entirely in the client-side code, next to our application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h4&gt;

&lt;p&gt;If you take a closer look at the diagram altered by this strategy, you'll notice that not only the "Server" part is blackened out, but also the "Request" part. That is because replacing the request client means &lt;strong&gt;it never actually makes a request&lt;/strong&gt;. If a request "leaves" the client, it won't be able to control it anymore.&lt;/p&gt;

&lt;p&gt;There's also a behavioral divergence for your application: it &lt;em&gt;does&lt;/em&gt; a request in production, but it &lt;em&gt;doesn't&lt;/em&gt; in the tests. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mocking-the-server" class="anchor"&gt;
  &lt;/a&gt;
  Mocking the server
&lt;/h3&gt;

&lt;p&gt;Alternatively, we can replace the "server" part of the request journey to make it look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahAfrP2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcyjxjyk17wq4dum5twr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahAfrP2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcyjxjyk17wq4dum5twr.png" alt="Mocking server strategy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since our request client is configured to communicate with a production server, such request destination detour often happens by introducing some sort of conditional URL logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IS_TEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;IS_TEST&lt;/span&gt;
    &lt;span class="c1"&gt;// Communicate with a local mock server while testing.&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.backend.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of the most prominent libraries for this mocking strategy are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/typicode/json-server"&gt;JSON Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/setting-up-mock/"&gt;Postman's mock servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plain &lt;a href="https://expressjs.com/"&gt;ExpressJS server&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h4&gt;

&lt;p&gt;With the mocking server strategy, we're allowing the request client to fully execute because it's the server part that we're placing. This makes our application behavior under test &lt;em&gt;almost idenctical&lt;/em&gt; to the one in production. Almost.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h4&gt;

&lt;p&gt;For this strategy to work, our request client must know when and how to decide which server endpoint to use. Regardless of the technical details of this strategy, it means that the requests are hitting &lt;em&gt;an entirely different server&lt;/em&gt;. Introducing any kind of deviation puts the logic you're resting at risk. Consider this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;IS_TEST&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hts://apibackendcom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Ehm, is this okay?&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The actual production server URL is corrupted in the example above. Guess what, the tests would still pass while the application would be successfully broken for your users.&lt;/p&gt;

&lt;p&gt;There is also a minor operational hassle, as you need to spawn and terminate the local mocking server before/after your test suites. You must ensure the mocking server's operability so that there are no unhandled exceptions that may fail your tests, resulting in false negatives.&lt;/p&gt;

&lt;p&gt;Overall, introducing an entire server for the sake of mocking may be considered an overhaul. Even if you're using it for this specific purpose, it's still an actual server you need to write and maintain, increasing the operational cost of this setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using third-party libraries often abstracts the operational aspect of the mocking server, so you're not experiencing it directly. That doesn't mean that it's magically gone. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#which-strategy-to-choose" class="anchor"&gt;
  &lt;/a&gt;
  Which strategy to choose?
&lt;/h2&gt;

&lt;p&gt;The mocking strategy you choose largely depends on the environment where you wish to mock API. Certain environments, such as the browser, allow you to intercept requests on the network level via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;Service Worker API&lt;/a&gt;. That way you compromise on neither request client nor server, allowing &lt;em&gt;all&lt;/em&gt; your logic to execute, hit the same production endpoints, and receive the mocked response you're in charge of.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Libraries like &lt;a href="https://github.com/mswjs/msw"&gt;Mock Service Worker&lt;/a&gt; leverage this unique browser ability gracefully to provision seamless API mocking. Let me know if you would like to learn more about this unusual strategy in the comments below!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are, however, environments that don't have a designated API to intercept outgoing requests. Running tests in Node.js, for example, would likely require your mocking setup to stub request issuing modules (such as &lt;code&gt;http.request&lt;/code&gt;) in order to know what requests are happening, and mock their responses.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#afterword" class="anchor"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;Regardless of which API mocking strategy you end up choosing, please remember that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The less test-specific setup you have, the better;&lt;/li&gt;
&lt;li&gt;The less your app's behavior changes for the sake of tests, the better;&lt;/li&gt;
&lt;li&gt;The closer to the server your request interception is, the better.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you've enjoyed this analysis of different API mocking strategies you may adopt. Make sure to &lt;a href="https://twitter.com/kettanaito"&gt;follow me on Twitter&lt;/a&gt; to stay in touch with the articles I write. Stay productive!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>testing</category>
      <category>mocking</category>
    </item>
  </channel>
</rss>
