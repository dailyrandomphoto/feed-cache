<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 34 of 100 Days of Code &amp; Scrum: No Signal Found, Dead Internet</title>
      <author>Rammina</author>
      <pubDate>Thu, 11 Nov 2021 10:27:04 +0000</pubDate>
      <link>https://dev.to/rammina/day-34-of-100-days-of-code-scrum-no-signal-found-dead-internet-5fj9</link>
      <guid>https://dev.to/rammina/day-34-of-100-days-of-code-scrum-no-signal-found-dead-internet-5fj9</guid>
      <description>&lt;p&gt;My main Internet connection was dead today. That really killed my productivity.&lt;/p&gt;

&lt;p&gt;This blog post was sent using 4G mobile data. Thankfully, I have some offline resources like flashcards and e-books, so I could still somehow study a little bit. I also was kind of dizzy earlier in the morning and was stuck on bed for a while. I'm just going to put the &lt;code&gt;badday&lt;/code&gt; label for today, one of those things I can't control.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I worked on my hero banner for my website, and did some Scrum flashcards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RIP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I read whatever was on my offline cache...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you all have Internet, because mine is dead.&lt;/p&gt;

&lt;p&gt;Have a good day, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create your own webpage with easy drag and drop</title>
      <author>Chetan</author>
      <pubDate>Thu, 11 Nov 2021 09:40:19 +0000</pubDate>
      <link>https://dev.to/chetan11dev/create-your-own-webpage-with-easy-drag-and-drop-33mc</link>
      <guid>https://dev.to/chetan11dev/create-your-own-webpage-with-easy-drag-and-drop-33mc</guid>
      <description>&lt;p&gt;&lt;strong&gt;PS: I am the author of Vareniyam Tool&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can create your website using Vareniyam in a drag and drop interface similar to how you do it in figma. &lt;/p&gt;

&lt;p&gt;It is currently in beta and is not ready for it is prime time. You may like to use it because you are a developer and you like to try different unique technologies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to do it&lt;/strong&gt; &lt;br&gt;
Simply visit &lt;a href="https://vareniyam.vercel.app/"&gt;https://vareniyam.vercel.app/&lt;/a&gt; and start playing with the interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9Dr9gA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fchupfqku2x56kfrhg6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9Dr9gA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fchupfqku2x56kfrhg6i.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apologies&lt;/strong&gt;&lt;br&gt;
Changes you will make will not be saved.&lt;br&gt;
You cannot export the html content. Use chrome inspector if you would like to do so.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Scrape Naver News Results with Python</title>
      <author>Dimitry Zub ☀️</author>
      <pubDate>Thu, 11 Nov 2021 09:23:17 +0000</pubDate>
      <link>https://dev.to/dimitryzub/scrape-naver-news-results-with-python-1ik7</link>
      <guid>https://dev.to/dimitryzub/scrape-naver-news-results-with-python-1ik7</guid>
      <description>&lt;p&gt;In this blog post you will see how to scrape title, link, snippet, news press name, date news published from Naver News Results using Python.&lt;/p&gt;

&lt;p&gt;If you're already familiar with how I structure blog posts, then you can &lt;a href="#what_will_be_scraped"&gt;jump to &lt;em&gt;what will be scraped&lt;/em&gt; section&lt;/a&gt; since the &lt;em&gt;Intro&lt;/em&gt;, &lt;em&gt;Prerequisites&lt;/em&gt;, and &lt;em&gt;Import&lt;/em&gt; sections are, for the most part, boilerplate part. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog is suited for users with little web scraping experience.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="#naver"&gt;What is Naver Search&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#intro"&gt;Intro&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#imports"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#what_will_be_scraped"&gt;What will be scraped&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#process"&gt;Process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#code"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#outro"&gt;Outro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="naver"&gt;What is Naver Search&lt;/h2&gt;

&lt;p&gt;Naver is the most widely used platform in South Korea and it is used there more than Google, based &lt;a href="https://www.link-assistant.com/blog/google-vs-naver-why-cant-google-dominate-search-in-korea/"&gt;Link Assistant&lt;/a&gt; and &lt;a href="https://croud.com/blog/an-introduction-to-naver/"&gt;Croud&lt;/a&gt; blog posts.&lt;/p&gt;

&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;

&lt;p&gt;This blog post is the first of Naver web scraping series. Here you'll see how to scrape Naver News Results using Python with &lt;code&gt;beautifulsoup&lt;/code&gt;, &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;lxml&lt;/code&gt; libraries.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This blog post shows how to extract data that is being shown in the &lt;a href="#what_will_be_scraped"&gt;what will be scraped section&lt;/a&gt;, and don't cover different layout handling (unless said otherwise).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt; 
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;beautifulsoup4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure to have a basic knowledge of Python, have a basic idea of the libraries mentioned above (&lt;em&gt;except API&lt;/em&gt;), and have a basic understanding of  &lt;code&gt;CSS&lt;/code&gt; selectors because you'll see mostly usage of &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors"&gt;&lt;code&gt;select()&lt;/code&gt;/&lt;code&gt;select_one()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;beautifulsoup&lt;/code&gt; methods that accept &lt;code&gt;CSS&lt;/code&gt; selectors. &lt;/p&gt;

&lt;p&gt;Usually, I'm using &lt;a href="https://selectorgadget.com/"&gt;SelectorGadget&lt;/a&gt; extension to grab &lt;code&gt;CSS&lt;/code&gt; selectors by clicking on the desired element in the browser. &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;&lt;code&gt;CSS&lt;/code&gt; selectors reference&lt;/a&gt;, or train on a few examples via &lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if SelectorGadget can't get the desired element, I use Elements tab via Dev Tools (&lt;em&gt;F12 on a keyboard&lt;/em&gt;) to locate and grab &lt;code&gt;CSS&lt;/code&gt; selector(s) or other HTML elements. &lt;/p&gt;

&lt;p&gt;To test if the selector extracts correct data you can place those &lt;code&gt;CSS&lt;/code&gt; selector(s) in SelectorGadget window, or via Dev Tools Console tab using &lt;a href="https://developer.chrome.com/docs/devtools/console/utilities/#querySelectorAll-function"&gt;&lt;code&gt;$$(".SELECTOR")&lt;/code&gt;&lt;/a&gt; which is equivalent to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"&gt;&lt;code&gt;document.querySelectorAll(".SELECTOR")&lt;/code&gt;&lt;/a&gt; to see if the correct elements being selected.&lt;/p&gt;

&lt;h2 id="imports"&gt;Imports&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h2 id="what_will_be_scraped"&gt;What will be scraped&lt;/h2&gt;

&lt;p&gt;All News Results from the first page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbaT4_ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c7m5ggksn0qu4k9wtd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbaT4_ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3c7m5ggksn0qu4k9wtd7.png" alt="what will be scraped from Naver News results" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="process"&gt;Process&lt;/h2&gt;

&lt;p&gt;If you don't need an explanation, jump to the &lt;a href="#code"&gt;code section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There're not a lot of steps that needs to be done, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a request and save HTML locally.&lt;/li&gt;
&lt;li&gt;Find correct &lt;code&gt;CSS&lt;/code&gt; selectors or HTML elements from where to extract data.&lt;/li&gt;
&lt;li&gt;Extract data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#make-a-request-and-save-html-locally"&gt;
  &lt;/a&gt;
  Make a request and save HTML locally
&lt;/h3&gt;

&lt;p&gt;Why save locally? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main point of this is to make sure that IP won't be banned or blocked for some time, which will delay the script development process. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When requests are being sent constantly (&lt;em&gt;regular user won't do that&lt;/em&gt;) from the same IP, this could be detected (&lt;em&gt;tagged or whatever, as unusual behavior&lt;/em&gt;) and blocked or banned to secure the website. &lt;/p&gt;

&lt;p&gt;Try to save HTML locally first, test everything you need there, and then start making actual requests.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"minecraft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"where"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"news"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://search.naver.com/search.naver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_naver_news.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#what-weve-done-here"&gt;
  &lt;/a&gt;
  What we've done here?
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#import-a-raw-requests-endraw-library"&gt;
  &lt;/a&gt;
  Import a &lt;code&gt;requests&lt;/code&gt; library
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#add-raw-useragent-endraw-"&gt;
  &lt;/a&gt;
  Add &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/User_agent"&gt;&lt;code&gt;user-agent&lt;/code&gt;&lt;/a&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#add-search-query-raw-parameters-endraw-"&gt;
  &lt;/a&gt;
  Add search query &lt;a href="https://docs.python-requests.org/en/master/user/quickstart/#passing-parameters-in-urls"&gt;&lt;code&gt;parameters&lt;/code&gt;&lt;/a&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"minecraft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# search query
&lt;/span&gt;    &lt;span class="s"&gt;"where"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"news"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c1"&gt;# news results
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#pass-raw-useragent-endraw-and-query-raw-params-endraw-"&gt;
  &lt;/a&gt;
  Pass &lt;code&gt;user-agent&lt;/code&gt; and query &lt;code&gt;params&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Pass &lt;code&gt;user-agent&lt;/code&gt; to request &lt;a href="https://docs.python-requests.org/en/master/user/quickstart/#custom-headers"&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; and, pass query &lt;code&gt;params&lt;/code&gt; while making a request.&lt;/p&gt;

&lt;p&gt;You can read more in-depth about this topic in the article below about why it's a good idea to pass &lt;code&gt;user-agent&lt;/code&gt; to request header.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dimitryzub" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_2cR6Qc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gZJl1ODr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620700/23e20ca0-ed95-47bf-aa05-bfba7d639480.jpg" alt="dimitryzub"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dimitryzub/how-to-reduce-chance-being-blocked-while-web-scraping-search-engines-1o46" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to reduce the chance of being blocked while web scraping search engines&lt;/h2&gt;
      &lt;h3&gt;Dimitry Zub ☀️ ・ Sep 16 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webscraping&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;After request is made, then we receive a response which will be decoded via &lt;a href="https://docs.python-requests.org/en/master/user/quickstart/#response-content"&gt;&lt;code&gt;.text&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://search.naver.com/search.naver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#save-html-locally"&gt;
  &lt;/a&gt;
  Save HTML locally
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_naver_news.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# output file will be minecraft_naver_news.html
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#find-correct-selectors-or-html-elements"&gt;
  &lt;/a&gt;
  Find correct selectors or HTML elements
&lt;/h3&gt;

&lt;p&gt;Get a &lt;code&gt;CSS&lt;/code&gt; selector of the container with all needed data such as title, link, etc&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3bVc0wjNsosToPKVpG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3bVc0wjNsosToPKVpG/giphy.gif" alt="Gif that shows which selectors being used as a container" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".list_news .bx"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# further code
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a &lt;code&gt;CSS&lt;/code&gt; selector for title, link, etc. that will be used in extracting part&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ji4qwornLr2275XhRy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ji4qwornLr2275XhRy/giphy.gif" alt="Gif that shows which selectors being used for title, link, snippet, thumbnail and other data" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".list_news .bx"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# hey, news_results, grab TEXT from every element with ".news_tit" selector 
&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

    &lt;span class="c1"&gt;# hey, news_results, grab href (link) from every element with ".news_tit" selector 
&lt;/span&gt;    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# other elements..
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#extract-data"&gt;
  &lt;/a&gt;
  Extract data
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"minecraft_naver_news.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;html_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;news_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".list_news .bx"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".dsc_thumb img"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_dsc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;press_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".info.press"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;news_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"span.info"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snippet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;press_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;news_date&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-lets-see-what-is-going-on-here"&gt;
  &lt;/a&gt;
  Now lets see what is going on here.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#import-raw-bs4-endraw-raw-lxml-endraw-and-raw-json-endraw-libraries"&gt;
  &lt;/a&gt;
  Import &lt;code&gt;bs4&lt;/code&gt;, &lt;code&gt;lxml&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; libraries
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#open-saved-html-file-and-pass-to-raw-beautifulsoup-endraw-"&gt;
  &lt;/a&gt;
  Open saved HTML file and pass to &lt;code&gt;BeautifulSoup()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Open saved HTML file and change the mode from writing (&lt;code&gt;mode="w"&lt;/code&gt;) to reading (&lt;code&gt;mode="r"&lt;/code&gt;) and pass it to &lt;code&gt;BeautifulSoup()&lt;/code&gt; so it can extract elements, and assigned &lt;code&gt;"lxml"&lt;/code&gt; as a HTML parser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"minecraft_naver_news.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;html_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;            &lt;span class="c1"&gt;# reading 
&lt;/span&gt;    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-raw-list-endraw-to-temporary-store-the-data"&gt;
  &lt;/a&gt;
  Create &lt;code&gt;list()&lt;/code&gt; to temporary store the data
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;news_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iterate-over-container"&gt;
  &lt;/a&gt;
  Iterate over container
&lt;/h4&gt;

&lt;p&gt;By container I mean &lt;code&gt;CSS&lt;/code&gt; selector that wraps other elements such as title, link, etc. inside itself with all the needed data, and extract it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# news_data = []
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".list_news .bx"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".dsc_thumb img"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_dsc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

    &lt;span class="n"&gt;press_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".info.press"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;news_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"span.info"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#append-extracted-data-as-a-dictionary-to-earlier-created-raw-list-endraw-"&gt;
  &lt;/a&gt;
  Append extracted data as a dictionary to earlier created &lt;code&gt;list()&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snippet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;press_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;news_date&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#print-collected-data"&gt;
  &lt;/a&gt;
  Print collected data
&lt;/h4&gt;

&lt;p&gt;Print the data using &lt;code&gt;json.dumps()&lt;/code&gt;, which in this case is just for pretty printing purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# part of the output
&lt;/span&gt;&lt;span class="s"&gt;'''
[
  {
    "title": "Xbox, 11월부터 블록버스터 게임 연이어 출시",
    "link": "http://www.gameshot.net/common/con_view.php?code=GA617793ce93c74",
    "thumbnail": "https://search.pstatic.net/common/?src=https%3A%2F%2Fimgnews.pstatic.net%2Fimage%2Forigin%2F5739%2F2021%2F10%2F26%2F19571.jpg&amp;amp;type=ofullfill264_180_gray&amp;amp;expire=2&amp;amp;refresh=true",
    "snippet": "  마인크래프트(Minecraft) – 11월 3일(한국 시간) 마인크래프트는 11월 3일 Xbox Game Pass PC용에 추가될 예정이며, 새로운 마인크래프트 던전스 시즈널 어드벤처(Minecraft Dungeons Seasonal Adventures), 동굴과... ",
    "press_name": "게임샷",
    "news_date": "6일 전"
  }
  # other results...
]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#call-newly-added-data"&gt;
  &lt;/a&gt;
  Call newly added data
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="c1"&gt;# link, snippet, thumbnail.. 
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# prints all titles that was appended to the list() 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2 id="code"&gt;Full Code&lt;/h2&gt;

&lt;p&gt;Have a look at third function that will make an actual request to Naver search with passed query parameters. &lt;a href="https://replit.com/@DimitryZub1/Scrape-Naver-News-Results#bs4_extract_naver_news.py"&gt;Test in the online IDE&lt;/a&gt; yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;


&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"minecraft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"where"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"news"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;# function that parses content from local copy of html
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_news_from_html&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"minecraft_naver_news.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;html_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# calls naver_parser() function to parse the page
&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;naver_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;# function that makes an actual request
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_naver_news_from_url&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://search.naver.com/search.naver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# calls naver_parser() function to parse the page
&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;naver_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;# parser that accepts html argument from extract_news_from_html() or extract_naver_news_from_url()
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;naver_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;news_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".list_news .bx"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_tit"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".dsc_thumb img"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".news_dsc"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;press_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".info.press"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
        &lt;span class="n"&gt;news_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"span.info"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snippet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;press_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;news_date&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;news_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#using-naver-news-results-api"&gt;
  &lt;/a&gt;
  Using &lt;a href="https://serpapi.com/naver-news-results"&gt;Naver News Results API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As an alternative, you can achieve the same by using SerpApi. SerpApi is a paid API with a free plan. &lt;/p&gt;

&lt;p&gt;The difference is that there's no need to code the parser from scratch and maintain it overtime (&lt;em&gt;if something will be changed in the HTML&lt;/em&gt;), figure out what selectors to use, and how to bypass blocks from search engines.&lt;/p&gt;

&lt;p&gt;Install SerpApi library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install google-search-results
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example code to integrate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;serpapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GoogleSearch&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"api_key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;"engine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"naver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Minecraft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"where"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"news"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GoogleSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# where extraction happens
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# where structured json appears 
&lt;/span&gt;
&lt;span class="n"&gt;news_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"news_results"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;press_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"news_info"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;date_news_poseted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"news_info"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snippet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;press_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date_news_poseted&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-how-this-code-works"&gt;
  &lt;/a&gt;
  Let's how this code works.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#import-raw-serpapi-endraw-raw-os-endraw-raw-json-endraw-libraries"&gt;
  &lt;/a&gt;
  Import &lt;code&gt;serpapi&lt;/code&gt;, &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; libraries
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;serpapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GoogleSearch&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;  &lt;span class="c1"&gt;# in this case used for pretty printing
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;os&lt;/code&gt; library stands for &lt;a href="https://docs.python.org/3/library/os.html"&gt;operating system&lt;/a&gt; (miscellaneous operating system interfaces), and &lt;code&gt;os.getenv(SECRET_KEY)&lt;/code&gt; return the value of the environment variable key if it exists.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#define-search-parameters"&gt;
  &lt;/a&gt;
  Define search parameters
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Note this parameters will be different depending on what &lt;code&gt;"engine"&lt;/code&gt; you're using (except, in this case, &lt;code&gt;"api_key"&lt;/code&gt;, &lt;code&gt;"query"&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"api_key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;   &lt;span class="c1"&gt;# API key that being stored in the environment variable
&lt;/span&gt;    &lt;span class="s"&gt;"engine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"naver"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                 &lt;span class="c1"&gt;# search engine
&lt;/span&gt;    &lt;span class="s"&gt;"query"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Minecraft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c1"&gt;# search query
&lt;/span&gt;    &lt;span class="s"&gt;"where"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"news"&lt;/span&gt;                    &lt;span class="c1"&gt;# news results filter
&lt;/span&gt;    &lt;span class="c1"&gt;# other parameters
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-raw-list-endraw-to-temporary-store-the-data"&gt;
  &lt;/a&gt;
  Create &lt;code&gt;list()&lt;/code&gt; to temporary store the data
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;news_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iterate-over-each-raw-newsresutlts-endraw-and-store-to-the-raw-newsdata-endraw-raw-list-endraw-"&gt;
  &lt;/a&gt;
  Iterate over each &lt;code&gt;["news_resutlts"]&lt;/code&gt;, and store to the &lt;code&gt;news_data&lt;/code&gt; &lt;code&gt;list()&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The difference here is that instead of calling some &lt;code&gt;CSS&lt;/code&gt; selectors, we're extracting data from the dictionary (&lt;em&gt;provided from SerpApi&lt;/em&gt;) by their &lt;code&gt;key&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"news_results"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;press_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"news_info"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;date_news_poseted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;news_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"news_info"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"thumbnail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"snippet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snippet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"press_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;press_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"news_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date_news_poseted&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#print-collected-data-via-raw-jsondumps-endraw-to-see-the-output"&gt;
  &lt;/a&gt;
  Print collected data via &lt;code&gt;json.dumps()&lt;/code&gt; to see the output
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;news_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="o"&gt;---------------&lt;/span&gt;
&lt;span class="s"&gt;'''
[
  {
    "title": "Xbox, 11월부터 블록버스터 게임 연이어 출시",
    "link": "http://www.gameshot.net/common/con_view.php?code=GA617793ce93c74",
    "thumbnail": "https://search.pstatic.net/common/?src=https%3A%2F%2Fimgnews.pstatic.net%2Fimage%2Forigin%2F5739%2F2021%2F10%2F26%2F19571.jpg&amp;amp;type=ofullfill264_180_gray&amp;amp;expire=2&amp;amp;refresh=true",
    "snippet": "  마인크래프트(Minecraft) – 11월 3일(한국 시간) 마인크래프트는 11월 3일 Xbox Game Pass PC용에 추가될 예정이며, 새로운 마인크래프트 던전스 시즈널 어드벤처(Minecraft Dungeons Seasonal Adventures), 동굴과... ",
    "press_name": "게임샷",
    "news_date": "6일 전"
  }
  # other results...
]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2 id="links"&gt;Links&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://replit.com/@DimitryZub1/Scrape-Naver-News-Results#main.py"&gt;Code in the online IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serpapi.com/naver-news-results"&gt;Naver News Results API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://selectorgadget.com/"&gt;SelectorGadget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://croud.com/blog/an-introduction-to-naver/"&gt;An introduction to Naver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.link-assistant.com/blog/google-vs-naver-why-cant-google-dominate-search-in-korea/"&gt;Google Vs. Naver: Why Can’t Google Dominate Search in Korea?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="outro"&gt;Outro&lt;/h2&gt;

&lt;p&gt;If you have anything to share, any question, suggestion, or something that isn't working correctly, feel free to drop a comment in the comment section or via Twitter at &lt;a href="https://twitter.com/DimitryZub"&gt;@dimitryzub&lt;/a&gt;, or &lt;a href="https://twitter.com/serp_api"&gt;@serp_api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yours,&lt;br&gt;
Dimitry, and the rest of SerpApi Team.&lt;/p&gt;




&lt;p&gt;Join us on &lt;a href="https://www.reddit.com/r/SerpApi/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/serp_api"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCUgIHlYBOD3yA3yDIRhg_mg"&gt;YouTube&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webscraping</category>
    </item>
    <item>
      <title>A New Normal — Remote Patient Monitoring (RPM): Types of Real-World Devices and Current Statistics</title>
      <author>Emerline</author>
      <pubDate>Thu, 11 Nov 2021 09:17:28 +0000</pubDate>
      <link>https://dev.to/emerlinedev/a-new-normal-remote-patient-monitoring-rpm-types-of-real-world-devices-and-current-statistics-49hi</link>
      <guid>https://dev.to/emerlinedev/a-new-normal-remote-patient-monitoring-rpm-types-of-real-world-devices-and-current-statistics-49hi</guid>
      <description>&lt;p&gt;One of the tools health systems and hospitals are turning to improve outcomes and reduce costs is remote patient monitoring (RPM) technology. This type of patient care extends the reach of physicians, enables a constant relationship between patients and caregivers, and offers providers a continuous stream of real-time health data.&lt;/p&gt;

&lt;p&gt;And now, RPM devices are becoming smarter and more affordable. What’s more, considering the COVID-19 impact, solutions that allow remote monitoring grow in value and demand. So let’s explore this technology step by step, starting from the definition of RPM to highlighted types of existing devices, as well as current market statistics and the results of COVID-19 impact.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-remote-patient-monitoring-rpm"&gt;
  &lt;/a&gt;
  What Is Remote Patient Monitoring (RPM)?
&lt;/h1&gt;

&lt;p&gt;Remote patient monitoring (RPM) is a healthcare delivery method that uses technology to monitor patient health outside of a traditional clinical setting. RPM refers to the specific technology used to electronically transmit information between patients and physicians, which serves as a powerful tool for patient monitoring at home.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-remote-patient-monitoring-work"&gt;
  &lt;/a&gt;
  How Does Remote Patient Monitoring Work?
&lt;/h1&gt;

&lt;p&gt;Unlike other telehealth delivery methods, PRM does not require interactive audio-video and virtual visits. It simply requires technology that collects and interprets physiologic data and is actually very easy to use.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVhcNXfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01w7cns9x4waagxf87j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVhcNXfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01w7cns9x4waagxf87j6.png" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-rpm-devices"&gt;
  &lt;/a&gt;
  Types of RPM Devices
&lt;/h1&gt;

&lt;p&gt;Whether these are wearable heart monitors, Bluetooth-enabled scales, glucose monitors, skin patches, shoes, or belts, RPM non-invasive devices can acquire, transmit, process, and store patient data. Below you can read about some of the most valuable innovations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blood pressure monitor&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iW1PC8Hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9del7kxvlldmriprstmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iW1PC8Hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9del7kxvlldmriprstmn.png" alt="Image description" width="880" height="575"&gt;&lt;/a&gt;&lt;br&gt;
Some blood pressure monitors take multiple readings to report daily averages. Home monitoring can assist in the early diagnosis of conditions like diabetes or kidney dysfunction which contribute to high blood pressure. It can also make healthcare delivery less stressful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous glucose monitor&lt;/strong&gt;&lt;br&gt;
Managing diabetes effectively requires continuous blood sugar monitoring, and here is where glucose monitoring devices can come into play, allowing you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitor medication effects&lt;/li&gt;
&lt;li&gt;Track how diet and exercise affect blood sugar levels&lt;/li&gt;
&lt;li&gt;Demonstrate how stress or illness affect blood sugar levels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Medical alert systems&lt;/strong&gt;&lt;br&gt;
According to CDC, every year, 1 out of 4 older adults in the U.S. experiences a painful fall. Approximately 20% of those result in broken bones, head traumas, or other disruptive injuries that double the chance of another fall in the future.&lt;/p&gt;

&lt;p&gt;Immediate care after a fall is critical, and that’s why remote patient monitoring devices are so valuable for seniors. These wearables can even help prevent death after a fall, as they enable immediate intervention by alerting the wearer’s clinician, emergency personnel, and their nearest caregiver or family member of what has happened.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maternity care monitoring&lt;/strong&gt;&lt;br&gt;
Surveys consistently show that women with low-risk pregnancies prefer to minimize their number of OBGYN office visits, and remote monitoring enables this, meanwhile offering a high level of control over pregnancy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Electrocardiography (ECG) devices&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iiIQfBf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy5tmv3oui4qo6hokfs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iiIQfBf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy5tmv3oui4qo6hokfs8.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;br&gt;
Whether in handheld, wearable, or patch form, these devices can help to detect life-threatening conditions. ECG can catch symptoms of arrhythmia, myocardial ischemia, and ST depression.&lt;/p&gt;

&lt;p&gt;These devices record electric impulses from a patient’s heart and transmit them to a clinician in real-time, allowing them to adjust care plans on the fly before a patient pushes themselves beyond their heart’s limit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Medication monitoring&lt;/strong&gt;&lt;br&gt;
According to Consumer Reports, over half of the adults in the U.S. take prescription medications. Another study found that 60% of older Americans do not take their medications as prescribed.&lt;/p&gt;

&lt;p&gt;So, medication monitoring can prompt patients to take their pills at the right time of day and at the prescribed dosage. It’s especially helpful for psychologists, whose patients often require continual prescription monitoring and adjusting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heart rate monitors&lt;/strong&gt;&lt;br&gt;
Portable heart rate monitors automatically record and transmit a patient’s heartbeat data during exercise, stressful events, and even sleep, helping clinicians detect both symptomatic and asymptomatic arrhythmias, as well as atrial fibrillation after cardiac ablation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart scale&lt;/strong&gt;&lt;br&gt;
For patients managing congestive heart failure, gaining merely a couple of extra kilos could be a sign of increased water retention. When clinicians receive this information on their remote patient monitoring device, they’re able to act quickly: prescribe a diuretic, increase a current medication dosage, or call the patient in for a visit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pulse oximeter&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkUPfM4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w95m59i2rvwb4n5kntzz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkUPfM4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w95m59i2rvwb4n5kntzz.png" alt="Image description" width="880" height="577"&gt;&lt;/a&gt;&lt;br&gt;
 These non-invasive clips are typically attached to fingers or earlobes in order to measure light wavelengths that determine blood oxygen levels. They are used by people with chronic heart or lung issues and are extremely helpful in detecting declining lung function which, these days, can signify COVID-19.&lt;/p&gt;

&lt;p&gt;As you can see, remote patient monitoring devices take the stress out of healthcare and can help all kinds of specialists do their job more effectively and efficiently. But now let’s dive into statistical data to see if the technology is demanded and worthy of investments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rpm-market-overview-where-is-it-heading"&gt;
  &lt;/a&gt;
  RPM Market Overview: Where Is It Heading?
&lt;/h1&gt;

&lt;p&gt;According to Alltheresearch, the global remote patient monitoring market was valued at $975.0 million in 2020, and it is expected to reach $3,244.9 million by 2027, with a CAGR of 18.9% during the forecast period. But what are the reasons for such promising predictions? Let’s look at the data gathered from various studies on the use of RPM to see what difference it makes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcDv2NLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd8s71j047yfxcqdt0hl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcDv2NLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd8s71j047yfxcqdt0hl.png" alt="Image description" width="715" height="684"&gt;&lt;/a&gt;&lt;br&gt;
While patients’ trust and willingness to use RPM devices can be considered as a very good reason to adopt the technology, we can’t ignore the elephant in the room and avoid mentioning the impact of COVID-19.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#covid19-impact-on-the-market-current-remote-patient-monitoring-trends"&gt;
  &lt;/a&gt;
  COVID-19 Impact on the Market: Current Remote Patient Monitoring Trends
&lt;/h1&gt;

&lt;p&gt;Covid-19 has significantly increased the groundwork for effective RPM usage by physicians and patients. And here are the two key drivers for RPM success that result from the pandemic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Physicians have been challenged to reinvent their practices in order to accommodate their patients during the Covid-19 pandemic, making RPMs highly sought-after solutions.&lt;/li&gt;
&lt;li&gt;It’s no secret that because of fear and the threat of contracting Covid-19 patients, people have started to avoid emergency rooms and doctors’ offices for non-Covid-19 health concerns. This is another driver that has accelerated the growth of the remote patient monitoring market.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to the latter, RPM devices provide patients with the ability to better manage their chronic conditions and understand contributing factors to their specific pathologies. Patients can use RPM to understand aspects of their health and seek out specific care, which, in return, reduces medical fees.&lt;/p&gt;

&lt;p&gt;But the use of RPM goes even further, making business owners adopt the technology to assess their workers’ health and better gauge their safety. Also, considering the fact that most Covid-19 patients are asymptomatic, companies have started to invest in RPM devices to adjust their ready-to-work protocols during the pandemic. And all this resulted in a new RPM trend: the use of technology by businesses not related to healthcare.&lt;/p&gt;

&lt;p&gt;For example, Starbucks has implemented a Covid-19 checklist for workers to complete and is requiring staff to log their temperature, using handheld clinical electronic thermometers before starting each shift.&lt;/p&gt;

&lt;p&gt;Your fellow Emerline was also involved in the healthcare app development project related to the COVID-19 outbreak. While initially we were contacted by the client who wanted to use the Uber scheme for a medical app, the pandemic resulted in some significant changes to the initial idea. If you want to know how we adapted the solution to the world situation, you are welcome to read about the development of an Uber-like app for doctors in our portfolio.&lt;/p&gt;

&lt;p&gt;Having vast expertise in the delivery of solutions for healthcare, we will be happy to answer all of your questions about RPM systems, functionality to include in the app to ensure its modernity, development timeframes, and cost. So whether you’re having an idea on a napkin or want to clarify some specific details regarding your project, feel free to contact us.&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://emerline.com"&gt;https://emerline.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>webdev</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>How to write URL shortener in .NET5? We've made it seem easy #1</title>
      <author>Dino Lozina</author>
      <pubDate>Thu, 11 Nov 2021 09:10:04 +0000</pubDate>
      <link>https://dev.to/infobipdev/how-to-write-url-shortener-in-net5-weve-made-it-seem-easy-1-5c56</link>
      <guid>https://dev.to/infobipdev/how-to-write-url-shortener-in-net5-weve-made-it-seem-easy-1-5c56</guid>
      <description>&lt;p&gt;Welcome to our tutorial series, a place to be for those looking for a quick and efficient guide to writing URL shortener.&lt;br&gt;&lt;br&gt;
In this series we will try to show you how easy it is to write a service that shortens URLs with .NET5. On top of that, we will add an additional functionality - service will have to send an SMS when target URL is shortened and periodically send SMS reports.&lt;/p&gt;

&lt;p&gt;Stick with me until the end and you will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create youtube like links for short URLs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use embedded NoSQL database&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Schedule web service, ex. send reports every day, week and/or month&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send SMS from our service&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to give you heads up, this is by no means an extensive tutorial on how to build production grade shortening systems. For production grade systems we need to take into account scale and load. It would be nice to have some kind of analytics, but we have to start from somewhere, right?&lt;/p&gt;

&lt;p&gt;Software engineering nowadays can be compared to playing with LEGO bricks. All the nice bricks are out there, we need to implement them in a smart way. We don't want to reinvent the wheel every time we start programming, so we're going to use a couple of packages to make all this magic happen.&lt;/p&gt;

&lt;p&gt;First, we're going to need some SDK-s and tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For IDE we can use (&lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need .NET core SDK (&lt;a href="https://dotnet.microsoft.com/download"&gt;https://dotnet.microsoft.com/download&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Postman (&lt;a href="https://www.postman.com/downloads/"&gt;https://www.postman.com/downloads/&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On my &lt;a href="https://github.com/dlozina/url-shortener-service-v2"&gt;github&lt;/a&gt; you will find the finished project so there's no need for you to write code yourself.&lt;/p&gt;

&lt;p&gt;Once we have .NET framework in place we will just check if everything is working for us with (type in terminal):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After the test we can create our template project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new webapi -n "Shortener.Service" -lang "C#" -au none
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;*&lt;em&gt;parameter -au none means there is no default authentication for our webapi&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With this command we get template webapi project. Now that we have all things up and running let’s start with step by step guide.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-step-create-controller-methods"&gt;
  &lt;/a&gt;
  🎮 &lt;strong&gt;First Step: Create controller methods ✔️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Remove default web api controller and create your own. For this simple example we will have one GET and one POST method.&lt;/p&gt;

&lt;p&gt;Let’s dig into POST method. User will provide us with URL (simple UrlDataDto object) that needs to be shortened. We will store that URL we will store in LiteDB.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;GET method needs a parameter shortUrl. If we have that shortUrl in our database, method will redirect us to “long” URL if request was made by browser. Request could also be made by “thin” client like Postman, so we will make sure that we return JSON with “long” URL. (In that case we don’t want to redirect) &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#second-step-add-database"&gt;
  &lt;/a&gt;
  💾 &lt;strong&gt;Second Step: Add database ✔️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As mentioned, we need DB to store our shortened URLs. For this small service we really don’t want to install DB or do something beforehand. Goal is just to “press play” and our app is ready to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet add package LiteDB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will give us small NoSql database, perfect for our proof of concept.&lt;/p&gt;

&lt;p&gt;Now we need to link our application with DB:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#third-step-add-services"&gt;
  &lt;/a&gt;
  ⚙️ &lt;strong&gt;Third Step: Add services ✔️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As you can see, our controller is simple and whole business logic is in services. Let’s just check what we did in services.&lt;/p&gt;

&lt;p&gt;First of all, let's create service that will write data to our DB.&lt;/p&gt;

&lt;p&gt;Add to DB:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Get from DB:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We need logic that will shorten our URL. For this we can use cool package Hashids.net and get youtube like short ids. We can chose length and "salt" for our links. Check out &lt;a href="https://github.com/ullmark/hashids.net"&gt;hashids.net&lt;/a&gt; for short instructions.&lt;/p&gt;

&lt;p&gt;For example, if we sent UrlDataDto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "url": "https://www.infobip.com/docs/api"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We get in response nice youtube-like short links:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "url": "http://localhost:8000/V1oExr"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's add this feature:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet add package Hashids.net
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Method in service for encode:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;As you can see, we will encode DB id and generate our short URL from that data. (We will use this service in POST method)&lt;/p&gt;

&lt;p&gt;Method in service for decode:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Vice versa, on the other endpoint (our GET method) we will decode shortUrl to get id.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fourth-step-test-with-postman"&gt;
  &lt;/a&gt;
  🧪 &lt;strong&gt;Fourth Step: Test with Postman ✔️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;After &lt;code&gt;dotnet build&lt;/code&gt; and &lt;code&gt;dotnet run&lt;/code&gt; commands you are all set for manual test! Postman collections for you will find as part of the project, so that you can easily import.&lt;/p&gt;

&lt;p&gt;POST:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KweZC0fx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kak83l78wo1yy4l7aym9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KweZC0fx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kak83l78wo1yy4l7aym9.png" alt="Post method in Postman" width="753" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GET:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WunpMFzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tm6zlxgyvtvixyr3tn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WunpMFzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tm6zlxgyvtvixyr3tn7.png" alt="Get method in Postman" width="751" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-all-folks-or-is-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;That's all, folks! Or is it? 🎉 🍾&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In part one of this series, we have created a simple URL shortener. We've showed you how to save data without installing database and generate short URLs with Hashids.net.&lt;/p&gt;

&lt;p&gt;Application passed our manual test with Postman, and we have set up stage to implement notifications in our web service.&lt;/p&gt;

&lt;p&gt;In part two of this series, we will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Schedule tasks in .NET applications&lt;/li&gt;
&lt;li&gt;Send SMS via Infobip platform&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Leetcode 114. Flatten Binary Tree to Linked List</title>
      <author>Rohith V</author>
      <pubDate>Thu, 11 Nov 2021 09:06:36 +0000</pubDate>
      <link>https://dev.to/rohithv07/leetcode-114-flatten-binary-tree-to-linked-list-1ej8</link>
      <guid>https://dev.to/rohithv07/leetcode-114-flatten-binary-tree-to-linked-list-1ej8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;Given the root of a binary tree, flatten the tree into a "linked list":&lt;/p&gt;

&lt;p&gt;The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.&lt;br&gt;
The "linked list" should be in the same order as a pre-order traversal of the binary tree.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#test-cases"&gt;
  &lt;/a&gt;
  Test Cases
&lt;/h2&gt;

&lt;p&gt;Example 1:&lt;/p&gt;

&lt;p&gt;Input: root = [1,2,5,3,4,null,6]&lt;br&gt;
Output: [1,null,2,null,3,null,4,null,5,null,6]&lt;br&gt;
Example 2:&lt;/p&gt;

&lt;p&gt;Input: root = []&lt;br&gt;
Output: []&lt;br&gt;
Example 3:&lt;/p&gt;

&lt;p&gt;Input: root = [0]&lt;br&gt;
Output: [0]&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  Constraints:
&lt;/h2&gt;

&lt;p&gt;The number of nodes in the tree is in the range [0, 2000].&lt;br&gt;
-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#algorithm-"&gt;
  &lt;/a&gt;
  Algorithm :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Here we need to move all our left child nodes to right and append the already present right child node to the end.&lt;/li&gt;
&lt;li&gt;So if we have left child node, first of all store the currently present right child to a variable and keep &lt;code&gt;root.right&lt;/code&gt; as the left child. Then make the left child as null.&lt;/li&gt;
&lt;li&gt;Then the stored right child is appended towards the end of the left child node that is recently attached.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67GpR-SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5cv9itcb8rvu9mv1do2.png" alt="Moving left child to right and appending right child" width="880" height="450"&gt;
&lt;/li&gt;
&lt;li&gt;Do recursion keeping the root node as root.right.
&lt;code&gt;recursion(root.right)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nR0whH_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6eol5ei6s9dl2a3eh9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nR0whH_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6eol5ei6s9dl2a3eh9f.png" alt="Recursively proceeding with right child" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#complexity-"&gt;
  &lt;/a&gt;
  Complexity :
&lt;/h2&gt;

&lt;p&gt;We are going through each of the node so time complexity O(n) and space will be O(H) as we use a recursion stack.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code :
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#github-"&gt;
  &lt;/a&gt;
  Github :
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Rohithv07"&gt;
        Rohithv07
      &lt;/a&gt; / &lt;a href="https://github.com/Rohithv07/LeetCode"&gt;
        LeetCode
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      LeetCode problems that are solved.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
LeetCode&lt;/h1&gt;
&lt;p&gt;LeetCode problems that are solved.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Rohithv07/LeetCode/blob/master/diagram.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J5ojUOm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Rohithv07/LeetCode/raw/master/diagram.svg" alt="A Sample Structure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Rohithv07/LeetCode"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>programming</category>
      <category>java</category>
      <category>algorithms</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>New Features of Angular 13</title>
      <author>Bacancy Technology</author>
      <pubDate>Thu, 11 Nov 2021 09:01:26 +0000</pubDate>
      <link>https://dev.to/bacancy_technology/new-features-of-angular-13-2g1d</link>
      <guid>https://dev.to/bacancy_technology/new-features-of-angular-13-2g1d</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;Today we came up with an interesting article, the article is about Angular 13 - the new update of Angular. This is one of the well planned updates of angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-highlights-of-angular-13"&gt;
  &lt;/a&gt;
  Quick Highlights of Angular 13
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;100% Ivy = Improved localization API to dynamically create components&lt;/li&gt;
&lt;li&gt;RxJS- Reactive Extensions for JavaScript programming library is supported &amp;gt;=7.4&lt;/li&gt;
&lt;li&gt;IE11 not supported &lt;/li&gt;
&lt;li&gt;Validators such as min, max, and minLengt can be enabled dynamically or disabled&lt;/li&gt;
&lt;li&gt;Significant improvement in build-cache by 70%&lt;/li&gt;
&lt;li&gt;Easier directives disabling&lt;/li&gt;
&lt;li&gt;The error message has been improved&lt;/li&gt;
&lt;li&gt;Removing View Engine Support&lt;/li&gt;
&lt;li&gt;Improved APF – faster execution&lt;/li&gt;
&lt;li&gt;Angular TestBed improvement&lt;/li&gt;
&lt;li&gt;TypeScript &amp;gt;=4.4.x&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-13-features"&gt;
  &lt;/a&gt;
  Angular 13 Features
&lt;/h2&gt;

&lt;p&gt;(1) 100% Ivy&lt;br&gt;
(2) RxJS 7.4&lt;br&gt;
(3) No More Support for Internet Explorer&lt;br&gt;
(4) Changes to the Angular Package Format (APF)&lt;br&gt;
(5) TestBed Teardown Now Default&lt;br&gt;
(6) Documentation Improvements&lt;br&gt;
(7) Inline Support for Adobe Fonts&lt;br&gt;
(8) Angular Material Accessibility Improvements&lt;br&gt;
(9) TypeScript 4.4&lt;/p&gt;

&lt;p&gt;Moreover, In our article we also discussed the performance of Angular 13 and Notable Changes of Angular v13. If you want to know more about the &lt;a href="https://www.bacancytechnology.com/blog/whats-new-in-angular-13"&gt;New features of Angular 13&lt;/a&gt;, kindly contact us now.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Solve Captcha in JavaScript Using 2Captcha</title>
      <author>Suhail Kakar</author>
      <pubDate>Thu, 11 Nov 2021 08:52:42 +0000</pubDate>
      <link>https://dev.to/suhailkakar/how-to-solve-captcha-in-javascript-using-2captcha-31hf</link>
      <guid>https://dev.to/suhailkakar/how-to-solve-captcha-in-javascript-using-2captcha-31hf</guid>
      <description>&lt;p&gt;You may already solve many captchas while submitting a form or signing up for a website. The basic Captcha goal is to check whether the user is a human or a bot. Captcha stands for &lt;strong&gt;Completely Automated Public Turing test to tell Computers and Humans Apart&lt;/strong&gt;. Captchas are used to stop spamming blogs, accessing bots, and making a website more secure. &lt;/p&gt;

&lt;p&gt;Sometimes it is easy to solve the captcha, however, some of them are just a headache to the users, It might take minutes to think whether the letter is in Upper Case or Lower Case. Therefore, nowadays users prefer to use captcha-solving software.  &lt;/p&gt;

&lt;p&gt;2Captcha is among those services, which help us solve captchas, within seconds. It is a Captcha recognition service for solving challenge-response tests called Captcha to determine whether the user is a human or not. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-2captcha"&gt;
  &lt;/a&gt;
  What is 2Captcha
&lt;/h3&gt;

&lt;p&gt;2Captcha is a Captcha recognition service solving captchas in real-time. It also provides image recognition services powered by human intelligence. 2captcha can recognize different types of captcha and Its API is available for most programming languages. As the 2captcha uses the human-based method to solve captchas, It provides the opportunity to earn by solving the captchas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-2captcha"&gt;
  &lt;/a&gt;
  Advantages of 2captcha
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; Provide a high level of accuracy&lt;/li&gt;
&lt;li&gt; human-based method to solve captchas &lt;/li&gt;
&lt;li&gt; Average speed of solving a captcha is less than 12 sec&lt;/li&gt;
&lt;li&gt; API available for most popular programming languages&lt;/li&gt;
&lt;li&gt; Solve all kinds of captchas &lt;/li&gt;
&lt;li&gt; Reliable reCAPTCHA solving service&lt;/li&gt;
&lt;li&gt;Provide 100% recognition service&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-captcha-in-javascript-using-2captcha"&gt;
  &lt;/a&gt;
  How to solve Captcha in JavaScript using 2Captcha
&lt;/h2&gt;

&lt;p&gt;Here I use the Discord registration form which has a captcha to be solved using javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yh_wliX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636557521449/YFKaRtRDJ_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yh_wliX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636557521449/YFKaRtRDJ_.png" alt="screely-1636557507479.png" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you fill this form and click continue, you will see the below captcha.&lt;/p&gt;

&lt;p&gt;In order to solve the captcha using javascript, we can use two libraries called &lt;strong&gt;axios&lt;/strong&gt; and  &lt;strong&gt;2captcha&lt;/strong&gt;.  The axios is used to handle all the API calls and 2captcha is used to solve the captcha. install the bellow packages after creating your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install 2captcha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;import these libraries to your file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2captcha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Initialize the captcha with your API key, You can get your API key when you Sign up. The API_KEY is available on your dashboard at the Account setting
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Captcha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Solver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;API_KEY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;define an async function, here we call it register. 
we can solve the captcha using the solver which we already initialized and captcha is the type of captcha that we have on Discord website.
It requires two parameters, the Site key and the website URL. The
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solving...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hcaptcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f5561ba9-8f1e-40ca-9b5b-a0b3f719ef34&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://discord.com/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get the site key when you press ctrl+shift+i and the site key will be on the HTML section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rb6wLW2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636558157855/JL6Nhlowh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rb6wLW2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636558157855/JL6Nhlowh.png" alt="screely-1636558144895.png" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use try-catch, as it may have any error and inside the try, we can ake the Axios call. Here the method is Post and you should specify the request URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iWJ8apk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636558453095/7ESFoarKw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iWJ8apk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636558453095/7ESFoarKw.png" alt="screely-1636558440402.png" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second parameter is the data that you post to the particular website.&lt;br&gt;
The captcha key value will be the data we specify earlier. I got the data when I filled the discord form and it sent a request.&lt;/p&gt;

&lt;p&gt;The captcha_key value is null because I didn't solve the captcha yet, therefore in try-catch, the captcha value will be data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://discord.com/api/v9/auth/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;captcha_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;consent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;date_of_birth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1985-05-03&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fingerprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;907561243135578163.UkNRz9ryt1bnxZbz7hqbnZdEgLc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;gift_code_sku_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;invite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mySecretPassword@23&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;suhailkakar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is all the code that we explained, call your function at the end of the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2captcha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Captcha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Solver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;e822d75f8b3ad5187e5bcfb1c0665ce9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;solver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hcaptcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f5561ba9-8f1e-40ca-9b5b-a0b3f719ef34&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://discord.com/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://discord.com/api/v9/auth/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;captcha_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;consent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;date_of_birth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1985-05-03&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fdffnjnJNjsnxjn@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;fingerprint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;907561243135578163.UkNRz9ryt1bnxZbz7hqbnZdEgLc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;gift_code_sku_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;invite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bjhdjfhfbjfb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ffdvvxjvvnfj&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run node your_file_name, in our case node app.js on the terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will take a bit of time and then you will receive a token. We will use the below function to pass the token and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="s2"&gt;`iframe`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contentWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the above code in your console and it will log in directly to the website without solving the captcha.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you found this article useful, if you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Looking for some kind of identity server solution for SSO</title>
      <author>Lamy Fafa</author>
      <pubDate>Thu, 11 Nov 2021 08:46:01 +0000</pubDate>
      <link>https://dev.to/lamy_fafa_f3cc85ee84f4cd6/looking-for-some-kind-of-identity-server-solution-for-sso-1b9a</link>
      <guid>https://dev.to/lamy_fafa_f3cc85ee84f4cd6/looking-for-some-kind-of-identity-server-solution-for-sso-1b9a</guid>
      <description>&lt;p&gt;We have a couple of websites for which we are looking to implement Single Sign on. These are both Django / Wagtail websites. They both currently are using the standard Django login for authentication. We want to make it so that if a user logs into one of the websites they are automatically logged into the other and the same for logging out.&lt;/p&gt;

&lt;p&gt;I've done a google search and OpenID Connect seems to come up a lot of times but it seems to have quite a steep learning curve and I suspect a lot of it isn't relevant to my specific situation and I don't want to get lost down a long maze of technical details.&lt;/p&gt;

&lt;p&gt;It seems like I need to run my own OpenID Connect server which I have not done before. I've even tried looking on Docker Hub for a dockerised solution but I didn't find any of them with adequate documentation.&lt;/p&gt;

&lt;p&gt;Ideally I would like a solution where I could just add in a new Django authentication backend and perhaps just configure the host and port of the identity server in some settings file&lt;a href="https://gust.com/companies/bur-dubai-call-girls-0529877582-call-girls-dubai-agency"&gt;,&lt;/a&gt; Additionally I need to migrate the user database to the identity server some how whilst trying to keep the password hashing algorithm the same so that everyone doesn't have to reset their passwords so if anyone has done that.&lt;/p&gt;

&lt;p&gt;Has anyone done this before and is prepared to give me a little bit of guidance on what packages they chose, any special handling of RSA keys, and network setup?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>serverless</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>[SQL] Where vs Having?</title>
      <author>Viktoria</author>
      <pubDate>Thu, 11 Nov 2021 08:38:21 +0000</pubDate>
      <link>https://dev.to/tech_victoria/sql-where-vs-having-2h36</link>
      <guid>https://dev.to/tech_victoria/sql-where-vs-having-2h36</guid>
      <description>&lt;p&gt;It is easy to be confused with these 2 clauses because A HAVING clause is like a WHERE clause.&lt;br&gt;
⚠️WHERE clause applies to individual rows and HAVING clause applies only to groups as a whole.&lt;/p&gt;

&lt;p&gt;A query can contain both a WHERE clause and a HAVING clause.&lt;/p&gt;

&lt;p&gt;✔️The WHERE clause is applied first to the individual rows in the tables or table-valued objects in the Diagram pane. Only the rows that meet the conditions in the WHERE clause are grouped.&lt;/p&gt;

&lt;p&gt;✔️The HAVING clause is then applied to the rows in the result set. Only the groups that meet the HAVING conditions appear in the query output. You can apply a HAVING clause only to columns that also appear in the GROUP BY clause or in an aggregate function.&lt;/p&gt;

&lt;p&gt;📝As a rule of thumb, use WHERE before GROUP BY and HAVING after GROUP BY. It is a rather primitive rule, but it is useful in more than 90% of the cases.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The screw and the hammer: Love the problems, not your solutions. </title>
      <author>Davide de Paolis</author>
      <pubDate>Thu, 11 Nov 2021 08:34:58 +0000</pubDate>
      <link>https://dev.to/dvddpl/the-screw-and-the-hammer-love-the-problems-not-your-solutions-2i0a</link>
      <guid>https://dev.to/dvddpl/the-screw-and-the-hammer-love-the-problems-not-your-solutions-2i0a</guid>
      <description>&lt;p&gt;How many times in your software development career have you heard the following quote?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the only tool you have is a hammer, you tend to see every problem as a nail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Law_of_the_instrument"&gt;Also known&lt;/a&gt; as &lt;strong&gt;The law of the instrument&lt;/strong&gt; or &lt;strong&gt;golden hammer&lt;/strong&gt; this quote by Abraham Maslow describes a cognitive bias that involves an &lt;em&gt;over-reliance on a familiar tool&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In software development that hammer could be anything you are accustomed to:  a design pattern (Factories and Strategies anyone?) a language ( writing lots of NodeJs code when a tiny shell script would do the job), a framework ( React + Redux even for the tiniest simple web page), or architecture approach ( API Gateway + Lambda vs Containerized application with Load Balancers).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q87FK0Dn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knra5ax4vdxmbvo7xs0b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q87FK0Dn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knra5ax4vdxmbvo7xs0b.jpg" alt="problem factory" width="499" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-solution-to-rule-them-all"&gt;
  &lt;/a&gt;
  One solution to rule them all
&lt;/h3&gt;

&lt;p&gt;Briefly, the law of the instrument means that we often tend to over-rely on a familiar tool, in fact, as soon as I hear someone speaking about an API/microservice, my first thought is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;well, easy! let's use APIGateway and a Lambda written in NodeJs, eventually add SQS and DynamoDB if we need queuing or persistence, done!&lt;/em&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That might be the right solution, especially for an MVP; but it could prove very wrong under some circumstances. &lt;/p&gt;

&lt;p&gt;This cognitive bias could be very dangerous in problem solving.  &lt;/p&gt;

&lt;p&gt;At the very least it is just &lt;strong&gt;a big constraint to our creativity&lt;/strong&gt;, but it could lead us to major problems like completely wrong approaches to the problem or &lt;strong&gt;over-engineered&lt;/strong&gt; implementations just because, well, &lt;strong&gt;we really struggle to drive that screw in with our hammer.&lt;/strong&gt;&lt;br&gt;
(many years ago, I had a colleague that, for fun, on a pet project, decided to use every single design pattern he recently studied.  Believe me, it was not fun in any way, the code was terribly - and of course unnecessarily - complicated.) &lt;/p&gt;

&lt;p&gt;Recently I read this quote that summarises very well this concept (sorry I could not track back the source):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fall in love with the problem, not the solution&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes it is not just a simple bias of being used to a certain tool, which makes us see it apt for any job. Sometimes ( consciously or not) we are so in love with a solution that we really &lt;em&gt;want&lt;/em&gt; to apply it for any problem that comes at hand (again, we could be taking about the Decorator Pattern, Docker or Blockchain, it doesn't matter).&lt;/p&gt;

&lt;p&gt;The thing is, &lt;strong&gt;no matter what problem you have to solve, you think you know already the answer&lt;/strong&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oh, yes... that is definitely the case for XY!! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#bias-bias-everywhere"&gt;
  &lt;/a&gt;
  Bias, bias everywhere
&lt;/h3&gt;

&lt;p&gt;The way we perceive, see, and make sense of the world that surrounds us and inside us is strongly influenced by biases, and our problem solving skills are impacted too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJniGcxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30m2zd5ht7rulqwi36bz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJniGcxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30m2zd5ht7rulqwi36bz.jpeg" alt="Bias everywhere" width="301" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just a few examples. (  You can see an interactive map &lt;a href="https://upload.wikimedia.org/wikipedia/commons/6/65/Cognitive_bias_codex_en.svg"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Confirmation Bias : the tendency to search for, interpret, favour, and recall information that confirms or supports what we already know and believe.&lt;/li&gt;
&lt;li&gt;Occam's Razor bias : the simplest explanation is usually the best one.&lt;/li&gt;
&lt;li&gt;Attentional Bias : individual's failure to consider alternative possibilities when occupied with an existing train of thought.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The law of the instrument is just another one, a mix of many, if we like.  We like a solution, we invested time in learning and understanding some tech-stack, we are conservative, or tend to favour shiny new things, we google and read only blogs that share our point of view and so on. It is perfectly natural that our creativity in problem solving ends up constrained and bias. So what can we do?&lt;/p&gt;

&lt;p&gt;Well.  like for any other bias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be aware of it&lt;/li&gt;
&lt;li&gt;Try to resist and challenge it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The analysis of the requirement, and the process of problem solving should not stop immediately just because you already have a solution in mind.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep asking questions, keep digging. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do not rush. Always come up with a 2 or 3 alternatives, so that you can at least compare them and present them to other people ( which may have different bias than yours): &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This one is over-engineered, this is not scalable, this is scalable and simple but too expensive, this is the quickest.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put extra effort to become your own &lt;strong&gt;devil's advocate&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you have many options, you ( and the stakeholders) can &lt;strong&gt;make an educated choice&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-are-paid-to-solve-problems-not-to-write-code"&gt;
  &lt;/a&gt;
  We are paid to solve problems not to write code.
&lt;/h3&gt;

&lt;p&gt;Of course we mostly solve problems by writing code, but that is not the point per se.&lt;br&gt;&lt;br&gt;
We are not paid by how much code or how long we write code. ( hopefully your company does not rate your performance in LOC), so it does not matter if you wrote a super cool designed strategy pattern, or if you wrote a very complex, perfectly unit tested, algorithm.  Maybe it was not even necessary, had you tackle the problem from another angle. &lt;br&gt;
Or maybe it could have made more sense to buy a ready made solution instead of implementing it in-house.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-that-really-a-problem"&gt;
  &lt;/a&gt;
  Is that really a &lt;em&gt;problem&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;Another important aspect I'd like to touch is that &lt;strong&gt;we must learn to love problems.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many people feel stressed as soon a problem arise.&lt;br&gt;&lt;br&gt;
They get anxious, feel overwhelmed by obstacles. &lt;br&gt;
But, unless, there are other factors like impending deadlines and very unhealthy team mood, it is often a matter of perception and perspective.&lt;/p&gt;

&lt;p&gt;Try to &lt;strong&gt;reframe&lt;/strong&gt; what a problem is:&lt;/p&gt;

&lt;p&gt;A bug?&lt;br&gt;
A need that has to be fulfilled?&lt;/p&gt;

&lt;p&gt;As much in my early days as developer I hated my Project Managers telling : &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are no problems, only challenges.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I really stopped to see problems ( bugs or requirements) like annoying obstacles to my happy and relaxed working day, rather as challenging tasks which indeed make my working days always interesting and &lt;em&gt;fun&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And I started to love the quote &lt;a href="https://www.youtube.com/watch?v=IdTMDpizis8"&gt;"&lt;em&gt;GOOD&lt;/em&gt;!" from Jocko Willink&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unexpected problems?  Good!  it means we have the opportunity to figure out a solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAsmIcTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhonsyhneqwckm5v33pw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAsmIcTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhonsyhneqwckm5v33pw.png" alt="Image description" width="658" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-love-problems-i-do-boulder"&gt;
  &lt;/a&gt;
  I love problems - I do boulder!
&lt;/h3&gt;

&lt;p&gt;I love climbing and bouldering. In bouldering the routes -  basically the way, the path you want to climb - are called problems.&lt;/p&gt;

&lt;p&gt;Think of it like that:&lt;/p&gt;

&lt;p&gt;You are there, facing a wall ( or if outdoor a block of stone - literally a Boulder),  and you ask yourself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How do I climb that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju1S158g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj74fbsemfsqprowgjf4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju1S158g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj74fbsemfsqprowgjf4.jpg" alt="Boulder problem" width="880" height="1009"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is your problem. And you have to find a solution.&lt;br&gt;
How do you use your body, your balance, your strength, how do you take advantage of every hold, grip, texture in the surface to finally get to the top?&lt;/p&gt;

&lt;p&gt;This sport has taught me so much about myself, my strengths and weaknesses, and about looking at difficulties and finding ways to overcome them that it had inevitably an impact in my problem solving skills in my life and in my job. I will definitely dedicate a separate post about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/dvddpl/stop-think-code-iterate-4d56"&gt;stop and think&lt;/a&gt;, don't rush into quick solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;avoid the temptation to settle to general, known and safe approaches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;understand the problem first, understand the context. are we trying to solve the right problem?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We fail more often because we solve the wrong problem than because we get the wrong solution to the right problem.  Russel Ackoff&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Of course I am not stating in any way that you should not be happy with the solutions you come up with, and even &lt;strong&gt;be proud of yourself when you solve a problem brilliantly&lt;/strong&gt;, on the contrary, give yourself and your team all the recognition you deserve, but just be aware of the trap and don't be tempted next time you have a (similar) problem to default to the same solution.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@constantinevdokimov?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Konstantin Evdokimov&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/hammer-and-screw?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>personaldevelopment</category>
      <category>problemsolving</category>
    </item>
    <item>
      <title>Lines of Code (LoC)</title>
      <author>Loreley</author>
      <pubDate>Thu, 11 Nov 2021 08:33:20 +0000</pubDate>
      <link>https://dev.to/msoblivion/lines-of-code-loc-51e6</link>
      <guid>https://dev.to/msoblivion/lines-of-code-loc-51e6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#lines-of-code-loc"&gt;
  &lt;/a&gt;
  Lines of Code (LoC)
&lt;/h2&gt;

&lt;p&gt;There are several metrics you can deploy to analyze the code size and quality of an application. One of the popular metrics that you can be used is called Lines of Code, also known as LoC. If you are keen to learn more about what LoC means and why it is metric is programming, this article is for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-loc-mean"&gt;
  &lt;/a&gt;
  What Does LoC Mean?
&lt;/h2&gt;

&lt;p&gt;Lines of Code or LoC is a method used to measure the size of an application by identifying the actual count of Lines of Code it has. For instance, small software projects usually have somewhere between 500 to 5000 Lines of Code, whereas large ones can have thousands or even millions of Lines of Code (LoC).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#purpose-of-loc"&gt;
  &lt;/a&gt;
  Purpose of LoC
&lt;/h2&gt;

&lt;p&gt;Estimating the size of a project:&lt;br&gt;
Usually, the size of a software project can be estimated based on the lines of code it has. It is one of the metrics clients can use to determine how much they can pay for a particular software project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-size-and-readability-of-code-units"&gt;
  &lt;/a&gt;
  Check size and readability of code units:
&lt;/h2&gt;

&lt;p&gt;Any software project will always have code units like classes and functions. Usually, the functions and classes that have several code lines tend to be harder to read or understand than those. So, it is usually best to split up such classes or functions to make them smaller for easy understanding and readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-determine-the-quality-of-code"&gt;
  &lt;/a&gt;
  To determine the quality of code:
&lt;/h2&gt;

&lt;p&gt;LoC is among the most reliable parameters that are used to assess the quality of a software program. You will often realize that most experienced developers usually write less code than amateurs even when the project they are working on is the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-measures-how-efficient-the-language-used-to-code"&gt;
  &lt;/a&gt;
  It measures how efficient the language used to code:
&lt;/h2&gt;

&lt;p&gt;An efficient language requires writing less code to accomplish a task that would need to write several lines of code if written in another language that is less efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods-used-to-measure-loc"&gt;
  &lt;/a&gt;
  Methods Used to Measure LoC
&lt;/h2&gt;

&lt;p&gt;There are two common methods used to measure this parameter that is; physical and logical methods. Here is how the two defer&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Physical Lines of Code:&lt;br&gt;
With this method, the lines of code are physically counted while&lt;br&gt;
excluding comments and white spaces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logical Lines of Code:&lt;br&gt;
This method measures only the number of executable statements in the code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us use an example below to differentiate between these two;&lt;/p&gt;

&lt;p&gt;for (i = 0; i&amp;lt; 100; i++)&lt;br&gt;
{&lt;br&gt;
printf("hello");&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;In this illustration above this code, the segment has four physical lines of code and two logical ones. The logical lines of code are; the for statement and the print statement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-using-this-method"&gt;
  &lt;/a&gt;
  Pros and Cons of Using This Method
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;p&gt;It is easy and intuitive&lt;br&gt;
Ubiquitous metric&lt;br&gt;
Integrated into most code editors&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;p&gt;Not a reliable metric to measure a programmer's productivity&lt;br&gt;
The LoC also differ based on the experience of a developer&lt;br&gt;
The LoC will also vary based on the programming language used&lt;br&gt;
It does not have a counting standard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-measure-productivity-based-on-line-of-code"&gt;
  &lt;/a&gt;
  Don't Measure Productivity Based on Line of Code
&lt;/h2&gt;

&lt;p&gt;One of the mistakes that clients and some project supervisors who are not familiar with programming make is using LoC as a metric to measure a programmer's productivity. However, using this metric will not give the right picture because the time spent coding usually varies based on how complex the project is and the experience of the programmer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This parameter is crucial when it comes to assessing the size and quality of software or code segments. However, it would be misleading to use this parameter to measure a programmer's productivity or the progress of a particular project.&lt;/p&gt;

&lt;p&gt;Using LoC alone to measure these two parameters is misleading because different project segments vary in complexity and take different amounts of time to accomplish, so the number of LoC written usually doesn't matter.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>codereview</category>
      <category>database</category>
    </item>
  </channel>
</rss>
