<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Gitui is a blazing fast terminal git interface</title>
      <author>Waylon Walker</author>
      <pubDate>Sun, 17 Jan 2021 16:45:34 +0000</pubDate>
      <link>https://dev.to/waylonwalker/gitui-is-a-blazing-fast-terminal-git-interface-32nd</link>
      <guid>https://dev.to/waylonwalker/gitui-is-a-blazing-fast-terminal-git-interface-32nd</guid>
      <description>&lt;p&gt;Gitui is a terminal-based git user interface (TUI) that will change the way that you work with git. I have been a long-time user of the git cli, and it's been hard to beat, mostly because there is nothing that keeps my fingers on the keyboard quite like it, except &lt;code&gt;gitui&lt;/code&gt; which comes with some great ways to very&lt;br&gt;
quickly walk through a git project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;

&lt;p&gt;Go to their [releases]&lt;a href="https://github.com/extrawurst/gitui/releases"&gt;https://github.com/extrawurst/gitui/releases&lt;/a&gt;) page,&lt;br&gt;
download the latest build, and pop it on your PATH.  I have the following stuffed away in some install scripts to get the latest version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;small&gt;install latest release&lt;/small&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GITUI_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;--silent&lt;/span&gt; https://github.com/extrawurst/gitui/releases/latest | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/^.*tag\///g'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/&amp;gt;.*$//g'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/^v//'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
wget https://github.com/extrawurst/gitui/releases/download/v&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITUI_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/gitui-linux-musl.tar.gz &lt;span class="nt"&gt;-O-&lt;/span&gt; &lt;span class="nt"&gt;-q&lt;/span&gt; | &lt;span class="nb"&gt;sudo tar&lt;/span&gt; &lt;span class="nt"&gt;-zxf&lt;/span&gt; - &lt;span class="nt"&gt;-C&lt;/span&gt; /usr/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-raw-gitui-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  run &lt;code&gt;gitui&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It opens blazing fast.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitui
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#quick-commits" class="anchor"&gt;
  &lt;/a&gt;
  Quick Commits
&lt;/h2&gt;

&lt;p&gt;Sometimes I edit a number of files and want to commit them one at a time, this is painful in the git cli and my main use case for &lt;code&gt;gitui&lt;/code&gt;.  &lt;code&gt;gitui&lt;/code&gt; shows unstaged changes at the top, staged changes on the bottom, and a diff on the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PyolPUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://waylonwalker.com/gitui-status.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PyolPUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://waylonwalker.com/gitui-status.png" alt="gitui status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigate-with-hjkl" class="anchor"&gt;
  &lt;/a&gt;
  Navigate with hjkl
&lt;/h2&gt;

&lt;p&gt;By default, &lt;code&gt;gitui&lt;/code&gt; uses arrow keys, but simply copying &lt;a href="https://github.com/extrawurst/gitui/blob/master/assets/vim_style_key_config.ron"&gt;vim_style_key_config.ron&lt;/a&gt; to your config directory will get you vim-like keybindings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow" class="anchor"&gt;
  &lt;/a&gt;
  workflow
&lt;/h2&gt;

&lt;p&gt;Generally, I pop open &lt;code&gt;gitui&lt;/code&gt;, use j/k to get to the file I want to commit, glance at the diff to the right, press enter to stage the file, sc to switch focus to the saged files and commit, write my commit message hit enter and done.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;w/s:   to toggle focus between working and staged changes&lt;/li&gt;
&lt;li&gt;j/k:   to scroll each section&lt;/li&gt;
&lt;li&gt;h/l:   switch between left and right side&lt;/li&gt;
&lt;li&gt;enter: toggle file from working or staging&lt;/li&gt;
&lt;li&gt;c:     start a commit message&lt;/li&gt;
&lt;li&gt;p:     push&lt;/li&gt;
&lt;li&gt;: quit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-panes" class="anchor"&gt;
  &lt;/a&gt;
  Other Panes
&lt;/h2&gt;

&lt;p&gt;I am in the &lt;code&gt;Status [1]&lt;/code&gt; pane 90% of the time, but it also has three other panes for &lt;code&gt;Log [2]&lt;/code&gt;, &lt;code&gt;Stashing [3]&lt;/code&gt;, and &lt;code&gt;Stashes [4]&lt;/code&gt;.  I do not really use the stashes panes, but the &lt;code&gt;Log [2]&lt;/code&gt; pane is quite useful to quickly go through the last set of commits and see the diff for each of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ui-do-you-use-for-git" class="anchor"&gt;
  &lt;/a&gt;
  What UI do you use for git
&lt;/h2&gt;

&lt;p&gt;Let me know what ui you use for git, do you stick to the cli, use a gui, or use a similar &lt;code&gt;TUI&lt;/code&gt; interface?&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>Currying in JavaScript
</title>
      <author>Anuradha Aggarwal</author>
      <pubDate>Sun, 17 Jan 2021 14:27:37 +0000</pubDate>
      <link>https://dev.to/anuradha9712/currying-in-javascript-3l1j</link>
      <guid>https://dev.to/anuradha9712/currying-in-javascript-3l1j</guid>
      <description>&lt;p&gt;Hello developers!! In this part of the series, we will discuss techniques to work with function in Javascript called &lt;strong&gt;Currying&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-currying" class="anchor"&gt;
  &lt;/a&gt;
  What is Currying?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Currying is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It keeps returning a new function until all the arguments are exhausted. The arguments are kept "alive"(via closure) and all are used in execution when the final function in the currying chain is returned and executed.&lt;/p&gt;

&lt;p&gt;Currying is a transformation of functions that translates a function from callable as &lt;code&gt;f(a, b, c)&lt;/code&gt; into callable as &lt;code&gt;f(a)(b)(c)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The benefit of currying isn't really in the definition, but the code you use to call that function. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Currying doesn’t call a function. It just transforms it.&lt;/p&gt;

&lt;p&gt;We can implement function currying using two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/anuradha9712/call-apply-bind-methods-in-javascript-4pfn"&gt;bind() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/anuradha9712/closures-in-javascript-28h7"&gt;closures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are not aware of what &lt;strong&gt;bind()&lt;/strong&gt; method and &lt;strong&gt;closures&lt;/strong&gt; is so I highly recommend you to read the previous article in this series about this topic for clear understanding. &lt;/p&gt;

&lt;p&gt;Let's try to understand how we can implement &lt;strong&gt;currying&lt;/strong&gt; using both of these methods using an example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#currying-using-bind-method" class="anchor"&gt;
  &lt;/a&gt;
  Currying using bind() method
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HkjPMq_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610889552237/mFZu5OkBp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkjPMq_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610889552237/mFZu5OkBp.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bind()&lt;/strong&gt; method gives us a copy of the &lt;code&gt;multiply&lt;/code&gt; method and it does not invoke it directly.&lt;/p&gt;

&lt;p&gt;So, in the above code snippet, we are permanently assigning a value of parameter &lt;code&gt;a&lt;/code&gt; as 2 and then reuse the &lt;code&gt;multiplyByTwo&lt;/code&gt; method to assign the value of parameter &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Look at another example to make it more clear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multiplyByTwo method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplyByFive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multiplyByFive method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByFive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByFive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9x6Ax_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610890354944/eq1AXTzfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9x6Ax_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610890354944/eq1AXTzfj.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in this way, we can reuse our function using &lt;strong&gt;currying&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#currying-using-closures" class="anchor"&gt;
  &lt;/a&gt;
  Currying using closures
&lt;/h2&gt;

&lt;p&gt;Closure makes currying possible in JavaScript. Closure gives you access to an outer function’s scope from an inner function. &lt;/p&gt;

&lt;p&gt;It’s the ability to retain the state of functions already executed, gives us the ability to create factory functions — functions that can add a specific value to their argument.&lt;/p&gt;

&lt;p&gt;In the below example we are using the concept of &lt;strong&gt;closure&lt;/strong&gt; to implement function currying.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multiplyByTwo method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OIBfQtwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610890861999/rJEcZ36KC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OIBfQtwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610890861999/rJEcZ36KC.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code snippet, &lt;code&gt;multiply(2)&lt;/code&gt; will return a function having &lt;code&gt;a=2&lt;/code&gt; predefined, and then we will assign a value of &lt;code&gt;b&lt;/code&gt; using &lt;code&gt;multiplyByTwo(5)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now look at the another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9O9Z7nuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610891425354/0xstqZxWH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9O9Z7nuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610891425354/0xstqZxWH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, &lt;code&gt;a&lt;/code&gt; is equal to 2 and &lt;code&gt;b&lt;/code&gt; is equal to 10.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-currying" class="anchor"&gt;
  &lt;/a&gt;
  Advantages of Currying
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Increase Code reusability.&lt;/li&gt;
&lt;li&gt;Avoid frequently calling a function with the same argument.&lt;/li&gt;
&lt;li&gt;Make your code easier to refactor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all about &lt;strong&gt;function currying&lt;/strong&gt; in Javascript. The idea behind currying is to take a function and derive a function that returns a specialized function(s).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap Up!!
&lt;/h2&gt;

&lt;p&gt;Thanks for reading!! I hope you enjoyed learning about the concept of currying.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/anuradha2612"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy-me-a-coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Namespacing in JavaScript</title>
      <author>Himanshu Tiwari</author>
      <pubDate>Sun, 17 Jan 2021 12:20:29 +0000</pubDate>
      <link>https://dev.to/himanshutiwari15/namespacing-in-javascript-5g82</link>
      <guid>https://dev.to/himanshutiwari15/namespacing-in-javascript-5g82</guid>
      <description>&lt;p&gt;One of the most confusing things in JavaScript, I found was namespacing. So, I learned about it and thought to share the notes with everyone who is confused about it.&lt;/p&gt;

&lt;p&gt;When we make applications and as our application grows and becomes more complex, it is likely that at some point two variables or functions will end up having the same name, resulting in conflict.&lt;/p&gt;

&lt;p&gt;To avoid this we can make use of namespaces, which will create a local scope for our variables and functions. Javascript doesn't actually have namespaces like other programming languages, so what we'll see there are alternative ways of achieving the same outcome. The most common way of simulating namespaces is via objects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's talk about some approaches which you can often use and often see others using it&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-by-direct-assignment" class="anchor"&gt;
  &lt;/a&gt;
  1. By Direct Assignment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that the names "id" or "next" are generic names that could easily be repeated many times in a large web application. Instead of adding more words to our variables, like "idOfwebApp", and making them separate in the global scope, we place them inside an object that will hold all information about our web app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;So, let's break the above code for this example and you will automatically understand for others below.&lt;/em&gt;&lt;br&gt;
If we take a close look here, then what is happening is, it is acting as an object having a key named id and 2 functions. &lt;br&gt;
If we write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//output will be 0 itself, just like an object.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can use &lt;strong&gt;this&lt;/strong&gt; instead of using the same big long names   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-using-object-literal-notation" class="anchor"&gt;
  &lt;/a&gt;
  2. Using Object Literal Notation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is the most common thing we often see, the most common namespacing we basically use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-module-pattern" class="anchor"&gt;
  &lt;/a&gt;
  3. The Module Pattern
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="p"&gt;})();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is where things turn tricky!!!&lt;br&gt;
Everything must be clear to you but what that "();" is representing is -- self-invoking function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-why-module-approach-over-object-litteral" class="anchor"&gt;
  &lt;/a&gt;
  So Why Module approach over Object Litteral
&lt;/h4&gt;

&lt;p&gt;Object literal notation is rigid – it's all about property assignments, with no room for supporting logic. Moreover, all properties must be initialized and property values cannot easily cross-reference one another. The module pattern suffers none of these constraints and gives us the added benefit of privacy.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;The use of the Module Approach is flexible for big Projects and can be used whereas the Object approach is better for mini-projects and addons less complexity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#further-read" class="anchor"&gt;
  &lt;/a&gt;
  Further Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ultimatecourses.com/blog/mastering-the-module-pattern"&gt;Read More about Module Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks For the read, hope you learned something :)&lt;br&gt;
Found my grammatical mistakes, haha comment them down&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>webdevlopment</category>
    </item>
    <item>
      <title>Tooltip using only CSS</title>
      <author>Rajiv</author>
      <pubDate>Sun, 17 Jan 2021 12:11:08 +0000</pubDate>
      <link>https://dev.to/thoughtlessmind/tooltip-using-only-css-2oh4</link>
      <guid>https://dev.to/thoughtlessmind/tooltip-using-only-css-2oh4</guid>
      <description>&lt;p&gt;Using a tooltip is a great way to pass information to the user in a very minimal and efficient way. It reduces the contents from the page which is important to show but not needed to show all the time.&lt;/p&gt;

&lt;p&gt;But when it comes to adding tooltips to the website, we developers generally use a library for this, which is definitely good as it gives a lot of customizations and controls. But in a situation when tooltips are required but not on a large scale instead, in certain places on the page, then it kinda feels useless to carry around such big libraries for this.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Required Knowledge:-&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;General working knowledge of &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;CSS&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;How &lt;code&gt;data&lt;/code&gt; attribute works in HTML and CSS. For reference check &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/#styling"&gt;this CSS-tricks article&lt;/a&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Understanding of pseudo-selectors in CSS&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;In this, we'll be creating a tooltip using only CSS. There are several ways to create a tooltip in CSS. In this, we'll be using &lt;code&gt;pseudo-selectors&lt;/code&gt; of CSS. One benefit of using this method is that there's no need to create an actual element in the HTML.   &lt;/p&gt;

&lt;p&gt;First of all, on whichever element you want to show the tooltip, add a &lt;code&gt;data&lt;/code&gt; attribute &lt;code&gt;data-customTooltip="Tooltip text"&lt;/code&gt;. Also, pass the text you wanna show on the tooltip.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;index.html&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-customTooltip=&lt;/span&gt;&lt;span class="s"&gt;"Tooltip text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hover on me to see tooltip
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it, this is all we need in HTML. Now, let's add CSS to it. Here we'll be styling the tooltip using data attribute selector. &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/#styling"&gt;Read here&lt;/a&gt; more about it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;styles.css&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-customTooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-customTooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-customTooltip&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.14s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we're selecting the elements which have &lt;code&gt;data-customTooltip&lt;/code&gt; attribute on them and creating a pseudo-element using &lt;code&gt;:after&lt;/code&gt;. Till now a pseudo-element for the tooltip is created but it's not visible as there is &lt;code&gt;scale(0)&lt;/code&gt; in the style. &lt;br&gt;
  Now change the scale to 1 on hover on the parent element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;style.css&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-customTooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here is our tooltip....  &lt;/p&gt;

&lt;p&gt;Position can be changed according to requirement by giving suitable &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; values along with translate property.   &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'll write another blog where we'll make the position of the tooltip dynamic and also incorporate light and dark themes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ1osW8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8gjlpa3vo66r0lm8l2f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ1osW8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8gjlpa3vo66r0lm8l2f.gif" alt="tooltipDemo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now just pass &lt;code&gt;data-customTooltip="tooltip text"&lt;/code&gt; attribute wherever you want to add a tooltip.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Codepen demo  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thoughtlessmind/embed/rNMoLWo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS:- This is my first blog, if there's any mistake I'm making or there's any scope of improvement, please feel free to comment.&lt;/em&gt;😀&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Prototypes in JavaScript</title>
      <author>M V Ganesh Kumar</author>
      <pubDate>Sun, 17 Jan 2021 10:58:34 +0000</pubDate>
      <link>https://dev.to/mvganeshkumar06/prototypes-in-javascript-40md</link>
      <guid>https://dev.to/mvganeshkumar06/prototypes-in-javascript-40md</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript is a prototype based language it uses prototypes for property, method lookup and code re usability through inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this post we'll learn about prototypes, prototype chain and prototypical inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prototype-and-prototype-chain" class="anchor"&gt;
  &lt;/a&gt;
  Prototype and prototype chain
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In JavaScript there are two types of data one is primitive&lt;br&gt;
(numbers, strings, boolean) and the other is object type (arrays, object literals and functions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both the primitive and the object types are wrapped by their respective objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The numbers are wrapped by &lt;code&gt;Number&lt;/code&gt;, strings are wrapped by &lt;code&gt;String&lt;/code&gt;, booleans are wrapped by &lt;code&gt;Boolean&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The arrays are wrapped by &lt;code&gt;Array&lt;/code&gt;, objects are wrapped by &lt;code&gt;Object&lt;/code&gt;, functions are wrapped by &lt;code&gt;Function&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All these wrapper objects have a property called prototype.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This prototype is an object which contains all the reusable properties, methods and it also has the prototype of its parent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The parent of all these wrapper objects is the global object called &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The chain of objects linked together by the prototypes is called as the prototype chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let us visualize the prototype chain using an example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idPcygY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d66kyrtvwot2ea5b05yx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idPcygY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d66kyrtvwot2ea5b05yx.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Let use see how this works in code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To get the prototype of a variable we can use the &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrWrapperProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrWrapperProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Array&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrWrapperProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Object&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectParentProto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectParentProto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#property-method-lookup" class="anchor"&gt;
  &lt;/a&gt;
  Property, method lookup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are trying to access a property or method, first JavaScript looks in the current object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it is not found then using the prototype chain it looks up in the parent object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This continues till the property or method is found or null is reached.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is how the lookup for property or method takes place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prototypical-inheritance" class="anchor"&gt;
  &lt;/a&gt;
  Prototypical inheritance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The main use case of prototypes is to reuse code by inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And the inheritance is possible because of the prototype chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's take an example to understand.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isTalkative&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;talk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Talking...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// John&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTalkative&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talk&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Talking...&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here we are using the &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; and setting the prototype of the student as person.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that the protoype of student will be person or in other words the student prototypically inherits the properties and methods from the person.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Due to this the student will have access to all the properties and methods in person.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's visualize the prototype chain for the above example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNQMabuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9fhnke1abr09jmwlbxij.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNQMabuR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9fhnke1abr09jmwlbxij.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the prototype of student is person, the prototype of person is &lt;code&gt;Object&lt;/code&gt; and the prototype of &lt;code&gt;Object&lt;/code&gt; is null.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that the student will have access to all the properties and methods from person and &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly the person will have access to all the properties and methods from the &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-objects" class="anchor"&gt;
  &lt;/a&gt;
  Creating objects
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now that we have learnt about prototypes let us see how to create our own objects using prototypes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTalkative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Talking...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 12&lt;/span&gt;

&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talk&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Talking...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the student function is used to construct or create an object so it is called as &lt;code&gt;constructor function&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a common convention that the constructor functions should have upper camel casing to identify them as constructors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword points to the object that is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you want to learn more about how this keyword works, you can check out my post &lt;a href="https://dev.to/mvganeshkumar06/how-this-keyword-works-in-javascript-29f3"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that the arrow functions can not be used to create constructor functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are setting the property and method in the prototype of the function so that all the objects will be able to access them by prototypical inheritance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword is used to create objects using the constructor function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;Object.create()&lt;/code&gt; method is used to create objects from object literals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see how to create objects from object literals.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isHappy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;john&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hi I'm John&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;john&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the &lt;code&gt;Object.create()&lt;/code&gt; method sets the prototype of john as person object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note that in ES6, classes was introduced to JavaScript and they are used to create objects, but it is just a change in the syntax and behind the scenes it still uses prototype based inheritance&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Everything in JavaScript has a wrapper object which contains the prototype property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototype is an object that contains all the reusable properties, methods along with the prototype of its parent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototype chain is the chain of objects linked by the prototypes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript uses the prototype chain to lookup properties and methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prototypical inheritance is the ability to reuse the properties and methods from the parent objects in the prototype chain.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cold Hard Truths About Software Engineering I Understood After 9+ Years</title>
      <author>Nick Bull</author>
      <pubDate>Sun, 17 Jan 2021 10:48:07 +0000</pubDate>
      <link>https://dev.to/nickbulljs/cold-hard-truths-about-software-engineering-i-understood-after-9-years-5483</link>
      <guid>https://dev.to/nickbulljs/cold-hard-truths-about-software-engineering-i-understood-after-9-years-5483</guid>
      <description>&lt;p&gt;Software engineering is not a magical place where everyone has a six-figure salary, works on projects they like, and changes the world.&lt;/p&gt;

&lt;p&gt;Like any job, software engineering has its good, bad, and ugly sides.&lt;/p&gt;

&lt;p&gt;Today I'm going to talk about the ugly sides that I've learned over 9 years as a programmer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#communication-skills-matter-more" class="anchor"&gt;
  &lt;/a&gt;
  Communication Skills Matter More
&lt;/h1&gt;

&lt;p&gt;Many developers confuse the terms &lt;em&gt;programming&lt;/em&gt; and &lt;em&gt;software development&lt;/em&gt;. It’s two different activities that have one main thing in common – coding.&lt;/p&gt;

&lt;p&gt;Programming is about solving problems with code. It is often a solo activity.&lt;/p&gt;

&lt;p&gt;Software development is about design software from an engineering perspective with consideration for end-users, clients, and business needs. It is often a team activity.&lt;/p&gt;

&lt;p&gt;To be successful in programming, you need to be great at solving problems with the code. But it takes a lot more to be successful in software development. Coding is not the main priority here. Actually, it’s number 3.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;People&lt;/li&gt;
&lt;li&gt;Coding &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s why coding skills are not enough to lead to a successful career.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"What to do? Learn about business or people?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Good idea. But here is the better one.&lt;/p&gt;

&lt;p&gt;Learn one skill can give you significant improvements in all three areas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"What's this?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Communication skills.&lt;/p&gt;

&lt;p&gt;Very few software engineering jobs are 100% or even 70% or 50% technical, most teams spend a lot of time in meetings, planning, coordination, and team buildings, where communication skill plays the main role.&lt;/p&gt;

&lt;p&gt;Until I realized this, communication was my Achilles heel and kept me from growing in my career. After I started to improve it, my position, responsibilities, and salary began to grow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#faang-are-highly-overrated" class="anchor"&gt;
  &lt;/a&gt;
  FAANG Are Highly Overrated
&lt;/h1&gt;

&lt;p&gt;FAANG companies (tech giants like Apple, Facebook, Google, and others) have money for marketing companies and big salaries to make developers from all over the world fighting to work at one of them, and it's obvious why. You work in a “famous” company, have many bonuses like health insurance and free meals, and the line &lt;em&gt;"Worked at FAANG"&lt;/em&gt; on your resume gives you a great opportunity right after quitting it.&lt;/p&gt;

&lt;p&gt;But not everything is as magical as it seems.&lt;/p&gt;

&lt;p&gt;Here are big 3 disadvantages I realized about FAANG that stopped me from wanting to work for them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are a small cog in a big machine.&lt;/p&gt;

&lt;p&gt;Many developers have wet dreams that they will work on significant and famous products when they get a job at Google, like YouTube or Google Search. But in reality, it’s often not. There's a good chance you'll be working on a small part of some internal Google product that no one will ever see outside of your team of 10 people. Your area of responsibilities may be so small that it will be almost invisible. That feeling of a small cog in a big machine can make you miserable in the long term if you're not suited for it. I personally hate this feeling. That’s why I’m not ready to trade freedom for the opportunity to work for a large and well-known company.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You are going to be putting the job in front of everything else in your life.&lt;/p&gt;

&lt;p&gt;After reading tons of articles where people working in FAANG complain about their real working hours and how they don’t have time for their families, I realized that it’s not for me. Before applying for a job in some big tech giant, I suggest you read &lt;a href="https://www.teamblind.com/post/Working-for-FAANG-its-not-just-join-and-kick-back-ttSWyGNF"&gt;this great article&lt;/a&gt;, where the person who is working in Apple and getting $625.000 per year, questioning what he trades for money.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corporate culture.&lt;/p&gt;

&lt;p&gt;Corporate culture is not for all. It’s often a rat race, whether you work at Google or in a traditional bank. Corporate culture is a systematic structure for benefits, pay raises, and promotions. In such a big system, your work can easily become invisible no matter how good it is or disregarded because of management ambitions, even with the best intentions at all levels. Decide for yourself, is it worth it to work at FAANG and play political games or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Working for FAANG companies has its benefits, but it’s not the best possible job you could get. Always learn about the pros and cons of the company before applying for a job.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nobody-cares" class="anchor"&gt;
  &lt;/a&gt;
  Nobody Cares
&lt;/h1&gt;

&lt;p&gt;I have a friend who was working as a software engineer in a big company and one day he had a personal problem during the workweek, so he needed to take a couple of days off to solve it.&lt;/p&gt;

&lt;p&gt;He went to his manager, told him about the situation, and asked for a day off. The manager easily approved it.&lt;/p&gt;

&lt;p&gt;After a couple of weeks, when my friend and his manager have a 1:1 meeting, he was blamed for wasting work time on personal problems, &lt;strong&gt;even when he took a day off, in his free time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After this situation, he thought it is not okay to place his needs above the company’s needs. That job must be the #1 priority in your life.&lt;/p&gt;

&lt;p&gt;And it’s not a single case. After 9 years of working in the tech field, I heard dozens of stories similar to this and realized that most companies don’t care. Don’t care about who you are, what you like, and what you stand for. Companies only care about one thing, whether you can solve their problem or not.&lt;/p&gt;

&lt;p&gt;When my friend told me this story couple of weeks after it happened, I told him these words that changed his mind about priorities by 180 degrees:&lt;/p&gt;

&lt;p&gt;“You will change many jobs in your lifetime. You will forget 90% of the people you worked with. Your managers will change every couple of months, and everyone will have a different leadership style and strategy for developing the product. You will meet dozens of different company cultures, and every company will claim that only their culture is authentic.&lt;/p&gt;

&lt;p&gt;A lot of things will come and go from your life, but they are temporary things. The only permanent thing is you.&lt;/p&gt;

&lt;p&gt;When you realize this, the number one priority for you will become not some job or some product, but you.&lt;/p&gt;

&lt;p&gt;Do your best job, but do it for yourself, not for someone else.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#not-everything-you-will-do-is-what-you-love" class="anchor"&gt;
  &lt;/a&gt;
  Not Everything You Will Do Is What You Love
&lt;/h1&gt;

&lt;p&gt;What is the first association when you hear the words “software engineer”?&lt;/p&gt;

&lt;p&gt;Probably “coding.”&lt;/p&gt;

&lt;p&gt;But it’s not the first association for companies.&lt;/p&gt;

&lt;p&gt;Their association is “can solve our problem with code.”&lt;/p&gt;

&lt;p&gt;Both associations are very similar but at the same time absolutely different.&lt;/p&gt;

&lt;p&gt;The truth is you are paid not for “just coding,” you are paid to solve business problems with the code. And if you can solve them without coding, companies will still pay you.&lt;/p&gt;

&lt;p&gt;I know inside most software engineers are programmers, and we love coding. We love building things with the code. But as I said, programming is not the same as software engineering.&lt;/p&gt;

&lt;p&gt;In software engineering, business and its problems stay in the first place, with all its downsides. It’s not a side project you are passionate about. You will do things you don't agree with, you will work with technologies you don’t know, and you will meet people you don’t like.&lt;/p&gt;

&lt;p&gt;Job is a JOB.&lt;/p&gt;

&lt;p&gt;It’s an adjustment to get used to working every day for 8 hours. It’s an adjustment working with different people with different personalities.&lt;/p&gt;

&lt;p&gt;What you are doing is pays you very well, but it’s still a job.&lt;/p&gt;

&lt;p&gt;In the end, I want to quote the brilliant words of one software engineer:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“In the end, all software engineering projects boil down to "get data from here, build some pipes for it to get to this other place, maybe transform it a bit, and maybe display it" ad infinitum. 90% of the code you will write isn't interesting, just necessary.”&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-the-end" class="anchor"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h1&gt;

&lt;p&gt;I’m writing a book &lt;strong&gt;“Nail The Technical Interview And Land A High Paying Job”&lt;/strong&gt; where I reveal everything I've learned about interviews during 6+ years working as a software engineer &lt;em&gt;(applied more than 110 times, failed 25+ job interviews, and got 17 job offers in summary)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What's in?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔︎ A proven system of how to exactly prepare for each step of a job interview, pass it successfully, get an offer, and land a job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔︎ How to get a job offer even without a degree and work experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔︎ The missing knowledge what &lt;em&gt;ONE&lt;/em&gt; thing every employer is looking for in every candidate.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✔︎ Questions to ask recruiters that make you instantly stand out from the other candidates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔︎ The exact steps to create a resume that sells you enough to invite you to an interview and get a recruiter phone call.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And many more on how to exactly prepare for a technical interview and nail it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nailthetechnicalinterview.com/"&gt;Join here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a great one!&lt;/p&gt;

&lt;p&gt;– Nick&lt;/p&gt;

&lt;p&gt;Also, every week, I send out my "3-2-1" newsletter with 3 hand-picked articles from me, 2 web development guides from others, and 1 useful Tweet I enjoyed.&lt;/p&gt;

&lt;p&gt;🔥  &lt;a href="https://nickbulljs.com/newsletter/"&gt;Join 800+ developers here&lt;/a&gt;🔥&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Strategy Turns</title>
      <author>swyx</author>
      <pubDate>Sun, 17 Jan 2021 09:44:04 +0000</pubDate>
      <link>https://dev.to/swyx/strategy-turns-4ng8</link>
      <guid>https://dev.to/swyx/strategy-turns-4ng8</guid>
      <description>&lt;p&gt;Real rockets don't go straight up. They go up, and then they &lt;em&gt;turn&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NDYsQ5Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vj0hvuk66juvtz5x6wp4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDYsQ5Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vj0hvuk66juvtz5x6wp4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rockets do this to transition from "mostly going up" to "mostly going sideways" in order to achieve orbit. This is known as a &lt;a href="https://en.wikipedia.org/wiki/Gravity_turn"&gt;gravity turn&lt;/a&gt; (&lt;em&gt;technically, they &lt;a href="https://wiki.kerbalspaceprogram.com/wiki/Gravity_turn#Mechanics"&gt;pitchover&lt;/a&gt;, but that's a less catchy title&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I see a lot of "turns" in life - when something makes sense to do at first, but becomes a bad idea once you're established, and you notice the "pros" do something else instead. &lt;/p&gt;

&lt;p&gt;This was inspired by listening to &lt;a href="https://www.creatorlab.fm/tim-urban-wait-but-why-podcast/"&gt;a recent Creator Lab podcast with Tim Urban&lt;/a&gt;. In his words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Early on, it was all about 'How do we get these posts to be read by the most people'... I was trying to do enticing headlines and feature drawings...  I think early on, I definitely think you want to think about SEO and keywords and headlines, and all of that."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the turn:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"As the blog started to get more attention and there were more people signing up, it doesn’t matter what the headline is for the newsletter... So it’s become less about "how do we get this to go viral on social media", and more about "the newsletter is going to automatically bring a certain minimum people".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can &lt;a href="https://www.youtube.com/watch?v=tl2a6H1E7DU"&gt;listen to the podcast&lt;/a&gt; for the rest. But essentially one of the most successful bloggers in the world is telling us that you should use clickbait and SEO when you are just starting out, even though he doesn't do it. Tim's first post was &lt;a href="https://waitbutwhy.com/2013/07/7-ways-to-be-insufferable-on-facebook.html"&gt;7 Ways to Be Insufferable on Facebook&lt;/a&gt;, written for a Facebook audience). But once you achieve some form of "escape velocity", you earn the right to title your posts authentically to your artistic sensibilities (like "&lt;a href="https://waitbutwhy.com/2014/05/fermi-paradox.html"&gt;The Fermi Paradox&lt;/a&gt;").&lt;/p&gt;

&lt;p&gt;I've taken to calling these &lt;strong&gt;Strategy Turns&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples-of-strategy-turns" class="anchor"&gt;
  &lt;/a&gt;
  Examples of Strategy Turns
&lt;/h2&gt;

&lt;p&gt;You see them everywhere once you know how to look:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Founders&lt;/strong&gt;: "First time founders are obsessed with product. Second time founders are obsessed with distribution." - &lt;a href="https://twitter.com/justinkan/status/1059989657218248704"&gt;Justin Kan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Project choice&lt;/strong&gt;: "The danger of pursuing many good projects is not having the time to pursue many great projects. A rule of thumb: Move slowly when choosing what to focus on. But move very quickly once you've decided." - &lt;a href="https://twitter.com/Julian/status/1350848867713990657?s=20"&gt;Julian Shapiro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Technology Adoption&lt;/strong&gt;: Otherwise known as &lt;a href="https://en.wikipedia.org/wiki/Crossing_the_Chasm"&gt;Crossing the Chasm&lt;/a&gt;. You start out motivated by pure technical excellence, which attracts enthusiasts and early adopters. But when you try to go for the mass majority you will hit a wall — unless you can execute a strategy turn. This often means investing in less technical factors like documentation, third party ecosystem, and lighthouse users. Cheng Lou of the React and Reason teams famously called this &lt;a href="https://frantic.im/meta-language"&gt;the Metalanguage&lt;/a&gt; around your code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developers&lt;/strong&gt;: most developers hit a point where the impact they can have is rate-limited by other developers and nondevelopers. This can result in a career change to engineering management or architect role. This can even get to the point where you are making a mistake if you are coding &lt;em&gt;at all&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Blogging&lt;/strong&gt;: There is a tradeoff between blogging on your own site (more ownership and email list building) vs blogging on a community site like Medium, Dev.to, or Hashnode (more discoverability and social features) vs microblogging on social media like Twitter, LinkedIn or Facebook (even more discoverability and social). I think you should start blogging on a community site, and then do a strategy turn to your own.  I've written before about how you can &lt;a href="https://www.swyx.io/devto-cms/"&gt;use Dev.to as a Headless CMS&lt;/a&gt; (this is what I am doing to write this very blogpost), but when in doubt, &lt;a href="https://codingcareer.circle.so/c/learn-in-public/how-to-build-my-learn-in-public-website#comment_601161"&gt;do not let get coding get in the way of your blogging&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Audiences&lt;/strong&gt;: Newer creators get the &lt;a href="https://twitter.com/search?q=audience-first&amp;amp;src=typed_query"&gt;Audience First&lt;/a&gt; and &lt;a href="https://twitter.com/search?q=build%20in%20public&amp;amp;src=typed_query"&gt;Build in Public&lt;/a&gt; religion and think it's the holy grail to business success — because they are new at building audiences. Experts — who can build audience in the middle of a desert — understand that &lt;a href="https://fizzle.co/product-first/"&gt;product first&lt;/a&gt; and &lt;a href="https://jmj.medium.com/raycast-built-in-private-157588803d2a"&gt;building in private&lt;/a&gt; has benefits. &lt;a href="https://twitter.com/naval/status/1041513555961438208?s=20"&gt;Better to be rich and anonymous&lt;/a&gt;, than rich and trapped by your business. Paul Jarvis &lt;a href="https://twitter.com/khemaridh/status/1328770143564877824"&gt;deleted his newsletter, social media, and website&lt;/a&gt;. I used to admire people with big Twitter followings, now I understand why CEOs &lt;em&gt;hire&lt;/em&gt; people with big Twitter followings and choose to keep a low profile themselves.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Investing&lt;/strong&gt;: It's a good idea for most people to create a diversified portfolio of small bets and to &lt;a href="https://www.swyx.io/psychology-of-money/#getting-wealthy"&gt;stay invested in the market&lt;/a&gt;, but at the elite levels you see Chris Sacca &lt;a href="https://techcrunch.com/2011/02/27/jp-morgan-twitter-chris-sacca-10-percent-secondary/"&gt;going all-in on Twitter&lt;/a&gt; and Warren Buffett &lt;a href="https://www.silverlightinvest.com/blog/why-warren-buffett-making-argument-passive-investing"&gt;sitting on $137 billion in cash&lt;/a&gt; (so he has capital to make concentrated bets in bad times) — even as he tells most Americans to invest in index funds.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning&lt;/strong&gt; is basically the same as Investing. Start as an explorer going wide, then go deep when you strike gold. &lt;a href="https://www.swyx.io/learning-gears/"&gt;More in my post on Learning Gears&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Regulation&lt;/strong&gt;: As a startup founder, you want no regulation to minimize the cost of business and to enable more experimentation. But once you are established, you want your industry to be &lt;strong&gt;as regulated as possible&lt;/strong&gt; to &lt;a href="https://news.ycombinator.com/item?id=25601814"&gt;make it harder for newer startups to come up the way you did&lt;/a&gt; and to draw clear lines on complying with the letter of the law instead of the endless task of making tradeoffs on behalf of all stakeholders. You want this so much that you will &lt;a href="https://www.nytimes.com/2019/03/30/technology/mark-zuckerberg-facebook-regulation-explained.html"&gt;publicly call for governments to regulate you&lt;/a&gt;, and of course you will gladly make yourself available for consultation out of the kindness of your hearts.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Sidenote: These kinds of turns are also a common fantasy trope, from &lt;a href="https://en.wikipedia.org/wiki/Granny_Weatherwax#Headology"&gt;Discworld&lt;/a&gt; to Star Wars (I tried but cannot find a source for this idea - the closest is the &lt;a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/TooAwesomeToUse"&gt;Too Awesome To Use&lt;/a&gt; trope). Magic users start out using magic for everything, but the wizened masters of the craft spend more time thinking about when &lt;em&gt;not&lt;/em&gt; to use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#learning-from-strategy-turns" class="anchor"&gt;
  &lt;/a&gt;
  Learning from Strategy Turns
&lt;/h2&gt;

&lt;p&gt;My takeaways from observing strategy turns are simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mind the difference between "noob game" and "pro game"&lt;/strong&gt;: You instinctively only want to hear from famous people in your industry who have "made it", but understand that you shouldn't use a playbook that you haven't earned yet, even though it might work well for others.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Today's success stories are based on yesterday's rules&lt;/strong&gt;: The rules of the game are constantly shifting — what worked for successful people starting out may not work for you. Yet we tend to only pay attention to advice from people who are already successful today. Tim Urban is pretty honest about this &lt;a href="https://www.creatorlab.fm/tim-urban-wait-but-why-podcast/"&gt;in his podcast interview&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"It is a different world. 2013 happened to be a good time to start a blog. Totally luck of the draw for me, but  it was a time when Facebook especially was a crazy engine for growth of something new like this." He goes on to describe how you could get a blogpost in front of 500,000 people for $500 in the early days of Facebook.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Learning from successful people is good, but you should balance that by swapping notes with peers actively exploring new directions &lt;em&gt;today&lt;/em&gt; to ensure you don't try to replicate strategies that no longer work. (I &lt;a href="https://www.learninpublic.org/#workshops"&gt;run a mastermind&lt;/a&gt; for this purpose)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mind the Metagame&lt;/strong&gt;: Just when you have achieved some success with one playbook, you should be looking ahead to how that playbook should change. Sometimes the "turn" is such a strong turn that you fully &lt;a href="https://fs.blog/2013/10/inversion/"&gt;invert&lt;/a&gt;. This isn't an easy call — sometimes you haven't exhausted your playbook yet, and you shouldn't try to fix what isn't broken.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-third-level" class="anchor"&gt;
  &lt;/a&gt;
  What's the Third Level?
&lt;/h2&gt;

&lt;p&gt;Fans of both &lt;a href="https://evpoker.org/tips/flop-turn-river.html"&gt;poker&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/The_Prestige_(film)"&gt;Christopher Nolan movies&lt;/a&gt; know that there should be a third level after a "turn". Thesis and antithesis are always followed by synthesis. &lt;/p&gt;

&lt;p&gt;Strategy is probably no different. &lt;strong&gt;What comes after Strategy Turns?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>strategy</category>
      <category>advice</category>
    </item>
    <item>
      <title>Setup Vue3 with Element UI</title>
      <author>Becca Bycott</author>
      <pubDate>Sun, 17 Jan 2021 08:11:56 +0000</pubDate>
      <link>https://dev.to/beccabycott/setup-vue3-with-element-ui-54fe</link>
      <guid>https://dev.to/beccabycott/setup-vue3-with-element-ui-54fe</guid>
      <description>&lt;p&gt;Element UI is my favorite Vue UI library. A popular top-class component library with more than 50K Github stars. And they already have &lt;a href="https://dev.to/iamkun/element-ui-for-vue-3-0-is-coming-4o6o"&gt;a version that works with Vue3&lt;/a&gt; - Element Plus.&lt;/p&gt;

&lt;p&gt;I'd like to share how to set up a Vue3 project with &lt;a href="https://github.com/element-plus/element-plus"&gt;Element Plus&lt;/a&gt; using Vue CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-latest-version-of-vue-cli" class="anchor"&gt;
  &lt;/a&gt;
  Install the latest version of Vue CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-project-with-vue-cli" class="anchor"&gt;
  &lt;/a&gt;
  Create a project with Vue CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create my-app
// And then select Vue 3 option.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEaZ0H1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhyq695ezpvqpg4u0gk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEaZ0H1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhyq695ezpvqpg4u0gk0.png" alt="Vue CLI VUE3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-element-plus" class="anchor"&gt;
  &lt;/a&gt;
  Install Element Plus
&lt;/h3&gt;

&lt;p&gt;You can add Element Plus to your project simply via its Vue CLI plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
vue add element-plus
npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aY0k8qNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujezudjh90xxlopmvbe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aY0k8qNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujezudjh90xxlopmvbe1.png" alt="Element Plus Vue CLI plugin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can use Element Plus components in your project like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-button type="primary"&amp;gt; Element UI &amp;lt;/el-button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jx5CA-8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq2uo99zp2djyl1auqht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jx5CA-8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq2uo99zp2djyl1auqht.png" alt="Element Plus with Vue 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out this repository with this configuration done: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/element-plus/element-plus-starter"&gt;https://github.com/element-plus/element-plus-starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Math object in JavaScript</title>
      <author>EidorianAvi</author>
      <pubDate>Sun, 17 Jan 2021 05:10:25 +0000</pubDate>
      <link>https://dev.to/eidorianavi/the-math-object-in-javascript-25li</link>
      <guid>https://dev.to/eidorianavi/the-math-object-in-javascript-25li</guid>
      <description>&lt;p&gt;I have recently been using the Math object and its methods in my algorithms and I can't help but wonder why I didn't start using it sooner. This may be a super basic topic to some people but I personally had little to no exposure to using it until recently and thought I'd go over a few of the useful methods just to get them out there.&lt;/p&gt;

&lt;p&gt;One thing to clarify if you have no idea what I'm talking about JavaScript has a built in &lt;strong&gt;Math&lt;/strong&gt; object with many methods to perform mathematical calculations or to provide a common mathematical value such as Pi or the constant e. &lt;/p&gt;

&lt;p&gt;Now that we cleared that up let's get started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mathround-mathceil-and-mathfloor" class="anchor"&gt;
  &lt;/a&gt;
  1. Math.round(), Math.ceil() and Math.floor()
&lt;/h3&gt;

&lt;p&gt;These are all very similar in that they round to the nearest whole integer. &lt;/p&gt;

&lt;p&gt;Math.round() is used to round to the nearest whole integer whether it be lower or higher. Just like you would round UP at the .5 mark and down at anything lower.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.round(1.4);
// Returns 1

Math.round(2.5);
// Returns 3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Math.ceil() also rounds to the nearest whole integer but it only rounds UP no matter the decimal value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.ceil(10.2);
// Returns 11

Math.ceil(13.7);
// Returns 14
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Math.floor() does the opposite. It will always round DOWN to the nearest whole value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.floor(100.3);
// Returns 100

Math.floor(56.9);
// Returns 56
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So they all have the same purpose but you have options depending on what you the situation might demand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-mathmin-and-mathmax" class="anchor"&gt;
  &lt;/a&gt;
  2. Math.min() and Math.max()
&lt;/h3&gt;

&lt;p&gt;These do exactly what they seem like they will do and will return the minimum or maximum value of a set of data.&lt;/p&gt;

&lt;p&gt;Don't let the simplicity fool you though that's incredibly useful.&lt;/p&gt;

&lt;p&gt;My favorite way to use these is when determining the minimum or maximum value in an array. To do this all you have to do is pass the array into the method but first make sure to use the spread operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.min(100, 4, 13, 8,56);
// Returns 4

Math.max(10, 2000, 26, 1701, 235);
// Returns 2000

const numberArray = [3, 6, 1, 4, 9];

Math.max(...numberArray);
// Returns 9

Math.min(...numberArray);
// Returns 1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-mathsqrt-and-mathpow" class="anchor"&gt;
  &lt;/a&gt;
  3. Math.sqrt() and Math.pow()
&lt;/h3&gt;

&lt;p&gt;Math.sqrt() allows you to find the square root of a given value. Nothing to fancy but definitely handy to know.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.sqrt(9);
// Returns 3

Math.sqrt(64);
// Returns 8
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Math.pow() takes in two values. The first being the base value, the second the power you'd like to apply to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.pow(2, 2);
// Returns 4

Math.pow(2, 8);
// Returns 256
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-mathabs-and-mathsign" class="anchor"&gt;
  &lt;/a&gt;
  4. Math.abs() and Math.sign()
&lt;/h3&gt;

&lt;p&gt;Math.abs() gives you the absolute value of a number so if you have  a case where you need a negative to be it's positive counterpart you use this, which happened to me recently incidentally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.abs(-100);
// Returns 100

Math.abs(200);
// Returns 200
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Math.sign() tells you the sign of the input whether it be positive, negative or zero. It returns it in the form of -1, 0, or 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.sign(-13);
// Returns -1

Math.sign(13);
// Returns 1

Math.sign(0);
// Returns 0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This has proven to be useful for testing if a value passes a threshold.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;These are all methods I've recently used in my algorithm practice that have helped tremendously. They've also helped me shorten my solutions in multiple cases. &lt;/p&gt;

&lt;p&gt;There are quite a few methods used for calculation purposes and a couple common values like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.E
// Returns Eulers constant which is 2.718

Math.PI
// Returns 3.14159 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Really though there a ton of methods to use on the object for your calculation needs and here's a reference for your future mathematical needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anywho that'll it from me. Happy Coding! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>YouTua - Download Videos  in the best Quality available..</title>
      <author>Dhruv Panchal</author>
      <pubDate>Sun, 17 Jan 2021 03:36:38 +0000</pubDate>
      <link>https://dev.to/dhhruv/youtua-download-videos-in-the-best-quality-available-ikl</link>
      <guid>https://dev.to/dhhruv/youtua-download-videos-in-the-best-quality-available-ikl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-i-built" class="anchor"&gt;
  &lt;/a&gt;
  What I built:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;YouTua is a GUI Program to download videos from various supported sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua"&gt;&lt;br&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEUTnj5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/downloads/dhhruv/YouTua/total%3Fcolor%3Dimportant"&gt;&lt;br&gt;
    &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Screenshots:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AQAyCJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/103865422-32378200-50ea-11eb-9d30-113c98dceb47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AQAyCJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/103865422-32378200-50ea-11eb-9d30-113c98dceb47.png" alt="YouTua Working Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;YouTua is a GUI Program to download videos from various supported sites. Using this software you can download videos from various supported websites for any purposes. It can be used by journalists and human rights organizations to save eyewitness videos, by educators to save videos for classroom use, by Uploaders to save backup copies of their own uploaded videos, and by users worldwide to watch videos on hardware that can’t run a standard web browser, or to watch videos in their full resolution over slow or unreliable Internet connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#link-to-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Link to Source Code:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/dhhruv/YouTua"&gt;YouTua Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissive-license" class="anchor"&gt;
  &lt;/a&gt;
  Permissive License:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-" class="anchor"&gt;
  &lt;/a&gt;
  How To Use !
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Select the OUTPUT Folder by manually adding path or selecting the FOLDER using the SELECT FOLDER Button.
(By Default the OUTPUT FOLDER is set to the current directory.)&lt;/li&gt;
&lt;li&gt;Enter the Link of Video you want to download.&lt;/li&gt;
&lt;li&gt;For Downloading video with RESOLUTION&amp;lt;=720p proceed normally to download.&lt;/li&gt;
&lt;li&gt;For Downloading video with MAXIMUM RESOLUTION (=&amp;gt;720p) available according the video link, check the MAX RES Settings and choose the output format (.mp4 or .mkv) as per preferences. &lt;/li&gt;
&lt;li&gt;To download the available subtitles check the subtitles button.&lt;/li&gt;
&lt;li&gt;Click START DOWNLOAD and enjoy.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I've seen over the past time that students need to download videos regarding there lectures because the Internet connectivity in many areas is still too slow to watch live lectures and so to make an app that is easy to use and they can download videos according to their preferred quality with minimal data loss. That thing inspired me to make something which can be useful and make some difference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-it" class="anchor"&gt;
  &lt;/a&gt;
  How I built it:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;During the making of this software, I learned many new things in Python programming language including scrapping and many other aspects in the same domain. I'm still working on making it even better and easy to use. Next feature will be to download the given in quality as asked by the user.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Automate file renaming with Node.js scripts</title>
      <author>Emma Goto 🍙</author>
      <pubDate>Sat, 16 Jan 2021 23:52:47 +0000</pubDate>
      <link>https://dev.to/emma/automate-file-renaming-with-node-js-scripts-cc0</link>
      <guid>https://dev.to/emma/automate-file-renaming-with-node-js-scripts-cc0</guid>
      <description>&lt;p&gt;Node.js scripts can be a real time-saver when you want to automate common tasks. In this post, you'll learn how to write your own script to rename files using &lt;a href="https://nodejs.org/api/fs.html"&gt;fs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-running-your-script" class="anchor"&gt;
  &lt;/a&gt;
  Creating and running your script
&lt;/h2&gt;

&lt;p&gt;I have a couple of scripts that I use for my blog, which I keep inside of the &lt;code&gt;scripts&lt;/code&gt; folder in the blog's repository.&lt;/p&gt;

&lt;p&gt;Here I've created a file named &lt;code&gt;renameFile.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// scripts/renameFile.js&lt;/span&gt;&lt;span class="cp"&gt;
#!/usr/bin/env node
&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first line is known as a &lt;strong&gt;shebang line&lt;/strong&gt; and makes sure that the script is executed with Node.js.&lt;/p&gt;

&lt;p&gt;You can either run the script directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node ./scripts/renameFile.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or if you're storing it in your repository, you can add a shortcut to run it in your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rename"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./scripts/renameFile.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Depending on whether you’re using Yarn or npm, you can run this script with one of these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rename
&lt;span class="c"&gt;# or&lt;/span&gt;
npm run rename
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-sure-to-install-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Make sure to install dependencies
&lt;/h2&gt;

&lt;p&gt;In the sections below, we’ll be making use of a library called &lt;a href="https://nodejs.org/api/fs.html"&gt;fs&lt;/a&gt;. Make sure to install your dependencies before you run the script!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; fs
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; fs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-rename-a-file-with-fs-rename" class="anchor"&gt;
  &lt;/a&gt;
  How to rename a file with fs rename
&lt;/h2&gt;

&lt;p&gt;fs provides a lot of useful functions for modifying your files.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;rename&lt;/code&gt; function will &lt;strong&gt;asynchronously&lt;/strong&gt; rename a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/old.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/new.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The file name needs to contain the full path of the file. We can use &lt;code&gt;process.cwd()&lt;/code&gt; to get the file path of the directory that the script was run from.&lt;/p&gt;

&lt;p&gt;So instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/Users/emma/src/emgoto.com/old.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/old.txt`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You’ll also notice that we’re passing in a callback function as the third argument. This callback will get executed once the rename is successful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Even if you don’t want a callback executed, this argument is not optional. You can pass in &lt;code&gt;() =&amp;gt; {}&lt;/code&gt; if you don’t want anything to happen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alternatively, you can also synchronously rename a file using &lt;code&gt;renameSync&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renameSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;renameSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means while the file is being renamed, the rest of the script won't execute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rename-vs-renamesync-which-should-i-use" class="anchor"&gt;
  &lt;/a&gt;
  rename vs renameSync: which should I use?
&lt;/h2&gt;

&lt;p&gt;If you’re writing a complex script, you may be able to improve performance by using asynchronous methods. In my case, since the scripts I write are simple, it doesn’t make too much of a difference.&lt;/p&gt;

&lt;p&gt;The main thing to keep in mind is that, if you are renaming a file &lt;strong&gt;asynchronously&lt;/strong&gt; and then directly after you try and modify the new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- async&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could end up in a situation where you're executing &lt;code&gt;doStuff&lt;/code&gt; on a file that doesn't exist yet!&lt;/p&gt;

&lt;p&gt;In this scenario, make sure to either do it synchronously with &lt;code&gt;renameSync&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;renameSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or, make sure you modify the new file inside of the callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-rename-a-folder-with-fs-rename" class="anchor"&gt;
  &lt;/a&gt;
  How to rename a folder with fs rename
&lt;/h2&gt;

&lt;p&gt;You can also use &lt;code&gt;rename&lt;/code&gt; and &lt;code&gt;renameSync&lt;/code&gt; to rename folders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-files-with-glob" class="anchor"&gt;
  &lt;/a&gt;
  How to find files with glob
&lt;/h2&gt;

&lt;p&gt;In the above example, we are renaming a specific file. In real-life, you'll probably want to find a list of files that match a certain pattern.&lt;/p&gt;

&lt;p&gt;Let’s say you were looking for any zip files inside of your app’s &lt;code&gt;src&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;glob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*.zip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Breaking down the code above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;process.cwd()&lt;/code&gt; gets the current directory (from where you ran the script)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;join()&lt;/code&gt; will join all the strings you pass in with &lt;code&gt;/&lt;/code&gt; to make a path&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;glob.sync()&lt;/code&gt; does a pattern-matching search to try and find any files that match the string you provided. (There is also an async version, &lt;code&gt;glob()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will return an array of files that end in &lt;code&gt;.zip&lt;/code&gt;. If you were only expecting one file, you’ll be able to grab it from the 0th index of the array (&lt;code&gt;files[0]&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-pass-in-arguments-to-the-script" class="anchor"&gt;
  &lt;/a&gt;
  How to pass in arguments to the script
&lt;/h2&gt;

&lt;p&gt;You might want to pass in an argument to your script, like the name of the file you wish to rename.&lt;/p&gt;

&lt;p&gt;You can pass in as many arguments as you like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rename argOne argTwo
&lt;span class="c"&gt;# or&lt;/span&gt;
npm run rename argOne argTwo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then you can get them out using the &lt;code&gt;process.argv&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// argOne&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// argTwo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(The 0th and 1st spots in the array will contain &lt;code&gt;node&lt;/code&gt; and the name of your script).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Automating the process of file renaming can speed up an otherwise tedious process. With this post, you should now feel comfortable to write your own Node.js scripts!&lt;/p&gt;

&lt;p&gt;I would encourage you to check out the &lt;a href="https://nodejs.org/api/fs.html"&gt;fs documentation&lt;/a&gt; to see other useful methods for file deletion and modification.&lt;/p&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>How to securely store passwords?</title>
      <author>TECH SCHOOL</author>
      <pubDate>Sat, 16 Jan 2021 22:11:59 +0000</pubDate>
      <link>https://dev.to/techschoolguru/how-to-securely-store-passwords-3cg7</link>
      <guid>https://dev.to/techschoolguru/how-to-securely-store-passwords-3cg7</guid>
      <description>&lt;p&gt;Hello everyone, welcome back to the backend master class!&lt;/p&gt;

&lt;p&gt;In this lecture, we’re gonna learn how to securely store users’ password in the database.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3xnJI2lHmc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to the &lt;a href="https://bit.ly/backendmaster"&gt;full series playlist on Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And its &lt;a href="https://github.com/techschool/simplebank"&gt;Github repository&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-store-password" class="anchor"&gt;
  &lt;/a&gt;
  How to store password
&lt;/h2&gt;

&lt;p&gt;As you already know, we should never ever store naked passwords! So the idea is to hash it first, and only store that hash value.&lt;/p&gt;

&lt;p&gt;Basically, the password will be hashed using &lt;code&gt;brypt&lt;/code&gt; hashing function to produce a hash value.&lt;/p&gt;

&lt;p&gt;Besides the input password, &lt;code&gt;bcrypt&lt;/code&gt; requires a &lt;code&gt;cost&lt;/code&gt; parameter, which will decide the number of key expansion rounds or iterations of the algorithm.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bcrypt&lt;/code&gt; also generates a random &lt;code&gt;salt&lt;/code&gt; to be used in those iterations, which will help protect against the &lt;a href="https://en.wikipedia.org/wiki/Rainbow_table"&gt;rainbow table attack&lt;/a&gt;. Because of this random &lt;code&gt;salt&lt;/code&gt;, the algorithm will give you a completely different output hash value even if the same input password is provided.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cost&lt;/code&gt; and &lt;code&gt;salt&lt;/code&gt; will also be added to the hash to produce the final hash string, which looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6BmEVLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bv47cvavn5egi1fmjp72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6BmEVLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bv47cvavn5egi1fmjp72.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this hash string, there are 4 components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first part is the &lt;code&gt;hash algorithm identifier&lt;/code&gt;. &lt;code&gt;2A&lt;/code&gt; is the identifier of the &lt;code&gt;bcrypt&lt;/code&gt; algorithm.&lt;/li&gt;
&lt;li&gt;The second part is the &lt;code&gt;cost&lt;/code&gt;. In this case, the cost is &lt;code&gt;10&lt;/code&gt;, which means there will be &lt;code&gt;2^10 = 1024&lt;/code&gt; rounds of key expansion.&lt;/li&gt;
&lt;li&gt;The third part is the &lt;code&gt;salt&lt;/code&gt; of length &lt;code&gt;16 bytes&lt;/code&gt;, or &lt;code&gt;128 bits&lt;/code&gt;. It is encoded using &lt;code&gt;base64&lt;/code&gt; format, which will generate a string of &lt;code&gt;22&lt;/code&gt; characters.&lt;/li&gt;
&lt;li&gt;Finally, the last part is the &lt;code&gt;24 bytes&lt;/code&gt; hash value, encoded as &lt;code&gt;31&lt;/code&gt; characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these 4 parts are concatenated together into a single hash string, and it is the string that we will store in the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4hW1Hh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0q79j58zhd2totxlgabn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4hW1Hh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0q79j58zhd2totxlgabn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that’s the process of hashing users’ password!&lt;/p&gt;

&lt;p&gt;But when users login, how can we verify that the password that they entered is correct or not?&lt;/p&gt;

&lt;p&gt;Well, first we have to find the &lt;code&gt;hashed_password&lt;/code&gt; stored in the DB by &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we use the &lt;code&gt;cost&lt;/code&gt; and &lt;code&gt;salt&lt;/code&gt; of that &lt;code&gt;hashed_password&lt;/code&gt; as the arguments to hash the &lt;code&gt;naked_password&lt;/code&gt; users just entered with &lt;code&gt;bcrypt&lt;/code&gt;. The output of this will be another hash value.&lt;/p&gt;

&lt;p&gt;Then all we have to do is to compare the 2 hash values. If they’re the same, then the password is correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoHLvJ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9wk0fa5xai45ucuputp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoHLvJ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9wk0fa5xai45ucuputp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, now let’s see how to implement these logics in &lt;code&gt;Golang&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-functions-to-hash-and-compare-passwords" class="anchor"&gt;
  &lt;/a&gt;
  Implement functions to hash and compare passwords
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/techschoolguru/how-to-handle-db-errors-in-golang-correctly-11ek"&gt;previous lecture&lt;/a&gt;, we have generated the code to create a new user in the database. And &lt;code&gt;hashed_password&lt;/code&gt; is one of the input parameters of the &lt;code&gt;CreateUser()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;HashedPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"hashed_password"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Queries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryRowContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, in this &lt;code&gt;createRandomUser()&lt;/code&gt; function of the unit test in &lt;code&gt;db/sqlc/user_test.go&lt;/code&gt;, we’re using a simple &lt;code&gt;"secret"&lt;/code&gt; string for the &lt;code&gt;hash_password&lt;/code&gt; field, which doesn’t reflect the real correct values this field should hold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createRandomUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"secret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So today we’re gonna update it to use a real hash string.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hash-password-function" class="anchor"&gt;
  &lt;/a&gt;
  Hash password function
&lt;/h3&gt;

&lt;p&gt;First, let’s create a new file &lt;code&gt;password.go&lt;/code&gt; inside the &lt;code&gt;util&lt;/code&gt; package. In this file, I’m gonna define a new function: &lt;code&gt;HashPassword()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will take a &lt;code&gt;password&lt;/code&gt; string as input, and will return a &lt;code&gt;string&lt;/code&gt; or an &lt;code&gt;error&lt;/code&gt;. This function will compute the &lt;code&gt;bcrypt&lt;/code&gt; hash string of the input &lt;code&gt;password&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// HashPassword returns the bcrypt hash of the password&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultCost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to hash password: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this function, we call &lt;code&gt;bcrypt.GenerateFromPassword()&lt;/code&gt;. It requires 2 input parameters: the &lt;code&gt;password&lt;/code&gt; of type &lt;code&gt;[]byte&lt;/code&gt; slice, and a &lt;code&gt;cost&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we have to convert the input &lt;code&gt;password&lt;/code&gt; from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; slice. &lt;/p&gt;

&lt;p&gt;For &lt;code&gt;cost&lt;/code&gt;, I use the &lt;code&gt;bcrypt.DefaultCost&lt;/code&gt; value, which is &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The output of this function will be the &lt;code&gt;hashedPassword&lt;/code&gt; and an &lt;code&gt;error&lt;/code&gt;. If the &lt;code&gt;error&lt;/code&gt; is &lt;code&gt;not nil&lt;/code&gt;,  then we just return an empty hashed string, and wrap the &lt;code&gt;error&lt;/code&gt; with a message saying: &lt;code&gt;"failed to hash password"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, we convert the &lt;code&gt;hashedPassword&lt;/code&gt; from &lt;code&gt;[]byte&lt;/code&gt; slice to &lt;code&gt;string&lt;/code&gt;, and return it with a &lt;code&gt;nil&lt;/code&gt; error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compare-passwords-function" class="anchor"&gt;
  &lt;/a&gt;
  Compare passwords function
&lt;/h3&gt;

&lt;p&gt;Next, we will write another function to check if a password is correct or not: &lt;code&gt;CheckPassword()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function will take 2 input arguments: a &lt;code&gt;password&lt;/code&gt; to check, and the &lt;code&gt;hashedPassword&lt;/code&gt; to compare. It will return an &lt;code&gt;error&lt;/code&gt; as output.&lt;/p&gt;

&lt;p&gt;Basically, this function will check if the input &lt;code&gt;password&lt;/code&gt; is correct when comparing to the provided &lt;code&gt;hashedPassword&lt;/code&gt; or not.&lt;/p&gt;

&lt;p&gt;As the standard &lt;code&gt;bcrypt&lt;/code&gt; package has already implemented this feature, all we have to do is to call &lt;code&gt;bcrypt.CompareHashAndPassword()&lt;/code&gt; function, and pass in the &lt;code&gt;hashedPassword&lt;/code&gt; and naked &lt;code&gt;password&lt;/code&gt;, after converting them from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; slices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// CheckPassword checks if the provided password is correct or not&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompareHashAndPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that’s it. We’re done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-unit-test-for-hashpassword-and-checkpassword-functions" class="anchor"&gt;
  &lt;/a&gt;
  Write unit test for HashPassword and CheckPassword functions
&lt;/h2&gt;

&lt;p&gt;Now let’s write some unit tests to make sure these 2 functions work as expected.&lt;/p&gt;

&lt;p&gt;I’m gonna create a new file &lt;code&gt;password_test.go&lt;/code&gt; inside the &lt;code&gt;util&lt;/code&gt; package. Then let’s define function &lt;code&gt;TestPassword()&lt;/code&gt; with a &lt;code&gt;testing.T&lt;/code&gt; object as input.&lt;/p&gt;

&lt;p&gt;First I will generate a new &lt;code&gt;password&lt;/code&gt; as a random string of &lt;code&gt;6&lt;/code&gt; characters. Then we get the &lt;code&gt;hashedPassword&lt;/code&gt; by calling &lt;code&gt;HashPassword()&lt;/code&gt; function with the generated password.&lt;/p&gt;

&lt;p&gt;We require no errors to be returned, and the &lt;code&gt;hashedPassword&lt;/code&gt; string should be not empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next we call &lt;code&gt;CheckPassword()&lt;/code&gt; function with the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;hashedPassword&lt;/code&gt; parameters.&lt;/p&gt;

&lt;p&gt;As this is the same &lt;code&gt;password&lt;/code&gt; we used to create the &lt;code&gt;hashedPassword&lt;/code&gt;, this function should return no errors, which means correct password.&lt;/p&gt;

&lt;p&gt;Let’s also test the case where an &lt;code&gt;incorrect password&lt;/code&gt; is provided!&lt;/p&gt;

&lt;p&gt;I will generate a new random &lt;code&gt;wrongPassword&lt;/code&gt; string, and call &lt;code&gt;CheckPassword()&lt;/code&gt; again with this &lt;code&gt;wrongPassword&lt;/code&gt; argument. This time, we expect an &lt;code&gt;error&lt;/code&gt; to be returned, since the provided password is incorrect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrongPassword&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrongPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrMismatchedHashAndPassword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To be exact, we use &lt;code&gt;require.EqualError()&lt;/code&gt; to compare the output error. It must be equal to the &lt;code&gt;bcrypt.ErrMismatchedHashAndPassword&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;OK, the test is now completed. Let’s run it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4786bXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/90uzylad79bl73vlglxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4786bXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/90uzylad79bl73vlglxb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It passed! Awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-existing-code-to-use-hashpassword-function" class="anchor"&gt;
  &lt;/a&gt;
  Update the existing code to use HashPassword function
&lt;/h2&gt;

&lt;p&gt;So the &lt;code&gt;HashPassword()&lt;/code&gt; function is working properly. Let’s go back to the &lt;code&gt;user_test.go&lt;/code&gt; file and use it in the &lt;code&gt;createRandomUser()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here I’m gonna create a new &lt;code&gt;hashedPassword&lt;/code&gt; value by calling &lt;code&gt;util.HashPassword()&lt;/code&gt; function with a random string of &lt;code&gt;6&lt;/code&gt; characters.&lt;/p&gt;

&lt;p&gt;We require no errors, then change the &lt;code&gt;"secret"&lt;/code&gt; constant to &lt;code&gt;hashedPassword&lt;/code&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createRandomUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright, let’s run the whole &lt;code&gt;db&lt;/code&gt; package test!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yc_BzGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n7dqkprr39m8iz68yr14.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yc_BzGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n7dqkprr39m8iz68yr14.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All passed!&lt;/p&gt;

&lt;p&gt;Now if we open the database in Table Plus and check the users table, we can see that the &lt;code&gt;hashed_password&lt;/code&gt; column is now containing the correct &lt;code&gt;bcrypt&lt;/code&gt; hashed string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfbsTCgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ogkirl4c5og31kp2j3rg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfbsTCgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ogkirl4c5og31kp2j3rg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks just like the example that I shown you in the beginning of this video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-all-hashed-passwords-are-different" class="anchor"&gt;
  &lt;/a&gt;
  Make sure all hashed passwords are different
&lt;/h2&gt;

&lt;p&gt;One thing we want to make sure of is: if the &lt;code&gt;same password&lt;/code&gt; is hashed twice, &lt;code&gt;2 different hash values&lt;/code&gt; should be produced.&lt;/p&gt;

&lt;p&gt;So let’s go back to the &lt;code&gt;TestPassword()&lt;/code&gt; function. I’m gonna change the &lt;code&gt;hashPassword&lt;/code&gt; variable’s name to &lt;code&gt;hashedPassword1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then let’s duplicate the hash password code block, and change the variable’s name to &lt;code&gt;hashedPassword2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrongPassword&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrongPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrMismatchedHashAndPassword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What we expect to see is: the value of &lt;code&gt;hashedPassword2&lt;/code&gt; should be different from the value of &lt;code&gt;hashedPassword1&lt;/code&gt;. So here I use &lt;code&gt;require.NotEqual()&lt;/code&gt; to check this condition.&lt;/p&gt;

&lt;p&gt;OK, let’s rerun the test.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InO7JEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/evnlhng02niihnityz7y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InO7JEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/evnlhng02niihnityz7y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It passed! Excellent!&lt;/p&gt;

&lt;p&gt;To really understand why it passed, we have to open the implementation of the &lt;code&gt;bcrypt.GenerateFromPassword()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MinCost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultCost&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;majorVersion&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minorVersion&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;checkCost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;

    &lt;span class="n"&gt;unencodedSalt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxSaltSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unencodedSalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unencodedSalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see here, in the &lt;code&gt;newFromPassword()&lt;/code&gt; function, a &lt;code&gt;random salt&lt;/code&gt; value is generated, and it is used in the &lt;code&gt;bcrypt()&lt;/code&gt; function to generate the hash.&lt;/p&gt;

&lt;p&gt;So now you know, because of this &lt;code&gt;random salt&lt;/code&gt;, the generated hash value will be different everytime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-the-create-user-api" class="anchor"&gt;
  &lt;/a&gt;
  Implement the create user API
&lt;/h2&gt;

&lt;p&gt;Next step, I’m gonna use the &lt;code&gt;HashPassword()&lt;/code&gt; function that we’ve written to implement the &lt;code&gt;create user API&lt;/code&gt; for our simple bank.&lt;/p&gt;

&lt;p&gt;Let’s create a new file &lt;code&gt;user.go&lt;/code&gt; inside the &lt;code&gt;api&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;This API will be very much alike the &lt;code&gt;create account API&lt;/code&gt; that we’ve &lt;a href="https://dev.to/techschoolguru/implement-restful-http-api-in-go-using-gin-4ap1"&gt;implemented before&lt;/a&gt;, so I’m just gonna copy it from the &lt;code&gt;api/account.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then let’s change this &lt;code&gt;struct&lt;/code&gt; to &lt;code&gt;createUserRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first parameter is &lt;code&gt;username&lt;/code&gt;. It is a &lt;code&gt;required&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;And let’s say we don’t allow it to contain any kind of special characters, so here I’m gonna use the &lt;code&gt;alphanum&lt;/code&gt; tag, which is already provided by the &lt;a href="https://github.com/go-playground/validator"&gt;validator package&lt;/a&gt;. It basically means that this field should contain ASCII alphanumeric characters only.&lt;/p&gt;

&lt;p&gt;The second field is &lt;code&gt;password&lt;/code&gt;. It is also &lt;code&gt;required&lt;/code&gt;. And normally we don’t want the password to be too short because it would be very easy to hack. So here let’s use the &lt;code&gt;min&lt;/code&gt; tag to say that the length of the password should be at least &lt;code&gt;6&lt;/code&gt; characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name" binding:"required"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email" binding:"required,email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The third field is &lt;code&gt;full_name&lt;/code&gt; of the user. There’s no specific requirements for this field, except that it is &lt;code&gt;required&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, the last field is &lt;code&gt;email&lt;/code&gt;, which is very important because it would be the main communication channel between the users and our system. We can use the &lt;code&gt;email&lt;/code&gt; tag provided by validator package to make sure that the value of this field is a correct email address.&lt;/p&gt;

&lt;p&gt;There are many other useful built-in tags that were already implemented by the validator package, you can check them out in its &lt;a href="https://pkg.go.dev/github.com/go-playground/validator/v10"&gt;documentation&lt;/a&gt; or &lt;a href="https://github.com/go-playground/validator"&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s go back to the code to complete this &lt;code&gt;createUser()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we use the &lt;code&gt;ctx.ShouldBindJSON()&lt;/code&gt; function to bind the input parameters from the &lt;code&gt;context&lt;/code&gt; into the &lt;code&gt;createUserRequest&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If any of the parameters are invalid, we just return &lt;code&gt;400 Bad Request&lt;/code&gt; status to the client. Otherwise, we will use them build the &lt;code&gt;db.CreateUserParams&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;There are 4 fields that need to be set: &lt;code&gt;Username&lt;/code&gt;, &lt;code&gt;HashedPassword&lt;/code&gt;, &lt;code&gt;Fullname&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So first, we compute the &lt;code&gt;hashedPassword&lt;/code&gt; by calling &lt;code&gt;util.HashPassword()&lt;/code&gt; function and pass in the input &lt;code&gt;request.Password&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If this function returns a &lt;code&gt;not nil&lt;/code&gt; error, then we just return a status &lt;code&gt;500 Internal Server Error&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;Else, we will build the &lt;code&gt;CreateUserParams&lt;/code&gt; object, where &lt;code&gt;Username&lt;/code&gt; is &lt;code&gt;request.Username&lt;/code&gt;, &lt;code&gt;HashedPassword&lt;/code&gt; is the computed &lt;code&gt;hashedPassword&lt;/code&gt;, &lt;code&gt;FullName&lt;/code&gt; is &lt;code&gt;request.FullName&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt; is &lt;code&gt;request.Email&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"unique_violation"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we call &lt;code&gt;server.store.CreateUser()&lt;/code&gt; with this input argument. It will return the created &lt;code&gt;user&lt;/code&gt; object or an &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just like in the &lt;code&gt;create account API&lt;/code&gt;, if error is not nil, then there are some possible scenarios. Keep in mind that, in the users table, we have 2 &lt;code&gt;unique constraints&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One is for the primary key &lt;code&gt;username&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;And the other is for the &lt;code&gt;email&lt;/code&gt; column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don’t have a &lt;code&gt;foreign key&lt;/code&gt; in this table, so here we only need to keep the &lt;code&gt;unique_violation&lt;/code&gt; code name to return status &lt;code&gt;403 Forbidden&lt;/code&gt; in case an user with the same &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;email&lt;/code&gt; already exists.&lt;/p&gt;

&lt;p&gt;Finally, if no errors occur, we just return status &lt;code&gt;200 OK&lt;/code&gt; with the created &lt;code&gt;user&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;OK, so now the &lt;code&gt;createUser&lt;/code&gt; API handler is completed. The last step we must do is to register a route for it in the &lt;code&gt;api/server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here, in this &lt;code&gt;NewServer()&lt;/code&gt; function, I’m gonna add a new route with method &lt;code&gt;POST&lt;/code&gt;. Its path should be &lt;code&gt;/users&lt;/code&gt;, and its handler function is &lt;code&gt;server.createUser&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// NewServer creates a new HTTP server and set up routing.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listAccounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/transfers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTransfer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that’s it! We’re done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-the-create-user-api" class="anchor"&gt;
  &lt;/a&gt;
  Test the create user API
&lt;/h2&gt;

&lt;p&gt;Let’s open the terminal and run &lt;code&gt;make server&lt;/code&gt; to start the server.&lt;/p&gt;

&lt;p&gt;I’m gonna use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to test the new API.&lt;/p&gt;

&lt;p&gt;Let’s select method &lt;code&gt;POST&lt;/code&gt; and fill in the URL: &lt;a href="http://localhost:8080/users"&gt;http://localhost:8080/users&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the request body, let’s choose &lt;code&gt;raw&lt;/code&gt;, and select &lt;code&gt;JSON&lt;/code&gt; format. I'm gonna use this JSON data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quang1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"full_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Quang Pham"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quang@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"secret"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, let’s send this request!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3aLSspZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rccwgqu8l97no4h434ce.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3aLSspZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rccwgqu8l97no4h434ce.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s successful! We’ve got the created &lt;code&gt;user&lt;/code&gt; object here with all correct field values.&lt;/p&gt;

&lt;p&gt;Let’s open the database to find this user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-lzqnPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la3mih4va95g4yhuh22d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-lzqnPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la3mih4va95g4yhuh22d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here it is! So our API is working well in the happy case.&lt;/p&gt;

&lt;p&gt;Now let’s see what happens if I send this same request the second time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7SQ4aU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6fj79ni1m81b7byp57r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7SQ4aU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6fj79ni1m81b7byp57r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got a &lt;code&gt;403 Forbidden&lt;/code&gt; status code. And the reason is that the &lt;code&gt;unique constraint&lt;/code&gt; for &lt;code&gt;username&lt;/code&gt; is violated.&lt;/p&gt;

&lt;p&gt;We’re trying to create another user with the same &lt;code&gt;username&lt;/code&gt;, So clearly it should not be allowed!&lt;/p&gt;

&lt;p&gt;Now let’s try changing the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang2&lt;/code&gt;, but keep the &lt;code&gt;email&lt;/code&gt; value the same, and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12Fsn0dA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/py1g4yoemdjjp5yhv8hd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12Fsn0dA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/py1g4yoemdjjp5yhv8hd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still got &lt;code&gt;403 Forbidden&lt;/code&gt;. But this time, the error is because the &lt;code&gt;email&lt;/code&gt; unique constraint is violated. Exactly what we expected!&lt;/p&gt;

&lt;p&gt;If I change the &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;quang2@email.com&lt;/code&gt;, then the request will be successful, since this email doesn’t belong to any other users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhHkhtAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfa81bkj7n61nvg0apkt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhHkhtAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfa81bkj7n61nvg0apkt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, now let’s try an invalid &lt;code&gt;username&lt;/code&gt;, such as &lt;code&gt;quang#2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg0ZKqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vbdkpyqzgv5gehy7opb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg0ZKqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vbdkpyqzgv5gehy7opb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, the status code is &lt;code&gt;400 Bad Request&lt;/code&gt;. And the reason is: the field validation for &lt;code&gt;username&lt;/code&gt; failed on the &lt;code&gt;alphanum&lt;/code&gt; tag. There’s a special character &lt;code&gt;#&lt;/code&gt; in the &lt;code&gt;username&lt;/code&gt;, which is not alphanumeric.&lt;/p&gt;

&lt;p&gt;Next, let’s try an invalid email. I’m gonna change the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang3&lt;/code&gt;, and &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;quang3email.com&lt;/code&gt;, without the &lt;code&gt;@&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odcdFgoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/143icuv62eb39ofmpj8n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odcdFgoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/143icuv62eb39ofmpj8n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got &lt;code&gt;400 Bad Request&lt;/code&gt; status again. And the error is: field validation for &lt;code&gt;email&lt;/code&gt; failed on the &lt;code&gt;email&lt;/code&gt; tag, which is exactly what we want.&lt;/p&gt;

&lt;p&gt;OK now let’s fix the &lt;code&gt;email&lt;/code&gt; address, and change the &lt;code&gt;password&lt;/code&gt; to a very short value, such as &lt;code&gt;"123"&lt;/code&gt;. Then send the request one more time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyWCrhne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktclklly7jy3tnml757c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyWCrhne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktclklly7jy3tnml757c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, we’ve got an error because the &lt;code&gt;password&lt;/code&gt; field validation failed on the &lt;code&gt;min&lt;/code&gt; tag. It doesn’t satisfy the minimum length constraint of &lt;code&gt;6&lt;/code&gt; characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-should-not-expose-hashed-password" class="anchor"&gt;
  &lt;/a&gt;
  API should not expose hashed password
&lt;/h2&gt;

&lt;p&gt;Before we finish, there’s one more thing I want to tell you. Let’s fix the &lt;code&gt;password&lt;/code&gt; value and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urK3aiXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bebtbkl23o4fk7c88lel.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urK3aiXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bebtbkl23o4fk7c88lel.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it’s successful. But you can notice that the &lt;code&gt;hashed_password&lt;/code&gt; value is also returned, which doesn’t seem right, because the client will never need to use this value for anything.&lt;/p&gt;

&lt;p&gt;And it might raise some security concerns, as this piece of sensitive information is being transmitted in the public.&lt;/p&gt;

&lt;p&gt;It would be better to remove this field from the response body.&lt;/p&gt;

&lt;p&gt;To do that, I’m gonna declare a new &lt;code&gt;createUserResponse struct&lt;/code&gt; in the &lt;code&gt;api/user.go&lt;/code&gt; file. It will contain almost all fields of the &lt;code&gt;db.User&lt;/code&gt; struct, except for the &lt;code&gt;HashedPassword&lt;/code&gt; field that should be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then here, at the end of the &lt;code&gt;createUser()&lt;/code&gt; handler function, we build a new &lt;code&gt;createUserResponse&lt;/code&gt; object, where &lt;code&gt;Username&lt;/code&gt; is &lt;code&gt;user.Username&lt;/code&gt;, &lt;code&gt;FullName&lt;/code&gt; is &lt;code&gt;user.FullName&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt; is &lt;code&gt;user.Email&lt;/code&gt;, &lt;code&gt;PasswordChangedAt&lt;/code&gt; is &lt;code&gt;user.PasswordChangedAt&lt;/code&gt;, and &lt;code&gt;CreatedAt&lt;/code&gt; is &lt;code&gt;user.CreatedAt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"unique_violation"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we return the &lt;code&gt;response&lt;/code&gt; object instead of &lt;code&gt;user&lt;/code&gt;. And we’re done!&lt;/p&gt;

&lt;p&gt;Let’s restart the server. Then go back to Postman, update the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; to new values, and send the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W75U_na2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdmenmht3ipl9x0f19g2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W75U_na2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdmenmht3ipl9x0f19g2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s successful. And now there’s no &lt;code&gt;hashed_password&lt;/code&gt; field in the response body anymore. Perfect!&lt;/p&gt;

&lt;p&gt;So that brings us to the end of this lecture. I hope you have learned something useful.&lt;/p&gt;

&lt;p&gt;Thank you for reading, and see you in the next one!&lt;/p&gt;




&lt;p&gt;If you like the article, please subscribe to our &lt;a href="http://bit.ly/techschoolguru"&gt;Youtube channel&lt;/a&gt; and follow us on &lt;a href="https://twitter.com/techschoolguru"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.facebook.com/techschool.guru"&gt;Facebook&lt;/a&gt; for more tutorials in the future.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>security</category>
    </item>
  </channel>
</rss>
