<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Want to compress your pdf files ?</title>
      <author>Burak Can Kahraman</author>
      <pubDate>Tue, 25 May 2021 14:41:23 +0000</pubDate>
      <link>https://dev.to/burakcank/want-to-compress-your-pdf-files-5ff9</link>
      <guid>https://dev.to/burakcank/want-to-compress-your-pdf-files-5ff9</guid>
      <description>&lt;p&gt;Are you tired of scanning images and trying to shrink them under 25 mbs just so you can send them via email¬†? Look no further, I am here to save you from this trouble. (that kinda rhymed.)&lt;/p&gt;




&lt;p&gt;This basic shell script uses &lt;em&gt;ghostscript&lt;/em&gt; to compress your scanned pdfs significantly. Just yesterday I scanned 100 pages of documents and it was over 90 mbs. I searched for a way to compress them under 25 mbs and voila. Here I was with only 6 mbs of pdfs. &lt;em&gt;Much wow. Such compression.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt; we need it,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast.&lt;/li&gt;
&lt;li&gt;Ez.&lt;/li&gt;
&lt;li&gt;No need to go online. Especially no need to upload company top-secret documents to any website you see on the Internet.&lt;/li&gt;
&lt;li&gt;Possible huge compression without notable loss.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Command usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./shrinkpdf.sh in.pdf out.pdf&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dont-forget-to-install-ghostscript"&gt;
  &lt;/a&gt;
  Don't forget to install &lt;em&gt;ghostscript&lt;/em&gt;.
&lt;/h4&gt;




&lt;p&gt;If you are in a situation exactly like me where there are 100 pdf files under one folder that you want to compress altogether, a simple for loop will suffice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;infolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;outfolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"compressed_"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;infolder&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfolder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infolder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"./shrinkpdf.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this python script,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python shrink.py pdfs/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and all of your pdfs will be put under &lt;em&gt;compressed_pdfs/&lt;/em&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="http://www.alfredklomp.com/programming/shrinkpdf/"&gt;http://www.alfredklomp.com/programming/shrinkpdf/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the relevant details and more, inside. I humbly wanted to let you know such a useful tool exists.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>python</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Persisting Typed Objects with DataStore</title>
      <author>Layale Matta</author>
      <pubDate>Tue, 25 May 2021 14:28:22 +0000</pubDate>
      <link>https://dev.to/yalematta/persisting-typed-objects-with-datastore-apc</link>
      <guid>https://dev.to/yalematta/persisting-typed-objects-with-datastore-apc</guid>
      <description>&lt;p&gt;In a &lt;a href="https://dev.to/yalematta/datastore-is-the-new-sharedpreferences-8a9"&gt;previous post&lt;/a&gt; we have explored how to use &lt;strong&gt;Preferences DataStore&lt;/strong&gt; to migrate our &lt;strong&gt;SharedPreferences&lt;/strong&gt;. And in this post we will focus on &lt;strong&gt;Proto DataStore&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-proto-datastore-different"&gt;
  &lt;/a&gt;
  What makes &lt;strong&gt;Proto DataStore&lt;/strong&gt; different? ü§î
&lt;/h2&gt;

&lt;p&gt;While both &lt;strong&gt;Preferences&lt;/strong&gt; and &lt;strong&gt;Proto DataStore&lt;/strong&gt; allow saving data, they do this in different ways. One important feature is applied only when using &lt;strong&gt;Proto DataStore&lt;/strong&gt;, and it is &lt;strong&gt;Type Safety&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Proto DataStore&lt;/strong&gt; we don't have to use keys. Instead we define a schema using Protocol Buffers. And with Protocol Buffers we can persist &lt;strong&gt;strongly typed data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One of the downsides of &lt;strong&gt;SharedPreferences&lt;/strong&gt; and &lt;strong&gt;Preferences DataStore&lt;/strong&gt; is that there is no way to ensure that keys are accessed with the correct type. Using &lt;strong&gt;Proto DataStore&lt;/strong&gt;, we know what types are stored and we will just provide them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-protocol-buffers"&gt;
  &lt;/a&gt;
  What's Protocol Buffers? üîç
&lt;/h2&gt;

&lt;p&gt;Protocol Buffers were developed by Google for storing and interchanging all kinds of structured information. They are used for &lt;strong&gt;serializing structured data&lt;/strong&gt;. It is similar to XML and other similar data formats, but &lt;strong&gt;it's smaller, faster and simpler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you don't know what serialization is, it's the process of translating a data structure or object state into a format that can be stored, like for example, a file or a memory data buffer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-protocol-buffers-work"&gt;
  &lt;/a&gt;
  How Protocol Buffers work?üë∑üèª
&lt;/h3&gt;

&lt;p&gt;We need to define how we want our data to be structured once, and the compiler will generate the source code for us to easily read and write the structured data. &lt;/p&gt;

&lt;p&gt;That said, with &lt;strong&gt;Proto Datastore&lt;/strong&gt; we will serialize and save our custom data structure using Protocol Buffers and of course deserialize and read the values whenever we need to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-dive"&gt;
  &lt;/a&gt;
  Let's dive ü§ø
&lt;/h3&gt;

&lt;p&gt;In this simple &lt;a href="https://github.com/yalematta/datastore-demo"&gt;project&lt;/a&gt;, we are implementing the same &lt;em&gt;&lt;strong&gt;Remember Me&lt;/strong&gt;&lt;/em&gt; functionality as in the previous post. We are currently using &lt;strong&gt;SharedPreferences&lt;/strong&gt; to store this value and redirect the user to the Welcome screen once it's checked. We will migrate the code to use &lt;strong&gt;Proto DataStore&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To get your hands on the code, consider checking this &lt;a href="https://github.com/yalematta/datastore-demo"&gt;GitHub repo&lt;/a&gt;.&lt;br&gt;
The final code is located in the &lt;a href="https://github.com/yalematta/datastore-demo/tree/proto_datastore"&gt;&lt;em&gt;proto_datastore&lt;/em&gt;&lt;/a&gt; branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#define-protobuf-schema"&gt;
  &lt;/a&gt;
  Define Protobuf schema üè∑Ô∏è
&lt;/h2&gt;

&lt;p&gt;In order to use &lt;strong&gt;Proto Datastore&lt;/strong&gt; we will need to define our Protobuf schema in a new &lt;code&gt;.proto&lt;/code&gt; file. So instead of creating a model class in Kotlin, we will define it in a Protobuf schema instead. And there's a &lt;strong&gt;new syntax&lt;/strong&gt; that we need to follow when writing this schema.&lt;/p&gt;

&lt;p&gt;We will install a plugin in Android Studio called &lt;strong&gt;Protocol Buffer Editor&lt;/strong&gt; that will help us write the Proto file. Make sure to install it before creating your proto files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GcvCMxNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_plugin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GcvCMxNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_plugin.png"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once installed, we switch to our &lt;strong&gt;Project View&lt;/strong&gt; and under &lt;strong&gt;&lt;code&gt;app/src/main&lt;/code&gt;&lt;/strong&gt; we create a new directory called &lt;strong&gt;proto&lt;/strong&gt;. Inside this directory we create a new file &lt;strong&gt;&lt;code&gt;user_prefs.proto&lt;/code&gt;&lt;/strong&gt; where we define our Protocol Buffer schema as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"proto3"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;java_package&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"com.yalematta.datastore_demo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;java_multiple_files&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;int32&lt;/span&gt; &lt;span class="n"&gt;luckyNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me walk you through this syntax:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Syntax
&lt;/h3&gt;

&lt;p&gt;There are 2 versions for the Protobuff syntax: proto2 and proto3. You can check the &lt;a href="https://developers.google.com/protocol-buffers/docs/proto3"&gt;documention&lt;/a&gt; for more info regarding these two different versions. In our case, we are going to use &lt;strong&gt;proto3&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Options
&lt;/h3&gt;

&lt;p&gt;Then, we are going to write 2 options:&lt;br&gt;
First, our &lt;strong&gt;&lt;code&gt;java_package&lt;/code&gt;&lt;/strong&gt; name. We need it in order to tell our compiler where to generate our classes from this protocol buffer. &lt;br&gt;
The second option is &lt;strong&gt;&lt;code&gt;java_multiple_files&lt;/code&gt;&lt;/strong&gt;. We will set it to true and this means that we need to create a separate file for each top level &lt;strong&gt;message&lt;/strong&gt; object of this proto file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#message"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Message
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;message&lt;/strong&gt; keyword defines the data structure. And inside it, we define the members of this structure. As you may have noticed we have different primitive types  in this syntax. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQYzz8_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_types.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQYzz8_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yalematta.dev/assets/img/protobuf_types.png"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By taking a look at the &lt;a href="https://developers.google.com/protocol-buffers/docs/proto3"&gt;documentation&lt;/a&gt;, we can learn that: int32 in Java represents an Integer, int64 a Long and bool is a Boolean.&lt;/p&gt;

&lt;p&gt;We create an object &lt;strong&gt;UserPreferences&lt;/strong&gt; with 2 member fields: a bool, a string and an int32. Don't be confused when you see these 1, 2 and 3. These are not actual values but unique numbers to identify our fields in the &lt;em&gt;message binary format&lt;/em&gt; and they &lt;strong&gt;should not be changed&lt;/strong&gt; once our message object is in use.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies üîå
&lt;/h2&gt;

&lt;p&gt;Before we continue let's place this &lt;strong&gt;plugin&lt;/strong&gt; at the top of our build.gradle file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s2"&gt;"com.google.protobuf"&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s2"&gt;"0.8.12"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to add two dependencies, one for Protobuf and one for Proto DataStore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="c1"&gt;// proto dataStore&lt;/span&gt;
&lt;span class="n"&gt;implementation&lt;/span&gt;  &lt;span class="s2"&gt;"androidx.datastore:datastore:1.0.0-beta01"&lt;/span&gt;
&lt;span class="n"&gt;implementation&lt;/span&gt;  &lt;span class="s2"&gt;"com.google.protobuf:protobuf-javalite:3.10.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally at the end of our build.gradle file we configure Protobuf and we &lt;strong&gt;sync our project&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;protobuf&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;protoc&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;artifact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"com.google.protobuf:protoc:3.10.0"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Generates the java Protobuf-lite code for the Protobufs in this project. See&lt;/span&gt;
    &lt;span class="c1"&gt;// https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation&lt;/span&gt;
    &lt;span class="c1"&gt;// for more information.&lt;/span&gt;
    &lt;span class="n"&gt;generateProtoTasks&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builtins&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="s1"&gt;'lite'&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have added this plugin, we should be able to see the automatically generated files by this plugin from our &lt;strong&gt;&lt;code&gt;user_prefs.proto&lt;/code&gt;&lt;/strong&gt; file. &lt;/p&gt;

&lt;p&gt;Rebuild the project to see those files inside the java (generated) folder. &lt;/p&gt;

&lt;p&gt;We find a new &lt;strong&gt;UserPrefs&lt;/strong&gt; folder that represents our proto file,  and a &lt;strong&gt;UserPreferences&lt;/strong&gt; class that represents our message object. Inside it we have java code that implements some getters and setters for this UserPreferences message object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serializer"&gt;
  &lt;/a&gt;
  Serializer ‚Ü™Ô∏è
&lt;/h2&gt;

&lt;p&gt;To tell DataStore how to read and write the data type we defined in the proto file, we need to implement a Serializer. The Serializer defines also the default value to be returned if there's no data saved yet.&lt;/p&gt;

&lt;p&gt;Back in our project, we create a class called &lt;strong&gt;UserPreferencesSerializer&lt;/strong&gt; which extends Serializer. We implement its two methods readFrom and writeTo. In these methods we define how we want to read and write this object into our DataStore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesSerializer&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;readFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InputStream&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parseFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;InvalidProtocolBufferException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;CorruptionException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot read proto."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;writeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;OutputStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#datastore-repository"&gt;
  &lt;/a&gt;
  DataStore Repository üóÉÔ∏è
&lt;/h2&gt;

&lt;p&gt;Next we create our Repository which we call &lt;strong&gt;UserPreferencesRepository&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;){&lt;/span&gt;
    &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-from-datastore"&gt;
  &lt;/a&gt;
  Read from DataStore üìã
&lt;/h3&gt;

&lt;p&gt;We create a new variable called userPreferencesFlow of type Flow. We use our dataStore to read the data and catch exceptions if there is any and emit the default instance of UserPreferences in that case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesFlow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Flow&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="c1"&gt;// dataStore.data throws an IOException when an error is encountered when reading data&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Error reading sort order preferences."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-to-datastore"&gt;
  &lt;/a&gt;
  Write to DataStore üìù
&lt;/h3&gt;

&lt;p&gt;We create the suspend updateUsername function which will update one field from our UserPreferences member values. We will call &lt;strong&gt;&lt;code&gt;preference.toBuilder().&lt;/code&gt;&lt;/strong&gt; and we choose the setter method that we need from our generated class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;P.S: Don't forget to create a method to update each field.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-datastore"&gt;
  &lt;/a&gt;
  Clear DataStore üÜë
&lt;/h3&gt;

&lt;p&gt;To clear data, we can either clear the preferences all together or clear a specific preference by its method from our generated class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clearDataStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clearUsername&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toBuilder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;clearUsername&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#call-it-from-the-viewmodel"&gt;
  &lt;/a&gt;
  Call it from the ViewModel ü§ôüèº
&lt;/h2&gt;

&lt;p&gt;In our &lt;strong&gt;LoginViewModel&lt;/strong&gt;, we create a variable for our &lt;strong&gt;UserPreferences&lt;/strong&gt;, read its data from our DataStore as a Flow and then convert it to LiveData.&lt;/p&gt;

&lt;p&gt;Next we create a new function named &lt;strong&gt;saveUserPreferences&lt;/strong&gt; and we pass to it the values that we want to update. We call viewModel scope and run the following code inside a coroutine since our update functions in our Repository are using Kotlin Coroutines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesFlow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;asLiveData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveUserPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;viewModelScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dispatchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateRemember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateLuckyNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;clearUserPreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;viewModelScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dispatchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clearDataStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModelFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Factory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;isAssignableFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Suppress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UNCHECKED_CAST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unknown ViewModel class"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;LoginViewModelFactory&lt;/strong&gt; is a ViewModelProvider.Factory that is responsible to create our instance of &lt;strong&gt;LoginViewModel&lt;/strong&gt; later in our Activity. We will pass to it the &lt;strong&gt;DataStoreRepository&lt;/strong&gt; which is need in &lt;strong&gt;LoginViewModel&lt;/strong&gt;'s constructor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observe-it-in-the-activity"&gt;
  &lt;/a&gt;
  Observe it in the Activity üî¨
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-datastore"&gt;
  &lt;/a&gt;
  Create DataStore üóÑÔ∏è
&lt;/h3&gt;

&lt;p&gt;In our Activity, we first create our userPreferencesDataStore and we initialize it and pass to it a file name as well as our Serializer class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;DATA_STORE_FILE_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user_prefs.pb"&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;dataStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DATA_STORE_FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesSerializer&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#migrate-from-sharedpreferences"&gt;
  &lt;/a&gt;
  Migrate from SharedPreferences üì¶
&lt;/h3&gt;

&lt;p&gt;If we are migrating our existing data from the SharedPreferences, when creating our DataStore, we should add a migration based on the SharedPreferences name. &lt;/p&gt;

&lt;p&gt;And when creating the dataStore we need to update the DataStore builder and assign to the migrations parameter a new list that contains an instance of our SharedPreferencesMigration.&lt;/p&gt;

&lt;p&gt;Define the mapping logic from SharedPreferences to UserPreferences inside your SharedPreferencesMigration.&lt;/p&gt;

&lt;p&gt;DataStore will be able to migrate from SharedPreferences to DataStore automatically, for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;USER_PREFERENCES_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user_preferences"&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;DATA_STORE_FILE_NAME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user_prefs.pb"&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPreferences&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;dataStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DATA_STORE_FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserPreferencesSerializer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;produceMigrations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sharedPrefsMigration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sharedPrefsMigration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SharedPreferencesMigration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;USER_PREFERENCES_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;sharedPrefs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SharedPreferencesView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserPreferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// Define the mapping from SharedPreferences to UserPreferences&lt;/span&gt;
    &lt;span class="n"&gt;currentData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside our onCreate function, we initialize our ViewModel and we observe our fields' values, so that whenever this data changes we will update it in its corresponding text field. &lt;/p&gt;

&lt;p&gt;And whenever we click our login button, we store the value from our editText and checkBox field and update it in our DataStore using the saveUserPreferences function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityLoginBinding&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;rememberMe&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;luckyNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ActivityLoginBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;viewModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ViewModelProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;LoginViewModelFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserPreferencesRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userPreferencesStore&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LoginViewModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userPreferencesFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;rememberMe&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;
            &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;
            &lt;span class="n"&gt;luckyNumber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userPreferences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rememberMe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;WelcomeActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luckyNumber&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;isNotEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;luckyNumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toInt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;saveUserPreferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;WelcomeActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnCheckedChangeListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;compoundButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompoundButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;compoundButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isChecked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clearUserPreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways üí°
&lt;/h2&gt;

&lt;p&gt;Now that we migrated to Preferences DataStore let's recap! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DataStore&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;is a replacement for SharedPreferences addressing most of its downsides&lt;/li&gt;
&lt;li&gt;has a fully asynchronous API using Kotlin coroutines and Flow&lt;/li&gt;
&lt;li&gt;guarantees data consistency&lt;/li&gt;
&lt;li&gt;handles data migration&lt;/li&gt;
&lt;li&gt;handles data corruption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DataStore has 2 different implementations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/yalematta/datastore-is-the-new-sharedpreferences-8a9"&gt;&lt;strong&gt;Preferences DataStore&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stores and accesses data using keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Proto DataStore&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ensures Type Safety&lt;/li&gt;
&lt;li&gt;requires defining a schema using Protocol Buffers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#up-next-%E2%8F%AD"&gt;
  &lt;/a&gt;
  Up next ‚è≠
&lt;/h2&gt;

&lt;p&gt;If this post was of any help to you, or if you'd like me to write about any specific Android related topics, let me know! Drop me a DM on Twitter &lt;a href="https://twitter.com/yalematta"&gt;@yalematta&lt;/a&gt; ‚úåüèº&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>jetpack</category>
      <category>datastore</category>
    </item>
    <item>
      <title>Best Hosting for Developer (With Free Trial)</title>
      <author>GoOnlineTools</author>
      <pubDate>Tue, 25 May 2021 14:24:58 +0000</pubDate>
      <link>https://dev.to/goonlinetools/best-hosting-for-developer-with-free-trial-di7</link>
      <guid>https://dev.to/goonlinetools/best-hosting-for-developer-with-free-trial-di7</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;If you‚Äôre a web developer, you need a web hosting provider that offers the cheapest hosting plan, best hosting features, and as well as excellent support and full backend access.&lt;/p&gt;

&lt;p&gt;I recommend 4 web hosting company that can serve you faster and reliably each time so that your website visitors can have a great experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cloudways-3-days-free"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bit.ly/3flm4CY"&gt;Cloudways&lt;/a&gt; - 3 Days Free
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3_n5_b7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0xqzfpfye4kyl7bnn1j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3_n5_b7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0xqzfpfye4kyl7bnn1j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloudways is a managed hosting provider that emphasizes performance and simplicity. From the simple server and application launch to the ongoing server maintenance, Cloudways takes away all the hassles of server management so that you can continue to focus on growing your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-linode-100-free-credit"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bit.ly/2Tj1eMc"&gt;Linode&lt;/a&gt; - 100$ Free Credit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjqbfpjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3w2q6qbm0nimcfmcur8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjqbfpjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3w2q6qbm0nimcfmcur8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linode is a cloud hosting provider that focuses on providing Linux powered virtual machines to support a wide range of applications. Given its roots, many experts do not see it as a beginner-friendly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-digitalocean-100-free-credit"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://bit.ly/3caXNOn"&gt;DigitalOcean&lt;/a&gt; - 100$ Free Credit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnHxYmfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1sdwyqk1cflaf1ejjgp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnHxYmfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1sdwyqk1cflaf1ejjgp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DigitalOcean is a cloud infrastructure provider that provides cloud computing services to business entities. It is used to scale by deploying DigitalOcean applications that run parallel across multiple cloud servers without compromising performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-vultr-100-free-credit"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://bit.ly/2QQ6EgJ"&gt;Vultr&lt;/a&gt; - 100$ Free Credit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PRcCBU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43vw8jbo6y3kt0caw1nz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PRcCBU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43vw8jbo6y3kt0caw1nz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vultr provides high-performance SSD cloud servers that boast a global footprint. It aims to create the most reliable and efficient service for launching a blazing fast SSD cloud server.&lt;/p&gt;

&lt;p&gt;I tried these 4 hosting presonally for my sites and every hosting perform well but cloud hosting provider doesn't provide contact support only for server, no extra support.&lt;/p&gt;

&lt;p&gt;If you want good contact support and security in cloud hosting then i recommend &lt;a href="https://bit.ly/3flm4CY"&gt;Cloudways&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you manage complete server and server security from your own then you can go with any hosting listed above but i recommend &lt;a href="https://bit.ly/2Tj1eMc"&gt;Linode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you will choose right hosting :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 10 (+/-) Linux skills for landing a Linux job</title>
      <author>Denislav Gavrilov üë®‚ÄçüöÄü§ñü§∑‚Äç‚ôÇÔ∏è</author>
      <pubDate>Tue, 25 May 2021 14:07:41 +0000</pubDate>
      <link>https://dev.to/asciiden/top-10-linux-skills-for-landing-a-linux-job-1i5m</link>
      <guid>https://dev.to/asciiden/top-10-linux-skills-for-landing-a-linux-job-1i5m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Hey now, you have probably went through numerous job-hunting websites and you memorized all the buzzwords (Junior Sysadmin; Junior Site Reliability Engineer; NOC Engineer; System support; etc.) that can get you in IT with zero experience, or even zero education. Well, let me tell you - you are on the right track! However, there are some insights that a lot of you don't know as you haven't got a real Linux job. Well now, except you are on the right track, you are on the post, as well!&lt;/p&gt;

&lt;p&gt;I am going to note down &amp;amp; explain the top 10 Linux skills (in the opinion of a person who had a Linux job as a first) that you should have before rushing into the interview.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top-10-linux-skills"&gt;
  &lt;/a&gt;
  TOP 10 (+/-) Linux skills
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Linux skills? But I know a lot of commands already!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is not up to the commands you know but the ability to imply them at the right time and know when &amp;amp; what to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-logs"&gt;
  &lt;/a&gt;
  Reading logs
&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;always&lt;/strong&gt; read logs. Consider logging like the conversation you have with your friend just after you had a fight.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-Hey man, I am not really sure what happened there.&lt;/p&gt;

&lt;p&gt;-Yeah, there was an error in our communication...&lt;/p&gt;

&lt;p&gt;-What do you mean? Could you be a little bit more specific?&lt;/p&gt;

&lt;p&gt;-Well, when you told me to give you reggs from the fridge I was super confused what does reggs mean.&lt;/p&gt;

&lt;p&gt;-Yeah, sorry man, I meant eggs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now lets turn this into a 'Linux logging conversation'&lt;/p&gt;

&lt;p&gt;Case:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You type your Nginx server block but you miss-spell 'root' as 'rot'. You type &lt;code&gt;nginx -t&lt;/code&gt; and the test fails. However, you don't pay much attention to the test and do a &lt;code&gt;/etc/init.d/nginx reload&lt;/code&gt; to turn your new website visible. Nginx crashes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Oh sh*t, my Nginx crashed. Better check the web server (Nginx) logs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh root@server_ip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;less /var/log/nginx/error.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SHIFT+G&lt;/code&gt; (this takes you to the end of the file when using the &lt;code&gt;less&lt;/code&gt; command)&lt;/li&gt;
&lt;li&gt;You will see a line with the following context:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;2021/05/25 12:28:34 [emerg] 28044#28044: unknown directive "rot" in /etc/nginx/sites-enabled/your.website:3&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Oh, I typed 'rot' instead of 'root' in my server block. Alrighty, lets fix that!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano /etc/nginx/sites-available/your.website&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change 'rot' to 'root'&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nginx -t&lt;/code&gt; - all is fine&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/etc/init.d/nginx reload&lt;/code&gt; - all is fine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a simple example of how the logs can help you. You should always check the logs for each application that you are having a problem with.&lt;/p&gt;

&lt;p&gt;Here comes the investigation skills that are of high importance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#investigation-skills"&gt;
  &lt;/a&gt;
  Investigation skills
&lt;/h2&gt;

&lt;p&gt;Okay, you know you have to check logs. However, there is something additional you probably didn't consider. When your application crashes, there is a huge possibility it is going to rely on many different technologies. That is why you should have an arsenal of plans when something crashes. What I usually do is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Note down the founding error&lt;/li&gt;
&lt;li&gt;Google the error&lt;/li&gt;
&lt;li&gt;Check /var/log/syslog&lt;/li&gt;
&lt;li&gt;Check /var/log/nginx/error.log (if using Nginx)&lt;/li&gt;
&lt;li&gt;Make a connection between the Google results + syslog + nginx error log&lt;/li&gt;
&lt;li&gt;Google if nginx/syslog are related to the founding error&lt;/li&gt;
&lt;li&gt;Choose a resolution from Google &amp;amp; start working on it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, the investigation skills you need are the curiosity to explore in detail. Every small error you bump into, GOOGLE IT!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-commands"&gt;
  &lt;/a&gt;
  Understanding the commands
&lt;/h2&gt;

&lt;p&gt;When you are working with Linux, you will work mainly (if not ONLY) with commands through the terminal. Don't let that scare you but don't be having too much trust in yourself as well.&lt;/p&gt;

&lt;p&gt;When typing commands, always google when you are not sure. There are many flags to the commands that do a lot of different stuff and some of them can hurt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-system-resources"&gt;
  &lt;/a&gt;
  Checking system resources
&lt;/h2&gt;

&lt;p&gt;Linux is just like any other operating system. It has system resources and these resources can impact the performance of our system. Here are some commands that can help you understand what is happening with your server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;top&lt;/code&gt; - This command is the task manager of Linux.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;free -h&lt;/code&gt; - This command is showing how much memory you have and how much of it is being used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;df -h&lt;/code&gt; - This command is showing you how much storage you have left throughout your directories.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;du -sh&lt;/code&gt; - This command is showing you how much memory your files / directories are taking. An example of using this command is &lt;code&gt;du -sh /var/log/*&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#check-the-history"&gt;
  &lt;/a&gt;
  Check the history
&lt;/h2&gt;

&lt;p&gt;This is a super short tip - always check the history because somebody before you could have already had the same issue you had. Linux history is a history of the commands used by the user you are logged in with. You simply type the &lt;code&gt;history&lt;/code&gt; command and you will get an output with line numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHq5QsPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qirt5yh5hfrdb5mr54cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHq5QsPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qirt5yh5hfrdb5mr54cq.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-basic-directory-architecture"&gt;
  &lt;/a&gt;
  Understanding basic directory architecture
&lt;/h2&gt;

&lt;p&gt;In Linux, there are some main directories which are driving the operating system to function. If I try to explain them in a better way than somebody with years of experience, I would probably fail to deliver you the quality of content you need. For this sole purpose, I am teleporting you to the realm of &lt;a href="https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/"&gt;How To Geek - The Linux Directory Structure, Explained&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-skills"&gt;
  &lt;/a&gt;
  Bonus skills
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#scripting-skills"&gt;
  &lt;/a&gt;
  Scripting skills
&lt;/h2&gt;

&lt;p&gt;It is always great to have more weapons in your arsenal. Scripting skills can be of high importance when you have a recurring task that you could automate. I personally only know how to script in &lt;a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;BASH&lt;/a&gt;. And it has been enough for me for 2 years already. However, if you want to step-up your game, you could look at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.perl.org/"&gt;PERL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/"&gt;GOLANG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mostused-linux-stack"&gt;
  &lt;/a&gt;
  Most-used Linux Stack
&lt;/h2&gt;

&lt;p&gt;A Linux stack is a stack of technologies working together to deliver a solution. The most used Linux stack is the LAMP stack. it consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linux.org/"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.php.net/"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first letter of each of these technologies brings us the LAMP abbreviation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h2&gt;

&lt;p&gt;When working with Linux, mostly when you are a systems administrator, you will have a monitoring system in place to keep track of all the systems you are supporting. Some of the most used monitoring software suits are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://newrelic.com/"&gt;Nagios&lt;/a&gt; (my personal favorite as I started with it)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zabbix.com/"&gt;Zabbix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://newrelic.com/"&gt;New Relic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#know-the-distribution-differences"&gt;
  &lt;/a&gt;
  Know the distribution differences
&lt;/h2&gt;

&lt;p&gt;Linux has many distributions with &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;RHEL&lt;/a&gt; being the most popular ones. Each different distribution has different spelling of some commands and has its own way of working. The best way to understand these differences is to install them separately on a VM and poke around.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In conclusion, the Linux world is a vast and open ocean where you can dive deeper and deeper each day. Every time you find yourself understanding something, there is more information that comes to light. I hope this post lighted up your interest a little &amp;amp; made you consider raising the bar of your Linux skills.&lt;/p&gt;

&lt;p&gt;I wish you all the best &amp;amp; happy exploring!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h1&gt;

&lt;p&gt;I am Dennis, going by ASCIIden online and I am a junior DevOps engineer. However, I don't like the title of 'DevOps' to identify myself with. I rather consider myself a futurist &amp;amp; huge tech enthusiast.&lt;/p&gt;

&lt;p&gt;I am doing IT for about 2 years now and I am learning so much I could not express it with words. I am striving to become a helping hand to all juniors in the industry and I am doing my best to provide good and understanding content for you all to enjoy.&lt;/p&gt;

&lt;p&gt;If you want to hit me up for a project or just want to say hi, feel free to do it on any of my social media which you can find in my &lt;a href="https://twitter.com/asciiden"&gt;Twitter profile&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>systems</category>
    </item>
    <item>
      <title>Coding Goals for 2021: the Reasons to Learn Java</title>
      <author>Alex</author>
      <pubDate>Tue, 25 May 2021 13:59:57 +0000</pubDate>
      <link>https://dev.to/alexxxismyname/coding-goals-for-2021-the-reasons-to-learn-java-5b0p</link>
      <guid>https://dev.to/alexxxismyname/coding-goals-for-2021-the-reasons-to-learn-java-5b0p</guid>
      <description>&lt;p&gt;In terms of a pandemic situation, many large companies were forced to take all their processes online. So, they need someone who can build an enterprise-level server-side application, create website content, and keep up maintaining it promptly. In this case, many projects choose Java to build the apps and, consequently, need as many Java programmers as possible to implement that. So, if you still ask yourself ‚ÄúWhy should I learn Java‚Äù, this is supposed to be an answer.&lt;/p&gt;

&lt;p&gt;But, this is not the only reason, and I will explain why becoming a Java developer in 2021 is a fresh start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-to-become-a-programmer-in-2021"&gt;
  &lt;/a&gt;
  Why Choose to Become a Programmer in 2021
&lt;/h2&gt;

&lt;p&gt;Right before considering the other reasons for starting to master Java, it makes sense, to begin with fundamentals and discover what‚Äôs so good about becoming a programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stable-industry"&gt;
  &lt;/a&gt;
  Stable Industry
&lt;/h3&gt;

&lt;p&gt;Software engineering is a fairly stable industry. Even the study of the Bureau of Labor Statistics showed that the &lt;a href="https://www.forbes.com/sites/stuartanderson/2020/06/11/unemployment-rate-for-computer-occupations-fell-in-may/?sh=2e86cf3b16ad"&gt;percentage of unemployed the workforce&lt;/a&gt; in computer and information technology occupations not only remained consistently low but also fell by May 2020. The percentage of unemployed individuals in all other occupations, in its turn, increased up to 13.5%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dfmoXJjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahvjvxlmkm62ny62aqs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfmoXJjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahvjvxlmkm62ny62aqs4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regardless of industry stability, the technology is still evolving fast, and you won‚Äôt be likely to use the same skills you are acquiring today in five or ten years. But this should not prevent you from learning to program. The companies are interested in the constant development of their employees and usually support them in adopting up-to-date technologies, tools, and concepts. So, you can keep up polishing your skills and remain an in-demand programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerable-income"&gt;
  &lt;/a&gt;
  Considerable Income
&lt;/h3&gt;

&lt;p&gt;I won‚Äôt reinvent the wheel if I say that programmers can make considerably more than the specialists of the other mass career choices. The skills of software engineers are wanted by many companies, and the next list of salaries by &lt;a href="https://www.glassdoor.com/index.htm"&gt;Glassdoor&lt;/a&gt; clearly illustrates that statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java developer ‚Äî $79,137 / yr&lt;/li&gt;
&lt;li&gt;Python developer ‚Äî $76,526 / yr&lt;/li&gt;
&lt;li&gt;Go developer ‚Äî $75,715 / yr&lt;/li&gt;
&lt;li&gt;Ruby developer ‚Äî $75,715 / yr&lt;/li&gt;
&lt;li&gt;C Net developer ‚Äî $75,715 / yr&lt;/li&gt;
&lt;li&gt;Swift developer ‚Äî $75,715 / yr&lt;/li&gt;
&lt;li&gt;C++ developer ‚Äî $76,526 / yr&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#positive-work-culture"&gt;
  &lt;/a&gt;
  Positive Work Culture
&lt;/h3&gt;

&lt;p&gt;There is a black sheep in every flock, and annoying people are everywhere. But, the chance to meet such coworkers and face discrimination in the IT world is still miserable. Apart from that, there is a great variety of job offers on the market, and the rumors spread promptly among local programmers. So, you can easily avoid bad companies, which is hard to do in many other spheres.&lt;/p&gt;

&lt;p&gt;Besides, more and more software companies strive to adopt effective practices that help them care about the level of productivity and well-being of their employers. Feedback sessions, one-to-one meetings, retrospectives are just a small part of the adopted processes that allow managers to stay in touch with a team.&lt;/p&gt;

&lt;p&gt;Many companies hiring Java devs are telecommuter-friendly, they allow flexible working schedules and remote work, so you can accomplish your professional duties from anywhere in the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-to-learn-java-in-2021"&gt;
  &lt;/a&gt;
  Reasons to Learn Java in 2021
&lt;/h2&gt;

&lt;p&gt;Now you know that becoming a programmer in 2021 is a good prospect for your future career. Let‚Äôs move further and talk about why Java is worth selecting for the coming projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#java-remains-a-leading-programming-language"&gt;
  &lt;/a&gt;
  Java Remains a Leading Programming Language
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.tiobe.com/tiobe-index/"&gt;TIOBE Index&lt;/a&gt; has recently come up with new results for December and Java is now the world‚Äôs second most popular programming language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fszxe8U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjf8pedchvkfzi8lsgv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fszxe8U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjf8pedchvkfzi8lsgv6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test conducted on Devskiller made Java a winner, while SQL and JavaScript took second and third place, respectively. The reason for being so popular lies in the constant development of Java, which leads to new, up-to-date features. The latter makes the development process easier and more optimized and hence significantly helps developers.&lt;/p&gt;

&lt;p&gt;Among other things, Java is known for its wide application. It is used literally everywhere, be it desktops, mobile platforms, smart cars, and houses, etc. At the moment, the so-called ‚ÄúJava ecosystem‚Äù contains about 8 million Java coders all over the world. Because of an extensive pool of experienced specialists, many companies choose to use this language for their projects. This is especially true for large organizations that have demand for building enterprise-level server-side apps, and Java developers are just perfect for that role.&lt;/p&gt;

&lt;p&gt;Java remains popular, despite the fact more and more new technologies pop up, and given the stats, this tendency is not going to change any time soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowing-java-opens-plenty-of-career-doors"&gt;
  &lt;/a&gt;
  Knowing Java Opens Plenty of Career Doors
&lt;/h3&gt;

&lt;p&gt;When it comes to the employment rate, Java confidently beats many other programming languages. As I‚Äôve already mentioned, it is frequently used in big companies launching big projects and requiring a lot of specialists to join. There is also enough work and money that allow big companies to hire Juniors, so the beginners can land a job right after mastering Java fundamentals.&lt;/p&gt;

&lt;p&gt;These and other projects usually require the following skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring (incl. Spring Boot) and Hibernate&lt;/li&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;li&gt;Android development&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Servlets&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;JSON/Jackson&lt;/li&gt;
&lt;li&gt;Java API for RESTful Web Services&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Design and architecture patterns&lt;/li&gt;
&lt;li&gt;Build automation tools (Maven, Gradle)&lt;/li&gt;
&lt;li&gt;SQL databases, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whereas the most popular areas of Java application are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enterprise-level server-side applications&lt;/li&gt;
&lt;li&gt;Mobile app development&lt;/li&gt;
&lt;li&gt;Reactive programming&lt;/li&gt;
&lt;li&gt;Work with Big Data&lt;/li&gt;
&lt;li&gt;IoT&lt;/li&gt;
&lt;li&gt;Finance&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Gaming&lt;/li&gt;
&lt;li&gt;Retail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mentioned wide Java application allows developers to grow in their career and count on upward mobility. The specialists, working on large projects, often learn other languages to be able to do some part of tasks in Java, and the rest ‚Äî in another language if needed. Java developers are not afraid of being fired as they are allowed to learn a new language while working (after Java, almost all languages are easy and fast to learn). These and other reasons make the coders satisfied with their working conditions so that they don‚Äôt often switch to another profession.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#online-courses-are-for-every-taste-and-budget"&gt;
  &lt;/a&gt;
  Online Courses Are For Every Taste and Budget
&lt;/h3&gt;

&lt;p&gt;Now that you‚Äôve started your programming journey, it‚Äôs high time to choose the right learning course. Fortunately, the web is full of many resources that offer interactive classes and challenges. Next, you will find a few I can highly recommend.&lt;/p&gt;

&lt;p&gt;So, let‚Äôs get to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codegym"&gt;
  &lt;/a&gt;
  CodeGym
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5FZJuETP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y09t5rsec7nmcapdoy1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5FZJuETP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y09t5rsec7nmcapdoy1a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codegym.cc/"&gt;CodeGym&lt;/a&gt; is known for its practice-based approach to learning Java. The course contains over 1200 tasks to complete, ensures instant verification by the virtual mentor, allows building your own version of classic video games in the Game section, and offers to join the community.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codewars"&gt;
  &lt;/a&gt;
  Codewars
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvYUC9zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud8x61uznprnuvu3tfok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvYUC9zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud8x61uznprnuvu3tfok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt; is another online learning platform that allows mastering over 20 programming languages, including Java. You will be offered to train with your peers on challenges called kata, as well as create your own kata and challenge your fellow-developers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cyberdojo"&gt;
  &lt;/a&gt;
  Cyber-Dojo
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaxlhRFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co5uvsunc34ucjfr4jdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaxlhRFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co5uvsunc34ucjfr4jdg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider &lt;a href="https://cyber-dojo.org/creator/home"&gt;Cyber-Dojo&lt;/a&gt; if you are in search of an effective gamified source to improve your skills in programming. The platform offers multiple tasks to complete, and each comes with a detailed description and examples of how the result should look.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codechef"&gt;
  &lt;/a&gt;
  CodeChef
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVGQmN3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/240pujpldvtdj1tp96n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVGQmN3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/240pujpldvtdj1tp96n0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other than teaching you a programming language, &lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt; makes it possible for you to hone the skills by participating in coding contests. You can also use this platform to learn more about binary search, algorithms, and other technical topics.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-complete-java-masterclass"&gt;
  &lt;/a&gt;
  The Complete Java Masterclass
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-tQ-Lh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uhjzrss32zj6jp2oj1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-tQ-Lh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uhjzrss32zj6jp2oj1l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an ideal &lt;a href="https://www.udemy.com/course/java-programming-course/"&gt;course&lt;/a&gt; for beginners as it allows learning Java from scratch. As soon as you acquire fundamental topics, you can move to more advanced Java concepts, such as multithreading, OOPs, ArrayList, and others.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-programming-for-complete-beginners"&gt;
  &lt;/a&gt;
  Java Programming for Complete Beginners
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5z7BJqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n7hw6lmy6v9xb8tzccr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5z7BJqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n7hw6lmy6v9xb8tzccr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://www.udemy.com/course/java-programming-tutorial-for-beginners/"&gt;course&lt;/a&gt; promises that you‚Äôll master Java programming language in a bit more than 250 steps. It also contains over 200 code challenges, quizzes, and examples you should pass to hone your knowledge and skills.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-certification-by-duke-university"&gt;
  &lt;/a&gt;
  Java Certification by Duke University
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B82woRgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmwtxd89vd6zkj50llhl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B82woRgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmwtxd89vd6zkj50llhl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the other &lt;a href="https://www.coursera.org/specializations/java-programming"&gt;course&lt;/a&gt; that covers Java programming and software engineering fundamentals. Other than learning about arrays, lists, and structured data, principles of software design, and solving problems with software, you can also grasp an idea of programming foundations with JavaScript, HTML, and CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-community-is-evergrowing-active-and-friendly"&gt;
  &lt;/a&gt;
  The Community Is Ever-Growing, Active, and Friendly
&lt;/h3&gt;

&lt;p&gt;Other than a myriad of learning courses, tutorials, books, and challenges, Java is also known for its huge and active community. It plays a key role in the life of everyone who sooner or later joins it ‚Äî the community supports both newbies and professionals, helps to solve problems, allows sharing knowledge, and remains one of the biggest sources of the latest coding news.&lt;/p&gt;

&lt;p&gt;There are hundreds of active Java forums and groups, but I would like to distinguish just a few of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/"&gt;HackerNews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/community/"&gt;SitePoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt; channels&lt;/li&gt;
&lt;li&gt;r/programming&lt;/li&gt;
&lt;li&gt;r/learnprogramming&lt;/li&gt;
&lt;li&gt;r/codetogether&lt;/li&gt;
&lt;li&gt;r/programmingtools&lt;/li&gt;
&lt;li&gt;r/gamedev&lt;/li&gt;
&lt;li&gt;r/prograrticles&lt;/li&gt;
&lt;li&gt;r/webdev&lt;/li&gt;
&lt;li&gt;r/dailyprogrammer&lt;/li&gt;
&lt;li&gt;r/java&lt;/li&gt;
&lt;li&gt;r/javahelp&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javaprogrammingforums.com/"&gt;Javaforum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Java community encourages active participation and engagement in discussions, as well as promotes assistance and help. This allows newcomers to feel confident and safe ‚Äî they will not be left without support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-are-numerous-publicly-available-libraries-at-hand"&gt;
  &lt;/a&gt;
  There Are Numerous Publicly Available Libraries at Hand
&lt;/h3&gt;

&lt;p&gt;Another reason to go ahead with Java is its extensive libraries used by developers from the whole world. Moreover, many non-profit organizations and large companies, such as Google and Apache, continue releasing libraries available in open access. They significantly influence the process of Java development, making it faster, easier, and more efficient.&lt;/p&gt;

&lt;p&gt;Because most libraries are publicly available, newcomers are often recommended to google the needed functionality before even starting to write code. The chances are the functionality already exists across the open-source library and has been previously tested by professional devs.&lt;/p&gt;

&lt;p&gt;If you are casting around for Java libraries to start with, consider several of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/javase/8/docs/api/index.html"&gt;Java standard libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jhipster.tech/"&gt;JHipster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://commons.apache.org/"&gt;Apache Commons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/guava"&gt;Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/gson"&gt;google-gson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hibernate.org/orm/"&gt;Hibernate-ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://junit.org/junit4/"&gt;JUnit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did I manage to answer your question ‚ÄúWhy should I learn Java?‚Äù Hope a little information about this programming language has convinced you that it is a good option to start with. So, go ahead with Java and make the next year your game changer.&lt;/p&gt;

&lt;p&gt;First published on &lt;a href="https://medium.com/quick-code/coding-goals-for-2021-the-reasons-to-learn-java-3c614579ae7a"&gt;Quick Code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Node.JS - Foal framework - version 2.4 is here</title>
      <author>Lo√Øc Poullain</author>
      <pubDate>Tue, 25 May 2021 13:48:06 +0000</pubDate>
      <link>https://dev.to/loicpoullain/node-js-foal-framework-version-2-4-is-here-dhh</link>
      <guid>https://dev.to/loicpoullain/node-js-foal-framework-version-2-4-is-here-dhh</guid>
      <description>&lt;p&gt;Version 2.4 of Foal has been released! Here are the improvements that it brings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-data-endraw-references-for-validation"&gt;
  &lt;/a&gt;
  &lt;code&gt;$data&lt;/code&gt; references for validation
&lt;/h2&gt;

&lt;p&gt;Version 2.4 allows you to enable the AJV &lt;code&gt;$data&lt;/code&gt; option so that you can use the verified data values as validators for other values.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;config/default.json&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ajv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"$data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Example of auth controller&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ValidateBody&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ValidateBody&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// "password" and "confirmPassword" should be identical.&lt;/span&gt;
      &lt;span class="na"&gt;confirmPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;const&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1/password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;confirmPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;additionalProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cache-option-for-file-downloading"&gt;
  &lt;/a&gt;
  Cache option for file downloading
&lt;/h2&gt;

&lt;p&gt;Starting from version 2.4 the &lt;code&gt;Disk.createHttpResponse&lt;/code&gt; method accepts an optional parameter to specify the value of the &lt;code&gt;Cache-Control&lt;/code&gt; header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Disk&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@foal/storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../entities&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ProfileController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;dependency&lt;/span&gt;
  &lt;span class="nx"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Disk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;readProfileImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug fixes
&lt;/h2&gt;

&lt;p&gt;See issue &lt;a href="https://github.com/FoalTS/foal/issues/930"&gt;#930&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributors"&gt;
  &lt;/a&gt;
  Contributors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ZakRabe"&gt;@ZakRabe&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Amazing Specific Select File Using HTML CSS &amp; JS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 25 May 2021 13:36:36 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-specific-select-file-using-html-css-js-1366</link>
      <guid>https://dev.to/nikhil27b/amazing-specific-select-file-using-html-css-js-1366</guid>
      <description>&lt;p&gt;Today I created a Amazing Specific with HTML &amp;amp; JS. I use JavaScript to select this file name and upload this file you can be use a post method after choose the file using axios or http I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/eYvRzpd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite : Cloud Function with CRON</title>
      <author>Torsten Dittmann</author>
      <pubDate>Tue, 25 May 2021 13:13:26 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-cloud-function-with-cron-258c</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-cloud-function-with-cron-258c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused at giving developers a walk through of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-statistics"&gt;
  &lt;/a&gt;
  Creating Statistics
&lt;/h1&gt;

&lt;p&gt;On Day 24, we created a Cloud Function that was triggered by an event. This comes in handy when you want to react to interactions from the Client Side. For Day 25 we are going to create a Cloud Function that will be triggered at particular intervals of time. We can accomplish this by adding a CRON Schedule to our Cloud Function. &lt;/p&gt;

&lt;p&gt;For Day 25 we are creating a Cloud Function that will run every day and create statistics for our App. We are going to save the number of profiles and posts of each day in a Collection - this data allows us to create Graphs and Statistics to track.&lt;/p&gt;

&lt;p&gt;First of all, we are going to create a new &lt;strong&gt;Statistics&lt;/strong&gt; collection with the following &lt;strong&gt;Rules&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Profiles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Label:&lt;/strong&gt; Profiles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Key:&lt;/strong&gt; profiles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rule Type:&lt;/strong&gt; Numeric&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Label:&lt;/strong&gt; Posts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Key:&lt;/strong&gt; posts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rule Type:&lt;/strong&gt; Numeric&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Timestamp:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Label:&lt;/strong&gt; Timestamp&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Key:&lt;/strong&gt; timestamp&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rule Type:&lt;/strong&gt; Numeric&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Permissions&lt;/strong&gt; will be &lt;code&gt;*&lt;/code&gt; for &lt;em&gt;read&lt;/em&gt;, so anyone can retrieve the statistic and we are going to leave the &lt;em&gt;write&lt;/em&gt; permissions empty. Leaving the &lt;em&gt;write&lt;/em&gt; empty, will block anyone from writing to that Collection - except for when they're using an API key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDpKrjb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w05oizqrea837qs0gike.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDpKrjb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w05oizqrea837qs0gike.png" alt="Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the Collection is prepared, let's start with our cloud function. For this example, we are going to create another Node.js Cloud Function. As environment variables we are going to add the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;APPWRITE_PROJECT_ID&lt;/strong&gt;: Insert your project ID.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;APPWRITE_ENDPOINT&lt;/strong&gt;: Insert your Appwrite endpoint.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;APPWRITE_API_KEY&lt;/strong&gt;: Insert an API key that has &lt;em&gt;documents.read&lt;/em&gt; and &lt;em&gt;documents.write&lt;/em&gt; permissions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STATISTICS_COLLECTION&lt;/strong&gt;: Insert the ID of the Statistics collection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PROFILE_COLLECTION&lt;/strong&gt;: Insert the ID of the Profile collection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST_COLLECTION&lt;/strong&gt;: Insert the ID of the Post collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under the &lt;strong&gt;Settings&lt;/strong&gt; page of this Cloud Function, you also need to add a value in the &lt;strong&gt;Schedule (CRON Syntax)&lt;/strong&gt; field. For our use-case we are setting it to &lt;code&gt;0 12 * * *&lt;/code&gt;, which will execute this Function every day at 12:00.&lt;/p&gt;

&lt;p&gt;Create a Node.js project using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;create-statistics
&lt;span class="nb"&gt;cd &lt;/span&gt;create-statistics
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;node-appwrite&lt;/code&gt; as a dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;node-appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;index.js&lt;/code&gt; file and put in following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;STATISTICS_COLLECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STATISTICS_COLLECTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PROFILE_COLLECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROFILE_COLLECTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POST_COLLECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POST_COLLECTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Initialise the client SDK&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-appwrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APPWRITE_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APPWRITE_PROJECT_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APPWRITE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your secret API key&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the sum of Profiles and Posts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDocuments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PROFILE_COLLECTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDocuments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;POST_COLLECTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;published=1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Waiting for all promises to resolve and write into the Statistics Collection&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STATISTICS_COLLECTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can upload the Function very easily using the Appwrite CLI (or upload it manually in the dashboard):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;appwrite functions createTag &lt;span class="nt"&gt;--code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--functionId&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;YOUR_FUNCTION_ID] &lt;span class="nt"&gt;--command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'node index.js'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don't forget to activate the tag we just created!&lt;br&gt;
We covered both the &lt;a href="https://dev.to/appwrite/30daysofappwrite-appwrite-cloud-functions-1pf2"&gt;CLI method and Manual method&lt;/a&gt; on Day 23. So feel free to check it out if you get stuck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#testing-our-cloud-function"&gt;
  &lt;/a&gt;
  Testing Our Cloud Function
&lt;/h1&gt;

&lt;p&gt;We can easily test out our function by waiting for 12:00 or just executing it manually in your Functions page. If the function was executed successfully, you can head over the the &lt;strong&gt;Statistics&lt;/strong&gt; Collection and you should find a document like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgCFcpOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvfao78xmfoyh46t8n0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgCFcpOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvfao78xmfoyh46t8n0y.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this data, we can create Charts and Statistics to monitor the usage of our application. &lt;/p&gt;

&lt;p&gt;Feel free to share how you would leverage this data and implement it in the Medium Clone!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ü¶Ñ. Stay tuned for tomorrow's article! Until then üëã&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>The outcomes of developers embracing No-code</title>
      <author>Tony Cletus</author>
      <pubDate>Tue, 25 May 2021 13:06:06 +0000</pubDate>
      <link>https://dev.to/tonycletus/the-outcomes-of-developers-embracing-no-code-2bpi</link>
      <guid>https://dev.to/tonycletus/the-outcomes-of-developers-embracing-no-code-2bpi</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo credit: &lt;a href="https://iwaria.com/?utm_source=dev_to&amp;amp;utm_medium=banner&amp;amp;utm_campaign=tony_article"&gt;Iwaria&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Software industry is the most exponential field in the world. Especially in the way we craft and think software.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"We've never had a better yesterday, it has always been a forward progress."&lt;br&gt;
 ‚Äî Gideon Shaibu&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From building software with Low-level languages (Machine language and Assembly language) in 0s and 1s to High-level languages (Python, C++, JavaScript, Java...) and now, there's this new thing echoing all over the internet called &lt;strong&gt;No-Code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The genealogy of software development has never had a better yesterday. Each chronicle presents a simplified way of building software better than the previous chronicle. Now is the time to talk No-code, though, no longer a new phenomenon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-era-of-nocode"&gt;
  &lt;/a&gt;
  The Era of No-Code
&lt;/h2&gt;

&lt;p&gt;The No-code movement started way back in 1985 when Microsoft released the first version of Excel (interestingly for Mac), followed by the Windows version in 1987. Google took it further by creating Google Sheets and embracing the cloud. Over the years, Excel has helped shape how we handle financial and data analysis. &lt;/p&gt;

&lt;p&gt;In 2003, No-code fully came online, when WordPress kickstarted the ability to build websites without code which is powering about &lt;a href="https://www.whoishostingthis.com/compare/wordpress/stats/"&gt;35% of the world's websites&lt;/a&gt; today. &lt;/p&gt;

&lt;p&gt;In 2004, Shopify empowered people to build their online stores without code. &lt;/p&gt;

&lt;p&gt;WordPress and Shopify were the first set of popular online tools to pave way for entrepreneurs to build all kinds of websites ranging from blog to dev tools to e-commerce websites and SaaS products.&lt;/p&gt;

&lt;p&gt;Later, popular tools like Airtable (2012), Bubble (2012), Webflow (2013), Zapier (2012), TypeForm (2016), Jotform (2006), Notion (2016), Coda (2019) and a list of many others have grossly contributed to the No-code movement. All to democratize software development by creating citizen developers who can quickly build solutions in real-time without writing code.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;No-code is simply building and maintaining what is used to be accomplished with code without code.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-nocode-here-to-replace-software-developers"&gt;
  &lt;/a&gt;
  Is No-code here to replace Software developers?
&lt;/h2&gt;

&lt;p&gt;Capital NO. This can never happen as No-code tools need software developers to write code that makes them what they are.&lt;/p&gt;

&lt;p&gt;Think of &lt;a href="https://botamp.com"&gt;Botamp&lt;/a&gt; for example, A software that provides entrepreneurs with simple tools to quickly create their website and professional email campaigns without code. &lt;a href="https://www.wappalyzer.com/apps/"&gt;Wappalyzer&lt;/a&gt; browser extension shows Botamp is powered by Ruby on Rails. A high-level framework only developers can code and maintain. So the idea that No-code is here to replace Software developers is completely useless. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUvPb25p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1364158357511286786/sHKiqABw_normal.jpg" alt="Tony Cletus profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tony Cletus
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @iamtonycletus
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Some people have to learn how to code to build simple tools that will help others create stuff without coding. How sweet that sounds. &lt;br&gt;&lt;a href="https://twitter.com/hashtag/NoCode"&gt;#NoCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/BuildInPublic"&gt;#BuildInPublic&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:44 AM - 26 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1375353052828418048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1375353052828418048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1375353052828418048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I rather say the idea of No-code is to empower non-technical people to build solutions for their business, client, or explore their creative minds. &lt;a href="https://twitter.com/bentossell"&gt;Ben Tossel&lt;/a&gt; puts it this way; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Building is for a large audience (coding or not). Learning to build can often be a gateway into learning to code. But it‚Äôs also enabling anyone to make things."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So it is important to mention that No-code is not here to replace Software developers but to enable non-coders and even coders build things faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-developers-embrace-nocode-technology"&gt;
  &lt;/a&gt;
  Should Developers embrace No-code technology?
&lt;/h2&gt;

&lt;p&gt;Absolutely YES, No-code technologies are around to simplify the existing process they are alternating not replace them. Not every development requires coding. &lt;/p&gt;

&lt;p&gt;No-code can do almost anything code can do these days, maybe not as appealing as building certain functionalities with code but it gives enough space for rapid development. No-code saves time and money when you think of creating blogs, landing pages, payment systems, AI tools, SaaS products and community/social apps. &lt;/p&gt;

&lt;p&gt;Recently &lt;a href="https://www.makerpad.co/"&gt;Makerpad&lt;/a&gt;, a community-driven platform built on No-code technologies like Webflow, MemberStack and Stripe was acquired by Zapier. An inspiring News for startups using the same approach.&lt;/p&gt;

&lt;p&gt;Spicing your technical skill-set with No-code makes you an outstanding developer. It helps you build faster, bootstrap your side-project, and be diversified. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-if-software-developers-crowd-nocode"&gt;
  &lt;/a&gt;
  What happens if Software developers crowd No-code?
&lt;/h2&gt;

&lt;p&gt;All I see is a positive change. Developers are already conversant with the design, implementation and maintenance of Software. All they seek is a simpler approach to what they are already doing. Think of why Laravel framework exists, an alternative to writing raw PHP for web development - To simplify the process. It is easier for developers to adopt No-code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; caught the hearts of developers not because it is a scaled hosting software. &lt;br&gt;
While similar technologies like Heroku, GitHub and AWS allowed app deployment via Git commands and Terminals, Netlify simplified the process by allowing developers to deploy apps by dragging and dropping your project from your local computer to the cloud. A definition of speed and simplicity.&lt;/p&gt;

&lt;p&gt;Developer tools like Stripe and Algolia can be used to extend the functionality of their App without writing additional code. Visual Development tools like Bubble, Webflow, Botamp, Zapier, Integromat, Airtable, Notion, Coda, and others are used to build stuff that one could only build by writing, hosting, and maintaining a whole lot of code in the absence of these tools.&lt;/p&gt;

&lt;p&gt;In general, No-code adds as a supportive skill to developers to build faster. It comes in handy when you need to ship an MVP. Developers can improve the No-code tools as high-level users. &lt;/p&gt;

&lt;p&gt;Because of No-code, we have titles like non-technical founder, citizen developers, makers and No-coder. Embracing No-code is no longer the case but how knowledgeable are you with No-code tools?&lt;/p&gt;

</description>
      <category>nocode</category>
      <category>saas</category>
      <category>lowcode</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I started practicing TDD</title>
      <author>Marcio Frayze</author>
      <pubDate>Tue, 25 May 2021 13:06:02 +0000</pubDate>
      <link>https://dev.to/marciofrayze/how-i-started-practicing-tdd-aj5</link>
      <guid>https://dev.to/marciofrayze/how-i-started-practicing-tdd-aj5</guid>
      <description>&lt;p&gt;In this article I assume you have already read the basics about test-driven development. Here, I describe some of the problems I faced when trying to internalize this practice in my daily life as a developer and how I managed to get around them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First steps
&lt;/h1&gt;

&lt;p&gt;I discovered TDD when I was studying computer science around 2003. I was reading about &lt;a href="http://www.extremeprogramming.org/"&gt;Extreme Programming&lt;/a&gt; and loved the ideas, but had a lot of difficulty practicing some of them, especialy the &lt;strong&gt;test first&lt;/strong&gt; approach (also known as test-driven development). Took many years until I internalized it, but today I can not understand how I was able to develop software without this practice!&lt;br&gt;&lt;br&gt;
The purpose of this article is to try to help people who have an interest in TDD, but have not yet been able to include this practice in their daily lives.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#study-concepts-before-libraries-and-frameworks"&gt;
  &lt;/a&gt;
  Study concepts before libraries and frameworks
&lt;/h1&gt;

&lt;p&gt;When I decided to apply TDD, my team already used &lt;a href="https://junit.org/"&gt;jUnit&lt;/a&gt; for automated testing, but the tests were done after implementing the production code. As I already knew the tools and had a notion of the basic concepts behind TDD, it was natural to try to go straight to practice without first studying the theory further. And the result couldn't be another: frustration. Changing the way I worked for over 10 years was very hard and I gave up several times. I read articles on the Internet and the theory seemed interesting, but I couldn't understand how to practice.&lt;/p&gt;

&lt;p&gt;At some point I realized that I needed to devote more time to the theory and two books helped me a lot to clarify several doubts. They are:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/387190.Test_Driven_Development"&gt;TDD Guided Development by Tests&lt;/a&gt;. By Kent Beck.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.growing-object-oriented-software.com/"&gt;Growing Object Oriented Software, Guided by tests&lt;/a&gt;. By Steve Freeman and Nat Pryce.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you're determined to practice TDD, I suggest you start by reading these books. The first is quite short, objective and explains very well the fundamentals. The second is more extensive, discuses TDD in depth and helped me to finally understand &lt;strong&gt;how to practice TDD&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;Developing test-driven software seems to be very easy, and can be summarized in just three simple steps:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write an automated test that fails;&lt;/li&gt;
&lt;li&gt;Write enough production code for this test to pass;&lt;/li&gt;
&lt;li&gt;Refactor the code and repeat the loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDzREtRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h0rcth4hurt1uy89keq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDzREtRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h0rcth4hurt1uy89keq.png" alt="tdd cycle"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As this theory seems to be simple, it is tempting to neglect the study of concepts and go straight to practice. Don't make that mistake. Study the principles and fundamentals further and everything will be much easier. Learn from those  who have explored the theme much more and paved the way for us.&lt;/p&gt;

&lt;p&gt;My recommendation is that you read at least the first book I mentioned above. You will spend only a few hours and it will save you many, many days of frustration. And as soon as you have more time, you should also read the second book. It's hard to describe how much I learned from it! It has definitely completely changed the way I develop software.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#always-write-the-tests-first"&gt;
  &lt;/a&gt;
  ALWAYS write the tests first
&lt;/h1&gt;

&lt;p&gt;In the beginning I had great difficulty understanding the importance of obeying the order of the TDD cycle. It was common to code business logic and then suffer trying to write the tests. I knew I wasn't practicing TDD, but I thought the end result would be the same, after all, I was writing the automated tests, just not following the order established by TDD. It took me a while to understand that I wasn't letting the tests &lt;strong&gt;guide&lt;/strong&gt; the &lt;em&gt;design&lt;/em&gt; of my code and how much I was missing out.&lt;/p&gt;

&lt;p&gt;And when I was to writting the tests, it felt like fighting with the code and I had the feeling that I was inserting bad practices in it. I did things I knew were wrong, but they seemed like the only option! A recurring example: How to test a particular piece of code in isolation if it was a private method? Should I change the method I want to test from private to protect or public? And I ended up doing exactly this (wrongly) a few times. I always felt guilty and realized something was wrong, but ended up putting the blame on the test. I thought committing those architectural deviations was the only way to make that code testable.&lt;/p&gt;

&lt;p&gt;But as I developed the software in this way, the test coverage dropped and the internal quality of the software fell along with it. And as the architecture of the system became less and less testable, it turned into a snowball until it got to the point where it became very difficult to create new tests. In the end it became a very frustrating experience and I saw very little benefit in working this way, since the gains were not offsetting the cost.&lt;/p&gt;

&lt;p&gt;I only understood this better when I read the book &lt;a href="https://www.goodreads.com/book/show/387190.Test_Driven_Development"&gt;TDD Development Guided by Tests&lt;/a&gt; and started obeying the correct flow of TDD. But resisting the urge to write "just one more line of code" before there is a test is harder than it sounds. Practicing TDD requires discipline. Have patience and resist the temptation to advance the production code. Even if you're &lt;strong&gt;sure&lt;/strong&gt; how the code will look in a few minutes, stop implementing the production code as soon as the test becomes green. Go to the refactoring step (duplicate code removal) and then go back to creating a new test. Create a test that fails and only then move on to the next task. You'll be surprised how many times the test will &lt;strong&gt;guide&lt;/strong&gt; your architecture in a different direction than you had originally imagined.&lt;/p&gt;

&lt;p&gt;After a while you will internalize this flow, but the first few times you will need to be very focused. This is usually easier when we are working with paired programming or mob programming, as other people will help remind us to avoid this common mistake.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-shoot-the-messenger"&gt;
  &lt;/a&gt;
  Don't shoot the messenger
&lt;/h1&gt;

&lt;p&gt;If it starts to get too hard to create a new test, you may have underestimated the refactoring step and it's a good time to analyze your architecture. Don't get mad at the test! On the contrary, be glad to have found a point that needs attention and that, if it were not for the test, there might be much bigger problems in the future. The sooner we find and fix the design flaws, the easier and cheaper it will be to repair these problems. And the practice of TDD is a great way to do this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-use-advanced-testing-tools"&gt;
  &lt;/a&gt;
  Don't use advanced testing tools
&lt;/h1&gt;

&lt;p&gt;It is quite common to find beginners in TDD trying to use advanced tools for creating complex &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;double objects&lt;/a&gt; (mock objects), using reflections and even trying to mock static methods or private methods. Don't do this! These tools may be useful in some very rare cases, but in 99.999% cases the problem lies in the system architecture and after fixing these flaws, we no longer need such invasive techniques. The better the architecture, the easier it is to create automated tests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-software-architecture-and-clean-code"&gt;
  &lt;/a&gt;
  Learn software architecture and clean code
&lt;/h1&gt;

&lt;p&gt;As I said just above, system architecture has a very significant importance in creating testable systems. So you must study about good programming practices. Learn how to implement clean code, understand SOLID principles, and how to create a good software architecture, and apply all of this to your code. Below I list some sources that helped me a lot in this trajectory:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/3735293-clean-code"&gt;Clean Code&lt;/a&gt; ‚Äî A classic written by Robert Cecil Martin (aka. Uncle Bob). In it you will understand the fundamentals of how to write code that will be easier to maintain and refactor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/18043011-clean-architecture"&gt;Clean Archictecture&lt;/a&gt; ‚Äî From the same author of Clean Code. It will help you better understand what it is and how to create a good software architecture. I recorded &lt;a href="https://segunda.tech/posts/2019-03-23-clean-architecture/"&gt;a podcast&lt;/a&gt; (in Brazilian Portuguese) where I talk about this book.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://martinfowler.com/books/refactoring.html"&gt;Refactoring&lt;/a&gt; ‚Äî Written by Martin Fowler, another software development classic. One of the main steps of TDD is the refactoring your code, and this book is the natural reference to understand how to do it in the best possible way.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://evolutionaryarchitecture.com/"&gt;Building Evolutionary Architectures&lt;/a&gt; ‚Äî I also &lt;a href="https://segunda.tech/posts/2019-03-03-building-evolutionary-architectures/"&gt;recorded a podcast&lt;/a&gt; about this book. This work will help you understand how to assemble an &lt;a href="https://www.thoughtworks.com/pt/evolutionary-architecture"&gt;evolutionary architecture&lt;/a&gt;. You can also watch &lt;a href="https://www.youtube.com/watch?v=UV_B-ioocpY"&gt;this talk&lt;/a&gt; by &lt;a href="https://www.thoughtworks.com/pt/profiles/rebecca-parsons"&gt;Rebecca Parsons&lt;/a&gt;, CTO of ThoughtWorks and one of the authors of this book.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#follow-the-principles-of-yagni-and-last-responsible-moment"&gt;
  &lt;/a&gt;
  Follow the principles of YAGNI and Last Responsible Moment
&lt;/h1&gt;

&lt;p&gt;Another tip is to always follow the principle of &lt;strong&gt;y&lt;/strong&gt;ou &lt;strong&gt;a&lt;/strong&gt;in‚Äôt &lt;strong&gt;g&lt;/strong&gt;onna &lt;strong&gt;n&lt;/strong&gt;eed &lt;strong&gt;i&lt;/strong&gt;t, known by the abbreviation &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt;. You should also follow The Last Responsible Moment principle.  &lt;/p&gt;

&lt;p&gt;By following these two principles, along with TDD, we were able to postpone decision-making until the last safe moment. So we can gather as much information as possible so that when we really need to make a decision, it is made as informed as possible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúThere are things we do not know we don't know.‚Äù ‚Äî Neal Ford.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if you are sure that a particular database model will be the best solution, that a particular technology is the most appropriate for the problem, and that a certain architecture would be the most appropriate, resist the temptation to make this decision until the &lt;strong&gt;last responsible moment&lt;/strong&gt; arrives.&lt;/p&gt;

&lt;p&gt;There may be several factors that you still don't know that can change all decision-making. Perhaps at the beginning of the project a NoSQL database seems to be the best alternative, until a midway impediment appears that makes this database model no longer a good solution. If your team made the decision to use NoSQL prematurely, the cost and pain of switching to another solution will be much higher than if you had simply waited until the last responsible moment.&lt;/p&gt;

&lt;p&gt;You can find more information about the concepts of last moment responsible and evolutionary architecture in &lt;a href="https://www.thoughtworks.com/insights/blog/microservices-evolutionary-architecture"&gt;this article&lt;/a&gt; by Neal Ford and Rebecca Parsons.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#run-tests-automatically-when-saving-any-file"&gt;
  &lt;/a&gt;
  Run tests automatically when saving any file
&lt;/h1&gt;

&lt;p&gt;The technique that helped me the most in the beginning and continues to help is to configure the build tool so that it runs all tests automatically whenever a file is saved. &lt;/p&gt;

&lt;p&gt;I leave a window on my secondary monitor that keeps running the tests at all times, while I keep the IDE or editor on the primary monitor. When I'm working with only one monitor, I leave an open terminal at the bottom of the screen running the tests. In this way, I have two great advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't forget to run the tests often;&lt;/li&gt;
&lt;li&gt;I get a notification right after a change causes some unwanted side effect that breaks any test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are programming in Java, &lt;a href="https://blog.gradle.org/introducing-continuous-build"&gt;gradle has a parameter that does this for you&lt;/a&gt;. If you are using any other build tool, look in the documentation and you should find something related to the term &lt;strong&gt;watch&lt;/strong&gt;. When I'm programming on &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;, I use the &lt;em&gt;elm-test&lt;/em&gt; in conjunction with the watch parameter, for example. In some cases the &lt;a href="https://eradman.com/entrproject/"&gt;entr&lt;/a&gt; tool may help in this task.&lt;/p&gt;

&lt;p&gt;I strongly recommend that you start this way. Of course, on systems with many tests you will need to adapt this model, since the execution of all tests can be very time consuming and require a lot of resources (memory and CPU).&lt;/p&gt;

&lt;p&gt;To this day I still use this technique and could not count the number of times this helped identify problems in advance and saved a lot of time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-is-not-enough-to-automate-the-execution-of-the-tests"&gt;
  &lt;/a&gt;
  It is not enough to automate the execution of the tests
&lt;/h1&gt;

&lt;p&gt;Some developers say they are implementing unit tests simply because they are using some library (such as JUnit or NUnit) to make it easier to perform tasks. But in practice, what they're doing is just making it easier to execute a function or method, like it's a main function. This cannot be called automated testing, let alone unit testing.&lt;/p&gt;

&lt;p&gt;I worked on projects that had a supposedly high coverage of tests where the team even used analysis tools such as &lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt;, but early on would appear some strange things like tests that had no assert! The only way the test would fail was if an exception occurred during its execution, otherwise it always ended successfully. Another common mistake was tests printing things on the console (usually the result of failure). In short: they were great examples of how to &lt;strong&gt;not&lt;/strong&gt; do automated testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asserts&lt;/strong&gt; are a fundamental part of testing. It is at this point that we validate the outcome of its execution. When it is not done properly, we run the risk of creating false positives, false negatives or even very fragile tests. So don't be in a hurry when writing the asserts. They can't not be too generic, but they can't be too fragile either.&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;never&lt;/strong&gt; print anything on the console. It is asserts' duty to indicate whether the test ran successfully or not, and in case of failures, the test framework itself will take care of showing where the problem occurred. Therefore, it's very important to give a meaningful names to the tests. I use and recommend the &lt;a href="https://martinfowler.com/bliki/GivenWhenThen.html"&gt;Given-When-Then&lt;/a&gt; standard.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prioritize-unit-tests"&gt;
  &lt;/a&gt;
  Prioritize unit tests
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VYx2RHU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5n4d09z20r9etjifzwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VYx2RHU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5n4d09z20r9etjifzwo.png" alt="tests pyramid"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can separate automated tests into three categories: end-to-end, integrated and unit test. Ideally a team that practices TDD should create these 3 types of tests. The most common question is to whether it is not enough to create the end-to-end tests and test everything at once. But each type of test has a different goal and I recommend that you start with the unit ones.&lt;/p&gt;

&lt;p&gt;I will not get too deep into this topic, but I would like to register here an alert: do not prioritize end-to-end testing. I lost count of how many times I saw teams that focused only on end-to-end testing and after a few months, when the suite was starting to get too big (and with very fragile and slow tests), they abandoned the tests. If you find yourself in this situation, I recommend reading &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;this article&lt;/a&gt; written by Ham Vocke. There he explains this question very well.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-test-should-guide-the-development"&gt;
  &lt;/a&gt;
  The test should guide the development
&lt;/h1&gt;

&lt;p&gt;When I first met the expression "test-guided software development", I ended up putting a lot of emphasis on the idea that I would be &lt;strong&gt;testing&lt;/strong&gt; my software in an automated way and little attention on the part of &lt;strong&gt;guiding&lt;/strong&gt; the development.&lt;/p&gt;

&lt;p&gt;And test-guided software development (TDD) is, as the name implies, about &lt;strong&gt;software development&lt;/strong&gt;. Don't forget that and let the tests guide you. Even if sometimes it seems like you're going the opposite way to what your gut is telling you, give the tests a chance and realize where they're trying to take you. It's not uncommon to end up on a much shorter, simpler and clearer path than what you were originally thinking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-give-up-on-the-first-obstacle"&gt;
  &lt;/a&gt;
  Don't give up on the first obstacle
&lt;/h1&gt;

&lt;p&gt;TDD is a practice and every practice requires training, commitment and a dose of perseverance. Like learning a new musical instrument or cycling, it is necessary study and dedication. Sometimes I fall off the bike or miss the drum's beat time in rehearsal with my band. And the first few times I tried to apply TDD I had a hard time finding the best name for the tests, didn't know how to implement the asserts and it took me a while to find out how small the scope of the test should be, among many other difficulties.&lt;/p&gt;

&lt;p&gt;I would like to say that eventually I found the best way to do all this, but the truth is that just like as learning to play an instrument, my Practice of TDD becomes better as I train, and every day I find some better way to apply it. That's why I keep experimenting, making mistakes and trying again. And of course, studying! It's not enough to just practice. Progress is much faster when we learn from people who have been practicing much longer than we have. So my suggestion is, at first, to go for excess. Follow the TDD by the book and only write a new line of code if it is covered by some previously written test (whether unit test, integrated or end-to-end). &lt;/p&gt;

&lt;p&gt;Probably the hardest part of achieving high coverage is infrastructure-related layers (such as methods responsible for accessing the database). It is possible (and recommended) to create tests for these parts of the code, but they may require a little more in-depth knowledge to create these automated tests. To implement them, your  architecture must have a reasonable level of maturity. If your team knows how to apply &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; principles (in particular, the &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;dependency inversion principle&lt;/a&gt;), these tests are already much easier to implement. If you're having a hard time increasing code coverage of certain layers of your system, try first at least to make sure that the &lt;strong&gt;business logic&lt;/strong&gt; are fully covered.&lt;/p&gt;

&lt;p&gt;There are tools that generate test coverage reports, even integrated with IDEs. These reports display which lines have been tested, percentage coverage of each class and package of your system, among other information that can help you identify places that need more attention. Just be careful not to hold on too much to the reports! Use sparingly and responsibly. &lt;strong&gt;Never&lt;/strong&gt; use as a management metric. Brian Marick wrote &lt;a href="http://www.exampler.com/testing-com/writings/coverage.pdf"&gt;this article&lt;/a&gt; in which he explains in detail the care needed to use metrics in a healthy way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-definition-of-legacy-code"&gt;
  &lt;/a&gt;
  The definition of legacy code
&lt;/h1&gt;

&lt;p&gt;There are several ways to define what &lt;strong&gt;legacy code&lt;/strong&gt; is. Before meeting TDD, I interpreted it as being synonymous with old, outdated code, that had been developed with technologies that were no longer used in new systems. But Feathers has a slightly different definition of this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"To me, legacy code is simply code without tests." - Michael Feathers, Working Effectively with Legacy Code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knowing this definition has made an immediate impact on me. The code I had written five minutes before reading this definition had no tests. I had just implemented a legacy code! And, at least for me, this definition makes a lot of sense. And it's very easy to sort out whether the code in front of me is legacy or not. I just have to answer the question: do this code have automated tests?&lt;/p&gt;

&lt;p&gt;For your sake, for the mental health of your colleagues and for the sake of the product, let's stop writing legacy code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-be-afraid-to-revert-the-code-when-youre-having-difficulties"&gt;
  &lt;/a&gt;
  Don't be afraid to revert the code when you're having difficulties
&lt;/h1&gt;

&lt;p&gt;I used to spend a lot of time trying to figure out why my code wasn't working. Used to write several lines of code, executed it, and the result wasn't what I expected. So I used to changed it without much feedback, re-execute it, ... and this vicious cycle repeated. It was common to spend a lot of time (hours or in extreme cases even days) in a situation where the software was in an inconsistent state, not behaving as expected. There were a lot of sledgehammers until I could mold it for something close to what I wanted.&lt;/p&gt;

&lt;p&gt;TDD came to change this routine completely. Applying test-guided development, continuous integration, and other &lt;a href="https://martinfowler.com/bliki/ExtremeProgramming.html"&gt;Extreme Programming&lt;/a&gt; practices, when I feel like I'm having a hard time compiling the project or implementing the code to make a test pass, my reaction is to drop all changes and go back to the previous state (when all the tests passed) and then write a test with a smaller scope and continue the flow.&lt;/p&gt;

&lt;p&gt;Having a lot of difficulty solving the problem you are facing is a sign that the test you wrote is too broad and you are taking a step bigger than your leg. In this situation, it is best to take a step back. Go back to the state where all the tests were passing (discarding all your changes) and write a test with a more limited scope, and then follow the TDD cycle once again. If you still feel you are not managing to evolve, go back again and try to take an even smaller step until you can move forward safely (with the tests passing). Then refactor your code and write the next test to take another step towards your goal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-moment-i-decided-to-follow-tdd"&gt;
  &lt;/a&gt;
  The moment I decided to follow TDD
&lt;/h1&gt;

&lt;p&gt;As I said, I learned about this practice when I was still in college, but it was only after more than a decade after graduation that I began to practice it.&lt;/p&gt;

&lt;p&gt;I was on a project where I had the opportunity to develop a very isolated part. It was almost like a new project, as it depended on almost nothing from the rest of the code base. I decided I'd let the tests guide the development of this part.&lt;/p&gt;

&lt;p&gt;I had very few difficulties and everything was fine, until I had to use a litte more complex double object. At this point I had already read the two books I indicated above (Test-Driven Development, by Example and Growing Object-Oriented Software, Guided by Tests ). I could understand the theory, but it took me a while to come to the conclusion that what I needed in that situation was a &lt;a href="http://xunitpatterns.com/Test%20Spy.html"&gt;spy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The system had some problematic integrations and we decided to create a decorator that would be used around these calls to monitor them. If a certain problem was found, an alert would be issued. It was basically a simple solution to monitor integrations.&lt;/p&gt;

&lt;p&gt;In a first iteration, it would only print some information in the system log. The temptation not to test this one line of code that would issue the alert was great, I confess! But I had committed to letting the tests guide me... and the tests were telling me that simply putting a "System.out.println" in the middle of the code was not a good idea. Against my own will, I decided to follow the tests. I created an interface to specify the entity that would emit the alert and for the tests I created a &lt;em&gt;spy&lt;/em&gt; from this interface. Thus, using the idea of dependency inversion, decreases the coupling of my code. Now the business rule would no longer be coupled with the concrete implementation of alert emitter and it would no longer need to know &lt;strong&gt;how&lt;/strong&gt; the alert would be issued, as it would be coupled only with the interface. But of course before all this, I created a unit test that helped me find this solution.&lt;/p&gt;

&lt;p&gt;A positive side effect of this approach was that in the future, when instead of simply printing on the console we decided to use a more complex mechanism (such as posting in a message queue, for example), I would just need to inject another concrete implementation of this interface and would not need to change any lines of my business code.&lt;/p&gt;

&lt;p&gt;Until this moment everything was fine and there was little left for us to deploy this functionality in production. But a few days later I had to change the logic of when the alert would be issued. I followed the TDD ritual: I changed the test for that functionality (which started to fail), corrected the implementation (making the test green), and then refactored the code.&lt;/p&gt;

&lt;p&gt;But suddenly one of the tests failed. I was &lt;strong&gt;sure&lt;/strong&gt; that my changes had not introduced any errors in the code. And the certainty was such that my first reaction was to think that the test was wrong. I opened the test class and looked at the git history. No recent changes. I reopened the code I was refactoring and rolled back to an earlier version and the test passed. At this moment I admitted to myself that I had made a mistake during the refactoring. Made a diff between the new code and the versioned and bingo! I had unintentionally removed a line. Without that line, the code kept compiling and running normally, but it would never issue any alerts!&lt;/p&gt;

&lt;p&gt;I would never detect this problem in the development or staging environment and maybe not even in production. Since it was something that should be sporadic, we would not realize it's absence. And this would hide a lot of problems that were occurring in production and that we only detected thanks and this alert. At this moment I realized the amount of time and headache that this test I had hesitated to do had spared me. And felt in the skin the advantages of following the development guided by tests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#its-not-normal-to-be-afraid"&gt;
  &lt;/a&gt;
  It's not normal to be afraid
&lt;/h1&gt;

&lt;p&gt;Are you afraid to publish something in production? Or change parts of the system? In some companies this fear is already part of the routine. But this cannot be considered normal. It's a symptom of a problem and needs to be treated. Never ignore your or any member of your team fears.&lt;/p&gt;

&lt;p&gt;If you are not sure your change will work or you are afraid it might impact another pre-existing functionality, the most effective way to solve this is through test-guided development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Tests are the philosopher's stone of the programmer, transmuting fear into boredom", Test Driven Development, By Example, Kent Beck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In projects that do not have any kind of automation or testing, it may seem very difficult to get to this stage. And on some larger systems, it can be tricky. But taking it one step at a time, one day your team gets there. If this is your current scenario, Michael Feathers' &lt;a href="https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code"&gt;Working Effectively with Legacy Code&lt;/a&gt; may help you find good ways to improve your code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#less-debug-more-automated-testing"&gt;
  &lt;/a&gt;
  Less debug, more automated testing
&lt;/h1&gt;

&lt;p&gt;As I started developing my test-guided software, I began to notice that the number of times I use debug through the IDE has decreased dramatically. Rather than wasting time trying to assemble a mass of tests to run the application manually, finding the best point to add a break point and closely track the execution of each step of the application, it became much easier and natural to create an automated testing scenario. Whether it's unit tests, integrated testing, or end-to-end testing, the vast majority of the time I can create a test that reproduces the scenario I need to analyze.&lt;/p&gt;

&lt;p&gt;Using a debugger is a task that (at least for me) is quite stressful. To simulate the error only once, I had to generate the data by running scripts in my database or even changing the data of systems that I integrate with, just to be able to create one scenario. Once that's done, if the break point was in the wrong place or pressed the key equivalent to &lt;em&gt;step over&lt;/em&gt; when I should have done a &lt;em&gt;step in&lt;/em&gt;, it would destroy the data and I had to start all over again.&lt;/p&gt;

&lt;p&gt;Besides being a time-consuming task, it is quite delicate, which generates stress. Who has never let out a swear word when, after a lot of work, the IDE goes through the break point line when we expect it to stop?!&lt;/p&gt;

&lt;p&gt;Another advantage of using automated tests rather than debug is that in addition to being much easier to run multiple times, it will ensure that the problem being fixed will not occur again in the future, serving as a &lt;a href="https://en.wikipedia.org/wiki/Regression_testing"&gt;regression test&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Practicing TDD is harder than they say, but also more rewarding than it sounds. Some people don't adapt to this form of work (like the famous &lt;a href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html"&gt;DHH case&lt;/a&gt;) and maybe you and your team also come to the conclusion that this model isn't right for you. But there's only one way to find out: practicing and giving TDD a real chance. And for this experiment to be appropriate it is necessary study, training and dedication. But I promise that even if in the end you come to the conclusion that TDD is not for you, you will surely learn a lot of useful things in this process, regardless of the model you decide to follow later.&lt;/p&gt;

</description>
      <category>tdd</category>
      <category>extremeprogramming</category>
      <category>refactoring</category>
      <category>yagni</category>
    </item>
    <item>
      <title>Interesting people to follow for UI/UX/Webdesign</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 25 May 2021 13:02:32 +0000</pubDate>
      <link>https://dev.to/adaendra/interesting-people-to-follow-for-ui-ux-webdesign-34c3</link>
      <guid>https://dev.to/adaendra/interesting-people-to-follow-for-ui-ux-webdesign-34c3</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you are interested in UI/UX or webdesign, here are a few people for you to follow!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are really interesting people which post regularly about new tools, tips...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#geoffrey-crofte"&gt;
  &lt;/a&gt;
  Geoffrey Crofte
&lt;/h2&gt;

&lt;p&gt;He is a UX in Luxembourg and posts almost every day on Linkedin in French, English, or both.&lt;/p&gt;

&lt;p&gt;Also, he has a blog &lt;em&gt;(written in French)&lt;/em&gt; named &lt;strong&gt;Creative Juiz&lt;/strong&gt; with a lot of interesting posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/geoffreycrofte/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.creativejuiz.fr/blog/"&gt;Creative Juiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#posts-examples"&gt;
  &lt;/a&gt;
  Posts examples
&lt;/h3&gt;

&lt;p&gt;Here is some example of tools which he talked about :&lt;br&gt;
&lt;a href="https://yeun.github.io/open-color/?ref=shuhari"&gt;Open Color&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_lwcUw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap5qaorzjvcou7yvv6mj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_lwcUw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap5qaorzjvcou7yvv6mj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://luge.cool/"&gt;Luge&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nOaAiIlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycqwqeedxp3tfzhfmmz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nOaAiIlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycqwqeedxp3tfzhfmmz.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colbys-dovi"&gt;
  &lt;/a&gt;
  Colbys Dovi
&lt;/h2&gt;

&lt;p&gt;He is a Product Designer in Paris. As Geoffrey, he posts almost every day on LinkedIn in French and English.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/colbysdovi/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#posts-examples"&gt;
  &lt;/a&gt;
  Posts examples
&lt;/h3&gt;

&lt;p&gt;Here is some example of what he talked about : &lt;br&gt;
&lt;a href="https://tablericons.com/?ref=shuhari"&gt;Tabler Icons&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGonJNt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3jh22ef6jzql53r2kvc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGonJNt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3jh22ef6jzql53r2kvc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://iainbean.com/posts/2021/5-steps-to-faster-web-fonts/"&gt;5 steps to faster web fonts - Blog post&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PTaA3Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pntga2z5mwwlxck5xowj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTaA3Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pntga2z5mwwlxck5xowj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#laetitia-bouloc"&gt;
  &lt;/a&gt;
  Laetitia Bouloc
&lt;/h2&gt;

&lt;p&gt;Also known by the name of &lt;strong&gt;N√©ographe Factory&lt;/strong&gt; &lt;em&gt;(The name of her enterprise)&lt;/em&gt;, she is a freelancer in Bordeaux, France.&lt;/p&gt;

&lt;p&gt;She posts in French, generally in a video format, and it's really interesting and fun!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N8cEEuoRzVI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Also, on her website, she has a page that can be your next bookmark! A huge &lt;a href="https://www.neographefactory.com/toolbox.html"&gt;toolbox&lt;/a&gt;!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9BZrgGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mya569zbp7ire1wahpd4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9BZrgGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mya569zbp7ire1wahpd4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;
She is currently writing a book to be able to create your visual identity. It will be in French, but if you understand french and like her job, I think it will be a great buy.&lt;br&gt;
&lt;a href="https://www.neographefactory.com/book-.html"&gt;N√©ographe Factory - Book&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/laetitiabouloc/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/N%C3%A9ographeFactory/videos"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.neographefactory.com/"&gt;N√©ographe Factory - WebSite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So go follow them and go give them some love about their great job about sharing knowledge!&lt;/p&gt;

&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>css</category>
    </item>
    <item>
      <title>Role-Based Security using Entity Framework (Part 1) | Dear Coder</title>
      <author>Kasey Wahl</author>
      <pubDate>Tue, 25 May 2021 12:45:09 +0000</pubDate>
      <link>https://dev.to/piaomu/role-based-security-using-entity-framework-part-1-dear-coder-4d6h</link>
      <guid>https://dev.to/piaomu/role-based-security-using-entity-framework-part-1-dear-coder-4d6h</guid>
      <description>&lt;p&gt;Dear Coder,&lt;/p&gt;

&lt;p&gt;If you're working on an application that allows users to register an account, you've likely encountered the issue of role-based security.&lt;/p&gt;

&lt;p&gt;What is role-based security and why do we need it?&lt;/p&gt;

&lt;p&gt;Say you're working on an application that allows users to share webcomics with each other. You've already built in the features that allow the user to securely upload photos to your database, and you've implemented features that allow users to register an account and log in.&lt;/p&gt;

&lt;p&gt;But now you need to ask what features should be accessible to any user regardless of if they've registered an account, what features should be accessible to registered users, and what features should be available to privileged users.&lt;/p&gt;

&lt;p&gt;This is where role-based security comes in.&lt;/p&gt;

&lt;p&gt;For the sake of my illustration, let's categorize users into four tiers of access:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;anonymous (unregistered) users&lt;/li&gt;
&lt;li&gt;registered users&lt;/li&gt;
&lt;li&gt;Moderators&lt;/li&gt;
&lt;li&gt;Administrators&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#anonymous-user-authorizations"&gt;
  &lt;/a&gt;
  Anonymous User Authorizations
&lt;/h2&gt;

&lt;p&gt;By default, my application allows any user to see, interact with, and use any of the pages on my application.&lt;/p&gt;

&lt;p&gt;But what pages should anonymous users be able to see?&lt;/p&gt;

&lt;p&gt;As a general rule, landing pages and displays of publicly-available data are fine for anonymous end-users to see.&lt;/p&gt;

&lt;p&gt;Some developers may maintain applications that contain a large amount of sensitive data, however, which means it might be appropriate to refactor the application's default authorization.&lt;/p&gt;

&lt;p&gt;We can do this with some interplay between the &lt;code&gt;[Authorize]&lt;/code&gt; and &lt;code&gt;[AllowAnonymous]&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;But more on anonymous users later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registered-users"&gt;
  &lt;/a&gt;
  Registered Users
&lt;/h2&gt;

&lt;p&gt;Let's back up and talk about the &lt;code&gt;[Authorize]&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;If I want my application to handle uploads, it's in my best interest to deny anonymous users access to some of my views. I can do this with a simple keyword called "Authorize"&lt;/p&gt;

&lt;p&gt;To prompt a user to register and log in to see a View, I need to access the controller that handles the get and post http requests for the Views I want to authorize.&lt;/p&gt;

&lt;p&gt;To illustrate, let's look in my ToonSpace webtoons application, and access the Uploads controller.&lt;/p&gt;

&lt;p&gt;I don't want anonymous users to be able to upload to my website, so I need to make a small change under the "get" action by adding &lt;code&gt;[Authorize]&lt;/code&gt; above the action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMYXDKHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se5z34c683u8yrfr1kub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMYXDKHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se5z34c683u8yrfr1kub.png" alt="Get Create Action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This simply ensures that only users who have registered an account and are logged in can access the "Create" view to upload something new to the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moderators-and-administrators"&gt;
  &lt;/a&gt;
  Moderators and Administrators
&lt;/h2&gt;

&lt;p&gt;ÔªøI've grouped moderators and administrators together because the code for my Moderator and Administrator permissions is essentially the same. The only differences are discretionary. I grant some permissions to both roles and others to just the Administrator.&lt;/p&gt;

&lt;p&gt;So how do I grant special permissions to these roles?&lt;/p&gt;

&lt;p&gt;Just a few simple lines of text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtXdiUXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvoqe97de6md8qys6qo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtXdiUXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvoqe97de6md8qys6qo2.png" alt="Administrator Auth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To authorize a moderator as well, I simply add a comma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Authorize(Roles = "Administrator, Moderator"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've created the structure for role-based security. Any user may create an account and log in, and anonymous users are not allowed to post anything. But what if I want to set the default to allow anonymous users to post something (like a comment)? I can simply use the &lt;code&gt;[AllowAnonymous]&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;And what about these Administrator and Moderator roles? How do I differentiate between which users are in these roles?  Should anyone be allowed to sign up as an Administrator or Moderator?&lt;/p&gt;

&lt;p&gt;I'm sure you already know, dear Coder, that allowing the user to sign up as an Admin is probably not a great idea. What I can do instead, however, is "seed" a designated user as an Administrator or Moderator.&lt;/p&gt;

&lt;p&gt;But that will be the topic of my next letter.&lt;br&gt;
If you'd like to read more letters, you can find them at &lt;a href="http://www.dear-coder.com/"&gt;dear-coder.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Until next time, godspeed in your keystrokes.&lt;/p&gt;

&lt;p&gt;Clickity Clacks,&lt;/p&gt;

&lt;p&gt;Kasey&lt;/p&gt;

</description>
      <category>security</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
