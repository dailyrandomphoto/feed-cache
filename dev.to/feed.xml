<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Trees, the essential heroes of data structures</title>
      <author>Premkumar Chalmeti</author>
      <pubDate>Mon, 30 Aug 2021 05:21:35 +0000</pubDate>
      <link>https://dev.to/premchalmeti/trees-the-essential-heroes-of-data-structures-2mne</link>
      <guid>https://dev.to/premchalmeti/trees-the-essential-heroes-of-data-structures-2mne</guid>
      <description>&lt;p&gt;Most of the softwares under the hood are data structures and algorithms. These are the essential tools(skills) for software craftsmen. If you are a developer, you must have come across a task where you had to use data structures and apply an algorithm to solve the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR;
&lt;/h3&gt;

&lt;p&gt;This article explains a use case on how trees are useful for organizing hierarchical data and processing them using a recursive algorithm.&lt;br&gt;
The source code is available at &lt;a href="https://github.com/premchalmeti/clish_xml_parser"&gt;https://github.com/premchalmeti/clish_xml_parser&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I recently started working with a virtualization products company that operates in enterprise data services. A virtual machine contains storage disks attached to it and these VMs collectively called storage clusters.&lt;/p&gt;

&lt;p&gt;The clusters had an admin CLI(Command Line Interface) using CLISH(pronounce: see-lish) framework. My job was to create a safe CLI for users to execute mostly read-only commands.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is%C2%A0clish"&gt;
  &lt;/a&gt;
  What is¬†CLISH??
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A CLISH(&lt;strong&gt;C&lt;/strong&gt;ommand &lt;strong&gt;L&lt;/strong&gt;ine &lt;strong&gt;I&lt;/strong&gt;nterface &lt;strong&gt;SH&lt;/strong&gt;ell) is an open-source framework used to create CLI on *nix platforms.&lt;/li&gt;
&lt;li&gt;In CLISH, adding a new menu in the console is as simple as writing an XML(&lt;code&gt;clock.xml&lt;/code&gt;) file. You just have to define all your commands(&lt;em&gt;clock set&lt;/em&gt;, &lt;em&gt;clock timezone&lt;/em&gt;) in an XML file at a single location.&lt;/li&gt;
&lt;li&gt;Now, The CLISH reads these XMLs and generate an instance of CLI like this,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUAow_v8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg9rb7sdsx81g2weohne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUAow_v8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg9rb7sdsx81g2weohne.png" alt="CLISH Console" title="CLISH Console"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem üí≠
&lt;/h3&gt;

&lt;p&gt;Let's explore the problem by taking an example,&lt;/p&gt;

&lt;p&gt;In admin CLI, a network menu has all the commands like &lt;em&gt;network show&lt;/em&gt;, &lt;em&gt;network device add&lt;/em&gt;, etc.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In user CLI, a network module (&lt;code&gt;user_network.xml&lt;/code&gt;) has only safe commands in it.&lt;br&gt;
A safe command doesn't alter the state (configuration to be precise) of the cluster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;network device add&lt;/em&gt;: not safe (add a new device hence alters the state of the clusters)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;network show&lt;/em&gt;: safe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This safe command's definition is provided in a JSON schema file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, the first step in the process of creating a CLI was to write a parser that does the following things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the JSON schema file&lt;/li&gt;
&lt;li&gt;Loads the corresponding source XML file (&lt;em&gt;source_file&lt;/em&gt; key in the JSON)&lt;/li&gt;
&lt;li&gt;Parse the XML and remove the unsafe commands (The algorithm is explained later)&lt;/li&gt;
&lt;li&gt;Output the safe XML (&lt;code&gt;user_network.xml&lt;/code&gt;) to be used for user CLI&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, we can not directly use the schema file for parsing. If you notice in the above XML file the CLI has a particular format to group related commands under a parent command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;network device&lt;/em&gt; groups &lt;em&gt;network device add&lt;/em&gt;, &lt;em&gt;network device delete&lt;/em&gt;, etc&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;network device configure&lt;/em&gt; groups &lt;em&gt;network device configure rename&lt;/em&gt;, &lt;em&gt;network device configure ip&lt;/em&gt;, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, if all child commands are removed (are unsafe) then the parent command has to be removed and so on till the root node.&lt;/p&gt;

&lt;p&gt;Iterating a list of commands without any relation among them is difficult to operate on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution üí°
&lt;/h3&gt;

&lt;p&gt;This stringent parsing requires the commands to be organized in a hierarchy then recursively process the nodes from bottom to up. (The image gives more idea).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Trees are best data structures for storing data in hierarchical order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A simple variant of &lt;strong&gt;general trees&lt;/strong&gt; fits the bill. A general tree contains zero or more child nodes.¬†&lt;/p&gt;

&lt;p&gt;We can tokenize each command and prepare a common general tree definition from the current schema file. We will refer to this tree as &lt;em&gt;CmdTree&lt;/em&gt;. A general tree for the &lt;code&gt;admin_network.xml&lt;/code&gt; constructed using the schema file looks below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07uktp-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63if4yndaolqh1f26tu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07uktp-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63if4yndaolqh1f26tu0.png" alt="Tree to XML Mapping" title="Tree to XML Mapping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each node in the above tree has a cmd token (network, show, device) and has some more metadata used while parsing.&lt;/p&gt;

&lt;p&gt;Finally, we can now derive this recursive algorithm for parsing the XML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#algorithm"&gt;
  &lt;/a&gt;
  Algorithm üìù
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The final XML will look like this.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Since this XML only contains safe commands after parsing. These XMLs can now be used for creating a safe CLI for the users.&lt;/p&gt;

&lt;p&gt;The source code is available at &lt;a href="https://github.com/premchalmeti/clish_xml_parser"&gt;https://github.com/premchalmeti/clish_xml_parser&lt;/a&gt;&lt;/p&gt;




</description>
      <category>algorithms</category>
      <category>problemsolving</category>
      <category>cli</category>
      <category>xmlparsing</category>
    </item>
    <item>
      <title>GPIO Programming on the Raspberry Pi: Python Libraries</title>
      <author>Sebastian</author>
      <pubDate>Mon, 30 Aug 2021 05:21:34 +0000</pubDate>
      <link>https://dev.to/admantium/gpio-programming-on-the-raspberry-pi-python-libraries-4e5m</link>
      <guid>https://dev.to/admantium/gpio-programming-on-the-raspberry-pi-python-libraries-4e5m</guid>
      <description>&lt;p&gt;The Raspberry Pi is single board computer with now four revisions and a minimalistic zero variant. It is a popular choice for different projects because of its small size, efficient power consumption, processing speed and by being a full Linux based computer.&lt;/p&gt;

&lt;p&gt;When you want to connect several microcontrollers with each other, several protocols exist: I2C, SIP, and UART. In my last two articles, I explained these protocols and showed examples for C++ libraries with Arduino and with the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;This article now presents general GPIO libraries for working with the Raspberry Pi. The libraries are Wiring Pi, Pigpio, Gpiozero, Rpi.GPIO. Each library is explained with a description, its main features, a code example on Python, and a code example in C if supported by the library. I assume you have a general understanding of GPIO programming, and will therefore not explicitly detail each source code line in the examples.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article originally appeared at &lt;a href="https://admantium.com/blog/micro08_raspberry_pi_gpio_programming/"&gt;my blog admantium.com&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wiring-pi"&gt;
  &lt;/a&gt;
  Wiring Pi
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/WiringPi/WiringPi"&gt;WiringPi&lt;/a&gt; library is an often used, functional rich library that supports I2C and SPI connections. It is written in C and provides Python bindings. The library is unfortunately deprecated as the &lt;a href="http://wiringpi.com/wiringpi-deprecated/"&gt;original author stated&lt;/a&gt;. Decide yourself if you want to use the library: On one hand, you find several examples on the internet, on the other hand, members from the Raspberry Pi community start to move to new libraries.&lt;/p&gt;

&lt;p&gt;The libraries latest version can be accessed on Github: See the &lt;a href="https://github.com/WiringPi/WiringPi"&gt;WiringPi C&lt;/a&gt; and &lt;a href="https://github.com/WiringPi/WiringPi-Python"&gt;WiringPi Python&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;wiringPi.h&amp;gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define LED_PIN 6
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1050&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wiringpi&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="n"&gt;wiringpi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wiringPiSetup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;wiringpi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;wiringpi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;wiringpi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pigpio"&gt;
  &lt;/a&gt;
  Pigpio
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="http://abyz.me.uk/rpi/pigpio/"&gt;pigpio&lt;/a&gt; is an actively developed library with an impressive set of features: All GPIO pins of the Raspberry Pi can be read, written to, attached to interrupt handlers, and output PWM signals at the same time. Also, UART, I2C and SPI protocols are implemented. It is written in C and also provides Python bindings. Go to the &lt;a href="https://github.com/joan2937/pigpio"&gt;official Github repository&lt;/a&gt; and build the newest version on your Raspberry Pi, or install it with &lt;code&gt;apt install pigpio python-pigpio python3-pigpio&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;pigpio.h&amp;gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define LED_PIN 6
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;gpioInitialise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;gpioSetMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PI_OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;gpioDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gpioWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gpioDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gpioWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pigpio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pigpio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pigpio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="err"&gt;‚ÄÉ&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚ÄÉ&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚ÄÉ&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‚ÄÉ&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gpiozero"&gt;
  &lt;/a&gt;
  Gpiozero
&lt;/h2&gt;

&lt;p&gt;Officially endorsed by the Raspberry Foundation, &lt;a href="https://gpiozero.readthedocs.io/en/stable/"&gt;gpiozero&lt;/a&gt; is a Python-only library that not only accesses the GPIO pins, but also provides direct hardware support for working with actuators and sensors. For connecting other devices, only SPI is supported - &lt;a href="https://bennuttall.com/whats-new-gpio-zero-v1-4/"&gt;I2C was announced&lt;/a&gt;, but is not included yet.&lt;/p&gt;

&lt;p&gt;Gpiozero is already installed in the current Raspberry Pi OS - if not, just run &lt;code&gt;python3 -m pip gpiozero&lt;/code&gt;. The source code files can be accessed on &lt;a href="https://github.com/gpiozero/gpiozero"&gt;Github&lt;/a&gt;. The official documentation on &lt;a href="https://gpiozero.readthedocs.io/en/stable/installing.html"&gt;readthedocs.io&lt;/a&gt; provides rich information and plenty example code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gpiozero&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rpigpio"&gt;
  &lt;/a&gt;
  Rpi.GPIO
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://pypi.org/project/RPi.GPIO/"&gt;RPI.GPIO&lt;/a&gt; library is another Python-only library. It provide basic interactions with the GPIO pins, but no implementation of any connection protocol yet. The projects python files can be downloaded from &lt;a href="https://pypi.org/project/RPi.GPIO/"&gt;Pypi.org&lt;/a&gt;, the projects home page is hosted on &lt;a href="https://sourceforge.net/p/raspberry-gpio-python/tickets/190/"&gt;Scourceforge&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;ledPin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BCM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ledPin&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article presented four Raspberry Pi GPIO programming libraries: WiringPI, Pigpio, Gpiozero, RPI.GPIO. For each library, I explained the main feature, linked to their homepages and/or source code repositories, and gave a short example source code example in C and/or Python.&lt;/p&gt;

</description>
      <category>raspberrypi</category>
      <category>python</category>
      <category>gpio</category>
    </item>
    <item>
      <title>Best tech movies that every programmer must watch</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Mon, 30 Aug 2021 05:18:26 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/best-tech-movies-that-every-programmer-must-watch-37c9</link>
      <guid>https://dev.to/koulurunandakishorereddy/best-tech-movies-that-every-programmer-must-watch-37c9</guid>
      <description>&lt;p&gt;Every programmer would love to see their profession from the perspective of movies. We all know Hollywood is well known for showcasing programming and Artificial Intelligence in the right ways. So, without any further ado, here are the 10 best movies that every programmer must watch.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1.Tron&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The movie is released in 1982. It is a science fiction action-adventure film. The direction was by Steven Lisberger from a story by Lisberger and starred by Jeff Bridges as a computer programmer. The Movie shows how Jeff Bridges get sucked in the computer world and tries to escape from there by interacting with the computer world. At last, he manages to get skipped from this computer world and return to the normal world by applying his knowledge. This turns out to be the best movie to watch for the programmers as it teaches us to apply our tech knowledge in different situations. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. Hackers &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The movie is released in 1995. It is directed by Iain Softley and stars Jonny Lee Miller. This movie was released when the usage of the internet was not famous. The movie shows how few high school student uses their tech knowledge for corporate extortion. The movie got mixed reviews from critics but it was a masterpiece for programmers and security enthusiasts. &lt;/p&gt;
 

&lt;p&gt;&lt;b&gt;3. The Pirates of Silicon Valley&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The Pirates of Silicon Valley was released in 1999. This movie tells the story of how Apple and Microsoft became so successful. It tells how Steve Jobs and Bill Gates came up with the idea of creating a personal computer that could be used by everyone. The movie shows the ideology and methodology both of them used to develop their top line of computers. The movie is highly recommended for techies.&lt;/p&gt;

&lt;p&gt;
The Movie begins with IBM in the early 1980s. At that time the IBM was unbeatable in the field of computing. And at that time the Steve Jobs set up their own company named ‚ÄúApple‚Äù and started making computers in the garage. Ultimately the movie shows the ideology and methodology both of them used for making the line of the computer and now they are one of the top software companies in the world.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;4. The Imitation Game&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The movie came out in 2014 and it shows the invention of the world‚Äôs very the first computer by Alan Turing and his team. It shows how at the end of the movie Alan and his team were able to come up with a way to decode the German Enigma Code. This movie can be very inspirational for the programmers.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;5.  The Social Network &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This movie is based on a true story about Facebook and Mark Zuckerberg. The movie is all about the growth of Facebook and the challenges Zuckerberg had to face. The programmers will surely love this movie as it shows the achievements of a dedicated programmer.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;6. The Internship &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is a movie about two adults Billy and Nick who lose their jobs and then apply for Google‚Äôs competitive internship program. They both get chosen to join the internship program at Google headquarters in Mountain View California. Here, they have to compete with a young group of people, who are tech geniuses. This would be a great movie for those who think they are too old to learn the tech stuff.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;7. Antitrust &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;It was released in 2001. It is a techno-thriller film. The direction is by Peter Howitt. If you want to know about the software world's dirty side, then this movie is best recommended. The film frame the ideal programmers working in a corporation company providing a significant salary and informal working environment. A young talented programmer gets the organisation's job but later finds out that something is wrong there. 
The programmer then uses his tech skills and find out the issue. This movie is an all-time favourite for programmers as it shows the best way of applying your tech knowledge. &lt;/p&gt;

&lt;b&gt;8. Jobs&lt;/b&gt;
&lt;p&gt;This is the biopic of the legend in the world of computers, Steve Jobs. Indeed a very inspirational movie. This movie not only shows the technical skills Jobs but also his vision of changing the world.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;9. Ex Machina&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The Movie was released in 2014. It is a science fiction psychological thriller film. The direction was by Alex Garland. The movie shows a lot of applications of technology like artificial intelligence on mankind to have a better life. The story reloves around the programmer who is invited by his CEO to an intelligent humanoid robot. It shows the struggle of the programmers in the software world and the harmful effects on society if this technology is not used properly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;10. Her&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is a movie about a man named ‚ÄúTheodore‚Äù who is going to get separated from his wife and is very lonely. He purchases an operating system with AI that is designed to adapt and evolve like a human being. This would be an amazing movie for programmers who have an interest in Artificial Intelligence and its future.
&lt;/p&gt;

</description>
      <category>programming</category>
      <category>techtalks</category>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Recursion Examples in Javascript</title>
      <author>ShubhamTiwari909</author>
      <pubDate>Mon, 30 Aug 2021 04:57:11 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/recursion-examples-in-javascript-5h10</link>
      <guid>https://dev.to/shubhamtiwari909/recursion-examples-in-javascript-5h10</guid>
      <description>&lt;p&gt;Hello Everyone Today we are going to see some simple Recursion Examples in Javascript to understand how recursion works.&lt;/p&gt;

&lt;p&gt;What is Recursion?&lt;br&gt;
The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called as recursive function. Using recursive algorithm, certain problems can be solved quite easily.&lt;/p&gt;

&lt;p&gt;Lets see Some examples of Recursion&lt;/p&gt;

&lt;p&gt;Example 1 - Sum of Digits&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum_of_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sum_of_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum_of_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output - 
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working -&lt;/p&gt;

&lt;p&gt;if n === 0 means number is 0 and we will return it as 0&lt;/p&gt;

&lt;p&gt;Logic:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;113 % 10
Q = 11 and R = 3&lt;/li&gt;
&lt;li&gt;11%10
Q = 1 and R  = 1&lt;/li&gt;
&lt;li&gt;1%10
Q = 0 and R = 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3+1+1 = 5&lt;/p&gt;

&lt;p&gt;Example2 - Power&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output - 
32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working - &lt;/p&gt;

&lt;p&gt;if exponent is 0 it means the power is 0 and we return 1&lt;/p&gt;

&lt;p&gt;if exponent is 1 it means the power is 1 so we will return the base as it is&lt;/p&gt;

&lt;p&gt;Logic:&lt;br&gt;
power(2,5)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;2*(2,5-1) = 4&lt;/li&gt;
&lt;li&gt;2*(2,4-1) = 3&lt;/li&gt;
&lt;li&gt;2*(2,3-1) = 2&lt;/li&gt;
&lt;li&gt;2*(2,2-1) = 1&lt;/li&gt;
&lt;li&gt;2*(2,1-1) = 0 so return 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so it becomes 2*4 times 2 or 2*2*2*2*2 = 32&lt;/p&gt;

&lt;p&gt;Example3 - GCD(Greatest Common Divider)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;GCD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;GCD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GCD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output- 
6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working - &lt;/p&gt;

&lt;p&gt;if number1 is negative then we  multiply it by -1 to make it postive and same&lt;br&gt;
for number 2 &lt;/p&gt;

&lt;p&gt;if number2 is 0 then we will return number1 as it is&lt;/p&gt;

&lt;p&gt;Logic:&lt;br&gt;
GCD(48,18)&lt;/p&gt;

&lt;p&gt;Eculids theorem - &lt;br&gt;
48/18 = Q-2 and R=12&lt;br&gt;
18/12 = Q=1 and R=6&lt;br&gt;
12/6 = Q=2 and R=0 when R is zero we have to stop here and our answer is 6&lt;/p&gt;

&lt;p&gt;GCD(48,18)&lt;br&gt;
Then GCD(18,48%18) = GCD(18,12) = GCD(12,6) = GCD(6,0)&lt;br&gt;
in last GCD function call number2 is 0 so we return number1 which is 6&lt;/p&gt;

&lt;p&gt;Example4 - DecimalToBinary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decimalTobinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;decimalTobinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decimalTobinary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1111
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working - &lt;/p&gt;

&lt;p&gt;if number is 0 we return 0&lt;/p&gt;

&lt;p&gt;Logic:&lt;/p&gt;

&lt;p&gt;15&lt;/p&gt;

&lt;p&gt;15%2 = Q-7 and R-1&lt;br&gt;
7%2 = Q-3 and R-1&lt;br&gt;
3%2 = Q-1 and R=1&lt;br&gt;
1%2 = Q-0 and R=1 &lt;/p&gt;

&lt;p&gt;Taking All R together - 1111 which is the binary equivalent of 15&lt;/p&gt;

&lt;p&gt;Example5 - Factorial&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not a number!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output - 
2432902008176640000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working - &lt;/p&gt;

&lt;p&gt;if number is 1 the factorial is 1&lt;/p&gt;

&lt;p&gt;Logic - &lt;br&gt;
number = 4&lt;/p&gt;

&lt;p&gt;num * factorial(num - 1) means&lt;br&gt;
4 * (4-1) * (3-1) * (2-1) * 1 = 4*3*2*1 = 24&lt;/p&gt;

&lt;p&gt;Example6 - Fibonacci&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not a number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output - 
0
1
1
2
3

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working - &lt;br&gt;
1&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCd_g0x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayzhrqo8m1yscl701un7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCd_g0x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayzhrqo8m1yscl701un7.png" alt="1_LNBBacuaBFOVZXUV6VgEEg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically our fib function will continue to recursively call itself creating more and more branches of the tree until it hits the base case, from which it will start summing up each branch‚Äôs return values bottom up, until it finally sums them all up &lt;/p&gt;

&lt;p&gt;These are some of the Recursion Examples and there are many more to learn. So ,  keep Going and learn as much as you can.&lt;/p&gt;

&lt;p&gt;I am learning DSA and trying to understand the concepts as much as i can , still if there is any mistake in this post , please mention it in the comment Section.&lt;/p&gt;

&lt;p&gt;THANK YOU FOR READING THIS POST.&lt;/p&gt;

&lt;p&gt;Instagram - &lt;a href="https://instagram.com/w_a_a_d_u__h_e_c_k"&gt;https://instagram.com/w_a_a_d_u__h_e_c_k&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Setup VS Code for Designer and Front-end Developers</title>
      <author>Yogesh Devaliya</author>
      <pubDate>Mon, 30 Aug 2021 04:11:27 +0000</pubDate>
      <link>https://dev.to/yogeshdev/setup-vs-code-for-designer-and-front-end-developers-1fli</link>
      <guid>https://dev.to/yogeshdev/setup-vs-code-for-designer-and-front-end-developers-1fli</guid>
      <description>&lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt; is one of the most popular, free, and favorite code editors among all the others available in the market.&lt;/p&gt;

&lt;p&gt;VS Code has a vast set of features and customization options and tons of extensions.&lt;/p&gt;

&lt;p&gt;I will present to you my code editor configuration and settings for the work.&lt;/p&gt;

&lt;p&gt;In this article, I will share with you how to customize the VS Code for Front-end developers and designers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Steps:&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Installation&lt;/li&gt;
&lt;li&gt;  Set Color theme, Font and File Icon Theme&lt;/li&gt;
&lt;li&gt;  Tools &amp;amp; Languages(Lang Highlighter and Autocomplete)&lt;/li&gt;
&lt;li&gt;  Install extensions/plugins&lt;/li&gt;
&lt;li&gt;  Keybindings &amp;amp; Shortcuts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Download and install VS Code from Official website: &lt;a href="https://code.visualstudio.com/Download"&gt;https://code.visualstudio.com/Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The default VS Code looks simple, neat, and clean.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2di40MUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/default_1596691559.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2di40MUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/default_1596691559.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to open a&lt;/strong&gt; &lt;strong&gt;project in VS Code.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Open the terminal/cmd&lt;/li&gt;
&lt;li&gt;  Navigate to the project directory&lt;/li&gt;
&lt;li&gt;  Run command &lt;code&gt;code .&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we'll set up the color theme, font, and theme icons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#color-theme"&gt;
  &lt;/a&gt;
  üé® &lt;strong&gt;Color Theme&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of my all-time favorite color themes is &lt;a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"&gt;Atom's One Dark Pro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Press Ctrl + P and type the command &lt;code&gt;ext install zhuangtongfa.Material-theme&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Or press the Ctrl + Shift + X and search for the color theme &lt;strong&gt;One Dark Pro&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My VS Code One Dark Pro theme Screenshot ==&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TmdlJK2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/colortheme_1596692958.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TmdlJK2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/colortheme_1596692958.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks great, isn't it?&lt;/p&gt;

&lt;p&gt;The other color themes which I liked‚Ä¶&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"&gt;&lt;strong&gt;Material Theme&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;Palenight&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;&lt;strong&gt;Dracula Official&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;Dracula&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dun7hREV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/material-theme_1596716507.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dun7hREV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/material-theme_1596716507.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Material Theme(Palenight)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S85O9McS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/dracula-theme_1596716532.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S85O9McS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/dracula-theme_1596716532.png" alt="Dracula theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dracula Theme&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;Fonts&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The most important thing after the theme is font. The proper selection of font will give you a more decent, elegant &amp;amp; modern look and feel.&lt;/p&gt;

&lt;p&gt;Use the &lt;strong&gt;Programming Monospaced&lt;/strong&gt; fonts(which supports ligatures) for development purposes.&lt;/p&gt;

&lt;p&gt;Currently, I am using &lt;strong&gt;Fira Code&lt;/strong&gt; which also supports the ligatures.&lt;/p&gt;

&lt;p&gt;Fira Code Installation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the font family from Google Fonts: &lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;https://fonts.google.com/specimen/Fira+Code&lt;/a&gt; extract and install it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, set the Fira Code as VS Code font.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Open the settings(Ctrl  + ,) and in the search section enter &lt;strong&gt;Editor: Font Family&lt;/strong&gt; and add the first value as ‚ÄòFira Code‚Äô inside the family list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynnIAgIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/firacode_1596694925.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynnIAgIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/firacode_1596694925.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You can also set the font family in the &lt;strong&gt;settings.json&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontFamily&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'Fira Code', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will enable ligatures.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ligatures supports will convert the fonts into symbols&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Default fonts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NOt9wL5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/font-symbols_1596694343.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NOt9wL5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/font-symbols_1596694343.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Default Symbols&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Font ligatures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_aVIGUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/font-ligatures_1596694511.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_aVIGUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/font-ligatures_1596694511.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ligatures supported symbols&lt;/p&gt;

&lt;p&gt;To enable ligatures you need to enable the settings from the settings.json file.&lt;/p&gt;

&lt;p&gt;Open the settings(ctrl + p) &amp;amp; search settings.json and open the file.&lt;/p&gt;

&lt;p&gt;Then add this line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontLigatures&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is my &lt;strong&gt;settings.json&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.colorTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One Dark Pro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.iconTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eq-material-theme-icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window.zoomLevel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;explorer.confirmDelete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.tree.indent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;liveServer.settings.donotShowInfoMsg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.tabSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.lineHeight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;explorer.confirmDragAndDrop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.formatOnType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.formatOnPaste&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorBlinking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;smooth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontFamily&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'Fira Code', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontLigatures&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.gist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.autoUpload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.autoDownload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.removeExtensions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other monospace programming fonts you can use that supports the ligatures are‚Ä¶&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/microsoft/cascadia-code"&gt;&lt;strong&gt;Cascadia Code&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/i-tu/Hasklig"&gt;&lt;strong&gt;Hasklig&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.jetbrains.com/lp/mono/"&gt;&lt;strong&gt;JetBrains Mono&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://rubjo.github.io/victor-mono/"&gt;&lt;strong&gt;Victor Mono&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/be5invis/Iosevka"&gt;&lt;strong&gt;Iosevka&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#file-icons"&gt;
  &lt;/a&gt;
  üé† &lt;strong&gt;File Icons&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;File icons are great. Using file icons to identify &amp;amp; differentiate between the file and folders and file types.&lt;/p&gt;

&lt;p&gt;Currently, I am using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme-icons"&gt;&lt;strong&gt;Material Theme Icons&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install the File icon(material theme icons)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Press the ctrl + p and type command &lt;code&gt;ext install Equinusocio.vsc-material-theme-icons&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Also, you can search and install the File icon theme from extensions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0D7NWAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/file-icons_1596697500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0D7NWAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/file-icons_1596697500.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other file icon themes are‚Ä¶&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons"&gt;&lt;strong&gt;vscode-icons&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;&lt;strong&gt;Material Icon Theme&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=emmanuelbeziat.vscode-great-icons"&gt;&lt;strong&gt;VSCode Great Icons&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tools-and-languages"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Tools and Languages&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;VSCode has varieties of tools, compilers, highlighting, formatters, etc‚Ä¶&lt;/p&gt;

&lt;p&gt;We will install some of them to enhance the development speed and performance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented"&gt;&lt;strong&gt;SASS&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;Ctl + P &amp;amp; type command &lt;code&gt;ext install Syler.sass-indented&lt;/code&gt;&lt;strong&gt;)&lt;/strong&gt;
Useful for SASS syntax highlighting, Autocomplete &amp;amp; formatter.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass"&gt;&lt;strong&gt;Live Sass Compiler&lt;/strong&gt;&lt;/a&gt;
Compile Sass or Scss to CSS in realtime with a live browser reload.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glWNoz_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/sass-compiler_1596699536.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glWNoz_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/sass-compiler_1596699536.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus"&gt;&lt;strong&gt;language-stylus&lt;/strong&gt;&lt;/a&gt;
Language Highlighting for Stylus, Color preview,
Syntax highlighting
Symbols provider
Completion for selectors, properties, values, variables, functions, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3cdT9jR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/stylus_1596699095.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3cdT9jR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/stylus_1596699095.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;&lt;strong&gt;ES7 React/Redux/GraphQL/React-Native snippets&lt;/strong&gt;&lt;/a&gt;
ES7 syntax and JS/React Snippets&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=jcbuisson.vue"&gt;&lt;strong&gt;VUE&lt;/strong&gt;&lt;/a&gt;
Syntax Highlighting for Vue js&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;&lt;strong&gt;Vutur&lt;/strong&gt;&lt;/a&gt;
Vue tooling for VS Code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#install-extensionsplugins"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install Extensions/Plugins&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We will install the most useful and popular plugins alphabetically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;&lt;strong&gt;Auto Rename Tag&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;3M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Auto rename paired HTML/XML tag
&lt;code&gt;Commnd: ext install formulahendry.auto-rename-tag&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6jw_pAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/autorenametag_1596699932.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6jw_pAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/autorenametag_1596699932.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;&lt;strong&gt;Auto Close Tag&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;(&lt;/strong&gt;3M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
&lt;code&gt;command: ext install formulahendry.auto-close-tag&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujy7msK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/autoclose_1596700177.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujy7msK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/autoclose_1596700177.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=JerryHong.autofilename"&gt;&lt;strong&gt;AutoFileName&lt;/strong&gt;&lt;/a&gt;
Autocomplete file names
&lt;code&gt;command: ext install JerryHong.autofilename&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--heXW54Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/autocomplete_1596705331.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--heXW54Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/autocomplete_1596705331.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;&lt;strong&gt;Beautify&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;(&lt;/strong&gt;5M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Beautify &lt;code&gt;javascript&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;Sass&lt;/code&gt;, and &lt;code&gt;HTML&lt;/code&gt; in Visual Studio Code.
&lt;code&gt;command: ext install HookyQR.beautify&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;&lt;strong&gt;Bracket Pair Colorizer&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;(&lt;/strong&gt;3.4M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Colorize the matching brackets.
&lt;code&gt;command: ext install CoenraadS.bracket-pair-colorizer&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T8-yRXER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/bracketpair_1596704889.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8-yRXER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/bracketpair_1596704889.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bracket Pair Colorizer&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;&lt;strong&gt;Bookmarks&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;1M+ downloads*&lt;em&gt;)&lt;/em&gt;*
This extension is used to mark the point on the file and jump to them.
&lt;code&gt;command: ext install alefragnani.Bookmarks&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xyv-W-fN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/bookmark_1596705530.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xyv-W-fN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/bookmark_1596705530.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight"&gt;&lt;strong&gt;Color Highlight&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;1.1M+  downloads*&lt;em&gt;)&lt;/em&gt;*
Highlight colors in VSCode
&lt;code&gt;command: ext install naumovs.color-highlight&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVHQguHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/color-highlight_1596705850.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVHQguHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/color-highlight_1596705850.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=bierner.color-info"&gt;&lt;strong&gt;Color Info&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;320k+ downloads*&lt;em&gt;)&lt;/em&gt;*
Provides quick information about CSS colors
&lt;code&gt;command: ext install bierner.color-info&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek"&gt;&lt;strong&gt;CSS Peek&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;1M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Allow peeking to CSS ID and class strings as definitions from Html files to respective CSS. Allows peek and goto definition.
Hover over the class name to display the CSS properties.
&lt;code&gt;command: ext install pranaygp.vscode-css-peek&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UyyRgmPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/css-peek_1596706314.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UyyRgmPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/css-peek_1596706314.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"&gt;&lt;strong&gt;DotENV&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;(&lt;/strong&gt;1.1M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Syntax for .env files
&lt;code&gt;command: ext install mikestead.dotenv&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(&lt;/strong&gt;10M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Integrates ESLint JavaScript into VS Code.
&lt;code&gt;command: ext install dbaeumer.vscode-eslint&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/search?term=html&amp;amp;target=VSCode&amp;amp;category=All%20categories&amp;amp;sortBy=Relevance"&gt;&lt;strong&gt;HTML CSS Support&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;CSS support for HTML
&lt;code&gt;command: ext install ecmel.vscode-html-css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap"&gt;&lt;strong&gt;htmltagwrap&lt;/strong&gt;&lt;/a&gt;
Wraps selected code with HTML tags
&lt;code&gt;command: ext install bradgashler.htmltagwrap&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKQJkKfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/htmltagwrap_1596712676.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKQJkKfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/htmltagwrap_1596712676.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets"&gt;&lt;strong&gt;HTML snippets&lt;/strong&gt;&lt;/a&gt;
HTML5 tag snippets
&lt;code&gt;command: ext install abusaidm.html-snippets&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://designdrastic.com/article/ext%20install%20vincaslt.highlight-matching-tag"&gt;&lt;strong&gt;Highlight Matching Tag&lt;/strong&gt;&lt;/a&gt;
Highlight opening and closing brackets.
&lt;code&gt;command: ext install vincaslt.highlight-matching-tag&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l5fgmvhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/highlight_1596707500.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5fgmvhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/highlight_1596707500.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion"&gt;&lt;strong&gt;IntelliSense for CSS class names in HTML&lt;/strong&gt;&lt;/a&gt;
CSS classname auto completion
&lt;code&gt;command: ext install Zignd.html-css-class-completion&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOwmFF1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/intellisensecss_1596708540.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOwmFF1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/intellisensecss_1596708540.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;&lt;strong&gt;Import Cost&lt;/strong&gt;&lt;/a&gt;
Display import/require file size in the editor itself.
&lt;code&gt;command: ext install wix.vscode-import-cost&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-oiONnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/importcost_1596707748.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-oiONnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/importcost_1596707748.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;&lt;strong&gt;indent-rainbow&lt;/strong&gt;&lt;/a&gt;
Colorize indentation
&lt;code&gt;command: ext install oderwat.indent-rainbow&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bH2wzJWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/indent-rainbow_1596707878.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bH2wzJWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/indent-rainbow_1596707878.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview"&gt;&lt;strong&gt;Image Preview&lt;/strong&gt;&lt;/a&gt;
Show image preview in CSS file on hover
&lt;code&gt;command: ext install kisstkondoros.vscode-gutter-preview&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;&lt;strong&gt;JavaScript (ES6) code snippets&lt;/strong&gt;&lt;/a&gt; (3.8M+ downloads)
Code snippets for ES6
&lt;code&gt;command: ext install xabikos.JavaScriptSnippets&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;&lt;strong&gt;Live Server&lt;/strong&gt;&lt;/a&gt;
Launch local dev server files in browser with live reload &amp;amp; update the content without manual refreshing
&lt;code&gt;command: ext install ritwickdey.LiveServer&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3GqSlpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/live-serve_1596708927.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3GqSlpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/live-serve_1596708927.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;&lt;strong&gt;Prettier - Code formatter&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;(&lt;/strong&gt;7.7M+ downloads*&lt;em&gt;)&lt;/em&gt;*
Code formatter
&lt;code&gt;command: ext install esbenp.prettier-vscode&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/search?term=peaco&amp;amp;target=VSCode&amp;amp;category=All%20categories&amp;amp;sortBy=Relevance"&gt;&lt;strong&gt;Peacock&lt;/strong&gt;&lt;/a&gt;
Customize workspace color
&lt;code&gt;command: ext install johnpapa.vscode-peacock&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYRf9njG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/peacock_1596710143.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYRf9njG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://designdrastic.com/uploads/cke/peacock_1596710143.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;&lt;strong&gt;Path Intellisense&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;(&lt;/strong&gt;3.3M+ downloads*&lt;em&gt;)&lt;/em&gt;*
File name Autocompletes
&lt;code&gt;command: ext install christian-kohler.path-intellisense&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIDLQA47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/path-intellisense_1596710319.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIDLQA47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/path-intellisense_1596710319.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;&lt;strong&gt;Settings Sync&lt;/strong&gt;&lt;/a&gt;
Sync settings, plugins, keybindings, themes, icons, etc‚Ä¶ using Github gist.
&lt;code&gt;command: ext install Shan.code-settings-sync&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log"&gt;&lt;strong&gt;Turbo Console Log&lt;/strong&gt;&lt;/a&gt;
Write meaningful log messages easily and fast.
&lt;code&gt;command: ext install ChakrounAnas.turbo-console-log&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zplCwLl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/turbo-console-log_1596712204.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zplCwLl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://designdrastic.com/uploads/cke/turbo-console-log_1596712204.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;&lt;strong&gt;TabNine&lt;/strong&gt;&lt;/a&gt;
All language auto compiler
&lt;code&gt;command: ext install TabNine.tabnine-vscode&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You can also configure the settings text file.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#myy-configuration"&gt;
  &lt;/a&gt;
  üåà &lt;strong&gt;Myy configuration&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;settings.json&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.colorTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One Dark Pro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.iconTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eq-material-theme-icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.editor.highlightModifiedTabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window.zoomLevel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;explorer.confirmDelete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.tree.indent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;liveServer.settings.donotShowInfoMsg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.tabSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.lineHeight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;explorer.confirmDragAndDrop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.formatOnType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.formatOnPaste&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorBlinking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;smooth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontFamily&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'Fira Code', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontLigatures&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.gist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.autoUpload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.autoDownload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sync.removeExtensions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**** More frequent and useful shortcuts(&lt;strong&gt;keybinding&lt;/strong&gt;)**&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key binding / Shortcuts&lt;/th&gt;
&lt;th&gt;Function / Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Z&lt;/td&gt;
&lt;td&gt;Toggle Word Wrap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + D&lt;/td&gt;
&lt;td&gt;Select the Word and matched words&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + ,&lt;/td&gt;
&lt;td&gt;Open Settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + `&lt;/td&gt;
&lt;td&gt;Open Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + P&lt;/td&gt;
&lt;td&gt;Open file explorer/Execute commands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + Shift + P&lt;/td&gt;
&lt;td&gt;Command Palette&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + Shift + (Left/Right) Arrow&lt;/td&gt;
&lt;td&gt;Select the Word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Arrow(up/down)&lt;/td&gt;
&lt;td&gt;Move the line to up or bottom&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Shift + (Up/Down) Arrow&lt;/td&gt;
&lt;td&gt;Copy the lines for multiple edits.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + /&lt;/td&gt;
&lt;td&gt;To comment uncomment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + N&lt;/td&gt;
&lt;td&gt;New tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + F&lt;/td&gt;
&lt;td&gt;Find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + Shift + T&lt;/td&gt;
&lt;td&gt;Reopen the previous tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + Tab &amp;amp; Ctrl + Shift + Tab&lt;/td&gt;
&lt;td&gt;Switch the tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;VSCode Keyboard shortcuts for Linux ==&amp;gt;&lt;/strong&gt; &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VSCode Keyboard shortcuts for Windows ==&amp;gt;&lt;/strong&gt; &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VSCode Keyboard shortcuts for MacOS ==&amp;gt;&lt;/strong&gt; &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Design drastic post =&amp;gt; &lt;a href="https://designdrastic.com/article/setup-vs-code-for-designer-and-front-end-developers"&gt;https://designdrastic.com/article/setup-vs-code-for-designer-and-front-end-developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading. I hope this will help you to improve the performance, speed, and productivity of your editor.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>performance</category>
    </item>
    <item>
      <title>Vocabulary Building</title>
      <author>vindhya Hegde </author>
      <pubDate>Mon, 30 Aug 2021 03:16:20 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-3pc1</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-3pc1</guid>
      <description>&lt;p&gt;Hello, Daily I will come up with a post consisting of new 5 words that I have learned and which are frequently asked in GREs with Pictorial representation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;harangue&lt;/strong&gt;(noun) :  A long pompous speech; a tirade&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgER32d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/oRTfvD4uNa4/hqdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgER32d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/oRTfvD4uNa4/hqdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=harangue&amp;amp;oq=harangue&amp;amp;aqs=chrome.0.69i59j0i433i512j0i512l8.10127j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ambivalent&lt;/strong&gt;(adjective) : having mixed feelings or contradictory ideas about something or someone.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTjG1xmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.vocationvillage.com/wp-content/uploads/2016/02/what-to-do-about-ambivalence.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTjG1xmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.vocationvillage.com/wp-content/uploads/2016/02/what-to-do-about-ambivalence.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=ambivalent&amp;amp;oq=ambivalent&amp;amp;aqs=chrome..69i57j0i433i512j0i512l2j0i433i512j0i512l5.7747j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prevaricate&lt;/strong&gt;(verb) : to speak in an evasive way&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPOqP0MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://static1.squarespace.com/static/54ad91eae4b04d2abc8d6247/t/55bc52a3e4b055590b32d8aa/1438405283815/%3Fformat%3D1500w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPOqP0MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://static1.squarespace.com/static/54ad91eae4b04d2abc8d6247/t/55bc52a3e4b055590b32d8aa/1438405283815/%3Fformat%3D1500w" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=prevaricate&amp;amp;oq=prev&amp;amp;aqs=chrome.0.69i59j69i57j0i433i512j69i65l2j69i61j69i60l2.6100j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;aberration&lt;/strong&gt;(noun) : a deviation from what is normal or expected&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qmVbNXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://webstockreview.net/images/mirror-clipart-person-12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qmVbNXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://webstockreview.net/images/mirror-clipart-person-12.gif" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=aberration&amp;amp;oq=aberra&amp;amp;aqs=chrome.0.69i59j69i57j0i20i131i263i433i512j0i433i512j0i512l6.3793j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;censure&lt;/strong&gt;(verb) : to express strong disapproval&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MDLlS58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/O9USRUCzytU/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MDLlS58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/O9USRUCzytU/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=censure&amp;amp;oq=censure&amp;amp;aqs=chrome.0.69i59j0i20i263i433i512j0i512j0i433i512j0i512l2j0i131i433i512j0i512l3.7661j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps to you if you are preparing for GRE exams..&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>day2</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 37: File Manager Command Palette</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 30 Aug 2021 02:42:49 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-37-file-manager-command-palette-ijm</link>
      <guid>https://dev.to/taw/electron-adventures-episode-37-file-manager-command-palette-ijm</guid>
      <description>&lt;p&gt;And now it's time to add command palette to our file manager. It will be very simple at first, but we can keep adding features to it over the next few episodes.&lt;/p&gt;

&lt;p&gt;I sort of wonder if I'm doing things backwards, as the file manager doesn't actually do anything yet, other than being a retro looking &lt;code&gt;ls&lt;/code&gt;. We'll get to adding all the functionality eventually.&lt;/p&gt;

&lt;p&gt;This episodes starts where we left over in episode 36, adding command pallete feature based on episode 35.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srccommandsjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/commands.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This file is shared between keyboard handler and command palette. Once we add application menu, it should hopefully use it as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;F2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openPalette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Close Palette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Escape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closePalette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter Directory&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activateItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Flip Selection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flipItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Go to First File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Go to Last File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;End&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Go to Next File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ArrowDown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nextItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Go to Previous File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ArrowUp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;previousItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Page Down&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PageDown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pageDown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Page Up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PageUp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activePanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pageUp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Quit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;F10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Switch Panel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;switchPanel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is that commands we don't want to have keyboard shortcuts for just won't have &lt;code&gt;key&lt;/code&gt; (currently none, but there will be a lot of them). And commands we don't want in command palette just don't have &lt;code&gt;name&lt;/code&gt; (currently &lt;code&gt;Open Palette&lt;/code&gt; as it's meaningless to open it while it's already open).&lt;/p&gt;

&lt;p&gt;So far the system only features commands that don't require any extra arguments. At some point we'll need to extend it to more complicated commands.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srckeyboardsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/Keyboard.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We just need to do two quick changes. The component will now get &lt;code&gt;active&lt;/code&gt; prop, and if it's set to &lt;code&gt;false&lt;/code&gt;, it will ignore all key events.&lt;/p&gt;

&lt;p&gt;I also added &lt;code&gt;e.stopPropagation()&lt;/code&gt; as now we have multiple keyboard handlers - this one for when palette is closed, and the one in palette when it is open. We don't need this line, but it will save us some debugging headaches as our app gets more complex.&lt;/p&gt;

&lt;p&gt;The rest is as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./commands.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;eventBus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;keydown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srccommandpaletteentrysvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/CommandPaletteEntry.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This component represents a single available command. I previously called it &lt;code&gt;Command&lt;/code&gt;, but I don't think this is a great name.&lt;/p&gt;

&lt;p&gt;It functions just like the one from episode 35, but styling is more in line with our app, and there's one hack to make space key be displayed as &lt;code&gt;"Space"&lt;/code&gt;, even though in JS it is just &lt;code&gt;" "&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;eventBus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closePalette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Space&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{handleClick}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{name}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {#if key}
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{keyName(key)}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#66b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;  &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srccommandpalettesvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/CommandPalette.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This component represents a simple command palette. Compared with what we had previously, styling is changed to match the app, and command list is imported from &lt;code&gt;commands.js&lt;/code&gt; instead of being duplicated here.&lt;/p&gt;

&lt;p&gt;We also need to do &lt;code&gt;event.stopPropagation()&lt;/code&gt; here. Otherwise we'd press &lt;code&gt;Enter&lt;/code&gt; to select command, but that &lt;code&gt;Enter&lt;/code&gt; would also be sent to the regular keyboard handler - which would then try to run it as palette is closed at this point.&lt;br&gt;
In general it's helpful to stop propagation of events even when it's not needed, just to save some debugging.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./commands.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommandPaletteEntry&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CommandPaletteEntry.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;eventBus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;

  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;matchingCommands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closePalette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchingCommands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;matchingCommands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Escape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closePalette&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;a-z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;a-z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"palette"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;use:focus&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{pattern}&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Search for command"&lt;/span&gt; &lt;span class="na"&gt;on:keydown=&lt;/span&gt;&lt;span class="s"&gt;{handleKey}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {#each matchingCommands as command}
      &lt;span class="nt"&gt;&amp;lt;CommandPaletteEntry&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    {/each}
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.palette&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#338&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt; &lt;span class="m"&gt;#004&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#66b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcappsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/App.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The main app component only changed slightly. The template now has &lt;code&gt;CommandPalette&lt;/code&gt; and passes &lt;code&gt;active&lt;/code&gt; flag to the &lt;code&gt;Keyboard&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ui"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    File Manager
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Panel&lt;/span&gt; &lt;span class="na"&gt;initialDirectory=&lt;/span&gt;&lt;span class="s"&gt;{initialDirectoryLeft}&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"left"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Panel&lt;/span&gt; &lt;span class="na"&gt;initialDirectory=&lt;/span&gt;&lt;span class="s"&gt;{initialDirectoryRight}&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Footer&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Keyboard&lt;/span&gt; &lt;span class="na"&gt;active=&lt;/span&gt;&lt;span class="s"&gt;{!paletteOpen}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

{#if paletteOpen}
  &lt;span class="nt"&gt;&amp;lt;CommandPalette&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the script we add small bit of logic to open and close the palette:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommandPalette&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CommandPalette.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;paletteOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openPalette&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paletteOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;closePalette&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paletteOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;eventBus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;switchPanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;activatePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;openPalette&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;closePalette&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rest is as before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;Here's the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tEqGONkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqvhco8dzbzsqo432t19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tEqGONkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqvhco8dzbzsqo432t19.png" alt="Episode 37 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most recent few episodes were fairly heavy. The next few will be much lighter, focusing on a small function at a time. In the next episode, we'll add some highlighting feedback to command palette matches.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-37-file-manager-command-palette"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
    </item>
    <item>
      <title>One Pull Request. One Concern.</title>
      <author>Fagner Brack</author>
      <pubDate>Mon, 30 Aug 2021 02:21:04 +0000</pubDate>
      <link>https://dev.to/fagnerbrack/one-pull-request-one-concern-4ac</link>
      <guid>https://dev.to/fagnerbrack/one-pull-request-one-concern-4ac</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-importance-of-a-pull-request-lies-on-the-definition-of-an-atomic-concern"&gt;
  &lt;/a&gt;
  The importance of a Pull Request lies on the definition of an atomic concern
&lt;/h2&gt;




&lt;p&gt;Git has a command called &lt;code&gt;git-request-pull&lt;/code&gt;. The purpose of the command is to prepare a set of commits so that the owner of a copy of a project can request to the owner of another copy to land a small set of changes. The idea is to be able to share a piece of functionality with the owner of a more trusted version of the project, without requiring additional write access. This opens a wide range of opportunities for collaboration: anyone can clone a trusted project, make changes, and then ask the original author to land those changes.&lt;/p&gt;

&lt;p&gt;When Github came out, it leveraged the philosophy of Git and &lt;a href="https://en.wikipedia.org/wiki/Fork_%28software_development%29"&gt;"forked"&lt;/a&gt; the idea behind &lt;code&gt;git-request-pull&lt;/code&gt;. The purpose was to create an abstraction on top of it so that those who are not familiarized with Git could understand and apply the philosophy of collective collaboration without having to setup mailing lists.&lt;/p&gt;

&lt;p&gt;They called it &lt;a href="https://help.github.com/articles/using-pull-requests/"&gt;Pull Request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Pull Request serves a similar underlying purpose of &lt;code&gt;git-request-pull&lt;/code&gt;, with the difference that it deeply integrates something that was one of the main reasons for the success of Github:&lt;/p&gt;

&lt;p&gt;Collaboration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#a-pull-request-is-a-successful-attempt-to-deeply-integrate-collaboration-to-the-developers-workflow"&gt;
  &lt;/a&gt;
  A Pull Request is a successful attempt to deeply integrate collaboration to the developer's workflow
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Different from the distributed nature of Git, a Github Pull Request is not just a way to "prepare" a set of commits so that it can be sent to the owner of another copy of the project through external means (such as e-mail). A Github Pull Request is the &lt;strong&gt;set of commits&lt;/strong&gt;, that also contains the technical history of everything that was related to that Pull Request. All in a single place.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://github.com/torvalds/linux/pull/17#issuecomment-5654674"&gt;strong objections&lt;/a&gt; to some fundamental decisions and trade-offs of the "Pull Request" approach. What can't be denied, is that Github successfully accomplished its goal, which was to make text collaboration (not just code) more accessible to everyone, providing an interface so simple that even those who can't program can still collaborate.&lt;/p&gt;




&lt;p&gt;Last time, I wrote an article called &lt;a href="https://fagnerbrack.com/one-commit-one-change-3d10b10cebbf"&gt;"One Commit. One Change."&lt;/a&gt;. It explained that a commit represents a single atomic change, an indivisible change. It can &lt;strong&gt;succeed&lt;/strong&gt; entirely or it can fail entirely, but it cannot &lt;strong&gt;partly succeed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a Git commit, we measure "succeed" as the ability of the code to deliver value to the application. "Value" is not just about business value, it can represent payment of a technical debt, legibility fixes or internal interface changes, but it cannot contain certain refactoring or whitespace changes that don't have a clear purpose and therefore can succeed even if part of the change is omitted.&lt;/p&gt;

&lt;p&gt;A Github Pull Request (from now on just "Pull Request") is more than just a set of commits.&lt;/p&gt;

&lt;p&gt;While a commit can only contain a single change, a Pull Request can contain one or more changes that together form a high-level concern.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#a-pull-request-represents-a-way-to-deliver-value-to-the-application-in-the-form-of-a-set-of-changes-that-together-form-a-highlevel-concern"&gt;
  &lt;/a&gt;
  A Pull Request represents a way to deliver value to the application in the form of a set of changes that together form a high-level concern
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is also important for a Pull Request to be atomic. But with a Pull Request, we measure the "succeed" as the ability to deliver the smallest possible piece of functionality, it can either be composed of one or many atomic commits.&lt;/p&gt;

&lt;p&gt;One of the bad practices of a Pull Request is changing things that are not concerned with the functionality that is being addressed, like whitespace changes, typo fixes, variable renaming, etc. If those things are not related to the concern of the Pull Request, it should probably be done in a different one.&lt;/p&gt;

&lt;p&gt;One might argue that this practice of not mixing different concerns and small fixes in the same Pull Request ignores the &lt;a href="http://deviq.com/boy-scout-rule/"&gt;Boy Scout Rule&lt;/a&gt; because it doesn't allow frequent cleanup. However, cleanup doesn't need to be done in the same Pull Request, the important thing is not leaving the codebase in a bad state after finishing the functionality. If you must, refactor the code in a separate Pull Request, and preferably &lt;strong&gt;before&lt;/strong&gt; the actually concerned functionality is developed, because then if there is a need in the near future to revert the Pull Request, the likelihood of code conflict will be lower.&lt;/p&gt;




&lt;p&gt;It is important to note that, on the Linux kernel mailing list, the &lt;code&gt;git-request-pull&lt;/code&gt; command is used by maintainers of some copies of the kernel to sync their trees into larger ones and eventually into the mainline, and that might not contain a single concern. For a single concern they use a "patch set", or "patch series":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On the Linux kernel mailing list, patch sets are used for grouping atomic changes and should have what the author calls one concern. Pull requests are usually used by subtree maintainers to sync their trees into larger trees and eventually into the mainline. In this case, pull requests can contain patches from many community members that the maintainer has applied to his/her tree in which case pull requests do not address a single concern [‚Ä¶]&lt;br&gt;
-- User &lt;a href="https://www.reddit.com/user/mdmd136"&gt;mdmd136&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/git/comments/4nnznq/one_pull_request_one_concern/d45p3uo"&gt;Reddit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what does "patch set" means in the context of the Linux kernel development mailing list?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[‚Ä¶] The cover letter does not contain a patch, but describes the theme of the entire patch series and usually has a diff stat of the set [‚Ä¶]&lt;br&gt;
-- Excerpt from &lt;a href="https://www.reddit.com/user/mdmd136"&gt;mdmd136&lt;/a&gt;'s &lt;a href="https://www.reddit.com/r/git/comments/4nnznq/one_pull_request_one_concern/d48lra2"&gt;comment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;A Pull Request shares the same fundamental purpose of &lt;code&gt;git-request-pull&lt;/code&gt;, with the difference that it is useful to express the intent of a single atomic concern, something that most of the time shouldn't be done using only a single commit.&lt;/p&gt;

&lt;p&gt;Most of the atomicity advantages of a commit are also advantages of a Pull Request but at a higher level.&lt;/p&gt;

&lt;p&gt;It doesn't matter &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/"&gt;which workflow you've chosen&lt;/a&gt;, using Pull Requests efficiently containing an atomic concern can help to scale the codebase through collaboration.&lt;/p&gt;




&lt;p&gt;Thanks for reading. If you have some feedback, reach out to me on &lt;a href="https://twitter.com/FagnerBrack"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/fagner.brack"&gt;Facebook&lt;/a&gt; or &lt;a href="http://github.com/FagnerMartinsBrack"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dev</category>
      <category>programming</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>Azure Cosmos DB | Mongo DB - Embedding vs Reference</title>
      <author>geetcloud</author>
      <pubDate>Mon, 30 Aug 2021 01:46:55 +0000</pubDate>
      <link>https://dev.to/geetcloud/azure-cosmos-db-mongo-db-embedding-vs-reference-81p</link>
      <guid>https://dev.to/geetcloud/azure-cosmos-db-mongo-db-embedding-vs-reference-81p</guid>
      <description>&lt;p&gt;Schema-less Databases similar to &lt;strong&gt;Mongo DB&lt;/strong&gt; help us design models, store and query data easily and rapidly. But it is very important to understand, design and create the right schema design for your application which has great impact on the performance, scalability, costs etc.&lt;/p&gt;

&lt;p&gt;Below are the key factors we need to consider before start designing our data models in Mongo DB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Understand the difference between Normalized/Relational database to a Schema-less Mongo/Azure Cosmos DB&lt;/li&gt;
&lt;li&gt;  Is our application read or write heavy&lt;/li&gt;
&lt;li&gt;  How to model data in a schema-less database?&lt;/li&gt;
&lt;li&gt;  In which scenarios we need to embed data and which scenarios we need to refer to data?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#embedding-data-model-pattern"&gt;
  &lt;/a&gt;
  Embedding data model pattern
&lt;/h4&gt;

&lt;p&gt;As a developer/architect, when we start working in a schema-less database, we always tend to design schema similar to relational or normalized database. We would like to design the data into multiple tables as we traditionally design in a SQL normalized database but we would miss the great advantages of Mongo DB.&lt;/p&gt;

&lt;p&gt;So it is better to understand the difference between traditional Normalized/Relational Database and Schema-less database.&lt;/p&gt;

&lt;p&gt;For example, in a relational schema design, developers design the schema independent of queries. will normalize the data into multiple entities to avoid storing redundant data on each record and rather refer to the data in the related entities.&lt;/p&gt;

&lt;p&gt;In the below example, it illustrates how we model order data in a relational database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order Data - Schema Design in Relational Database&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-ApBobkJpu0Q/YRCt5NRX9xI/AAAAAAAAAD4/m0jEU9AxJTEK5hqfeKsipiOgETl8PbHJwCLcBGAsYHQ/s825/Screen%2BShot%2B2021-08-08%2Bat%2B9.22.17%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQ0n6GZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ApBobkJpu0Q/YRCt5NRX9xI/AAAAAAAAAD4/m0jEU9AxJTEK5hqfeKsipiOgETl8PbHJwCLcBGAsYHQ/w640-h426/Screen%252BShot%252B2021-08-08%252Bat%252B9.22.17%252BPM.png" alt="Order Data - Schema Design in Relational Database"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To query the order, item details, contact details, etc, we need to make joins to other tables and fetch the data.&lt;/p&gt;

&lt;p&gt;In the same manner, to update a single order item details, we need to update multiple tables.&lt;/p&gt;

&lt;p&gt;Let's see how we can design the same order data model in Mongo / Azure Cosmos DB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  { 
‚Äúid‚Äù: ‚Äú1‚Äù, 
‚Äúorderdate‚Äù: ‚Äú02/08/2021‚Äù,
‚Äútax‚Äù : ‚Äú8‚Äù,
‚Äúsubtotalbeforetax‚Äù: ‚Äú69‚Äù,
‚Äúshipmentdate‚Äù: ‚Äú03/08/2021‚Äù,
‚Äúorderitems‚Äù: [ 
 { 
  ‚Äúitemname‚Äù: ‚Äúitem1‚Äù,
  ‚Äúquantity‚Äù: ‚Äú2‚Äù,
  ‚Äúitemprice‚Äù: ‚Äú12‚Äù,
  ‚Äútotalprice‚Äù:‚Äù24" 
 },
 { ‚Äúitemname‚Äù: ‚Äúitem2‚Äù,
   ‚Äúquantity‚Äù: ‚Äú3‚Äù,
   ‚Äúitemprice‚Äù: ‚Äú15‚Äù,
   ‚Äútotalprice‚Äù: ‚Äú45‚Äù
 } 
],
‚Äúshippingcontact‚Äù: [ 
 {
   ‚Äúname‚Äù: ‚Äú&amp;lt;&amp;lt;person1&amp;gt;&amp;gt;‚Äù,
   ‚Äústreet‚Äù: ‚Äú&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;‚Äù,
   ‚Äúcity‚Äù: ‚Äú&amp;lt;&amp;lt;city1&amp;gt;&amp;gt;‚Äù, 
   ‚Äústate‚Äù: ‚Äú&amp;lt;&amp;lt;state1&amp;gt;&amp;gt;‚Äù,
   ‚Äúcountry‚Äù: ‚Äú&amp;lt;&amp;lt;country1&amp;gt;&amp;gt;‚Äù, 
   ‚Äúzipcode‚Äù: ‚Äú&amp;lt;&amp;lt;zipcode1&amp;gt;&amp;gt;‚Äù,
   ‚Äúphone‚Äù: ‚Äú&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;‚Äù
 },
]
 ‚Äúbillingcontact‚Äù: [ 
 {
  ‚Äúname‚Äù: ‚Äú&amp;lt;&amp;lt;person1&amp;gt;&amp;gt;‚Äù,
  ‚Äústreet‚Äù: ‚Äú&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;‚Äù,
  ‚Äúcity‚Äù: ‚Äú&amp;lt;&amp;lt;city1&amp;gt;&amp;gt;‚Äù, 
  ‚Äústate‚Äù: ‚Äú&amp;lt;&amp;lt;state1&amp;gt;&amp;gt;‚Äù,
  ‚Äúcountry‚Äù: ‚Äú&amp;lt;&amp;lt;country1&amp;gt;&amp;gt;‚Äù,
  ‚Äúzipcode‚Äù: ‚Äú&amp;lt;&amp;lt;zipcode1&amp;gt;&amp;gt;‚Äù,
  ‚Äúphone‚Äù: ‚Äú&amp;lt;&amp;lt;street1&amp;gt;&amp;gt;‚Äù
 },
] 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above json document , we have denormalized order data by embedding all the data related to the order such as line item details, shipping and billing contact details etc., into a single document.&lt;/p&gt;

&lt;p&gt;We are also flexible to change any fields or the sub objects/arrays format entirely anytime.&lt;/p&gt;

&lt;p&gt;Now we can retrieve the complete order details in a single query/ read operation against a single embedded document.&lt;/p&gt;

&lt;p&gt;Same way, updating the order with the item details and shipping information also can be done in a single update/write operation against the single order document.&lt;/p&gt;

&lt;p&gt;In general, it is always recommended to go for Embed. Except for some specific cases where we need to go for Reference. Embedding also improves query-read performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-4W2p9gXD1PQ/YRDD972-OPI/AAAAAAAAAEc/jgkyZVPBTO8AP96wxpzcJyP1vmOph5oSgCLcBGAsYHQ/s881/Screen%2BShot%2B2021-08-08%2Bat%2B10.57.44%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVHhn8vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-4W2p9gXD1PQ/YRDD972-OPI/AAAAAAAAAEc/jgkyZVPBTO8AP96wxpzcJyP1vmOph5oSgCLcBGAsYHQ/w640-h576/Screen%252BShot%252B2021-08-08%252Bat%252B10.57.44%252BPM.png" alt="When to use Embed Data Model Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference-data-model-pattern"&gt;
  &lt;/a&gt;
  Reference data model pattern
&lt;/h4&gt;

&lt;p&gt;As long as we have less data to embed, we are good with Embedding Schema design. For one-one and one-few relationship entities, Embedding Data model pattern is the best choice.&lt;/p&gt;

&lt;p&gt;But if we have too much data to embed, for one-many relationship entities where the child documents can grow above the limit or where the data might change frequently, it is better to go Referencing data model pattern.&lt;/p&gt;

&lt;p&gt;For example, a library product catalog can have "n" number of book items which keep changing on a daily basis and it can experience growth regularly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product_Catalog&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚ÄúProduct_Catolog‚Äù : 
{ 
  ‚Äúid‚Äù: ‚Äú1‚Äù, 
  ‚Äúlibraryname‚Äù: ‚Äú&amp;lt;&amp;lt;libraryname&amp;gt;&amp;gt;‚Äù, 
  ‚Äúproduct_catalog_no‚Äù: ‚Äú1234‚Äù, 
  ‚Äúbooks‚Äù: [‚ÄúBookId(‚Äò1111‚Äô)‚Äù, ‚ÄúBookId(‚Äò2222‚Äô)‚Äù, ‚ÄúBookId(‚Äò3333‚Äô)‚Äù] 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚Äúbooks‚Äù :[ 
 { 
   ‚Äú_id‚Äù : ‚ÄúId(‚Äò1111‚Äô)‚Äù, 
   ‚Äútitle‚Äù : ‚ÄúBook 1111‚Äù, 
   ‚Äúauthor‚Äù : ‚ÄúAuthor 1111‚Äù, 
   ‚Äúqty‚Äù: ‚Äú10‚Äù, 
   ‚Äúprice‚Äù:‚Äù 24.99" 
 } 
 { 
   ‚Äú_id‚Äù : ‚ÄúId(‚Äò2222‚Äô)‚Äù, 
   ‚Äútitle‚Äù : ‚ÄúBook 2222‚Äù, 
   ‚Äúauthor‚Äù : ‚ÄúAuthor 2222‚Äù, 
   ‚Äúqty‚Äù: ‚Äú15‚Äù, 
   ‚Äúprice‚Äù:‚Äù 30.99" 
 } 
 { 
   ‚Äú_id‚Äù : ‚ÄúId(‚Äò3333‚Äô)‚Äù, 
   ‚Äútitle‚Äù : ‚ÄúBook 3333‚Äù, 
   ‚Äúauthor‚Äù : ‚ÄúAuthor 3333‚Äù, 
   ‚Äúqty‚Äù: ‚Äú20‚Äù, 
   ‚Äúprice‚Äù:‚Äù 14.99" 
 } 
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, our book documents are independent of the parent product_catalog document. Any changes to the book documents can be updated separately.&lt;/p&gt;

&lt;p&gt;Another key examples for frequent data updates are weather, stock exchange etc., where we can expect changes consistently. For these examples, embedding data model pattern may not be a good choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-PtSjeRwX-Ho/YRDEm6Q_uEI/AAAAAAAAAEk/1Ij2Zwl-FRMcdtc029DXd_s9H-2DPvBmQCLcBGAsYHQ/s911/Screen%2BShot%2B2021-08-08%2Bat%2B11.00.18%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l2jFbU6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-PtSjeRwX-Ho/YRDEm6Q_uEI/AAAAAAAAAEk/1Ij2Zwl-FRMcdtc029DXd_s9H-2DPvBmQCLcBGAsYHQ/w640-h544/Screen%252BShot%252B2021-08-08%252Bat%252B11.00.18%252BPM.png" alt="When to use Reference Data Model Pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a nutshell, there are different ways we can model our data in Mongo DB by embedding data or by referencing documents similar to normalizing data in SQL.&lt;/p&gt;

&lt;p&gt;By using these two data model patterns, we can make efficient, scalable and powerful queries to documents that are completely very useful and impactful for your applications.&lt;/p&gt;

&lt;p&gt;Based on my learning and experience, I have only touched a bit about Embedding and Referencing schema designs. There are still lot to read and learn about all different one-one, one-few, one-many, many-many relationship examples to know more detail about these data model patterns and best practices.&lt;/p&gt;

&lt;p&gt;Please check out the official Mongo DB and Azure Cosmos DB documentation for further learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-vhy2e5MLeJM/YRDFn_pkmgI/AAAAAAAAAEs/UzqE4Echs9M0NuCwcKRtWK_m0m6ca5jrgCLcBGAsYHQ/s1026/Screen%2BShot%2B2021-08-08%2Bat%2B11.04.56%2BPM.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKTUdsrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-vhy2e5MLeJM/YRDFn_pkmgI/AAAAAAAAAEs/UzqE4Echs9M0NuCwcKRtWK_m0m6ca5jrgCLcBGAsYHQ/w640-h134/Screen%252BShot%252B2021-08-08%252Bat%252B11.04.56%252BPM.png" alt="Embed vs Reference Summary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>mongodb</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>The Self Provisioning Runtime</title>
      <author>swyx</author>
      <pubDate>Mon, 30 Aug 2021 01:02:48 +0000</pubDate>
      <link>https://dev.to/swyx/the-self-provisioning-runtime-3g6d</link>
      <guid>https://dev.to/swyx/the-self-provisioning-runtime-3g6d</guid>
      <description>&lt;p&gt;If the Platonic ideal of Developer Experience is a world where you "&lt;a href="https://twitter.com/swyx/status/1428740355994767369"&gt;Just Write Business Logic&lt;/a&gt;", the logical endgame is a language+infrastructure combination that figures out everything else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two paraphrases as assertions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People who are really serious about developer experience should make their own programming language. (&lt;a href="https://www.brainyquote.com/quotes/alan_kay_375550"&gt;quote&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Developer Experience advances by extending the number of important problems our code handles without thinking of them. (&lt;a href="https://en.wikiquote.org/wiki/Alfred_North_Whitehead#:~:text=Civilization%20advances%20by%20extending%20the,be%20made%20at%20decisive%20moments."&gt;quote&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I feel a strong intuition of what the future of programming languages holds for practical (non-academic) developers, but lack the formal background to fully specify it. I'll write down the parts of the elephant I feel, and hope that the rest is so obvious that you, dear reader, shout and scream at me to fill in the blanks of my ignorance. &lt;em&gt;Please get in touch!!! My ignorance could fill a (blank) book and I need to know who to follow and what to read.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My central assertion&lt;/strong&gt;: Advancements in two fields ‚Äî programming languages and cloud infrastructure ‚Äî will converge in a single paradigm: where all resources required by a program will be &lt;strong&gt;automatically&lt;/strong&gt; provisioned, and optimized, &lt;em&gt;by the environment that runs it&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-in-languages"&gt;
  &lt;/a&gt;
  Developer Experience in Languages
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I am going to grossly oversimplify in order to make a point, which will infuriate some of you. I apologize in advance. It bothers me too but I did it anyway to strip out noise. If you have better examples to offer, please get in touch!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of Java's key advantages over C++ was its automatic garbage collection, whereas one of Go's key advantages over Java is its native CSP model. At a 50,000 ft view you can see languages as advancing by the number of hard problems that are elegantly solved by convention or language feature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5a9qYNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuhhzfjn1fshlbuyyhxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5a9qYNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuhhzfjn1fshlbuyyhxa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've drawn the above chart as though Go is the perfect end state of things, but I want you to know that that is more due to my own lack of knowledge about what else could be abstracted. &lt;a href="https://excalidraw.com/#json=5072020500905984,BgzMaD3_h6g46pLzHpPBcg"&gt;Please improve it if you can&lt;/a&gt; and I'll update and credit you. Adrian Colyer also has &lt;a href="https://blog.acolyer.org/2019/01/25/programming-paradigms-for-dummies-what-every-programmer-should-know/"&gt;this work of art&lt;/a&gt; which should satisfy the more rigorously inclined:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIWYxrQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo0cn6cme96kmgyn7q5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIWYxrQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo0cn6cme96kmgyn7q5p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my oversimplistic interpretation, programming language advancement (and improvement in developer experience) could be viewed as the identification of programming chores that can be cleanly extracted into some shared codebase/convention with almost no loss in power.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we can clearly define a new chore, we can make it a language feature.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A "language paradigm" doesn't have to be a standalone, full fledged new-parser-lexer-required programming language to do this job. Every framework, from React to Rails, parasitically imposes its own grammar and rules atop a host language, and good API design is indistinguishable from language design. &lt;em&gt;(I gave a talk on &lt;a href="https://www.youtube.com/watch?v=Dz4q_bNDqfo"&gt;React-as-Language&lt;/a&gt; last year if you are interested in more on this.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, language development to date has mostly proceeded agnostic to infrastructure concerns, at the exact same time when infrastructure engineers are embracing languages to solve their problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-in-infrastructure"&gt;
  &lt;/a&gt;
  Developer Experience in Infrastructure
&lt;/h2&gt;

&lt;p&gt;What we lost when we &lt;a href="https://www.notion.so/ff8a4f6757286444fa20b43f6b98b205"&gt;broke up the monolith&lt;/a&gt; to move to the cloud was the assumption that everything our program needed would be in the box our program ran in. Suddenly we needed to provision storage, databases, VMs, containers, clusters, message queues, identity providers, gateways, and more and more and more vendor logos.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i758xXKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E7-aTZlVgAMWjo5.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I have updated the meme&lt;br&gt;&lt;br&gt;pray i don't update it further &lt;a href="https://t.co/u40HMAdd3p"&gt;twitter.com/swyx/status/14‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:59 PM - 04 Aug 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            swyx
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

        &lt;/div&gt;
        &lt;a class="mentioned-user" href="https://dev.to/brianleroux"&gt;@brianleroux&lt;/a&gt;
 https://t.co/EnwmCLdf1I
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1423025792783568899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1423025792783568899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1423025792783568899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Managing all this by hand was impossible, so we moved toward declarative infrastructure, variously called Programmable Infrastructure or Infrastructure as Code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_2sxTGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1vy6bl5wdvonqgxqpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_2sxTGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1vy6bl5wdvonqgxqpg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works until you are knee deep in 30 minute debug loops pushing thousands of lines of YAML to see if &lt;em&gt;this&lt;/em&gt; time it'll work, and start wishing for mature software engineering tooling like testing, code reuse, and linting/completions. At least that's how I see AWS CDK:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbDb7Ob0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ist7stz9u9k9kdaslkzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbDb7Ob0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ist7stz9u9k9kdaslkzr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The serverless movement started off with simple stateless functions like AWS Lambda, but with the advent of container based solutions like &lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt; and &lt;a href="https://cloud.google.com/run"&gt;Google Cloud Run&lt;/a&gt;, "serverless" has now come to mean autoscaling. This was another "chore" that is now increasingly part of every DevOps toolkit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-ejmkJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs7tvd6o5kp9wx05maaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-ejmkJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs7tvd6o5kp9wx05maaz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://excalidraw.com/#json=5169064850751488,0NoC4TlNlKx1UWvwlH9ZaA"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;But, just like with languages, &lt;strong&gt;there are new chores to be found&lt;/strong&gt;. The original intent of the DevOps movement was getting Devs to do their own Ops, but it feels like the outcome was mostly Ops people doing more Dev to keep up with the Joneses. If DevOps was successful enough, or if platforms were good enough at their jobs, Ops work should disappear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eliminating-the-devops-divide"&gt;
  &lt;/a&gt;
  Eliminating the DevOps divide
&lt;/h2&gt;

&lt;p&gt;With a cutting edge stack today, you can fully describe your AWS Infrastructure in TypeScript, and write your application code in TypeScript... but yet these are separately executed and run things, with gobs of glue code between them (both explicit, in the form of connection strings, resource identifiers and client secrets, and implicit, in the form of SDKs).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dabit3/next.js-cdk-amplify-workshop"&gt;Check out this example&lt;/a&gt; (from my former team at AWS! no diss intended at all). Here's just a glimpse of the Infra setup code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// // Infra code&lt;/span&gt;
&lt;span class="c1"&gt;// lib/next-backend-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cognito&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-cognito&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-appsync&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ddb&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// lib/next-backend-stack.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GraphqlApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-blog-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cdk-blog-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;logConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fieldLogLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FieldLogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./graphql/schema.graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;authorizationConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultAuthorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;authorizationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AuthorizationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;apiKeyConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;expires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Expiration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;additionalAuthorizationModes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;authorizationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;appsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AuthorizationType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;USER_POOL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;userPoolConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;userPool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Create the function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AppSyncPostHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_14_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambda-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;memorySize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Set the new Lambda function as a data source for the AppSync API&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lambdaDs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLambdaDataSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambdaDatasource&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postLambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a glimpse at the app code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;docClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DynamoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DocumentClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPostById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POST_TABLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;docClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DynamoDB error: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getPostById&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's still an awful lot of code between your app and its platform.&lt;/p&gt;

&lt;p&gt;What will it take to "just write business logic" and have the platform figure out the rest?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WvO-jzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3pfp9ohds23tfhehm6p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://excalidraw.com/#json=5930939972583424,_n4oZLK-FuDS_vXS0icDQQ"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;On a very trivial basis, we already have this. Where Heroku used to require buildpacks, most PaaS platforms now have heuristics that determine the project type for build and environment setup, automatically adapting for when you have a &lt;code&gt;Gemfile&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, &lt;code&gt;.nvmrc&lt;/code&gt;, or &lt;code&gt;docker-compose.yml&lt;/code&gt;. Platforms like Netlify and Vercel are going deeper than language runtimes, &lt;a href="https://www.netlify.com/blog/2019/04/24/zero-config-yet-technology-agnostic-how-netlify-dev-detectors-work/"&gt;detecting frameworks&lt;/a&gt; and static site generators, but they are still mostly focused on build dependencies.&lt;/p&gt;

&lt;p&gt;Self-provisioning can go further than just smarter build automation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imagine if you could provision a DynamoDB table by just requiring &lt;code&gt;@begin/data&lt;/code&gt; in your app code (similar but not exactly like &lt;a href="https://docs.begin.com/en/data/begin-data"&gt;Begin Data&lt;/a&gt;!)&lt;/li&gt;
&lt;li&gt;Vercel and &lt;a href="https://docs.netlify.com/configure-builds/common-configurations/next-js/"&gt;Netlify&lt;/a&gt; set up serverless functions based on Next.js routes and specially designated folders.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/forms/setup/"&gt;Netlify Forms&lt;/a&gt; scan your generated HTML and provisions any form endpoints and storage needed (see my &lt;a href="https://github.com/sw-yx/gatsby-netlify-form-example-v2"&gt;old Gatsby demo here&lt;/a&gt; to see it in action or &lt;a href="https://www.swyx.io/sveltekit-netlify-forms/"&gt;my recent one with Svelte&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pulumi.com/blog/building-your-first-serverless-app-using-only-javascript/"&gt;Pulumi&lt;/a&gt; isn't automatic but combines app and provisioning logic in a very neatly concise way that would basically function as though the provisioning and app logic were actually one.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wasp-lang/wasp"&gt;Wasp-lang&lt;/a&gt; combines React routing and the Prisma schema together in a different way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this only scratches the surface of what is possible when you merge language and infrastructure. If you go down &lt;a href="https://www.notion.so/ff8a4f6757286444fa20b43f6b98b205"&gt;the list of Jobs to Be Done of a Cloud&lt;/a&gt; you can see all of these can be automatically provisioned as part of the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#temporalio"&gt;
  &lt;/a&gt;
  Temporal.io
&lt;/h2&gt;

&lt;p&gt;Part of &lt;a href="https://www.swyx.io/why-temporal/"&gt;my original Temporal pitch&lt;/a&gt; made reference to the fact that you could dynamically create task queues and timers in your application code, and Temporal would take care of it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// task queue&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workflowClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-workflow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;taskQueue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-task-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;workflow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// timer&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasUserResponded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;waitForUser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hasUserResponded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;DAYS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// durably set timer for 1 week!&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hasUserResponded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ... remind user or something&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because Temporal Server already contains the infrastructure to handle tasks and timers, Temporal &lt;em&gt;users&lt;/em&gt; can essentially offload that problem to a central "Platform" or "Infrastructure" team. Still, as of today this cannot be considered self-provisioning, because Temporal still relies on manual monitoring and scaling (this is the central problem that Temporal Cloud solves).&lt;/p&gt;

&lt;p&gt;Besides, reliable async primitives are great, but far from the totality of infrastructure that a modern app requires. &lt;strong&gt;I want ONE paradigm that auto-provisions ALL of it&lt;/strong&gt; based on the code I write*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-not-language"&gt;
  &lt;/a&gt;
  Runtime, not Language?
&lt;/h2&gt;

&lt;p&gt;Does it &lt;em&gt;have&lt;/em&gt; to be a new language? This is what Paul Biggar is working on with &lt;a href="https://docs.darklang.com/datastores/"&gt;Darklang&lt;/a&gt;, where Datastores are colocated with HTTP routing and Cron and Functions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wyzRBQz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dmpkra9yjktktoyye98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wyzRBQz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dmpkra9yjktktoyye98.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You not only &lt;em&gt;can't&lt;/em&gt; code against a database that doesn't exist, you can't even code against &lt;em&gt;traffic&lt;/em&gt; that doesn't exist, ensuring your code is always valid (within Dark's universe).&lt;/p&gt;

&lt;p&gt;Even if Dark is too strict for you (as it is for most), you could imagine taking advantage of a strongly typed, purposefully designed language that can be statically analyzed for all its infrastructural dependencies, which then translates to the necessary resource languages of the big clouds.&lt;/p&gt;

&lt;p&gt;My sense is it doesn't &lt;em&gt;have&lt;/em&gt; to be a new language. Imposing special rules on execution and syntax, and taking over the compiler or runtime ‚Äî we even call our engineers &lt;a href="https://www.notion.so/635c41e4583f45989da524cf14b69751"&gt;Language Runtime Engineers&lt;/a&gt; ‚Äî may be enough. &lt;/p&gt;

&lt;p&gt;Runtime optimizations are also a &lt;em&gt;huge&lt;/em&gt; opportunity for dynamic (not static + upfront) self-provisioning: after all, what is serverless but a self-provisioning runtime based on traffic?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;People are wondering &lt;a href="http://tagide.com/blog/academia/research-in-programming-languages/"&gt;if there is still anything left to innovate in programming languages&lt;/a&gt;, but I write because I am almost certain that there is. But before we get there, the right move is probably a self provisioning &lt;em&gt;runtime&lt;/em&gt; where we can prototype all these ideas - at the intersection of language and infrastructure.&lt;/p&gt;

</description>
      <category>dx</category>
      <category>ideas</category>
    </item>
    <item>
      <title>VPN Gratuita no Linux¬† com a ProtonVPN</title>
      <author>Mayanna Oliveira</author>
      <pubDate>Sun, 29 Aug 2021 23:21:42 +0000</pubDate>
      <link>https://dev.to/mayannaoliveira/vpn-gratuita-no-linux-com-a-protonvpn-2ohl</link>
      <guid>https://dev.to/mayannaoliveira/vpn-gratuita-no-linux-com-a-protonvpn-2ohl</guid>
      <description>&lt;p&gt;A protonVPN oferece servi√ßo de VPN gratuitamente. Acompanhe o passo a passo de como instalar e configurar a VPN em seu computador:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observa√ß√£o:&lt;/strong&gt; Busque pelo site da &lt;a href="https://protonvpn.com/free-vpn/"&gt;ProtonVPN&lt;/a&gt; a vers√£o atual para instala√ß√£o a citada nos passos 6 e 7 foi a  &lt;em&gt;protonvpn-stable-release_1.0.1-1_all.deb&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Acesse o site da &lt;a href="https://protonvpn.com/free-vpn/"&gt;ProtonVPN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Clique no bot√£o de se isncrever.&lt;/li&gt;
&lt;li&gt;Escolha o plano que deseja usar, pode ser o &lt;a href="https://protonvpn.com/pricing"&gt;gratuito ou o pago&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No &lt;a href="https://account.protonvpn.com/dashboard"&gt;dashboard&lt;/a&gt; tem uma barra lateral clique em "&lt;a href="https://account.protonvpn.com/downloads"&gt;baixar&lt;/a&gt;".&lt;/li&gt;
&lt;li&gt;√â poss√≠vel ver as formas de cpnfigurar a VPN por√©m o clique em "[Linux]" para baixar e instalar o aplicativo do ProtonVPN.&lt;/li&gt;
&lt;li&gt;Baixe  o arquivo .deb se preferir use o comando &lt;code&gt;https://protonvpn.com/download/protonvpn-stable-release_1.0.1-1_all.deb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instale a o .deb que foi baixado pode ser usando um gerenciador de pacotes ou pelo comando &lt;code&gt;sudo apt-get install protonvpn-stable-release_1.0.1-1_all.deb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Depois via terminal atualize e verifique por atualiza√ß√µes pelos comandos:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;protonvpn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Busque o √≠cone do ProtonVPN entre os arquivos instalados e clique para iniciar a interface visual.&lt;/li&gt;
&lt;li&gt; Insira o email e senha que foi usou para se inscrever e selecione a VPN que preferir.&lt;/li&gt;
&lt;li&gt; Na barra do Ubuntu ser√° poss√≠vel ver um √≠cone de uma chave indicando que a VPN foi ativada.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Caso tenha d√∫vidas ou esteja usando um outro sistema operacional por favor, leia o &lt;a href="https://protonvpn.com/support/linux-vpn-setup/"&gt;guia de instala√ß√£o&lt;/a&gt; para entender como configurar e usar a ferramenta. Na √°rea de &lt;a href="https://protonvpn.com/support/"&gt;ajuda do suporte&lt;/a&gt; √© poss√≠vel ter acesso a informa√ß√µes sobre a conta, conte√∫do de acesso entre outros.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Refer√™ncias:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://protonvpn.com/free-vpn/"&gt;ProtonVPN&lt;/a&gt; e &lt;a href="https://protonvpn.com/support/linux-vpn-setup/"&gt;guia de instala√ß√£o&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prop%C3%B3sito-dos-artigos-e-postagens"&gt;
  &lt;/a&gt;
  Prop√≥sito dos Artigos e Postagens
&lt;/h2&gt;

&lt;p&gt;Eu escrevo esses artigos e postagens para contribuir com a comunidade de Tecnologia da Informa√ß√£o e para compartilhar meu conhecimento e habilidades. A sua intera√ß√£o √© muito importante ent√£o, compartilhe, curta e divulge essa postagem. Agrade√ßo a todos que tem colaborado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Postagem Dispon√≠vel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maosnocodigo.hashnode.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGKwbapT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/%25F0%259F%2593%2583%2520Publicado_no-Hashnode-blue%3F%26style%3Dfor-the-badge%26logoColor%3D00C11C" alt="Hashnode"&gt;&lt;/a&gt; &lt;a href="https://www.evernote.com/shard/s580/sh/15414d07-079a-b55d-320d-6327c0b51901/8978e9e6ad6f351034314b5875485a67"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ped_4h---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Compartilhado%2520no-Evernote-green%3Flogo%3Devernote%26style%3Dfor-the-badge" alt="evernote"&gt;&lt;/a&gt; &lt;a href="https://dev.to/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7dZZ_M3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Dispon%25C3%25ADvel%2520no-dev.to-black%3Flogo%3Ddev.to%26style%3Dfor-the-badge" alt="dev.to"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redes sociais&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pQJI-Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite" alt="github"&gt;&lt;/a&gt; &lt;a href="https://dev.to/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuQ4GWmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/dev.to-100000%3Fstyle%3Dfor-the-badge%26logo%3Ddev.to%26logoColor%3Dwhite" alt="dev.to"&gt;&lt;/a&gt; &lt;a href="//mailto:mayannait@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYAECtfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gmail-D14836%3Fstyle%3Dfor-the-badge%26logo%3Dgmail%26logoColor%3Dwhite%26link%3Dmailto:mayannait%40gmail.com" alt="gmail"&gt;&lt;/a&gt; &lt;a href="https://api.whatsapp.com/message/5XLG4UPSFCNWP1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9iV3HR9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/WhatsApp-25D366%3Fstyle%3Dfor-the-badge%26logo%3Dwhatsapp%26logoColor%3Dwhite" alt="whatsapp"&gt;&lt;/a&gt; &lt;a href="https://linktr.ee/mayannaoliveira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qfz5Cpa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linktree-39E09B%3Fstyle%3Dfor-the-badge%26logo%3Dlinktree%26logoColor%3Dwhite" alt="linktree"&gt;&lt;/a&gt; &lt;a href="https://www.instagram.com/oliveiramayanna/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg7TEMKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Instagram-E4405F%3Fstyle%3Dfor-the-badge%26logo%3Dinstagram%26logoColor%3Dwhite" alt="instagram"&gt;&lt;/a&gt; &lt;a href="//ttps://twitter.com/oliveiramayanna/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XRTiaB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/twitter-blue%3Fstyle%3Dfor-the-badge%26logo%3Dtwitter%26logoColor%3Dwhite" alt="twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Se inscreva, curta e compartilhe!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Searching Better In Google Using 5 Tricks!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 29 Aug 2021 22:56:40 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/searching-better-in-google-using-5-tricks-41l1</link>
      <guid>https://dev.to/ayabouchiha/searching-better-in-google-using-5-tricks-41l1</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today, I'm going to share with you 5 useful tips &amp;amp; tricks to search better on google and find what you want easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related"&gt;
  &lt;/a&gt;
  related
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;related:&lt;a href="http://www.website.com"&gt;www.website.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;related: is a keyword used to find the websites that are like the specified one&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MJlyVOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghy4jk2zouk4uuwckc7r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MJlyVOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghy4jk2zouk4uuwckc7r.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-double-quotes"&gt;
  &lt;/a&gt;
  "" (double quotes)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"sentence"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"": helps you to tell the search engine that the results have to include the exact sentence between quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q-ftY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvez8s9sjjjsas7pn3a7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q-ftY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvez8s9sjjjsas7pn3a7.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#site"&gt;
  &lt;/a&gt;
  site
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;site:&lt;a href="http://www.website.com"&gt;www.website.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;site: is used for searching for something on a specific website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lFvZhHx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z305egl146np950r7psz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lFvZhHx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z305egl146np950r7psz.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-minus"&gt;
  &lt;/a&gt;
  - (minus)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;-word&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;minus: used for excluding and ignoring specific words&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuv5SWQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1432cwuxogsjyqhvj4z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuv5SWQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1432cwuxogsjyqhvj4z.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filetype"&gt;
  &lt;/a&gt;
  filetype
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;filetype:extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;filetype: used for specifying the file type of the wanted results&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZX_1fiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6yk4xfhzx702cf3iexf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZX_1fiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6yk4xfhzx702cf3iexf.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eg3wHwXDIEc"&gt;https://www.youtube.com/watch?v=eg3wHwXDIEc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
